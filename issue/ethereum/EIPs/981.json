{
  "url": "https://api.github.com/repos/ethereum/EIPs/issues/981",
  "repository_url": "https://api.github.com/repos/ethereum/EIPs",
  "labels_url": "https://api.github.com/repos/ethereum/EIPs/issues/981/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/EIPs/issues/981/comments",
  "events_url": "https://api.github.com/repos/ethereum/EIPs/issues/981/events",
  "html_url": "https://github.com/ethereum/EIPs/issues/981",
  "id": 312168344,
  "node_id": "MDU6SXNzdWUzMTIxNjgzNDQ=",
  "number": 981,
  "title": "ERC981: Partial Ownership Standard",
  "user": {
    "login": "jdkanani",
    "id": 1692593,
    "node_id": "MDQ6VXNlcjE2OTI1OTM=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1692593?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jdkanani",
    "html_url": "https://github.com/jdkanani",
    "followers_url": "https://api.github.com/users/jdkanani/followers",
    "following_url": "https://api.github.com/users/jdkanani/following{/other_user}",
    "gists_url": "https://api.github.com/users/jdkanani/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jdkanani/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jdkanani/subscriptions",
    "organizations_url": "https://api.github.com/users/jdkanani/orgs",
    "repos_url": "https://api.github.com/users/jdkanani/repos",
    "events_url": "https://api.github.com/users/jdkanani/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jdkanani/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 2328627851,
      "node_id": "MDU6TGFiZWwyMzI4NjI3ODUx",
      "url": "https://api.github.com/repos/ethereum/EIPs/labels/stale",
      "name": "stale",
      "color": "000000",
      "default": false,
      "description": ""
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 19,
  "created_at": "2018-04-07T04:06:48Z",
  "updated_at": "2022-01-01T23:11:32Z",
  "closed_at": "2022-01-01T23:11:32Z",
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "Preamble\r\n---\r\n\r\n```\r\nEIP: <to be assigned>\r\nTitle: Partial Ownership Standard\r\nAuthor: Brij Bhasin <brij@akodo.in>, Jaynti Kanani <jdkanani@matic.network>\r\nType: Standard\r\nCategory: ERC\r\nStatus: Draft\r\nCreated: 2018-04-07\r\n```\r\n\r\nSimple Summary\r\n---\r\n\r\nAn interface for tokens that are unique, fungible and allow partial ownership and trade of digital and real assets.\r\n\r\n\r\nMotivation\r\n---\r\n\r\nThe current ERC Tokens while useful leave out key aspects of information needed to enable tokenized trade of real-world assets on distributed ledger technology. ERC20 fungible interface is great in its simplicity for issuing tokens that are fungible, but due to its open design and extensibility, can lead to manipulation by bad actors. ERC721 non-fungible interface is great in allowing uniqueness of token to represent an asset, and track its ownership, it restricts fungibility.\r\n \r\nRationale\r\n---\r\nThis proposal serves to describe a new Ethereum Interface for issuing tokens for asset owners who come to a marketplace with a finite quantity of their asset to trade, representing 100% ownership of that particular issue. They then choose to divide the asset into divisible units that increase fungibility of that asset.\r\n\r\nThe initial price and type of the value of the entire asset or it divisible unit is determined by the owner. Once the owner puts it up for trade and proposes the value and mechanism for exchange. Once an agreement is reached on the type of value, the seller and buyer agree on the price of the exchange on the original asset with the value being offered by the buyer.\r\n\r\nIn theory, such a system would allow the owner of a fungible ERC 20 to exchange specific units with non-fungible ERC 721 tokens as long as the seller and buyer agree on a value assignment mechanism for each asset. \r\n\r\nPart-Owner Interface\r\n---\r\nPart-Owner is a free, open standard that describes how to build fungible yet uniquely representative tokens of the underlying asset on the Ethereum blockchain. While most tokens are fungible (every token is the same as every other token), and some tokens are non-fungible (every token is unique), Part-Owner Tokens (POTs) uniquely represent a divisible unit ownership of an asset, which is tradeable for divisible unit ownership of another asset as long as there is agreement on the value mechanism.\r\n\r\nFor eg. A Sports League can issue POTs for each Team in the League.  Fans of that team can put bids to buy POTs and collectively own their team.    \r\n\r\nSpecification\r\n---\r\nThis ERC defines a minimum part-owner interface that a smart contract must implement to allow tokens to be managed, owned, and traded. It does not mandate a standard for token metadata or restrict adding supplemental functions.\r\n\r\nDesign concepts to incorporate – \r\n * Mother asset ownership to be capped to 100%\r\n * Mother Asset to be divisible up to 18 decimal points of Child Assets\r\n * Collective ownership of Child Assets defines ownership of Mother Asset\r\n * Mother Asset have Types [Physical, Digital] (Physical – Land) (Digital – Sports Leagues, Private Partnerships, Venture Funds)\r\n * Child Assets have Units (Weight, Area, Number, Decimals)\r\n * Mother Asset has an Issuer\r\n * Child Assets have Owners\r\n * Mother Asset has Issue Value\r\n * Child Assets have Price\r\n\r\nToken\r\n---\r\n\r\n#### Methods \r\n\r\n**name**\r\n\r\nReturns the name of the token - e.g. \"CryptoPremierLeague\", \"VirtualSmartFund\".\r\n\r\nOPTIONAL -  This method can be used to improve usability, but interfaces and other contracts MUST NOT expect these values to be present.\r\n\r\n```js\r\nfunction name() public view returns (string _name)\r\n```\r\n\r\n**symbol**\r\n\r\nReturns the symbol of the token.  E.g. \"CPL\", \"VSF\".\r\n\r\nOPTIONAL - This method can be used to improve usability, but interfaces and other contracts MUST NOT expect these values to be present.\r\n\r\n```js\r\nfunction symbol() public view returns (string _symbol)\r\n```\r\n\r\n**decimals**\r\n\r\nReturns the number of decimals the token uses - e.g. 8, means to divide the token amount by 100000000 to get its user representation.\r\n \r\nOPTIONAL - This method can be used to improve usability, but interfaces and other contracts MUST NOT expect these values to be present.\r\n\r\n```js\r\nfunction decimals() public view returns (uint8 _decimals)\r\n```\r\n\r\n**balanceOf**\r\n\r\nReturns the number of tokens (percentage of underlying mother asset) assigned to `_owner`.\r\n\r\n```js\r\nfunction balanceOf(address _owner) public view returns (uint256 _balance)\r\n```\r\n\r\n**divide**\r\n\r\nDivides token (underlying asset) into multiple tokens with specified amount, type and metadata - if and only if identity of msg.sender == ownerOf(_tokenId). A successful `divide` MUST fire the Transfer event for each new POT (defined below).\r\n\r\nOwners are array of owner addresses. `sigs` are array of signatures which required to divide the token (underlying asset). Signature type can be `approval` or `acknowledgement`.\r\n\r\nThis method MUST divide token into multiple child tokens or throw, no other outcomes can be possible. Reasons for failure include (but are not limited to):\r\n\r\n* `msg.sender` is not the owner of `_tokenId`\r\n* invalid or insufficient signatures\r\n\r\n```js\r\nfunction divide(uint256 _tokenId, address[] _owners, uint256[] amounts, string[] types, string[] metadata, bytes[] sigs) public payable\r\n```\r\n\r\n**merge**\r\n\r\nMerges tokens (underlying assets) into single token with metadata - and `msg.sender` the owner of new token. A successful `merge` MUST fire the `Transfer` event for new POT (defined below).\r\n\r\nThis method MUST merge tokens into single token or throw, no other outcomes can be possible. Reasons for failure include (but are not limited to):\r\n\r\n* invalid token id in `_tokenIds`\r\n* invalid or insufficient signatures\r\n\r\n```js\r\nfunction merge(uint256[] _tokenIds, uint256 amount, string type, string metadata, bytes[] sigs) public payable\r\n```\r\n\r\n**transfer**\r\n\r\nAssigns the ownership of the POT with ID `_tokenId` to `_to` if and only if msg.sender == ownerOf(_tokenId). A successful transfer MUST fire the Transfer event (defined below).\r\n\r\nThis method MUST transfer ownership to `_to` or throw, no other outcomes can be possible. Reasons for failure include (but are not limited to):\r\n\r\n* `msg.sender` is not the owner of `_tokenId`\r\n* invalid or insufficient signatures\r\n\r\n`_tokenId` does not represent a POT currently tracked by this contract\r\n`_to` is `0` (Conforming contracts MAY have other methods to destroy or burn POTs, which are conceptually \"transfers to `0`\" and will emit Transfer events reflecting this. However, `transfer(0, tokenId, sigs)` MUST be treated as an error.)\r\n\r\nA conforming contract MUST allow the current owner to \"transfer\" a token to themselves, as a way of affirming ownership in the event stream. (i.e. it is valid for `_to == ownerOf(_tokenID)`.) This \"no-op transfer\" MUST be considered a successful `transfer`, and therefore MUST fire a Transfer event (with the same address for `_from` and `_to`).\r\n\r\nTriggers Event: `Transfer`\r\n\r\n```js\r\nfunction transfer(address _to, uint256 _tokenId, bytes[] sigs) public payable\r\n```\r\n\r\n#### Basic Ownership\r\n\r\n**owners**\r\n\r\nReturns addresses of all owners currently holding POTs.\r\n\r\n```js\r\nfunction owners() public view returns (address[] _owners)\r\n```\r\n\r\n**ownerOf**\r\n\r\nReturns the address currently marked as the owner of `_tokenId`. This method MUST throw if `_tokenId` does not represent a POT currently tracked by this contract. This method MUST NOT return 0 (POTs assigned to the zero identity are considered destroyed, and queries about them should throw).\r\n\r\n```js\r\nfunction ownerOf(uint256 _tokenId) public view returns (address owner)\r\n```\r\n\r\n**getToken**\r\n\r\nReturns token data of `_tokenId`, if `_tokenId` represents POT currently tracked by this contract.\r\n\r\n```js\r\nfunction getToken(uint256 _tokenId) public view returns (address _owner, uint256 _amount, string _type, string _metadata)\r\n```\r\n\r\n**totalTokens**\r\n\r\nReturns number of tokens owned by `_owner`\r\n\r\n```js\r\nfunction totalTokens(address _owner) public view returns (uint256 _totalTokens)\r\n```\r\n\r\n**tokenOfOwnerByIndex**\r\n\r\nOPTIONAL - It is recommended that this method is implemented for enhanced usability, but interfaces and other contracts MUST NOT depend on the existence of this method.\r\n\r\nReturns the nth POT assigned to the `_owner`, with n specified by the `_index` argument. This method MUST throw if `_index >= totalTokens(_owner)`.\r\n\r\n```js\r\nfunction tokenOfOwnerByIndex(address _owner, uint256 _index) public view returns (uint256 _tokenId)\r\n```\r\n\r\nRecommended usage is as follows:\r\n\r\n```js\r\nuint256 numberOfTokens = partOwnerTokenContract.totalTokens(owner);\r\n\r\nuint256[] memory ownerTokens = new uint256[](numberOfTokens);\r\n\r\nfor (uint256 i = 0; i < numberOfTokens; i++) {\r\n    ownerTokens[i] = partOwnerTokenContract.tokenOfOwnerByIndex(owner, i);\r\n}\r\n```\r\n#### Identity\r\n\r\n**getIdentity**\r\n\r\nReturns identity hash if `_owner` is valid owner of any child assets.\r\n\r\n```js\r\nfunction getIdentity(address _owner) public view returns (bytes32 _key);\r\n```\r\n\r\n#### POT metadata\r\n\r\n**tokenMetadata**\r\n\r\nOPTIONAL - It is recommended that this method is implemented for enhanced usability, but interfaces and other contracts MUST NOT depend on the existence of this method.\r\n\r\nReturns a [multiaddress](https://github.com/multiformats/multiaddr) string referencing an external resource bundle that contains (optionally localized) metadata about the POT associated with `_tokenId`. The string MUST be an `IPFS` or `HTTP(S)` base path (without a trailing slash) to which specific subpaths are obtained through concatenation. (`IPFS` is the preferred format due to better scalability, persistence, and immutability.) See [ERC721](https://github.com/ethereum/EIPs/issues/721)\r\n\r\n```js\r\nfunction tokenMetadata(uint256 _tokenId) public view returns (string infoUrl)\r\n```\r\n\r\n\r\n#### Events\r\n\r\n**Transfer**\r\n\r\nThis event MUST trigger when POT ownership is transferred via any mechanism.\r\n\r\nAdditionally, the creation of new asset MUST trigger a Transfer event for each newly created assets, with a `_from` to `0x0` and a `_to` key matching identity the owner of the new asset (possibly the smart contract itself). The deletion (or burn) of any asset MUST trigger a Transfer event with a `_to` as `0x0` and a `_from` address of the owner of the asset (now former owner).\r\n\r\n```js\r\nevent Transfer(address indexed _from, address indexed _to, uint256 _tokenId)\r\n```\r\n\r\n\r\nSolidity interface\r\n---\r\n\r\n```js\r\npragma solidity ^0.4.19;\r\n\r\ncontract ERC {\r\n    // Events\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _tokenId);\r\n\r\n    // Methods\r\n    function divide(uint256 _tokenId, address[] _owners, uint256[] amounts, string[] types, string[] metadata, bytes[] sigs) public payable;\r\n    function merge(uint256[] _tokenIds, uint256 amount, string type, string metadata, bytes[] sigs) public payable;\r\n    function transfer(address _to, uint256 _tokenId, bytes[] sigs) public payable;\r\n    \r\n    function balanceOf(address _owner) public view returns (uint256 _balance);\r\n    function owners() public view returns (address[] _owners);\r\n    function ownerOf(uint256 _tokenId) public view returns (address owner);\r\n    function getToken(uint256 _tokenId) public view returns (address _owner, uint256 _amount, string _type, string _metadata);\r\n    function totalTokens(address _owner) public view returns (uint256 _totalTokens);\r\n    function tokenOfOwnerByIndex(address _owner, uint256 _index) public view returns (uint256 _tokenId);\r\n    \r\n    // identity hash\r\n    function getIdentity(address _owner) public view returns (bytes32 _key);\r\n    \r\n    // OPTIONAL\r\n    function name() public view returns (string _name);\r\n    function symbol() public view returns (string _symbol);\r\n    function decimals() public view returns (uint8 _decimals);\r\n    \r\n    function tokenMetadata(uint256 _tokenId) public view returns (string infoUrl);\r\n}\r\n```\r\n\r\nCopyright \r\n---\r\n\r\nCopyright and related rights waived via [CC0](https://creativecommons.org/publicdomain/zero/1.0/).",
  "closed_by": {
    "login": "github-actions[bot]",
    "id": 41898282,
    "node_id": "MDM6Qm90NDE4OTgyODI=",
    "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/github-actions%5Bbot%5D",
    "html_url": "https://github.com/apps/github-actions",
    "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
    "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
    "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
    "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
    "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
    "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
    "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
    "type": "Bot",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/981/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/EIPs/issues/981/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/379454397",
    "html_url": "https://github.com/ethereum/EIPs/issues/981#issuecomment-379454397",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/981",
    "id": 379454397,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3OTQ1NDM5Nw==",
    "user": {
      "login": "MicahZoltu",
      "id": 886059,
      "node_id": "MDQ6VXNlcjg4NjA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MicahZoltu",
      "html_url": "https://github.com/MicahZoltu",
      "followers_url": "https://api.github.com/users/MicahZoltu/followers",
      "following_url": "https://api.github.com/users/MicahZoltu/following{/other_user}",
      "gists_url": "https://api.github.com/users/MicahZoltu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MicahZoltu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MicahZoltu/subscriptions",
      "organizations_url": "https://api.github.com/users/MicahZoltu/orgs",
      "repos_url": "https://api.github.com/users/MicahZoltu/repos",
      "events_url": "https://api.github.com/users/MicahZoltu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MicahZoltu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-07T09:05:04Z",
    "updated_at": "2018-04-07T09:05:04Z",
    "author_association": "MEMBER",
    "body": "> most primitive form human trade – barter system\r\n\r\nThis isn't considered a \"fact\" in the scientific (anthropology) community.  Here is a good summary article: https://www.theatlantic.com/business/archive/2016/02/barter-society-myth/471051/",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/379454397/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/379461610",
    "html_url": "https://github.com/ethereum/EIPs/issues/981#issuecomment-379461610",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/981",
    "id": 379461610,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3OTQ2MTYxMA==",
    "user": {
      "login": "brijakodo",
      "id": 36956824,
      "node_id": "MDQ6VXNlcjM2OTU2ODI0",
      "avatar_url": "https://avatars.githubusercontent.com/u/36956824?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/brijakodo",
      "html_url": "https://github.com/brijakodo",
      "followers_url": "https://api.github.com/users/brijakodo/followers",
      "following_url": "https://api.github.com/users/brijakodo/following{/other_user}",
      "gists_url": "https://api.github.com/users/brijakodo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/brijakodo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/brijakodo/subscriptions",
      "organizations_url": "https://api.github.com/users/brijakodo/orgs",
      "repos_url": "https://api.github.com/users/brijakodo/repos",
      "events_url": "https://api.github.com/users/brijakodo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/brijakodo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-07T11:07:48Z",
    "updated_at": "2018-04-08T02:07:09Z",
    "author_association": "NONE",
    "body": "@MicahZoltu I see your point on barter, and perhaps we should rephrase it to not apply as such. My intention was to use the word \"barter\" to signify concept of fungibility to unique items through a mechanism of exchange of value.  I read the first chapter on the origin of money and Barter in Graeber's Debt: The First 5,000 Years.  While he refutes Barter as a precursor to the origin of monetary systems, he clearly states that Barter systems have been used in trade amongst strangers with low trust in each other. Moreover, the system of credit or tracking of asset exchanges actually predates both money and barter. \r\n\r\nIn fact, I completely agree with the premise made in the article of \"Gift Economy\" and I observe this quite frequently in close-knit socially homogeneous communities in India. The intent of this proposal is, however, to capture the process humans do offline - loose trust networks that lead to the exchange of assets based on mutual consent of value. \r\n\r\nWe will change the language in the rationale and open to specific suggestions from the community. \r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/379461610/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/379604836",
    "html_url": "https://github.com/ethereum/EIPs/issues/981#issuecomment-379604836",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/981",
    "id": 379604836,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3OTYwNDgzNg==",
    "user": {
      "login": "jaycenhorton",
      "id": 18407013,
      "node_id": "MDQ6VXNlcjE4NDA3MDEz",
      "avatar_url": "https://avatars.githubusercontent.com/u/18407013?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jaycenhorton",
      "html_url": "https://github.com/jaycenhorton",
      "followers_url": "https://api.github.com/users/jaycenhorton/followers",
      "following_url": "https://api.github.com/users/jaycenhorton/following{/other_user}",
      "gists_url": "https://api.github.com/users/jaycenhorton/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jaycenhorton/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jaycenhorton/subscriptions",
      "organizations_url": "https://api.github.com/users/jaycenhorton/orgs",
      "repos_url": "https://api.github.com/users/jaycenhorton/repos",
      "events_url": "https://api.github.com/users/jaycenhorton/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jaycenhorton/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-09T01:56:15Z",
    "updated_at": "2018-04-09T01:57:24Z",
    "author_association": "NONE",
    "body": "This is definitely something I can get behind. I have been working on something similar that adapts 721+777 and allows for these kinds of per-token qualities. Some of that is defined [here](https://github.com/nori-dot-eco/NIPs/blob/NIP-8-Carbon-Removal-Claim/NIP8_CarbonRemovalClaim.md), although this is out of date, and I have furthered the implementation to allow for a similar type of divide method (which effectively takes one token of x value, and can mint a new token x2 where x1 + x2 = x and x2 is linked to the I'd of x as a parent). \r\n\r\nI strongly suggest implementing #820 as part of this standard.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/379604836/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/379630259",
    "html_url": "https://github.com/ethereum/EIPs/issues/981#issuecomment-379630259",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/981",
    "id": 379630259,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3OTYzMDI1OQ==",
    "user": {
      "login": "jdkanani",
      "id": 1692593,
      "node_id": "MDQ6VXNlcjE2OTI1OTM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1692593?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jdkanani",
      "html_url": "https://github.com/jdkanani",
      "followers_url": "https://api.github.com/users/jdkanani/followers",
      "following_url": "https://api.github.com/users/jdkanani/following{/other_user}",
      "gists_url": "https://api.github.com/users/jdkanani/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jdkanani/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jdkanani/subscriptions",
      "organizations_url": "https://api.github.com/users/jdkanani/orgs",
      "repos_url": "https://api.github.com/users/jdkanani/repos",
      "events_url": "https://api.github.com/users/jdkanani/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jdkanani/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-09T04:48:09Z",
    "updated_at": "2018-04-09T04:48:42Z",
    "author_association": "NONE",
    "body": "This ERC uses [ERC725](https://github.com/ethereum/EIPs/issues/725) key hashes for owners and `sigs` to prove/acknowledge while transferring or dividing. If implementation demands to bolt regulators/authorities/partners in, this allows them to keep track of assets.\r\n\r\nQuestion - should we use addresses and add `getIdentity`? @eordano \r\n\r\n@jaycenhorton Interesting. I will definitely look at #820 and see how we can use it. I understand this is very much necessary when receiver is contact.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/379630259/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/380863172",
    "html_url": "https://github.com/ethereum/EIPs/issues/981#issuecomment-380863172",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/981",
    "id": 380863172,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4MDg2MzE3Mg==",
    "user": {
      "login": "Physes",
      "id": 29454910,
      "node_id": "MDQ6VXNlcjI5NDU0OTEw",
      "avatar_url": "https://avatars.githubusercontent.com/u/29454910?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Physes",
      "html_url": "https://github.com/Physes",
      "followers_url": "https://api.github.com/users/Physes/followers",
      "following_url": "https://api.github.com/users/Physes/following{/other_user}",
      "gists_url": "https://api.github.com/users/Physes/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Physes/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Physes/subscriptions",
      "organizations_url": "https://api.github.com/users/Physes/orgs",
      "repos_url": "https://api.github.com/users/Physes/repos",
      "events_url": "https://api.github.com/users/Physes/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Physes/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-12T16:20:32Z",
    "updated_at": "2018-04-12T16:20:32Z",
    "author_association": "NONE",
    "body": "I think there might be some overlap here with the ERC I've proposed called Delegated Non-Fungible Tokens: https://github.com/ethereum/EIPs/issues/994\r\n\r\nThe use case I was targeting was property registry, which requires a kind of \"base ownership\" at the level of zones, and the ability to delegate physical property rights at a higher level. Perhaps there might be a possibility of merging?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/380863172/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/381003365",
    "html_url": "https://github.com/ethereum/EIPs/issues/981#issuecomment-381003365",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/981",
    "id": 381003365,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4MTAwMzM2NQ==",
    "user": {
      "login": "jdkanani",
      "id": 1692593,
      "node_id": "MDQ6VXNlcjE2OTI1OTM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1692593?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jdkanani",
      "html_url": "https://github.com/jdkanani",
      "followers_url": "https://api.github.com/users/jdkanani/followers",
      "following_url": "https://api.github.com/users/jdkanani/following{/other_user}",
      "gists_url": "https://api.github.com/users/jdkanani/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jdkanani/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jdkanani/subscriptions",
      "organizations_url": "https://api.github.com/users/jdkanani/orgs",
      "repos_url": "https://api.github.com/users/jdkanani/repos",
      "events_url": "https://api.github.com/users/jdkanani/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jdkanani/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-13T02:35:53Z",
    "updated_at": "2018-04-13T02:35:53Z",
    "author_association": "NONE",
    "body": "@Physes Is there any way I can connect with you directly - chat/call? Would love to talk more on #994 and our goals on #981.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/381003365/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/381003783",
    "html_url": "https://github.com/ethereum/EIPs/issues/981#issuecomment-381003783",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/981",
    "id": 381003783,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4MTAwMzc4Mw==",
    "user": {
      "login": "Physes",
      "id": 29454910,
      "node_id": "MDQ6VXNlcjI5NDU0OTEw",
      "avatar_url": "https://avatars.githubusercontent.com/u/29454910?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Physes",
      "html_url": "https://github.com/Physes",
      "followers_url": "https://api.github.com/users/Physes/followers",
      "following_url": "https://api.github.com/users/Physes/following{/other_user}",
      "gists_url": "https://api.github.com/users/Physes/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Physes/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Physes/subscriptions",
      "organizations_url": "https://api.github.com/users/Physes/orgs",
      "repos_url": "https://api.github.com/users/Physes/repos",
      "events_url": "https://api.github.com/users/Physes/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Physes/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-13T02:38:41Z",
    "updated_at": "2018-04-13T02:38:41Z",
    "author_association": "NONE",
    "body": "Sure thing- email philip@nuhanse.network.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/381003783/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/381007657",
    "html_url": "https://github.com/ethereum/EIPs/issues/981#issuecomment-381007657",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/981",
    "id": 381007657,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4MTAwNzY1Nw==",
    "user": {
      "login": "brijakodo",
      "id": 36956824,
      "node_id": "MDQ6VXNlcjM2OTU2ODI0",
      "avatar_url": "https://avatars.githubusercontent.com/u/36956824?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/brijakodo",
      "html_url": "https://github.com/brijakodo",
      "followers_url": "https://api.github.com/users/brijakodo/followers",
      "following_url": "https://api.github.com/users/brijakodo/following{/other_user}",
      "gists_url": "https://api.github.com/users/brijakodo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/brijakodo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/brijakodo/subscriptions",
      "organizations_url": "https://api.github.com/users/brijakodo/orgs",
      "repos_url": "https://api.github.com/users/brijakodo/repos",
      "events_url": "https://api.github.com/users/brijakodo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/brijakodo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-13T03:04:50Z",
    "updated_at": "2018-04-13T03:04:50Z",
    "author_association": "NONE",
    "body": "@Physes #994 looks really interesting, in fact we were just working on extending #981 based on  suggestions made in this blog post: \r\nhttps://medium.com/@apompliano/digital-securities-unlocking-the-cheapest-capital-27d913e0633d\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/381007657/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/381015509",
    "html_url": "https://github.com/ethereum/EIPs/issues/981#issuecomment-381015509",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/981",
    "id": 381015509,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4MTAxNTUwOQ==",
    "user": {
      "login": "ricburton",
      "id": 438160,
      "node_id": "MDQ6VXNlcjQzODE2MA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/438160?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ricburton",
      "html_url": "https://github.com/ricburton",
      "followers_url": "https://api.github.com/users/ricburton/followers",
      "following_url": "https://api.github.com/users/ricburton/following{/other_user}",
      "gists_url": "https://api.github.com/users/ricburton/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ricburton/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ricburton/subscriptions",
      "organizations_url": "https://api.github.com/users/ricburton/orgs",
      "repos_url": "https://api.github.com/users/ricburton/repos",
      "events_url": "https://api.github.com/users/ricburton/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ricburton/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-13T04:03:36Z",
    "updated_at": "2018-04-13T04:03:36Z",
    "author_association": "NONE",
    "body": "I love this concept but keep thinking about a better way to phrase it. Things that spring to mind:\r\n\r\nDivision into pieces\r\nPartial ownership\r\nTokenization of a single asset\r\nPart-ownership\r\nSplit tokens\r\nToken splits\r\n\r\nJust ideas to play with :)",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/381015509/reactions",
      "total_count": 8,
      "+1": 8,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/381176970",
    "html_url": "https://github.com/ethereum/EIPs/issues/981#issuecomment-381176970",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/981",
    "id": 381176970,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4MTE3Njk3MA==",
    "user": {
      "login": "Physes",
      "id": 29454910,
      "node_id": "MDQ6VXNlcjI5NDU0OTEw",
      "avatar_url": "https://avatars.githubusercontent.com/u/29454910?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Physes",
      "html_url": "https://github.com/Physes",
      "followers_url": "https://api.github.com/users/Physes/followers",
      "following_url": "https://api.github.com/users/Physes/following{/other_user}",
      "gists_url": "https://api.github.com/users/Physes/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Physes/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Physes/subscriptions",
      "organizations_url": "https://api.github.com/users/Physes/orgs",
      "repos_url": "https://api.github.com/users/Physes/repos",
      "events_url": "https://api.github.com/users/Physes/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Physes/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-13T15:44:30Z",
    "updated_at": "2018-04-13T15:44:30Z",
    "author_association": "NONE",
    "body": "For the record, I would also suggest renaming this to \"Delegated Non-Fungible Tokens\" (DNFTs) and including a \"delegate\" and \"revoke\" function. This would make a tree-like structure with a base DNFT being able to delegate children, with the ability to revoke (that can be superseded by a conditional owning contract between both parties).\r\n\r\nIf this was implemented in 981 I would be happy to merge 994 because this would meet the needs of the Zone Protocol property registry system.\r\n\r\nWith this structure of DNFTs you can have all of those features described in the quobands white paper: https://papers.ssrn.com/sol3/papers.cfm?abstract_id=3107645.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/381176970/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/381293808",
    "html_url": "https://github.com/ethereum/EIPs/issues/981#issuecomment-381293808",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/981",
    "id": 381293808,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4MTI5MzgwOA==",
    "user": {
      "login": "brijakodo",
      "id": 36956824,
      "node_id": "MDQ6VXNlcjM2OTU2ODI0",
      "avatar_url": "https://avatars.githubusercontent.com/u/36956824?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/brijakodo",
      "html_url": "https://github.com/brijakodo",
      "followers_url": "https://api.github.com/users/brijakodo/followers",
      "following_url": "https://api.github.com/users/brijakodo/following{/other_user}",
      "gists_url": "https://api.github.com/users/brijakodo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/brijakodo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/brijakodo/subscriptions",
      "organizations_url": "https://api.github.com/users/brijakodo/orgs",
      "repos_url": "https://api.github.com/users/brijakodo/repos",
      "events_url": "https://api.github.com/users/brijakodo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/brijakodo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-14T01:22:58Z",
    "updated_at": "2018-04-14T01:22:58Z",
    "author_association": "NONE",
    "body": "@Physes it was great talking to you yesterday, JD and I had a discussion post our call.\r\n\r\nFor now, we would keep the name \"Barter Token\" but use ERC981 more to publicize the ERC standard rather than our proposed name. This way as people extend the parent Interface to whatever their use case, their own Token Name is used in their project. At a philosophical level, we are \"Bartering\" this code with the community in exchange for their feedback, knowledge and support :)\r\n\r\nRegarding \"delegate\" and \"revoke\" functions, we feel that same can be accomplished through Sigs, but you are welcome to write optional methods to extend as you feel. But we would like to keep the original proposal simple and elegant.  \r\n\r\n\r\n ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/381293808/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/381294062",
    "html_url": "https://github.com/ethereum/EIPs/issues/981#issuecomment-381294062",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/981",
    "id": 381294062,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4MTI5NDA2Mg==",
    "user": {
      "login": "brijakodo",
      "id": 36956824,
      "node_id": "MDQ6VXNlcjM2OTU2ODI0",
      "avatar_url": "https://avatars.githubusercontent.com/u/36956824?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/brijakodo",
      "html_url": "https://github.com/brijakodo",
      "followers_url": "https://api.github.com/users/brijakodo/followers",
      "following_url": "https://api.github.com/users/brijakodo/following{/other_user}",
      "gists_url": "https://api.github.com/users/brijakodo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/brijakodo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/brijakodo/subscriptions",
      "organizations_url": "https://api.github.com/users/brijakodo/orgs",
      "repos_url": "https://api.github.com/users/brijakodo/repos",
      "events_url": "https://api.github.com/users/brijakodo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/brijakodo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-14T01:27:12Z",
    "updated_at": "2018-04-14T01:27:12Z",
    "author_association": "NONE",
    "body": "@ricburton  thanks for the feedback and suggestions!  We have already started using \"Partial/Part Ownership\" in our discussions and people are starting to get it.  \r\n\r\nHowever, when we use Token related nomenclature you suggested most non-crypto founders and asset owners glaze over it. We are trying to figure out the balance of language that is representative of the concept and easy to understand for all types of folks.  \r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/381294062/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/384122436",
    "html_url": "https://github.com/ethereum/EIPs/issues/981#issuecomment-384122436",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/981",
    "id": 384122436,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4NDEyMjQzNg==",
    "user": {
      "login": "PhABC",
      "id": 9306422,
      "node_id": "MDQ6VXNlcjkzMDY0MjI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9306422?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/PhABC",
      "html_url": "https://github.com/PhABC",
      "followers_url": "https://api.github.com/users/PhABC/followers",
      "following_url": "https://api.github.com/users/PhABC/following{/other_user}",
      "gists_url": "https://api.github.com/users/PhABC/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/PhABC/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/PhABC/subscriptions",
      "organizations_url": "https://api.github.com/users/PhABC/orgs",
      "repos_url": "https://api.github.com/users/PhABC/repos",
      "events_url": "https://api.github.com/users/PhABC/events{/privacy}",
      "received_events_url": "https://api.github.com/users/PhABC/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-25T00:30:02Z",
    "updated_at": "2018-04-25T00:30:02Z",
    "author_association": "CONTRIBUTOR",
    "body": "Any implementation of ERC-981 @brijakodo @jdkanani?  Want to check efficiency for batch child transfers. \r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/384122436/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/385597857",
    "html_url": "https://github.com/ethereum/EIPs/issues/981#issuecomment-385597857",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/981",
    "id": 385597857,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4NTU5Nzg1Nw==",
    "user": {
      "login": "jdkanani",
      "id": 1692593,
      "node_id": "MDQ6VXNlcjE2OTI1OTM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1692593?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jdkanani",
      "html_url": "https://github.com/jdkanani",
      "followers_url": "https://api.github.com/users/jdkanani/followers",
      "following_url": "https://api.github.com/users/jdkanani/following{/other_user}",
      "gists_url": "https://api.github.com/users/jdkanani/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jdkanani/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jdkanani/subscriptions",
      "organizations_url": "https://api.github.com/users/jdkanani/orgs",
      "repos_url": "https://api.github.com/users/jdkanani/repos",
      "events_url": "https://api.github.com/users/jdkanani/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jdkanani/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-01T04:40:59Z",
    "updated_at": "2018-05-01T04:41:16Z",
    "author_association": "NONE",
    "body": "@PhABC sorry was caught up with work. I will update here once it's done. ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/385597857/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/418540916",
    "html_url": "https://github.com/ethereum/EIPs/issues/981#issuecomment-418540916",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/981",
    "id": 418540916,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxODU0MDkxNg==",
    "user": {
      "login": "Jason-splyt",
      "id": 40450008,
      "node_id": "MDQ6VXNlcjQwNDUwMDA4",
      "avatar_url": "https://avatars.githubusercontent.com/u/40450008?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Jason-splyt",
      "html_url": "https://github.com/Jason-splyt",
      "followers_url": "https://api.github.com/users/Jason-splyt/followers",
      "following_url": "https://api.github.com/users/Jason-splyt/following{/other_user}",
      "gists_url": "https://api.github.com/users/Jason-splyt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Jason-splyt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Jason-splyt/subscriptions",
      "organizations_url": "https://api.github.com/users/Jason-splyt/orgs",
      "repos_url": "https://api.github.com/users/Jason-splyt/repos",
      "events_url": "https://api.github.com/users/Jason-splyt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Jason-splyt/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-09-04T22:41:15Z",
    "updated_at": "2018-09-04T22:41:15Z",
    "author_association": "NONE",
    "body": "Have there been any on-chain implementations of this yet? We are shopping around for a sensible \"fractional ownership\" framework. This one could make sense.\r\n\r\nHas there been any thought into consensus-forming/decision-making by owners of one collective asset? I.e. how this allows fractional owners for art to decide who to leave the art with (and pay them) or how this allows fractional real estate owners to collectively sign/pay a housekeeper. ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/418540916/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/430631960",
    "html_url": "https://github.com/ethereum/EIPs/issues/981#issuecomment-430631960",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/981",
    "id": 430631960,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzMDYzMTk2MA==",
    "user": {
      "login": "jjalan",
      "id": 328858,
      "node_id": "MDQ6VXNlcjMyODg1OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/328858?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jjalan",
      "html_url": "https://github.com/jjalan",
      "followers_url": "https://api.github.com/users/jjalan/followers",
      "following_url": "https://api.github.com/users/jjalan/following{/other_user}",
      "gists_url": "https://api.github.com/users/jjalan/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jjalan/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jjalan/subscriptions",
      "organizations_url": "https://api.github.com/users/jjalan/orgs",
      "repos_url": "https://api.github.com/users/jjalan/repos",
      "events_url": "https://api.github.com/users/jjalan/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jjalan/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-17T13:39:02Z",
    "updated_at": "2018-10-18T19:24:52Z",
    "author_association": "NONE",
    "body": "I attempted to implement ERC981 (attached). I appreciate your feedback @jdkanani @brijakodo\r\n\r\n[PRTToken.txt](https://github.com/ethereum/EIPs/files/2493333/PRTToken.txt)\r\n\r\n\r\nFew questions / comments:\r\n\r\n1. I created a constructor that would allow setting the maximum amount associated with mother asset. This would create first token which can later be used to `divide` into child tokens.\r\n\r\n2. For `merge`, I am not clear the purpose of `amount` argument. Right now, I am simply transferring amount associated with each token present in tokenId array. How this values should be used?\r\n\r\n```\r\nuint256 totalAmountToBeTransferred = 0;\r\nuint256 i = 0;\r\nfor(i = 0; i < _tokenIds.length; i = SafeMath.add(i, 1)) {\r\n  totalAmountToBeTransferred = SafeMath.add(totalAmountToBeTransferred, tokensMapById[_tokenIds[i]].tokenAmount);\r\n  tokensMapById[_tokenIds[i]].tokenAmount = 0; // Set token amount to 0 after we transfer the token amount\r\n}\r\nuint256 newTokenId = _createToken(msg.sender, totalAmountToBeTransferred, tokenType, metadata);\r\n```\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/430631960/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/845191018",
    "html_url": "https://github.com/ethereum/EIPs/issues/981#issuecomment-845191018",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/981",
    "id": 845191018,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg0NTE5MTAxOA==",
    "user": {
      "login": "Bluechip23",
      "id": 83132134,
      "node_id": "MDQ6VXNlcjgzMTMyMTM0",
      "avatar_url": "https://avatars.githubusercontent.com/u/83132134?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Bluechip23",
      "html_url": "https://github.com/Bluechip23",
      "followers_url": "https://api.github.com/users/Bluechip23/followers",
      "following_url": "https://api.github.com/users/Bluechip23/following{/other_user}",
      "gists_url": "https://api.github.com/users/Bluechip23/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Bluechip23/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Bluechip23/subscriptions",
      "organizations_url": "https://api.github.com/users/Bluechip23/orgs",
      "repos_url": "https://api.github.com/users/Bluechip23/repos",
      "events_url": "https://api.github.com/users/Bluechip23/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Bluechip23/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-05-20T14:51:40Z",
    "updated_at": "2021-05-20T14:51:40Z",
    "author_association": "NONE",
    "body": "Currently building a project that could utilize this type of work. Has there been any updates from 3 years ago?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/845191018/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/997291725",
    "html_url": "https://github.com/ethereum/EIPs/issues/981#issuecomment-997291725",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/981",
    "id": 997291725,
    "node_id": "IC_kwDOAq426M47cXbN",
    "user": {
      "login": "github-actions[bot]",
      "id": 41898282,
      "node_id": "MDM6Qm90NDE4OTgyODI=",
      "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/github-actions%5Bbot%5D",
      "html_url": "https://github.com/apps/github-actions",
      "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
      "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
      "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
      "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
      "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
      "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
      "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
      "type": "Bot",
      "site_admin": false
    },
    "created_at": "2021-12-18T22:11:02Z",
    "updated_at": "2021-12-18T22:11:02Z",
    "author_association": "NONE",
    "body": "There has been no activity on this issue for two months. It will be closed in a week if no further activity occurs. If you would like to move this EIP forward, please respond to any outstanding feedback or add a comment indicating that you have addressed all required feedback and are ready for a review.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/997291725/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/1003634019",
    "html_url": "https://github.com/ethereum/EIPs/issues/981#issuecomment-1003634019",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/981",
    "id": 1003634019,
    "node_id": "IC_kwDOAq426M470j1j",
    "user": {
      "login": "github-actions[bot]",
      "id": 41898282,
      "node_id": "MDM6Qm90NDE4OTgyODI=",
      "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/github-actions%5Bbot%5D",
      "html_url": "https://github.com/apps/github-actions",
      "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
      "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
      "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
      "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
      "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
      "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
      "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
      "type": "Bot",
      "site_admin": false
    },
    "created_at": "2022-01-01T23:11:31Z",
    "updated_at": "2022-01-01T23:11:31Z",
    "author_association": "NONE",
    "body": "This issue was closed due to inactivity. If you are still pursuing it, feel free to reopen it and respond to any feedback or request a review in a comment.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/1003634019/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
