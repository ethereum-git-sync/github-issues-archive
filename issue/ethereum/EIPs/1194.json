{
  "url": "https://api.github.com/repos/ethereum/EIPs/issues/1194",
  "repository_url": "https://api.github.com/repos/ethereum/EIPs",
  "labels_url": "https://api.github.com/repos/ethereum/EIPs/issues/1194/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/EIPs/issues/1194/comments",
  "events_url": "https://api.github.com/repos/ethereum/EIPs/issues/1194/events",
  "html_url": "https://github.com/ethereum/EIPs/issues/1194",
  "id": 337825912,
  "node_id": "MDU6SXNzdWUzMzc4MjU5MTI=",
  "number": 1194,
  "title": "Trophy smart contract standard or draft",
  "user": {
    "login": "ghost",
    "id": 10137,
    "node_id": "MDQ6VXNlcjEwMTM3",
    "avatar_url": "https://avatars.githubusercontent.com/u/10137?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/ghost",
    "html_url": "https://github.com/ghost",
    "followers_url": "https://api.github.com/users/ghost/followers",
    "following_url": "https://api.github.com/users/ghost/following{/other_user}",
    "gists_url": "https://api.github.com/users/ghost/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/ghost/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/ghost/subscriptions",
    "organizations_url": "https://api.github.com/users/ghost/orgs",
    "repos_url": "https://api.github.com/users/ghost/repos",
    "events_url": "https://api.github.com/users/ghost/events{/privacy}",
    "received_events_url": "https://api.github.com/users/ghost/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 2328627851,
      "node_id": "MDU6TGFiZWwyMzI4NjI3ODUx",
      "url": "https://api.github.com/repos/ethereum/EIPs/labels/stale",
      "name": "stale",
      "color": "000000",
      "default": false,
      "description": ""
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 6,
  "created_at": "2018-07-03T09:53:33Z",
  "updated_at": "2021-12-19T06:13:16Z",
  "closed_at": "2021-12-19T06:13:16Z",
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "We're building a dapp that will award a trophy as a smart contract, I tried to look on google if there is a draft or standard for something like that but I wasn't lucky.\r\nThe trophy is basically a transferable token with a supply of 1, it seems a little bit overkill using the ERC721, ERC20 or ERC223 interfaces. \r\n\r\nJust to give you a better idea the contract should have these variables:\r\n- winner: Address that won the trophy\r\n- creator: Address that created the trophy\r\n- congratulations text: A text describing the trophy, this is hardcoded in the contract\r\n- message: A message decided by the winner when he will claim the trophy\r\n- name: Name of the trophy\r\n- owner: Owner of the trophy (is transferable)\r\n\r\nA function to award the trophy callable just once by the creator and a function to transfer the trophy.\r\n\r\nDoes someone have any idea where I should look?\r\n",
  "closed_by": {
    "login": "github-actions[bot]",
    "id": 41898282,
    "node_id": "MDM6Qm90NDE4OTgyODI=",
    "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/github-actions%5Bbot%5D",
    "html_url": "https://github.com/apps/github-actions",
    "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
    "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
    "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
    "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
    "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
    "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
    "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
    "type": "Bot",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/1194/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/EIPs/issues/1194/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/402130486",
    "html_url": "https://github.com/ethereum/EIPs/issues/1194#issuecomment-402130486",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1194",
    "id": 402130486,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwMjEzMDQ4Ng==",
    "user": {
      "login": "thekrol01",
      "id": 34987076,
      "node_id": "MDQ6VXNlcjM0OTg3MDc2",
      "avatar_url": "https://avatars.githubusercontent.com/u/34987076?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/thekrol01",
      "html_url": "https://github.com/thekrol01",
      "followers_url": "https://api.github.com/users/thekrol01/followers",
      "following_url": "https://api.github.com/users/thekrol01/following{/other_user}",
      "gists_url": "https://api.github.com/users/thekrol01/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/thekrol01/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/thekrol01/subscriptions",
      "organizations_url": "https://api.github.com/users/thekrol01/orgs",
      "repos_url": "https://api.github.com/users/thekrol01/repos",
      "events_url": "https://api.github.com/users/thekrol01/events{/privacy}",
      "received_events_url": "https://api.github.com/users/thekrol01/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-03T12:00:42Z",
    "updated_at": "2018-07-03T12:03:17Z",
    "author_association": "NONE",
    "body": "You can also create a mapping with a struct like mapping(address (this is the creator)=> mapping( address(this is the winner)=>trophy) _trophy\r\nThe trophy struct contains all the contract details. So you won't need a new contract for every trophy. You can transfer to throphy to a new winner by whoeever is authorized.  For example a tournementowner. For example you can add a trophyowner address field  and congratulations field in the struct. You can als add some basic ERC20 functions like transfer, to ' transfer'  a trophy to a new winner. Keep it simple:-)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/402130486/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/402138618",
    "html_url": "https://github.com/ethereum/EIPs/issues/1194#issuecomment-402138618",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1194",
    "id": 402138618,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwMjEzODYxOA==",
    "user": {
      "login": "ghost",
      "id": 10137,
      "node_id": "MDQ6VXNlcjEwMTM3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10137?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ghost",
      "html_url": "https://github.com/ghost",
      "followers_url": "https://api.github.com/users/ghost/followers",
      "following_url": "https://api.github.com/users/ghost/following{/other_user}",
      "gists_url": "https://api.github.com/users/ghost/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ghost/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ghost/subscriptions",
      "organizations_url": "https://api.github.com/users/ghost/orgs",
      "repos_url": "https://api.github.com/users/ghost/repos",
      "events_url": "https://api.github.com/users/ghost/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ghost/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-03T12:29:07Z",
    "updated_at": "2018-07-03T12:29:07Z",
    "author_association": "NONE",
    "body": "The Dapp I'm building will award just one trophy, so this was thought in that way.\r\n\r\nDo you have any case scenarios where is needed to award a big amount of trophies ( > 10 )? Because if you don't I don't see the need to have a single contract awarding a lot of trophies.\r\n\r\nIf 1 smart contract = 1 trophy and someone has the need to award multiple trophies nothing is preventing to create a \"Trophy Factory\" that creates multiple instances of a single trophy contract.\r\n\r\nBut for sure what you said needs to be kept in consideration, for now, I just wait for other opinions from the community hoping that someone else already drafted something similar!\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/402138618/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/405729633",
    "html_url": "https://github.com/ethereum/EIPs/issues/1194#issuecomment-405729633",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1194",
    "id": 405729633,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwNTcyOTYzMw==",
    "user": {
      "login": "AC0DEM0NK3Y",
      "id": 36201133,
      "node_id": "MDQ6VXNlcjM2MjAxMTMz",
      "avatar_url": "https://avatars.githubusercontent.com/u/36201133?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/AC0DEM0NK3Y",
      "html_url": "https://github.com/AC0DEM0NK3Y",
      "followers_url": "https://api.github.com/users/AC0DEM0NK3Y/followers",
      "following_url": "https://api.github.com/users/AC0DEM0NK3Y/following{/other_user}",
      "gists_url": "https://api.github.com/users/AC0DEM0NK3Y/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/AC0DEM0NK3Y/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/AC0DEM0NK3Y/subscriptions",
      "organizations_url": "https://api.github.com/users/AC0DEM0NK3Y/orgs",
      "repos_url": "https://api.github.com/users/AC0DEM0NK3Y/repos",
      "events_url": "https://api.github.com/users/AC0DEM0NK3Y/events{/privacy}",
      "received_events_url": "https://api.github.com/users/AC0DEM0NK3Y/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-17T21:12:27Z",
    "updated_at": "2018-07-17T21:18:25Z",
    "author_association": "CONTRIBUTOR",
    "body": "I'm not sure you should be using the EIP process for asking questions like this, perhaps stack exchange (ethereum.stackexchange.com).\r\n\r\nYou could use 721 or 1155 for something like this just fine and after creating your \"trophy\" just set a uri that points to off-chain storage for all of that you want to set, even just use the uri as the storage, it's just a string you can put whatever you want in it. Or you could have a function specific to your use case to set the metadata pieces you want like winner explicitly under a struct as @thekrol01 says.\r\n\r\nIf you don't use something (like 721) that is likely to be more in use than your particular case and only offers specific features then I think it will be hard to find wallets etc. to display your items for your users personally.\r\n\r\nPerhaps this is better reformulated into instead of what standard can you have for a contract, what standard can you have for the metadata the uri points to. A proposal around this seemed to be started here #1047.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/405729633/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/407063858",
    "html_url": "https://github.com/ethereum/EIPs/issues/1194#issuecomment-407063858",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1194",
    "id": 407063858,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwNzA2Mzg1OA==",
    "user": {
      "login": "ghost",
      "id": 10137,
      "node_id": "MDQ6VXNlcjEwMTM3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10137?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ghost",
      "html_url": "https://github.com/ghost",
      "followers_url": "https://api.github.com/users/ghost/followers",
      "following_url": "https://api.github.com/users/ghost/following{/other_user}",
      "gists_url": "https://api.github.com/users/ghost/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ghost/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ghost/subscriptions",
      "organizations_url": "https://api.github.com/users/ghost/orgs",
      "repos_url": "https://api.github.com/users/ghost/repos",
      "events_url": "https://api.github.com/users/ghost/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ghost/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-23T13:48:21Z",
    "updated_at": "2018-07-23T13:48:21Z",
    "author_association": "NONE",
    "body": "As you suggested I'm probably going to use the ERC721 standard. Now I have two options: \r\n\r\n- Storing data on a struct inside the contract\r\n\r\n- Storing data off-chain on something like ipfs\r\n \r\nIn both cases whoever wants to create an interface to interact with trophies has to implement a system to interact with the new variables. \r\n\r\nMy only concern here is if I have to think for the community or just for my particular case, if I had to think just for my case I would save the data inside a struct in the contract because I have just one trophy and thus no 'minting costs'.\r\n\r\nFor the community, it's probably better to use an external JSON file because it's likely that someone will need to mint multiple trophies, and this would keep the cost lower.\r\n\r\nProbably implementing both ways is my best option.\r\n\r\nWhat would you do if you were in my position? \r\n\r\nAnother question, why I shouldn't have asked this here but on StackExchange?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/407063858/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/986173585",
    "html_url": "https://github.com/ethereum/EIPs/issues/1194#issuecomment-986173585",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1194",
    "id": 986173585,
    "node_id": "IC_kwDOAq426M46x9CR",
    "user": {
      "login": "github-actions[bot]",
      "id": 41898282,
      "node_id": "MDM6Qm90NDE4OTgyODI=",
      "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/github-actions%5Bbot%5D",
      "html_url": "https://github.com/apps/github-actions",
      "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
      "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
      "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
      "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
      "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
      "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
      "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
      "type": "Bot",
      "site_admin": false
    },
    "created_at": "2021-12-05T06:13:12Z",
    "updated_at": "2021-12-05T06:13:12Z",
    "author_association": "NONE",
    "body": "There has been no activity on this issue for two months. It will be closed in a week if no further activity occurs. If you would like to move this EIP forward, please respond to any outstanding feedback or add a comment indicating that you have addressed all required feedback and are ready for a review.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/986173585/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/997336255",
    "html_url": "https://github.com/ethereum/EIPs/issues/1194#issuecomment-997336255",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1194",
    "id": 997336255,
    "node_id": "IC_kwDOAq426M47ciS_",
    "user": {
      "login": "github-actions[bot]",
      "id": 41898282,
      "node_id": "MDM6Qm90NDE4OTgyODI=",
      "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/github-actions%5Bbot%5D",
      "html_url": "https://github.com/apps/github-actions",
      "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
      "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
      "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
      "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
      "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
      "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
      "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
      "type": "Bot",
      "site_admin": false
    },
    "created_at": "2021-12-19T06:13:15Z",
    "updated_at": "2021-12-19T06:13:15Z",
    "author_association": "NONE",
    "body": "This issue was closed due to inactivity. If you are still pursuing it, feel free to reopen it and respond to any feedback or request a review in a comment.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/997336255/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
