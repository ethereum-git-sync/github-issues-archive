{
  "url": "https://api.github.com/repos/ethereum/EIPs/issues/930",
  "repository_url": "https://api.github.com/repos/ethereum/EIPs",
  "labels_url": "https://api.github.com/repos/ethereum/EIPs/issues/930/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/EIPs/issues/930/comments",
  "events_url": "https://api.github.com/repos/ethereum/EIPs/issues/930/events",
  "html_url": "https://github.com/ethereum/EIPs/issues/930",
  "id": 305364800,
  "node_id": "MDU6SXNzdWUzMDUzNjQ4MDA=",
  "number": 930,
  "title": "ERC930 - Eternal Storage Standard",
  "user": {
    "login": "AugustoL",
    "id": 7763867,
    "node_id": "MDQ6VXNlcjc3NjM4Njc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/7763867?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/AugustoL",
    "html_url": "https://github.com/AugustoL",
    "followers_url": "https://api.github.com/users/AugustoL/followers",
    "following_url": "https://api.github.com/users/AugustoL/following{/other_user}",
    "gists_url": "https://api.github.com/users/AugustoL/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/AugustoL/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/AugustoL/subscriptions",
    "organizations_url": "https://api.github.com/users/AugustoL/orgs",
    "repos_url": "https://api.github.com/users/AugustoL/repos",
    "events_url": "https://api.github.com/users/AugustoL/events{/privacy}",
    "received_events_url": "https://api.github.com/users/AugustoL/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 2328627851,
      "node_id": "MDU6TGFiZWwyMzI4NjI3ODUx",
      "url": "https://api.github.com/repos/ethereum/EIPs/labels/stale",
      "name": "stale",
      "color": "000000",
      "default": false,
      "description": ""
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 26,
  "created_at": "2018-03-14T23:30:14Z",
  "updated_at": "2022-01-01T23:11:46Z",
  "closed_at": "2022-01-01T23:11:46Z",
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "```\r\nEIP: 930\r\nTitle: ERC930 Eternal Storage\r\nAuthor: Augusto Lemble <me@augustolemble.com>\r\nType: Contract Standard\r\nCategory: ERC\r\nStatus: Draft\r\nCreated: 2018-03-15\r\n```\r\n\r\n## Simple Summary\r\n\r\nThis contract provides the necessary logic to store any type of data in a smart contract using it as a storage.\r\n\r\n## Abstract\r\n\r\nThe ES (Eternal Storage) contract is owned by an address that have write permissions. The storage is public, which means everyone has read permissions.\r\nIt store the data on mappings, using one mapping per type of variable.\r\nThe use of this contract allows the developer to migrate the storage easily to another contract if needed.\r\n\r\n\r\n```\r\n// Using contract storage\r\nstring myName = \"Vitalik\"; \r\n\r\n// Using Eternal Storage\r\ns.getString(keccak256(\"myName\")) = \"Vitalik\";\r\n```\r\n\r\n## Motivation\r\n\r\nThere is some implementations of Eternal Storage contracts already done and being used but there is not some consensus over it. Storage is one of the most important parts of smart contracts development and using this contract will allow developers to use a standardized version of ES and therefore have safer contracts and also use this standard with another that define only certain logic and behavior over a contract, for example: An ERC20 token can use the contract or eternal storage it wont affect the standard since the only thing that changes is the write/read operations used inside the functions.\r\n\r\n\r\n## Specification\r\n\r\n## EternalStorage\r\n\r\n**Note** The nomenclature used for the functions and variables was tried to be as short as possible, since we don't want to have to use +30 more characters per line to assign an uint.\r\n - s == storage\r\n - h == hash\r\n - v == value\r\n\r\n### Storage\r\n\r\nThe storage of the contract is kept in a internal variable, it is also an struct with a set of mappings, one per each variable type.\r\n\r\n```\r\n  struct Storage {\r\n    mapping(bytes32 => bool) _bool;\r\n    mapping(bytes32 => int) _int;\r\n    mapping(bytes32 => uint) _uint;\r\n    mapping(bytes32 => string) _string;\r\n    mapping(bytes32 => address) _address;\r\n    mapping(bytes32 => bytes) _bytes;\r\n  }\r\n\r\n  Storage internal s;\r\n```\r\n\r\n### Methods\r\n\r\n#### owner\r\n\r\nReturns the owner address of the ES.\r\n\r\n```\r\nfunction owner() constant returns (address owner)\r\n```\r\n\r\n#### SET methods\r\n\r\nExecute a write operation over the storage, it can only be called by the ES\r\nowner. It will write the value `v` over the boolean value identified with the\r\nhash `h`.\r\n\r\nThe function SHOULD `revert` if the `msg.sender` is not the owner.\r\n\r\n```\r\n  function setBoolean(bytes32 h, bool v) public onlyOwner {\r\n    s._bool[h] = v;\r\n  }\r\n  function setInt(bytes32 h, int v) public onlyOwner {\r\n    s._int[h] = v;\r\n  }\r\n  function setUint(bytes32 h, uint256 v) public onlyOwner {\r\n    s._uint[h] = v;\r\n  }\r\n  function setAddress(bytes32 h, address v) public onlyOwner {\r\n    s._address[h] = v;\r\n  }\r\n  function setString(bytes32 h, string v) public onlyOwner {\r\n    s._string[h] = v;\r\n  }\r\n  function setBytes(bytes32 h, bytes v) public onlyOwner {\r\n    s._bytes[h] = v;\r\n  }\r\n```\r\n\r\n#### GET methods\r\n\r\nExecute a read operation over the storage. It receives the hash identifier `h` of the variable stored and it returns the value of it.\r\n\r\n```\r\nfunction getBoolean(bytes32 h) public view returns (bool){\r\n  return s._bool[h];\r\n}\r\nfunction getInt(bytes32 h) public view returns (int){\r\n  return s._int[h];\r\n}\r\nfunction getUint(bytes32 h) public view returns (uint256){\r\n  return s._uint[h];\r\n}\r\nfunction getAddress(bytes32 h) public view returns (address){\r\n  return s._address[h];\r\n}\r\nfunction getString(bytes32 h) public view returns (string){\r\n  return s._string[h];\r\n}\r\nfunction getBytes(bytes32 h) public view returns (bytes){\r\n  return s._bytes[h];\r\n}\r\n```\r\n\r\n\r\n### Events\r\n\r\n#### OwnershipTransfered\r\n\r\nTriggered when the ownership of the contract change.\r\n\r\n```\r\nevent OwnershipTransfered(address indexed previousOwner, address indexed newOwner);\r\n```\r\n\r\n## Implementations\r\n\r\n- [Basic Token example using Eternal Storage](https://github.com/AugustoL/zeppelin-solidity/blob/eternal-storage-example/contracts/examples/ESToken.sol)\r\n\r\n## Revisions\r\n\r\n- 2018/03/15: Initial Draft\r\n\r\n## Copyright\r\n\r\nCopyright and related rights waived via [CC0](https://creativecommons.org/publicdomain/zero/1.0/)\r\n",
  "closed_by": {
    "login": "github-actions[bot]",
    "id": 41898282,
    "node_id": "MDM6Qm90NDE4OTgyODI=",
    "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/github-actions%5Bbot%5D",
    "html_url": "https://github.com/apps/github-actions",
    "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
    "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
    "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
    "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
    "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
    "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
    "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
    "type": "Bot",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/930/reactions",
    "total_count": 16,
    "+1": 14,
    "-1": 2,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/EIPs/issues/930/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/373209387",
    "html_url": "https://github.com/ethereum/EIPs/issues/930#issuecomment-373209387",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/930",
    "id": 373209387,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3MzIwOTM4Nw==",
    "user": {
      "login": "VoR0220",
      "id": 7756785,
      "node_id": "MDQ6VXNlcjc3NTY3ODU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7756785?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/VoR0220",
      "html_url": "https://github.com/VoR0220",
      "followers_url": "https://api.github.com/users/VoR0220/followers",
      "following_url": "https://api.github.com/users/VoR0220/following{/other_user}",
      "gists_url": "https://api.github.com/users/VoR0220/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/VoR0220/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/VoR0220/subscriptions",
      "organizations_url": "https://api.github.com/users/VoR0220/orgs",
      "repos_url": "https://api.github.com/users/VoR0220/repos",
      "events_url": "https://api.github.com/users/VoR0220/events{/privacy}",
      "received_events_url": "https://api.github.com/users/VoR0220/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-14T23:31:56Z",
    "updated_at": "2018-03-14T23:31:56Z",
    "author_association": "MEMBER",
    "body": "It's an interesting way of solving a problem many are trying to solve. ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/373209387/reactions",
      "total_count": 4,
      "+1": 4,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/373209539",
    "html_url": "https://github.com/ethereum/EIPs/issues/930#issuecomment-373209539",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/930",
    "id": 373209539,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3MzIwOTUzOQ==",
    "user": {
      "login": "AugustoL",
      "id": 7763867,
      "node_id": "MDQ6VXNlcjc3NjM4Njc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7763867?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/AugustoL",
      "html_url": "https://github.com/AugustoL",
      "followers_url": "https://api.github.com/users/AugustoL/followers",
      "following_url": "https://api.github.com/users/AugustoL/following{/other_user}",
      "gists_url": "https://api.github.com/users/AugustoL/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/AugustoL/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/AugustoL/subscriptions",
      "organizations_url": "https://api.github.com/users/AugustoL/orgs",
      "repos_url": "https://api.github.com/users/AugustoL/repos",
      "events_url": "https://api.github.com/users/AugustoL/events{/privacy}",
      "received_events_url": "https://api.github.com/users/AugustoL/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-14T23:32:44Z",
    "updated_at": "2018-03-14T23:32:44Z",
    "author_association": "NONE",
    "body": "I have to add a section about gas costs, hopefully I will be able to add it soon, anyone that wants to collaborate on this send me an email to me@augustolemble.com :)",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/373209539/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/373209949",
    "html_url": "https://github.com/ethereum/EIPs/issues/930#issuecomment-373209949",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/930",
    "id": 373209949,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3MzIwOTk0OQ==",
    "user": {
      "login": "AugustoL",
      "id": 7763867,
      "node_id": "MDQ6VXNlcjc3NjM4Njc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7763867?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/AugustoL",
      "html_url": "https://github.com/AugustoL",
      "followers_url": "https://api.github.com/users/AugustoL/followers",
      "following_url": "https://api.github.com/users/AugustoL/following{/other_user}",
      "gists_url": "https://api.github.com/users/AugustoL/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/AugustoL/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/AugustoL/subscriptions",
      "organizations_url": "https://api.github.com/users/AugustoL/orgs",
      "repos_url": "https://api.github.com/users/AugustoL/repos",
      "events_url": "https://api.github.com/users/AugustoL/events{/privacy}",
      "received_events_url": "https://api.github.com/users/AugustoL/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-14T23:34:46Z",
    "updated_at": "2018-03-14T23:34:46Z",
    "author_association": "NONE",
    "body": "@VoR0220 yes right? I think it is going to be used a lot whit the use of proxys for upgradeability and it will be great to have consensus over the use of it :)",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/373209949/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/373213168",
    "html_url": "https://github.com/ethereum/EIPs/issues/930#issuecomment-373213168",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/930",
    "id": 373213168,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3MzIxMzE2OA==",
    "user": {
      "login": "VoR0220",
      "id": 7756785,
      "node_id": "MDQ6VXNlcjc3NTY3ODU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7756785?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/VoR0220",
      "html_url": "https://github.com/VoR0220",
      "followers_url": "https://api.github.com/users/VoR0220/followers",
      "following_url": "https://api.github.com/users/VoR0220/following{/other_user}",
      "gists_url": "https://api.github.com/users/VoR0220/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/VoR0220/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/VoR0220/subscriptions",
      "organizations_url": "https://api.github.com/users/VoR0220/orgs",
      "repos_url": "https://api.github.com/users/VoR0220/repos",
      "events_url": "https://api.github.com/users/VoR0220/events{/privacy}",
      "received_events_url": "https://api.github.com/users/VoR0220/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-14T23:51:52Z",
    "updated_at": "2018-03-14T23:52:46Z",
    "author_association": "MEMBER",
    "body": "Well here's what would be the way to better define that would be through a template or a generic type which I believe is already in the works, but fleshing that out would enable this in a very simplistic way. All you would need to do is take an index of ```templateKey``` and resolve it to field of ```templateStore``` which would be interpreted at runtime. This will definitely be going in the \"dangerous\" category as it requires low level assembly but that's what I'm thinking from a compiler definition. @chriseth @axic what do you think? ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/373213168/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/373758861",
    "html_url": "https://github.com/ethereum/EIPs/issues/930#issuecomment-373758861",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/930",
    "id": 373758861,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3Mzc1ODg2MQ==",
    "user": {
      "login": "Arachnid",
      "id": 17865,
      "node_id": "MDQ6VXNlcjE3ODY1",
      "avatar_url": "https://avatars.githubusercontent.com/u/17865?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Arachnid",
      "html_url": "https://github.com/Arachnid",
      "followers_url": "https://api.github.com/users/Arachnid/followers",
      "following_url": "https://api.github.com/users/Arachnid/following{/other_user}",
      "gists_url": "https://api.github.com/users/Arachnid/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Arachnid/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Arachnid/subscriptions",
      "organizations_url": "https://api.github.com/users/Arachnid/orgs",
      "repos_url": "https://api.github.com/users/Arachnid/repos",
      "events_url": "https://api.github.com/users/Arachnid/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Arachnid/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-16T15:57:06Z",
    "updated_at": "2018-03-16T15:57:06Z",
    "author_association": "MEMBER",
    "body": "Is it necessary for this to be an EIP? It seems like it could just be a software library.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/373758861/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/373840256",
    "html_url": "https://github.com/ethereum/EIPs/issues/930#issuecomment-373840256",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/930",
    "id": 373840256,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3Mzg0MDI1Ng==",
    "user": {
      "login": "AugustoL",
      "id": 7763867,
      "node_id": "MDQ6VXNlcjc3NjM4Njc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7763867?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/AugustoL",
      "html_url": "https://github.com/AugustoL",
      "followers_url": "https://api.github.com/users/AugustoL/followers",
      "following_url": "https://api.github.com/users/AugustoL/following{/other_user}",
      "gists_url": "https://api.github.com/users/AugustoL/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/AugustoL/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/AugustoL/subscriptions",
      "organizations_url": "https://api.github.com/users/AugustoL/orgs",
      "repos_url": "https://api.github.com/users/AugustoL/repos",
      "events_url": "https://api.github.com/users/AugustoL/events{/privacy}",
      "received_events_url": "https://api.github.com/users/AugustoL/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-16T20:46:23Z",
    "updated_at": "2018-03-16T20:46:23Z",
    "author_association": "NONE",
    "body": "@Arachnid It is not an EIP, it is a _Ethereum Request for Comments_ . We would use this in our smart contracts and I think more projects will use it too. So this is just to kickstart the discussion about a contract standard that we can use.\r\nSince the ERCs are posted here thats why I submitted it here :nerd_face: ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/373840256/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/373857581",
    "html_url": "https://github.com/ethereum/EIPs/issues/930#issuecomment-373857581",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/930",
    "id": 373857581,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3Mzg1NzU4MQ==",
    "user": {
      "login": "Arachnid",
      "id": 17865,
      "node_id": "MDQ6VXNlcjE3ODY1",
      "avatar_url": "https://avatars.githubusercontent.com/u/17865?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Arachnid",
      "html_url": "https://github.com/Arachnid",
      "followers_url": "https://api.github.com/users/Arachnid/followers",
      "following_url": "https://api.github.com/users/Arachnid/following{/other_user}",
      "gists_url": "https://api.github.com/users/Arachnid/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Arachnid/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Arachnid/subscriptions",
      "organizations_url": "https://api.github.com/users/Arachnid/orgs",
      "repos_url": "https://api.github.com/users/Arachnid/repos",
      "events_url": "https://api.github.com/users/Arachnid/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Arachnid/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-16T22:05:33Z",
    "updated_at": "2018-03-16T22:05:33Z",
    "author_association": "MEMBER",
    "body": "ERCs are a subset of EIPs. Either way, my question stands - since you're looking at one particular implementation, rather than an interface multiple contracts will implement, what's the need for an EIP/ERC?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/373857581/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/373861097",
    "html_url": "https://github.com/ethereum/EIPs/issues/930#issuecomment-373861097",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/930",
    "id": 373861097,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3Mzg2MTA5Nw==",
    "user": {
      "login": "AugustoL",
      "id": 7763867,
      "node_id": "MDQ6VXNlcjc3NjM4Njc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7763867?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/AugustoL",
      "html_url": "https://github.com/AugustoL",
      "followers_url": "https://api.github.com/users/AugustoL/followers",
      "following_url": "https://api.github.com/users/AugustoL/following{/other_user}",
      "gists_url": "https://api.github.com/users/AugustoL/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/AugustoL/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/AugustoL/subscriptions",
      "organizations_url": "https://api.github.com/users/AugustoL/orgs",
      "repos_url": "https://api.github.com/users/AugustoL/repos",
      "events_url": "https://api.github.com/users/AugustoL/events{/privacy}",
      "received_events_url": "https://api.github.com/users/AugustoL/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-16T22:23:52Z",
    "updated_at": "2018-03-16T22:23:52Z",
    "author_association": "NONE",
    "body": "@Arachnid Im not looking for a particular implementation, Im looking to discuss how the interface of a smart contract with only storage purposes will be, we have ERCs with standards for tokens and proxies but there is none for a storage contract.\r\nII think it is needed because some smart contracts will need it and is better if we all use the same standard for it.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/373861097/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/374461504",
    "html_url": "https://github.com/ethereum/EIPs/issues/930#issuecomment-374461504",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/930",
    "id": 374461504,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3NDQ2MTUwNA==",
    "user": {
      "login": "fulldecent",
      "id": 382183,
      "node_id": "MDQ6VXNlcjM4MjE4Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/382183?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fulldecent",
      "html_url": "https://github.com/fulldecent",
      "followers_url": "https://api.github.com/users/fulldecent/followers",
      "following_url": "https://api.github.com/users/fulldecent/following{/other_user}",
      "gists_url": "https://api.github.com/users/fulldecent/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fulldecent/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fulldecent/subscriptions",
      "organizations_url": "https://api.github.com/users/fulldecent/orgs",
      "repos_url": "https://api.github.com/users/fulldecent/repos",
      "events_url": "https://api.github.com/users/fulldecent/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fulldecent/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-20T03:30:17Z",
    "updated_at": "2018-03-20T03:30:17Z",
    "author_association": "CONTRIBUTOR",
    "body": "This smells like an antipatern",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/374461504/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 1,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/374462468",
    "html_url": "https://github.com/ethereum/EIPs/issues/930#issuecomment-374462468",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/930",
    "id": 374462468,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3NDQ2MjQ2OA==",
    "user": {
      "login": "AugustoL",
      "id": 7763867,
      "node_id": "MDQ6VXNlcjc3NjM4Njc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7763867?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/AugustoL",
      "html_url": "https://github.com/AugustoL",
      "followers_url": "https://api.github.com/users/AugustoL/followers",
      "following_url": "https://api.github.com/users/AugustoL/following{/other_user}",
      "gists_url": "https://api.github.com/users/AugustoL/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/AugustoL/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/AugustoL/subscriptions",
      "organizations_url": "https://api.github.com/users/AugustoL/orgs",
      "repos_url": "https://api.github.com/users/AugustoL/repos",
      "events_url": "https://api.github.com/users/AugustoL/events{/privacy}",
      "received_events_url": "https://api.github.com/users/AugustoL/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-20T03:37:05Z",
    "updated_at": "2018-03-20T03:37:05Z",
    "author_association": "NONE",
    "body": "@fulldecent why?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/374462468/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/374469447",
    "html_url": "https://github.com/ethereum/EIPs/issues/930#issuecomment-374469447",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/930",
    "id": 374469447,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3NDQ2OTQ0Nw==",
    "user": {
      "login": "fulldecent",
      "id": 382183,
      "node_id": "MDQ6VXNlcjM4MjE4Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/382183?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fulldecent",
      "html_url": "https://github.com/fulldecent",
      "followers_url": "https://api.github.com/users/fulldecent/followers",
      "following_url": "https://api.github.com/users/fulldecent/following{/other_user}",
      "gists_url": "https://api.github.com/users/fulldecent/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fulldecent/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fulldecent/subscriptions",
      "organizations_url": "https://api.github.com/users/fulldecent/orgs",
      "repos_url": "https://api.github.com/users/fulldecent/repos",
      "events_url": "https://api.github.com/users/fulldecent/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fulldecent/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-20T04:19:15Z",
    "updated_at": "2018-03-20T04:19:15Z",
    "author_association": "CONTRIBUTOR",
    "body": "We already have bytes4 function selectors to query any arbitrary type.\r\n\r\nAlso the set of types is arbitrarily small. The built in types are much richer and composible.\r\n\r\nIf dynamic naming is required at runtime then applications will want to explain why by using a name.\r\n\r\nI can't think of any application where storing random numbers, identifying them by name, and those names having no context, being useful.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/374469447/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/375513735",
    "html_url": "https://github.com/ethereum/EIPs/issues/930#issuecomment-375513735",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/930",
    "id": 375513735,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3NTUxMzczNQ==",
    "user": {
      "login": "AugustoL",
      "id": 7763867,
      "node_id": "MDQ6VXNlcjc3NjM4Njc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7763867?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/AugustoL",
      "html_url": "https://github.com/AugustoL",
      "followers_url": "https://api.github.com/users/AugustoL/followers",
      "following_url": "https://api.github.com/users/AugustoL/following{/other_user}",
      "gists_url": "https://api.github.com/users/AugustoL/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/AugustoL/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/AugustoL/subscriptions",
      "organizations_url": "https://api.github.com/users/AugustoL/orgs",
      "repos_url": "https://api.github.com/users/AugustoL/repos",
      "events_url": "https://api.github.com/users/AugustoL/events{/privacy}",
      "received_events_url": "https://api.github.com/users/AugustoL/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-23T01:50:18Z",
    "updated_at": "2018-03-23T01:51:52Z",
    "author_association": "NONE",
    "body": "@fulldecent thx for the reply, you are right about dynamic naming and that the set of types are very limited. I imagine this being used in contracts with a simple storage like ERC20-721-827 tokens where you would be able to reuse the same storage in another contracts.\r\n_I can't think of any application where storing random numbers, identifying them by name, and those names having no context, being useful._ I wouldnt describe it that way, but it is useful if you need to export the storage to another contract and have control over it. How would you do it? ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/375513735/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/380976006",
    "html_url": "https://github.com/ethereum/EIPs/issues/930#issuecomment-380976006",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/930",
    "id": 380976006,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4MDk3NjAwNg==",
    "user": {
      "login": "trigun0x2",
      "id": 3936336,
      "node_id": "MDQ6VXNlcjM5MzYzMzY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3936336?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/trigun0x2",
      "html_url": "https://github.com/trigun0x2",
      "followers_url": "https://api.github.com/users/trigun0x2/followers",
      "following_url": "https://api.github.com/users/trigun0x2/following{/other_user}",
      "gists_url": "https://api.github.com/users/trigun0x2/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/trigun0x2/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/trigun0x2/subscriptions",
      "organizations_url": "https://api.github.com/users/trigun0x2/orgs",
      "repos_url": "https://api.github.com/users/trigun0x2/repos",
      "events_url": "https://api.github.com/users/trigun0x2/events{/privacy}",
      "received_events_url": "https://api.github.com/users/trigun0x2/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-12T23:37:46Z",
    "updated_at": "2018-04-12T23:37:46Z",
    "author_association": "NONE",
    "body": "@AugustoL I've put some thought into this topic before and I've never been sure about what layer to authenticate the user.\r\n\r\nMy thought was to have an array of whitelisted contracts that are able to interact with the ES then do the authentication (`onlyOwner`, `onlyCOO`) in the smart contract using the ES.\r\n\r\nWould love to get your input on this topic. ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/380976006/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/381346179",
    "html_url": "https://github.com/ethereum/EIPs/issues/930#issuecomment-381346179",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/930",
    "id": 381346179,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4MTM0NjE3OQ==",
    "user": {
      "login": "shrugs",
      "id": 1535001,
      "node_id": "MDQ6VXNlcjE1MzUwMDE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1535001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shrugs",
      "html_url": "https://github.com/shrugs",
      "followers_url": "https://api.github.com/users/shrugs/followers",
      "following_url": "https://api.github.com/users/shrugs/following{/other_user}",
      "gists_url": "https://api.github.com/users/shrugs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shrugs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shrugs/subscriptions",
      "organizations_url": "https://api.github.com/users/shrugs/orgs",
      "repos_url": "https://api.github.com/users/shrugs/repos",
      "events_url": "https://api.github.com/users/shrugs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shrugs/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-14T17:35:07Z",
    "updated_at": "2018-04-14T17:35:07Z",
    "author_association": "NONE",
    "body": "re: owner; If you need more comprehensive access control, you could compose this function with an RBAC-backed proxy that lets you have multiple different access layers and logics.\r\n\r\nThis sort of approach is basically necessary for contract upgradability. You can see various approaches attempted in https://github.com/zeppelinos/labs as well as some articles about the different approaches for [eternal](https://blog.zeppelinos.org/smart-contract-upgradeability-using-eternal-storage/) and [unstructured](https://blog.zeppelinos.org/upgradeability-using-unstructured-storage/) storages (with a comprehensive overview of the various pros/cons and implementations coming from Elena in the near future).\r\n\r\nI have no opinion on whether or not it fits within the ERC/EIP scope, but I very much support a standard interface for these getters and setters.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/381346179/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/381375283",
    "html_url": "https://github.com/ethereum/EIPs/issues/930#issuecomment-381375283",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/930",
    "id": 381375283,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4MTM3NTI4Mw==",
    "user": {
      "login": "fulldecent",
      "id": 382183,
      "node_id": "MDQ6VXNlcjM4MjE4Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/382183?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fulldecent",
      "html_url": "https://github.com/fulldecent",
      "followers_url": "https://api.github.com/users/fulldecent/followers",
      "following_url": "https://api.github.com/users/fulldecent/following{/other_user}",
      "gists_url": "https://api.github.com/users/fulldecent/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fulldecent/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fulldecent/subscriptions",
      "organizations_url": "https://api.github.com/users/fulldecent/orgs",
      "repos_url": "https://api.github.com/users/fulldecent/repos",
      "events_url": "https://api.github.com/users/fulldecent/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fulldecent/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-15T02:25:26Z",
    "updated_at": "2018-04-15T02:25:26Z",
    "author_association": "CONTRIBUTOR",
    "body": "@AugustoL \r\n\r\n> but it is useful if you need to export the storage to another contract and have control over it. How would you do it?\r\n\r\nI would specifically identify the storage requirements for that contract and handle the use case as it arrived.\r\n\r\n>  I imagine this being used in contracts with a simple storage like ERC20-721-827 tokens where you would be able to reuse the same storage in another contracts.\r\n\r\nERC-721 is perhaps the most thoroughly reviewed ERC in modern history. A specific goal of 721 was to identify ALL potential uses cases up front. In all of this discussion I have never heard a use case that required off-the-shelf backend storage as ERC-930 is proposing. And to be sure, 721 was reviewed at four different Ethereum conferences and we had a 4-day discussion just for latin etymology and naming.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/381375283/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/381907406",
    "html_url": "https://github.com/ethereum/EIPs/issues/930#issuecomment-381907406",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/930",
    "id": 381907406,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4MTkwNzQwNg==",
    "user": {
      "login": "AugustoL",
      "id": 7763867,
      "node_id": "MDQ6VXNlcjc3NjM4Njc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7763867?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/AugustoL",
      "html_url": "https://github.com/AugustoL",
      "followers_url": "https://api.github.com/users/AugustoL/followers",
      "following_url": "https://api.github.com/users/AugustoL/following{/other_user}",
      "gists_url": "https://api.github.com/users/AugustoL/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/AugustoL/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/AugustoL/subscriptions",
      "organizations_url": "https://api.github.com/users/AugustoL/orgs",
      "repos_url": "https://api.github.com/users/AugustoL/repos",
      "events_url": "https://api.github.com/users/AugustoL/events{/privacy}",
      "received_events_url": "https://api.github.com/users/AugustoL/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-17T08:55:15Z",
    "updated_at": "2018-04-17T08:55:15Z",
    "author_association": "NONE",
    "body": "@trigun0x2 Ive been thinking about having something like that and also about using RBAC, I think in this case using RBAC is the best option for the same reason @Shrugs mentioned, this storage contract is useful for upgradeability purposes and I saw the necessity on having a storage like this while I was working on token proxy and upgradeability.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/381907406/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/381911864",
    "html_url": "https://github.com/ethereum/EIPs/issues/930#issuecomment-381911864",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/930",
    "id": 381911864,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4MTkxMTg2NA==",
    "user": {
      "login": "AugustoL",
      "id": 7763867,
      "node_id": "MDQ6VXNlcjc3NjM4Njc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7763867?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/AugustoL",
      "html_url": "https://github.com/AugustoL",
      "followers_url": "https://api.github.com/users/AugustoL/followers",
      "following_url": "https://api.github.com/users/AugustoL/following{/other_user}",
      "gists_url": "https://api.github.com/users/AugustoL/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/AugustoL/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/AugustoL/subscriptions",
      "organizations_url": "https://api.github.com/users/AugustoL/orgs",
      "repos_url": "https://api.github.com/users/AugustoL/repos",
      "events_url": "https://api.github.com/users/AugustoL/events{/privacy}",
      "received_events_url": "https://api.github.com/users/AugustoL/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-17T09:07:14Z",
    "updated_at": "2018-04-17T09:07:14Z",
    "author_association": "NONE",
    "body": "@fulldecent I understand what you mean, I was looking for something more standarized to not work over different storage requirements for every smart contract, I think that using an storage like these fulfill more  of the storage requirements of smart contracts. There is some cases maybe most of them where you dont even need something like this, but in my case where Im working on a set of different contracts using token proxy upgrade ability this is the best thing I came up with to use as storage for our contracts.\r\nOne of the contracts that we will use is ERC-721, but we will need the token to be upgradebale and I thought on how can I use the standard with ERC930 storage on it instead of the contact storage, only that.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/381911864/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/383894625",
    "html_url": "https://github.com/ethereum/EIPs/issues/930#issuecomment-383894625",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/930",
    "id": 383894625,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4Mzg5NDYyNQ==",
    "user": {
      "login": "ondratra",
      "id": 3767729,
      "node_id": "MDQ6VXNlcjM3Njc3Mjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3767729?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ondratra",
      "html_url": "https://github.com/ondratra",
      "followers_url": "https://api.github.com/users/ondratra/followers",
      "following_url": "https://api.github.com/users/ondratra/following{/other_user}",
      "gists_url": "https://api.github.com/users/ondratra/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ondratra/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ondratra/subscriptions",
      "organizations_url": "https://api.github.com/users/ondratra/orgs",
      "repos_url": "https://api.github.com/users/ondratra/repos",
      "events_url": "https://api.github.com/users/ondratra/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ondratra/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-24T11:16:43Z",
    "updated_at": "2018-04-24T11:17:02Z",
    "author_association": "NONE",
    "body": "> I would specifically identify the storage requirements for that contract and handle the use case as it arrived.\r\n\r\nI must agree with @fulldecent on this. I can't imagine situation where I need generic data storage because Ethereum's smart contract itself is generic data storage, thus when I want to upgrade for example ERC20 contract it usually requires upgrade of logic(adding new implementation to proxy, etc.) but not the change of storage.\r\n\r\n@AugustoL Can you extend the Motivation section with more detail description of situation(s) where you need such kind of contract proposed in EIP930 and what would be the tradeoffs against proxy pattern?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/383894625/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/392608705",
    "html_url": "https://github.com/ethereum/EIPs/issues/930#issuecomment-392608705",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/930",
    "id": 392608705,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5MjYwODcwNQ==",
    "user": {
      "login": "jaycenhorton",
      "id": 18407013,
      "node_id": "MDQ6VXNlcjE4NDA3MDEz",
      "avatar_url": "https://avatars.githubusercontent.com/u/18407013?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jaycenhorton",
      "html_url": "https://github.com/jaycenhorton",
      "followers_url": "https://api.github.com/users/jaycenhorton/followers",
      "following_url": "https://api.github.com/users/jaycenhorton/following{/other_user}",
      "gists_url": "https://api.github.com/users/jaycenhorton/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jaycenhorton/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jaycenhorton/subscriptions",
      "organizations_url": "https://api.github.com/users/jaycenhorton/orgs",
      "repos_url": "https://api.github.com/users/jaycenhorton/repos",
      "events_url": "https://api.github.com/users/jaycenhorton/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jaycenhorton/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-28T21:55:06Z",
    "updated_at": "2018-05-28T21:55:06Z",
    "author_association": "NONE",
    "body": "Is there any reason you are taking a bytes32 for every get/set function? Why not just have the contract perform the `keccak` function?\r\n\r\nIE\r\n```solidity\r\nfunction getString(string h) public view returns (string){\r\n    return _storage._string[keccak256(h)];\r\n  }\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/392608705/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/394130195",
    "html_url": "https://github.com/ethereum/EIPs/issues/930#issuecomment-394130195",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/930",
    "id": 394130195,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5NDEzMDE5NQ==",
    "user": {
      "login": "jaycenhorton",
      "id": 18407013,
      "node_id": "MDQ6VXNlcjE4NDA3MDEz",
      "avatar_url": "https://avatars.githubusercontent.com/u/18407013?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jaycenhorton",
      "html_url": "https://github.com/jaycenhorton",
      "followers_url": "https://api.github.com/users/jaycenhorton/followers",
      "following_url": "https://api.github.com/users/jaycenhorton/following{/other_user}",
      "gists_url": "https://api.github.com/users/jaycenhorton/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jaycenhorton/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jaycenhorton/subscriptions",
      "organizations_url": "https://api.github.com/users/jaycenhorton/orgs",
      "repos_url": "https://api.github.com/users/jaycenhorton/repos",
      "events_url": "https://api.github.com/users/jaycenhorton/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jaycenhorton/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-06-03T02:24:31Z",
    "updated_at": "2018-06-03T02:24:31Z",
    "author_association": "NONE",
    "body": "To give some more context on the above, it seems like it would be error prone to force the client to use a keccak256 compliant function to get the correct hash when retrieving or setting storage with 32 bytes. It assumes all clients interacting with the contract are using something like `web3.sha3` to hash the var to retrieve, but I don't think its safe to assume that all clients will always use the same keccak256 type function, or even format it in the same 32 byte 0x prefixed hash. It seems like you should instead just have the contract perform `keccak256` on the getter and setter as it would ensure consistency. It also makes client interaction simpler since the client doesn't need to rely on a sha3 provider such as web3, as they could instead just pass the string/int/etc directly into the function. \r\n\r\nIs there some other oddity I am missing, maybe something to do with the variant type sizes (uint8/16/...256)?\r\n\r\nIn addition, Im also running into some collision issues in this type of implementation (see: https://medium.com/nomic-labs-blog/malicious-backdoors-in-ethereum-proxies-62629adf3357) . Basically, if I use this pattern, inside of something like [this](https://github.com/zeppelinos/labs/tree/master/upgradeability_using_eternal_storage) , and then declare a `contract.at(proxy.address)` then when I invoke .set or .get on the proxy, it doesn't actually work as intended due to the way `DELEGATECALL` works. I actually have to make a differently named function, such as `actuallyGetUint` which in turn calls `getUint` for the behavior to work as expected. This is due to an issue described somewhat in the linked article. ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/394130195/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/559449664",
    "html_url": "https://github.com/ethereum/EIPs/issues/930#issuecomment-559449664",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/930",
    "id": 559449664,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1OTQ0OTY2NA==",
    "user": {
      "login": "RealDeanZhao",
      "id": 6734408,
      "node_id": "MDQ6VXNlcjY3MzQ0MDg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6734408?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/RealDeanZhao",
      "html_url": "https://github.com/RealDeanZhao",
      "followers_url": "https://api.github.com/users/RealDeanZhao/followers",
      "following_url": "https://api.github.com/users/RealDeanZhao/following{/other_user}",
      "gists_url": "https://api.github.com/users/RealDeanZhao/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/RealDeanZhao/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/RealDeanZhao/subscriptions",
      "organizations_url": "https://api.github.com/users/RealDeanZhao/orgs",
      "repos_url": "https://api.github.com/users/RealDeanZhao/repos",
      "events_url": "https://api.github.com/users/RealDeanZhao/events{/privacy}",
      "received_events_url": "https://api.github.com/users/RealDeanZhao/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-11-28T11:06:34Z",
    "updated_at": "2019-11-28T11:06:34Z",
    "author_association": "NONE",
    "body": "Hi @AugustoL,\r\nI have a question:\r\nDo we have to use keccak256 to calc the map key? If two different strings get same hash, the older entry will be overrided.\r\nIs it ok to use the original string value as the key like this:\r\n```\r\nstruct Storage {\r\n    mapping(string => bool) _bool;\r\n    mapping(string => int) _int;\r\n    mapping(string => uint) _uint;\r\n    mapping(string => string) _string;\r\n    mapping(string => address) _address;\r\n    mapping(string => bytes) _bytes;\r\n  }\r\n\r\n  Storage internal s;\r\n```\r\n\r\n```\r\n// Using contract storage\r\nstring myName = \"Vitalik\"; \r\n\r\n// Using Eternal Storage\r\ns.getString(\"myName\") = \"Vitalik\";\r\n```\r\n\r\nThanks!",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/559449664/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/559460652",
    "html_url": "https://github.com/ethereum/EIPs/issues/930#issuecomment-559460652",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/930",
    "id": 559460652,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1OTQ2MDY1Mg==",
    "user": {
      "login": "ondratra",
      "id": 3767729,
      "node_id": "MDQ6VXNlcjM3Njc3Mjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3767729?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ondratra",
      "html_url": "https://github.com/ondratra",
      "followers_url": "https://api.github.com/users/ondratra/followers",
      "following_url": "https://api.github.com/users/ondratra/following{/other_user}",
      "gists_url": "https://api.github.com/users/ondratra/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ondratra/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ondratra/subscriptions",
      "organizations_url": "https://api.github.com/users/ondratra/orgs",
      "repos_url": "https://api.github.com/users/ondratra/repos",
      "events_url": "https://api.github.com/users/ondratra/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ondratra/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-11-28T11:39:59Z",
    "updated_at": "2019-11-28T11:39:59Z",
    "author_association": "NONE",
    "body": "@RealDeanZhao Two different string having the same hash is quite improbable (almost impossible). ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/559460652/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/559633843",
    "html_url": "https://github.com/ethereum/EIPs/issues/930#issuecomment-559633843",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/930",
    "id": 559633843,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1OTYzMzg0Mw==",
    "user": {
      "login": "RealDeanZhao",
      "id": 6734408,
      "node_id": "MDQ6VXNlcjY3MzQ0MDg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6734408?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/RealDeanZhao",
      "html_url": "https://github.com/RealDeanZhao",
      "followers_url": "https://api.github.com/users/RealDeanZhao/followers",
      "following_url": "https://api.github.com/users/RealDeanZhao/following{/other_user}",
      "gists_url": "https://api.github.com/users/RealDeanZhao/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/RealDeanZhao/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/RealDeanZhao/subscriptions",
      "organizations_url": "https://api.github.com/users/RealDeanZhao/orgs",
      "repos_url": "https://api.github.com/users/RealDeanZhao/repos",
      "events_url": "https://api.github.com/users/RealDeanZhao/events{/privacy}",
      "received_events_url": "https://api.github.com/users/RealDeanZhao/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-11-29T01:52:40Z",
    "updated_at": "2019-11-29T04:57:52Z",
    "author_association": "NONE",
    "body": "@ondratra So why not use the string as the key directly, it will be much simpler for the code. Are there any other considerations? Is it because solidity cannot concat a string, it will be simpler to use keccak256 to build any hash key.\r\n\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/559633843/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/754491817",
    "html_url": "https://github.com/ethereum/EIPs/issues/930#issuecomment-754491817",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/930",
    "id": 754491817,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc1NDQ5MTgxNw==",
    "user": {
      "login": "CodeSandwich",
      "id": 26183680,
      "node_id": "MDQ6VXNlcjI2MTgzNjgw",
      "avatar_url": "https://avatars.githubusercontent.com/u/26183680?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CodeSandwich",
      "html_url": "https://github.com/CodeSandwich",
      "followers_url": "https://api.github.com/users/CodeSandwich/followers",
      "following_url": "https://api.github.com/users/CodeSandwich/following{/other_user}",
      "gists_url": "https://api.github.com/users/CodeSandwich/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CodeSandwich/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CodeSandwich/subscriptions",
      "organizations_url": "https://api.github.com/users/CodeSandwich/orgs",
      "repos_url": "https://api.github.com/users/CodeSandwich/repos",
      "events_url": "https://api.github.com/users/CodeSandwich/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CodeSandwich/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-01-05T08:38:06Z",
    "updated_at": "2021-01-05T08:38:40Z",
    "author_association": "NONE",
    "body": "@RealDeanZhao I think that it creates an opportunity for optimization. If you write `s.getString(keccak256(\"myName\"))`, it's trivial for the compiler to precalculate the hash and save some gas during the runtime. If we have an already deployed storage contract with an API demanding strings, you must do the hashing on the runtime on every access, there's no way around it.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/754491817/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/997291761",
    "html_url": "https://github.com/ethereum/EIPs/issues/930#issuecomment-997291761",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/930",
    "id": 997291761,
    "node_id": "IC_kwDOAq426M47cXbx",
    "user": {
      "login": "github-actions[bot]",
      "id": 41898282,
      "node_id": "MDM6Qm90NDE4OTgyODI=",
      "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/github-actions%5Bbot%5D",
      "html_url": "https://github.com/apps/github-actions",
      "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
      "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
      "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
      "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
      "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
      "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
      "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
      "type": "Bot",
      "site_admin": false
    },
    "created_at": "2021-12-18T22:11:17Z",
    "updated_at": "2021-12-18T22:11:17Z",
    "author_association": "NONE",
    "body": "There has been no activity on this issue for two months. It will be closed in a week if no further activity occurs. If you would like to move this EIP forward, please respond to any outstanding feedback or add a comment indicating that you have addressed all required feedback and are ready for a review.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/997291761/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/1003634056",
    "html_url": "https://github.com/ethereum/EIPs/issues/930#issuecomment-1003634056",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/930",
    "id": 1003634056,
    "node_id": "IC_kwDOAq426M470j2I",
    "user": {
      "login": "github-actions[bot]",
      "id": 41898282,
      "node_id": "MDM6Qm90NDE4OTgyODI=",
      "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/github-actions%5Bbot%5D",
      "html_url": "https://github.com/apps/github-actions",
      "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
      "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
      "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
      "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
      "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
      "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
      "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
      "type": "Bot",
      "site_admin": false
    },
    "created_at": "2022-01-01T23:11:46Z",
    "updated_at": "2022-01-01T23:11:46Z",
    "author_association": "NONE",
    "body": "This issue was closed due to inactivity. If you are still pursuing it, feel free to reopen it and respond to any feedback or request a review in a comment.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/1003634056/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
