{
  "url": "https://api.github.com/repos/ethereum/EIPs/issues/97",
  "repository_url": "https://api.github.com/repos/ethereum/EIPs",
  "labels_url": "https://api.github.com/repos/ethereum/EIPs/issues/97/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/EIPs/issues/97/comments",
  "events_url": "https://api.github.com/repos/ethereum/EIPs/issues/97/events",
  "html_url": "https://github.com/ethereum/EIPs/issues/97",
  "id": 151073378,
  "node_id": "MDU6SXNzdWUxNTEwNzMzNzg=",
  "number": 97,
  "title": "SSTORE/SLOAD for byte arrays",
  "user": {
    "login": "vbuterin",
    "id": 2230894,
    "node_id": "MDQ6VXNlcjIyMzA4OTQ=",
    "avatar_url": "https://avatars.githubusercontent.com/u/2230894?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vbuterin",
    "html_url": "https://github.com/vbuterin",
    "followers_url": "https://api.github.com/users/vbuterin/followers",
    "following_url": "https://api.github.com/users/vbuterin/following{/other_user}",
    "gists_url": "https://api.github.com/users/vbuterin/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vbuterin/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vbuterin/subscriptions",
    "organizations_url": "https://api.github.com/users/vbuterin/orgs",
    "repos_url": "https://api.github.com/users/vbuterin/repos",
    "events_url": "https://api.github.com/users/vbuterin/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vbuterin/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 2328627851,
      "node_id": "MDU6TGFiZWwyMzI4NjI3ODUx",
      "url": "https://api.github.com/repos/ethereum/EIPs/labels/stale",
      "name": "stale",
      "color": "000000",
      "default": false,
      "description": ""
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 9,
  "created_at": "2016-04-26T08:26:49Z",
  "updated_at": "2022-06-16T05:15:54Z",
  "closed_at": "2022-01-30T07:10:25Z",
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "NOTE: this is split off from #86, and updated to incorporate what was agreed on the dev call on 2016.04.25.\n### Parameters\n- `BASE_COST`: 2500\n- `BYTE_STORAGE_COST`: 250\n- `BYTE_CHANGE_COST`: 40\n- `MIN_COST`: 2500\n- `GSSIZE`: 50\n- `GSLOADBYTES`: 50\n- `METROPOLIS_FORK_BLKNUM`: TBA\n### Specification\n\nIf `block.number >= METROPOLIS_FORK_BLKNUM`, then:\n1. Add an opcode `SLOADBYTES` at 0xe1, which takes three arguments off the stack: `key`, `mstart`, `msize`. Reads the storage of the account at the given key, and outputs the result into memory; unused memory is left unmodified, and memory is only extended to the point where it is needed (eg. if `msize = 2**200` but the result only returns 1000 bytes, then you only pay gas for extending up to `mstart + 1000`). Gas cost `GSLOADBYTES`, plus `GCOPY` gas per 32 bytes (eg. 319 bytes -> 9 \\* GCOPY, 320 -> 10 \\* GCOPY, 321 -> 10 \\* GCOPY, just like `CALLDATACOPY`, `CODECOPY` and `EXTCODECOPY`)\n2. Add an opcode `SSTOREBYTES` at 0xe2, which takes three arguments off the stack: `key`, `mstart`, `msize`. Copies the given memory slice into that key in storage. Gas cost is computed according to the following schedule: `total_cost = BASE_COST + BYTE_STORAGE_COST * (adjusted byte count of memory slice - adjusted byte count of previous contents) + BYTE_CHANGE_COST * (adjusted byte count of memory slice)`, `gas_cost = max(total_cost, MIN_COST)`, `refund = MIN_COST - min(total_cost, MIN_COST)`. Adjusted byte count = 32 + length if length is nonzero, otherwize 0. An `SLOAD` operation on contract data that was previously filled with `SSTOREBYTES` return the last 32 bytes of the data, right-zeropadded. Also, note that using `SSTOREBYTES` to save a slice of zero bytes actually saves the zero bytes; it does not delete the slot.\n3. Add an opcode `SSIZE` at 0xe3, which takes a key off the stack, and returns the length of the value in storage there. Gas cost `GSSIZE`.\n### Code for SSTOREBYTES\n\n``` python\nBASE_COST = 2500\nBYTE_STORAGE_COST = 250\nBYTE_CHANGE_COST = 40\nMIN_COST = 2500\n...\nelif op == 'SSTOREBYTES':\n    key, mstart, msize = stk.pop(), stk.pop(), stk.pop()\n    if not mem_extend(mem, compustate, op, mstart, msize):\n        return vm_exception('OOG EXTENDING MEMORY')\n    prev_adjbyte_count = len(ext.get_storage_data(msg.to, key))\n    if prev_adjbyte_count >= 0:\n        prev_adjbyte_count += 32\n    post_adjbyte_count = msize + (32 if msize else 0)\n    gas_cost = BASE_COST + BYTE_STORAGE_COST * (post_adjbyte_count - prev_adjbyte_count) + BYTE_CHANGE_COST * post_adjbyte_count\n    gas_payment = max(MIN_COST, gas_cost)\n    refund = gas_payment - gas_cost\n    if compustate.gas < gas_payment:\n        return vm_exception('OUT OF GAS')\n    compustate.gas -= gas_payment\n    ext.set_storage_data(msg.to, ''.join(map(chr, mem[mstart: mstart + msize])))\n```\n### Rationale\n\nThis allows contracts to store data more efficiently by reducing the number of trie/DB writes and reads needed for contract execution. Recent measurements show that trie and DB writes are a primary source of overhead, and serenity tests show a >2x speed improvement in some cases if code is written well. The canonical examples include:\n- Cases where a byte array or string needs to be saved to storage. One practical use case is the storage of 80-byte bitcoin block headers in btcrelay.\n- Cases where a struct needs to be saved to storage, and many elements in the struct are updated at the same time. One practical use case \"order book\" contracts where buyer, seller, amount, price, currency, etc are all entered at once.\n\nAdditionally, compiler logic may be simplified as storing data in sequential slots is no longer required. This does come at the cost of requiring updates to blockchain tools that currently assume that all storage values are either empty or exactly 32 bytes long.\n\nThe rationale behind adding a 32 byte cost to nonempty storage slots is that even a one-byte storage value will necessarily have overhead including key/value storage size costs, merkle tree branches/leaves, etc; additionally, an incentive is required to encourage saving a constant 320-byte chunk in a single key rather than splitting it up among 10 keys.\n",
  "closed_by": {
    "login": "github-actions[bot]",
    "id": 41898282,
    "node_id": "MDM6Qm90NDE4OTgyODI=",
    "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/github-actions%5Bbot%5D",
    "html_url": "https://github.com/apps/github-actions",
    "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
    "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
    "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
    "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
    "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
    "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
    "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
    "type": "Bot",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/97/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/EIPs/issues/97/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/214675051",
    "html_url": "https://github.com/ethereum/EIPs/issues/97#issuecomment-214675051",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/97",
    "id": 214675051,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIxNDY3NTA1MQ==",
    "user": {
      "login": "wanderer",
      "id": 158211,
      "node_id": "MDQ6VXNlcjE1ODIxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/158211?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wanderer",
      "html_url": "https://github.com/wanderer",
      "followers_url": "https://api.github.com/users/wanderer/followers",
      "following_url": "https://api.github.com/users/wanderer/following{/other_user}",
      "gists_url": "https://api.github.com/users/wanderer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wanderer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wanderer/subscriptions",
      "organizations_url": "https://api.github.com/users/wanderer/orgs",
      "repos_url": "https://api.github.com/users/wanderer/repos",
      "events_url": "https://api.github.com/users/wanderer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wanderer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-04-26T08:59:57Z",
    "updated_at": "2016-04-26T08:59:57Z",
    "author_association": "MEMBER",
    "body": "Possible implementation concern.  [Leveldb doesn't handle large values very well](https://leveldb.googlecode.com/svn/trunk/doc/benchmark.html).  To get around this, break large values into chunks and append nonce to the key. Since leveldb sorts key lexicographical it very efficient to stream the chunks.  Leveldb has lg and lt operations, so the query needed here would be  `gt <key> and lt <key + 1>` where +1 refers to the next value, not append. \n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/214675051/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/216045953",
    "html_url": "https://github.com/ethereum/EIPs/issues/97#issuecomment-216045953",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/97",
    "id": 216045953,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIxNjA0NTk1Mw==",
    "user": {
      "login": "vbuterin",
      "id": 2230894,
      "node_id": "MDQ6VXNlcjIyMzA4OTQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2230894?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vbuterin",
      "html_url": "https://github.com/vbuterin",
      "followers_url": "https://api.github.com/users/vbuterin/followers",
      "following_url": "https://api.github.com/users/vbuterin/following{/other_user}",
      "gists_url": "https://api.github.com/users/vbuterin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vbuterin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vbuterin/subscriptions",
      "organizations_url": "https://api.github.com/users/vbuterin/orgs",
      "repos_url": "https://api.github.com/users/vbuterin/repos",
      "events_url": "https://api.github.com/users/vbuterin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vbuterin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-05-01T14:44:23Z",
    "updated_at": "2016-05-01T14:44:23Z",
    "author_association": "MEMBER",
    "body": "If you look at the bytes per second from that benchmark, you get 779k writes/sec \\* 100 bytes/write = 77.9 mbps for small values and 1100 writes/sec \\* 100000 bytes/write = 110 mbps for large values. So it doesn't seem to be fatal or even that problematic.\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/216045953/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/217236741",
    "html_url": "https://github.com/ethereum/EIPs/issues/97#issuecomment-217236741",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/97",
    "id": 217236741,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIxNzIzNjc0MQ==",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-05-05T18:36:51Z",
    "updated_at": "2016-05-05T18:36:51Z",
    "author_association": "MEMBER",
    "body": "If this is adopted and should be usable from Solidity, it will add another layer of complexity. This \"store as single blob\" has to be an optional feature for structs and arrays, because otherwise, elements of the structs and arrays are not accessible as lvalues anymore.\n\nFurthermore, the fact that storage size is dynamic will need some additional handling: If sloadbytes does not write to the full range of memory, we always have to check the size beforehand and optionally even throw if the size is not what we expect.\n\nFinally, as already commented on the original issue, I think that having two \"types\" of storage slots will add similar complexity, although I think that this is not too big an issue.\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/217236741/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/217329280",
    "html_url": "https://github.com/ethereum/EIPs/issues/97#issuecomment-217329280",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/97",
    "id": 217329280,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIxNzMyOTI4MA==",
    "user": {
      "login": "janx",
      "id": 5958,
      "node_id": "MDQ6VXNlcjU5NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5958?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/janx",
      "html_url": "https://github.com/janx",
      "followers_url": "https://api.github.com/users/janx/followers",
      "following_url": "https://api.github.com/users/janx/following{/other_user}",
      "gists_url": "https://api.github.com/users/janx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/janx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/janx/subscriptions",
      "organizations_url": "https://api.github.com/users/janx/orgs",
      "repos_url": "https://api.github.com/users/janx/repos",
      "events_url": "https://api.github.com/users/janx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/janx/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-05-06T01:53:36Z",
    "updated_at": "2016-05-06T01:53:36Z",
    "author_association": "MEMBER",
    "body": "> elements of the structs and arrays are not accessible as lvalues anymore.\n\n@chriseth can you give more details?\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/217329280/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/219007637",
    "html_url": "https://github.com/ethereum/EIPs/issues/97#issuecomment-219007637",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/97",
    "id": 219007637,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIxOTAwNzYzNw==",
    "user": {
      "login": "Nashatyrev",
      "id": 8173857,
      "node_id": "MDQ6VXNlcjgxNzM4NTc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8173857?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Nashatyrev",
      "html_url": "https://github.com/Nashatyrev",
      "followers_url": "https://api.github.com/users/Nashatyrev/followers",
      "following_url": "https://api.github.com/users/Nashatyrev/following{/other_user}",
      "gists_url": "https://api.github.com/users/Nashatyrev/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Nashatyrev/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Nashatyrev/subscriptions",
      "organizations_url": "https://api.github.com/users/Nashatyrev/orgs",
      "repos_url": "https://api.github.com/users/Nashatyrev/repos",
      "events_url": "https://api.github.com/users/Nashatyrev/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Nashatyrev/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-05-13T10:28:04Z",
    "updated_at": "2016-05-13T10:59:24Z",
    "author_association": "MEMBER",
    "body": "Are there any other rationales behind this EIP besides optimization?\nIf not than in my opinion this is the overkill to solve pure engineering performance problem with such a serious protocol change. \nThat change introduces a number of complexities (and potential vulnerabilities accordingly) for clients which are mostly relying on 32 bytes values. The change also complicates the protocol itself without introducing any new fundamental improvements. \n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/219007637/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/280635330",
    "html_url": "https://github.com/ethereum/EIPs/issues/97#issuecomment-280635330",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/97",
    "id": 280635330,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4MDYzNTMzMA==",
    "user": {
      "login": "tawaren",
      "id": 22982658,
      "node_id": "MDQ6VXNlcjIyOTgyNjU4",
      "avatar_url": "https://avatars.githubusercontent.com/u/22982658?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tawaren",
      "html_url": "https://github.com/tawaren",
      "followers_url": "https://api.github.com/users/tawaren/followers",
      "following_url": "https://api.github.com/users/tawaren/following{/other_user}",
      "gists_url": "https://api.github.com/users/tawaren/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tawaren/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tawaren/subscriptions",
      "organizations_url": "https://api.github.com/users/tawaren/orgs",
      "repos_url": "https://api.github.com/users/tawaren/repos",
      "events_url": "https://api.github.com/users/tawaren/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tawaren/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-02-17T12:21:01Z",
    "updated_at": "2017-02-17T12:54:28Z",
    "author_association": "NONE",
    "body": "What is the status of this?\r\nI assume the gas costs as stated now are not updated to include adaptions from #150 ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/280635330/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/1013818378",
    "html_url": "https://github.com/ethereum/EIPs/issues/97#issuecomment-1013818378",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/97",
    "id": 1013818378,
    "node_id": "IC_kwDOAq426M48baQK",
    "user": {
      "login": "github-actions[bot]",
      "id": 41898282,
      "node_id": "MDM6Qm90NDE4OTgyODI=",
      "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/github-actions%5Bbot%5D",
      "html_url": "https://github.com/apps/github-actions",
      "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
      "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
      "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
      "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
      "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
      "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
      "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
      "type": "Bot",
      "site_admin": false
    },
    "created_at": "2022-01-16T06:14:00Z",
    "updated_at": "2022-01-16T06:14:00Z",
    "author_association": "NONE",
    "body": "There has been no activity on this issue for two months. It will be closed in a week if no further activity occurs. If you would like to move this EIP forward, please respond to any outstanding feedback or add a comment indicating that you have addressed all required feedback and are ready for a review.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/1013818378/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/1025085329",
    "html_url": "https://github.com/ethereum/EIPs/issues/97#issuecomment-1025085329",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/97",
    "id": 1025085329,
    "node_id": "IC_kwDOAq426M49GY-R",
    "user": {
      "login": "github-actions[bot]",
      "id": 41898282,
      "node_id": "MDM6Qm90NDE4OTgyODI=",
      "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/github-actions%5Bbot%5D",
      "html_url": "https://github.com/apps/github-actions",
      "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
      "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
      "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
      "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
      "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
      "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
      "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
      "type": "Bot",
      "site_admin": false
    },
    "created_at": "2022-01-30T07:10:25Z",
    "updated_at": "2022-01-30T07:10:25Z",
    "author_association": "NONE",
    "body": "This issue was closed due to inactivity. If you are still pursuing it, feel free to reopen it and respond to any feedback or request a review in a comment.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/1025085329/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/1157241824",
    "html_url": "https://github.com/ethereum/EIPs/issues/97#issuecomment-1157241824",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/97",
    "id": 1157241824,
    "node_id": "IC_kwDOAq426M5E-hvg",
    "user": {
      "login": "qizhou",
      "id": 2541286,
      "node_id": "MDQ6VXNlcjI1NDEyODY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2541286?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/qizhou",
      "html_url": "https://github.com/qizhou",
      "followers_url": "https://api.github.com/users/qizhou/followers",
      "following_url": "https://api.github.com/users/qizhou/following{/other_user}",
      "gists_url": "https://api.github.com/users/qizhou/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/qizhou/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/qizhou/subscriptions",
      "organizations_url": "https://api.github.com/users/qizhou/orgs",
      "repos_url": "https://api.github.com/users/qizhou/repos",
      "events_url": "https://api.github.com/users/qizhou/events{/privacy}",
      "received_events_url": "https://api.github.com/users/qizhou/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-06-16T05:15:54Z",
    "updated_at": "2022-06-16T05:15:54Z",
    "author_association": "CONTRIBUTOR",
    "body": "Some thoughts on backward compatibility for SSTORE/SLOAD:\r\n- If `SSTOREBYTES` writes a bytes data with `len` < 32, then `SLOAD` will read the data with right-padded zeros to 32 bytes\r\n- If `SSTOREBYTES` writes a bytes data with `len` > 32, then `SLOAD` will return a left-32-bytes-truncated data \r\n- `SSTORE` = `SSTOREBYES` with `size` = 32\r\n\r\nFurther, to keep the IO loads of SSTORE/SLOAD as before, we could implement the storage layout by maintaining two mappings:\r\n- **Original Mapping** 32-bytes key => 32-bytes or 36-bytes `original_value`.  If `original_value` size is 32 bytes (which is the same as the existing SSTORE/SLOAD), then the `value` size is 32 bytes.  If `original_value` size is 36 bytes, then the last 4 bytes encode the size of the value.  If the size < 32, then the value is the truncated version of `original_value`.  If the size > 32, then the rest size-32 bytes are stored in the following mapping.\r\n- **Extended Mapping** 32-bytes key => arbitrary-size extended_value.  This maps the rest part of the value if the size of the value.\r\n\r\nSSIZE would simply read `original_value` from **Original Mapping** and return 32 if the value is 32 bytes or the decoded value of the last 4 bytes of the value.\r\n\r\nThis should make SSTOREBYTES/SLOADBYTES/SSIZE as a pure add-on feature of existing EVM - existing SSTORE/SLOAD semantics are kept and their IO costs are the same as before.  However, if a contract mixes the usage of fixed-bytes SSTORE/SLOAD and arbitrary-size SSTOREBYTES/SLOADBYTES/SSIZE, then the gas metering of all these opcodes needs further discussions.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/1157241824/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
