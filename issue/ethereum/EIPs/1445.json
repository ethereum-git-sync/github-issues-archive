{
  "url": "https://api.github.com/repos/ethereum/EIPs/issues/1445",
  "repository_url": "https://api.github.com/repos/ethereum/EIPs",
  "labels_url": "https://api.github.com/repos/ethereum/EIPs/issues/1445/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/EIPs/issues/1445/comments",
  "events_url": "https://api.github.com/repos/ethereum/EIPs/issues/1445/events",
  "html_url": "https://github.com/ethereum/EIPs/issues/1445",
  "id": 363022043,
  "node_id": "MDU6SXNzdWUzNjMwMjIwNDM=",
  "number": 1445,
  "title": "Sequentially Queued Transactions",
  "user": {
    "login": "maxsam4",
    "id": 7436022,
    "node_id": "MDQ6VXNlcjc0MzYwMjI=",
    "avatar_url": "https://avatars.githubusercontent.com/u/7436022?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/maxsam4",
    "html_url": "https://github.com/maxsam4",
    "followers_url": "https://api.github.com/users/maxsam4/followers",
    "following_url": "https://api.github.com/users/maxsam4/following{/other_user}",
    "gists_url": "https://api.github.com/users/maxsam4/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/maxsam4/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/maxsam4/subscriptions",
    "organizations_url": "https://api.github.com/users/maxsam4/orgs",
    "repos_url": "https://api.github.com/users/maxsam4/repos",
    "events_url": "https://api.github.com/users/maxsam4/events{/privacy}",
    "received_events_url": "https://api.github.com/users/maxsam4/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 2328627851,
      "node_id": "MDU6TGFiZWwyMzI4NjI3ODUx",
      "url": "https://api.github.com/repos/ethereum/EIPs/labels/stale",
      "name": "stale",
      "color": "000000",
      "default": false,
      "description": ""
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 14,
  "created_at": "2018-09-24T05:57:58Z",
  "updated_at": "2021-12-18T21:11:33Z",
  "closed_at": "2021-12-18T21:11:33Z",
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "Currently, Miners are free to choose the transactions to mine first. This leads to surprises when a transaction you expected to be mined first gets mined later. This often happens when the first transaction requires more gas and can not be fit in an already half full block but the second transaction can (with lower gas price but different tx.origin).\r\n\r\nThere are many scenarios where you want a transaction to be mined strictly after another transaction but don't want to wait for the first first transaction to be mined before queuing the next transaction. I will give specific examples in when I properly restructure this. Just looking for opinions right now to decide if it's worthy of an EIP.  \r\n\r\nI suggest that we add `dependent_on` field to the transactions. This field will contain a tx hash of a transaction (or an array of tx hashes?) that MUST be mined before this transaction. The transactions containing this field should also be allowed to be included in the same block as the dependent_on transaction given that the dependent_on transaction is executed first. \r\n\r\nThis will allow devs to force sequential execution of transactions originating from different accounts reliably. This will also allow devs to use lower gas price for non critical transactions that they want to be mined in order. When combined with https://github.com/ethereum/EIPs/pull/599 , this will give even more control over the queued transactions. This can also potentially solve https://github.com/ethereum/EIPs/issues/1441\r\n\r\nEDIT: Adding a use case\r\nThere are a few applications of `dependent_on` in my mind but as I am currently on GovBlocks, I will start with the application of `dependent_on` in GovBlocks. \r\n\r\nWhen a user onboards the GovBlocks platform, we deploy a set of contracts for them to Manage the DAO. The contracts are deployed using a factory and proxy technique so the user only needs to do a single transaction to onboard. However, We also have to add some default data to the contracts so that the user can use the DAO from get go. To ease UX, we add the default data from backend but the user is unable to use the DAO till the transactions are mined. If we use `dependent_on`, we can allow the user to use the GovBlocks platform and do transactions even before the transactions we sent are mined. We will just add our transaction's hash in the `dependent_on` of the user's transactions. This will also allow us to use a moderate amount of gas rather than a ridiculous amount to have the transaction mined fast so that the user can actually use the platform.\r\n\r\nThere are more applications of `dependent_on` in GovBlocks itself. Once on the GovBlocks platform, users can create proposals and then submit solutions and then cast votes. Using `dependent_on`, we can allow users to skip the wait time for mining of the transactions before doing the transactions for next steps. This will greatly increase UX, specially when the users trust the original transaction sender (which is often).\r\n\r\nMaybe we can add something that will render all the transactions invalid that are `dependent_on` on a tx hash of a transaction that has been modified.\r\n\r\nIn summary, `dependent_on` can greatly improve user experience and can potentially lower the cost of an average transaction. I will keep adding more details as I get time and eventually make a draft EIP :).\r\n\r\nLower cost of average transaction might not sound such a big deal but it is in my opinion a significant thing. How much can this change actually reduce the average cost is a different debate.\r\n",
  "closed_by": {
    "login": "github-actions[bot]",
    "id": 41898282,
    "node_id": "MDM6Qm90NDE4OTgyODI=",
    "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/github-actions%5Bbot%5D",
    "html_url": "https://github.com/apps/github-actions",
    "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
    "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
    "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
    "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
    "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
    "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
    "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
    "type": "Bot",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/1445/reactions",
    "total_count": 2,
    "+1": 1,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 1,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/EIPs/issues/1445/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/423887563",
    "html_url": "https://github.com/ethereum/EIPs/issues/1445#issuecomment-423887563",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1445",
    "id": 423887563,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyMzg4NzU2Mw==",
    "user": {
      "login": "0xKiwi",
      "id": 6251510,
      "node_id": "MDQ6VXNlcjYyNTE1MTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6251510?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/0xKiwi",
      "html_url": "https://github.com/0xKiwi",
      "followers_url": "https://api.github.com/users/0xKiwi/followers",
      "following_url": "https://api.github.com/users/0xKiwi/following{/other_user}",
      "gists_url": "https://api.github.com/users/0xKiwi/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/0xKiwi/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/0xKiwi/subscriptions",
      "organizations_url": "https://api.github.com/users/0xKiwi/orgs",
      "repos_url": "https://api.github.com/users/0xKiwi/repos",
      "events_url": "https://api.github.com/users/0xKiwi/events{/privacy}",
      "received_events_url": "https://api.github.com/users/0xKiwi/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-09-24T06:43:32Z",
    "updated_at": "2018-09-24T06:44:33Z",
    "author_association": "NONE",
    "body": "How exactly would the `dependent_on` field be passed in? Included as a field in the transaction itself?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/423887563/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/423889158",
    "html_url": "https://github.com/ethereum/EIPs/issues/1445#issuecomment-423889158",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1445",
    "id": 423889158,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyMzg4OTE1OA==",
    "user": {
      "login": "maxsam4",
      "id": 7436022,
      "node_id": "MDQ6VXNlcjc0MzYwMjI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7436022?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/maxsam4",
      "html_url": "https://github.com/maxsam4",
      "followers_url": "https://api.github.com/users/maxsam4/followers",
      "following_url": "https://api.github.com/users/maxsam4/following{/other_user}",
      "gists_url": "https://api.github.com/users/maxsam4/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/maxsam4/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/maxsam4/subscriptions",
      "organizations_url": "https://api.github.com/users/maxsam4/orgs",
      "repos_url": "https://api.github.com/users/maxsam4/repos",
      "events_url": "https://api.github.com/users/maxsam4/events{/privacy}",
      "received_events_url": "https://api.github.com/users/maxsam4/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-09-24T06:54:37Z",
    "updated_at": "2018-09-24T06:54:37Z",
    "author_association": "CONTRIBUTOR",
    "body": "Hey @IvanTheGreatDev Thanks for taking interest. To answer your question, yes, `dependent_on` will be a field in the transaction itself just like `gasPrice` and `nonce` are.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/423889158/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/423897680",
    "html_url": "https://github.com/ethereum/EIPs/issues/1445#issuecomment-423897680",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1445",
    "id": 423897680,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyMzg5NzY4MA==",
    "user": {
      "login": "maxsam4",
      "id": 7436022,
      "node_id": "MDQ6VXNlcjc0MzYwMjI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7436022?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/maxsam4",
      "html_url": "https://github.com/maxsam4",
      "followers_url": "https://api.github.com/users/maxsam4/followers",
      "following_url": "https://api.github.com/users/maxsam4/following{/other_user}",
      "gists_url": "https://api.github.com/users/maxsam4/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/maxsam4/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/maxsam4/subscriptions",
      "organizations_url": "https://api.github.com/users/maxsam4/orgs",
      "repos_url": "https://api.github.com/users/maxsam4/repos",
      "events_url": "https://api.github.com/users/maxsam4/events{/privacy}",
      "received_events_url": "https://api.github.com/users/maxsam4/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-09-24T07:47:47Z",
    "updated_at": "2018-09-24T07:47:47Z",
    "author_association": "CONTRIBUTOR",
    "body": "This can even replace nonce's functionality (some of it, at least) if we force every transaction to include the account's last transaction's hash in `dependent_on`. This will mean that we will need to make `dependent_on` an array of tx hashes so that it can serve the nonce's purpose as well as its own purpose.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/423897680/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/423946020",
    "html_url": "https://github.com/ethereum/EIPs/issues/1445#issuecomment-423946020",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1445",
    "id": 423946020,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyMzk0NjAyMA==",
    "user": {
      "login": "abstractpoint",
      "id": 3032975,
      "node_id": "MDQ6VXNlcjMwMzI5NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3032975?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/abstractpoint",
      "html_url": "https://github.com/abstractpoint",
      "followers_url": "https://api.github.com/users/abstractpoint/followers",
      "following_url": "https://api.github.com/users/abstractpoint/following{/other_user}",
      "gists_url": "https://api.github.com/users/abstractpoint/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/abstractpoint/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/abstractpoint/subscriptions",
      "organizations_url": "https://api.github.com/users/abstractpoint/orgs",
      "repos_url": "https://api.github.com/users/abstractpoint/repos",
      "events_url": "https://api.github.com/users/abstractpoint/events{/privacy}",
      "received_events_url": "https://api.github.com/users/abstractpoint/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-09-24T11:37:11Z",
    "updated_at": "2018-09-24T11:37:11Z",
    "author_association": "NONE",
    "body": "I like this idea, since tx hash is something that you get immediately after composing a transaction, so it can be all computed at once? I can see an interesting scenario where 1 transaction, can have multiple follow-on transactions (lets call them a transaction spread, with different gas prices) all sharing the same dependent_on flag. Would this be allowed? And can this be executed all at once, potentially requiring the user (of a wallet) to approve all of those in one batch, and not having to need to check and resubmit, as this spread can be crafted to reasonably guarantee timely execution. (via a range of gas prices)\r\n\r\nCould you provide some examples please, as it's useful to step back and think as an end user of this.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/423946020/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/424159699",
    "html_url": "https://github.com/ethereum/EIPs/issues/1445#issuecomment-424159699",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1445",
    "id": 424159699,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyNDE1OTY5OQ==",
    "user": {
      "login": "expede",
      "id": 1052016,
      "node_id": "MDQ6VXNlcjEwNTIwMTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1052016?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/expede",
      "html_url": "https://github.com/expede",
      "followers_url": "https://api.github.com/users/expede/followers",
      "following_url": "https://api.github.com/users/expede/following{/other_user}",
      "gists_url": "https://api.github.com/users/expede/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/expede/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/expede/subscriptions",
      "organizations_url": "https://api.github.com/users/expede/orgs",
      "repos_url": "https://api.github.com/users/expede/repos",
      "events_url": "https://api.github.com/users/expede/events{/privacy}",
      "received_events_url": "https://api.github.com/users/expede/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-09-24T23:36:38Z",
    "updated_at": "2018-09-24T23:42:23Z",
    "author_association": "CONTRIBUTOR",
    "body": "> There are many scenarios where you want a transaction to be mined strictly after another transaction\r\n> [...]\r\n> I will give specific examples in when I properly restructure this. Just looking for opinions right now to decide if it's worthy of an EIP.\r\n\r\nThis is definitely an interesting idea and I'd love to see a fleshed out EIP 👍\r\n\r\n> I can see an interesting scenario where 1 transaction, can have multiple follow-on transactions (lets call them a transaction spread, with different gas prices) all sharing the same dependent_on flag.\r\n\r\nThere's a lot of hidden complexity in moving from independent transactions to transaction DAGs, and I'm curious to see where the scope boundary gets drawn. Since we're essentially talking about batching, it would be good to see batching and chaining separately described, or at least a full semantics of how they're expected to interact (if at all).\r\n\r\nFor example, a description of what happens when one transaction in the same batch generation fails would be helpful, or if there's a strict one-for-one chaining dependency (ie: each transaction is isolated and the ordering is the only control mechanism). Thinking out loud, you may be able to specify that behaviour in a similar way to how [Erlang declaratively sets supervision strategies](https://learnyousomeerlang.com/supervisors) ([official docs here](http://erlang.org/doc/design_principles/sup_princ.html)), but adjusted for this use case. \r\n\r\nA quick and dirty example `{ depends_on: 'abc', fail_strategy: 'one_for_all' }`.\r\n\r\n---\r\n\r\nAt risk of being out in left field but FWIW: we've been looking at an adjacent problem that your EIP _may_ be a good generalization of: multi-transaction \"sessions\" (esp. pertaining to an [ERC1066](https://eips.ethereum.org/EIPS/eip-1066)-to-web bridge). Our current model involves a server intermediary, and ideally output \"pipes\" like #1287 in addition to `event`s. We hadn't considered doing the ordering directly by the network.\r\n\r\nOften these transactions have not only an ordering dependency, but require some state threading and/or control logic (ie: if `return A` then `transaction B` else `transaction C`). I suppose based on the rough description, you'd set a flag on a control contract and the next transaction(s) would switch their behaviour based on that?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/424159699/reactions",
      "total_count": 3,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/424222950",
    "html_url": "https://github.com/ethereum/EIPs/issues/1445#issuecomment-424222950",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1445",
    "id": 424222950,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyNDIyMjk1MA==",
    "user": {
      "login": "maxsam4",
      "id": 7436022,
      "node_id": "MDQ6VXNlcjc0MzYwMjI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7436022?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/maxsam4",
      "html_url": "https://github.com/maxsam4",
      "followers_url": "https://api.github.com/users/maxsam4/followers",
      "following_url": "https://api.github.com/users/maxsam4/following{/other_user}",
      "gists_url": "https://api.github.com/users/maxsam4/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/maxsam4/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/maxsam4/subscriptions",
      "organizations_url": "https://api.github.com/users/maxsam4/orgs",
      "repos_url": "https://api.github.com/users/maxsam4/repos",
      "events_url": "https://api.github.com/users/maxsam4/events{/privacy}",
      "received_events_url": "https://api.github.com/users/maxsam4/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-09-25T06:31:35Z",
    "updated_at": "2018-09-25T06:31:35Z",
    "author_association": "CONTRIBUTOR",
    "body": "> I like this idea, since tx hash is something that you get immediately after composing a transaction, so it can be all computed at once? I can see an interesting scenario where 1 transaction, can have multiple follow-on transactions (lets call them a transaction spread, with different gas prices) all sharing the same dependent_on flag. Would this be allowed? And can this be executed all at once, potentially requiring the user (of a wallet) to approve all of those in one batch, and not having to need to check and resubmit, as this spread can be crafted to reasonably guarantee timely execution. (via a range of gas prices)\r\n\r\nAllowing multiple `dependent_on` or having multiple transactions depend on a single transaction shouldn't be a problem imo. Batching transactions into a single transaction/ signature request is a different think though and out of the context of this ERC. Also, I don't see how `dependent_on` will allow you to specify a range of gas prices. The highest gas price transaction will always get executed first and if you make it dependent on the lower price tx then the lower price tx will always get executed first. I'll soon write up detailed examples of where I want to use Sequentially Queued Transactions to improve UX and hence adoption.\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/424222950/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/424224899",
    "html_url": "https://github.com/ethereum/EIPs/issues/1445#issuecomment-424224899",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1445",
    "id": 424224899,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyNDIyNDg5OQ==",
    "user": {
      "login": "maxsam4",
      "id": 7436022,
      "node_id": "MDQ6VXNlcjc0MzYwMjI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7436022?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/maxsam4",
      "html_url": "https://github.com/maxsam4",
      "followers_url": "https://api.github.com/users/maxsam4/followers",
      "following_url": "https://api.github.com/users/maxsam4/following{/other_user}",
      "gists_url": "https://api.github.com/users/maxsam4/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/maxsam4/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/maxsam4/subscriptions",
      "organizations_url": "https://api.github.com/users/maxsam4/orgs",
      "repos_url": "https://api.github.com/users/maxsam4/repos",
      "events_url": "https://api.github.com/users/maxsam4/events{/privacy}",
      "received_events_url": "https://api.github.com/users/maxsam4/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-09-25T06:40:34Z",
    "updated_at": "2018-09-25T06:40:34Z",
    "author_association": "CONTRIBUTOR",
    "body": "> There's a lot of hidden complexity in moving from independent transactions to transaction DAGs, and I'm curious to see where the scope boundary gets drawn. Since we're essentially talking about batching, it would be good to see batching and chaining separately described, or at least a full semantics of how they're expected to interact (if at all).\r\n\r\nImplementing batching is a much more complex task than just implementing `dependent_on`.  It was not my intent originally to support batching but it's something worth thinking about. The requirements I have are getting solved by a simple Queue.\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/424224899/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/424303428",
    "html_url": "https://github.com/ethereum/EIPs/issues/1445#issuecomment-424303428",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1445",
    "id": 424303428,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyNDMwMzQyOA==",
    "user": {
      "login": "abstractpoint",
      "id": 3032975,
      "node_id": "MDQ6VXNlcjMwMzI5NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3032975?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/abstractpoint",
      "html_url": "https://github.com/abstractpoint",
      "followers_url": "https://api.github.com/users/abstractpoint/followers",
      "following_url": "https://api.github.com/users/abstractpoint/following{/other_user}",
      "gists_url": "https://api.github.com/users/abstractpoint/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/abstractpoint/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/abstractpoint/subscriptions",
      "organizations_url": "https://api.github.com/users/abstractpoint/orgs",
      "repos_url": "https://api.github.com/users/abstractpoint/repos",
      "events_url": "https://api.github.com/users/abstractpoint/events{/privacy}",
      "received_events_url": "https://api.github.com/users/abstractpoint/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-09-25T11:16:14Z",
    "updated_at": "2018-09-25T11:16:14Z",
    "author_association": "NONE",
    "body": ">  Batching transactions into a single transaction/ signature request is a different think though and out of the context of this ERC.\r\n\r\n> There's a lot of hidden complexity in moving from independent transactions to transaction DAGs, and I'm curious to see where the scope boundary gets drawn.\r\n\r\nAgree with you both, might be possible to give impression of batching in the UI but still use discreet standalone transactions, so shouldn't be in scope of this.\r\n\r\n> I don't see how dependent_on will allow you to specify a range of gas prices. The highest gas price transaction will always get executed first and if you make it dependent on the lower price tx then the lower price tx will always get executed first. \r\n\r\nThe #599 would then come in to solve my problem, to be able to make a tx with valid_from_block and valid_until_block. I can stagger these discreet transactions with for example a 10% increases in gas cost, and achieve the desired result. A wallet UI can then present and sign multiple transactions as one, or some other clever display, to show that you are about to sign mostly duplicates, but with a different range of gas prices/blocks.\r\n\r\nBut back to the topic of Dependent transactions, looking forward to hear examples.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/424303428/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/424591098",
    "html_url": "https://github.com/ethereum/EIPs/issues/1445#issuecomment-424591098",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1445",
    "id": 424591098,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyNDU5MTA5OA==",
    "user": {
      "login": "maxsam4",
      "id": 7436022,
      "node_id": "MDQ6VXNlcjc0MzYwMjI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7436022?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/maxsam4",
      "html_url": "https://github.com/maxsam4",
      "followers_url": "https://api.github.com/users/maxsam4/followers",
      "following_url": "https://api.github.com/users/maxsam4/following{/other_user}",
      "gists_url": "https://api.github.com/users/maxsam4/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/maxsam4/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/maxsam4/subscriptions",
      "organizations_url": "https://api.github.com/users/maxsam4/orgs",
      "repos_url": "https://api.github.com/users/maxsam4/repos",
      "events_url": "https://api.github.com/users/maxsam4/events{/privacy}",
      "received_events_url": "https://api.github.com/users/maxsam4/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-09-26T05:38:34Z",
    "updated_at": "2018-09-26T05:38:34Z",
    "author_association": "CONTRIBUTOR",
    "body": "There are a few applications of `dependent_on` in my mind but as I am currently on GovBlocks, I will start with the application of `dependent_on` in GovBlocks. \r\n\r\nWhen a user onboards the GovBlocks platform, we deploy a set of contracts for them to Manage the DAO. The contracts are deployed using a factory and proxy technique so the user only needs to do a single transaction to onboard. However, We also have to add some default data to the contracts so that the user can use the DAO from get go. To ease UX, we add the default data from backend but the user is unable to use the DAO till the transactions are mined. If we use `dependent_on`, we can allow the user to use the GovBlocks platform and do transactions even before the transactions we sent are mined. We will just add our transaction's hash in the `dependent_on` of the user's transactions. This will also allow us to use a moderate amount of gas rather than a ridiculous amount to have the transaction mined fast so that the user can actually use the platform.\r\n\r\nThere are more applications of `dependent_on` in GovBlocks itself. Once on the GovBlocks platform, users can create proposals and then submit solutions and then cast votes. Using `dependent_on`, we can allow users to skip the wait time for mining of the transactions before doing the transactions for next steps. This will greatly increase UX, specially when the users trust the original transaction sender (which is often).\r\n\r\nMaybe we can add something that will render all the transactions invalid that are `dependent_on` on a tx hash of a transaction that has been modified.\r\n\r\nIn summary, `dependent_on` can greatly improve user experience and can potentially lower the cost of an average transaction. I will keep adding more details as I get time and eventually make a draft EIP :).\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/424591098/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/447972893",
    "html_url": "https://github.com/ethereum/EIPs/issues/1445#issuecomment-447972893",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1445",
    "id": 447972893,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0Nzk3Mjg5Mw==",
    "user": {
      "login": "BrendanChou",
      "id": 3680392,
      "node_id": "MDQ6VXNlcjM2ODAzOTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3680392?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/BrendanChou",
      "html_url": "https://github.com/BrendanChou",
      "followers_url": "https://api.github.com/users/BrendanChou/followers",
      "following_url": "https://api.github.com/users/BrendanChou/following{/other_user}",
      "gists_url": "https://api.github.com/users/BrendanChou/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/BrendanChou/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/BrendanChou/subscriptions",
      "organizations_url": "https://api.github.com/users/BrendanChou/orgs",
      "repos_url": "https://api.github.com/users/BrendanChou/repos",
      "events_url": "https://api.github.com/users/BrendanChou/events{/privacy}",
      "received_events_url": "https://api.github.com/users/BrendanChou/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-12-17T19:42:25Z",
    "updated_at": "2018-12-17T19:42:25Z",
    "author_association": "NONE",
    "body": "+1 for this idea\r\n\r\nThere are also times when wallet software will queue up a bunch of transactions with sequential nonces. If the first transaction gets lost or has too low of a gas fee, then it won't be mined. The user will then have to return to the wallet software and replace that transaction. Only then will the next transactions be mined. This is AWFUL in almost every scenario.\r\n\r\nIf the ordering did NOT matter, then this prevents the non-dependent transactions from being mined.\r\n\r\nIf the ordering DID matter, then it's probable that you don't want the queued transactions to run if you are now cancelling the original transaction. This is even worse for financial applications where you might have been taking a trade that is no longer favorable. Given this scenario, the only recourse may be to permanently remove all of your Eth from the wallet with the replacement transaction. This also may be a problem if you have other ERC20 tokens still in that wallet.\r\n\r\nTherefore I also propose an additional `blocking` field which can prevent other transactions from the same address from being mined. That way you can cancel pending transactions much like you can today using the same nonce. Either that, or you can keep the nonce but it no longer has to be in order and just blocks other transactions of the same nonce.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/447972893/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/448094053",
    "html_url": "https://github.com/ethereum/EIPs/issues/1445#issuecomment-448094053",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1445",
    "id": 448094053,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0ODA5NDA1Mw==",
    "user": {
      "login": "maxsam4",
      "id": 7436022,
      "node_id": "MDQ6VXNlcjc0MzYwMjI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7436022?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/maxsam4",
      "html_url": "https://github.com/maxsam4",
      "followers_url": "https://api.github.com/users/maxsam4/followers",
      "following_url": "https://api.github.com/users/maxsam4/following{/other_user}",
      "gists_url": "https://api.github.com/users/maxsam4/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/maxsam4/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/maxsam4/subscriptions",
      "organizations_url": "https://api.github.com/users/maxsam4/orgs",
      "repos_url": "https://api.github.com/users/maxsam4/repos",
      "events_url": "https://api.github.com/users/maxsam4/events{/privacy}",
      "received_events_url": "https://api.github.com/users/maxsam4/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-12-18T04:39:35Z",
    "updated_at": "2018-12-18T04:39:35Z",
    "author_association": "CONTRIBUTOR",
    "body": "Thanks for your feedback @BrendanChou ! I couldn't make time to push this EIP/ERC further earlier but I'll try to get a formal PR done by Christmas. Meanwhile, I would like to tackle some of your concerns.\r\n\r\n> There are also times when wallet software will queue up a bunch of transactions with sequential nonces. If the first transaction gets lost or has too low of a gas fee, then it won't be mined. The user will then have to return to the wallet software and replace that transaction. Only then will the next transactions be mined. This is AWFUL in almost every scenario.\r\n> \r\n> If the ordering did NOT matter, then this prevents the non-dependent transactions from being mined.\r\n\r\nFor transactions originating from a single account, we will have to maintain the nonce and keep transactions sequential. One of the main purposes of the nonce is to prevent replay attacks. Even if we find an alternative solution, it will be too big of a change for too little gains IMO.\r\n\r\n> If the ordering DID matter, then it's probable that you don't want the queued transactions to run if you are now cancelling the original transaction. This is even worse for financial applications where you might have been taking a trade that is no longer favorable. Given this scenario, the only recourse may be to permanently remove all of your Eth from the wallet with the replacement transaction. This also may be a problem if you have other ERC20 tokens still in that wallet.\r\n\r\nEven now, you can cancel all your pending tx. You don't need to move all the ether from your account. You can just overwrite them with a tx sending 0 ether somewhere. Yeah, it will cost ~21000 gas/tx but that's still cheap.\r\n\r\n> Therefore I also propose an additional `blocking` field which can prevent other transactions from the same address from being mined. That way you can cancel pending transactions much like you can today using the same nonce. Either that, or you can keep the nonce but it no longer has to be in order and just blocks other transactions of the same nonce.\r\n\r\nIf this EIP is accepted, you will be able to mark the new transaction as dependent on the original transaction so that if the original transaction is canceled, the new transactions will not be mined. I don't see the need for a separate `blocking` field. \r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/448094053/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/450362099",
    "html_url": "https://github.com/ethereum/EIPs/issues/1445#issuecomment-450362099",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1445",
    "id": 450362099,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1MDM2MjA5OQ==",
    "user": {
      "login": "maxsam4",
      "id": 7436022,
      "node_id": "MDQ6VXNlcjc0MzYwMjI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7436022?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/maxsam4",
      "html_url": "https://github.com/maxsam4",
      "followers_url": "https://api.github.com/users/maxsam4/followers",
      "following_url": "https://api.github.com/users/maxsam4/following{/other_user}",
      "gists_url": "https://api.github.com/users/maxsam4/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/maxsam4/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/maxsam4/subscriptions",
      "organizations_url": "https://api.github.com/users/maxsam4/orgs",
      "repos_url": "https://api.github.com/users/maxsam4/repos",
      "events_url": "https://api.github.com/users/maxsam4/events{/privacy}",
      "received_events_url": "https://api.github.com/users/maxsam4/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-12-28T13:50:14Z",
    "updated_at": "2018-12-28T13:51:50Z",
    "author_association": "CONTRIBUTOR",
    "body": "I was thinking and writing about this over the holidays but more I wrote about the practical implementation of this and alternative solutions, more I realized that I am just contradicting my motivation. Now, I am not so sure if implementing this is a good Idea.\r\n\r\nThe practical implementation that I thought of was: \r\nMaintaining a mapping of tx hash -> stack of tx dependent on it and dividing mempool into active and waiting mempool.\r\n\r\n- Whenever a transaction is broadcasted, a mapping of tx to an empty stack will be created.\r\n- If tx2 is dependent on some other tx1 then tx2 will be pushed into tx1's stack and tx2 will be sent to dependent mempool.\r\n- If tx2 is not dependent on any other tx then tx2 will be sent to active mempool.\r\n- Miners will pick transactions to mine from the active mempool.\r\n- Whenever a transaction is mined, all the transactions dependent on it will be popped from the stack and moved to the active mempool. So whenever tx1 gets mined, tx2 will be popped from tx1's stack and sent to active mempool.\r\n\r\nThis algo should work but it increases the complexity on nodes. I don't have the numbers but I am in the dilemma if this is worth implementing. \r\n\r\nEthereum 2.0 is coming soon™ that will make alternative layer 2 solutions of this more feasible. It will probably also kill the motivation of lowering gas price as due to the large capacity, gas price should anyway be lowered. It might also make it hard to implement as it might force node's to maintain dependency of inter shard transactions.\r\n\r\nAs a result,\r\nI am pausing my work on this till anyone else proposes a better implementation.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/450362099/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/986093301",
    "html_url": "https://github.com/ethereum/EIPs/issues/1445#issuecomment-986093301",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1445",
    "id": 986093301,
    "node_id": "IC_kwDOAq426M46xpb1",
    "user": {
      "login": "github-actions[bot]",
      "id": 41898282,
      "node_id": "MDM6Qm90NDE4OTgyODI=",
      "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/github-actions%5Bbot%5D",
      "html_url": "https://github.com/apps/github-actions",
      "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
      "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
      "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
      "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
      "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
      "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
      "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
      "type": "Bot",
      "site_admin": false
    },
    "created_at": "2021-12-04T21:10:39Z",
    "updated_at": "2021-12-04T21:10:39Z",
    "author_association": "NONE",
    "body": "There has been no activity on this issue for two months. It will be closed in a week if no further activity occurs. If you would like to move this EIP forward, please respond to any outstanding feedback or add a comment indicating that you have addressed all required feedback and are ready for a review.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/986093301/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/997285271",
    "html_url": "https://github.com/ethereum/EIPs/issues/1445#issuecomment-997285271",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1445",
    "id": 997285271,
    "node_id": "IC_kwDOAq426M47cV2X",
    "user": {
      "login": "github-actions[bot]",
      "id": 41898282,
      "node_id": "MDM6Qm90NDE4OTgyODI=",
      "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/github-actions%5Bbot%5D",
      "html_url": "https://github.com/apps/github-actions",
      "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
      "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
      "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
      "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
      "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
      "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
      "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
      "type": "Bot",
      "site_admin": false
    },
    "created_at": "2021-12-18T21:11:32Z",
    "updated_at": "2021-12-18T21:11:32Z",
    "author_association": "NONE",
    "body": "This issue was closed due to inactivity. If you are still pursuing it, feel free to reopen it and respond to any feedback or request a review in a comment.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/997285271/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
