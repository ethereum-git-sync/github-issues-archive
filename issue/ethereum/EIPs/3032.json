{
  "url": "https://api.github.com/repos/ethereum/EIPs/issues/3032",
  "repository_url": "https://api.github.com/repos/ethereum/EIPs",
  "labels_url": "https://api.github.com/repos/ethereum/EIPs/issues/3032/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/EIPs/issues/3032/comments",
  "events_url": "https://api.github.com/repos/ethereum/EIPs/issues/3032/events",
  "html_url": "https://github.com/ethereum/EIPs/issues/3032",
  "id": 717644762,
  "node_id": "MDU6SXNzdWU3MTc2NDQ3NjI=",
  "number": 3032,
  "title": "Copy all contract data to another contract; join N contracts into one",
  "user": {
    "login": "vporton",
    "id": 2900574,
    "node_id": "MDQ6VXNlcjI5MDA1NzQ=",
    "avatar_url": "https://avatars.githubusercontent.com/u/2900574?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vporton",
    "html_url": "https://github.com/vporton",
    "followers_url": "https://api.github.com/users/vporton/followers",
    "following_url": "https://api.github.com/users/vporton/following{/other_user}",
    "gists_url": "https://api.github.com/users/vporton/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vporton/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vporton/subscriptions",
    "organizations_url": "https://api.github.com/users/vporton/orgs",
    "repos_url": "https://api.github.com/users/vporton/repos",
    "events_url": "https://api.github.com/users/vporton/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vporton/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 2328627851,
      "node_id": "MDU6TGFiZWwyMzI4NjI3ODUx",
      "url": "https://api.github.com/repos/ethereum/EIPs/labels/stale",
      "name": "stale",
      "color": "000000",
      "default": false,
      "description": ""
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 15,
  "created_at": "2020-10-08T20:34:05Z",
  "updated_at": "2021-11-07T02:29:28Z",
  "closed_at": "2021-11-07T02:29:28Z",
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "Need a new kind of operation (both as a new RPC command and a new opcode) that creates a contract from a given bytecode _and_ copies (to implement it efficiently use copy on write) all data from another contract.\r\n\r\nThis is to allow forking erroneous or otherwise disadvantageous contracts. It is better than upgradeable contracts:\r\n\r\n- works for every contract (non-upgradeable contracts, too)\r\n- has no overhead of indirect calls\r\n- unlike upgradeable contracts, does not cancel the old contract, what is important for trust and stability, for decentralization of management of contract logic\r\n\r\nMoreover, we could join forked data from several contracts (specified when doing the fork operation) 0 .. N, with a new Solidity keyword `contract_data` (and new opcodes) like:\r\n\r\n```solidity\r\nSolidityContract0 data0 = SolidityContract0(new contract_data(0));\r\nSolidityContract1 data1 = SolidityContract1(new contract_data(1));\r\n...\r\nSolidityContractN dataN = SolidityContractN(new contract_data(N));\r\n...\r\ndata0.variable = 123;\r\n```\r\n\r\nThat is we would allow forking several contracts 0..N into one contract. It should be optional to designate one contract K of the contracts 0..N as the main contract (so that `variable` would become equivalent to `dataK.variable`). No need for designation of this contract K on EVM level, it can be done by an option to Solidity compiler or a compiler directive.\r\n\r\nThe feature to join N contracts into one is not strictly necessary, as can be done using several wrapper contracts each of which forks just one of the N contract, but allowing to join N contracts into one is a performance advantage as it does not require deployment of N new contracts and wrappers to access their data.",
  "closed_by": {
    "login": "github-actions[bot]",
    "id": 41898282,
    "node_id": "MDM6Qm90NDE4OTgyODI=",
    "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/github-actions%5Bbot%5D",
    "html_url": "https://github.com/apps/github-actions",
    "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
    "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
    "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
    "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
    "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
    "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
    "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
    "type": "Bot",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/3032/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/EIPs/issues/3032/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/705810666",
    "html_url": "https://github.com/ethereum/EIPs/issues/3032#issuecomment-705810666",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/3032",
    "id": 705810666,
    "node_id": "MDEyOklzc3VlQ29tbWVudDcwNTgxMDY2Ng==",
    "user": {
      "login": "vporton",
      "id": 2900574,
      "node_id": "MDQ6VXNlcjI5MDA1NzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2900574?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vporton",
      "html_url": "https://github.com/vporton",
      "followers_url": "https://api.github.com/users/vporton/followers",
      "following_url": "https://api.github.com/users/vporton/following{/other_user}",
      "gists_url": "https://api.github.com/users/vporton/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vporton/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vporton/subscriptions",
      "organizations_url": "https://api.github.com/users/vporton/orgs",
      "repos_url": "https://api.github.com/users/vporton/repos",
      "events_url": "https://api.github.com/users/vporton/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vporton/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-10-08T20:39:03Z",
    "updated_at": "2020-10-08T20:39:03Z",
    "author_association": "CONTRIBUTOR",
    "body": "Hm, we could also make `new contract_data` to accept an address as an argument and allow to fork contracts dynamically without creating a new contract. Not sure if passing address to `new contract_data` is really worth, but I am inclined that implementing this would be worth, too.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/705810666/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/705811486",
    "html_url": "https://github.com/ethereum/EIPs/issues/3032#issuecomment-705811486",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/3032",
    "id": 705811486,
    "node_id": "MDEyOklzc3VlQ29tbWVudDcwNTgxMTQ4Ng==",
    "user": {
      "login": "vporton",
      "id": 2900574,
      "node_id": "MDQ6VXNlcjI5MDA1NzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2900574?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vporton",
      "html_url": "https://github.com/vporton",
      "followers_url": "https://api.github.com/users/vporton/followers",
      "following_url": "https://api.github.com/users/vporton/following{/other_user}",
      "gists_url": "https://api.github.com/users/vporton/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vporton/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vporton/subscriptions",
      "organizations_url": "https://api.github.com/users/vporton/orgs",
      "repos_url": "https://api.github.com/users/vporton/repos",
      "events_url": "https://api.github.com/users/vporton/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vporton/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-10-08T20:40:46Z",
    "updated_at": "2020-10-08T20:40:46Z",
    "author_association": "CONTRIBUTOR",
    "body": "Oh, no need for `new contract_data(NUMBER)` syntax and no need to specify a list of N contracts on a new contract creating. We can do it instead just with `new contract_data(ADDRESS)` operation!",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/705811486/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/706481120",
    "html_url": "https://github.com/ethereum/EIPs/issues/3032#issuecomment-706481120",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/3032",
    "id": 706481120,
    "node_id": "MDEyOklzc3VlQ29tbWVudDcwNjQ4MTEyMA==",
    "user": {
      "login": "MicahZoltu",
      "id": 886059,
      "node_id": "MDQ6VXNlcjg4NjA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MicahZoltu",
      "html_url": "https://github.com/MicahZoltu",
      "followers_url": "https://api.github.com/users/MicahZoltu/followers",
      "following_url": "https://api.github.com/users/MicahZoltu/following{/other_user}",
      "gists_url": "https://api.github.com/users/MicahZoltu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MicahZoltu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MicahZoltu/subscriptions",
      "organizations_url": "https://api.github.com/users/MicahZoltu/orgs",
      "repos_url": "https://api.github.com/users/MicahZoltu/repos",
      "events_url": "https://api.github.com/users/MicahZoltu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MicahZoltu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-10-10T03:46:13Z",
    "updated_at": "2020-10-10T03:46:13Z",
    "author_association": "MEMBER",
    "body": "I believe something like this has unbounded costs if naively implemented, and it isn't immediately obvious how one would implement it in a non-naive way.  Would such a non-naive implementation work in both the go-ethereum/Nethermind storage model and the TurboGeth storage model?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/706481120/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/706744380",
    "html_url": "https://github.com/ethereum/EIPs/issues/3032#issuecomment-706744380",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/3032",
    "id": 706744380,
    "node_id": "MDEyOklzc3VlQ29tbWVudDcwNjc0NDM4MA==",
    "user": {
      "login": "vporton",
      "id": 2900574,
      "node_id": "MDQ6VXNlcjI5MDA1NzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2900574?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vporton",
      "html_url": "https://github.com/vporton",
      "followers_url": "https://api.github.com/users/vporton/followers",
      "following_url": "https://api.github.com/users/vporton/following{/other_user}",
      "gists_url": "https://api.github.com/users/vporton/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vporton/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vporton/subscriptions",
      "organizations_url": "https://api.github.com/users/vporton/orgs",
      "repos_url": "https://api.github.com/users/vporton/repos",
      "events_url": "https://api.github.com/users/vporton/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vporton/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-10-11T18:10:34Z",
    "updated_at": "2020-10-11T18:10:34Z",
    "author_association": "CONTRIBUTOR",
    "body": "> I believe something like this has unbounded costs if naively implemented\r\n\r\nConstant-time implementation:\r\n\r\nKeep an array of arrays. The first index is the contract + index of the next contract in this array (linked list), the second index is the storage slot. The values are values of storage slots.\r\n\r\nKeep an array of first indexes in the above array indexed by storage slots.\r\n\r\nTo access a value in a storage slot read the first array, then index the second array by the value obtained from the first array and the given storage slot.\r\n\r\nWhen a variable value is changed, the value in the second array changes to the index of the very first contract.\r\n\r\nPlease check this algorithm for bugs.\r\n\r\nReally constant? Well, I suspect memory allocations may make it non-constant.\r\n\r\nBut the requirement to copy contract data \"manually\" one-by-one item using much gas and also breaking atomicity is _much_ worse in costs than implementing the above algorithm.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/706744380/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/706868831",
    "html_url": "https://github.com/ethereum/EIPs/issues/3032#issuecomment-706868831",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/3032",
    "id": 706868831,
    "node_id": "MDEyOklzc3VlQ29tbWVudDcwNjg2ODgzMQ==",
    "user": {
      "login": "MicahZoltu",
      "id": 886059,
      "node_id": "MDQ6VXNlcjg4NjA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MicahZoltu",
      "html_url": "https://github.com/MicahZoltu",
      "followers_url": "https://api.github.com/users/MicahZoltu/followers",
      "following_url": "https://api.github.com/users/MicahZoltu/following{/other_user}",
      "gists_url": "https://api.github.com/users/MicahZoltu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MicahZoltu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MicahZoltu/subscriptions",
      "organizations_url": "https://api.github.com/users/MicahZoltu/orgs",
      "repos_url": "https://api.github.com/users/MicahZoltu/repos",
      "events_url": "https://api.github.com/users/MicahZoltu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MicahZoltu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-10-12T05:21:43Z",
    "updated_at": "2020-10-12T05:21:43Z",
    "author_association": "MEMBER",
    "body": "All contract storage in Ethereum is in a Patricia Merkle trie, so unfortunately it isn't as simple as it would be in a traditional application.  Contract data isn't (and can't be) stored in an array, just due to the nature of data storage and consensus and proofs.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/706868831/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/706942822",
    "html_url": "https://github.com/ethereum/EIPs/issues/3032#issuecomment-706942822",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/3032",
    "id": 706942822,
    "node_id": "MDEyOklzc3VlQ29tbWVudDcwNjk0MjgyMg==",
    "user": {
      "login": "vporton",
      "id": 2900574,
      "node_id": "MDQ6VXNlcjI5MDA1NzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2900574?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vporton",
      "html_url": "https://github.com/vporton",
      "followers_url": "https://api.github.com/users/vporton/followers",
      "following_url": "https://api.github.com/users/vporton/following{/other_user}",
      "gists_url": "https://api.github.com/users/vporton/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vporton/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vporton/subscriptions",
      "organizations_url": "https://api.github.com/users/vporton/orgs",
      "repos_url": "https://api.github.com/users/vporton/repos",
      "events_url": "https://api.github.com/users/vporton/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vporton/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-10-12T07:47:22Z",
    "updated_at": "2020-10-12T07:47:22Z",
    "author_association": "CONTRIBUTOR",
    "body": "> All contract storage in Ethereum is in a Patricia Merkle trie, so unfortunately it isn't as simple as it would be in a traditional application. Contract data isn't (and can't be) stored in an array, just due to the nature of data storage and consensus and proofs.\r\n\r\nI don't know Ethereum internals, but it is weird for me that storing data in Merkle trie is necessary: We need to verify _changes_ (e.g. the contract bytecodes and function arguments) match between nodes, not the current state.\r\n\r\nIsn't it possible to rewrite the entire Ethereum database without that Merkle trie? I realize the change is major, but that's an important feature.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/706942822/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/707538225",
    "html_url": "https://github.com/ethereum/EIPs/issues/3032#issuecomment-707538225",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/3032",
    "id": 707538225,
    "node_id": "MDEyOklzc3VlQ29tbWVudDcwNzUzODIyNQ==",
    "user": {
      "login": "MicahZoltu",
      "id": 886059,
      "node_id": "MDQ6VXNlcjg4NjA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MicahZoltu",
      "html_url": "https://github.com/MicahZoltu",
      "followers_url": "https://api.github.com/users/MicahZoltu/followers",
      "following_url": "https://api.github.com/users/MicahZoltu/following{/other_user}",
      "gists_url": "https://api.github.com/users/MicahZoltu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MicahZoltu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MicahZoltu/subscriptions",
      "organizations_url": "https://api.github.com/users/MicahZoltu/orgs",
      "repos_url": "https://api.github.com/users/MicahZoltu/repos",
      "events_url": "https://api.github.com/users/MicahZoltu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MicahZoltu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-10-13T07:06:34Z",
    "updated_at": "2020-10-13T07:06:34Z",
    "author_association": "MEMBER",
    "body": "A Merkle Patricia Trie (MPT) is necessary to ensure that state is the same for all clients in the network, and to enable things like light clients, stateless clients, data proofs, etc.  The MPT design to storage is a pretty core part of the Ethereum protocol, so much so that changing it significantly is a *major* undertaking.  TurboGeth is currently working on a way to store the trie on disk in a different format, while still being able to achieve all of the guarantees, in order to conserve disk space and improve performance and this task is a multi-year project for a full team.  Removal of the MPT would probably be the largest possible change to Ethereum, and realistically a change of that magnitude would be much better suited for a separate blockchain, just do to how deeply rooted MPTs are in the design/structure of modern blockchains.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/707538225/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/708112990",
    "html_url": "https://github.com/ethereum/EIPs/issues/3032#issuecomment-708112990",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/3032",
    "id": 708112990,
    "node_id": "MDEyOklzc3VlQ29tbWVudDcwODExMjk5MA==",
    "user": {
      "login": "vporton",
      "id": 2900574,
      "node_id": "MDQ6VXNlcjI5MDA1NzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2900574?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vporton",
      "html_url": "https://github.com/vporton",
      "followers_url": "https://api.github.com/users/vporton/followers",
      "following_url": "https://api.github.com/users/vporton/following{/other_user}",
      "gists_url": "https://api.github.com/users/vporton/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vporton/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vporton/subscriptions",
      "organizations_url": "https://api.github.com/users/vporton/orgs",
      "repos_url": "https://api.github.com/users/vporton/repos",
      "events_url": "https://api.github.com/users/vporton/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vporton/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-10-14T02:19:25Z",
    "updated_at": "2020-10-14T02:19:25Z",
    "author_association": "CONTRIBUTOR",
    "body": "> A Merkle Patricia Trie (MPT) is necessary to ensure that state is the same for all clients in the network, and to enable things like light clients, stateless clients, data proofs, etc. The MPT design to storage is a pretty core part of the Ethereum protocol, so much so that changing it significantly is a _major_ undertaking. TurboGeth is currently working on a way to store the trie on disk in a different format, while still being able to achieve all of the guarantees, in order to conserve disk space and improve performance and this task is a multi-year project for a full team. Removal of the MPT would probably be the largest possible change to Ethereum, and realistically a change of that magnitude would be much better suited for a separate blockchain, just do to how deeply rooted MPTs are in the design/structure of modern blockchains.\r\n\r\nBut I do not understand why it is necessary to store the entire data in MPT: Why not just store in the blockchain every change (amounts of transactions, hashes and arguments of called functions)? The rest could be able to be restored from it. Isn't Ethereum deterministic?\r\n\r\nI think this would _much_ improve the performance.\r\n\r\nSorry, if I say stupid things.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/708112990/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/708113587",
    "html_url": "https://github.com/ethereum/EIPs/issues/3032#issuecomment-708113587",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/3032",
    "id": 708113587,
    "node_id": "MDEyOklzc3VlQ29tbWVudDcwODExMzU4Nw==",
    "user": {
      "login": "vporton",
      "id": 2900574,
      "node_id": "MDQ6VXNlcjI5MDA1NzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2900574?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vporton",
      "html_url": "https://github.com/vporton",
      "followers_url": "https://api.github.com/users/vporton/followers",
      "following_url": "https://api.github.com/users/vporton/following{/other_user}",
      "gists_url": "https://api.github.com/users/vporton/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vporton/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vporton/subscriptions",
      "organizations_url": "https://api.github.com/users/vporton/orgs",
      "repos_url": "https://api.github.com/users/vporton/repos",
      "events_url": "https://api.github.com/users/vporton/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vporton/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-10-14T02:21:15Z",
    "updated_at": "2020-10-14T02:21:15Z",
    "author_association": "CONTRIBUTOR",
    "body": "I mean to store on disk of a node changes in a blockchain format and store the current states (values of storage slots, etc.) in a non-cryptographic format.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/708113587/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/708114128",
    "html_url": "https://github.com/ethereum/EIPs/issues/3032#issuecomment-708114128",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/3032",
    "id": 708114128,
    "node_id": "MDEyOklzc3VlQ29tbWVudDcwODExNDEyOA==",
    "user": {
      "login": "vporton",
      "id": 2900574,
      "node_id": "MDQ6VXNlcjI5MDA1NzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2900574?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vporton",
      "html_url": "https://github.com/vporton",
      "followers_url": "https://api.github.com/users/vporton/followers",
      "following_url": "https://api.github.com/users/vporton/following{/other_user}",
      "gists_url": "https://api.github.com/users/vporton/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vporton/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vporton/subscriptions",
      "organizations_url": "https://api.github.com/users/vporton/orgs",
      "repos_url": "https://api.github.com/users/vporton/repos",
      "events_url": "https://api.github.com/users/vporton/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vporton/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-10-14T02:23:07Z",
    "updated_at": "2020-10-14T02:23:07Z",
    "author_association": "CONTRIBUTOR",
    "body": "Oh, I've got: It is to enable light clients.\r\n\r\nI propose a possibly minor change in the Ethereum standard: Make MPT-related features optional. So not every node would have support for light clients. Then we would develop \"non-verified light clients\" that would just trust the node.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/708114128/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/708116295",
    "html_url": "https://github.com/ethereum/EIPs/issues/3032#issuecomment-708116295",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/3032",
    "id": 708116295,
    "node_id": "MDEyOklzc3VlQ29tbWVudDcwODExNjI5NQ==",
    "user": {
      "login": "vporton",
      "id": 2900574,
      "node_id": "MDQ6VXNlcjI5MDA1NzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2900574?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vporton",
      "html_url": "https://github.com/vporton",
      "followers_url": "https://api.github.com/users/vporton/followers",
      "following_url": "https://api.github.com/users/vporton/following{/other_user}",
      "gists_url": "https://api.github.com/users/vporton/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vporton/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vporton/subscriptions",
      "organizations_url": "https://api.github.com/users/vporton/orgs",
      "repos_url": "https://api.github.com/users/vporton/repos",
      "events_url": "https://api.github.com/users/vporton/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vporton/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-10-14T02:30:32Z",
    "updated_at": "2020-10-14T02:30:32Z",
    "author_association": "CONTRIBUTOR",
    "body": "After a little more thinking:\r\n\r\nI am not a cryptography expert, but I assume that storing my \"arrays of arrays\" (see above) in MPT instead or in addition of what is currently stored in MPT will _not_ cause unbounded costs (if the current MPT storage model does not cause unbounded costs, because my model of storage seems then similar to the current).\r\n\r\nIt possibly requires a change in protocol: To verify light clients need to use _another_ MPT. But this change is very useful. Somebody said it needs another blockchain. In my opinion, it should be done as an Ethereum hardfork (if it really requires a hardfork).",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/708116295/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/708286695",
    "html_url": "https://github.com/ethereum/EIPs/issues/3032#issuecomment-708286695",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/3032",
    "id": 708286695,
    "node_id": "MDEyOklzc3VlQ29tbWVudDcwODI4NjY5NQ==",
    "user": {
      "login": "MicahZoltu",
      "id": 886059,
      "node_id": "MDQ6VXNlcjg4NjA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MicahZoltu",
      "html_url": "https://github.com/MicahZoltu",
      "followers_url": "https://api.github.com/users/MicahZoltu/followers",
      "following_url": "https://api.github.com/users/MicahZoltu/following{/other_user}",
      "gists_url": "https://api.github.com/users/MicahZoltu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MicahZoltu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MicahZoltu/subscriptions",
      "organizations_url": "https://api.github.com/users/MicahZoltu/orgs",
      "repos_url": "https://api.github.com/users/MicahZoltu/repos",
      "events_url": "https://api.github.com/users/MicahZoltu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MicahZoltu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-10-14T09:39:43Z",
    "updated_at": "2020-10-14T09:39:43Z",
    "author_association": "MEMBER",
    "body": "If you really want to go down this path, my recommendation would be to start by forking one of the Ethereum clients out there and modifying it to work the way you desire.  This will have one of two possible results:\r\n1. You figure out a clever solution to the problem that allows the clients to continue to function as they are while gaining new functionality.\r\n2. You gain a better understanding of why this is a particularly hard problem.\r\n\r\nThe TurboGeth team is exercising this strategy for a separate thing and they are finding (1) to be the case.  They are sharing their results and it is promising for everyone.  However, many other people have gone with this strategy and ended up in case (2), which at least has really helped those people understand the architecture and often they go on to make great contributions in other areas, even though their original goal was never realized.\r\n\r\nRe: Light clients.  There is a strong desire to *improve* light client support in Ethereum, so anything that doesn't help with that will likely see a lot of negative feedback.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/708286695/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/725710973",
    "html_url": "https://github.com/ethereum/EIPs/issues/3032#issuecomment-725710973",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/3032",
    "id": 725710973,
    "node_id": "MDEyOklzc3VlQ29tbWVudDcyNTcxMDk3Mw==",
    "user": {
      "login": "vporton",
      "id": 2900574,
      "node_id": "MDQ6VXNlcjI5MDA1NzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2900574?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vporton",
      "html_url": "https://github.com/vporton",
      "followers_url": "https://api.github.com/users/vporton/followers",
      "following_url": "https://api.github.com/users/vporton/following{/other_user}",
      "gists_url": "https://api.github.com/users/vporton/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vporton/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vporton/subscriptions",
      "organizations_url": "https://api.github.com/users/vporton/orgs",
      "repos_url": "https://api.github.com/users/vporton/repos",
      "events_url": "https://api.github.com/users/vporton/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vporton/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-11-11T23:06:40Z",
    "updated_at": "2020-11-11T23:06:40Z",
    "author_association": "CONTRIBUTOR",
    "body": "I made a child error in my \"solution\". The \"second array\" is pertinent to each contract, so it needs to be copied every time a contract is forked. So it is not O(1) as I claimed.\r\n\r\nHowever, there [exists](https://en.wikipedia.org/w/index.php?title=Persistent_array&oldid=969141238#Log-log-time) a  O(log log(min(n,m)) solution where m is the number of forks and n is the total number of used storage slots.\r\n\r\nlog log(min(n,m)) is not so bad by itself, but it creates a problem: The cost of gas would need to be adjusted as the data structure grows to keep the complexity constant, otherwise complexity per a wei of gas grows unbounded (however slow).\r\n\r\nIs it OK to allow the gas complexity to grow slowly? I think, it's OK: The cost of the CPUs decreases faster than that's inverse. And we eliminate giant gas usage needed to copy a contract data to other contract \"manually\".",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/725710973/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/950248988",
    "html_url": "https://github.com/ethereum/EIPs/issues/3032#issuecomment-950248988",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/3032",
    "id": 950248988,
    "node_id": "IC_kwDOAq426M44o6Yc",
    "user": {
      "login": "github-actions[bot]",
      "id": 41898282,
      "node_id": "MDM6Qm90NDE4OTgyODI=",
      "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/github-actions%5Bbot%5D",
      "html_url": "https://github.com/apps/github-actions",
      "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
      "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
      "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
      "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
      "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
      "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
      "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
      "type": "Bot",
      "site_admin": false
    },
    "created_at": "2021-10-24T02:27:44Z",
    "updated_at": "2021-10-24T02:27:44Z",
    "author_association": "NONE",
    "body": "There has been no activity on this issue for two months. It will be closed in a week if no further activity occurs. If you would like to move this EIP forward, please respond to any outstanding feedback or add a comment indicating that you have addressed all required feedback and are ready for a review.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/950248988/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/962541458",
    "html_url": "https://github.com/ethereum/EIPs/issues/3032#issuecomment-962541458",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/3032",
    "id": 962541458,
    "node_id": "IC_kwDOAq426M45XzeS",
    "user": {
      "login": "github-actions[bot]",
      "id": 41898282,
      "node_id": "MDM6Qm90NDE4OTgyODI=",
      "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/github-actions%5Bbot%5D",
      "html_url": "https://github.com/apps/github-actions",
      "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
      "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
      "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
      "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
      "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
      "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
      "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
      "type": "Bot",
      "site_admin": false
    },
    "created_at": "2021-11-07T02:29:27Z",
    "updated_at": "2021-11-07T02:29:27Z",
    "author_association": "NONE",
    "body": "This issue was closed due to inactivity. If you are still pursuing it, feel free to reopen it and respond to any feedback or request a review in a comment.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/962541458/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
