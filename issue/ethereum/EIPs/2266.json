{
  "url": "https://api.github.com/repos/ethereum/EIPs/issues/2266",
  "repository_url": "https://api.github.com/repos/ethereum/EIPs",
  "labels_url": "https://api.github.com/repos/ethereum/EIPs/issues/2266/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/EIPs/issues/2266/comments",
  "events_url": "https://api.github.com/repos/ethereum/EIPs/issues/2266/events",
  "html_url": "https://github.com/ethereum/EIPs/issues/2266",
  "id": 490642616,
  "node_id": "MDU6SXNzdWU0OTA2NDI2MTY=",
  "number": 2266,
  "title": "EIP2266: Atomic Swap-based American Call Option Contract Standard",
  "user": {
    "login": "HAOYUatHZ",
    "id": 37070449,
    "node_id": "MDQ6VXNlcjM3MDcwNDQ5",
    "avatar_url": "https://avatars.githubusercontent.com/u/37070449?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/HAOYUatHZ",
    "html_url": "https://github.com/HAOYUatHZ",
    "followers_url": "https://api.github.com/users/HAOYUatHZ/followers",
    "following_url": "https://api.github.com/users/HAOYUatHZ/following{/other_user}",
    "gists_url": "https://api.github.com/users/HAOYUatHZ/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/HAOYUatHZ/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/HAOYUatHZ/subscriptions",
    "organizations_url": "https://api.github.com/users/HAOYUatHZ/orgs",
    "repos_url": "https://api.github.com/users/HAOYUatHZ/repos",
    "events_url": "https://api.github.com/users/HAOYUatHZ/events{/privacy}",
    "received_events_url": "https://api.github.com/users/HAOYUatHZ/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 2328627851,
      "node_id": "MDU6TGFiZWwyMzI4NjI3ODUx",
      "url": "https://api.github.com/repos/ethereum/EIPs/labels/stale",
      "name": "stale",
      "color": "000000",
      "default": false,
      "description": ""
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 7,
  "created_at": "2019-09-07T14:38:20Z",
  "updated_at": "2021-12-04T20:12:00Z",
  "closed_at": "2021-12-04T20:12:00Z",
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "---\r\neip: 2266\r\ntitle: Atomic Swap-based American Call Option Contract Standard\r\nauthor: Runchao Han <runchao.han@monash.edu>, Haoyu Lin <chris.haoyul@gmail.com>, Jiangshan Yu <jiangshan.yu@monash.edu>\r\ndiscussions-to: https://github.com/ethereum/EIPs/issues/2266\r\nstatus: Draft\r\ntype: Standards Track\r\ncategory: ERC\r\ncreated: 2019-08-17\r\n---\r\n\r\n<!--You can leave these HTML comments in your merged EIP and delete the visible duplicate text guides, they will not appear and may be helpful to refer to if you edit it again. This is the suggested template for new EIPs. Note that an EIP number will be assigned by an editor. When opening a pull request to submit your EIP, please use an abbreviated title in the filename, `eip-draft_title_abbrev.md`. The title should be 44 characters or less.-->\r\n\r\n## Simple Summary\r\n<!--\"If you can't explain it simply, you don't understand it well enough.\" Provide a simplified and layman-accessible explanation of the EIP.-->\r\n\r\nA standard for token contracts providing Atomic Swap-based American Call Option functionalities.\r\n\r\n## Abstarct\r\n\r\nThis standard provides functionality to make Atomic Swap-based American Call Option payment. The Atomic Swap protocol based on Hashed Time-Locked Contract (HTLC) [^1] has optionality [^2], and such optionality can be utilised to construct American Call Options without trusted third party. This standard defines the common way of implementing this protocol. In particular, this EIP defines technical terms, provides interfaces, and gives reference implementations of this protocol.\r\n\r\n\r\n## Motivation\r\n<!--The motivation is critical for EIPs that want to change the Ethereum protocol. It should clearly explain why the existing protocol specification is inadequate to address the problem that the EIP solves. EIP submissions without sufficient motivation may be rejected outright.-->\r\n\r\nAtomic Swap allows users to atomically exchange their tokens without trusted third parties while the HTLC is commonly used for the implementation. However, the HTLC-based Atomic Swap has optionality. More specifically, the swap initiator can choose to proceed or abort the swap for several hours, which gives him time for speculating according to the exchange rate. A discussion[^2] shows that the HTLC-based Atomic Swap is equivalent to an American Call Option in finance. On the other hand,thanks to such optionality, the HTLC-based Atomic Swap can be utilised to construct American Call Options without trusted third party. A paper[^3] proposes a secure Atomic-Swap-based American Call Option protocol on smart contracts. This protocol not only eliminates the arbitrage opportunity but also prevents any party from locking the other party's money maliciously. This EIP aims at providing the standard of implementing this protocol in existing token standards.\r\n\r\n## Specification\r\n<!--The technical specification should describe the syntax and semantics of any new feature. The specification should be detailed enough to allow competing, interoperable implementations for any of the current Ethereum platforms (go-ethereum, parity, cpp-ethereum, ethereumj, ethereumjs, and [others](https://github.com/ethereum/wiki/wiki/Clients)).-->\r\n\r\nThe Atomic Swap-based American Call Option smart contract should follow the syntax and semantics of Ethereum smart contracts.\r\n\r\n### Definitions\r\n\r\n+ `initiator`: the party who publishes the advertisement of the swap.\r\n+ `participant`: the party who agrees on the advertisement and participates in the swap with `initiator`.\r\n+ `asset`: the amount of token(s) to be exchanged.\r\n+ `premium`: the amount of token(s) that `initiator` pays to `participant` as the premium.\r\n+ `redeem`: the action to claim the token from the other party.\r\n+ `refund`: the action to claim the token from the party herself/himself, because of timelock expiration.\r\n+ `secrect`: a random string chosen by `initiator` as the preimage of a hash.\r\n+ `secrectHash`: a string equals to the hash of `secrect`, used for constructing HTLCs.\r\n+ `timelock`: a timestamp representing the timelimit, before when the asset can be redeemed, and otherwise can only be refunded.\r\n\r\n### Storage Variables\r\n\r\n#### swap\r\n\r\nThis mapping stores the metadata of the swap contracts, including the parties and tokens involved. Each contract uses different `secretHash`, and is distinguished by `secretHash`.\r\n\r\n```\r\nmapping(bytes32 => Swap) public swap;\r\n```\r\n\r\n#### initiatorAsset\r\n\r\nThis mapping stores the detail of the asset initiators want to sell, including the amount, the timelock and the state. It is asscociated with the swap contract with the same `secretHash`.\r\n\r\n```\r\nmapping(bytes32 => InitiatorAsset) public initiatorAsset;\r\n```\r\n\r\n#### participantAsset\r\n\r\nThis mapping stores the details of the asset participants want to sell, including the amount, the timelock and the state. It is asscociated with the swap contract with the same `secretHash`.\r\n\r\n```\r\nmapping(bytes32 => ParticipantAsset) public participantAsset;\r\n```\r\n\r\n#### premiumAsset\r\n\r\nThis mapping stores the details of the premium initiators attach in the swap contract, including the amount, the timelock and the state. It is asscociated with the swap contract with the same `secretHash`.\r\n\r\n```\r\nmapping(bytes32 => Premium) public premium;\r\n```\r\n\r\n\r\n### Methods\r\n\r\n#### setup\r\n\r\nThis function sets up the swap contract, including the both parties involved, the tokens to exchanged, and so on.\r\n\r\n```\r\nfunction setup(bytes32 secretHash, address payable initiator, address tokenA, address tokenB, uint256 initiatorAssetAmount, address payable participant, uint256 participantAssetAmount, uint256 premiumAmount) public payable\r\n```\r\n\r\n#### initiate\r\n\r\nThe initiator invokes this function to fill and lock the token she/he wants to sell and join the contract.\r\n\r\n```\r\nfunction initiate(bytes32 secretHash, uint256 assetRefundTime) public payable\r\n```\r\n\r\n#### fillPremium\r\n\r\nThe initiator invokes this function to fill and lock the premium.\r\n\r\n```\r\nfunction fillPremium(bytes32 secretHash, uint256 premiumRefundTime) public payable\r\n```\r\n\r\n#### participate\r\n\r\nThe participant invokes this function to fill and lock the token she/he wants to sell and join the contract.\r\n\r\n```\r\nfunction participate(bytes32 secretHash, uint256 assetRefundTime) public payable\r\n```\r\n\r\n#### redeemAsset\r\n\r\nOne of the parties invokes this function to get the token from the other party, by providing the preimage of the hash lock `secret`.\r\n\r\n```\r\nfunction redeemAsset(bytes32 secret, bytes32 secretHash) public\r\n```\r\n\r\n#### refundAsset\r\n\r\nOne of the parties invokes this function to get the token back after the timelock expires.\r\n\r\n```\r\nfunction refundAsset(bytes32 secretHash) public\r\n```\r\n\r\n#### redeemPremium\r\n\r\nThe participant invokes this function to get the premium. This can be invoked only if the participant has already invoked `participate` and the participant's token is redeemed or refunded.\r\n\r\n```\r\nfunction redeemPremium(bytes32 secretHash) public\r\n```\r\n\r\n#### refundPremium\r\n\r\nThe initiator invokes this function to get the premium back after the timelock expires.\r\n\r\n```\r\nfunction refundPremium(bytes32 secretHash) public\r\n```\r\n\r\n\r\n### Events\r\n\r\n#### SetUp\r\n\r\nThis event indicates that one party has set up the contract using the function `setup()`.\r\n\r\n```\r\nevent SetUp(bytes32 secretHash, address initiator, address participant, address tokenA, address tokenB, uint256 initiatorAssetAmount, uint256 participantAssetAmount, uint256 premiumAmount);\r\n```\r\n\r\n#### Initiated\r\n\r\nThis event indicates that `initiator` has filled and locked the token to be exchanged using the function `initiate()`.\r\n\r\n```\r\nevent Initiated(uint256 initiateTimestamp, bytes32 secretHash, address initiator, address participant, address initiatorAssetToken, uint256 initiatorAssetAmount, uint256 initiatorAssetRefundTimestamp);\r\n```\r\n\r\n#### Participated\r\n\r\nThis event indicates that `participant` has filled and locked the token to be exchanged using the function `participate()`.\r\n\r\n```\r\nevent Participated(uint256 participateTimestamp, bytes32 secretHash, address initiator, address participant, address participantAssetToken, uint256 participantAssetAmount, uint256 participantAssetRefundTimestamp);\r\n```\r\n\r\n#### PremiumFilled\r\n\r\nThis event indicates that `initiator` has filled and locked `premium` using the function `fillPremium()`.\r\n\r\n```\r\nevent PremiumFilled(uint256 fillPremiumTimestamp, bytes32 secretHash, address initiator, address participant, address premiumToken, uint256 premiumAmount, uint256 premiumRefundTimestamp);\r\n```\r\n\r\n#### InitiatorAssetRedeemed/ParticipantAssetRedeemed\r\n\r\nThese two events indicate that `asset` has been redeemed by the other party before the timelock by providing `secret`.\r\n\r\n```\r\nevent InitiatorAssetRedeemed(uint256 redeemTimestamp, bytes32 secretHash, bytes32 secret, address redeemer, address assetToken, uint256 amount);\r\n```\r\n\r\n```\r\nevent ParticipantAssetRedeemed(uint256 redeemTimestamp, bytes32 secretHash, bytes32 secret, address redeemer, address assetToken, uint256 amount);\r\n```\r\n\r\n#### InitiatorAssetRefunded/ParticipantAssetRefunded\r\n\r\nThese two events indicate that `asset` has been refunded by the original owner after the timelock expires.\r\n\r\n```\r\nevent InitiatorAssetRefunded(uint256 refundTimestamp, bytes32 secretHash, address refunder, address assetToken, uint256 amount);\r\n```\r\n\r\n```\r\nevent ParticipantAssetRefunded(uint256 refundTimestamp, bytes32 secretHash, address refunder, address assetToken, uint256 amount);\r\n```\r\n\r\n#### PremiumRedeemed\r\n\r\nThis event indicates that `premium` has been redeemed by `participant`. This implies that `asset` is either redeemed by `initiator` if it can provide the preimage of `secrectHash` before  `asset` timelock expires; or refunded by `participant` if `asset` timelock expires.\r\n\r\n```\r\nevent PremiumRedeemed(uint256 redeemTimestamp,bytes32 secretHash,address redeemer,address token,uint256 amount);\r\n```\r\n\r\n#### PremiumRefunded\r\n\r\nThis event indicates that `premium` has been refunded back to `initiator`, because of `participant` doesn't participate at all, by the time of `premium` timelock expires.\r\n\r\n```\r\nevent PremiumRefunded(uint256 refundTimestamp, bytes32 secretHash, address refunder, address token, uint256 amount);\r\n```\r\n\r\n## Rationale\r\n<!--The rationale fleshes out the specification by describing what motivated the design and why particular design decisions were made. It should describe alternate designs that were considered and related work, e.g. how the feature is supported in other languages. The rationale may also provide evidence of consensus within the community, and should discuss important objections or concerns raised during discussion.-->\r\n\r\n+ To achieve the atomicity, HTLC is used.\r\n+ The participant should decide whether to participate after the initiator locks the token and sets up the timelock.\r\n+ The initiator should decide whether to proceed the swap (redeem the tokens from the participant and reveal the preimage of the hash lock), after the participant locks the tokens and sets up the time locks.\r\n+ Premium is redeemable for the participant only if the participant participates in the swap and redeems the initiator's token before premium's timelock expires.\r\n+ Premium is refundable for the initiator only if the initiator initiates but the participant does not participate in the swap at all.\r\n\r\n\r\n## Backwards Compatibility\r\n<!--All EIPs that introduce backwards incompatibilities must include a section describing these incompatibilities and their severity. The EIP must explain how the author proposes to deal with these incompatibilities. EIP submissions without a sufficient backwards compatibility treatise may be rejected outright.-->\r\n\r\nThis proposal is fully backward compatible. Functionalities of existing standards will not be affected by this proposal, as it only provides additional features to them.\r\n\r\n\r\n## Implementation\r\n<!--The implementations must be completed before any EIP is given status \"Final\", but it need not be completed before the EIP is accepted. While there is merit to the approach of reaching consensus on the specification and rationale before writing code, the principle of \"rough consensus and running code\" is still useful when it comes to resolving many discussions of API details.-->\r\n\r\nPlease visit [here](https://github.com/HAOYUatHZ/fair-atomic-swap/blob/master/src/atomicswap/eip2266/) to find our example implementation.\r\n\r\n## Copyright\r\nCopyright and related rights waived via [CC0](https://creativecommons.org/publicdomain/zero/1.0/).\r\n\r\n[^1]: [Hash Time Locked Contracts](https://en.bitcoin.it/wiki/Hash_Time_Locked_Contracts)\r\n[^2]: [An Argument For Single-Asset Lightning Network](https://lists.linuxfoundation.org/pipermail/lightning-dev/2019-January/001798.html)\r\n[^3]: [On the optionality and fairness of Atomic Swaps](https://eprint.iacr.org/2019/896)",
  "closed_by": {
    "login": "github-actions[bot]",
    "id": 41898282,
    "node_id": "MDM6Qm90NDE4OTgyODI=",
    "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/github-actions%5Bbot%5D",
    "html_url": "https://github.com/apps/github-actions",
    "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
    "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
    "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
    "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
    "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
    "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
    "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
    "type": "Bot",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/2266/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/EIPs/issues/2266/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/689995637",
    "html_url": "https://github.com/ethereum/EIPs/issues/2266#issuecomment-689995637",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2266",
    "id": 689995637,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY4OTk5NTYzNw==",
    "user": {
      "login": "MicahZoltu",
      "id": 886059,
      "node_id": "MDQ6VXNlcjg4NjA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MicahZoltu",
      "html_url": "https://github.com/MicahZoltu",
      "followers_url": "https://api.github.com/users/MicahZoltu/followers",
      "following_url": "https://api.github.com/users/MicahZoltu/following{/other_user}",
      "gists_url": "https://api.github.com/users/MicahZoltu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MicahZoltu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MicahZoltu/subscriptions",
      "organizations_url": "https://api.github.com/users/MicahZoltu/orgs",
      "repos_url": "https://api.github.com/users/MicahZoltu/repos",
      "events_url": "https://api.github.com/users/MicahZoltu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MicahZoltu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-09-10T05:34:15Z",
    "updated_at": "2020-09-10T05:34:15Z",
    "author_association": "MEMBER",
    "body": "This EIP looks like a Good Idea rather than a standard.  A standard is useful when there is a many-to-many relationship between parties.  For example, there are many web browsers and there are many websites, and we want all websites to work in all web browsers so there is value to create standards around how web pages are rendered.\r\n\r\nIn this case, an atomic swap/option contract will likely be strongly tied to a specific user interface (dapp) and the coordination only needs to happen between two parties.  This suggests that one can just write a contract and an interface and call it a day, there is little value in standardizing that interface because each dapp can implement it their own way and that won't break anything for other dapps.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/689995637/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/689996097",
    "html_url": "https://github.com/ethereum/EIPs/issues/2266#issuecomment-689996097",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2266",
    "id": 689996097,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY4OTk5NjA5Nw==",
    "user": {
      "login": "MicahZoltu",
      "id": 886059,
      "node_id": "MDQ6VXNlcjg4NjA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MicahZoltu",
      "html_url": "https://github.com/MicahZoltu",
      "followers_url": "https://api.github.com/users/MicahZoltu/followers",
      "following_url": "https://api.github.com/users/MicahZoltu/following{/other_user}",
      "gists_url": "https://api.github.com/users/MicahZoltu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MicahZoltu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MicahZoltu/subscriptions",
      "organizations_url": "https://api.github.com/users/MicahZoltu/orgs",
      "repos_url": "https://api.github.com/users/MicahZoltu/repos",
      "events_url": "https://api.github.com/users/MicahZoltu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MicahZoltu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-09-10T05:35:31Z",
    "updated_at": "2020-09-10T05:35:31Z",
    "author_association": "MEMBER",
    "body": "Try not to link to external resources whenever possible.  External links are likely to turn into 404 errors over time, and we want EIPs to live for a long time, like other standards.  Recommend inlining as much as you can, or adding assets to `../assets/eip-2266/whatever.ext`.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/689996097/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/778020338",
    "html_url": "https://github.com/ethereum/EIPs/issues/2266#issuecomment-778020338",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2266",
    "id": 778020338,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc3ODAyMDMzOA==",
    "user": {
      "login": "Chxpz",
      "id": 44127253,
      "node_id": "MDQ6VXNlcjQ0MTI3MjUz",
      "avatar_url": "https://avatars.githubusercontent.com/u/44127253?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Chxpz",
      "html_url": "https://github.com/Chxpz",
      "followers_url": "https://api.github.com/users/Chxpz/followers",
      "following_url": "https://api.github.com/users/Chxpz/following{/other_user}",
      "gists_url": "https://api.github.com/users/Chxpz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Chxpz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Chxpz/subscriptions",
      "organizations_url": "https://api.github.com/users/Chxpz/orgs",
      "repos_url": "https://api.github.com/users/Chxpz/repos",
      "events_url": "https://api.github.com/users/Chxpz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Chxpz/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-02-12T07:07:45Z",
    "updated_at": "2021-02-12T07:07:45Z",
    "author_association": "NONE",
    "body": "That's an awesome proposal.\r\nI might be missing a few points, please correct me on that, \r\n\r\nI don't see why the initiator needs to pay the premium. In a stock option transaction, the premium is what makes the writers (initiators) earning a profit, in this case, the premium is paid by the buyer (participants). So, what's the point here?\r\n\r\nI can see a transaction that can be done by 02 parties. How to create a derivative asset (option) from this originally the first transaction in order to trade it in the market? I mean, as a buyer I hold a derivative asset (call option) from asset X and I want to sell it to a third party who was not engaged in the original transaction. Are there any thoughts on this?\r\n\r\nI might have one or another consideration but if I could get a better understanding of this both in the first place would be fantastic.\r\nI appreciate\r\ncheers",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/778020338/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/778175316",
    "html_url": "https://github.com/ethereum/EIPs/issues/2266#issuecomment-778175316",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2266",
    "id": 778175316,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc3ODE3NTMxNg==",
    "user": {
      "login": "SebastianElvis",
      "id": 9570153,
      "node_id": "MDQ6VXNlcjk1NzAxNTM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9570153?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/SebastianElvis",
      "html_url": "https://github.com/SebastianElvis",
      "followers_url": "https://api.github.com/users/SebastianElvis/followers",
      "following_url": "https://api.github.com/users/SebastianElvis/following{/other_user}",
      "gists_url": "https://api.github.com/users/SebastianElvis/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/SebastianElvis/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SebastianElvis/subscriptions",
      "organizations_url": "https://api.github.com/users/SebastianElvis/orgs",
      "repos_url": "https://api.github.com/users/SebastianElvis/repos",
      "events_url": "https://api.github.com/users/SebastianElvis/events{/privacy}",
      "received_events_url": "https://api.github.com/users/SebastianElvis/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-02-12T12:46:42Z",
    "updated_at": "2021-02-12T12:46:42Z",
    "author_association": "NONE",
    "body": "> That's an awesome proposal.\r\n> I might be missing a few points, please correct me on that,\r\n> \r\n\r\nThanks for your interest in this EIP!\r\n\r\n> I don't see why the initiator needs to pay the premium. In a stock option transaction, the premium is what makes the writers (initiators) earning a profit, in this case, the premium is paid by the buyer (participants). So, what's the point here?\r\n> \r\n\r\nWho pays the premium depends on who is the one having the option.\r\nIn Atomic Swap, the initiator is the one with the option: the initiator can choose to proceed or abort the swap. Atomic Swap is a Call Option, where the initiator buys an option of buying the participant's asset.\r\nThe stock option case above is a Put Option, where the initiator sells an option of buying its asset.\r\nFor detailed definition of Call/Put option please refer to https://en.wikipedia.org/wiki/Call_option\r\n\r\n> I can see a transaction that can be done by 02 parties. How to create a derivative asset (option) from this originally the first transaction in order to trade it in the market? I mean, as a buyer I hold a derivative asset (call option) from asset X and I want to sell it to a third party who was not engaged in the original transaction. Are there any thoughts on this?\r\n\r\nThis requires an order matching process beforehand. Order matching is a module independent from the order execution (namely Atomic Swap here). Therefore this EIP proposal assumes Alice and Bob have already been matched and focuses on standardising the interfaces of Atomic-Swap-based American Call Option.\r\n\r\n> \r\n> I might have one or another consideration but if I could get a better understanding of this both in the first place would be fantastic.\r\n> I appreciate\r\n> cheers\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/778175316/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/841468384",
    "html_url": "https://github.com/ethereum/EIPs/issues/2266#issuecomment-841468384",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2266",
    "id": 841468384,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg0MTQ2ODM4NA==",
    "user": {
      "login": "fulldecent",
      "id": 382183,
      "node_id": "MDQ6VXNlcjM4MjE4Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/382183?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fulldecent",
      "html_url": "https://github.com/fulldecent",
      "followers_url": "https://api.github.com/users/fulldecent/followers",
      "following_url": "https://api.github.com/users/fulldecent/following{/other_user}",
      "gists_url": "https://api.github.com/users/fulldecent/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fulldecent/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fulldecent/subscriptions",
      "organizations_url": "https://api.github.com/users/fulldecent/orgs",
      "repos_url": "https://api.github.com/users/fulldecent/repos",
      "events_url": "https://api.github.com/users/fulldecent/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fulldecent/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-05-14T19:53:42Z",
    "updated_at": "2021-05-14T19:53:42Z",
    "author_association": "CONTRIBUTOR",
    "body": "* Has anybody deployed any contract using this? This should be reference in the text.\r\n* This does not meet the requirements of what should be standardized / argued by Micah / https://github.com/ethereum/EIPs/issues/2266#issuecomment-689995637\r\n* Rationale does not discuss alternatives considered and the given reasons are too sparse.\r\n* ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/841468384/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/974705331",
    "html_url": "https://github.com/ethereum/EIPs/issues/2266#issuecomment-974705331",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2266",
    "id": 974705331,
    "node_id": "IC_kwDOAq426M46GNKz",
    "user": {
      "login": "github-actions[bot]",
      "id": 41898282,
      "node_id": "MDM6Qm90NDE4OTgyODI=",
      "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/github-actions%5Bbot%5D",
      "html_url": "https://github.com/apps/github-actions",
      "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
      "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
      "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
      "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
      "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
      "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
      "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
      "type": "Bot",
      "site_admin": false
    },
    "created_at": "2021-11-20T20:11:31Z",
    "updated_at": "2021-11-20T20:11:31Z",
    "author_association": "NONE",
    "body": "There has been no activity on this issue for two months. It will be closed in a week if no further activity occurs. If you would like to move this EIP forward, please respond to any outstanding feedback or add a comment indicating that you have addressed all required feedback and are ready for a review.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/974705331/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/986086274",
    "html_url": "https://github.com/ethereum/EIPs/issues/2266#issuecomment-986086274",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2266",
    "id": 986086274,
    "node_id": "IC_kwDOAq426M46xnuC",
    "user": {
      "login": "github-actions[bot]",
      "id": 41898282,
      "node_id": "MDM6Qm90NDE4OTgyODI=",
      "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/github-actions%5Bbot%5D",
      "html_url": "https://github.com/apps/github-actions",
      "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
      "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
      "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
      "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
      "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
      "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
      "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
      "type": "Bot",
      "site_admin": false
    },
    "created_at": "2021-12-04T20:12:00Z",
    "updated_at": "2021-12-04T20:12:00Z",
    "author_association": "NONE",
    "body": "This issue was closed due to inactivity. If you are still pursuing it, feel free to reopen it and respond to any feedback or request a review in a comment.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/986086274/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
