{
  "url": "https://api.github.com/repos/ethereum/EIPs/issues/3051",
  "repository_url": "https://api.github.com/repos/ethereum/EIPs",
  "labels_url": "https://api.github.com/repos/ethereum/EIPs/issues/3051/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/EIPs/issues/3051/comments",
  "events_url": "https://api.github.com/repos/ethereum/EIPs/issues/3051/events",
  "html_url": "https://github.com/ethereum/EIPs/issues/3051",
  "id": 722072032,
  "node_id": "MDU6SXNzdWU3MjIwNzIwMzI=",
  "number": 3051,
  "title": "EIP: Alternative ETH2.0 - A Non-Sharding Approach",
  "user": {
    "login": "qizhou",
    "id": 2541286,
    "node_id": "MDQ6VXNlcjI1NDEyODY=",
    "avatar_url": "https://avatars.githubusercontent.com/u/2541286?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/qizhou",
    "html_url": "https://github.com/qizhou",
    "followers_url": "https://api.github.com/users/qizhou/followers",
    "following_url": "https://api.github.com/users/qizhou/following{/other_user}",
    "gists_url": "https://api.github.com/users/qizhou/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/qizhou/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/qizhou/subscriptions",
    "organizations_url": "https://api.github.com/users/qizhou/orgs",
    "repos_url": "https://api.github.com/users/qizhou/repos",
    "events_url": "https://api.github.com/users/qizhou/events{/privacy}",
    "received_events_url": "https://api.github.com/users/qizhou/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 2328627851,
      "node_id": "MDU6TGFiZWwyMzI4NjI3ODUx",
      "url": "https://api.github.com/repos/ethereum/EIPs/labels/stale",
      "name": "stale",
      "color": "000000",
      "default": false,
      "description": ""
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 5,
  "created_at": "2020-10-15T07:20:46Z",
  "updated_at": "2021-11-07T02:29:23Z",
  "closed_at": "2021-11-07T02:29:23Z",
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "EIP: Alternative ETH2.0 - A Non-Sharding Approach\r\n\r\n---\r\neip: TBD\r\ntitle: Alternative ETH2.0 - A Non-Sharding Approach\r\nauthor: Qi Zhou (@qizhou)\r\ndiscussions-to: https://ethereum-magicians.org/t/eip-alternative-eth2-0-a-non-sharding-approach/4857\r\nstatus: Idea\r\nreview-period-end: TBD\r\ntype: Standards Track\r\ncategory: Informational\r\ncreated: 2020-10-15\r\nrequires: None\r\n---\r\n\r\n## Simple Summary\r\nPropose an alternative ETH2.0 without sharding to satisfy near-future performance needs\r\n\r\n## Motivation\r\nDue to technical challenges and uncertainties of ETH2.0 with sharding, a fully functional ETH2.0 network may take years to complete, while the blockchain industry is hungry to have the Ethereum network with greater scalability.  The EIP proposes an alternative ETH2.0 without sharding - a single Ethereum chain with minimum modifications to support greater scalability.  The performance goal is that after the upgrade, the network can support 1000+ TPS with 100M+ (or 1B) accounts on a commodity PC with decent storage (~ 500 GB) and network connections (~ 1Gbps).  We hope that with the upgrade, the network is able to serve the near-future blockchain needs in 5-10 years.\r\n\r\nNote that it differs from 1.x in that it requires significant changes in consensus and ledger model.  Further, it does not conflict with existing ETH2.0 sharding work, which can be promoted to ETH3.0.\r\n\r\n## Specification\r\nAs of `UPGRADE_BLOCK_NUMBER`, we will re-genesis the network and start the ETH2.0 without sharding with the following components:\r\n- A fast- finality PoS consensus such as Tendermint or LMD-GHOST/Casper; and\r\n- A ledger model with flat KV as the ledger instead of MPT and replacing trie hash with the hash of KV operations of all TXs in a block in the header; and\r\n- A periodic snapshot of the state for every `BLOCKS_PER_SNAPSHOT` blocks (`BLOCKS_PER_SNAPSHOT` is large) and including snapshotted state hash (trie hash) in the headers of each k * `BLOCKS_PER_SNAPSHOT` block;\r\n- An automatic pruning for finalized blocks that are covered by a block with snapshot hash.\r\n\r\n### Fast-Finality PoS Consensus\r\nThe proposed ETH2.0 will adopt a fast-finality PoS consensus such as Tendermint or LMD-GHOST/Casper.  In the following, we will use a modified Tendermint (a.k.a., the proposed consensus engine) to illustrate the idea, but the specification should be also applied to other consensuses.  The proposed consensus engine has the following main features:\r\n\r\n- PoS: A list of validators will be chosen according to the amount of ETH staked (including delegated).  Users are free to choose any validator to delegate its stake.\r\n- Fast finality: The consensus engine will not propose the next block until the current block is finalized.  This means the chain is _forkless_ and we do not have to deal with complicated chain re-org logic.\r\n- Epoch-based:  The validator sets will be not changed until the blocks with heights k * `BLOCKS_PER_EPOCH` are reached.  The blocks with heights k * `BLOCKS_PER_EPOCH` are called _pilot blocks_, and the blocks in [k * `BLOCKS_PER_EPOCH`, (k + 1) * `BLOCKS_PER_EPOCH`  - 1] are called _the blocks in epoch k_.   The purpose of the epoch is to quickly bootstrap a client and save storage, which will be discussed in the following sections.\r\n\r\n### Ledger Model Without Maintaining MPT\r\nThe proposed ETH2.0 will adopt a flat KV storage as its state, where the key-value pairs of the storage are like:\r\n\r\n- `addr -> account` for per-account data\r\n- `addr + \"/\" + storage_slot -> storage_data` for the smart contract storage\r\n\r\nNote that, unlike the current ETH1.0 model, which maintains _multiple versions_ of the state, the proposed ETH2.0 only maintains a _single version_ of the KV-paired state of the latest finalized block.  Since the proposed consensus engine (modified TM) is _forkless_, we will only commit KV writes to the storage when a new block is finalized by the engine and thus without worrying about undo the KV operations due to chain re-org.\r\n\r\nWhen an unverified block is received from a peer, a tentative execution of the TXs of the block must cache the results _in memory_, where the results are a list KV operations like\r\n\r\n- `update(addr, account)` (for balance/nonce update, create a new account, etc)\r\n- `delete(addr, account)` (for contract suicide)\r\n- `update(addr + \"/\" + storage_slot, storage_data)` (for SSTORE)\r\n- `delete(addr + \"/\" + storage_slot, storage_data)` (fro SSTORE with zero value)\r\n\r\nE.g., a block with a balance transfer from addr A to addr B, will result in the list as\r\n\r\n`[update(A, accountA), update(B, accountB)]`.\r\n\r\nThe hash of the KV operation list will replace [state root hash](https://github.com/ethereum/go-ethereum/blob/b305591e1491229c35a4551f18bd5e745405700f/core/types/block.go#L76) in the block header, and the hash value in the header of an incoming block must match the local hash value after the tentative execution.  This makes sure that, as long as the block is verified and finalized, all non-Byzantine nodes will have exactly the same state without maintaining an MPT.\r\n\r\n### Periodic Snapshot of the State\r\nWhen committing the TXs of a finalized block with height k * `BLOCKS_PER_SNAPSHOT`, the node will use the underlying DB snapshot feature, e.g., \r\n\r\n`GetSnapshot()` call in [goleveldb()](https://github.com/syndtr/goleveldb/blob/5c35d600f0caac04c20d52438103f1a7aa612598/leveldb/db.go#L905)\r\n\r\nwhich will return a snapshot of the KV storage with very low cost (the cost is at a similar level of `Get()`)\r\n\r\nAfter the block is committed and the underlying KV storage is snapshotted, a background thread will start to calculate the hash of the state based on the KV snapshot without interfering with the consensus engine (i.e., propose/execute/finalize/commit a new block).  The hash of the state of the block with height k * `BLOCKS_PER_SNAPSHOT` will be included in the header of the next snapshot block, i.e., the block with height (k + 1) * `BLOCKS_PER_SNAPSHOT` - that means we have the time for `BLOCKS_PER_SNAPSHOT` blocks to calculate the hash.\r\n\r\nNote that we do not specify which trie to calculate the hash and according to the Turbo-Geth result, the MPT itself may be good enough - it just takes a couple of hours to calculate the hash (see stage 6 and 7 in [here](https://ledgerwatch.github.io/turbo_geth_release.html#Readiness-of-the-stages-and-an-alternative-plan)).  Assuming the `BLOCKS_PER_SNAPSHOT` will last at least a few days or weeks or even a month, the extra computation cost of the snapshotting should be negligible.\r\n\r\n### Automatic Pruning for Finalized Blocks\r\n\r\nWhen TPS is high, the data of the blocks can cost a significant amount of storage.  To reduce the storage cost, the proposed ETH2.0 without sharding will automatically prune the finalized blocks that are covered by a block with snapshot hash.  Suppose the latest snapshot block is K * `BLOCKS_PER_SNAPSHOT`, which contains the hash of the state of the snapshot block (K - 1) * `BLOCKS_PER_SNAPSHOT`.  The pruning algorithm will remove all the blocks (including headers but excluding pilot block headers) before (K - 1) * `BLOCKS_PER_SNAPSHOT`.  This allows a new client to recover the state of the latest block by downloading/verifying the state at (K - 1) * `BLOCKS_PER_SNAPSHOT` and then replaying the TXs of the rest non-pruned blocks without touching the pruned blocks.\r\n\r\n## Rationale\r\n\r\n### Performance Analysis\r\nWe discuss the potential bottlenecks of the proposal in the following areas:\r\n\r\n- Networking: We hope that with the consensus (and possible optimization on P2P), the bandwidth can be increased from 60kbps to 600kbps or more.  This means that if a TX size is 150 bytes, the network can deliver a maximum throughput of 4K TPS.\r\n- IO/CPU performance: Using flat KV can significantly increase the performance compared to MPT, especially the state is large, e.g., with 100M+ accounts or more (likely 1B).  Further, unlike MPT whose performance degrades with larger state, the performance degradation of flat KV is almost negligible with larger state.   Our performance test result shows that flat KV can easily deliver more than 1000 TPS with 100M+ accounts (see below for more details).\r\n\r\n\r\n### Storage Cost\r\nA client of ETH2.0 without sharding can maintain the following data:\r\n- Headers of pilot blocks.  Assuming `BLOCKS_PER_EPOCH' is large, the cost should be negligible.\r\n- Blocks from (K - 1) * `BLOCKS_PER_SNAPSHOT` to `tip`.  Assuming `BLOCKS_PER_SNAPSHOT` lasts for one week, and each TX data in the block costs 200 bytes, the cost will be 1000 (TPS) * 200 (bytes per TX) * 86400 (sec per day) * 7 * 2 (up to 2x `BLOCKS_PER_SNAPSHOT` from (K - 1) * `BLOCKS_PER_SNAPSHOT` to the latest block) ~ 224G\r\n- State of the latest block: Suppose each account costs 200 bytes, 1B accounts will take about 200GB storage.\r\n\r\nSum up together, the storage cost should be ~ 500GB.\r\n\r\n### Fast Bootstrapping a New Node\r\nWhen a new node joins the network, it can quickly become a full node by running the following steps:\r\n- Download all headers of pilot blocks.  Since validator set changes only happen for pilot blocks, this allows the new node to quickly discover the validator set and become a light node.\r\n- Download (K - 1) * `BLOCKS_PER_SNAPSHOT` block (where K * `BLOCKS_PER_SNAPSHOT` is the latest snapshot block) and obtain the state hash.\r\n- Download/Verify the state at block (K - 1) * `BLOCKS_PER_SNAPSHOT`.\r\n- Download/Replay all blocks from (K - 1) * `BLOCKS_PER_SNAPSHOT` to `tip`.\r\n\r\n### Benefits vs Sharding Approach\r\n- Maximum backward compatibility with existing dApps including composability; and\r\n- Should be much easier to implement.\r\n\r\n## Implementation\r\nWe are testing the performance of each component with Tendermint and flat KV.  The early result on flat KV is very promising - without consensus cost and using Ethereum mainnet data with ~100M accounts, we could achieve 4.5x performance improvement with about 2500 TPS.  Note that our implementation of the flat KV based EVM can completely replay existing mainnet TXs including all smart contract TXs.  We will soon open-source the code and more results.\r\n\r\n## Migration\r\nSince the proposed ETH2.0 makes significant changes of consensus and ledger model, an in-place upgrade of Geth to support the proposed ETH2.0 may be difficult.  To simplify the upgrade process, we have the following options:\r\n- As of `UPGRADE_BLOCK_NUMBER`, we will stop ETH1.0 and start ETH2.0 without sharding with genesis state == state of stopped ETH1.0; or\r\n- Similar to migration from ETH1.0 to Beacon chain, users can lock ETH in ETH1.0 forever and obtain ETH in the proposed ETH2.0 mainnet.\r\n\r\n## Timeline\r\nBy reusing existing components such as Tendermint and the support from the Ethereum community, we hope that a stable testnet achieving the aforementioned performance goal is available in a year.\r\n\r\n## Security Considerations\r\nUpon receiving a new block, a node can immediately detect if the sender peer has the same state as local by comparing the hash of the KV operations of all TXs in the block header with the hash of local execution results.\r\n\r\n## Thanks\r\nPart of the flat KV idea is from TurboGeth.\r\n\r\n## Copyright\r\nCopyright and related rights waived via [CC0](https://creativecommons.org/publicdomain/zero/1.0/).",
  "closed_by": {
    "login": "github-actions[bot]",
    "id": 41898282,
    "node_id": "MDM6Qm90NDE4OTgyODI=",
    "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/github-actions%5Bbot%5D",
    "html_url": "https://github.com/apps/github-actions",
    "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
    "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
    "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
    "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
    "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
    "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
    "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
    "type": "Bot",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/3051/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/EIPs/issues/3051/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/708954323",
    "html_url": "https://github.com/ethereum/EIPs/issues/3051#issuecomment-708954323",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/3051",
    "id": 708954323,
    "node_id": "MDEyOklzc3VlQ29tbWVudDcwODk1NDMyMw==",
    "user": {
      "login": "github-actions[bot]",
      "id": 41898282,
      "node_id": "MDM6Qm90NDE4OTgyODI=",
      "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/github-actions%5Bbot%5D",
      "html_url": "https://github.com/apps/github-actions",
      "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
      "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
      "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
      "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
      "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
      "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
      "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
      "type": "Bot",
      "site_admin": false
    },
    "created_at": "2020-10-15T07:21:29Z",
    "updated_at": "2020-10-15T07:21:29Z",
    "author_association": "NONE",
    "body": "Since this is your first issue, we kindly remind you to check out [EIP-1](https://eips.ethereum.org/EIPS/eip-1) for guidance.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/708954323/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/711936649",
    "html_url": "https://github.com/ethereum/EIPs/issues/3051#issuecomment-711936649",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/3051",
    "id": 711936649,
    "node_id": "MDEyOklzc3VlQ29tbWVudDcxMTkzNjY0OQ==",
    "user": {
      "login": "MicahZoltu",
      "id": 886059,
      "node_id": "MDQ6VXNlcjg4NjA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MicahZoltu",
      "html_url": "https://github.com/MicahZoltu",
      "followers_url": "https://api.github.com/users/MicahZoltu/followers",
      "following_url": "https://api.github.com/users/MicahZoltu/following{/other_user}",
      "gists_url": "https://api.github.com/users/MicahZoltu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MicahZoltu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MicahZoltu/subscriptions",
      "organizations_url": "https://api.github.com/users/MicahZoltu/orgs",
      "repos_url": "https://api.github.com/users/MicahZoltu/repos",
      "events_url": "https://api.github.com/users/MicahZoltu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MicahZoltu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-10-19T09:40:55Z",
    "updated_at": "2020-10-19T09:40:55Z",
    "author_association": "MEMBER",
    "body": "A proposal of this magnitude will likely need ea much more fleshed out Specification section.  Rather than just saying \"PoS like XXX or YYY\", define specifically the PoS model that you think best fits.  When describing the mechanism for calculating the state trie hash during snapshots, clearly specify what that is a trie of.  For the proposed KV hash, clearly specify *which* hash you are wanting to replace (the transaction root?).  Clearly define how pruning would work.\r\n\r\nAlso, you'll likely need to include a transition path from current Ethereum to this new proposed system.  If sharding isn't part of it, then it means we'll need to do a full migration somehow.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/711936649/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/713029495",
    "html_url": "https://github.com/ethereum/EIPs/issues/3051#issuecomment-713029495",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/3051",
    "id": 713029495,
    "node_id": "MDEyOklzc3VlQ29tbWVudDcxMzAyOTQ5NQ==",
    "user": {
      "login": "qizhou",
      "id": 2541286,
      "node_id": "MDQ6VXNlcjI1NDEyODY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2541286?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/qizhou",
      "html_url": "https://github.com/qizhou",
      "followers_url": "https://api.github.com/users/qizhou/followers",
      "following_url": "https://api.github.com/users/qizhou/following{/other_user}",
      "gists_url": "https://api.github.com/users/qizhou/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/qizhou/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/qizhou/subscriptions",
      "organizations_url": "https://api.github.com/users/qizhou/orgs",
      "repos_url": "https://api.github.com/users/qizhou/repos",
      "events_url": "https://api.github.com/users/qizhou/events{/privacy}",
      "received_events_url": "https://api.github.com/users/qizhou/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-10-20T17:44:15Z",
    "updated_at": "2020-10-20T17:44:15Z",
    "author_association": "CONTRIBUTOR",
    "body": "> A proposal of this magnitude will likely need ea much more fleshed out Specification section. Rather than just saying \"PoS like XXX or YYY\", define specifically the PoS model that you think best fits. When describing the mechanism for calculating the state trie hash during snapshots, clearly specify what that is a trie of. For the proposed KV hash, clearly specify _which_ hash you are wanting to replace (the transaction root?). Clearly define how pruning would work.\r\n> \r\n> Also, you'll likely need to include a transition path from current Ethereum to this new proposed system. If sharding isn't part of it, then it means we'll need to do a full migration somehow.\r\n\r\nMany thanks for the suggestions.  I have added more subsections in Specification to include more details of the idea including PoS model, ledger model, snapshot, and pruning.  I also added sections to clarify storage cost calculations and steps to join the network as a new node.  Depending on the feedback, I will add more details on different sections/topics.\r\n\r\nNote that as we move forward with the direction, this EIP may become a master EIP of the idea and each sub-idea may deserve another EIPs.  Meanwhile, while we are diving into more details, I would like to highlight the opportunities/values and like to receive feedback from the community as early as possible.\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/713029495/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/950248982",
    "html_url": "https://github.com/ethereum/EIPs/issues/3051#issuecomment-950248982",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/3051",
    "id": 950248982,
    "node_id": "IC_kwDOAq426M44o6YW",
    "user": {
      "login": "github-actions[bot]",
      "id": 41898282,
      "node_id": "MDM6Qm90NDE4OTgyODI=",
      "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/github-actions%5Bbot%5D",
      "html_url": "https://github.com/apps/github-actions",
      "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
      "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
      "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
      "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
      "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
      "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
      "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
      "type": "Bot",
      "site_admin": false
    },
    "created_at": "2021-10-24T02:27:38Z",
    "updated_at": "2021-10-24T02:27:38Z",
    "author_association": "NONE",
    "body": "There has been no activity on this issue for two months. It will be closed in a week if no further activity occurs. If you would like to move this EIP forward, please respond to any outstanding feedback or add a comment indicating that you have addressed all required feedback and are ready for a review.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/950248982/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/962541450",
    "html_url": "https://github.com/ethereum/EIPs/issues/3051#issuecomment-962541450",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/3051",
    "id": 962541450,
    "node_id": "IC_kwDOAq426M45XzeK",
    "user": {
      "login": "github-actions[bot]",
      "id": 41898282,
      "node_id": "MDM6Qm90NDE4OTgyODI=",
      "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/github-actions%5Bbot%5D",
      "html_url": "https://github.com/apps/github-actions",
      "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
      "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
      "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
      "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
      "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
      "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
      "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
      "type": "Bot",
      "site_admin": false
    },
    "created_at": "2021-11-07T02:29:22Z",
    "updated_at": "2021-11-07T02:29:22Z",
    "author_association": "NONE",
    "body": "This issue was closed due to inactivity. If you are still pursuing it, feel free to reopen it and respond to any feedback or request a review in a comment.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/962541450/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
