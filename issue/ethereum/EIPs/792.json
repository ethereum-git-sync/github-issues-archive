{
  "url": "https://api.github.com/repos/ethereum/EIPs/issues/792",
  "repository_url": "https://api.github.com/repos/ethereum/EIPs",
  "labels_url": "https://api.github.com/repos/ethereum/EIPs/issues/792/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/EIPs/issues/792/comments",
  "events_url": "https://api.github.com/repos/ethereum/EIPs/issues/792/events",
  "html_url": "https://github.com/ethereum/EIPs/issues/792",
  "id": 279737779,
  "node_id": "MDU6SXNzdWUyNzk3Mzc3Nzk=",
  "number": 792,
  "title": "ERC 792: Arbitration Standard",
  "user": {
    "login": "clesaege",
    "id": 8873352,
    "node_id": "MDQ6VXNlcjg4NzMzNTI=",
    "avatar_url": "https://avatars.githubusercontent.com/u/8873352?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/clesaege",
    "html_url": "https://github.com/clesaege",
    "followers_url": "https://api.github.com/users/clesaege/followers",
    "following_url": "https://api.github.com/users/clesaege/following{/other_user}",
    "gists_url": "https://api.github.com/users/clesaege/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/clesaege/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/clesaege/subscriptions",
    "organizations_url": "https://api.github.com/users/clesaege/orgs",
    "repos_url": "https://api.github.com/users/clesaege/repos",
    "events_url": "https://api.github.com/users/clesaege/events{/privacy}",
    "received_events_url": "https://api.github.com/users/clesaege/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 2328627851,
      "node_id": "MDU6TGFiZWwyMzI4NjI3ODUx",
      "url": "https://api.github.com/repos/ethereum/EIPs/labels/stale",
      "name": "stale",
      "color": "000000",
      "default": false,
      "description": ""
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 44,
  "created_at": "2017-12-06T12:37:54Z",
  "updated_at": "2022-01-02T08:13:55Z",
  "closed_at": "2022-01-02T08:13:55Z",
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "      EIP: 792\r\n      Title: Arbitration Standard\r\n      Status: Draft\r\n      Type: Informational\r\n      Category: ERC\r\n      Author: Cl√©ment Lesaege <clement@kleros.io>\r\n      Created: 2017-12-06\r\n\r\nAbstract\r\n--------------\r\n\r\nThe following describes a standard of `Arbitrable` and `Arbitrator` contracts. Every Arbitrable contract can be adjudicated by every Arbitrator contract.  Arbitrator contracts give rulings and Arbitrable contracts enforce them.\r\n\r\nMotivation\r\n------------\r\n\r\nUsing two contracts allows separation between the ruling and its enforcement. This abstraction allows `Arbitrable` contract developers not to have to know the internal process of the `Arbitrator` contracts. Neither do `Arbitrator` contract developers with `Arbitrable` ones.\r\nIt allows dapps to easily switch from one arbitration service to another one. Or to allow their users to choose themselves their arbitration services.\r\n\r\nSpecification\r\n---------\r\nArbitrable\r\n---------\r\n\r\nThis contract enforces decisions given by the `Arbitrator` contract.\r\nIt must calls the functions `createDispute` and `appeal` of the `Arbitrator` contract and pay the required fee. It is its responsability to determine in which case a dispute occurs and when an appeal is possible.\r\nIt must track the disputes by their `(arbitrator,disputeID)` unique key. If the contract only has a unique `arbitrator` which can't be changed, the `arbitrator` part can be omitted internally.\r\nThis contract must implement enforcements of `ruling`. For `ruling`, the value `0` is reserved to indicate that no ruling has been given.\r\n\r\n### Methods\r\n#### rule\r\nTo be called by the `Arbitrator` contract.\r\nEnforces the ruling `_ruling` for dispute `(msg.sender,_dispute)`.\r\nArbitrators should only call `rule` when all appeals are exhausted.\r\nIt must reverts in case of failure.\r\nIt must fire the `Ruling` event.\r\n\r\n``` js\r\nfunction rule(uint _disputeID, uint _ruling)\r\n```\r\n\r\n**NOTE**: The `Arbitrator` contract should not assume that `rule` will be successfully executed. A malicious (or buggy) `Arbitrable` contract could make `rule` revert.\r\n\r\n### Events\r\n#### Ruling\r\nMust trigger when a final ruling is given.\r\n\r\n``` js\r\nevent Ruling(Arbitrator indexed _arbitrator, uint indexed _disputeID, uint _ruling)\r\n```\r\n\r\n\r\n\r\nArbitrator\r\n---------\r\nThis contract makes rulings. It must call the `rule` function when a decision is final.\r\n\r\n### Methods\r\n**NOTE**: The variable `_extraData` can contains information to require a custom arbitration (resp. appeal) behaviour of the contract. The format of this variable is determined by the `Arbitrator` contract creator. In case `_extraData` is void or invalid, functions should act according to a default arbitration (resp. appeal) behaviour.\r\n**NOTE**: The variable `_extraData` SHOULD be formatted the same way for both dispute creation and appeal.\r\n**NOTE**: Different `_extraData` values can be used by a same `Arbitrable` contract, even during the same dispute. Therefore `Arbitrator` contracts MUST NOT assume `_extraData` to be constant across disputes and appeals.\r\n**NOTE**: Arbitration  (resp. appeal) `fee` can change, therefore `Arbitrable` contracts should call this function each time it is relevant and not assume the `fee` are the same as in the last call.\r\n**NOTE**: If the `Arbitrable` contract does not pay enough fee, the functions should revert. However, if it pays too much fee, the contract should not revert and accept the higher fee.\r\n\r\n#### arbitrationCost\r\nReturns the cost of arbitration `fee` in wei required to create a dispute.\r\n``` js\r\nfunction arbitrationCost(bytes _extraData) view returns(uint fee)\r\n```\r\n\r\n#### appealCost\r\nReturns the cost of appeal `fee` in wei required to appeal the dispute `(arbitrator,_disputeID)`.\r\n``` js\r\nfunction appealCost(uint _disputeID, bytes _extraData) view returns(uint fee)\r\n```\r\n\r\n#### createDispute\r\nCreate a dispute.\r\nIt should be called by the `Arbitrable` contract. It must pay at least `arbitrationCost(bytes _extraData)` weis.\r\nThe parameter `_choices` indicates the maximum value `_ruling` can take. So for a binary ruling, `_choices` should be `2` (`0` to refuse to give a ruling, `1` for giving the first ruling and `2` for the second).\r\nThis method must fire the `DisputeCreation` event.\r\nThe `Arbitrator` contract should assign a unique `disputeID` identifier to the dispute and return it.\r\n``` js\r\nfunction createDispute(uint _choices, bytes _extraData) payable returns(uint disputeID)\r\n```\r\n\r\n#### appeal\r\nAppeal the dispute `(arbitrator,_disputeID)`.\r\nIt should be called by the `Arbitrable` contract. It must pay at least `appealCost(uint _disputeID, bytes _extraData)` weis.\r\nThis method must fire the `AppealDecision` event.\r\n``` js\r\nfunction appeal(uint _disputeID, bytes _extraData) payable\r\n```\r\n\r\n#### appealPeriod\r\nReturn the [`start`,`end`] time windown for appealing a ruling if known in advance.\r\nIf those time are not known or appeal is not possible, returns `(0,0)`. \r\n``` js\r\nfunction appealPeriod(uint _disputeID) public view returns(uint start, uint end)\r\n```\r\n\r\n#### currentRuling\r\nReturn the `ruling` which will be given if there is no appeal or which has been given.\r\n``` js\r\nfunction currentRuling(uint _disputeID) view returns (uint ruling)\r\n```\r\n\r\n#### disputeStatus\r\nReturn the `status` of the ruling.\r\n``` js\r\nfunction disputeStatus(uint _disputeID) view returns (DisputeStatus status)\r\n```\r\nwith\r\n```\r\nenum DisputeStatus {Waiting, Appealable, Solved}\r\n```\r\n**NOTE**:  The value `solved`  does not necessarily means that the function `rule` was called. It means that the ruling is final and that it won't change.\r\n### Events\r\n\r\n#### DisputeCreation\r\nMust trigger when a dispute is created.\r\n``` js\r\nevent DisputeCreation(uint indexed _disputeID, Arbitrable indexed _arbitrable)\r\n```\r\n\r\n#### AppealDecision\r\nMust trigger when the current ruling is appealed.\r\n``` js\r\nevent AppealDecision(uint indexed _disputeID, Arbitrable indexed _arbitrable)\r\n```\r\n\r\n#### AppealPossible\r\nMust trigger when appealing a dispute becomes possible.\r\n``` js\r\nevent AppealPossible(uint indexed _disputeID, Arbitrable indexed _arbitrable);\r\n```\r\n\r\nRationale\r\n------------\r\n- An arbitration standard allows interoperability between dapps needing and requiring arbitration.\r\n- Not putting a standard function returning the `Arbitrator` of an `Arbitrable` contract allows `Arbitrable` contracts to have multiple arbitrators and to change them.\r\n- Requiring the `Arbitrable` contract to pay the fee (opposed to requiring users to directly interact with the `Arbitrator` contract) allows it to determine who should pay the fee. It can choose to split them, or require parties to deposit ether to pay fee and reimburse the winners.\r\n- For `ruling`, reserving the value `0` for absence of ruling allows arbitrators to refuse to rule.\r\n- The variable `extraData` allows arbitrary customization of arbitration processes. For example, the amount of jurors which will participate in a ruling and the time allowed. The way a dispute is handled is determined by the `(arbitrator,extraData)` pair.\r\n- We don't need a method to indicates if `appeal` is possible, as the `Arbitrator` contract just has to return an arbitrary high value in `appealCost` to indicate that appeals are not possible.\r\n- Accepting higher fee instead of reverting generally provides more security. If the `Arbitrable` contract has a bug which makes it pay too much, it's better to accept the higher fee, than to prevent disputes and appeals which could stuck the contract forever. It also allows `Arbitrable` contracts to choose to give higher `fee` than required, for example if those `fee` are used as an incentive for arbitrators, in order to provide incentives higher than the minimum.\r\n- The method `disputeStatus` allows contract and users to know if a ruling has been given and if it is final.\r\n- The method `currentRuling` allows contracts and users to know which `ruling` would be given if there is no appeal and make their appeal decisions accordingly.\r\nCombined with `disputeStatus`, it allows other contracts to take actions depending of the result of a dispute. This can be used to enforce contingency fee payouts.\r\n- This ERC is just about rulings and enforcement, handling of evidence is described in [ERC1497: Evidence Standard](https://github.com/ethereum/EIPs/issues/1497).\r\n- About community consensus, we published this [article including the previous version of the proposed standard](https://medium.com/kleros/a-smart-contract-law-standard-for-the-internet-age-c3512a357f46) and [talked about the standard during Devcon3](https://www.youtube.com/watch?v=OX4OarfwyaU&index=10&list=PLaM7G4Llrb7ynuhOcNMEdx5_nIhUduJRY). After feedback, we modified the standard to include events and to split it into two standards: one about ruling and enforcement (this one) and one about handling of evidence (to come).\r\n\r\n\r\nImplementations\r\n------------\r\nExample implementations are available at\r\n- https://github.com/kleros/kleros-interaction/tree/master/contracts/standard/arbitration\r\n- https://github.com/kleros/kleros/blob/master/contracts/KlerosPOC.sol\r\n\r\nPresentation on how to make your own implementation:\r\n- https://kleros.io/kleros-presentations/erc-792.html",
  "closed_by": {
    "login": "github-actions[bot]",
    "id": 41898282,
    "node_id": "MDM6Qm90NDE4OTgyODI=",
    "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/github-actions%5Bbot%5D",
    "html_url": "https://github.com/apps/github-actions",
    "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
    "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
    "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
    "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
    "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
    "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
    "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
    "type": "Bot",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/792/reactions",
    "total_count": 40,
    "+1": 29,
    "-1": 0,
    "laugh": 0,
    "hooray": 11,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/EIPs/issues/792/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/350021166",
    "html_url": "https://github.com/ethereum/EIPs/issues/792#issuecomment-350021166",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/792",
    "id": 350021166,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1MDAyMTE2Ng==",
    "user": {
      "login": "Samyoul",
      "id": 5702426,
      "node_id": "MDQ6VXNlcjU3MDI0MjY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5702426?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Samyoul",
      "html_url": "https://github.com/Samyoul",
      "followers_url": "https://api.github.com/users/Samyoul/followers",
      "following_url": "https://api.github.com/users/Samyoul/following{/other_user}",
      "gists_url": "https://api.github.com/users/Samyoul/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Samyoul/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Samyoul/subscriptions",
      "organizations_url": "https://api.github.com/users/Samyoul/orgs",
      "repos_url": "https://api.github.com/users/Samyoul/repos",
      "events_url": "https://api.github.com/users/Samyoul/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Samyoul/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-07T16:31:26Z",
    "updated_at": "2017-12-07T16:31:26Z",
    "author_association": "NONE",
    "body": "Good work, I really like the look of this. I am very interested in this standard as I am also currently developing platform functionality for arbitration of contracts : https://github.com/TiiQu-Network/TiiQu-Network/wiki/White-Paper#crowd-sourced-arbitrage",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/350021166/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/350308396",
    "html_url": "https://github.com/ethereum/EIPs/issues/792#issuecomment-350308396",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/792",
    "id": 350308396,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1MDMwODM5Ng==",
    "user": {
      "login": "wanderingstan",
      "id": 673455,
      "node_id": "MDQ6VXNlcjY3MzQ1NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/673455?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wanderingstan",
      "html_url": "https://github.com/wanderingstan",
      "followers_url": "https://api.github.com/users/wanderingstan/followers",
      "following_url": "https://api.github.com/users/wanderingstan/following{/other_user}",
      "gists_url": "https://api.github.com/users/wanderingstan/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wanderingstan/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wanderingstan/subscriptions",
      "organizations_url": "https://api.github.com/users/wanderingstan/orgs",
      "repos_url": "https://api.github.com/users/wanderingstan/repos",
      "events_url": "https://api.github.com/users/wanderingstan/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wanderingstan/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-08T16:34:29Z",
    "updated_at": "2017-12-08T16:34:29Z",
    "author_association": "NONE",
    "body": "Seconding the good work. We are developing a marketplace at www.originprotocol.com and arbitration will be important. I'll share this with our team.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/350308396/reactions",
      "total_count": 4,
      "+1": 4,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/352817501",
    "html_url": "https://github.com/ethereum/EIPs/issues/792#issuecomment-352817501",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/792",
    "id": 352817501,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1MjgxNzUwMQ==",
    "user": {
      "login": "clesaege",
      "id": 8873352,
      "node_id": "MDQ6VXNlcjg4NzMzNTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8873352?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/clesaege",
      "html_url": "https://github.com/clesaege",
      "followers_url": "https://api.github.com/users/clesaege/followers",
      "following_url": "https://api.github.com/users/clesaege/following{/other_user}",
      "gists_url": "https://api.github.com/users/clesaege/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/clesaege/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/clesaege/subscriptions",
      "organizations_url": "https://api.github.com/users/clesaege/orgs",
      "repos_url": "https://api.github.com/users/clesaege/repos",
      "events_url": "https://api.github.com/users/clesaege/events{/privacy}",
      "received_events_url": "https://api.github.com/users/clesaege/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-19T16:48:56Z",
    "updated_at": "2017-12-19T16:49:07Z",
    "author_association": "CONTRIBUTOR",
    "body": "About\r\n> Before any ruling is available, it should return the value `0`.\r\n\r\nI was wondering that the `0` could both mean \"No ruling yet\" or \"Refused to give a ruling\", distinction which in some cases may be relevant.\r\nWhat do you think about using `uint(-1)` for \"No ruling yet\" to separate those?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/352817501/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/353996451",
    "html_url": "https://github.com/ethereum/EIPs/issues/792#issuecomment-353996451",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/792",
    "id": 353996451,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1Mzk5NjQ1MQ==",
    "user": {
      "login": "clesaege",
      "id": 8873352,
      "node_id": "MDQ6VXNlcjg4NzMzNTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8873352?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/clesaege",
      "html_url": "https://github.com/clesaege",
      "followers_url": "https://api.github.com/users/clesaege/followers",
      "following_url": "https://api.github.com/users/clesaege/following{/other_user}",
      "gists_url": "https://api.github.com/users/clesaege/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/clesaege/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/clesaege/subscriptions",
      "organizations_url": "https://api.github.com/users/clesaege/orgs",
      "repos_url": "https://api.github.com/users/clesaege/repos",
      "events_url": "https://api.github.com/users/clesaege/events{/privacy}",
      "received_events_url": "https://api.github.com/users/clesaege/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-26T18:10:12Z",
    "updated_at": "2017-12-26T18:10:12Z",
    "author_association": "CONTRIBUTOR",
    "body": "Another solution would be to add a `disputeStatus` function returning an `enum {awaiting, appealable, final}`.\r\nI like better the second solution.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/353996451/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/354156582",
    "html_url": "https://github.com/ethereum/EIPs/issues/792#issuecomment-354156582",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/792",
    "id": 354156582,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1NDE1NjU4Mg==",
    "user": {
      "login": "SerpentChris",
      "id": 23585527,
      "node_id": "MDQ6VXNlcjIzNTg1NTI3",
      "avatar_url": "https://avatars.githubusercontent.com/u/23585527?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/SerpentChris",
      "html_url": "https://github.com/SerpentChris",
      "followers_url": "https://api.github.com/users/SerpentChris/followers",
      "following_url": "https://api.github.com/users/SerpentChris/following{/other_user}",
      "gists_url": "https://api.github.com/users/SerpentChris/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/SerpentChris/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SerpentChris/subscriptions",
      "organizations_url": "https://api.github.com/users/SerpentChris/orgs",
      "repos_url": "https://api.github.com/users/SerpentChris/repos",
      "events_url": "https://api.github.com/users/SerpentChris/events{/privacy}",
      "received_events_url": "https://api.github.com/users/SerpentChris/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-27T18:38:02Z",
    "updated_at": "2017-12-27T18:38:02Z",
    "author_association": "NONE",
    "body": "I really don't like the _extra_data bytes argument. Languages are typed to make code easier to analyze, and this feature forces developers to obscure type information. This could make bugs harder to catch. One way to fix this would be to remove _extra_data and force Arbitrator contracts to store relevant custom data using the disputeID, and to have their own functions for providing details about each stage of dispute resolution.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/354156582/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/354164138",
    "html_url": "https://github.com/ethereum/EIPs/issues/792#issuecomment-354164138",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/792",
    "id": 354164138,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1NDE2NDEzOA==",
    "user": {
      "login": "clesaege",
      "id": 8873352,
      "node_id": "MDQ6VXNlcjg4NzMzNTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8873352?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/clesaege",
      "html_url": "https://github.com/clesaege",
      "followers_url": "https://api.github.com/users/clesaege/followers",
      "following_url": "https://api.github.com/users/clesaege/following{/other_user}",
      "gists_url": "https://api.github.com/users/clesaege/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/clesaege/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/clesaege/subscriptions",
      "organizations_url": "https://api.github.com/users/clesaege/orgs",
      "repos_url": "https://api.github.com/users/clesaege/repos",
      "events_url": "https://api.github.com/users/clesaege/events{/privacy}",
      "received_events_url": "https://api.github.com/users/clesaege/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-27T19:18:15Z",
    "updated_at": "2017-12-27T19:32:21Z",
    "author_association": "CONTRIBUTOR",
    "body": "@SerpentChris \r\nWell the thing is that when we create an `Arbitrable` contract, we don't know what other parameters the `Arbitrator` may need.\r\nIn my usecase: https://github.com/kleros/kleros/blob/master/contracts/KlerosPOC.sol#L396 , this `_extraData` is used to define the amount of jurors which will be drawn. In further versions it could also contains the ID of a specialized subcourt. \r\nAnd I guess other `Arbitrator` will have other parameters we can't forecast.\r\n\r\nIf you let `Arbitrator` have their own non standardized functions which should be called by the `Arbitrator` contract. You remove the benefit of a standard, because you would need to know to which `Arbitrator` contract you will have to interact with in order to write the `Arbitrable` one.\r\n\r\nYou can see that other standards took the same approach, for example ERC777: https://github.com/ethereum/EIPs/issues/777 .",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/354164138/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/354290051",
    "html_url": "https://github.com/ethereum/EIPs/issues/792#issuecomment-354290051",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/792",
    "id": 354290051,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1NDI5MDA1MQ==",
    "user": {
      "login": "clesaege",
      "id": 8873352,
      "node_id": "MDQ6VXNlcjg4NzMzNTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8873352?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/clesaege",
      "html_url": "https://github.com/clesaege",
      "followers_url": "https://api.github.com/users/clesaege/followers",
      "following_url": "https://api.github.com/users/clesaege/following{/other_user}",
      "gists_url": "https://api.github.com/users/clesaege/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/clesaege/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/clesaege/subscriptions",
      "organizations_url": "https://api.github.com/users/clesaege/orgs",
      "repos_url": "https://api.github.com/users/clesaege/repos",
      "events_url": "https://api.github.com/users/clesaege/events{/privacy}",
      "received_events_url": "https://api.github.com/users/clesaege/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-28T13:40:53Z",
    "updated_at": "2017-12-28T13:40:53Z",
    "author_association": "CONTRIBUTOR",
    "body": "@SerpentChris \r\nI looked more into it and we may be able to have better typing when https://github.com/ethereum/solidity/issues/1707\r\nwill be implemented.\r\nThis way the `Arbitrator` contract functions could use types and the `Arbitrable` contract use a bytes which would be formatted using the encode method offchain.\r\nNote that this would not break backward compatibility with the current proposal.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/354290051/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/354477895",
    "html_url": "https://github.com/ethereum/EIPs/issues/792#issuecomment-354477895",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/792",
    "id": 354477895,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1NDQ3Nzg5NQ==",
    "user": {
      "login": "clesaege",
      "id": 8873352,
      "node_id": "MDQ6VXNlcjg4NzMzNTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8873352?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/clesaege",
      "html_url": "https://github.com/clesaege",
      "followers_url": "https://api.github.com/users/clesaege/followers",
      "following_url": "https://api.github.com/users/clesaege/following{/other_user}",
      "gists_url": "https://api.github.com/users/clesaege/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/clesaege/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/clesaege/subscriptions",
      "organizations_url": "https://api.github.com/users/clesaege/orgs",
      "repos_url": "https://api.github.com/users/clesaege/repos",
      "events_url": "https://api.github.com/users/clesaege/events{/privacy}",
      "received_events_url": "https://api.github.com/users/clesaege/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-29T17:48:19Z",
    "updated_at": "2017-12-29T17:48:19Z",
    "author_association": "CONTRIBUTOR",
    "body": "I added the `disputeStatus` to the standard.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/354477895/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/380979245",
    "html_url": "https://github.com/ethereum/EIPs/issues/792#issuecomment-380979245",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/792",
    "id": 380979245,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4MDk3OTI0NQ==",
    "user": {
      "login": "mbeylin",
      "id": 6082639,
      "node_id": "MDQ6VXNlcjYwODI2Mzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6082639?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mbeylin",
      "html_url": "https://github.com/mbeylin",
      "followers_url": "https://api.github.com/users/mbeylin/followers",
      "following_url": "https://api.github.com/users/mbeylin/following{/other_user}",
      "gists_url": "https://api.github.com/users/mbeylin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mbeylin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mbeylin/subscriptions",
      "organizations_url": "https://api.github.com/users/mbeylin/orgs",
      "repos_url": "https://api.github.com/users/mbeylin/repos",
      "events_url": "https://api.github.com/users/mbeylin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mbeylin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-12T23:58:09Z",
    "updated_at": "2018-04-12T23:58:09Z",
    "author_association": "CONTRIBUTOR",
    "body": "Wanted to add some more concrete thoughts on this EIP after our call @clesaege \r\n\r\n`function arbitrationCost(bytes _extraData) constant returns(uint fees)`\r\nWhat would the suggested functionality be if people decide to pay higher fees than the minimum (so as to better incentivize arbiters?\r\n\r\n`function appealCost(uint _disputeID, bytes _extraData) constant returns(uint fees)`\r\nI believe this is not needed, as appeals should not be a necessary element of all disputes.\r\n\r\n`function createDispute(bytes _extraData) payable returns(uint disputeID)`\r\nIs it necessary to return the new dispute ID here? This would only be useful if a contract was making that create dispute call. For Delphi, the way we have implemented this is ` function openClaim(address _claimant, uint _amount, uint _fee, string _data)` (where the string serves the same purpose as the data), the `_amount` is the value of the claim, and the `_fee` is the value of the fee the claimant desires to pay (greater than the min fee).\r\n\r\n`function appeal(uint _disputeID, bytes _extraData) payable`\r\nAs mentioned above, I don't believe this should be a part of the standard, since in no way is an appeals process a necessary element of a dispute.\r\n\r\n`function disputeStatus(uint _disputeID) constant returns (DisputeStatus status)` I feel that this function is not needed, in the absence of an appeals process in the standard, a dispute is either ruled or un-ruled, which could easily be checked by the `currentRuling(uint _disputeID)` function.\r\n\r\nIn addition to the `DisputeCreation(uint indexed _disputeID, Arbitrable _arbitrable)` event, I would suggest adding a `DisputeRuled(uint indexed _disputeID)` event. It is also unclear to me why the Dispute Creation event would include a reference to the Arbitrable contract, since that is the contract which is emitting the event in the first place (right?).\r\n\r\nIn addition to this, I want to formally advocate for a settlements process that is on-chain, allowing people to settle disputes for a lower amount without having to pay arbiter fees. However, I would be open to settlement functionality not being included in the standard since I understand you (Kleros) don't include that functionality in your mechanism as of right now.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/380979245/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/380979734",
    "html_url": "https://github.com/ethereum/EIPs/issues/792#issuecomment-380979734",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/792",
    "id": 380979734,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4MDk3OTczNA==",
    "user": {
      "login": "mbeylin",
      "id": 6082639,
      "node_id": "MDQ6VXNlcjYwODI2Mzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6082639?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mbeylin",
      "html_url": "https://github.com/mbeylin",
      "followers_url": "https://api.github.com/users/mbeylin/followers",
      "following_url": "https://api.github.com/users/mbeylin/following{/other_user}",
      "gists_url": "https://api.github.com/users/mbeylin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mbeylin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mbeylin/subscriptions",
      "organizations_url": "https://api.github.com/users/mbeylin/orgs",
      "repos_url": "https://api.github.com/users/mbeylin/repos",
      "events_url": "https://api.github.com/users/mbeylin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mbeylin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-13T00:01:04Z",
    "updated_at": "2018-04-13T00:01:04Z",
    "author_association": "CONTRIBUTOR",
    "body": "I also want to formally share my opinion that *I believe it is premature for us to create an ERC for this when we have minimal evidence of the validity of our assumptions*. Standards historically have evolved out of market successes (or based on user data about previous versions of a product), however the lack of decentralized dispute resolution mechanism in the market precludes us from making any assertions about what *should* be in the standard without including some of our own assumptions. I believe we should align on what a general standard for this would look like, and begin employing it, well before we pursue a finalization of this EIP (similarly to how ERC20 was used well before it was finalized).",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/380979734/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/381183146",
    "html_url": "https://github.com/ethereum/EIPs/issues/792#issuecomment-381183146",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/792",
    "id": 381183146,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4MTE4MzE0Ng==",
    "user": {
      "login": "clesaege",
      "id": 8873352,
      "node_id": "MDQ6VXNlcjg4NzMzNTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8873352?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/clesaege",
      "html_url": "https://github.com/clesaege",
      "followers_url": "https://api.github.com/users/clesaege/followers",
      "following_url": "https://api.github.com/users/clesaege/following{/other_user}",
      "gists_url": "https://api.github.com/users/clesaege/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/clesaege/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/clesaege/subscriptions",
      "organizations_url": "https://api.github.com/users/clesaege/orgs",
      "repos_url": "https://api.github.com/users/clesaege/repos",
      "events_url": "https://api.github.com/users/clesaege/events{/privacy}",
      "received_events_url": "https://api.github.com/users/clesaege/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-13T16:04:45Z",
    "updated_at": "2018-04-17T21:46:21Z",
    "author_association": "CONTRIBUTOR",
    "body": "> `function arbitrationCost(bytes _extraData) constant returns(uint fees)`\r\nWhat would the suggested functionality be if people decide to pay higher fees than the minimum (so as to better incentivize arbiters?\r\n\r\nThe standard is not about functionalities, it's about interoperability. The `Arbitrator` contracts can decide what to do with the extra fees. I guess in most cases, it will be paying more the arbitrators.\r\n\r\n------------\r\n\r\n> `function appealCost(uint _disputeID, bytes _extraData) constant returns(uint fees)`\r\nI believe this is not needed, as appeals should not be a necessary element of all disputes.\r\n`function appeal(uint _disputeID, bytes _extraData) payable`\r\nAs mentioned above, I don't believe this should be a part of the standard, since in no way is an appeals process a necessary element of a dispute.\r\n\r\nWith the exception of the centralized arbitrators and Delphi proposals, all dispute resolution proposal I'm aware of (Kleros, Juris, Jury.Online, Aragon, TiiQu) includes an appeal system. If a contract does not allow appeals, it just has to return a high value to forbid it. But when the overwhelming majority of dispute resolution systems off-chain (state court system, ADR which even when they don't include an intra-ADR appeal system, can then be \"appealed\" by state courts), and on-chain proposals. It seems that the appeal system must belong to the standard.\r\nFor dispute resolution systems which don't have appeal possibility the extra implementation cost is minimal (a single function which indicates that appeals are not possible).\r\nI think we have 3 possible choice:\r\n\r\n- Having appeals in the standard: Current proposal. It has the advantage of being simple and not requiring tailoring of `Arbitrable` contracts to `Arbitrator` ones. It has a disadvantage of slightly increasing the deployment cost of contracts due to the arbitrationCost function.\r\n- Putting appeal as optional: It has the advantage of saving gas in the deployment of some `Arbitrator`. It has the disadvantage that `Arbitrable` contracts would need different implementations depending if they interact with an appealable Arbitrator. This increases overall interaction complexity.\r\n- Have both BasicArbitrator/BasicArbitrable and AppealableArbitrator/AppealableArbitrable standards. We can get the best of both worlds in term of gas and contract logic this way, but interoperability will be impacted as the Basic would not be able to interact with the `Appealable` without wrappers. It would be a solution which would not take considerable amount of time to `Appealable` systems developers nor Basic system developers as they would both develop strictly what they need.\r\n\r\n---------------\r\n\r\n>`function createDispute(bytes _extraData) payable returns(uint disputeID)`\r\nIs it necessary to return the new dispute ID here?\r\n\r\nYes, for cases where an `Arbitrable` contract has multiple disputes in the same `Arbitrator` contract, there must be an identifier to know which on to refer to.\r\n\r\n---------------\r\n\r\n> In addition to the `DisputeCreation(uint indexed _disputeID, Arbitrable _arbitrable)` event, I would suggest adding a `DisputeRuled(uint indexed _disputeID)` event. It is also unclear to me why the Dispute Creation event would include a reference to the Arbitrable contract, since that is the contract which is emitting the event in the first place (right?).\r\n\r\nNo, the `DisputeCreation` event is emitted by the `Arbitrator` contract. This allows to know from the logs which dispute is related to which `Arbitrable` contracts.\r\n\r\n-------------------\r\n\r\n> In addition to this, I want to formally advocate for a settlements process that is on-chain, allowing people to settle disputes for a lower amount without having to pay arbiter fees. However, I would be open to settlement functionality not being included in the standard since I understand you (Kleros) don't include that functionality in your mechanism as of right now.\r\n\r\nAn on-chain settlement process is not included in the standard as this standard is about standardization of interactions between `Arbitrator` and `Arbitrable` contracts. Pre-arbitration settlement is a part of a mediation process and an `Arbitrator` contract not need to be involved. It is perfectly possible to make contracts with a settlement mechanism implementing this standard (for example https://github.com/kleros/kleros-interaction/blob/master/contracts/standard/arbitration/Rental.sol ).\r\nFor now we haven't identified a need of settlement standardization due to it (in the usecases we have in mind) being well handled by the `Arbitrable` contract alone. If they were to be need of standardization (I can imagine, some contract making insurance payment depending of results of settlement and mediators paid on result, i.e only when settlement occurs and the dispute is not raised to arbitration), we would be please to collaborate on it.\r\n\r\n-------------------\r\n\r\n>I also want to formally share my opinion that I believe it is premature for us to create an ERC for this when we have minimal evidence of the validity of our assumptions. Standards historically have evolved out of market successes (or based on user data about previous versions of a product), however the lack of decentralized dispute resolution mechanism in the market precludes us from making any assertions about what should be in the standard without including some of our own assumptions. I believe we should align on what a general standard for this would look like, and begin employing it, well before we pursue a finalization of this EIP (similarly to how ERC20 was used well before it was finalized).\r\n\r\nWhen speaking with projects needing dispute resolution, the contrary opinion has emerged. There a lot of teams building products which need dispute resolution and a handful of teams working on it. The projects which need dispute resolution generally don't want to have to integrate with each dispute resolution provider, especially knowing that those projects are early stage (the whole industry is) and most of them will have failed within a few years. Integration with a standard, instead of a particular project, allows them to let their users choose their dispute resolution system instead of locking them on a particular one.\r\nIn the absence of standard of interoperability, monopolies could emerge as dapps developers would have to take a specific action to support a dispute resolution mechanism and they would obviously only do it for systems having significant uses. This would provides significant first-mover advantage and barriers of entry.\r\nThe only assumption being made is that **a significant portion** of dispute resolution mechanism will include an appeal possibility. Assumption being supported by thousands of years of off-chain disputes resolution process allowing appeals. This does not prevent the standard from working with disputes resolution systems which do not have the possibility of appeals while not including it would prevent the use of dispute resolution systems with an appeal possibility. The possibility for projects to interact with (up to my knowledge) dispute resolution mechanisms which includes appeals, far outweigh the extra unique (you only need to deploy each contract once, as you can use libraries) gas cost of arround 0.01$.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/381183146/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/381355933",
    "html_url": "https://github.com/ethereum/EIPs/issues/792#issuecomment-381355933",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/792",
    "id": 381355933,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4MTM1NTkzMw==",
    "user": {
      "login": "mbeylin",
      "id": 6082639,
      "node_id": "MDQ6VXNlcjYwODI2Mzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6082639?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mbeylin",
      "html_url": "https://github.com/mbeylin",
      "followers_url": "https://api.github.com/users/mbeylin/followers",
      "following_url": "https://api.github.com/users/mbeylin/following{/other_user}",
      "gists_url": "https://api.github.com/users/mbeylin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mbeylin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mbeylin/subscriptions",
      "organizations_url": "https://api.github.com/users/mbeylin/orgs",
      "repos_url": "https://api.github.com/users/mbeylin/repos",
      "events_url": "https://api.github.com/users/mbeylin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mbeylin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-14T19:55:02Z",
    "updated_at": "2018-04-14T19:55:48Z",
    "author_association": "CONTRIBUTOR",
    "body": ">Have both BasicArbitrator/BasicArbitrable and AppealableArbitrator/AppealableArbitrable standards.\r\n \r\nIn my opinion this would be best, similar to how there was a `HumanStandardToken` which added increased functionality to the `StandardToken` functionality.\r\n\r\n>Yes, for cases where an Arbitrable contract has multiple disputes in the same Arbitrator contract, there must be an identifier to know which on to refers to.\r\n\r\nCorrect, but this information is entirely useless _unless it is being returned to another contract for storage_ since it's impossible for the returned value to be passed to the sender of the original transaction (if the claim is opened by a user). This information should be emitted in an event. I would also like for the claim amount and fee information to be passed as parameters to this function as well (remember when I asked about what happens if a fee is greater than the `arbitrationCost`? It's because functions like this one now need to know how much you're paying as a fee)\r\n\r\n>No, the DisputeCreation event is emitted by the Arbitrator contract.\r\n\r\nCould you please explain this to me? If a contract is arbitrable, it means it is a contract requiring arbitration, i.e. requiring the opening of claims against it. For our staking mechanism, these arbitrable contracts are the stakes which can have claims opened against them. \r\n\r\n>When speaking with projects needing dispute resolution, the contrary opinion has emerged. There a lot of teams building products which need dispute resolution and a handful of teams working on it. The projects which need dispute resolution generally don't want to have to integrate with each dispute resolution provider, especially knowing that those projects are early stage (the whole industry is) and most of them will have failed within a few years. Integration with a standard, instead of a particular project, allows them to let their users choose their dispute resolution system instead of locking them on a particular one.\r\n\r\nThis viewpoint is admirable, and I am largely behind it, however I worry that trying to formalize this standard too early as an officially accepted EIP (instead of it simply serving as a reference for dispute resolution providers and recipients), we'll be screwing ourselves over in the future by requiring new standards to be backwards compatible. Having competitors and collaborators come together on a standard is an important part of the Ethereum developer community, however it requires a light touch, where developers are open to having their ideas questioned and overturned when the market (their users) provides them feedback that their assumptions are wrong.\r\n\r\nIn terms of including the appeals process in the standard as an extra function (which may revert for implementations without appeals), I believe this is a fine solution for the short term as we **test out our implementations and figure out where they break**. \r\n\r\nIt is non-trivial for **all disputes** to be implemented using the same contract standard, with there generally being various approaches to the dispute resolution problem which **don't necessarily mirror the adjudication methods we see in the real world right now**. In an effort to encourage this exploration of new and unique methods, we should try to be fluid in our development of this standard, and open to seeing it challenged and amended as we discover what works in practise. \r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/381355933/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/381418318",
    "html_url": "https://github.com/ethereum/EIPs/issues/792#issuecomment-381418318",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/792",
    "id": 381418318,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4MTQxODMxOA==",
    "user": {
      "login": "clesaege",
      "id": 8873352,
      "node_id": "MDQ6VXNlcjg4NzMzNTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8873352?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/clesaege",
      "html_url": "https://github.com/clesaege",
      "followers_url": "https://api.github.com/users/clesaege/followers",
      "following_url": "https://api.github.com/users/clesaege/following{/other_user}",
      "gists_url": "https://api.github.com/users/clesaege/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/clesaege/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/clesaege/subscriptions",
      "organizations_url": "https://api.github.com/users/clesaege/orgs",
      "repos_url": "https://api.github.com/users/clesaege/repos",
      "events_url": "https://api.github.com/users/clesaege/events{/privacy}",
      "received_events_url": "https://api.github.com/users/clesaege/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-15T16:16:03Z",
    "updated_at": "2018-04-17T21:43:23Z",
    "author_association": "CONTRIBUTOR",
    "body": "> Correct, but this information is entirely useless _unless it is being returned_ to another contract for storage since it's impossible for the returned value to be passed to the sender of the original transaction (if the claim is opened by a user).\r\n\r\nThis information is _always being returned_ to another contract. It is returned to the `Arbitrable` contract per \r\n> It should be called by the `Arbitrable` contract. It must pay at least `arbitrationCost(bytes _extraData)` weis.\r\n\r\nExternal accounts don't create dispute. `Arbitrable` contracts do.\r\n\r\n-------\r\n\r\n> This information should be emitted in an event. \r\n\r\nThis is the case per \r\n> This method must fire the `DisputeCreation` event.\r\n\r\n---------\r\n\r\n>  I would also like for the claim amount and fee information to be passed as parameters to this function as well\r\n\r\nThis is a general dispute resolution standard, claims not need to be monetary. A claim can for example be about blacklisting something (malicious ENS address, irrelevant item, spam) (see this contract for example https://github.com/kleros/kleros-interaction/blob/master/contracts/standard/permission/ArbitrableBlacklist.sol ). Thus the claimed amount cannot be part of the standard.\r\nThe fee is passed by being send from the `Arbitrable` contract to the `Arbitrator` one. It is accessible using `msg.value` and there obviously no need to repeat that in a parameter.\r\n\r\n-------------\r\n\r\n> >No, the DisputeCreation event is emitted by the Arbitrator contract.\r\n\r\n>Could you please explain this to me? If a contract is arbitrable, it means it is a contract requiring arbitration, i.e. requiring the opening of claims against it. For our staking mechanism, these arbitrable contracts are the stakes which can have claims opened against them.\r\n\r\nThis standard is only about interaction between `Arbitrator` and `Arbitrable` contract. External accounts interactions with the `Arbitrable` contract are out of scope. You can initiate a dispute at the `Arbitrable` level as you wish, the `DisputeCreation` is only emitted when this dispute is raised to the `Arbitrator` contract (for example if you require both parties to deposit the fees, consider parties not deposit the fee to automatically lose, if only one party deposits the fee, no dispute should be raised to the `Arbitrator`, thus no `DisputeCreation` event to be emitted).\r\n\r\n------------------\r\n\r\n> This viewpoint is admirable, and I am largely behind it, however I worry that trying to formalize this standard too early as an officially accepted EIP (instead of it simply serving as a reference for dispute resolution providers and recipients), we'll be screwing ourselves over in the future by requiring new standards to be backwards compatible.\r\n\r\nThat's why this ERC has been put in the issue section before making a pull request per the EIP Work Flow described by EIP1 https://github.com/ethereum/EIPs/blob/master/EIPS/eip-1.md :\r\n> In particular, the Issues section of [this repository](https://github.com/ethereum/EIPs/issues/) is an excellent place to discuss your proposal with the community and start creating more formalized language around your EIP.\r\n\r\n---------------\r\n\r\n> In terms of including the appeals process in the standard as an extra function (which may revert for implementations without appeals), I believe this is a fine solution for the short term as we **test out our implementations and figure out where they break**.\r\n\r\nThe possibility off appeals cannot break anything. If you don't need it, don't allow appeals. At worse you lost 0.01$ when deploying your contract (only once if using a library). At best you avoided duplicating your `Arbitrable` contract development code.\r\n\r\n--------------\r\n\r\n> It is non-trivial for ***all disputes *** to be implemented using the same contract standard, with there generally being various approaches to the dispute resolution problem which ***don't necessarily mirror the adjudication methods we see in the real world right now***. \r\n\r\nWhen there is no interaction between dapps (for example in the case of Augur where they both deal with dispute resolution and enforcement), there is no need to follow a standard.\r\nRemoving appeals would have the opposite effect of discouraging the exploration of new methods by locking dapps developers to dispute resolution systems where appeals are not possible.\r\n\r\n---------------\r\n\r\n> In an effort to encourage this exploration of new and unique methods, we should try to be fluid in our development of this standard, and open to seeing it challenged and amended as we discover what works in practise.\r\n\r\nFor sure, but in the other way around (not preventing usages but allowing some). If someone were to show a dispute resolution method which could not fit in the standard, I would support modifying it (as long as it would only incurs limited extra gas cost and code complexity) in order to allow this new dispute resolution method.\r\nUp to my knowledge, all dispute resolution systems which were proposed so far fits in the standard. If you have a reasonable usecases not fitting, feel free point toward it.\r\nThe goal of this standard is to provide the minimum number of standardized functions required for interactions between all reasonably imaginable `Arbitrator` and `Arbitrable` contracts.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/381418318/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/381420970",
    "html_url": "https://github.com/ethereum/EIPs/issues/792#issuecomment-381420970",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/792",
    "id": 381420970,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4MTQyMDk3MA==",
    "user": {
      "login": "mbeylin",
      "id": 6082639,
      "node_id": "MDQ6VXNlcjYwODI2Mzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6082639?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mbeylin",
      "html_url": "https://github.com/mbeylin",
      "followers_url": "https://api.github.com/users/mbeylin/followers",
      "following_url": "https://api.github.com/users/mbeylin/following{/other_user}",
      "gists_url": "https://api.github.com/users/mbeylin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mbeylin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mbeylin/subscriptions",
      "organizations_url": "https://api.github.com/users/mbeylin/orgs",
      "repos_url": "https://api.github.com/users/mbeylin/repos",
      "events_url": "https://api.github.com/users/mbeylin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mbeylin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-15T16:54:17Z",
    "updated_at": "2018-04-15T16:54:17Z",
    "author_association": "CONTRIBUTOR",
    "body": "It seems we have again found another strong difference in opinion.\r\n\r\nFor Delphi, claims are opened by people, against particular stakes. Claims ARE for monetary amounts (units of tokens, for what else could be administered on-chain otherwise?) Are you proposing that certain byte code would execute based on these claims? Is that what you intend to store in the bytes array, and not a content hash?\r\n\r\nMy desire here isn't to simply \"remove appeals\". We are approaching arbitration in very different manners and assuming that either approach is right from the outset is incorrect. I will apologize that I've had a bit of trouble understanding this architecture you've designed (the flow of actions between the arbitrable contract and the arbitrator contract).\r\n\r\nHere is a list of reasons why this standard doesn't currently conform to the dispute resolution mechanism we've outlined with our arbitration mechanism:\r\n- our interface requires sending a claim amount, fee amount, and is generalized for people to be able to open claims on behalf of others. The current claim creation interface does not allow for this.\r\n- why are arbitrator fees fixed, and not simply allowed to move freely? With our design, claims can be created at any price above the minimum *set by the arbitrable contract*, and sit in a pool of open claims until they are ruled upon. The value of the fee (relative to the size of the claim) determines the speed with which it is adjudicated.\r\n- why are claims opened for an arbiter, and not just in the arbitrable contract (which is the one who must know about the claims, to determine when they may be paid out) . All of the functions pertaining to a particular dispute (its current status) should be implemented in the Arbitrable contract.\r\n- An arbitrable contract should be decoupled from the arbitrator, which should be no more than an address which is allowed to make rulings on particular claims\r\n\r\nLike I said above, there are **many differences in our designs**, and that should be encouraged, in order to test the assumptions underlying each of them. Trying to create one standard for all possible usecases of arbitration will be very difficult, owing to the variety of instances in life where arbitration is currently used (and the many new ones which are being ideated such as the blacklisting of accounts, or other new on-chain actions).",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/381420970/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/381423936",
    "html_url": "https://github.com/ethereum/EIPs/issues/792#issuecomment-381423936",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/792",
    "id": 381423936,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4MTQyMzkzNg==",
    "user": {
      "login": "clesaege",
      "id": 8873352,
      "node_id": "MDQ6VXNlcjg4NzMzNTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8873352?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/clesaege",
      "html_url": "https://github.com/clesaege",
      "followers_url": "https://api.github.com/users/clesaege/followers",
      "following_url": "https://api.github.com/users/clesaege/following{/other_user}",
      "gists_url": "https://api.github.com/users/clesaege/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/clesaege/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/clesaege/subscriptions",
      "organizations_url": "https://api.github.com/users/clesaege/orgs",
      "repos_url": "https://api.github.com/users/clesaege/repos",
      "events_url": "https://api.github.com/users/clesaege/events{/privacy}",
      "received_events_url": "https://api.github.com/users/clesaege/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-15T17:38:34Z",
    "updated_at": "2018-04-15T21:11:48Z",
    "author_association": "CONTRIBUTOR",
    "body": ">  for what else could be administered on-chain otherwise?\r\n\r\nItems in lists, Oracle answers, Cryptokitties...\r\n\r\n----------------\r\n\r\n> Are you proposing that certain byte code would execute based on these claims?\r\n\r\nI'm proposing a system which allows the `Arbitrable` contracts to decide what should be done when a particular ruling is made. If you want to make and `Arbitrable` contract which execute a byte code of the claimer when the `Arbitrator` contract rules in its favor, it's perfectly possible within the standard.\r\n\r\n------------------------\r\n\r\n> Is that what you intend to store in the bytes array, and not a content hash?\r\n\r\nNo, the bytes contains specific information for the `Arbitrator`, this allows the arbitration process of one `Arbitrator` to be specific depending of the `_extraData` he receives. Thus an arbitration process depends of the (Arbitrator,_extraData) couple. In my example usecase, the `_extraData` contains the amount of jurors required and default to a particular value if no `_extraData` is given.\r\n\r\n--------------------\r\n\r\n> We are approaching arbitration in very different manners and assuming that either approach is right from the outset is incorrect.\r\n\r\nThat is not the case. I'm approaching arbitration from a general manner to allow every possible usecases (including yours) while you approach arbitration from a particular approach. Your approach (do you have code to link to so I can verify?) seems to be perfectly compatible with the standard.\r\n\r\n---------------------\r\n\r\n> our interface requires sending a claim amount, fee amount, and is generalized for people to be able to open claims on behalf of others. The current claim creation interface does not allow for this.\r\n\r\nThe standard interface perfectly allows this. You have to implement this in the `Arbitrable` contract. The interaction between external accounts and the `Arbitrable` contracts are out of scope of this standard. Thus nothing prevents what you do.\r\n\r\n---------------------\r\n\r\n> why are arbitrator fees fixed, and not simply allowed to move freely?\r\n\r\nHaving arbitration fees not fixed is perfectly possible within the standard. If you want the `Arbitrator` contract not to require a particular fee, you can make `arbitrationCost` to return 0. Since the `Arbitrable` contract must send *** at least *** the value returned by `arbitrationCost`, it will be able to freely decide which value to send.\r\n\r\n--------------------\r\n\r\n> why are claims opened for an arbiter, and not just in the arbitrable contract (which is the one who must know about the claims, to determine when they may be paid out) . All of the functions pertaining to a particular dispute (its current status) should be implemented in the Arbitrable contract.\r\n\r\nYou are speaking about claims, the standard does not deal with claims (this does not mean claims are impossible, just that the `Arbitrable` contract can implement them as the developer wishes).\r\nThe `Arbitrable` contract can (and in a lot of cases will) keep note of information about a particular dispute. This part is not about interactions between `Arbitrable` and `Arbitrator` contracts, thus out of scope of this standard.\r\n\r\n-----------------------\r\n\r\n> An arbitrable contract should be decoupled from the arbitrator, which should be no more than an address which is allowed to make rulings on particular claims\r\n\r\nThat the particular point of this standard, decoupling `Arbitrable`  and `Arbitrator` contracts.\r\nHowever, arbitrators contracts, if more complex than an external account, need to make some particular actions when disputes are brought to them. Thus, they need to know when a dispute arise and if the fees are properly paid. If you want to restrict arbitrator to external accounts, you obviously don't need an kind of standardization.\r\n\r\n-----------------------\r\n\r\n> Like I said above, there are *** many differences in our designs ***, and that should be encouraged, in order to test the assumptions underlying each of them.\r\n\r\nNo, there is not design difference, as the standardization of interactions between `Arbitrable` and `Arbitrator` contracts should not care about the design of those. You are making a particular dispute resolution system, I'm making a standard to allow interoperability of those (I'm also making a dispute resolution system, but that not about what this standard is for and I don't try to push the specifics of the dispute resolution system I'm working on to standardization). You are comparing a set (a standard which allow dispute resolution systems) and one element (a particular dispute resolution system). Saying that there is a design difference between a set and one of its element does not make sens.\r\n\r\n>This abstraction allows `Arbitrable` contract developers not to have to know the internal process of the `Arbitrator` contracts. \r\n\r\nThere is standard framework for interoperability which is perfectly compatible with your design (from what I understood, but again, for me to verify that I'd need to see your code).\r\n\r\n-------------------------------------------\r\n\r\n> Trying to create one standard for all possible usecases of arbitration will be very difficult, owing to the variety of instances in life where arbitration is currently used (and the many new ones which are being ideated such as the blacklisting of accounts, or other new on-chain actions).\r\n\r\nAgain, feel free to give me a usecase which will not fit in. But note that the standard is about interactions between `Arbitrator` and `Arbitrable` contracts and ***not about the internal specifics of those, nor about their interactions with external accounts***.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/381423936/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/381668104",
    "html_url": "https://github.com/ethereum/EIPs/issues/792#issuecomment-381668104",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/792",
    "id": 381668104,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4MTY2ODEwNA==",
    "user": {
      "login": "mbeylin",
      "id": 6082639,
      "node_id": "MDQ6VXNlcjYwODI2Mzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6082639?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mbeylin",
      "html_url": "https://github.com/mbeylin",
      "followers_url": "https://api.github.com/users/mbeylin/followers",
      "following_url": "https://api.github.com/users/mbeylin/following{/other_user}",
      "gists_url": "https://api.github.com/users/mbeylin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mbeylin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mbeylin/subscriptions",
      "organizations_url": "https://api.github.com/users/mbeylin/orgs",
      "repos_url": "https://api.github.com/users/mbeylin/repos",
      "events_url": "https://api.github.com/users/mbeylin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mbeylin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-16T16:36:31Z",
    "updated_at": "2018-04-16T16:36:31Z",
    "author_association": "CONTRIBUTOR",
    "body": "Here is a link to the stake contract, which will be the \"arbitrable\" contract in the end. This work is still very much WIP and undocumented, but I think you'll quickly see that our implementation of arbitration is not the same as yours. (or maybe it is, and I've simply misunderstood)\r\n\r\nhttps://github.com/Bounties-Network/Delphi/blob/develop/contracts/DelphiStake.sol",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/381668104/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/381717452",
    "html_url": "https://github.com/ethereum/EIPs/issues/792#issuecomment-381717452",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/792",
    "id": 381717452,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4MTcxNzQ1Mg==",
    "user": {
      "login": "clesaege",
      "id": 8873352,
      "node_id": "MDQ6VXNlcjg4NzMzNTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8873352?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/clesaege",
      "html_url": "https://github.com/clesaege",
      "followers_url": "https://api.github.com/users/clesaege/followers",
      "following_url": "https://api.github.com/users/clesaege/following{/other_user}",
      "gists_url": "https://api.github.com/users/clesaege/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/clesaege/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/clesaege/subscriptions",
      "organizations_url": "https://api.github.com/users/clesaege/orgs",
      "repos_url": "https://api.github.com/users/clesaege/repos",
      "events_url": "https://api.github.com/users/clesaege/events{/privacy}",
      "received_events_url": "https://api.github.com/users/clesaege/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-16T19:15:12Z",
    "updated_at": "2018-04-16T19:15:55Z",
    "author_association": "CONTRIBUTOR",
    "body": "> our implementation of arbitration is not the same as yours\r\n\r\nOur respective implementations do not matter for standardization. Only the interaction needs to be standardized, not the implementation. I think that a lot of your previous comments are based on the wrong premise that the standard was about implementation.\r\n\r\n------------------\r\n\r\n> (or maybe it is, and I've simply misunderstood) \r\nhttps://github.com/Bounties-Network/Delphi/blob/develop/contracts/DelphiStake.sol\r\n\r\nI effectively think you misunderstood as your implementation can be slightly modified to fit in the standard.\r\nTo do so, you need to call `createDispute` of the `Arbitrator` contract after it's sure that a dispute would arise, i.e. in `settlementFailed` https://github.com/Bounties-Network/Delphi/blob/develop/contracts/DelphiStake.sol#L328\r\nYou also need to transfer the fee when calling `createDispute` and not when the ruling is given (but note that the `Arbitrator` can pay the human arbitrators only when the ruling in given, so in practice, it does not change what the contract is doing from an external observer point of view). Transferring the fee after a ruling is made would lead potential of DDOS of the `Arbitrator` by creating disputes he has to rule while the `Arbitrable` contract would never pay the fees.\r\nI however see a point where it would not fit. This is that the fees are paid in tokens, not ETH. For `Arbitrator` and `Arbitrable` contracts to be inter-operable, they must obviously accept the same currency. If you think it's worthy, you could work on standardizing payment of fees in tokens.\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/381717452/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/381733759",
    "html_url": "https://github.com/ethereum/EIPs/issues/792#issuecomment-381733759",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/792",
    "id": 381733759,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4MTczMzc1OQ==",
    "user": {
      "login": "mbeylin",
      "id": 6082639,
      "node_id": "MDQ6VXNlcjYwODI2Mzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6082639?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mbeylin",
      "html_url": "https://github.com/mbeylin",
      "followers_url": "https://api.github.com/users/mbeylin/followers",
      "following_url": "https://api.github.com/users/mbeylin/following{/other_user}",
      "gists_url": "https://api.github.com/users/mbeylin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mbeylin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mbeylin/subscriptions",
      "organizations_url": "https://api.github.com/users/mbeylin/orgs",
      "repos_url": "https://api.github.com/users/mbeylin/repos",
      "events_url": "https://api.github.com/users/mbeylin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mbeylin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-16T20:12:12Z",
    "updated_at": "2018-04-16T20:12:12Z",
    "author_association": "CONTRIBUTOR",
    "body": ">You also need to transfer the fee when calling createDispute and not when the ruling is given (but note that the Arbitrator can pay the human arbitrators only when the ruling in given, so in practice, it does not change what the contract is doing from an external observer point of view).\r\n\r\nWhy are arbiters being paid in advance when we can trustlessly pay them when they rule? \r\n\r\n>Transferring the fee after a ruling is made would lead potential of DDOS of the Arbitrator by creating disputes he has to rule while the Arbitrable contract would never pay the fees.\r\n\r\nIf arbiters simply sort their bounties by the value of their fees instead of by their time of creation (or some weighted combination), the spammy bounties will be the lowest value disputes, and can therefore trivially be ignored. Otherwise if spammy claims have a meaningful supply of fees attached, they can choose to rule on them as they please.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/381733759/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/381763676",
    "html_url": "https://github.com/ethereum/EIPs/issues/792#issuecomment-381763676",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/792",
    "id": 381763676,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4MTc2MzY3Ng==",
    "user": {
      "login": "clesaege",
      "id": 8873352,
      "node_id": "MDQ6VXNlcjg4NzMzNTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8873352?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/clesaege",
      "html_url": "https://github.com/clesaege",
      "followers_url": "https://api.github.com/users/clesaege/followers",
      "following_url": "https://api.github.com/users/clesaege/following{/other_user}",
      "gists_url": "https://api.github.com/users/clesaege/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/clesaege/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/clesaege/subscriptions",
      "organizations_url": "https://api.github.com/users/clesaege/orgs",
      "repos_url": "https://api.github.com/users/clesaege/repos",
      "events_url": "https://api.github.com/users/clesaege/events{/privacy}",
      "received_events_url": "https://api.github.com/users/clesaege/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-16T21:59:27Z",
    "updated_at": "2018-04-17T12:17:13Z",
    "author_association": "CONTRIBUTOR",
    "body": "> Why are arbiters being paid in advance when we can trustlessly pay them when they rule?\r\n\r\nIt's not arbiters which are paid in advance, it's the `Arbitrator` contract. The `Arbitrator` contract can pay the humans arbitrators when they rule (see for example https://github.com/kleros/kleros-interaction/blob/master/contracts/standard/arbitration/CentralizedArbitrator.sol).\r\nPaying only after ruling would require the `Arbitrator` contract to vet all `Arbitrable` to verify that they will pay. Otherwise, `Arbitrable` contract could start disputes consuming resources and never pay.\r\nThe `Arbitrable` contracts users choose their `Arbitrator` contract, so they can choose non-malicious ones. So it's better to ask the `Arbitrable` contract to pay before engaging the procedure.\r\n\r\n------------------------\r\n\r\n> If arbiters simply sort their bounties by the value of their fees instead of by their time of creation (or some weighted combination), the spammy bounties will be the lowest value disputes, and can therefore trivially be ignored. Otherwise if spammy claims have a meaningful supply of fees attached, they can choose to rule on them as they please.\r\n\r\nBecause\r\n- They would need to verify that the `Arbitrable` contract is effectively going to pay them after they made a ruling.\r\n- This will trigger a dispute resolution process which can be resource consuming.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/381763676/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/382077385",
    "html_url": "https://github.com/ethereum/EIPs/issues/792#issuecomment-382077385",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/792",
    "id": 382077385,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4MjA3NzM4NQ==",
    "user": {
      "login": "mbeylin",
      "id": 6082639,
      "node_id": "MDQ6VXNlcjYwODI2Mzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6082639?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mbeylin",
      "html_url": "https://github.com/mbeylin",
      "followers_url": "https://api.github.com/users/mbeylin/followers",
      "following_url": "https://api.github.com/users/mbeylin/following{/other_user}",
      "gists_url": "https://api.github.com/users/mbeylin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mbeylin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mbeylin/subscriptions",
      "organizations_url": "https://api.github.com/users/mbeylin/orgs",
      "repos_url": "https://api.github.com/users/mbeylin/repos",
      "events_url": "https://api.github.com/users/mbeylin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mbeylin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-17T17:32:32Z",
    "updated_at": "2018-04-17T17:33:34Z",
    "author_association": "CONTRIBUTOR",
    "body": ">Paying only after ruling would require the Arbitrator contract to vet all Arbitrable to verify that they will pay\r\n\r\nThis is why the arbitrable contracts shouldn't be coupled to the arbitrators, who can choose to rule on claims they desire to (and trust) and ignore ones they don't. \r\n\r\n>The Arbitrable contracts users choose their Arbitrator contract\r\n\r\nWhy do you assume that the arbitrator must be another contract and can't simply be an individual?\r\n\r\n>They would need to verify that the Arbitrable contract is effectively going to pay them after they made a ruling.\r\n\r\nThis is trivially done on the front end by comparing byte code / the master copy which proxies point to. \r\n\r\n>This will trigger a dispute resolution process which can be resource consuming.\r\n\r\nAgain, it only triggers that process if arbiters want it to.\r\n\r\n\r\n**As you can see, a number of design differences are beginning to show themselves, and these are fine. However, trying to declare that one design should be STANDARD without any PROOF would be a terrible decision.**",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/382077385/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/382107779",
    "html_url": "https://github.com/ethereum/EIPs/issues/792#issuecomment-382107779",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/792",
    "id": 382107779,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4MjEwNzc3OQ==",
    "user": {
      "login": "clesaege",
      "id": 8873352,
      "node_id": "MDQ6VXNlcjg4NzMzNTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8873352?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/clesaege",
      "html_url": "https://github.com/clesaege",
      "followers_url": "https://api.github.com/users/clesaege/followers",
      "following_url": "https://api.github.com/users/clesaege/following{/other_user}",
      "gists_url": "https://api.github.com/users/clesaege/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/clesaege/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/clesaege/subscriptions",
      "organizations_url": "https://api.github.com/users/clesaege/orgs",
      "repos_url": "https://api.github.com/users/clesaege/repos",
      "events_url": "https://api.github.com/users/clesaege/events{/privacy}",
      "received_events_url": "https://api.github.com/users/clesaege/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-17T19:09:54Z",
    "updated_at": "2018-04-17T22:26:19Z",
    "author_association": "CONTRIBUTOR",
    "body": "> This is why the arbitrable contracts shouldn't be coupled to the arbitrators, who can choose to rule on claims they desire to (and trust) and ignore ones they don't.\r\n\r\nThat's the precise goal of this standard, providing a standard interface for coupling `Arbitrator` contracts and `Arbitrable` contracts.\r\nBy paying in the `createDispute` and `appeal` the `Arbitrator` can be sure that the arbitration fee is paid before engaging a dispute resolution procedure (in my usecase drawing jurors which will lock some of their tokens, in some other cases, creating a prediction market, in some cases, doing nothing in particular). By potentially consuming resources, it's important that the contract can be assured that it will be paid.\r\nWe had a choice between requiring `Arbitrable` contracts to be vetted or `Arbitrator` one. We choose the `Arbitrator` because:\r\n- `Arbitrable` contract must choose their `Arbitrator` but `Arbitrator` contracts (by being deployed before) don't necessarily need to choose their `Arbitrable`.\r\n- It is reasonably likely that there will be way more `Arbitrable` contract than `Arbitrator` ones.\r\n\r\n----------------\r\n\r\n> Why do you assume that the arbitrator must be another contract and can't simply be an individual?\r\n\r\nAnother individual can be trivially put as a contract (cf: https://github.com/kleros/kleros-interaction/blob/master/contracts/standard/arbitration/CentralizedArbitrator.sol and we can do even better by using only a unique contract for centralized arbitrators which specifies the address of the centralized arbitrator in `_extraData`). While a smart contract based dispute resolution system need to be called for the dispute resolution process to be started.\r\n\r\n----------------\r\n\r\n\r\n> This is trivially done on the front end by comparing byte code / the master copy which proxies point to.\r\n\r\nThey would need a list of all accepted `Arbitrable` contract. Would one not paying be included in the list (by fooling the reviewers), the DDOS would happen.\r\nA front-end control would not be sufficient as when the `Arbitrator` contract is called, actions can be done (locking tokens of jurors, creating markets, etc).\r\n\r\n----------------\r\n\r\n> Again, it only triggers that process if arbiters want it to.\r\n\r\nDispute resolution systems do not necessarily have people acting as watchdogs of what a dispute could be.\r\n\r\n----------------\r\n\r\n\r\n> **As you can see, a number of design differences are beginning to show themselves, and these are fine. However, trying to declare that one design should be STANDARD without any PROOF would be a terrible decision.**\r\n\r\nMark, this is a standard to allow interoperability between `Arbitrator` and `Arbitrable` contract. I think you made it clear you were against standardization and that you see \"design difference\" (even if the only part of your system which would not fit in the standard is the payment in token on which I invite you to also standardize it) while the standard is not about design but interoperability.\r\nWhen we want to let two particular types of components to interact interchangeably which each others, standardization is required.\r\nWithout standardization, interoperability is not possible.\r\nIf you are not interested by standardization of interoperability, which by your previous posts seems to be the case, I don't really know what you are doing in this discussion except being rude (shouting, because that is what the use of capitals means in writing), opposing everything and trying to promote your project (you mentioned your project 4 time while I just mentioned mine along a list of others competitors once). The issue section of ERC is not a place to talk about project specifics and standardization should be project independent.\r\nIf you think you have some constructive input which can be used toward the goal of the ERC and express them in a polite manner feel free to do so. Otherwise I think you can have a better use of your time than trying to prevent people working for interoperability.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/382107779/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/382111336",
    "html_url": "https://github.com/ethereum/EIPs/issues/792#issuecomment-382111336",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/792",
    "id": 382111336,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4MjExMTMzNg==",
    "user": {
      "login": "mbeylin",
      "id": 6082639,
      "node_id": "MDQ6VXNlcjYwODI2Mzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6082639?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mbeylin",
      "html_url": "https://github.com/mbeylin",
      "followers_url": "https://api.github.com/users/mbeylin/followers",
      "following_url": "https://api.github.com/users/mbeylin/following{/other_user}",
      "gists_url": "https://api.github.com/users/mbeylin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mbeylin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mbeylin/subscriptions",
      "organizations_url": "https://api.github.com/users/mbeylin/orgs",
      "repos_url": "https://api.github.com/users/mbeylin/repos",
      "events_url": "https://api.github.com/users/mbeylin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mbeylin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-17T19:22:27Z",
    "updated_at": "2018-04-17T19:24:36Z",
    "author_association": "CONTRIBUTOR",
    "body": ">That's the precise goal of this standard, providing a standard interface for coupling Arbitrator contracts and Arbitrable contracts.\r\n\r\nThen this should not be promoted as an \"arbitration standard\", when it only covers specific cases of arbitration.\r\n\r\n>I think you made it clear you were against standardization and that you see \"design difference\" (even if the only part of your system which would not fit in the standard is the payment in token on which I invite you to also standardize it) while the standard is not about design but interoperability.\r\n\r\nI am absolutely not against standardization, I have spent the last year pushing for standardization among bounty implementations on Ethereum, which is why I can tell you first hand that standards should evolve and not be enforced in a heavy handed manner. I resent any implication that my hesitation here is because I don't want a standard to exist, since my goal is very much the opposite. But standards must be administered in a prudent manner.\r\n\r\n>When we want to let two particular types components to interact interchangeably which each others, standardization is required.\r\n\r\nThis is true, but a standard for arbitration doesn't need to know anything about who is adjudicating the claims (similarly to how the ERC20 contract doesn't know anything about which contract or individual is transacting with tokens).\r\n\r\nIf you would like to have a standard for Arbitrable contracts, then it should not be coupled to any Arbiter contract. A second standard for Arbiters may be developed independently, and the Arbiters can make sure they are compatible with the Arbitrable contract, but there's no reason for the bidirectional coupling.\r\n\r\n>Without standardization, interoperability is not possible.\r\n\r\nThis is only half true, it's entirely possible to pursue interoperability in the short term by working with select groups on connecting Kleros to their dispute resolution needs (and competitors can do so similarly, either following the same interface or a different one). Then, once we have a better understanding of user needs, we can develop a standard. **Trying to develop a standard for your product before you have any users is opposite to every product development best practise that exists in the world, and entirely ignores the needs of your future users as they arise.**\r\n\r\n>If you think you have some constructive input which can be used toward the goal of the ERC and express them in a polite manner feel free to do so. \r\n\r\nI have tried repeatedly to explain to you why the standard you are developing differs from the way we have built and architected arbitrable contracts (stakes). \r\n\r\n>Otherwise I think you can have a better use of your time than trying to prevent people working for interoperability to do.\r\n\r\nI am not intending to prevent you from rushing into interoperability, I am attempting to prevent an ERC from being formally proposed which not only doesn't agree with other implementations for Arbitration on Ethereum, but is based on no user data about what actual needs will be when launched into production. As I said above, interoperability can be pursued with partners without proposing an ERC; we've done this fruitfully with standard bounties for **over a year**, and as it turns out, **our initial implementation was not complete, and as we gained users, we learned why it was lacking**. If we had proposed a standard from the outset, there would be significant complexity from having to support multiple versions simultaneously (and in perpetuity). \r\n\r\n\r\nAs I stated from the outset, we have significant differences in our implementations, and either one of us calling our ideas for Arbitration \"complete\" would be foolish. I wish you the best of luck with exploring an architecture of tight coupling between arbitrable and arbiter contracts, while we desire to decouple these components as much as possible. Neither of us has hard evidence about why our design pattern is best, so we should **wait and collect that evidence** before pushing an ERC forward.\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/382111336/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/382113578",
    "html_url": "https://github.com/ethereum/EIPs/issues/792#issuecomment-382113578",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/792",
    "id": 382113578,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4MjExMzU3OA==",
    "user": {
      "login": "mbeylin",
      "id": 6082639,
      "node_id": "MDQ6VXNlcjYwODI2Mzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6082639?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mbeylin",
      "html_url": "https://github.com/mbeylin",
      "followers_url": "https://api.github.com/users/mbeylin/followers",
      "following_url": "https://api.github.com/users/mbeylin/following{/other_user}",
      "gists_url": "https://api.github.com/users/mbeylin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mbeylin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mbeylin/subscriptions",
      "organizations_url": "https://api.github.com/users/mbeylin/orgs",
      "repos_url": "https://api.github.com/users/mbeylin/repos",
      "events_url": "https://api.github.com/users/mbeylin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mbeylin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-17T19:30:22Z",
    "updated_at": "2018-04-17T19:41:47Z",
    "author_association": "CONTRIBUTOR",
    "body": "And for the record, my mention of \"my product 4 times\" in no way is meant to promote it (who am I promoting it to? other developers who browse EIPs? Those are unlikely going to make up the bulk of an arbitration user base). \r\n\r\nI mentioned our product because we have implemented a version of Arbitration that differs very strongly from yours. Not only does your design require high coupling between projects (dApp smart contracts) and arbitrators, it assumes that one single interface for arbitration can be used in all cases where dispute resolution is required.\r\n\r\nI apologize that my comments to you seem rude, I've tried to express my disagreement with your view on multiple occasions, and instead of attempting to understand my point of view, you ignore it. We spent 45 minutes on a call during which you repeatedly tried to explain to me about the importance of an \"appeals\" process, instead of looking at our design differences from a broader perspective. I really don't intend to stunt your growth or hinder your efforts towards interoperability, but there are real-life, long term consequences of building and pushing EIPs forward. For a component as critical to trust transactions as arbitration, we should *make sure we get it right*.\r\n\r\nAlso for the record, my use of bold text and upper case letters is meant to serve to emphasize certain points, not to \"shout\" at you.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/382113578/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/382126348",
    "html_url": "https://github.com/ethereum/EIPs/issues/792#issuecomment-382126348",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/792",
    "id": 382126348,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4MjEyNjM0OA==",
    "user": {
      "login": "clesaege",
      "id": 8873352,
      "node_id": "MDQ6VXNlcjg4NzMzNTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8873352?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/clesaege",
      "html_url": "https://github.com/clesaege",
      "followers_url": "https://api.github.com/users/clesaege/followers",
      "following_url": "https://api.github.com/users/clesaege/following{/other_user}",
      "gists_url": "https://api.github.com/users/clesaege/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/clesaege/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/clesaege/subscriptions",
      "organizations_url": "https://api.github.com/users/clesaege/orgs",
      "repos_url": "https://api.github.com/users/clesaege/repos",
      "events_url": "https://api.github.com/users/clesaege/events{/privacy}",
      "received_events_url": "https://api.github.com/users/clesaege/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-17T20:11:38Z",
    "updated_at": "2018-04-17T20:11:38Z",
    "author_association": "CONTRIBUTOR",
    "body": "> We spent 45 minutes on a call during which you repeatedly tried to explain to me about the importance of an \"appeals\" process, instead of looking at our design differences from a broader perspective. \r\n\r\nMark, since you are misreporting our interactions, I would not interact with you anymore. The issue section of an ERC is not a place for personal attacks. Your point of view has been understood. Good luck on your ventures. Further off topic comments will be reported to an EIP editor.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/382126348/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/382128508",
    "html_url": "https://github.com/ethereum/EIPs/issues/792#issuecomment-382128508",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/792",
    "id": 382128508,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4MjEyODUwOA==",
    "user": {
      "login": "mbeylin",
      "id": 6082639,
      "node_id": "MDQ6VXNlcjYwODI2Mzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6082639?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mbeylin",
      "html_url": "https://github.com/mbeylin",
      "followers_url": "https://api.github.com/users/mbeylin/followers",
      "following_url": "https://api.github.com/users/mbeylin/following{/other_user}",
      "gists_url": "https://api.github.com/users/mbeylin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mbeylin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mbeylin/subscriptions",
      "organizations_url": "https://api.github.com/users/mbeylin/orgs",
      "repos_url": "https://api.github.com/users/mbeylin/repos",
      "events_url": "https://api.github.com/users/mbeylin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mbeylin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-17T20:19:17Z",
    "updated_at": "2018-04-17T20:26:54Z",
    "author_association": "CONTRIBUTOR",
    "body": ">The issue section of an ERC is not a place for personal attacks.\r\n\r\nWas your above comment not littered with personal attacks on my character? \r\n\r\nIf you decide you are interested in actually **collaborating** on a standard for Arbitration on Ethereum (and not simply formalizing your teams approach into a standard that others must conform to), I would be happy to help.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/382128508/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/397455785",
    "html_url": "https://github.com/ethereum/EIPs/issues/792#issuecomment-397455785",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/792",
    "id": 397455785,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5NzQ1NTc4NQ==",
    "user": {
      "login": "stefek99",
      "id": 249703,
      "node_id": "MDQ6VXNlcjI0OTcwMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/249703?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/stefek99",
      "html_url": "https://github.com/stefek99",
      "followers_url": "https://api.github.com/users/stefek99/followers",
      "following_url": "https://api.github.com/users/stefek99/following{/other_user}",
      "gists_url": "https://api.github.com/users/stefek99/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/stefek99/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/stefek99/subscriptions",
      "organizations_url": "https://api.github.com/users/stefek99/orgs",
      "repos_url": "https://api.github.com/users/stefek99/repos",
      "events_url": "https://api.github.com/users/stefek99/events{/privacy}",
      "received_events_url": "https://api.github.com/users/stefek99/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-06-14T22:20:02Z",
    "updated_at": "2018-06-14T22:20:02Z",
    "author_association": "NONE",
    "body": "Two strong opinions, we need an arbitration standard for that...\r\n\r\n# ü§£\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/397455785/reactions",
      "total_count": 8,
      "+1": 1,
      "-1": 0,
      "laugh": 7,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/397848227",
    "html_url": "https://github.com/ethereum/EIPs/issues/792#issuecomment-397848227",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/792",
    "id": 397848227,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5Nzg0ODIyNw==",
    "user": {
      "login": "clesaege",
      "id": 8873352,
      "node_id": "MDQ6VXNlcjg4NzMzNTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8873352?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/clesaege",
      "html_url": "https://github.com/clesaege",
      "followers_url": "https://api.github.com/users/clesaege/followers",
      "following_url": "https://api.github.com/users/clesaege/following{/other_user}",
      "gists_url": "https://api.github.com/users/clesaege/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/clesaege/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/clesaege/subscriptions",
      "organizations_url": "https://api.github.com/users/clesaege/orgs",
      "repos_url": "https://api.github.com/users/clesaege/repos",
      "events_url": "https://api.github.com/users/clesaege/events{/privacy}",
      "received_events_url": "https://api.github.com/users/clesaege/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-06-17T01:22:03Z",
    "updated_at": "2018-06-17T18:09:26Z",
    "author_association": "CONTRIBUTOR",
    "body": "By the way, for those who want to participate in the initial discussions and write-up of the evidence standard feel free to list your usecases and comments there:\r\nhttps://docs.google.com/document/d/1QaCSTZoTjd63q7pt4wne6Mj62p8Ru8xOrxYE5Skyd3c/edit?usp=sharing",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/397848227/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/399267379",
    "html_url": "https://github.com/ethereum/EIPs/issues/792#issuecomment-399267379",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/792",
    "id": 399267379,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5OTI2NzM3OQ==",
    "user": {
      "login": "clesaege",
      "id": 8873352,
      "node_id": "MDQ6VXNlcjg4NzMzNTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8873352?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/clesaege",
      "html_url": "https://github.com/clesaege",
      "followers_url": "https://api.github.com/users/clesaege/followers",
      "following_url": "https://api.github.com/users/clesaege/following{/other_user}",
      "gists_url": "https://api.github.com/users/clesaege/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/clesaege/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/clesaege/subscriptions",
      "organizations_url": "https://api.github.com/users/clesaege/orgs",
      "repos_url": "https://api.github.com/users/clesaege/repos",
      "events_url": "https://api.github.com/users/clesaege/events{/privacy}",
      "received_events_url": "https://api.github.com/users/clesaege/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-06-21T22:49:47Z",
    "updated_at": "2018-06-23T23:05:38Z",
    "author_association": "CONTRIBUTOR",
    "body": "While speaking with developers of origin @wanderingstan , came the proposal to extend this standard to allow payments to be made in token.\r\nIt would involve adding a function to return which token is accepted (or 0x0 is the `Arbitrator` accept ETH) by an arbitrator and the possibility of `Arbitrator` contracts to use `transferFrom` in `createDispute` and `appeal` instead of checking the amount of wei sent.\r\n\r\nIn case the `Arbitrable` contract and the `Arbitrator` one do not want to deal with the same kind of tokens, an Arbitrator Currency Middleware could be used to make on the fly conversion.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/399267379/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/399459484",
    "html_url": "https://github.com/ethereum/EIPs/issues/792#issuecomment-399459484",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/792",
    "id": 399459484,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5OTQ1OTQ4NA==",
    "user": {
      "login": "mbeylin",
      "id": 6082639,
      "node_id": "MDQ6VXNlcjYwODI2Mzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6082639?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mbeylin",
      "html_url": "https://github.com/mbeylin",
      "followers_url": "https://api.github.com/users/mbeylin/followers",
      "following_url": "https://api.github.com/users/mbeylin/following{/other_user}",
      "gists_url": "https://api.github.com/users/mbeylin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mbeylin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mbeylin/subscriptions",
      "organizations_url": "https://api.github.com/users/mbeylin/orgs",
      "repos_url": "https://api.github.com/users/mbeylin/repos",
      "events_url": "https://api.github.com/users/mbeylin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mbeylin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-06-22T14:22:41Z",
    "updated_at": "2018-06-22T14:22:41Z",
    "author_association": "CONTRIBUTOR",
    "body": "@clesaege now that some time has passed, I want to enquire again whether you'd be interested in generalizing this EIP/ breaking it up into two separate EIPs: one for arbitrable contracts and one for arbitrator contracts, whereby the arbitrable contracts never make calls to the arbitrator contract (only storing the arbitrator to validate when they make decisions). This would allow both of our approaches to potentially rely on the same standard (with some overlap), rather than pursuing these different approaches entirely independently. ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/399459484/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/399470549",
    "html_url": "https://github.com/ethereum/EIPs/issues/792#issuecomment-399470549",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/792",
    "id": 399470549,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5OTQ3MDU0OQ==",
    "user": {
      "login": "clesaege",
      "id": 8873352,
      "node_id": "MDQ6VXNlcjg4NzMzNTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8873352?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/clesaege",
      "html_url": "https://github.com/clesaege",
      "followers_url": "https://api.github.com/users/clesaege/followers",
      "following_url": "https://api.github.com/users/clesaege/following{/other_user}",
      "gists_url": "https://api.github.com/users/clesaege/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/clesaege/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/clesaege/subscriptions",
      "organizations_url": "https://api.github.com/users/clesaege/orgs",
      "repos_url": "https://api.github.com/users/clesaege/repos",
      "events_url": "https://api.github.com/users/clesaege/events{/privacy}",
      "received_events_url": "https://api.github.com/users/clesaege/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-06-22T14:55:11Z",
    "updated_at": "2018-06-22T14:55:11Z",
    "author_association": "CONTRIBUTOR",
    "body": "@mbeylin I stated in the previous posts, what you do can perfectly be done with this standard and there is no different approaches, your approach is included in this standard (except the payment in tokens that my previous post proposed to add). \r\n\r\nWe can however discuss about moving the `createDispute` and `appeal` to the level of the `Arbitrable` contract.\r\n\r\nThe advantage of this proposal I see are:\r\n- `Arbitrator` contracts get the freedom to choose who pay the fees.\r\n- A external account can serve as an arbitrator.\r\n\r\nThe disadvantage:\r\n- `Arbitrator` contracts would need to know the parties in the dispute who have the right to create a dispute and appeal. This seems quite complicated in practice as the parties may not be known in advance.  And the only way I would see this if everyone were able to create a dispute. But then, there would be competing disputes and the  `Arbitrable` would follow the first to resolve.\r\n- It would require an interaction with the `Arbitrator` contract all the time, even there is no dispute.\r\n- Interaction complexity and quantity would increase, the parties in the dispute would need to interact with the `Arbitrator` contract in addition to the `Arbitrable` ones. For example in a simple payment dispute, they would need to create a dispute in the `Arbitrable` contract (to make sure that the payment is delayed up to the result of the arbitrators) and in the `Arbitrator` one this lead to more gas spending and higher code complexity (thus risk of bugs).\r\n- `Arbitrable` contracts would loose the freedom to determine the fees.\r\n\r\nOverall, this proposal seem to fit only the case where an external account is the arbitrator but not the cases where the arbitrator is a more complex smart contract.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/399470549/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
