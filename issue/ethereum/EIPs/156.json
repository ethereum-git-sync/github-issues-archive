{
  "url": "https://api.github.com/repos/ethereum/EIPs/issues/156",
  "repository_url": "https://api.github.com/repos/ethereum/EIPs",
  "labels_url": "https://api.github.com/repos/ethereum/EIPs/issues/156/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/EIPs/issues/156/comments",
  "events_url": "https://api.github.com/repos/ethereum/EIPs/issues/156/events",
  "html_url": "https://github.com/ethereum/EIPs/issues/156",
  "id": 183007625,
  "node_id": "MDU6SXNzdWUxODMwMDc2MjU=",
  "number": 156,
  "title": "Reclaiming of ether in common classes of stuck accounts",
  "user": {
    "login": "vbuterin",
    "id": 2230894,
    "node_id": "MDQ6VXNlcjIyMzA4OTQ=",
    "avatar_url": "https://avatars.githubusercontent.com/u/2230894?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vbuterin",
    "html_url": "https://github.com/vbuterin",
    "followers_url": "https://api.github.com/users/vbuterin/followers",
    "following_url": "https://api.github.com/users/vbuterin/following{/other_user}",
    "gists_url": "https://api.github.com/users/vbuterin/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vbuterin/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vbuterin/subscriptions",
    "organizations_url": "https://api.github.com/users/vbuterin/orgs",
    "repos_url": "https://api.github.com/users/vbuterin/repos",
    "events_url": "https://api.github.com/users/vbuterin/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vbuterin/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 2328627851,
      "node_id": "MDU6TGFiZWwyMzI4NjI3ODUx",
      "url": "https://api.github.com/repos/ethereum/EIPs/labels/stale",
      "name": "stale",
      "color": "000000",
      "default": false,
      "description": ""
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 121,
  "created_at": "2016-10-14T09:46:46Z",
  "updated_at": "2022-02-15T15:01:21Z",
  "closed_at": "2022-01-24T01:59:25Z",
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "### Specification (v1)\r\n\r\nThe below is only usable between blocks `FORK_BLKNUM` and `FORK_BLKNUM + EFFECTIVE_DURATION` (both TBA).\r\n\r\nIf the `v` value of a signature is (strictly) greater than 1024, then calculate the sender as follows:\r\n1. Let `s` be the sender computed according to the normal algorithm, using 27 as the `v` value if the provided `v` is odd, and 28 if the provided `v` is even.\r\n2. Let the actual sender be the address that a contract would be created at if its sender is `s` and the contract creation nonce is `floor((v - 1025) / 2)`.\r\n\r\nTransactions with `v` values strictly greater than 1024 are only valid if the sender account is nonexistent or its code is empty.\r\n\r\nIf the `v` value of a signature is 1023 or 1024, then calculate the sender as follows:\r\n1. Let `P` be the **public key** computed according to the normal algorithm, in the 64-byte packed form that is normally hashed to determine the sender address, using 27 as the `v` value if the provided `v` is odd, and 28 if the provided `v` is even.\r\n2. Let the actual sender be the last 20 bytes of the sha3 of the lowercase non-prefixed hex encoded form of `P` instead of the binary raw `P` itself.\r\n\r\n### Specification (v2)\r\n\r\nCreate a solidity contract with the following functions:\r\n\r\n* `declareEmptyContract(index)`: computes `rlp.encode([msg.sender, index])`; if there is a contract at this address with ether and no code, then the contract saves a record that this contract has been checked, and sends an equal amount of \"future ether\" (an ERC20 token) at that account.\r\n* `declareLowercaseHexAddress(pubkey)`: checks `sha3(pubkey) % 2**160 == msg.sender`; then checks that `sha3(pubkey.encode('hex')) % 2**160` has ether; if it does, then the contract saves a record that this contract has been checked, and sends an equal amount of \"future ether\" (an ERC20 token) at that account\r\n* `withdraw()`: deletes the `msg.sender`'s future ether, and sends it an equivalent amount of ether.\r\n\r\nThe hard fork would increase the future ether contract's balance by an amount equal to the total quantity of extant future ether.\r\n\r\n### Specification (v3)\r\n\r\nFollow v2, but distribute the future ether on a Casper testnet. Then, later have a single step that converts both Casper ether and ethereum 1.0 ether into ether as part of the Serenity hardfork.\r\n\r\n### Rationale\r\n\r\nThis allows for users with ether or other assets in common classes of \"stuck\" accounts to withdraw their assets. The first case covers contracts that are accidentally created with no code, as well as some losses due to replay attacks where a contract was created on ETC, funds sent on ETH but the contract not created on ETH; the second case covers losses due to an old ethereum javascript library that incorrectly computed ethereum addresses. Note that in all cases, the \"rightful owner\" of the assets is obvious and mathematically provable, and no user is being deprived of any assets, and this proposal provides no explicit favor to any single account, user or application.\r\n\r\nIt is understood that there may be a risk that this proposal will be viewed controversially as it is in some sense a \"rescue\" rather than a \"technical improvement\", even though it is arguably much less intrusive than previous such proposals for the reasons outlined above; the proposal is created in order to allow community discussion and debate and does not signify full endorsement.\r\n",
  "closed_by": {
    "login": "github-actions[bot]",
    "id": 41898282,
    "node_id": "MDM6Qm90NDE4OTgyODI=",
    "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/github-actions%5Bbot%5D",
    "html_url": "https://github.com/apps/github-actions",
    "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
    "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
    "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
    "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
    "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
    "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
    "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
    "type": "Bot",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/156/reactions",
    "total_count": 87,
    "+1": 65,
    "-1": 5,
    "laugh": 4,
    "hooray": 7,
    "confused": 0,
    "heart": 6,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/EIPs/issues/156/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/254027488",
    "html_url": "https://github.com/ethereum/EIPs/issues/156#issuecomment-254027488",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/156",
    "id": 254027488,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1NDAyNzQ4OA==",
    "user": {
      "login": "jespow",
      "id": 1042860,
      "node_id": "MDQ6VXNlcjEwNDI4NjA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1042860?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jespow",
      "html_url": "https://github.com/jespow",
      "followers_url": "https://api.github.com/users/jespow/followers",
      "following_url": "https://api.github.com/users/jespow/following{/other_user}",
      "gists_url": "https://api.github.com/users/jespow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jespow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jespow/subscriptions",
      "organizations_url": "https://api.github.com/users/jespow/orgs",
      "repos_url": "https://api.github.com/users/jespow/repos",
      "events_url": "https://api.github.com/users/jespow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jespow/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-10-16T04:51:11Z",
    "updated_at": "2016-10-16T04:51:11Z",
    "author_association": "NONE",
    "body": "Speaking on behalf of Kraken, I would characterize this more as recompense than rescue.  We did take on some not insignificant losses as a result of the mentioned bug in the old Ethereum javascript library.  At the time, losses were covered out of Kraken's pocket to protect our clients.  We would greatly appreciate the ability to recover the funds tied up in the incorrectly computed addresses.  Thank you for this proposal.\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/254027488/reactions",
      "total_count": 29,
      "+1": 20,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 9,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/254035384",
    "html_url": "https://github.com/ethereum/EIPs/issues/156#issuecomment-254035384",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/156",
    "id": 254035384,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1NDAzNTM4NA==",
    "user": {
      "login": "trapp",
      "id": 559823,
      "node_id": "MDQ6VXNlcjU1OTgyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/559823?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/trapp",
      "html_url": "https://github.com/trapp",
      "followers_url": "https://api.github.com/users/trapp/followers",
      "following_url": "https://api.github.com/users/trapp/following{/other_user}",
      "gists_url": "https://api.github.com/users/trapp/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/trapp/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/trapp/subscriptions",
      "organizations_url": "https://api.github.com/users/trapp/orgs",
      "repos_url": "https://api.github.com/users/trapp/repos",
      "events_url": "https://api.github.com/users/trapp/events{/privacy}",
      "received_events_url": "https://api.github.com/users/trapp/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-10-16T08:55:58Z",
    "updated_at": "2016-10-16T08:55:58Z",
    "author_association": "NONE",
    "body": "Here are some reports of affected users and implementations:\n- https://www.reddit.com/r/ethereum/comments/48rt6n/using_myetherwalletcom_just_burned_me_for/\n- https://www.reddit.com/r/ethereum/comments/47nkoi/psa_check_your_ethaddressorg_wallets_and_any/\n- https://www.reddit.com/r/ethereum/comments/3vfaob/bug_in_ethereumjsutil/\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/254035384/reactions",
      "total_count": 5,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 2,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/254078877",
    "html_url": "https://github.com/ethereum/EIPs/issues/156#issuecomment-254078877",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/156",
    "id": 254078877,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1NDA3ODg3Nw==",
    "user": {
      "login": "Smithgift",
      "id": 10504499,
      "node_id": "MDQ6VXNlcjEwNTA0NDk5",
      "avatar_url": "https://avatars.githubusercontent.com/u/10504499?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Smithgift",
      "html_url": "https://github.com/Smithgift",
      "followers_url": "https://api.github.com/users/Smithgift/followers",
      "following_url": "https://api.github.com/users/Smithgift/following{/other_user}",
      "gists_url": "https://api.github.com/users/Smithgift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Smithgift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Smithgift/subscriptions",
      "organizations_url": "https://api.github.com/users/Smithgift/orgs",
      "repos_url": "https://api.github.com/users/Smithgift/repos",
      "events_url": "https://api.github.com/users/Smithgift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Smithgift/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-10-16T22:11:58Z",
    "updated_at": "2016-10-16T22:11:58Z",
    "author_association": "NONE",
    "body": "Back when the DAO hardfork was debated, this category was brought up as a thing too difficult to fix therefore (INSERT CONCLUSION HERE). I'm glad we're considering fixing it now.\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/254078877/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/264679596",
    "html_url": "https://github.com/ethereum/EIPs/issues/156#issuecomment-264679596",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/156",
    "id": 264679596,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI2NDY3OTU5Ng==",
    "user": {
      "login": "cdetrio",
      "id": 997681,
      "node_id": "MDQ6VXNlcjk5NzY4MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/997681?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cdetrio",
      "html_url": "https://github.com/cdetrio",
      "followers_url": "https://api.github.com/users/cdetrio/followers",
      "following_url": "https://api.github.com/users/cdetrio/following{/other_user}",
      "gists_url": "https://api.github.com/users/cdetrio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cdetrio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cdetrio/subscriptions",
      "organizations_url": "https://api.github.com/users/cdetrio/orgs",
      "repos_url": "https://api.github.com/users/cdetrio/repos",
      "events_url": "https://api.github.com/users/cdetrio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cdetrio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-12-04T02:17:10Z",
    "updated_at": "2016-12-04T02:17:10Z",
    "author_association": "MEMBER",
    "body": "@jespow @trapp If this spec were to be adopted so that Kraken's losses could be recompensed, would Kraken be willing to in turn cover the losses of users affected by the [not safe enough](https://medium.com/@chevdor/safer-version-of-the-replaysafesplit-smart-contract-a29c347e8a7#.wg1hv4kwg) [ReplaySafeSplit](https://medium.com/@timonrapp/how-to-deal-with-the-ethereum-replay-attack-3fd44074a6d8#.gt6ncetp9) contract?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/264679596/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/264691535",
    "html_url": "https://github.com/ethereum/EIPs/issues/156#issuecomment-264691535",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/156",
    "id": 264691535,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI2NDY5MTUzNQ==",
    "user": {
      "login": "trapp",
      "id": 559823,
      "node_id": "MDQ6VXNlcjU1OTgyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/559823?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/trapp",
      "html_url": "https://github.com/trapp",
      "followers_url": "https://api.github.com/users/trapp/followers",
      "following_url": "https://api.github.com/users/trapp/following{/other_user}",
      "gists_url": "https://api.github.com/users/trapp/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/trapp/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/trapp/subscriptions",
      "organizations_url": "https://api.github.com/users/trapp/orgs",
      "repos_url": "https://api.github.com/users/trapp/repos",
      "events_url": "https://api.github.com/users/trapp/events{/privacy}",
      "received_events_url": "https://api.github.com/users/trapp/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-12-04T08:41:32Z",
    "updated_at": "2016-12-04T08:42:08Z",
    "author_association": "NONE",
    "body": "@cdetrio I don't think we can compare the two issues with each other.\r\n\r\na.) The ethereumjs-lib did have a bug and did not work as intended.\r\nb.) ReplaySafeSplit does not have a bug, it works according to the interface. It has two mandatory address parameters, you have to specify both when calling the contract. You cannot omit one. \r\n\r\nWhen you specify 0x0 as target address then that is a user input error. When your GUI defaults to 0x0 when you leave one of the two empty, then that's an issue with the GUI. I'm not aware of any GUI that actually does this but see a similar issue in Mist: https://github.com/ethereum/mist/issues/1128\r\n\r\nThe \"fixed\" version has an additional check for 0x0 as target address which helps with this specific case but still allows other nonsense addresses like 0x1, 0x2 etc. You cannot fix an issue like that on the contract level, the best place is the GUI (like address checksums).\r\n\r\nc.) I also think it's offtopic here since the ReplaySafeSplit contract was not created or published by Kraken. The bug in this thread does not only affect Kraken, I would even say that the MyEtherWallet users lost a more due this bug compared to Kraken. Kraken just came forward in support for this initiative. ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/264691535/reactions",
      "total_count": 4,
      "+1": 4,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/276682992",
    "html_url": "https://github.com/ethereum/EIPs/issues/156#issuecomment-276682992",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/156",
    "id": 276682992,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3NjY4Mjk5Mg==",
    "user": {
      "login": "neeeeeeext",
      "id": 18301189,
      "node_id": "MDQ6VXNlcjE4MzAxMTg5",
      "avatar_url": "https://avatars.githubusercontent.com/u/18301189?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/neeeeeeext",
      "html_url": "https://github.com/neeeeeeext",
      "followers_url": "https://api.github.com/users/neeeeeeext/followers",
      "following_url": "https://api.github.com/users/neeeeeeext/following{/other_user}",
      "gists_url": "https://api.github.com/users/neeeeeeext/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/neeeeeeext/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/neeeeeeext/subscriptions",
      "organizations_url": "https://api.github.com/users/neeeeeeext/orgs",
      "repos_url": "https://api.github.com/users/neeeeeeext/repos",
      "events_url": "https://api.github.com/users/neeeeeeext/events{/privacy}",
      "received_events_url": "https://api.github.com/users/neeeeeeext/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-02-01T15:13:45Z",
    "updated_at": "2017-02-01T15:13:45Z",
    "author_association": "NONE",
    "body": "Another thread related to this EIP:\r\nhttps://www.reddit.com/r/ethereum/comments/5rd4co/ethereum_wallet_sends_to/\r\n\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/276682992/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/287717998",
    "html_url": "https://github.com/ethereum/EIPs/issues/156#issuecomment-287717998",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/156",
    "id": 287717998,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4NzcxNzk5OA==",
    "user": {
      "login": "GriffGreen",
      "id": 14945613,
      "node_id": "MDQ6VXNlcjE0OTQ1NjEz",
      "avatar_url": "https://avatars.githubusercontent.com/u/14945613?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/GriffGreen",
      "html_url": "https://github.com/GriffGreen",
      "followers_url": "https://api.github.com/users/GriffGreen/followers",
      "following_url": "https://api.github.com/users/GriffGreen/following{/other_user}",
      "gists_url": "https://api.github.com/users/GriffGreen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/GriffGreen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/GriffGreen/subscriptions",
      "organizations_url": "https://api.github.com/users/GriffGreen/orgs",
      "repos_url": "https://api.github.com/users/GriffGreen/repos",
      "events_url": "https://api.github.com/users/GriffGreen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/GriffGreen/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-20T10:07:47Z",
    "updated_at": "2017-03-20T10:07:47Z",
    "author_association": "NONE",
    "body": "Maybe I'm missing it in the complexity... but if someone generates an account offline, for let's say a paper wallet, and then sends to it but claims it was an accident. What is to stop that person from doubling their ether if this EIP is implemented? ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/287717998/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/287726194",
    "html_url": "https://github.com/ethereum/EIPs/issues/156#issuecomment-287726194",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/156",
    "id": 287726194,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4NzcyNjE5NA==",
    "user": {
      "login": "GriffGreen",
      "id": 14945613,
      "node_id": "MDQ6VXNlcjE0OTQ1NjEz",
      "avatar_url": "https://avatars.githubusercontent.com/u/14945613?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/GriffGreen",
      "html_url": "https://github.com/GriffGreen",
      "followers_url": "https://api.github.com/users/GriffGreen/followers",
      "following_url": "https://api.github.com/users/GriffGreen/following{/other_user}",
      "gists_url": "https://api.github.com/users/GriffGreen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/GriffGreen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/GriffGreen/subscriptions",
      "organizations_url": "https://api.github.com/users/GriffGreen/orgs",
      "repos_url": "https://api.github.com/users/GriffGreen/repos",
      "events_url": "https://api.github.com/users/GriffGreen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/GriffGreen/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-20T10:47:06Z",
    "updated_at": "2017-03-20T10:47:06Z",
    "author_association": "NONE",
    "body": "@LefterisJP and @jbaylina figured it out for me!\r\n\r\nhttp://ethereum.stackexchange.com/questions/760/how-is-the-address-of-an-ethereum-contract-computed#761\r\n\r\nThe contract address is deterministically computed from the address that created it :-), so the paper wallet trick wouldn't work.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/287726194/reactions",
      "total_count": 5,
      "+1": 5,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/306312542",
    "html_url": "https://github.com/ethereum/EIPs/issues/156#issuecomment-306312542",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/156",
    "id": 306312542,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwNjMxMjU0Mg==",
    "user": {
      "login": "axelay",
      "id": 774963,
      "node_id": "MDQ6VXNlcjc3NDk2Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/774963?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/axelay",
      "html_url": "https://github.com/axelay",
      "followers_url": "https://api.github.com/users/axelay/followers",
      "following_url": "https://api.github.com/users/axelay/following{/other_user}",
      "gists_url": "https://api.github.com/users/axelay/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/axelay/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/axelay/subscriptions",
      "organizations_url": "https://api.github.com/users/axelay/orgs",
      "repos_url": "https://api.github.com/users/axelay/repos",
      "events_url": "https://api.github.com/users/axelay/events{/privacy}",
      "received_events_url": "https://api.github.com/users/axelay/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-06-05T21:16:03Z",
    "updated_at": "2017-06-05T21:16:03Z",
    "author_association": "NONE",
    "body": "Posting on behalf of QuadrigaCX, we would like to see an amendment to this proposal in order to reclaim trapped Ether on contracts that have no ability to send.\r\n\r\nNot only to rescue some past mistakes but also thinking about providing a safety net for the future. Even though progresses have been made in Solidity to ensure return of the funds, there could still be a chance of Ether becoming trapped.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/306312542/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/306432594",
    "html_url": "https://github.com/ethereum/EIPs/issues/156#issuecomment-306432594",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/156",
    "id": 306432594,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwNjQzMjU5NA==",
    "user": {
      "login": "Souptacular",
      "id": 3460120,
      "node_id": "MDQ6VXNlcjM0NjAxMjA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3460120?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Souptacular",
      "html_url": "https://github.com/Souptacular",
      "followers_url": "https://api.github.com/users/Souptacular/followers",
      "following_url": "https://api.github.com/users/Souptacular/following{/other_user}",
      "gists_url": "https://api.github.com/users/Souptacular/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Souptacular/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Souptacular/subscriptions",
      "organizations_url": "https://api.github.com/users/Souptacular/orgs",
      "repos_url": "https://api.github.com/users/Souptacular/repos",
      "events_url": "https://api.github.com/users/Souptacular/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Souptacular/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-06-06T09:30:56Z",
    "updated_at": "2017-06-06T09:48:04Z",
    "author_association": "MEMBER",
    "body": "Hi @axelay,\r\n\r\n> there could still be a chance of Ether becoming trapped\r\n\r\nWhat are the other ways ether can become trapped? Are you meaning functions that are `payable`, but do not have a means to get the ether out of the function?\r\n\r\n~~Also, please reach out to me at hudson@ethereum.org [PGP 028D 1459 247B 9596 if you prefer] so I can verify that you are representing QuadrigaCX officially. There have recently been people in the community that seem to be speaking for QuadrigaCX, but are not actually employed or represent QuadrigaCX in any way.~~\r\n\r\nEdit: Confirmed that @axelay is representing QuadrigaCX.\r\n\r\nThanks!",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/306432594/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/307015852",
    "html_url": "https://github.com/ethereum/EIPs/issues/156#issuecomment-307015852",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/156",
    "id": 307015852,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwNzAxNTg1Mg==",
    "user": {
      "login": "mjmau",
      "id": 5480068,
      "node_id": "MDQ6VXNlcjU0ODAwNjg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5480068?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mjmau",
      "html_url": "https://github.com/mjmau",
      "followers_url": "https://api.github.com/users/mjmau/followers",
      "following_url": "https://api.github.com/users/mjmau/following{/other_user}",
      "gists_url": "https://api.github.com/users/mjmau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mjmau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mjmau/subscriptions",
      "organizations_url": "https://api.github.com/users/mjmau/orgs",
      "repos_url": "https://api.github.com/users/mjmau/repos",
      "events_url": "https://api.github.com/users/mjmau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mjmau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-06-08T06:54:13Z",
    "updated_at": "2017-08-16T08:02:59Z",
    "author_association": "NONE",
    "body": "I created a tool to scan for the \"ether stuck in empty contract\" case. It finds about 3500 ETH in almost 300 empty contracts. I'm not sure I understand the edge cases and welcome any review.\r\n\r\nhttps://gist.github.com/mjmau/e073091446751b08762c8c65ae13a37d",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/307015852/reactions",
      "total_count": 6,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 5,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/307077886",
    "html_url": "https://github.com/ethereum/EIPs/issues/156#issuecomment-307077886",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/156",
    "id": 307077886,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwNzA3Nzg4Ng==",
    "user": {
      "login": "netpro2k",
      "id": 130735,
      "node_id": "MDQ6VXNlcjEzMDczNQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/130735?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/netpro2k",
      "html_url": "https://github.com/netpro2k",
      "followers_url": "https://api.github.com/users/netpro2k/followers",
      "following_url": "https://api.github.com/users/netpro2k/following{/other_user}",
      "gists_url": "https://api.github.com/users/netpro2k/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/netpro2k/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/netpro2k/subscriptions",
      "organizations_url": "https://api.github.com/users/netpro2k/orgs",
      "repos_url": "https://api.github.com/users/netpro2k/repos",
      "events_url": "https://api.github.com/users/netpro2k/events{/privacy}",
      "received_events_url": "https://api.github.com/users/netpro2k/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-06-08T11:36:29Z",
    "updated_at": "2017-06-13T05:50:08Z",
    "author_association": "NONE",
    "body": "> we would like to see an amendment to this proposal in order to reclaim trapped Ether on contracts that have no ability to send.\r\n\r\nWouldn't this be problematic for contracts that are intentionally \"burning\" ether by locking it up? Sure this could be done in the future in other ways (sending to a dead address) but I would be surprised if there didn't already exist contracts for which this would be an issue.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/307077886/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/307112427",
    "html_url": "https://github.com/ethereum/EIPs/issues/156#issuecomment-307112427",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/156",
    "id": 307112427,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwNzExMjQyNw==",
    "user": {
      "login": "holiman",
      "id": 142290,
      "node_id": "MDQ6VXNlcjE0MjI5MA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/142290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/holiman",
      "html_url": "https://github.com/holiman",
      "followers_url": "https://api.github.com/users/holiman/followers",
      "following_url": "https://api.github.com/users/holiman/following{/other_user}",
      "gists_url": "https://api.github.com/users/holiman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/holiman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/holiman/subscriptions",
      "organizations_url": "https://api.github.com/users/holiman/orgs",
      "repos_url": "https://api.github.com/users/holiman/repos",
      "events_url": "https://api.github.com/users/holiman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/holiman/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-06-08T14:00:33Z",
    "updated_at": "2017-06-08T14:00:33Z",
    "author_association": "MEMBER",
    "body": "> Wouldn't this be problematic for contracts that are intentionally \"burning\" ether by locking it up? Sure this could be done in the future in other ways (sending to a dead address) but I would be surprised if there didn't already exist contracts for which this would be an issue.\r\n\r\nIntentional burns are usually sending to `0x` or some `0xdead` address. Intentionally locking the ether up in a 'dead' contract to which there is actually a key seems very unlikely. ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/307112427/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/307123081",
    "html_url": "https://github.com/ethereum/EIPs/issues/156#issuecomment-307123081",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/156",
    "id": 307123081,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwNzEyMzA4MQ==",
    "user": {
      "login": "Arachnid",
      "id": 17865,
      "node_id": "MDQ6VXNlcjE3ODY1",
      "avatar_url": "https://avatars.githubusercontent.com/u/17865?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Arachnid",
      "html_url": "https://github.com/Arachnid",
      "followers_url": "https://api.github.com/users/Arachnid/followers",
      "following_url": "https://api.github.com/users/Arachnid/following{/other_user}",
      "gists_url": "https://api.github.com/users/Arachnid/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Arachnid/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Arachnid/subscriptions",
      "organizations_url": "https://api.github.com/users/Arachnid/orgs",
      "repos_url": "https://api.github.com/users/Arachnid/repos",
      "events_url": "https://api.github.com/users/Arachnid/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Arachnid/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-06-08T14:36:13Z",
    "updated_at": "2017-06-08T14:36:13Z",
    "author_association": "MEMBER",
    "body": "> Posting on behalf of QuadrigaCX, we would like to see an amendment to this proposal in order to reclaim trapped Ether on contracts that have no ability to send.\r\n\r\nDo you have a technical proposal on how that could be achieved?\r\n\r\nDevising a fair rule for this seems particularly problematic, since QuadrigaCX didn't even deploy the contract in question.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/307123081/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/307129869",
    "html_url": "https://github.com/ethereum/EIPs/issues/156#issuecomment-307129869",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/156",
    "id": 307129869,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwNzEyOTg2OQ==",
    "user": {
      "login": "holiman",
      "id": 142290,
      "node_id": "MDQ6VXNlcjE0MjI5MA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/142290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/holiman",
      "html_url": "https://github.com/holiman",
      "followers_url": "https://api.github.com/users/holiman/followers",
      "following_url": "https://api.github.com/users/holiman/following{/other_user}",
      "gists_url": "https://api.github.com/users/holiman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/holiman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/holiman/subscriptions",
      "organizations_url": "https://api.github.com/users/holiman/orgs",
      "repos_url": "https://api.github.com/users/holiman/repos",
      "events_url": "https://api.github.com/users/holiman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/holiman/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-06-08T14:58:30Z",
    "updated_at": "2017-06-08T14:58:30Z",
    "author_association": "MEMBER",
    "body": "From a technical perspective, I'd like to point out some things. \r\n\r\n- It's technically possible to (on-chain) verify that a contract `c` only ever can send the `CALLVALUE`.\r\n- It's technically possible to (on-chain) verify that such a contract holds balance. \r\n- Thus, it could be determined that the `balance` is trapped. \r\n\r\nNow, the hard part would be whom to ascribe the tokens. Because it's impossible _on-chain_ to see who sent what when and if that got stuck. So the only thing that could be done  would be to let the account who deployed the contract get the credits. \r\n\r\nI don't see how it could be done in any other way, from a technical perspective. ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/307129869/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/309058021",
    "html_url": "https://github.com/ethereum/EIPs/issues/156#issuecomment-309058021",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/156",
    "id": 309058021,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwOTA1ODAyMQ==",
    "user": {
      "login": "winsvega",
      "id": 4492341,
      "node_id": "MDQ6VXNlcjQ0OTIzNDE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4492341?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/winsvega",
      "html_url": "https://github.com/winsvega",
      "followers_url": "https://api.github.com/users/winsvega/followers",
      "following_url": "https://api.github.com/users/winsvega/following{/other_user}",
      "gists_url": "https://api.github.com/users/winsvega/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/winsvega/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/winsvega/subscriptions",
      "organizations_url": "https://api.github.com/users/winsvega/orgs",
      "repos_url": "https://api.github.com/users/winsvega/repos",
      "events_url": "https://api.github.com/users/winsvega/events{/privacy}",
      "received_events_url": "https://api.github.com/users/winsvega/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-06-16T15:32:22Z",
    "updated_at": "2017-06-16T15:33:45Z",
    "author_association": "MEMBER",
    "body": "It looks more like a client's problem not a protocol issue. If you add a way to send ether back that could potentially compromise the whole system and lead to some weird scenarios that we don't see at the moment. \r\n\r\nThe scheme like \r\n`key -> sign transaction -> send     `\r\nis pretty simple.  \r\n\r\nBut the scheme like \r\n`if v> ... and signature is like this then if ...  then make the transaction as if it was if ... `\r\nis not simple and it could break the whole concept IMHO \r\n\r\nThe warnings to the user should be done on a client side in a form like: \r\n\"Are you sure that you want to send this transaction to that contract.  This would result in ...  \"",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/309058021/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/310855722",
    "html_url": "https://github.com/ethereum/EIPs/issues/156#issuecomment-310855722",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/156",
    "id": 310855722,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxMDg1NTcyMg==",
    "user": {
      "login": "FlaxFlax",
      "id": 29679777,
      "node_id": "MDQ6VXNlcjI5Njc5Nzc3",
      "avatar_url": "https://avatars.githubusercontent.com/u/29679777?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/FlaxFlax",
      "html_url": "https://github.com/FlaxFlax",
      "followers_url": "https://api.github.com/users/FlaxFlax/followers",
      "following_url": "https://api.github.com/users/FlaxFlax/following{/other_user}",
      "gists_url": "https://api.github.com/users/FlaxFlax/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/FlaxFlax/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/FlaxFlax/subscriptions",
      "organizations_url": "https://api.github.com/users/FlaxFlax/orgs",
      "repos_url": "https://api.github.com/users/FlaxFlax/repos",
      "events_url": "https://api.github.com/users/FlaxFlax/events{/privacy}",
      "received_events_url": "https://api.github.com/users/FlaxFlax/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-06-24T18:18:42Z",
    "updated_at": "2017-06-24T18:18:42Z",
    "author_association": "NONE",
    "body": "Just want to say that I'm one the the noobs that where lucky enough to sent ether with an empty \"TO\". I know, I know :( \r\n\r\nNow all is stuck in this useless empty contract. I blieve that this will happen again and again. In my case it was a bug but it's quite easy to fall for the believe that it is safe to test send to an empty address as it would fail and bounce the transaction.\r\n\r\nAnyhow, any means to reclaim it would be deeply appreciated!",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/310855722/reactions",
      "total_count": 5,
      "+1": 5,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/313892916",
    "html_url": "https://github.com/ethereum/EIPs/issues/156#issuecomment-313892916",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/156",
    "id": 313892916,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxMzg5MjkxNg==",
    "user": {
      "login": "sardoru",
      "id": 16738794,
      "node_id": "MDQ6VXNlcjE2NzM4Nzk0",
      "avatar_url": "https://avatars.githubusercontent.com/u/16738794?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sardoru",
      "html_url": "https://github.com/sardoru",
      "followers_url": "https://api.github.com/users/sardoru/followers",
      "following_url": "https://api.github.com/users/sardoru/following{/other_user}",
      "gists_url": "https://api.github.com/users/sardoru/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sardoru/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sardoru/subscriptions",
      "organizations_url": "https://api.github.com/users/sardoru/orgs",
      "repos_url": "https://api.github.com/users/sardoru/repos",
      "events_url": "https://api.github.com/users/sardoru/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sardoru/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-07-09T02:13:23Z",
    "updated_at": "2017-07-09T02:13:40Z",
    "author_association": "NONE",
    "body": "Hi All, I share same situation with @FlaxFlax. Accidentally sent to blank To: field... it was 100 Ether .... :( \r\n\r\nTx: https://etherscan.io/tx/0x761215d5ecb2162dc865960a7e4ce9c2189c9bd4a76de6caba80e626b60716ba\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/313892916/reactions",
      "total_count": 5,
      "+1": 5,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/319472432",
    "html_url": "https://github.com/ethereum/EIPs/issues/156#issuecomment-319472432",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/156",
    "id": 319472432,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxOTQ3MjQzMg==",
    "user": {
      "login": "ryancharleston",
      "id": 9041659,
      "node_id": "MDQ6VXNlcjkwNDE2NTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9041659?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryancharleston",
      "html_url": "https://github.com/ryancharleston",
      "followers_url": "https://api.github.com/users/ryancharleston/followers",
      "following_url": "https://api.github.com/users/ryancharleston/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryancharleston/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryancharleston/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryancharleston/subscriptions",
      "organizations_url": "https://api.github.com/users/ryancharleston/orgs",
      "repos_url": "https://api.github.com/users/ryancharleston/repos",
      "events_url": "https://api.github.com/users/ryancharleston/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryancharleston/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-08-01T19:30:14Z",
    "updated_at": "2017-08-01T19:30:14Z",
    "author_association": "NONE",
    "body": "If/when this feature gets implemented into Ethereum, could it be made to apply to all past transaction or can it only be made to apply to future transactions?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/319472432/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/320481458",
    "html_url": "https://github.com/ethereum/EIPs/issues/156#issuecomment-320481458",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/156",
    "id": 320481458,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMyMDQ4MTQ1OA==",
    "user": {
      "login": "timkae",
      "id": 30762968,
      "node_id": "MDQ6VXNlcjMwNzYyOTY4",
      "avatar_url": "https://avatars.githubusercontent.com/u/30762968?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/timkae",
      "html_url": "https://github.com/timkae",
      "followers_url": "https://api.github.com/users/timkae/followers",
      "following_url": "https://api.github.com/users/timkae/following{/other_user}",
      "gists_url": "https://api.github.com/users/timkae/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/timkae/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/timkae/subscriptions",
      "organizations_url": "https://api.github.com/users/timkae/orgs",
      "repos_url": "https://api.github.com/users/timkae/repos",
      "events_url": "https://api.github.com/users/timkae/events{/privacy}",
      "received_events_url": "https://api.github.com/users/timkae/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-08-06T02:25:34Z",
    "updated_at": "2017-08-06T02:25:34Z",
    "author_association": "NONE",
    "body": "Is this something that could be used to help me recover ETH sent to an invalid address?\r\n\r\nMy story here:  https://www.reddit.com/r/ethereum/comments/6rsvak/sent_3_eth_to_an_address_with_typo/?utm_content=title&utm_medium=user&utm_source=reddit",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/320481458/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/320518104",
    "html_url": "https://github.com/ethereum/EIPs/issues/156#issuecomment-320518104",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/156",
    "id": 320518104,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMyMDUxODEwNA==",
    "user": {
      "login": "Smithgift",
      "id": 10504499,
      "node_id": "MDQ6VXNlcjEwNTA0NDk5",
      "avatar_url": "https://avatars.githubusercontent.com/u/10504499?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Smithgift",
      "html_url": "https://github.com/Smithgift",
      "followers_url": "https://api.github.com/users/Smithgift/followers",
      "following_url": "https://api.github.com/users/Smithgift/following{/other_user}",
      "gists_url": "https://api.github.com/users/Smithgift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Smithgift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Smithgift/subscriptions",
      "organizations_url": "https://api.github.com/users/Smithgift/orgs",
      "repos_url": "https://api.github.com/users/Smithgift/repos",
      "events_url": "https://api.github.com/users/Smithgift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Smithgift/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-08-06T16:45:43Z",
    "updated_at": "2017-08-06T16:45:43Z",
    "author_association": "NONE",
    "body": "@timkae: Unfortunately not. There's no simple way to know if sending to an address was intended or a typo, just from the addresses themselves.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/320518104/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/322656839",
    "html_url": "https://github.com/ethereum/EIPs/issues/156#issuecomment-322656839",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/156",
    "id": 322656839,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMyMjY1NjgzOQ==",
    "user": {
      "login": "tjayrush",
      "id": 5417918,
      "node_id": "MDQ6VXNlcjU0MTc5MTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5417918?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tjayrush",
      "html_url": "https://github.com/tjayrush",
      "followers_url": "https://api.github.com/users/tjayrush/followers",
      "following_url": "https://api.github.com/users/tjayrush/following{/other_user}",
      "gists_url": "https://api.github.com/users/tjayrush/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tjayrush/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tjayrush/subscriptions",
      "organizations_url": "https://api.github.com/users/tjayrush/orgs",
      "repos_url": "https://api.github.com/users/tjayrush/repos",
      "events_url": "https://api.github.com/users/tjayrush/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tjayrush/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-08-16T03:24:07Z",
    "updated_at": "2017-08-16T03:24:07Z",
    "author_association": "NONE",
    "body": "Has there been any discussion about the following aspect of this original proposal? Quoting from initial post:\r\n\r\n> It is understood that there may be a risk that this proposal will be viewed controversially\r\n> as it is in some sense a \"rescue\" rather than a \"technical improvement\"\r\n\r\nMost of the comments here are from people who obviously agree with the proposal because they lost ETH. Are there any downsides to this proposal? Certainly it gives ammunition to people who argue that ETH is less immutable than it should be. I am not taking a side, but I think the political aspects of the proposal should be discussed.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/322656839/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/322683967",
    "html_url": "https://github.com/ethereum/EIPs/issues/156#issuecomment-322683967",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/156",
    "id": 322683967,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMyMjY4Mzk2Nw==",
    "user": {
      "login": "holiman",
      "id": 142290,
      "node_id": "MDQ6VXNlcjE0MjI5MA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/142290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/holiman",
      "html_url": "https://github.com/holiman",
      "followers_url": "https://api.github.com/users/holiman/followers",
      "following_url": "https://api.github.com/users/holiman/following{/other_user}",
      "gists_url": "https://api.github.com/users/holiman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/holiman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/holiman/subscriptions",
      "organizations_url": "https://api.github.com/users/holiman/orgs",
      "repos_url": "https://api.github.com/users/holiman/repos",
      "events_url": "https://api.github.com/users/holiman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/holiman/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-08-16T07:00:28Z",
    "updated_at": "2017-08-16T07:00:28Z",
    "author_association": "MEMBER",
    "body": "@tjayrush My view on that is that the EIP should concern the technical implementation, so that the technical proposal is finished and fleshed out. Once that is done, and a concrete detailed proposal is available, that proposal should be discussed in a broader scope, which includes the larger community. \r\n\r\nSo step 1: concrete technical spec, step 2: determine if it's supported by community. \r\n\r\n...just my 5 cents.  ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/322683967/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/322687911",
    "html_url": "https://github.com/ethereum/EIPs/issues/156#issuecomment-322687911",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/156",
    "id": 322687911,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMyMjY4NzkxMQ==",
    "user": {
      "login": "MicahZoltu",
      "id": 886059,
      "node_id": "MDQ6VXNlcjg4NjA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MicahZoltu",
      "html_url": "https://github.com/MicahZoltu",
      "followers_url": "https://api.github.com/users/MicahZoltu/followers",
      "following_url": "https://api.github.com/users/MicahZoltu/following{/other_user}",
      "gists_url": "https://api.github.com/users/MicahZoltu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MicahZoltu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MicahZoltu/subscriptions",
      "organizations_url": "https://api.github.com/users/MicahZoltu/orgs",
      "repos_url": "https://api.github.com/users/MicahZoltu/repos",
      "events_url": "https://api.github.com/users/MicahZoltu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MicahZoltu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-08-16T07:21:10Z",
    "updated_at": "2017-08-16T07:21:10Z",
    "author_association": "MEMBER",
    "body": "@tjayrush This proposal adds code, and therefore VM complexity, technical debt, etc. and only helps out people who have lost something.  In general, I think anything that requires _adding_ code to all nodes (e.g., part of consensus) needs to have a very strong argument for it.  While I can appreciate the desire to get back lost money, I'm not convinced the total value restored to the userbase outweighs the total cost to the ecosystem.  Do we have any idea exactly how much money would be recoverable with this?  Do we have any idea the level of technical complexity required to implement (and maintain forever) the code associated with this change?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/322687911/reactions",
      "total_count": 5,
      "+1": 5,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/322696319",
    "html_url": "https://github.com/ethereum/EIPs/issues/156#issuecomment-322696319",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/156",
    "id": 322696319,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMyMjY5NjMxOQ==",
    "user": {
      "login": "mjmau",
      "id": 5480068,
      "node_id": "MDQ6VXNlcjU0ODAwNjg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5480068?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mjmau",
      "html_url": "https://github.com/mjmau",
      "followers_url": "https://api.github.com/users/mjmau/followers",
      "following_url": "https://api.github.com/users/mjmau/following{/other_user}",
      "gists_url": "https://api.github.com/users/mjmau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mjmau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mjmau/subscriptions",
      "organizations_url": "https://api.github.com/users/mjmau/orgs",
      "repos_url": "https://api.github.com/users/mjmau/repos",
      "events_url": "https://api.github.com/users/mjmau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mjmau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-08-16T08:02:21Z",
    "updated_at": "2017-08-16T08:02:45Z",
    "author_association": "NONE",
    "body": "@MicahZoltu With regard to your question of how much money, the answer has two parts: how much has already been lost, and how much will be lost in the future. I tried to estimate how much has been lost already to the subset of \"sent to new contract with null code\" in my previous comment above, which found around 3500 ETH in that category.\r\n\r\nSee the gist https://gist.github.com/mjmau/e073091446751b08762c8c65ae13a37d",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/322696319/reactions",
      "total_count": 3,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/322870829",
    "html_url": "https://github.com/ethereum/EIPs/issues/156#issuecomment-322870829",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/156",
    "id": 322870829,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMyMjg3MDgyOQ==",
    "user": {
      "login": "ryancharleston",
      "id": 9041659,
      "node_id": "MDQ6VXNlcjkwNDE2NTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9041659?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryancharleston",
      "html_url": "https://github.com/ryancharleston",
      "followers_url": "https://api.github.com/users/ryancharleston/followers",
      "following_url": "https://api.github.com/users/ryancharleston/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryancharleston/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryancharleston/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryancharleston/subscriptions",
      "organizations_url": "https://api.github.com/users/ryancharleston/orgs",
      "repos_url": "https://api.github.com/users/ryancharleston/repos",
      "events_url": "https://api.github.com/users/ryancharleston/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryancharleston/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-08-16T19:12:43Z",
    "updated_at": "2017-08-16T19:12:43Z",
    "author_association": "NONE",
    "body": "A recent ICO (REXmls) has 6687 ETH (~$2 million) sitting in an address an address that doesn't actually exist (seen here > https://etherscan.io/address/0x03e4b00b607d0980668ca6e50201576b00000000), due to a misspelled address in their original ICO smart contract. This is a project that would definitely benefit from recovering funds and in doing so would benefit Ethereum and the Ethereum ecosystem as a whole.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/322870829/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/323143072",
    "html_url": "https://github.com/ethereum/EIPs/issues/156#issuecomment-323143072",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/156",
    "id": 323143072,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMyMzE0MzA3Mg==",
    "user": {
      "login": "MicahZoltu",
      "id": 886059,
      "node_id": "MDQ6VXNlcjg4NjA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MicahZoltu",
      "html_url": "https://github.com/MicahZoltu",
      "followers_url": "https://api.github.com/users/MicahZoltu/followers",
      "following_url": "https://api.github.com/users/MicahZoltu/following{/other_user}",
      "gists_url": "https://api.github.com/users/MicahZoltu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MicahZoltu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MicahZoltu/subscriptions",
      "organizations_url": "https://api.github.com/users/MicahZoltu/orgs",
      "repos_url": "https://api.github.com/users/MicahZoltu/repos",
      "events_url": "https://api.github.com/users/MicahZoltu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MicahZoltu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-08-17T17:38:37Z",
    "updated_at": "2017-08-17T17:38:37Z",
    "author_association": "MEMBER",
    "body": "@GriffGreen Can you explain how you came to the conclusion that the paper wallet trick won't work?  I also must be missing something, but unfortunately the SE answer you linked wasn't new information to me and even knowing that it still seems like the paper wallet trick would work.\r\n1. Account A create's wallet contract offline.\r\n2. Account B sends funds to wallet.\r\n3. Wait for hardfork.\r\n4. Account B receives refund ETH.\r\n5. Account A uploads wallet contract.\r\n6. Account A withdraws original ETH.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/323143072/reactions",
      "total_count": 3,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/342512323",
    "html_url": "https://github.com/ethereum/EIPs/issues/156#issuecomment-342512323",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/156",
    "id": 342512323,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0MjUxMjMyMw==",
    "user": {
      "login": "plutoegg",
      "id": 22115014,
      "node_id": "MDQ6VXNlcjIyMTE1MDE0",
      "avatar_url": "https://avatars.githubusercontent.com/u/22115014?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/plutoegg",
      "html_url": "https://github.com/plutoegg",
      "followers_url": "https://api.github.com/users/plutoegg/followers",
      "following_url": "https://api.github.com/users/plutoegg/following{/other_user}",
      "gists_url": "https://api.github.com/users/plutoegg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/plutoegg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/plutoegg/subscriptions",
      "organizations_url": "https://api.github.com/users/plutoegg/orgs",
      "repos_url": "https://api.github.com/users/plutoegg/repos",
      "events_url": "https://api.github.com/users/plutoegg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/plutoegg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-11-07T15:11:09Z",
    "updated_at": "2017-11-07T15:11:09Z",
    "author_association": "NONE",
    "body": "There are several different suggestions in this thread and elsewhere relating to also including recovery of any **funds accidentally sent to the 0x00 address** .\r\nSince this is a relatively common source of \"lost\" funds, if these were to be included it could be a special case for the `0x00` address, and would need to be applied regardless of whether the cause was:\r\n\r\n1. User error leaving `to` address completely blank, and therefore sending to `0x00`.\r\n2. The early bug, later fixed, with leading whitespaces in the `to` string i.e. `to: \" 0x19df848c...\"` went instead to `0x00` (https://www.reddit.com/r/ethereum/comments/3gwczr/be_careful_it_is_so_easy_to_make_a_mistake_and/)\r\n\r\nThe confusion comes that the 0x00 may have been used in the past as a purposeful \"burn\" address. Therefore any transfers to 0x00 *from contracts* should be treated as having been purposeful attempts to burn ether and be untouched. There is no case where an externally owned account would likely have purposely sent a transfer to `0x00`, and so transfers from these could be treated as \"recoverable\".",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/342512323/reactions",
      "total_count": 25,
      "+1": 24,
      "-1": 1,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/342573058",
    "html_url": "https://github.com/ethereum/EIPs/issues/156#issuecomment-342573058",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/156",
    "id": 342573058,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0MjU3MzA1OA==",
    "user": {
      "login": "tinybike",
      "id": 2637020,
      "node_id": "MDQ6VXNlcjI2MzcwMjA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2637020?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tinybike",
      "html_url": "https://github.com/tinybike",
      "followers_url": "https://api.github.com/users/tinybike/followers",
      "following_url": "https://api.github.com/users/tinybike/following{/other_user}",
      "gists_url": "https://api.github.com/users/tinybike/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tinybike/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tinybike/subscriptions",
      "organizations_url": "https://api.github.com/users/tinybike/orgs",
      "repos_url": "https://api.github.com/users/tinybike/repos",
      "events_url": "https://api.github.com/users/tinybike/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tinybike/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-11-07T18:15:54Z",
    "updated_at": "2017-11-07T18:15:54Z",
    "author_association": "MEMBER",
    "body": "@GriffGreen I would also like to know why the paper wallet trick won't work; @MicahZoltu's sequence of events looks correct to me.\r\n\r\nI share @MicahZoltu's concerns re: complexity risks of this EIP.  Can anyone comment on how much extra code / complexity would be needed to implement this?  My gut feeling is that unless it's _very_ simple, the risk associated with implementation outweighs the benefits of reclaiming lost funds.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/342573058/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/342592176",
    "html_url": "https://github.com/ethereum/EIPs/issues/156#issuecomment-342592176",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/156",
    "id": 342592176,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0MjU5MjE3Ng==",
    "user": {
      "login": "k26dr",
      "id": 7109698,
      "node_id": "MDQ6VXNlcjcxMDk2OTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7109698?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/k26dr",
      "html_url": "https://github.com/k26dr",
      "followers_url": "https://api.github.com/users/k26dr/followers",
      "following_url": "https://api.github.com/users/k26dr/following{/other_user}",
      "gists_url": "https://api.github.com/users/k26dr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/k26dr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/k26dr/subscriptions",
      "organizations_url": "https://api.github.com/users/k26dr/orgs",
      "repos_url": "https://api.github.com/users/k26dr/repos",
      "events_url": "https://api.github.com/users/k26dr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/k26dr/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-11-07T19:20:20Z",
    "updated_at": "2017-11-07T19:20:20Z",
    "author_association": "NONE",
    "body": "Is this being considered as a solution to the bricked Parity multisig wallets?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/342592176/reactions",
      "total_count": 10,
      "+1": 10,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
