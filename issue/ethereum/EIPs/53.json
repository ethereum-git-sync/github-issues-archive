{
  "url": "https://api.github.com/repos/ethereum/EIPs/issues/53",
  "repository_url": "https://api.github.com/repos/ethereum/EIPs",
  "labels_url": "https://api.github.com/repos/ethereum/EIPs/issues/53/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/EIPs/issues/53/comments",
  "events_url": "https://api.github.com/repos/ethereum/EIPs/issues/53/events",
  "html_url": "https://github.com/ethereum/EIPs/issues/53",
  "id": 126401984,
  "node_id": "MDU6SXNzdWUxMjY0MDE5ODQ=",
  "number": 53,
  "title": "EIP 105 (Serenity): Binary sharding plus contract calling semantics",
  "user": {
    "login": "vbuterin",
    "id": 2230894,
    "node_id": "MDQ6VXNlcjIyMzA4OTQ=",
    "avatar_url": "https://avatars.githubusercontent.com/u/2230894?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vbuterin",
    "html_url": "https://github.com/vbuterin",
    "followers_url": "https://api.github.com/users/vbuterin/followers",
    "following_url": "https://api.github.com/users/vbuterin/following{/other_user}",
    "gists_url": "https://api.github.com/users/vbuterin/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vbuterin/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vbuterin/subscriptions",
    "organizations_url": "https://api.github.com/users/vbuterin/orgs",
    "repos_url": "https://api.github.com/users/vbuterin/repos",
    "events_url": "https://api.github.com/users/vbuterin/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vbuterin/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 2328627851,
      "node_id": "MDU6TGFiZWwyMzI4NjI3ODUx",
      "url": "https://api.github.com/repos/ethereum/EIPs/labels/stale",
      "name": "stale",
      "color": "000000",
      "default": false,
      "description": ""
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 29,
  "created_at": "2016-01-13T11:52:30Z",
  "updated_at": "2022-01-31T10:14:08Z",
  "closed_at": "2022-01-31T10:14:08Z",
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "This EIP is a solidification of a proposal to implement a simple binary sharding scheme in Ethereum, in the spirit of what was shown at Devcon 1 here: https://docs.google.com/presentation/d/1CjD0W4l4-CwHKUvfF5Vlps76fKLEC6pIwu1a_kC_YRQ\n\nDesign goals include:\n- Minimal initial implementation complexity, while at the same time serving as an effective \"on-ramp\" easing the transition toward a fully scalable Ethereum 2.0\n- Backward-compatibility with the existing Ethereum 1.0 contracts/state/applications (though the economics of ethereum 2.0 may eventually render some of the contract interactions that are currently happening prohibitively expensive even if they remain theoretically possible)\n- Flexibility, including the ability to expand and decrease the de-facto number of \"shards\" as needed\n- The ability to offer something equivalent to sharding at a \"sub-contract\" level, or some similar mechanism in order to allow individual contract developers to easily create applications that are themselves sharded and scalable.\n- The ability to offer a flexible tradeoff to developers between transaction cost and being able to make synchronous calls across a large state\n\nWe can describe the scheme as follows:\n1. There is now a new type of object, called a **transaction group**. A transaction group specifies a **list of transactions, a gas limit, and an activity** range of size `2**k` between `2**k * m` and `2**k * (m+1)`, for some values `k`, `m` where `144 <= k <= 160`,`m >= 0` and `2**k * (m+1) <= 2**160`. The intuition is that any valid activity range constitutes a \"shard\", with each block of 2**144 being a \"bottom level shard\". Every shard that is not bottom level can also be decomposed into two \"child shards\", one for the left half of its range and one for the right half.\n2. Transactions now also specify activity ranges. Transaction groups cannot include transactions whose activity range is outside their own.\n3. Instead of containing a tree of transactions, a block now contains a **list of transaction groups, which MUST have disjoint activity ranges**.\n4. When executing a transaction, any `CALL` or other operation that attempts to access an address which is outside of the transaction's containing group's activity range immediately triggers an **out-of-range exception**. New `RANGEMIN` and `RANGEMAX` opcodes are added to make it easier for developers to deal with this.\n5. When creating a new account, a transaction will now automatically set the first `160-k` bits of the address so that the account that it creates will fit into the containing transaction group's range. `CREATE` operations work similarly, except that they always set the first 16 bits of the target address to fit into the same bottom-level shard.\n6. New specialized `SSTORE` and `SLOAD` opcodes are introduced along the existing ones, such that these opcodes take an additional \"shard ID\" as an argument, where the shard ID should be in the range `0 < k <= 65535`. A contract at address A can use these opcodes to read and write the storage of address`k * 2**144 + A % 2**144`, provided that this address is within the current activity range. Use of these opcodes will also fill in the target address's code to equal the sender's, if it is not yet set.\n7. Contracts now store a code hash at key '' in the tree, not the actual code (this reduces data duplication arising from (5)).\n8. The receipts for a transaction are now saved in the leftmost shard allowed by the transaction group (ie. at `MINRANGE + (d % 2**144)` where `d` is the current address of the receipt storing contract).\n9. If `GL` is the global gas limit, the transaction group gas limits must satisfy the formula `sum([max(L[i]**1.5, L[i] *GL / 4) for L in transaction_group_gas_limits]) < GL**1.5`. This allows blocks to include more gas, up to a maximum 4x increase, if they include transactions that can be executed in parallel (this limit can later on be removed or relaxed once proper sharding is implemented).\n\nPhilosophically speaking, this introduces the following considerations:\n- There are now three types of exceptional conditions, rather than two as before: **(i) out-of-gas, (ii) preventable errors arising from badly written code, and (iii, newly) out-of-range**. Out of range should be viewed as being philosophically similar to out of gas, and similar kinds of guards in the code should be used to prevent attacks in both cases.\n- The preferred paradigm for making scalable applications will now be to create a **receipt** in one shard representing half of a completed operation, and then consume the receipt in another shard, verifying it using a merkle branch plus the `STATEROOT` opcode. A precompile contract for doing this will likely be added. **Applications designed to be asynchronous will thus always benefit from the highest gas discounts** as each transaction will only need to touch one contract.\n- High-level languages will likely include a **shardedMap primitive**, perhaps allowing a user-specified sharding schema (eg. `shard = address // 2**144`, `shard = sha3(name) % 65536`, etc), allowing contracts to store state across multiple shards.\n- **Contract code can now be safely processed in parallel**, introducing an immediate ~2-8x scalability benefit for the public ethereum blockchain assuming that miners have multicore processors, and a much larger scalability benefit for ethereum private chains; in a private chain context, the problems in [http://www.multichain.com/blog/2015/11/smart-contracts-slow-blockchains/](http://www.multichain.com/blog/2015/11/smart-contracts-slow-blockchains/) would be **completely solved**.\n- It **may** be possible to make Ethereum massively scalable (defined either as \"can safely process 10000+ tx/sec\" or \"transaction processing capacity quadratic in the processing power of a single node\") with no further changes, if almost all validators under this scheme become comfortable mining/staking without running full validating nodes, instead employing collaborative validation strategies where they randomly poll other nodes on the validity of blocks on some shards and individually validate other shards. Hence, in the event that the Ethereum developers get blown up by [insert crazies here] or the foundation goes bankrupt, Ethereum will be much more well-suited to scale over time with only minimal further work on the core protocol if need be.\n\nFrom an economics perspective, the following observations can be made:\n- Contract creators now have the ability to make a choice between being in shards where the contracts that they care to interact with are highly concentrated (and thereby benefit from network effects) and being in shards where contracts are rarefied (and thereby benefit from cost savings). This is very similar to the tradeoff faced by humans deciding whether to live in a big city or in a smaller city or the countryside, and so many insights from urban economics may be transferable.\n- Existing contracts do NOT have the ability to move between shards if they are unhappy with a change in the congestion/cost tradeoff of a given shard that arises from changes in the ecosystem; addresses are static. However, they do have an alternative escape valve: de-facto splitting and merging the shards that they are in. If a given shard becomes too congested, its gas price will go up, and so users will increasingly prefer to make operations that are limited to one of its two sub-shards; if enough people do this, then transaction groups at the higher shard level will be rare and transaction groups at the sub-shard level will be more frequent, thereby increasing the \"distance\" between the shards. Instead of (or rather, alongside) the citizens moving, the city itself shrinks or grows.\n\nIn order to process all transaction execution in parallel between transaction groups in a completely disjoint fashion, there are two possible routes from a data structure standpoint. The first is to modify the tree structure so as to have a depth-16 binary tree at the top level. The second is to implement Patricia tree splitting and merging (see python implemented code here: https://github.com/ethereum/pyethereum/commit/81d37fc5f980e72bc54a2dd006a59f13ce0f8c39 ), and do it all with the existing hexary Patricia tree: when processing every block, the process becomes split -> process in parallel -> merge. The former route may be slightly more efficient in the long term, the latter seems more efficient in the short term and may require writing slightly less code (though the code that does need to be written for split/merge is somewhat involved).\n\nNote that if the 144-bit address plus 16-bit sharding scheme is undesirable because it unreasonably splits up existing contracts, we can also take the route of 160-bit addresses plus 16-bit shards for a total of 176 bit addresses.\n",
  "closed_by": {
    "login": "github-actions[bot]",
    "id": 41898282,
    "node_id": "MDM6Qm90NDE4OTgyODI=",
    "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/github-actions%5Bbot%5D",
    "html_url": "https://github.com/apps/github-actions",
    "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
    "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
    "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
    "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
    "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
    "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
    "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
    "type": "Bot",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/53/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/EIPs/issues/53/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/171302294",
    "html_url": "https://github.com/ethereum/EIPs/issues/53#issuecomment-171302294",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/53",
    "id": 171302294,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE3MTMwMjI5NA==",
    "user": {
      "login": "janx",
      "id": 5958,
      "node_id": "MDQ6VXNlcjU5NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5958?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/janx",
      "html_url": "https://github.com/janx",
      "followers_url": "https://api.github.com/users/janx/followers",
      "following_url": "https://api.github.com/users/janx/following{/other_user}",
      "gists_url": "https://api.github.com/users/janx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/janx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/janx/subscriptions",
      "organizations_url": "https://api.github.com/users/janx/orgs",
      "repos_url": "https://api.github.com/users/janx/repos",
      "events_url": "https://api.github.com/users/janx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/janx/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-01-13T14:14:44Z",
    "updated_at": "2016-01-13T14:14:44Z",
    "author_association": "MEMBER",
    "body": "Very cool.\n\n> New specialized SSTORE and SLOAD opcodes are introduced along the existing ones, such that these opcodes take an additional \"shard ID\" as an argument, where the shard ID should be in the range 0 < k <= 65535. \n\nShard id can't be zero or typo?\n\n176-bits address sounds more compatible with existing tools.\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/171302294/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/171346687",
    "html_url": "https://github.com/ethereum/EIPs/issues/53#issuecomment-171346687",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/53",
    "id": 171346687,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE3MTM0NjY4Nw==",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-01-13T16:15:44Z",
    "updated_at": "2016-01-13T16:15:44Z",
    "author_association": "MEMBER",
    "body": "Thinking about the \"prime use case\" of a sharded currency contract, a transfer would always touch at most two shards, but it could be hard to get the activity _ranges_ of multiple transactions disjoint even though each shard is only touched by at most one transaction. What would be the drawbacks of allowing a list of activity ranges for each transaction group?\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/171346687/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/171364822",
    "html_url": "https://github.com/ethereum/EIPs/issues/53#issuecomment-171364822",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/53",
    "id": 171364822,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE3MTM2NDgyMg==",
    "user": {
      "login": "janx",
      "id": 5958,
      "node_id": "MDQ6VXNlcjU5NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5958?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/janx",
      "html_url": "https://github.com/janx",
      "followers_url": "https://api.github.com/users/janx/followers",
      "following_url": "https://api.github.com/users/janx/following{/other_user}",
      "gists_url": "https://api.github.com/users/janx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/janx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/janx/subscriptions",
      "organizations_url": "https://api.github.com/users/janx/orgs",
      "repos_url": "https://api.github.com/users/janx/repos",
      "events_url": "https://api.github.com/users/janx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/janx/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-01-13T17:03:10Z",
    "updated_at": "2016-01-13T17:03:10Z",
    "author_association": "MEMBER",
    "body": "How does this work with account abstraction? Does transactions from address 0 require special treatment? Will this make the shard 0 a special one because of pre-deployed contracts?\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/171364822/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/171370637",
    "html_url": "https://github.com/ethereum/EIPs/issues/53#issuecomment-171370637",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/53",
    "id": 171370637,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE3MTM3MDYzNw==",
    "user": {
      "login": "Smithgift",
      "id": 10504499,
      "node_id": "MDQ6VXNlcjEwNTA0NDk5",
      "avatar_url": "https://avatars.githubusercontent.com/u/10504499?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Smithgift",
      "html_url": "https://github.com/Smithgift",
      "followers_url": "https://api.github.com/users/Smithgift/followers",
      "following_url": "https://api.github.com/users/Smithgift/following{/other_user}",
      "gists_url": "https://api.github.com/users/Smithgift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Smithgift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Smithgift/subscriptions",
      "organizations_url": "https://api.github.com/users/Smithgift/orgs",
      "repos_url": "https://api.github.com/users/Smithgift/repos",
      "events_url": "https://api.github.com/users/Smithgift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Smithgift/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-01-13T17:22:56Z",
    "updated_at": "2016-01-13T17:22:56Z",
    "author_association": "NONE",
    "body": "I see a issue with Out-Of-Range being philosophically treated like Out-of-Gas. If I run out out of gas, well, the miner did the work, so I still should pay them. If my code is bad, that's my fault, and the miner should still get paid.\n\nBut activity groups, and therefore whether a transaction goes out of range, is totally under the miner's control. Suppose they use introspection to find if my high-gas high-price transaction crosses at least one shard boundary, and then manipulate the transaction group to glean as much possible gas from me without actually executing the transaction. Or perhaps the miner made a legitimate bad guess about the activity range, and only after spending over a million gas in computation did they discover the problem. _Should_ the miner still get paid?\n\nSomething makes me uneasy about having two types of errors, one of which is the user's fault and the miner gets paid, and another which is the miner's fault, and there's not an obvious answer whether the miner should be paid or not. Sure, the programmer via the silent assistance of the compiler can deal with it, but there's a significant philosophical difference.\n\nOn a similar topic, what algorithm can miners use to determine transaction groups? Seems to be a kind of packing problem, except the bins themselves have to be packed into bigger bins and objects can grow and shrink depending on arbitrary bounded computation. There's probably a reasonably good algorithm to get _an_ answer, in the same way that current miners deal with packing transactions into blocks.\n\nOff the top of my head, a naive system might be:\n1. Sort the transactions by effective gas price and divide them into queues based on the shard of the contract they'll start with (or hit directly after the origin address.)\n2. Start processing the queues into their own proto-transaction groups, and when a transaction crosses an activity range delete the queue that pays less and dump those transactions on the \"winning\" queue.\n3. When all transactions have been processed, pick the set of proto-transaction groups that pays the most and make those the final transaction groups.\n\nThere's clearly issues, though (How much gas should each proto-transaction group be allowed?)\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/171370637/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/171470600",
    "html_url": "https://github.com/ethereum/EIPs/issues/53#issuecomment-171470600",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/53",
    "id": 171470600,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE3MTQ3MDYwMA==",
    "user": {
      "login": "jpritikin",
      "id": 2002771,
      "node_id": "MDQ6VXNlcjIwMDI3NzE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2002771?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jpritikin",
      "html_url": "https://github.com/jpritikin",
      "followers_url": "https://api.github.com/users/jpritikin/followers",
      "following_url": "https://api.github.com/users/jpritikin/following{/other_user}",
      "gists_url": "https://api.github.com/users/jpritikin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jpritikin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jpritikin/subscriptions",
      "organizations_url": "https://api.github.com/users/jpritikin/orgs",
      "repos_url": "https://api.github.com/users/jpritikin/repos",
      "events_url": "https://api.github.com/users/jpritikin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jpritikin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-01-13T23:27:25Z",
    "updated_at": "2016-01-13T23:27:25Z",
    "author_association": "NONE",
    "body": "\"Applications designed to be asynchronous will this always benefit from the highest gas\" -- Typo here but the meaning seems clear enough\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/171470600/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/171474754",
    "html_url": "https://github.com/ethereum/EIPs/issues/53#issuecomment-171474754",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/53",
    "id": 171474754,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE3MTQ3NDc1NA==",
    "user": {
      "login": "vbuterin",
      "id": 2230894,
      "node_id": "MDQ6VXNlcjIyMzA4OTQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2230894?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vbuterin",
      "html_url": "https://github.com/vbuterin",
      "followers_url": "https://api.github.com/users/vbuterin/followers",
      "following_url": "https://api.github.com/users/vbuterin/following{/other_user}",
      "gists_url": "https://api.github.com/users/vbuterin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vbuterin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vbuterin/subscriptions",
      "organizations_url": "https://api.github.com/users/vbuterin/orgs",
      "repos_url": "https://api.github.com/users/vbuterin/repos",
      "events_url": "https://api.github.com/users/vbuterin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vbuterin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-01-13T23:50:16Z",
    "updated_at": "2016-01-13T23:50:16Z",
    "author_association": "MEMBER",
    "body": "Ok, I added an important point: transactions now also specify their own activity ranges, and a transaction group's activity range must be a superset of that of all transactions that are contained in it. This should resolve most of the issues around OOR being something that miners can \"force\" to happen to any transaction.\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/171474754/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/171501346",
    "html_url": "https://github.com/ethereum/EIPs/issues/53#issuecomment-171501346",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/53",
    "id": 171501346,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE3MTUwMTM0Ng==",
    "user": {
      "login": "vbuterin",
      "id": 2230894,
      "node_id": "MDQ6VXNlcjIyMzA4OTQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2230894?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vbuterin",
      "html_url": "https://github.com/vbuterin",
      "followers_url": "https://api.github.com/users/vbuterin/followers",
      "following_url": "https://api.github.com/users/vbuterin/following{/other_user}",
      "gists_url": "https://api.github.com/users/vbuterin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vbuterin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vbuterin/subscriptions",
      "organizations_url": "https://api.github.com/users/vbuterin/orgs",
      "repos_url": "https://api.github.com/users/vbuterin/repos",
      "events_url": "https://api.github.com/users/vbuterin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vbuterin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-01-14T02:06:23Z",
    "updated_at": "2016-01-14T02:06:23Z",
    "author_association": "MEMBER",
    "body": "Regarding special addresses, the zero address is just a virtual sender account, so I don't see any problems there wrt sharding; if really desired I suppose we can make the sender 0 + m \\* 2**k to be in the same shard, but not sure that's necessary. Precompiles can probably be copied to every shard. Casper, we'll see; there should be some way to architect it so that it benefits from parallelization but that may have to wait for v2.\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/171501346/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/171575690",
    "html_url": "https://github.com/ethereum/EIPs/issues/53#issuecomment-171575690",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/53",
    "id": 171575690,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE3MTU3NTY5MA==",
    "user": {
      "login": "simondlr",
      "id": 716965,
      "node_id": "MDQ6VXNlcjcxNjk2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/716965?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/simondlr",
      "html_url": "https://github.com/simondlr",
      "followers_url": "https://api.github.com/users/simondlr/followers",
      "following_url": "https://api.github.com/users/simondlr/following{/other_user}",
      "gists_url": "https://api.github.com/users/simondlr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/simondlr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/simondlr/subscriptions",
      "organizations_url": "https://api.github.com/users/simondlr/orgs",
      "repos_url": "https://api.github.com/users/simondlr/repos",
      "events_url": "https://api.github.com/users/simondlr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/simondlr/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-01-14T08:55:40Z",
    "updated_at": "2016-01-14T08:55:40Z",
    "author_association": "NONE",
    "body": "Very awesome. 2 questions:\n\nI'm unsure precisely how this choice works/looks?\n\n> Contract creators now have the ability to make a choice between being in shards where the contracts that they care to interact with are highly concentrated (and thereby benefit from network effects) and being in shards where contracts are rarefied (and thereby benefit from cost savings).\n\nWould you at a contract level choose which shard to store your contract's state?\n\n2) \n\nWhat if you don't have knowledge on how far the activity range could be? It could be a tx with long cascading hops between contracts, but you are not sure what will be exeuted as a result of it. I assume, one would be able to check, like with current web3 tools to see what happens with a potential state change before submitting it. ie, run this transaction to find the activity range, then submit this along with the transaction? Is this a correct assumption?\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/171575690/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/171587154",
    "html_url": "https://github.com/ethereum/EIPs/issues/53#issuecomment-171587154",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/53",
    "id": 171587154,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE3MTU4NzE1NA==",
    "user": {
      "login": "vbuterin",
      "id": 2230894,
      "node_id": "MDQ6VXNlcjIyMzA4OTQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2230894?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vbuterin",
      "html_url": "https://github.com/vbuterin",
      "followers_url": "https://api.github.com/users/vbuterin/followers",
      "following_url": "https://api.github.com/users/vbuterin/following{/other_user}",
      "gists_url": "https://api.github.com/users/vbuterin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vbuterin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vbuterin/subscriptions",
      "organizations_url": "https://api.github.com/users/vbuterin/orgs",
      "repos_url": "https://api.github.com/users/vbuterin/repos",
      "events_url": "https://api.github.com/users/vbuterin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vbuterin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-01-14T09:41:59Z",
    "updated_at": "2016-01-14T09:42:05Z",
    "author_association": "MEMBER",
    "body": "> Would you at a contract level choose which shard to store your contract's state?\n\nThis happens at two levels. First, when creating a contract, you can choose the prefix at which you create it. Second, the contract itself can choose which shard IDs it tries to SSTORE data at.\n\n> What if you don't have knowledge on how far the activity range could be? It could be a tx with long cascading hops between contracts, but you are not sure what will be exeuted as a result of it.\n\nThen, you would have to set the activity range to be very large, and thus wait a long time and pay high gas costs for it to be accepted (or else set a smaller activity range and risk some of the child messages OOR'ing). Creating long and unpredictable cascading hops between contracts is precisely the thing that is deliberately economically discouraged by this scheme.\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/171587154/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/171610493",
    "html_url": "https://github.com/ethereum/EIPs/issues/53#issuecomment-171610493",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/53",
    "id": 171610493,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE3MTYxMDQ5Mw==",
    "user": {
      "login": "sillytuna",
      "id": 886656,
      "node_id": "MDQ6VXNlcjg4NjY1Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sillytuna",
      "html_url": "https://github.com/sillytuna",
      "followers_url": "https://api.github.com/users/sillytuna/followers",
      "following_url": "https://api.github.com/users/sillytuna/following{/other_user}",
      "gists_url": "https://api.github.com/users/sillytuna/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sillytuna/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sillytuna/subscriptions",
      "organizations_url": "https://api.github.com/users/sillytuna/orgs",
      "repos_url": "https://api.github.com/users/sillytuna/repos",
      "events_url": "https://api.github.com/users/sillytuna/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sillytuna/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-01-14T10:49:52Z",
    "updated_at": "2016-01-14T10:49:52Z",
    "author_association": "NONE",
    "body": "Taking the Alarm contract as an example, does that mean it's best to put my 'callee' contract on the same shard as the alarm contract, and also that (in principle) the alarm contract could live on multiple shard (via multiple contracts) if that provided a good cost saving?\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/171610493/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/171638393",
    "html_url": "https://github.com/ethereum/EIPs/issues/53#issuecomment-171638393",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/53",
    "id": 171638393,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE3MTYzODM5Mw==",
    "user": {
      "login": "simondlr",
      "id": 716965,
      "node_id": "MDQ6VXNlcjcxNjk2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/716965?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/simondlr",
      "html_url": "https://github.com/simondlr",
      "followers_url": "https://api.github.com/users/simondlr/followers",
      "following_url": "https://api.github.com/users/simondlr/following{/other_user}",
      "gists_url": "https://api.github.com/users/simondlr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/simondlr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/simondlr/subscriptions",
      "organizations_url": "https://api.github.com/users/simondlr/orgs",
      "repos_url": "https://api.github.com/users/simondlr/repos",
      "events_url": "https://api.github.com/users/simondlr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/simondlr/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-01-14T13:03:59Z",
    "updated_at": "2016-01-14T13:03:59Z",
    "author_association": "NONE",
    "body": "> Creating long and unpredictable cascading hops between contracts is precisely the thing that is deliberately economically discouraged by this scheme.\n\nIt does to some extent feel like one is disincentivizing potentially emergent behaviour due to stifling costs? ie. \n\nA thought could occur: \"We could automatically build a prediction market on information being produced automatically from contract A. But, argh. The prediction market platform is on a shard too far away. If only the 2 developers saw there could be potential synergy! Contract B should perhaps have chosen to deploy the contract in a closer group to the prediction market platform. Now we won't know what the interesting outcomes would be. Too expensive and will take too long to confirm. :(\"\n\nIt's a concern, but a trade-off for scalability's sake. Scalability > emergence at this point in time. I guess it should just be mitigated as much as possible to ensure it keeps most of the benefits. I guess, now your mention of urban economics makes sense.\n\nKeep up the good work!\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/171638393/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/171674345",
    "html_url": "https://github.com/ethereum/EIPs/issues/53#issuecomment-171674345",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/53",
    "id": 171674345,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE3MTY3NDM0NQ==",
    "user": {
      "login": "vbuterin",
      "id": 2230894,
      "node_id": "MDQ6VXNlcjIyMzA4OTQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2230894?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vbuterin",
      "html_url": "https://github.com/vbuterin",
      "followers_url": "https://api.github.com/users/vbuterin/followers",
      "following_url": "https://api.github.com/users/vbuterin/following{/other_user}",
      "gists_url": "https://api.github.com/users/vbuterin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vbuterin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vbuterin/subscriptions",
      "organizations_url": "https://api.github.com/users/vbuterin/orgs",
      "repos_url": "https://api.github.com/users/vbuterin/repos",
      "events_url": "https://api.github.com/users/vbuterin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vbuterin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-01-14T15:31:06Z",
    "updated_at": "2016-01-14T15:31:06Z",
    "author_association": "MEMBER",
    "body": "And then a lightbulb goes off in your head and you realize that you could implement your application and get the best of both worlds by making the information grabbing from contract A asynchronous :)\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/171674345/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/171674459",
    "html_url": "https://github.com/ethereum/EIPs/issues/53#issuecomment-171674459",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/53",
    "id": 171674459,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE3MTY3NDQ1OQ==",
    "user": {
      "login": "vbuterin",
      "id": 2230894,
      "node_id": "MDQ6VXNlcjIyMzA4OTQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2230894?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vbuterin",
      "html_url": "https://github.com/vbuterin",
      "followers_url": "https://api.github.com/users/vbuterin/followers",
      "following_url": "https://api.github.com/users/vbuterin/following{/other_user}",
      "gists_url": "https://api.github.com/users/vbuterin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vbuterin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vbuterin/subscriptions",
      "organizations_url": "https://api.github.com/users/vbuterin/orgs",
      "repos_url": "https://api.github.com/users/vbuterin/repos",
      "events_url": "https://api.github.com/users/vbuterin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vbuterin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-01-14T15:31:31Z",
    "updated_at": "2016-01-14T15:31:31Z",
    "author_association": "MEMBER",
    "body": "You probably want an instance of the alarm contract in every shard.\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/171674459/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/171678731",
    "html_url": "https://github.com/ethereum/EIPs/issues/53#issuecomment-171678731",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/53",
    "id": 171678731,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE3MTY3ODczMQ==",
    "user": {
      "login": "simondlr",
      "id": 716965,
      "node_id": "MDQ6VXNlcjcxNjk2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/716965?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/simondlr",
      "html_url": "https://github.com/simondlr",
      "followers_url": "https://api.github.com/users/simondlr/followers",
      "following_url": "https://api.github.com/users/simondlr/following{/other_user}",
      "gists_url": "https://api.github.com/users/simondlr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/simondlr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/simondlr/subscriptions",
      "organizations_url": "https://api.github.com/users/simondlr/orgs",
      "repos_url": "https://api.github.com/users/simondlr/repos",
      "events_url": "https://api.github.com/users/simondlr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/simondlr/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-01-14T15:47:12Z",
    "updated_at": "2016-01-14T15:47:12Z",
    "author_association": "NONE",
    "body": "> And then a lightbulb goes off in your head and you realize that you could implement your application and get the best of both worlds by making the information grabbing from contract A asynchronous :)\n\nAh, yes! Using log proofs, right?\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/171678731/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/171737526",
    "html_url": "https://github.com/ethereum/EIPs/issues/53#issuecomment-171737526",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/53",
    "id": 171737526,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE3MTczNzUyNg==",
    "user": {
      "login": "Smithgift",
      "id": 10504499,
      "node_id": "MDQ6VXNlcjEwNTA0NDk5",
      "avatar_url": "https://avatars.githubusercontent.com/u/10504499?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Smithgift",
      "html_url": "https://github.com/Smithgift",
      "followers_url": "https://api.github.com/users/Smithgift/followers",
      "following_url": "https://api.github.com/users/Smithgift/following{/other_user}",
      "gists_url": "https://api.github.com/users/Smithgift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Smithgift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Smithgift/subscriptions",
      "organizations_url": "https://api.github.com/users/Smithgift/orgs",
      "repos_url": "https://api.github.com/users/Smithgift/repos",
      "events_url": "https://api.github.com/users/Smithgift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Smithgift/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-01-14T18:53:35Z",
    "updated_at": "2016-01-14T18:53:35Z",
    "author_association": "NONE",
    "body": "Suggestion: define `CALLCODE` and `DELEGATECALL` to use the code of the target contract as of _last_ block and make those two opcodes always synchronous no matter the activity range (and work regardless of it).\n\nReasoning: Libraries can work cross-shard without further effort. Keeping the static code of popular libraries (possibly JIT compiled as well) in memory is little burden to miners, and libraries can't alter the state of their own shard anyway. It also helps forward-compatibility: no need to make sure your libraries will be on the same shard as your contract in the current blockchain so your dapp won't become expensive in the future.\n\nLibraries can be created and selfdestruct, true. But if we just use the last block's code I can't conceive of any normal situation where it would matter.\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/171737526/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/171738592",
    "html_url": "https://github.com/ethereum/EIPs/issues/53#issuecomment-171738592",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/53",
    "id": 171738592,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE3MTczODU5Mg==",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-01-14T18:57:36Z",
    "updated_at": "2016-01-14T18:58:24Z",
    "author_association": "MEMBER",
    "body": "The semantics of self destruct do not make too much sense anyway without blockchain rent. Perhaps we could also consider to add some DELEGATECALL or CALLCODE variant that does not use an address but a code hash.\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/171738592/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/171748370",
    "html_url": "https://github.com/ethereum/EIPs/issues/53#issuecomment-171748370",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/53",
    "id": 171748370,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE3MTc0ODM3MA==",
    "user": {
      "login": "VoR0220",
      "id": 7756785,
      "node_id": "MDQ6VXNlcjc3NTY3ODU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7756785?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/VoR0220",
      "html_url": "https://github.com/VoR0220",
      "followers_url": "https://api.github.com/users/VoR0220/followers",
      "following_url": "https://api.github.com/users/VoR0220/following{/other_user}",
      "gists_url": "https://api.github.com/users/VoR0220/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/VoR0220/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/VoR0220/subscriptions",
      "organizations_url": "https://api.github.com/users/VoR0220/orgs",
      "repos_url": "https://api.github.com/users/VoR0220/repos",
      "events_url": "https://api.github.com/users/VoR0220/events{/privacy}",
      "received_events_url": "https://api.github.com/users/VoR0220/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-01-14T19:16:44Z",
    "updated_at": "2016-01-14T19:16:44Z",
    "author_association": "MEMBER",
    "body": "Why wouldn't the semantics of self destruct not make sense here? Would not a shard be able to shorten the amount of \"block\" it puts in with the self destruct mechanism? I'm very curious and want to better understand all of this. \n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/171748370/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/171823788",
    "html_url": "https://github.com/ethereum/EIPs/issues/53#issuecomment-171823788",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/53",
    "id": 171823788,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE3MTgyMzc4OA==",
    "user": {
      "login": "vbuterin",
      "id": 2230894,
      "node_id": "MDQ6VXNlcjIyMzA4OTQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2230894?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vbuterin",
      "html_url": "https://github.com/vbuterin",
      "followers_url": "https://api.github.com/users/vbuterin/followers",
      "following_url": "https://api.github.com/users/vbuterin/following{/other_user}",
      "gists_url": "https://api.github.com/users/vbuterin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vbuterin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vbuterin/subscriptions",
      "organizations_url": "https://api.github.com/users/vbuterin/orgs",
      "repos_url": "https://api.github.com/users/vbuterin/repos",
      "events_url": "https://api.github.com/users/vbuterin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vbuterin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-01-15T00:11:19Z",
    "updated_at": "2016-01-15T00:11:19Z",
    "author_association": "MEMBER",
    "body": "> Ah, yes! Using log proofs, right?\n\nYep :)\n\n> Suggestion: define CALLCODE and DELEGATECALL to use the code of the target contract as of last block and make those two opcodes always synchronous no matter the activity range (and work regardless of it).\n\nThis feels like it's going into the \"protocol-level proofs\" area, as it violates the assumption that every shard knows about nothing but itself and previous state roots (an assumption that's not true in Serenity but will be in the further future). If we go that route, then this seems completely sensible, though note that it does mean that transactions will need to include proofs of the code they are calling. Otherwise, the most realistic route may be to simply copy the library code to each shard (note that this can be done just-in-time, and since we store the hash of the code in the tree and not the actual code the duplication costs are greatly reduced). You could argue that this is close to equivalent to a delegate call that uses a code hash.\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/171823788/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/172067971",
    "html_url": "https://github.com/ethereum/EIPs/issues/53#issuecomment-172067971",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/53",
    "id": 172067971,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE3MjA2Nzk3MQ==",
    "user": {
      "login": "vladzamfir",
      "id": 4712234,
      "node_id": "MDQ6VXNlcjQ3MTIyMzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4712234?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vladzamfir",
      "html_url": "https://github.com/vladzamfir",
      "followers_url": "https://api.github.com/users/vladzamfir/followers",
      "following_url": "https://api.github.com/users/vladzamfir/following{/other_user}",
      "gists_url": "https://api.github.com/users/vladzamfir/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vladzamfir/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vladzamfir/subscriptions",
      "organizations_url": "https://api.github.com/users/vladzamfir/orgs",
      "repos_url": "https://api.github.com/users/vladzamfir/repos",
      "events_url": "https://api.github.com/users/vladzamfir/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vladzamfir/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-01-15T19:56:40Z",
    "updated_at": "2016-01-15T19:57:24Z",
    "author_association": "MEMBER",
    "body": "The main problem that I see with this proposal is the following:\n\nBy setting m = 0 and k = 160, an adversary can create a block with a single transaction group that touches as much of the state as possible, being limited only by the global gas limit GL. The adversary can thereby force validators who don't have enough storage capacity to SPV validate their block. In the worst imaginable case, an adversary may be the only node with enough capacity to validate their block, and can thereby introduce an invalid state transition.\n\nThis begs the following questions:\n- Is the global gas limit the only handle that exists under EIP 105 to mitigate this attack?\n- Will we require that the global state is small or well-behaved enough that any validator with retail hardware can validate a block containing a transaction group with m = 0, k = 160?\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/172067971/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/174156949",
    "html_url": "https://github.com/ethereum/EIPs/issues/53#issuecomment-174156949",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/53",
    "id": 174156949,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE3NDE1Njk0OQ==",
    "user": {
      "login": "vbuterin",
      "id": 2230894,
      "node_id": "MDQ6VXNlcjIyMzA4OTQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2230894?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vbuterin",
      "html_url": "https://github.com/vbuterin",
      "followers_url": "https://api.github.com/users/vbuterin/followers",
      "following_url": "https://api.github.com/users/vbuterin/following{/other_user}",
      "gists_url": "https://api.github.com/users/vbuterin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vbuterin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vbuterin/subscriptions",
      "organizations_url": "https://api.github.com/users/vbuterin/orgs",
      "repos_url": "https://api.github.com/users/vbuterin/repos",
      "events_url": "https://api.github.com/users/vbuterin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vbuterin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-01-23T07:31:02Z",
    "updated_at": "2016-01-23T07:31:02Z",
    "author_association": "MEMBER",
    "body": "The solution there is to make sure that the gas rules impose a sane upper bound on the portion of the state that a single block can read, and thereby indirectly impose a sane upper bound on the size of the required merkle proof for a block. Read operations probably need to be made more expensive, perhaps to the point where they are a substantial portion of the cost of write operations.\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/174156949/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/174246734",
    "html_url": "https://github.com/ethereum/EIPs/issues/53#issuecomment-174246734",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/53",
    "id": 174246734,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE3NDI0NjczNA==",
    "user": {
      "login": "VoR0220",
      "id": 7756785,
      "node_id": "MDQ6VXNlcjc3NTY3ODU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7756785?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/VoR0220",
      "html_url": "https://github.com/VoR0220",
      "followers_url": "https://api.github.com/users/VoR0220/followers",
      "following_url": "https://api.github.com/users/VoR0220/following{/other_user}",
      "gists_url": "https://api.github.com/users/VoR0220/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/VoR0220/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/VoR0220/subscriptions",
      "organizations_url": "https://api.github.com/users/VoR0220/orgs",
      "repos_url": "https://api.github.com/users/VoR0220/repos",
      "events_url": "https://api.github.com/users/VoR0220/events{/privacy}",
      "received_events_url": "https://api.github.com/users/VoR0220/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-01-24T03:40:51Z",
    "updated_at": "2016-01-24T03:40:51Z",
    "author_association": "MEMBER",
    "body": "How would you accomplish that? When you say read operations, you mean inputs into the chain correct? \n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/174246734/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/177033797",
    "html_url": "https://github.com/ethereum/EIPs/issues/53#issuecomment-177033797",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/53",
    "id": 177033797,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE3NzAzMzc5Nw==",
    "user": {
      "login": "vbuterin",
      "id": 2230894,
      "node_id": "MDQ6VXNlcjIyMzA4OTQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2230894?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vbuterin",
      "html_url": "https://github.com/vbuterin",
      "followers_url": "https://api.github.com/users/vbuterin/followers",
      "following_url": "https://api.github.com/users/vbuterin/following{/other_user}",
      "gists_url": "https://api.github.com/users/vbuterin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vbuterin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vbuterin/subscriptions",
      "organizations_url": "https://api.github.com/users/vbuterin/orgs",
      "repos_url": "https://api.github.com/users/vbuterin/repos",
      "events_url": "https://api.github.com/users/vbuterin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vbuterin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-01-30T00:48:06Z",
    "updated_at": "2016-01-30T00:48:06Z",
    "author_association": "MEMBER",
    "body": "I mean SLOAD (and less-known ones like BALANCE).\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/177033797/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/187947239",
    "html_url": "https://github.com/ethereum/EIPs/issues/53#issuecomment-187947239",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/53",
    "id": 187947239,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE4Nzk0NzIzOQ==",
    "user": {
      "login": "Smithgift",
      "id": 10504499,
      "node_id": "MDQ6VXNlcjEwNTA0NDk5",
      "avatar_url": "https://avatars.githubusercontent.com/u/10504499?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Smithgift",
      "html_url": "https://github.com/Smithgift",
      "followers_url": "https://api.github.com/users/Smithgift/followers",
      "following_url": "https://api.github.com/users/Smithgift/following{/other_user}",
      "gists_url": "https://api.github.com/users/Smithgift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Smithgift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Smithgift/subscriptions",
      "organizations_url": "https://api.github.com/users/Smithgift/orgs",
      "repos_url": "https://api.github.com/users/Smithgift/repos",
      "events_url": "https://api.github.com/users/Smithgift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Smithgift/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-02-23T22:43:10Z",
    "updated_at": "2016-02-23T22:43:10Z",
    "author_association": "NONE",
    "body": "I realized a bizarre but potentially quite useful feature of sharding. Suppose the network is now huge and every validator has to trust the validators of other shards. Then suppose out in shard 3f41 a group of validators agree to change consensus rules to add the FOO_BAR opcode. In shard 3f41, the FOO_BAR opcode now works. In all other shards, it doesn't. But as long as the outside validators trust the FOO_BARites of 3f41, there remains only one blockchain. We essentially have a partial hardfork (or a hardfork and a soft-fork at the same time.)\n\nIn reality, the amount of drama that accompanies any change would mean this could never happen in secret. On the other hand, some gargantuan drama-inducing change could have a compromise: everyone on side A sticks to side A shards, everyone on side B sticks to side B shards, and there's just a few validators which overlap to make sure that no one on the other side is cheating.\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/187947239/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/194675915",
    "html_url": "https://github.com/ethereum/EIPs/issues/53#issuecomment-194675915",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/53",
    "id": 194675915,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE5NDY3NTkxNQ==",
    "user": {
      "login": "mcelrath",
      "id": 1746780,
      "node_id": "MDQ6VXNlcjE3NDY3ODA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1746780?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mcelrath",
      "html_url": "https://github.com/mcelrath",
      "followers_url": "https://api.github.com/users/mcelrath/followers",
      "following_url": "https://api.github.com/users/mcelrath/following{/other_user}",
      "gists_url": "https://api.github.com/users/mcelrath/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mcelrath/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mcelrath/subscriptions",
      "organizations_url": "https://api.github.com/users/mcelrath/orgs",
      "repos_url": "https://api.github.com/users/mcelrath/repos",
      "events_url": "https://api.github.com/users/mcelrath/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mcelrath/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-03-10T05:23:42Z",
    "updated_at": "2016-03-10T05:23:42Z",
    "author_association": "NONE",
    "body": "This proposal effectively outsources the problem, via an incentive, without actually solving it.  I don't think it's reasonable that a contract or person would know what \"activity range\" it needs, and I anticipate a ton of out-of-gas conditions as a consequence, and general breakage.  Absent a good solution to sharding, incentivizing a solution is an ugly, if not terrible idea, but will most definitely result in unexpected breakage.\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/194675915/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/195131587",
    "html_url": "https://github.com/ethereum/EIPs/issues/53#issuecomment-195131587",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/53",
    "id": 195131587,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE5NTEzMTU4Nw==",
    "user": {
      "login": "zack-bitcoin",
      "id": 6126593,
      "node_id": "MDQ6VXNlcjYxMjY1OTM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6126593?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/zack-bitcoin",
      "html_url": "https://github.com/zack-bitcoin",
      "followers_url": "https://api.github.com/users/zack-bitcoin/followers",
      "following_url": "https://api.github.com/users/zack-bitcoin/following{/other_user}",
      "gists_url": "https://api.github.com/users/zack-bitcoin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/zack-bitcoin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/zack-bitcoin/subscriptions",
      "organizations_url": "https://api.github.com/users/zack-bitcoin/orgs",
      "repos_url": "https://api.github.com/users/zack-bitcoin/repos",
      "events_url": "https://api.github.com/users/zack-bitcoin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/zack-bitcoin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-03-11T01:23:27Z",
    "updated_at": "2016-03-11T01:23:27Z",
    "author_association": "NONE",
    "body": "Potential attack:\nIf one of the rarified shards is filled with money from only a handful of people, and the handful colludes to introduce an invalid state transition that gives themselves tons more money.\nIs there a way to recover from this?\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/195131587/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/195224884",
    "html_url": "https://github.com/ethereum/EIPs/issues/53#issuecomment-195224884",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/53",
    "id": 195224884,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE5NTIyNDg4NA==",
    "user": {
      "login": "VoR0220",
      "id": 7756785,
      "node_id": "MDQ6VXNlcjc3NTY3ODU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7756785?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/VoR0220",
      "html_url": "https://github.com/VoR0220",
      "followers_url": "https://api.github.com/users/VoR0220/followers",
      "following_url": "https://api.github.com/users/VoR0220/following{/other_user}",
      "gists_url": "https://api.github.com/users/VoR0220/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/VoR0220/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/VoR0220/subscriptions",
      "organizations_url": "https://api.github.com/users/VoR0220/orgs",
      "repos_url": "https://api.github.com/users/VoR0220/repos",
      "events_url": "https://api.github.com/users/VoR0220/events{/privacy}",
      "received_events_url": "https://api.github.com/users/VoR0220/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-03-11T06:54:21Z",
    "updated_at": "2016-03-11T06:54:21Z",
    "author_association": "MEMBER",
    "body": "@zack-bitcoin not really doable I think....they still have to eventually verify with the other shards. That's when this would fall through. \n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/195224884/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/333754071",
    "html_url": "https://github.com/ethereum/EIPs/issues/53#issuecomment-333754071",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/53",
    "id": 333754071,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzMzc1NDA3MQ==",
    "user": {
      "login": "jamesray1",
      "id": 16969914,
      "node_id": "MDQ6VXNlcjE2OTY5OTE0",
      "avatar_url": "https://avatars.githubusercontent.com/u/16969914?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesray1",
      "html_url": "https://github.com/jamesray1",
      "followers_url": "https://api.github.com/users/jamesray1/followers",
      "following_url": "https://api.github.com/users/jamesray1/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesray1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesray1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesray1/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesray1/orgs",
      "repos_url": "https://api.github.com/users/jamesray1/repos",
      "events_url": "https://api.github.com/users/jamesray1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesray1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-10-03T06:42:18Z",
    "updated_at": "2017-10-03T06:42:18Z",
    "author_association": "CONTRIBUTOR",
    "body": "Here's a video for the presentation: https://www.youtube.com/watch?v=-QIt3mKLIYU",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/333754071/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/1014301127",
    "html_url": "https://github.com/ethereum/EIPs/issues/53#issuecomment-1014301127",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/53",
    "id": 1014301127,
    "node_id": "IC_kwDOAq426M48dQHH",
    "user": {
      "login": "github-actions[bot]",
      "id": 41898282,
      "node_id": "MDM6Qm90NDE4OTgyODI=",
      "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/github-actions%5Bbot%5D",
      "html_url": "https://github.com/apps/github-actions",
      "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
      "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
      "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
      "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
      "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
      "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
      "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
      "type": "Bot",
      "site_admin": false
    },
    "created_at": "2022-01-17T09:17:55Z",
    "updated_at": "2022-01-17T09:17:55Z",
    "author_association": "NONE",
    "body": "There has been no activity on this issue for two months. It will be closed in a week if no further activity occurs. If you would like to move this EIP forward, please respond to any outstanding feedback or add a comment indicating that you have addressed all required feedback and are ready for a review.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/1014301127/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/1025576459",
    "html_url": "https://github.com/ethereum/EIPs/issues/53#issuecomment-1025576459",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/53",
    "id": 1025576459,
    "node_id": "IC_kwDOAq426M49IQ4L",
    "user": {
      "login": "github-actions[bot]",
      "id": 41898282,
      "node_id": "MDM6Qm90NDE4OTgyODI=",
      "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/github-actions%5Bbot%5D",
      "html_url": "https://github.com/apps/github-actions",
      "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
      "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
      "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
      "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
      "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
      "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
      "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
      "type": "Bot",
      "site_admin": false
    },
    "created_at": "2022-01-31T10:14:07Z",
    "updated_at": "2022-01-31T10:14:07Z",
    "author_association": "NONE",
    "body": "This issue was closed due to inactivity. If you are still pursuing it, feel free to reopen it and respond to any feedback or request a review in a comment.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/1025576459/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
