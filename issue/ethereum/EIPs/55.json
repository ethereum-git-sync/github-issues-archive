{
  "url": "https://api.github.com/repos/ethereum/EIPs/issues/55",
  "repository_url": "https://api.github.com/repos/ethereum/EIPs",
  "labels_url": "https://api.github.com/repos/ethereum/EIPs/issues/55/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/EIPs/issues/55/comments",
  "events_url": "https://api.github.com/repos/ethereum/EIPs/issues/55/events",
  "html_url": "https://github.com/ethereum/EIPs/issues/55",
  "id": 126609688,
  "node_id": "MDU6SXNzdWUxMjY2MDk2ODg=",
  "number": 55,
  "title": "Yet another cool checksum address encoding",
  "user": {
    "login": "vbuterin",
    "id": 2230894,
    "node_id": "MDQ6VXNlcjIyMzA4OTQ=",
    "avatar_url": "https://avatars.githubusercontent.com/u/2230894?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vbuterin",
    "html_url": "https://github.com/vbuterin",
    "followers_url": "https://api.github.com/users/vbuterin/followers",
    "following_url": "https://api.github.com/users/vbuterin/following{/other_user}",
    "gists_url": "https://api.github.com/users/vbuterin/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vbuterin/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vbuterin/subscriptions",
    "organizations_url": "https://api.github.com/users/vbuterin/orgs",
    "repos_url": "https://api.github.com/users/vbuterin/repos",
    "events_url": "https://api.github.com/users/vbuterin/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vbuterin/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 76,
  "created_at": "2016-01-14T09:04:52Z",
  "updated_at": "2022-08-12T02:41:12Z",
  "closed_at": "2017-06-27T17:27:03Z",
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "EDITOR UPDATE (2017-08-24): This EIP is now located atÂ https://eips.ethereum.org/EIPS/eip-55. Please go there for the correct specification. The text below may be incorrect or outdated, and is not maintained.\r\n-----\r\n\r\nCode:\r\n\r\n``` python\r\ndef checksum_encode(addr): # Takes a 20-byte binary address as input\r\n    o = ''\r\n    v = utils.big_endian_to_int(utils.sha3(addr))\r\n    for i, c in enumerate(addr.encode('hex')):\r\n        if c in '0123456789':\r\n            o += c\r\n        else:\r\n            o += c.upper() if (v & (2**(255 - i))) else c.lower()\r\n    return '0x'+o\r\n```\r\n\r\nIn English, convert the address to hex, but if the ith digit is a letter (ie. it's one of `abcdef`) print it in uppercase if the ith bit of the hash of the address (in binary form) is 1 otherwise print it in lowercase.\r\n\r\nBenefits:\r\n- Backwards compatible with many hex parsers that accept mixed case, allowing it to be easily introduced over time\r\n- Keeps the length at 40 characters\r\n- ~~The average address will have 60 check bits, and less than 1 in 1 million addresses will have less than 32 check bits; this is stronger performance than nearly all other check schemes. Note that the very tiny chance that a given address will have very few check bits is dwarfed by the chance in any scheme that a bad address will randomly pass a check~~\r\n\r\nUPDATE: I was actually wrong in my math above. I forgot that the check bits are per-hex-character, not per-bit (facepalm). On average there will be 15 check bits per address, and the net probability that a randomly generated address if mistyped will accidentally pass a check is 0.0247%. This is a ~50x improvement over ICAP, but not as good as a 4-byte check code.\r\n\r\nExamples:\r\n- `0xCd2a3d9f938e13Cd947eC05ABC7fe734df8DD826` (the \"cow\" address)\r\n- `0x9Ca0e998dF92c5351cEcbBb6Dba82Ac2266f7e0C`\r\n- `0xcB16D0E54450Cdd2368476E762B09D147972b637`\r\n",
  "closed_by": {
    "login": "cdetrio",
    "id": 997681,
    "node_id": "MDQ6VXNlcjk5NzY4MQ==",
    "avatar_url": "https://avatars.githubusercontent.com/u/997681?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/cdetrio",
    "html_url": "https://github.com/cdetrio",
    "followers_url": "https://api.github.com/users/cdetrio/followers",
    "following_url": "https://api.github.com/users/cdetrio/following{/other_user}",
    "gists_url": "https://api.github.com/users/cdetrio/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/cdetrio/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/cdetrio/subscriptions",
    "organizations_url": "https://api.github.com/users/cdetrio/orgs",
    "repos_url": "https://api.github.com/users/cdetrio/repos",
    "events_url": "https://api.github.com/users/cdetrio/events{/privacy}",
    "received_events_url": "https://api.github.com/users/cdetrio/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/55/reactions",
    "total_count": 30,
    "+1": 23,
    "-1": 1,
    "laugh": 0,
    "hooray": 0,
    "confused": 1,
    "heart": 5,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/EIPs/issues/55/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/171607563",
    "html_url": "https://github.com/ethereum/EIPs/issues/55#issuecomment-171607563",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/55",
    "id": 171607563,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE3MTYwNzU2Mw==",
    "user": {
      "login": "chfast",
      "id": 573380,
      "node_id": "MDQ6VXNlcjU3MzM4MA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/573380?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chfast",
      "html_url": "https://github.com/chfast",
      "followers_url": "https://api.github.com/users/chfast/followers",
      "following_url": "https://api.github.com/users/chfast/following{/other_user}",
      "gists_url": "https://api.github.com/users/chfast/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chfast/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chfast/subscriptions",
      "organizations_url": "https://api.github.com/users/chfast/orgs",
      "repos_url": "https://api.github.com/users/chfast/repos",
      "events_url": "https://api.github.com/users/chfast/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chfast/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-01-14T10:41:12Z",
    "updated_at": "2016-01-14T10:41:12Z",
    "author_association": "MEMBER",
    "body": "This is very nice idea.\n\nI wander about the `0x` prefix. Is it mandatory or preferred?\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/171607563/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 1,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/171890669",
    "html_url": "https://github.com/ethereum/EIPs/issues/55#issuecomment-171890669",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/55",
    "id": 171890669,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE3MTg5MDY2OQ==",
    "user": {
      "login": "vbuterin",
      "id": 2230894,
      "node_id": "MDQ6VXNlcjIyMzA4OTQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2230894?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vbuterin",
      "html_url": "https://github.com/vbuterin",
      "followers_url": "https://api.github.com/users/vbuterin/followers",
      "following_url": "https://api.github.com/users/vbuterin/following{/other_user}",
      "gists_url": "https://api.github.com/users/vbuterin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vbuterin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vbuterin/subscriptions",
      "organizations_url": "https://api.github.com/users/vbuterin/orgs",
      "repos_url": "https://api.github.com/users/vbuterin/repos",
      "events_url": "https://api.github.com/users/vbuterin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vbuterin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-01-15T07:18:08Z",
    "updated_at": "2016-01-15T07:18:08Z",
    "author_association": "MEMBER",
    "body": "Hmm, I'm fine either way, though I definitely see the rationale for standardizing one way or the other.\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/171890669/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 1,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/171892479",
    "html_url": "https://github.com/ethereum/EIPs/issues/55#issuecomment-171892479",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/55",
    "id": 171892479,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE3MTg5MjQ3OQ==",
    "user": {
      "login": "Souptacular",
      "id": 3460120,
      "node_id": "MDQ6VXNlcjM0NjAxMjA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3460120?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Souptacular",
      "html_url": "https://github.com/Souptacular",
      "followers_url": "https://api.github.com/users/Souptacular/followers",
      "following_url": "https://api.github.com/users/Souptacular/following{/other_user}",
      "gists_url": "https://api.github.com/users/Souptacular/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Souptacular/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Souptacular/subscriptions",
      "organizations_url": "https://api.github.com/users/Souptacular/orgs",
      "repos_url": "https://api.github.com/users/Souptacular/repos",
      "events_url": "https://api.github.com/users/Souptacular/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Souptacular/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-01-15T07:26:13Z",
    "updated_at": "2016-01-15T07:27:47Z",
    "author_association": "MEMBER",
    "body": "I saw comments on the [TurboEthereum](https://gavofyork.gitbooks.io/turboethereum/content/ethkey.html) guide that suggested that we were moving away from raw hex keys into ICAP keys:\n\n> ICAP: XE472EVKU3CGMJF2YQ0J9RO1Y90BC0LDFZ\n> Raw hex: 0092e965928626f8880629cec353d3fd7ca5974f\n\n\"Notice the last two lines there. One is the ICAP address, the other is the raw hexadecimal address. The latter is an older representation of address that you'll sometimes see and is being phased out in favour of the shorter ICAP address which also includes a checksum to avoid problems with mistyping. All normal (aka direct) ICAP addresses begin with XE so you should be able to recognise them easily.\"\n\nMy concern is that if there was a previous decision to start moving to ICAP, I'm not sure if this will add confusion. However, if this helps give raw hex addresses a checksum I guess that can only be beneficial, even if everyone wants to move to ICAP eventually.\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/171892479/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 1,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/172363407",
    "html_url": "https://github.com/ethereum/EIPs/issues/55#issuecomment-172363407",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/55",
    "id": 172363407,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE3MjM2MzQwNw==",
    "user": {
      "login": "tgerring",
      "id": 731472,
      "node_id": "MDQ6VXNlcjczMTQ3Mg==",
      "avatar_url": "https://avatars.githubusercontent.com/u/731472?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tgerring",
      "html_url": "https://github.com/tgerring",
      "followers_url": "https://api.github.com/users/tgerring/followers",
      "following_url": "https://api.github.com/users/tgerring/following{/other_user}",
      "gists_url": "https://api.github.com/users/tgerring/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tgerring/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tgerring/subscriptions",
      "organizations_url": "https://api.github.com/users/tgerring/orgs",
      "repos_url": "https://api.github.com/users/tgerring/repos",
      "events_url": "https://api.github.com/users/tgerring/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tgerring/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-01-17T18:43:44Z",
    "updated_at": "2016-01-17T18:43:44Z",
    "author_association": "NONE",
    "body": "My preference is that a checksum-enabled Ethereum address is immediately recognizable as such. \n\nThe proposed solution is not immediately recognizable as being distinct from a standard Ethereum address and could be confused for being a strangely-cased version of non-checksummed addresses. Although it offers superior backwards compatibility, I believe will only cause additional confusion to the end-user.\n\nSince the change in format serves to make the address less error prone through checksums, I posit they should also be immediately recognizable through a fixed prefix or otherwise obvious identifier. One reason why I prefer ICAP over this proposed solution is that it signals to the user clearly that this is an Ethereum address and cannot be confused with a transaction/block hash.\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/172363407/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/185396357",
    "html_url": "https://github.com/ethereum/EIPs/issues/55#issuecomment-185396357",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/55",
    "id": 185396357,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE4NTM5NjM1Nw==",
    "user": {
      "login": "alexvandesande",
      "id": 112898,
      "node_id": "MDQ6VXNlcjExMjg5OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/112898?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/alexvandesande",
      "html_url": "https://github.com/alexvandesande",
      "followers_url": "https://api.github.com/users/alexvandesande/followers",
      "following_url": "https://api.github.com/users/alexvandesande/following{/other_user}",
      "gists_url": "https://api.github.com/users/alexvandesande/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/alexvandesande/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/alexvandesande/subscriptions",
      "organizations_url": "https://api.github.com/users/alexvandesande/orgs",
      "repos_url": "https://api.github.com/users/alexvandesande/repos",
      "events_url": "https://api.github.com/users/alexvandesande/events{/privacy}",
      "received_events_url": "https://api.github.com/users/alexvandesande/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-02-17T20:46:59Z",
    "updated_at": "2016-02-17T20:46:59Z",
    "author_association": "NONE",
    "body": "Just saw this proposal now. \n\nI disagree @tgerring that it will cause confusion: to a layman, it will be indistinguishable from a normal address. This approach is very easy to implement in the client side and doesnt require much. I would say this could be adopted as a great intermediary before ICAP â also would be a good alternative if ICAPs don't catch on.\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/185396357/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/185938403",
    "html_url": "https://github.com/ethereum/EIPs/issues/55#issuecomment-185938403",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/55",
    "id": 185938403,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE4NTkzODQwMw==",
    "user": {
      "login": "alexvandesande",
      "id": 112898,
      "node_id": "MDQ6VXNlcjExMjg5OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/112898?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/alexvandesande",
      "html_url": "https://github.com/alexvandesande",
      "followers_url": "https://api.github.com/users/alexvandesande/followers",
      "following_url": "https://api.github.com/users/alexvandesande/following{/other_user}",
      "gists_url": "https://api.github.com/users/alexvandesande/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/alexvandesande/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/alexvandesande/subscriptions",
      "organizations_url": "https://api.github.com/users/alexvandesande/orgs",
      "repos_url": "https://api.github.com/users/alexvandesande/repos",
      "events_url": "https://api.github.com/users/alexvandesande/events{/privacy}",
      "received_events_url": "https://api.github.com/users/alexvandesande/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-02-18T21:53:54Z",
    "updated_at": "2016-02-19T09:47:28Z",
    "author_association": "NONE",
    "body": "I did a rudimentary implementation on javascript in the web3 object:\n\n``` js\nvar isAddress = function (address) {\n    if (!/^(0x)?[0-9a-f]{40}$/i.test(address)) {\n        // check if it has the basic requirements of an address\n        return false;\n    } else if (/^(0x)?[0-9a-f]{40}$/.test(address) || /^(0x)?[0-9A-F]{40}$/.test(address)) {\n        // If it's all small caps or all all caps, return true\n        return true;\n    } else {\n        // Otherwise check each case\n        address = address.replace('0x','');\n\n        // creates the case map using the binary form of the hash of the address\n        var caseMap = parseInt(web3.sha3('0x'+address.toLowerCase()),16).toString(2).substring(0, 40);\n\n        for (var i = 0; i < 40; i++ ) { \n            // the nth letter should be uppercase if the nth digit of casemap is 1\n            if ((caseMap[i] == '1' && address[i].toUpperCase() != address[i])|| (caseMap[i] == '0' && address[i].toLowerCase() != address[i])) {\n                return false;\n            }\n        }\n        return true;\n    }\n};\n\n\n/**\n * Makes a checksum address\n *\n * @method toChecksumAddress\n * @param {String} address the given HEX adress\n * @return {String}\n*/\nvar toChecksumAddress = function (address) {\n\n    var checksumAddress = '0x';\n    address = address.toLowerCase().replace('0x','');\n\n    // creates the case map using the binary form of the hash of the address\n    var caseMap = parseInt(web3.sha3('0x'+address),16).toString(2).substring(0, 40);\n\n    for (var i = 0; i < address.length; i++ ) {  \n        if (caseMap[i] == '1') {\n          checksumAddress += address[i].toUpperCase();\n        } else {\n            checksumAddress += address[i];\n        }\n    }\n\n    console.log('create: ', address, caseMap, checksumAddress)\n    return checksumAddress;\n};\n```\n\nIt works internally and it's almost invisible to the user. I don't really see a good reason not to implement it. \nMy results don't match yours, @vbuterin it might be interesting to figure out why. Here are my results omitting the '0x' before hashing the address:\n- `0xCD2a3d9F938e13cd947Ec05AbC7fE734dF8dd826`\n- `0x9CA0E998df92C5351CeCBBb6DBa82Ac2266F7E0c`\n- `0xCb16d0e54450cDd2368476E762b09D147972B637`\n\nAnd here the results including `0x` on the hash of the address:\n- `0xCd2A3D9f938e13CD947ec05abC7Fe734dF8dd826`\n- `0x9Ca0e998DF92c5351CECbBb6DbA82ac2266F7e0C`\n- `0xCB16D0e54450cDD2368476e762b09d147972B637`\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/185938403/reactions",
      "total_count": 3,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/186215173",
    "html_url": "https://github.com/ethereum/EIPs/issues/55#issuecomment-186215173",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/55",
    "id": 186215173,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE4NjIxNTE3Mw==",
    "user": {
      "login": "alexvandesande",
      "id": 112898,
      "node_id": "MDQ6VXNlcjExMjg5OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/112898?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/alexvandesande",
      "html_url": "https://github.com/alexvandesande",
      "followers_url": "https://api.github.com/users/alexvandesande/followers",
      "following_url": "https://api.github.com/users/alexvandesande/following{/other_user}",
      "gists_url": "https://api.github.com/users/alexvandesande/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/alexvandesande/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/alexvandesande/subscriptions",
      "organizations_url": "https://api.github.com/users/alexvandesande/orgs",
      "repos_url": "https://api.github.com/users/alexvandesande/repos",
      "events_url": "https://api.github.com/users/alexvandesande/events{/privacy}",
      "received_events_url": "https://api.github.com/users/alexvandesande/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-02-19T13:37:04Z",
    "updated_at": "2016-02-19T13:37:13Z",
    "author_association": "NONE",
    "body": "Just pushed an experimental branch to [web3.js](https://github.com/ethereum/web3.js/tree/experimental-hex-checksum) and the [wallet](https://github.com/ethereum/meteor-dapp-wallet/tree/hex-checksum).\n\nI would love feedback from anyone on those.\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/186215173/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 1,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/186217650",
    "html_url": "https://github.com/ethereum/EIPs/issues/55#issuecomment-186217650",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/55",
    "id": 186217650,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE4NjIxNzY1MA==",
    "user": {
      "login": "vbuterin",
      "id": 2230894,
      "node_id": "MDQ6VXNlcjIyMzA4OTQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2230894?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vbuterin",
      "html_url": "https://github.com/vbuterin",
      "followers_url": "https://api.github.com/users/vbuterin/followers",
      "following_url": "https://api.github.com/users/vbuterin/following{/other_user}",
      "gists_url": "https://api.github.com/users/vbuterin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vbuterin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vbuterin/subscriptions",
      "organizations_url": "https://api.github.com/users/vbuterin/orgs",
      "repos_url": "https://api.github.com/users/vbuterin/repos",
      "events_url": "https://api.github.com/users/vbuterin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vbuterin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-02-19T13:44:08Z",
    "updated_at": "2016-02-19T13:44:08Z",
    "author_association": "MEMBER",
    "body": "> web3.sha3('0x'+address)\n\nYou're hashing the hex and not the binary.\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/186217650/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/186232596",
    "html_url": "https://github.com/ethereum/EIPs/issues/55#issuecomment-186232596",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/55",
    "id": 186232596,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE4NjIzMjU5Ng==",
    "user": {
      "login": "alexvandesande",
      "id": 112898,
      "node_id": "MDQ6VXNlcjExMjg5OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/112898?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/alexvandesande",
      "html_url": "https://github.com/alexvandesande",
      "followers_url": "https://api.github.com/users/alexvandesande/followers",
      "following_url": "https://api.github.com/users/alexvandesande/following{/other_user}",
      "gists_url": "https://api.github.com/users/alexvandesande/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/alexvandesande/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/alexvandesande/subscriptions",
      "organizations_url": "https://api.github.com/users/alexvandesande/orgs",
      "repos_url": "https://api.github.com/users/alexvandesande/repos",
      "events_url": "https://api.github.com/users/alexvandesande/events{/privacy}",
      "received_events_url": "https://api.github.com/users/alexvandesande/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-02-19T14:17:01Z",
    "updated_at": "2016-02-19T14:21:10Z",
    "author_association": "NONE",
    "body": "Good catch, I switched to the sha3 of the binary but the results still won't match. I'm a bit confused on what you meant by `# Takes a 20-byte binary address as input`. Ethereum addresses are 160 bits..\n\nFor example:\n- address: `0xcd2a3d9f938e13cd947ec05abc7fe734df8dd826` (why cow? What joke did I miss?)\n- To binary: `1100110100101010001111011001111110010011100011100001001111001101100101000111111011000000010110101011110001111111111001110011010011011111100011011101100000100110`\n- First 40 binary digits of the sha3 of the binary: `1110011101011010000000000110010011011010`\n- That means it should start with three uppercase letters, followed by 2 lowercases, followed by 3 upper etc: `0xCD2a3D9F938E13Cd947ec05abC7fe734DF8DD826` not `0xCd2a3d9f938e13Cd947eC05ABC7fe734df8DD826` in your example.\n\nI suppose I am misunderstanding what you are using as input..\n\nPS: you can probably simplify your example by not checking for letters: you can do uppercase conversions on numbers and although there [is such a thing as a lowercase digits](http://i.stack.imgur.com/W89P2.jpg) they are represented the same\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/186232596/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 1,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/186254514",
    "html_url": "https://github.com/ethereum/EIPs/issues/55#issuecomment-186254514",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/55",
    "id": 186254514,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE4NjI1NDUxNA==",
    "user": {
      "login": "vbuterin",
      "id": 2230894,
      "node_id": "MDQ6VXNlcjIyMzA4OTQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2230894?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vbuterin",
      "html_url": "https://github.com/vbuterin",
      "followers_url": "https://api.github.com/users/vbuterin/followers",
      "following_url": "https://api.github.com/users/vbuterin/following{/other_user}",
      "gists_url": "https://api.github.com/users/vbuterin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vbuterin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vbuterin/subscriptions",
      "organizations_url": "https://api.github.com/users/vbuterin/orgs",
      "repos_url": "https://api.github.com/users/vbuterin/repos",
      "events_url": "https://api.github.com/users/vbuterin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vbuterin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-02-19T15:13:02Z",
    "updated_at": "2016-02-19T15:13:57Z",
    "author_association": "MEMBER",
    "body": "```\n>>> from ethereum import utils\n>>> base_addr = utils.privtoaddr(utils.sha3('cow'))\n>>> base_addr\n'\\xcd*=\\x9f\\x93\\x8e\\x13\\xcd\\x94~\\xc0Z\\xbc\\x7f\\xe74\\xdf\\x8d\\xd8&'\n>>> utils.sha3(base_addr)\n'\\xa2\\x86)\\xe4\\x18A\\xcc^p(\\x99\"z\\x10\\xd8\\xfd}\\xeb\\xed\\x9c\\xe8\\x7fG\\xa9]\\xcc;\\xed\\xd9\\xa8\\xa4\\xef'\n```\n\nBy \"binary\" I meant \"just the raw bytes, not any kind of encoded representation\". There's also the special chars Â¹Â²Â³â´âµâ¶â·â¸â¹â° I suppose, but that's not backwards-compatible anymore.\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/186254514/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/186277651",
    "html_url": "https://github.com/ethereum/EIPs/issues/55#issuecomment-186277651",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/55",
    "id": 186277651,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE4NjI3NzY1MQ==",
    "user": {
      "login": "pipermerriam",
      "id": 824194,
      "node_id": "MDQ6VXNlcjgyNDE5NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/824194?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pipermerriam",
      "html_url": "https://github.com/pipermerriam",
      "followers_url": "https://api.github.com/users/pipermerriam/followers",
      "following_url": "https://api.github.com/users/pipermerriam/following{/other_user}",
      "gists_url": "https://api.github.com/users/pipermerriam/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pipermerriam/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pipermerriam/subscriptions",
      "organizations_url": "https://api.github.com/users/pipermerriam/orgs",
      "repos_url": "https://api.github.com/users/pipermerriam/repos",
      "events_url": "https://api.github.com/users/pipermerriam/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pipermerriam/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-02-19T16:04:24Z",
    "updated_at": "2016-02-19T16:04:24Z",
    "author_association": "MEMBER",
    "body": "I initially like this quite a bit.  All of the cons that I see are extreme edge cases and I think that it's pretty trivial for library authors to handle gracefully.  I like the backwards compatibility, the compatibility with existing hex parsing utilities. \n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/186277651/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/186286047",
    "html_url": "https://github.com/ethereum/EIPs/issues/55#issuecomment-186286047",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/55",
    "id": 186286047,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE4NjI4NjA0Nw==",
    "user": {
      "login": "alexvandesande",
      "id": 112898,
      "node_id": "MDQ6VXNlcjExMjg5OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/112898?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/alexvandesande",
      "html_url": "https://github.com/alexvandesande",
      "followers_url": "https://api.github.com/users/alexvandesande/followers",
      "following_url": "https://api.github.com/users/alexvandesande/following{/other_user}",
      "gists_url": "https://api.github.com/users/alexvandesande/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/alexvandesande/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/alexvandesande/subscriptions",
      "organizations_url": "https://api.github.com/users/alexvandesande/orgs",
      "repos_url": "https://api.github.com/users/alexvandesande/repos",
      "events_url": "https://api.github.com/users/alexvandesande/events{/privacy}",
      "received_events_url": "https://api.github.com/users/alexvandesande/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-02-19T16:24:53Z",
    "updated_at": "2016-02-19T16:25:03Z",
    "author_association": "NONE",
    "body": "> base_addr '\\xcd*=\\x9f\\x93\\x8e\\x13\\xcd\\x94~\\xc0Z\\xbc\\x7f\\xe74\\xdf\\x8d\\xd8&'\n\nI'm not sure if the web3.js coverts to bytes. Also, pure javascript only supports binary conversion up to a hard limit, any larger and I had to use the `BigNumber` library. Wouldn't it be simpler just to use `sha3(address)`? \n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/186286047/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/186291113",
    "html_url": "https://github.com/ethereum/EIPs/issues/55#issuecomment-186291113",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/55",
    "id": 186291113,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE4NjI5MTExMw==",
    "user": {
      "login": "vbuterin",
      "id": 2230894,
      "node_id": "MDQ6VXNlcjIyMzA4OTQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2230894?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vbuterin",
      "html_url": "https://github.com/vbuterin",
      "followers_url": "https://api.github.com/users/vbuterin/followers",
      "following_url": "https://api.github.com/users/vbuterin/following{/other_user}",
      "gists_url": "https://api.github.com/users/vbuterin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vbuterin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vbuterin/subscriptions",
      "organizations_url": "https://api.github.com/users/vbuterin/orgs",
      "repos_url": "https://api.github.com/users/vbuterin/repos",
      "events_url": "https://api.github.com/users/vbuterin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vbuterin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-02-19T16:36:46Z",
    "updated_at": "2016-02-19T16:36:46Z",
    "author_association": "MEMBER",
    "body": "> Wouldn't it be simpler just to use sha3(address)? \n\nMathematically speaking it would be a bit ugly imo.\n\n> I'm not sure if the web3.js coverts to bytes\n\nYeah, I had this problem; for one of my example gambling dapps where I was using a hash-commit-reveal protocol I took an existing sha3 impl; you could do the same: https://github.com/ethereum/dapp-bin/blob/master/serpent_gamble/scripts/sha3.min.js\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/186291113/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/186308936",
    "html_url": "https://github.com/ethereum/EIPs/issues/55#issuecomment-186308936",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/55",
    "id": 186308936,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE4NjMwODkzNg==",
    "user": {
      "login": "simenfd",
      "id": 11774591,
      "node_id": "MDQ6VXNlcjExNzc0NTkx",
      "avatar_url": "https://avatars.githubusercontent.com/u/11774591?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/simenfd",
      "html_url": "https://github.com/simenfd",
      "followers_url": "https://api.github.com/users/simenfd/followers",
      "following_url": "https://api.github.com/users/simenfd/following{/other_user}",
      "gists_url": "https://api.github.com/users/simenfd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/simenfd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/simenfd/subscriptions",
      "organizations_url": "https://api.github.com/users/simenfd/orgs",
      "repos_url": "https://api.github.com/users/simenfd/repos",
      "events_url": "https://api.github.com/users/simenfd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/simenfd/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-02-19T17:11:50Z",
    "updated_at": "2016-02-19T19:06:29Z",
    "author_association": "NONE",
    "body": "I see some problems with ICAP's variable length and low checksum bitsize:\n\n\"XE7338O073KYGTWWZN0F2WZ0R8PX5ZPPZS\":  This is a 30 charaters address, IBAN compatible, based on the \"Direct approach\" from https://github.com/ethereum/wiki/wiki/ICAP:-Inter-exchange-Client-Address-Protocol\n\nNow, If you enter such an address, and accidentally add another character somewhere, you have created a \"Basic\" (incompatible, but allowed and valid in ethereum ICAP implementation).  The problem is that naively, without knowing all properties of the checksum algorithm, there is a 1% chance this will pass validation, and consequently you are sending money into a black hole.\n\nOn the topic of checksums in hex addresses: \n0xCd2a3d9f938e13Cd947eC05ABC7fe734df8DD826\n\nI agree that there should be some easy identification mechanism to separate it from an unchecked address. Alternatives might include:\nXxCd2a3d9f938e13Cd947eC05ABC7fe734df8DD826\nExCd2a3d9f938e13Cd947eC05ABC7fe734df8DD826\n#Cd2a3d9f938e13Cd947eC05ABC7fe734df8DD826\n\nThis makes it not completely backwards compatilble, but increadably easy to edit to satisfy a legacy system without any checksums.\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/186308936/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/186316805",
    "html_url": "https://github.com/ethereum/EIPs/issues/55#issuecomment-186316805",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/55",
    "id": 186316805,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE4NjMxNjgwNQ==",
    "user": {
      "login": "alexvandesande",
      "id": 112898,
      "node_id": "MDQ6VXNlcjExMjg5OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/112898?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/alexvandesande",
      "html_url": "https://github.com/alexvandesande",
      "followers_url": "https://api.github.com/users/alexvandesande/followers",
      "following_url": "https://api.github.com/users/alexvandesande/following{/other_user}",
      "gists_url": "https://api.github.com/users/alexvandesande/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/alexvandesande/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/alexvandesande/subscriptions",
      "organizations_url": "https://api.github.com/users/alexvandesande/orgs",
      "repos_url": "https://api.github.com/users/alexvandesande/repos",
      "events_url": "https://api.github.com/users/alexvandesande/events{/privacy}",
      "received_events_url": "https://api.github.com/users/alexvandesande/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-02-19T17:30:01Z",
    "updated_at": "2016-02-19T17:30:26Z",
    "author_association": "NONE",
    "body": "@simenfd _there should be some easy identification mechanism to separate it from an uncheck address._\n\nI disagree. I think the whole point of this scheme is that it's completely backwards compatible. There's no point in separating them. In my implementation, if the address is all caps or all small caps then it assumes to be a unchecksummed address. In a 40 char address, there will be in average 15 letters, the chances of all of them being the same case is 1:16384 so I guess it's strong enough.\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/186316805/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/186321010",
    "html_url": "https://github.com/ethereum/EIPs/issues/55#issuecomment-186321010",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/55",
    "id": 186321010,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE4NjMyMTAxMA==",
    "user": {
      "login": "pipermerriam",
      "id": 824194,
      "node_id": "MDQ6VXNlcjgyNDE5NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/824194?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pipermerriam",
      "html_url": "https://github.com/pipermerriam",
      "followers_url": "https://api.github.com/users/pipermerriam/followers",
      "following_url": "https://api.github.com/users/pipermerriam/following{/other_user}",
      "gists_url": "https://api.github.com/users/pipermerriam/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pipermerriam/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pipermerriam/subscriptions",
      "organizations_url": "https://api.github.com/users/pipermerriam/orgs",
      "repos_url": "https://api.github.com/users/pipermerriam/repos",
      "events_url": "https://api.github.com/users/pipermerriam/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pipermerriam/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-02-19T17:38:28Z",
    "updated_at": "2016-02-19T17:38:28Z",
    "author_association": "MEMBER",
    "body": "> the chances of all of them being the same case is 1:16384\n\nThat was exactly my line of thinking as well.  It's _safe enough_ to assume that all caps or all lower addresses are not checksummed.\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/186321010/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/186321417",
    "html_url": "https://github.com/ethereum/EIPs/issues/55#issuecomment-186321417",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/55",
    "id": 186321417,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE4NjMyMTQxNw==",
    "user": {
      "login": "christianlundkvist",
      "id": 6892901,
      "node_id": "MDQ6VXNlcjY4OTI5MDE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6892901?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/christianlundkvist",
      "html_url": "https://github.com/christianlundkvist",
      "followers_url": "https://api.github.com/users/christianlundkvist/followers",
      "following_url": "https://api.github.com/users/christianlundkvist/following{/other_user}",
      "gists_url": "https://api.github.com/users/christianlundkvist/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/christianlundkvist/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/christianlundkvist/subscriptions",
      "organizations_url": "https://api.github.com/users/christianlundkvist/orgs",
      "repos_url": "https://api.github.com/users/christianlundkvist/repos",
      "events_url": "https://api.github.com/users/christianlundkvist/events{/privacy}",
      "received_events_url": "https://api.github.com/users/christianlundkvist/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-02-19T17:39:34Z",
    "updated_at": "2016-02-19T17:39:34Z",
    "author_association": "NONE",
    "body": "The backwards compatibility is nice but IMO presents a clear danger: If the user believes that the address has a checksum she might be willing to input an address by hand. If she then happens to use an old version of transaction handling that just parses the hex ignoring the case then her funds are lost in the case of a typo.\n\nFor this reason my feeling is that I prefer a scheme that would make a normal hex parser throw an error, rather than a user thinking she's protected by a checksum when in fact she is not.\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/186321417/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/186338550",
    "html_url": "https://github.com/ethereum/EIPs/issues/55#issuecomment-186338550",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/55",
    "id": 186338550,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE4NjMzODU1MA==",
    "user": {
      "login": "alexvandesande",
      "id": 112898,
      "node_id": "MDQ6VXNlcjExMjg5OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/112898?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/alexvandesande",
      "html_url": "https://github.com/alexvandesande",
      "followers_url": "https://api.github.com/users/alexvandesande/followers",
      "following_url": "https://api.github.com/users/alexvandesande/following{/other_user}",
      "gists_url": "https://api.github.com/users/alexvandesande/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/alexvandesande/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/alexvandesande/subscriptions",
      "organizations_url": "https://api.github.com/users/alexvandesande/orgs",
      "repos_url": "https://api.github.com/users/alexvandesande/repos",
      "events_url": "https://api.github.com/users/alexvandesande/events{/privacy}",
      "received_events_url": "https://api.github.com/users/alexvandesande/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-02-19T18:11:01Z",
    "updated_at": "2016-02-19T18:11:01Z",
    "author_association": "NONE",
    "body": "@christianlundkvist that's a good point, which can be solved with UI: show red when it fails, show yellow when it's not checksummed.\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/186338550/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/186350694",
    "html_url": "https://github.com/ethereum/EIPs/issues/55#issuecomment-186350694",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/55",
    "id": 186350694,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE4NjM1MDY5NA==",
    "user": {
      "login": "simenfd",
      "id": 11774591,
      "node_id": "MDQ6VXNlcjExNzc0NTkx",
      "avatar_url": "https://avatars.githubusercontent.com/u/11774591?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/simenfd",
      "html_url": "https://github.com/simenfd",
      "followers_url": "https://api.github.com/users/simenfd/followers",
      "following_url": "https://api.github.com/users/simenfd/following{/other_user}",
      "gists_url": "https://api.github.com/users/simenfd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/simenfd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/simenfd/subscriptions",
      "organizations_url": "https://api.github.com/users/simenfd/orgs",
      "repos_url": "https://api.github.com/users/simenfd/repos",
      "events_url": "https://api.github.com/users/simenfd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/simenfd/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-02-19T18:28:14Z",
    "updated_at": "2016-02-19T19:07:16Z",
    "author_association": "NONE",
    "body": "@christianlundkvist Exactly my point: False security might be more dangerous than no security. E.g. when I enter a bitcoin address by hand (yeah, quite rarely), I am quite confident that the system will capture an error with the 32bit checksum that is universally implemented there; I wish I will get this confidence in ethereum as well.\n\nFor fun, I tried to make some ICAP addresses, using the functions in the go-ethereum implementation.  The first two in bold are the original addresses, and the ICAP, the remaining are all ICAP mutation-addresses that validate, but of course, are different addresses.\n **0x11c5496aee77c1ba1f0854206a26dda82a81d6d8 == XE1222Q908LN1QBBU6XUQSO1OHWJIOS46OO**\n\n XE1222Q908LN1QBBU6XUQSO1OHWJIOS4603\n XE1222Q908LN1QBBU6XUQSO1OHWJIOS4700\n XE1222Q908LN1QBBU6XUQSO1OHWJIOS48IO\n XE1222Q908LN1QBBU6XUQSO1OHWJIOS49FO\n XE1222Q908LN1QBBU6XUQSO1OHWJIOS5AO5\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/186350694/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/186369368",
    "html_url": "https://github.com/ethereum/EIPs/issues/55#issuecomment-186369368",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/55",
    "id": 186369368,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE4NjM2OTM2OA==",
    "user": {
      "login": "christianlundkvist",
      "id": 6892901,
      "node_id": "MDQ6VXNlcjY4OTI5MDE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6892901?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/christianlundkvist",
      "html_url": "https://github.com/christianlundkvist",
      "followers_url": "https://api.github.com/users/christianlundkvist/followers",
      "following_url": "https://api.github.com/users/christianlundkvist/following{/other_user}",
      "gists_url": "https://api.github.com/users/christianlundkvist/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/christianlundkvist/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/christianlundkvist/subscriptions",
      "organizations_url": "https://api.github.com/users/christianlundkvist/orgs",
      "repos_url": "https://api.github.com/users/christianlundkvist/repos",
      "events_url": "https://api.github.com/users/christianlundkvist/events{/privacy}",
      "received_events_url": "https://api.github.com/users/christianlundkvist/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-02-19T19:29:02Z",
    "updated_at": "2016-02-19T19:29:23Z",
    "author_association": "NONE",
    "body": "@alexvandesande: My main point was that backwards compatibility allows you to use the address in a dapp that was created before this EIP. So the UI in this case wouldn't know anything about checksummed addresses and wouldn't give the user any specific warning. If the user receives an address like `0xCd2a3d9f938e13Cd947eC05ABC7fe734df8DD826` they would think \"sweet, it's checksummed!\" and type it by hand into an app which hasn't been updated, and lose Ether when they make a typo.\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/186369368/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/186372902",
    "html_url": "https://github.com/ethereum/EIPs/issues/55#issuecomment-186372902",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/55",
    "id": 186372902,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE4NjM3MjkwMg==",
    "user": {
      "login": "pipermerriam",
      "id": 824194,
      "node_id": "MDQ6VXNlcjgyNDE5NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/824194?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pipermerriam",
      "html_url": "https://github.com/pipermerriam",
      "followers_url": "https://api.github.com/users/pipermerriam/followers",
      "following_url": "https://api.github.com/users/pipermerriam/following{/other_user}",
      "gists_url": "https://api.github.com/users/pipermerriam/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pipermerriam/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pipermerriam/subscriptions",
      "organizations_url": "https://api.github.com/users/pipermerriam/orgs",
      "repos_url": "https://api.github.com/users/pipermerriam/repos",
      "events_url": "https://api.github.com/users/pipermerriam/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pipermerriam/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-02-19T19:41:22Z",
    "updated_at": "2016-02-19T19:41:55Z",
    "author_association": "MEMBER",
    "body": "I'd like to challenge the idea that we should pay much attention to the \"type it in by hand\" use cases.  If the ecosystem matures then we'll have good tooling around QR-code based transmission of addresses or something else that's even better UX.\n\n> If the user receives an address like `0xCd2a3d9f938e13Cd947eC05ABC7fe734df8DD826` they would think \"sweet, it's checksummed!\" and type it by hand into an app which hasn't been updated, and lose Ether\n\nThe only way to avoid this situation is to have checksummed addresses be backwards incompatible.  I'm of the opinion that backwards incompatibility is worse than cases where someone burns ether using an app that doesn't implement checksumming using an address that \"looks\" like it's checksummed.  I think this situation is likely to be rare and to largely apply to using _old_ software from before the checksum days, or poorly written software.\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/186372902/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/186378777",
    "html_url": "https://github.com/ethereum/EIPs/issues/55#issuecomment-186378777",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/55",
    "id": 186378777,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE4NjM3ODc3Nw==",
    "user": {
      "login": "christianlundkvist",
      "id": 6892901,
      "node_id": "MDQ6VXNlcjY4OTI5MDE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6892901?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/christianlundkvist",
      "html_url": "https://github.com/christianlundkvist",
      "followers_url": "https://api.github.com/users/christianlundkvist/followers",
      "following_url": "https://api.github.com/users/christianlundkvist/following{/other_user}",
      "gists_url": "https://api.github.com/users/christianlundkvist/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/christianlundkvist/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/christianlundkvist/subscriptions",
      "organizations_url": "https://api.github.com/users/christianlundkvist/orgs",
      "repos_url": "https://api.github.com/users/christianlundkvist/repos",
      "events_url": "https://api.github.com/users/christianlundkvist/events{/privacy}",
      "received_events_url": "https://api.github.com/users/christianlundkvist/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-02-19T19:55:58Z",
    "updated_at": "2016-02-19T19:55:58Z",
    "author_association": "NONE",
    "body": "@pipermerriam:\n\n> I'd like to challenge the idea that we should pay much attention to the \"type it in by hand\" use cases. \n\nIn that case do you think we should not worry about checksumming at all? Are there other scenarios where checksums are used?\n\n> The only way to avoid this situation is to have checksummed addresses be backwards incompatible.\n\nI feel like this would be preferred.\n\n> I think this situation is likely to be rare and to largely apply to using old software from before the checksum days, or poorly written software.\n\nMy view is that the moment the checksum is introduced a majority of software becomes old software, and people are notoriously slow at updating too...\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/186378777/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/186383422",
    "html_url": "https://github.com/ethereum/EIPs/issues/55#issuecomment-186383422",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/55",
    "id": 186383422,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE4NjM4MzQyMg==",
    "user": {
      "login": "pipermerriam",
      "id": 824194,
      "node_id": "MDQ6VXNlcjgyNDE5NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/824194?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pipermerriam",
      "html_url": "https://github.com/pipermerriam",
      "followers_url": "https://api.github.com/users/pipermerriam/followers",
      "following_url": "https://api.github.com/users/pipermerriam/following{/other_user}",
      "gists_url": "https://api.github.com/users/pipermerriam/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pipermerriam/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pipermerriam/subscriptions",
      "organizations_url": "https://api.github.com/users/pipermerriam/orgs",
      "repos_url": "https://api.github.com/users/pipermerriam/repos",
      "events_url": "https://api.github.com/users/pipermerriam/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pipermerriam/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-02-19T20:08:56Z",
    "updated_at": "2016-02-19T20:08:56Z",
    "author_association": "MEMBER",
    "body": "> In that case do you think we should not worry about checksumming at all? Are there other scenarios where checksums are used?\n\nMy point was that I believe the type-by-hand use case is a small corner case where the user is potentially already doing something questionable.  We can still apply checksums to these, but I am of the opinion that we don't need to cater to this use case.\n\nAs for the other stuff, I don't have very strong opinions on the matter.  Backwards compatibility seems nice but I see the validity in the idea that a breaking change is also a way to achieve a level of security in the area since it removes ambiguity.\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/186383422/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/186475259",
    "html_url": "https://github.com/ethereum/EIPs/issues/55#issuecomment-186475259",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/55",
    "id": 186475259,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE4NjQ3NTI1OQ==",
    "user": {
      "login": "alexvandesande",
      "id": 112898,
      "node_id": "MDQ6VXNlcjExMjg5OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/112898?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/alexvandesande",
      "html_url": "https://github.com/alexvandesande",
      "followers_url": "https://api.github.com/users/alexvandesande/followers",
      "following_url": "https://api.github.com/users/alexvandesande/following{/other_user}",
      "gists_url": "https://api.github.com/users/alexvandesande/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/alexvandesande/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/alexvandesande/subscriptions",
      "organizations_url": "https://api.github.com/users/alexvandesande/orgs",
      "repos_url": "https://api.github.com/users/alexvandesande/repos",
      "events_url": "https://api.github.com/users/alexvandesande/events{/privacy}",
      "received_events_url": "https://api.github.com/users/alexvandesande/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-02-20T01:24:09Z",
    "updated_at": "2016-02-20T01:24:09Z",
    "author_association": "NONE",
    "body": "I don't believe we can expect any users to realize the difference between a check summed address and a normal one (most people don't realize this even for bank accounts when the last digit is separated like12345-7), this is not the point of the checksum. \n\nThe point of backwards of compatibility is that transactions between checksum enabled wallets are safer. If you make a typo in a non checksum enabled wallet you'll lose your ether, just like you do now, and it's that particular wallet's developer job to make that client more secure. \n\nAlso, I don't think copying by hand is the main situation here, if we were trying to optimize that then we should be talking about pseudo-word seeds and name registries. Checksums are just extra securities against accidental typos, letters that were cut out by copying the wrong digit and are an extra assurance to the user that the address is still intact, just like the icon is. \n\nI don't really see any disadvantage of adding these are they were very simple to implement to web3.js\n\nAlthough I still haven't matched the initial implementation, probably because basic primitives on Python are very different than what JavaScript comes up with. Since a lot of implementations will be JavaScript I still think it makes more sense to use the sha of the hex, since that's how it comes to the library.. \n\n> On Feb 19, 2016, at 18:08, Piper Merriam notifications@github.com wrote:\n> \n> In that case do you think we should not worry about checksumming at all? Are there other scenarios where checksums are used?\n> \n> My point was that I believe the type-by-hand use case is a small corner case where the user is potentially already doing something questionable. We can still apply checksums to these, but I am of the opinion that we don't need to cater to this use case.\n> \n> As for the other stuff, I don't have very strong opinions on the matter. Backwards compatibility seems nice but I see the validity in the idea that a breaking change is also a way to achieve a level of security in the area since it removes ambiguity.\n> \n> â\n> Reply to this email directly or view it on GitHub.\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/186475259/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/186494869",
    "html_url": "https://github.com/ethereum/EIPs/issues/55#issuecomment-186494869",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/55",
    "id": 186494869,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE4NjQ5NDg2OQ==",
    "user": {
      "login": "christianlundkvist",
      "id": 6892901,
      "node_id": "MDQ6VXNlcjY4OTI5MDE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6892901?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/christianlundkvist",
      "html_url": "https://github.com/christianlundkvist",
      "followers_url": "https://api.github.com/users/christianlundkvist/followers",
      "following_url": "https://api.github.com/users/christianlundkvist/following{/other_user}",
      "gists_url": "https://api.github.com/users/christianlundkvist/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/christianlundkvist/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/christianlundkvist/subscriptions",
      "organizations_url": "https://api.github.com/users/christianlundkvist/orgs",
      "repos_url": "https://api.github.com/users/christianlundkvist/repos",
      "events_url": "https://api.github.com/users/christianlundkvist/events{/privacy}",
      "received_events_url": "https://api.github.com/users/christianlundkvist/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-02-20T03:07:27Z",
    "updated_at": "2016-02-20T03:07:27Z",
    "author_association": "NONE",
    "body": "I don't really feel very strongly either way TBH and the design of this particular checksum scheme is actually super cool. ð\nThinking about my own interactions it's the need to always tell people to NEVER EVER type in an address by hand that gets annoying. But you are right @alexvandesande that as long as I update my own tools to use checksums I don't have to give people this advice anymore when advising them on using the tools that I build. ð\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/186494869/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/186512304",
    "html_url": "https://github.com/ethereum/EIPs/issues/55#issuecomment-186512304",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/55",
    "id": 186512304,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE4NjUxMjMwNA==",
    "user": {
      "login": "ethernomad",
      "id": 161566,
      "node_id": "MDQ6VXNlcjE2MTU2Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/161566?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ethernomad",
      "html_url": "https://github.com/ethernomad",
      "followers_url": "https://api.github.com/users/ethernomad/followers",
      "following_url": "https://api.github.com/users/ethernomad/following{/other_user}",
      "gists_url": "https://api.github.com/users/ethernomad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ethernomad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ethernomad/subscriptions",
      "organizations_url": "https://api.github.com/users/ethernomad/orgs",
      "repos_url": "https://api.github.com/users/ethernomad/repos",
      "events_url": "https://api.github.com/users/ethernomad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ethernomad/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-02-20T05:08:27Z",
    "updated_at": "2016-02-20T05:08:27Z",
    "author_association": "NONE",
    "body": "Any reason we don't use good old base 58?\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/186512304/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/186576075",
    "html_url": "https://github.com/ethereum/EIPs/issues/55#issuecomment-186576075",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/55",
    "id": 186576075,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE4NjU3NjA3NQ==",
    "user": {
      "login": "alexvandesande",
      "id": 112898,
      "node_id": "MDQ6VXNlcjExMjg5OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/112898?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/alexvandesande",
      "html_url": "https://github.com/alexvandesande",
      "followers_url": "https://api.github.com/users/alexvandesande/followers",
      "following_url": "https://api.github.com/users/alexvandesande/following{/other_user}",
      "gists_url": "https://api.github.com/users/alexvandesande/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/alexvandesande/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/alexvandesande/subscriptions",
      "organizations_url": "https://api.github.com/users/alexvandesande/orgs",
      "repos_url": "https://api.github.com/users/alexvandesande/repos",
      "events_url": "https://api.github.com/users/alexvandesande/events{/privacy}",
      "received_events_url": "https://api.github.com/users/alexvandesande/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-02-20T11:32:55Z",
    "updated_at": "2016-02-20T11:32:55Z",
    "author_association": "NONE",
    "body": "Jonathan: This would break backwards compatibility. We already have a proposed standard without backwards compatibility that adopts more characters it's called IBAN\n\nSent from my iPhone\n\n> On Feb 20, 2016, at 03:08, Jonathan Brown notifications@github.com wrote:\n> \n> Any reason we don't use good old base 58?\n> \n> â\n> Reply to this email directly or view it on GitHub.\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/186576075/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/186614582",
    "html_url": "https://github.com/ethereum/EIPs/issues/55#issuecomment-186614582",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/55",
    "id": 186614582,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE4NjYxNDU4Mg==",
    "user": {
      "login": "taoteh1221",
      "id": 1760489,
      "node_id": "MDQ6VXNlcjE3NjA0ODk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1760489?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/taoteh1221",
      "html_url": "https://github.com/taoteh1221",
      "followers_url": "https://api.github.com/users/taoteh1221/followers",
      "following_url": "https://api.github.com/users/taoteh1221/following{/other_user}",
      "gists_url": "https://api.github.com/users/taoteh1221/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/taoteh1221/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/taoteh1221/subscriptions",
      "organizations_url": "https://api.github.com/users/taoteh1221/orgs",
      "repos_url": "https://api.github.com/users/taoteh1221/repos",
      "events_url": "https://api.github.com/users/taoteh1221/events{/privacy}",
      "received_events_url": "https://api.github.com/users/taoteh1221/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-02-20T14:26:08Z",
    "updated_at": "2016-02-20T14:26:08Z",
    "author_association": "NONE",
    "body": "Just chiming in as a web2 dev mostly being an observer (of your work _and_ of end users discussions): If you look at the Ethereum subreddit these days there are a _ton_ of new adopters with _no_ tech experience at all trying to find out how to use Ethereum. In short, I believe _anything_ including typing addresses by hand _should be expected_. I remember seeing twitter pinned tweets in 2014 with _images_ (not text) of dogecoin addresses for charities etc. A lot of adopters may barely know their way around a computer at all, and I think if you accomplish retaining them you are a raging success and have what is needed for mass adoption.\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/186614582/reactions",
      "total_count": 3,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/186657343",
    "html_url": "https://github.com/ethereum/EIPs/issues/55#issuecomment-186657343",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/55",
    "id": 186657343,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE4NjY1NzM0Mw==",
    "user": {
      "login": "alexvandesande",
      "id": 112898,
      "node_id": "MDQ6VXNlcjExMjg5OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/112898?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/alexvandesande",
      "html_url": "https://github.com/alexvandesande",
      "followers_url": "https://api.github.com/users/alexvandesande/followers",
      "following_url": "https://api.github.com/users/alexvandesande/following{/other_user}",
      "gists_url": "https://api.github.com/users/alexvandesande/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/alexvandesande/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/alexvandesande/subscriptions",
      "organizations_url": "https://api.github.com/users/alexvandesande/orgs",
      "repos_url": "https://api.github.com/users/alexvandesande/repos",
      "events_url": "https://api.github.com/users/alexvandesande/events{/privacy}",
      "received_events_url": "https://api.github.com/users/alexvandesande/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-02-20T17:34:03Z",
    "updated_at": "2016-02-20T17:34:03Z",
    "author_association": "NONE",
    "body": "Agree. And adding a case sensitive checksum increases security for those cases, while being invisible for implementations that don't support it \n\n> On Feb 20, 2016, at 12:26, Michael Kilday notifications@github.com wrote:\n> \n> Just chiming in as a web2 dev mostly being an observer (of your work and of end users discussions): If you look at the Ethereum subreddit these days there are a ton of new adopters with no tech experience at all trying to find out how to use Ethereum. In short, I believe anything including typing addresses by hand should be expected. I remember seeing twitter pinned tweets in 2014 with images (not text) of dogecoin addresses for charities etc. A lot of adopters may barely know their way around a computer at all, and I think if you accomplish retaining them you are a raging success and have what is needed for mass adoption.\n> \n> â\n> Reply to this email directly or view it on GitHub.\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/186657343/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/186696692",
    "html_url": "https://github.com/ethereum/EIPs/issues/55#issuecomment-186696692",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/55",
    "id": 186696692,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE4NjY5NjY5Mg==",
    "user": {
      "login": "jprichardson",
      "id": 150063,
      "node_id": "MDQ6VXNlcjE1MDA2Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/150063?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jprichardson",
      "html_url": "https://github.com/jprichardson",
      "followers_url": "https://api.github.com/users/jprichardson/followers",
      "following_url": "https://api.github.com/users/jprichardson/following{/other_user}",
      "gists_url": "https://api.github.com/users/jprichardson/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jprichardson/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jprichardson/subscriptions",
      "organizations_url": "https://api.github.com/users/jprichardson/orgs",
      "repos_url": "https://api.github.com/users/jprichardson/repos",
      "events_url": "https://api.github.com/users/jprichardson/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jprichardson/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-02-20T22:51:59Z",
    "updated_at": "2016-02-20T22:51:59Z",
    "author_association": "NONE",
    "body": "> Jonathan: This would break backwards compatibility. We already have a proposed standard without backwards compatibility that adopts more characters it's called IBAN\n\nThe IBAN / ICAP proposal is pretty bad though for those of us who want to use any wallet w/ HD capabilities. If you want HD, you can't have compatible IBAN/ICAP addresses in which case, you might as well just pick something else. Base58-check encoding is a good compromise that's familiar and easy to implement.\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/186696692/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
