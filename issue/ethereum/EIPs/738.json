{
  "url": "https://api.github.com/repos/ethereum/EIPs/issues/738",
  "repository_url": "https://api.github.com/repos/ethereum/EIPs",
  "labels_url": "https://api.github.com/repos/ethereum/EIPs/issues/738/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/EIPs/issues/738/comments",
  "events_url": "https://api.github.com/repos/ethereum/EIPs/issues/738/events",
  "html_url": "https://github.com/ethereum/EIPs/issues/738",
  "id": 264860977,
  "node_id": "MDU6SXNzdWUyNjQ4NjA5Nzc=",
  "number": 738,
  "title": "Resolution on the EIP20 API Approve / TransferFrom multiple withdrawal attack",
  "user": {
    "login": "HaleTom",
    "id": 13854417,
    "node_id": "MDQ6VXNlcjEzODU0NDE3",
    "avatar_url": "https://avatars.githubusercontent.com/u/13854417?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/HaleTom",
    "html_url": "https://github.com/HaleTom",
    "followers_url": "https://api.github.com/users/HaleTom/followers",
    "following_url": "https://api.github.com/users/HaleTom/following{/other_user}",
    "gists_url": "https://api.github.com/users/HaleTom/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/HaleTom/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/HaleTom/subscriptions",
    "organizations_url": "https://api.github.com/users/HaleTom/orgs",
    "repos_url": "https://api.github.com/users/HaleTom/repos",
    "events_url": "https://api.github.com/users/HaleTom/events{/privacy}",
    "received_events_url": "https://api.github.com/users/HaleTom/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 2328627851,
      "node_id": "MDU6TGFiZWwyMzI4NjI3ODUx",
      "url": "https://api.github.com/repos/ethereum/EIPs/labels/stale",
      "name": "stale",
      "color": "000000",
      "default": false,
      "description": ""
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 13,
  "created_at": "2017-10-12T08:50:49Z",
  "updated_at": "2022-01-04T18:13:24Z",
  "closed_at": "2022-01-04T18:13:24Z",
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "#I raise this as a separate issue as I can't see a definitive resolution after it was [initially posted here](https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729). The thread of the issue is hard to follow because of the intermingled comments about non-related parts of the ERC20 standard.\r\n\r\nPlease close this issue if you believe that it should be posted as a comment on EIP20 itself and I will take that as a hint to move the discussion there.\r\n\r\nBut perhaps keeping separate issues for security related issues is warranted so that a single thread can be followed, months down the track. For example, the issue was raised on 29 Nov 2016, and the latest comment is on [17 June 2017](https://github.com/ethereum/EIPs/issues/20#issuecomment-309181053) -- it's nigh on impossible to follow the thread between those two dates with the interspersed other comments and references.\r\n\r\n### Prevent EIP20 API Approve / TransferFrom multiple withdrawal attack\r\n\r\nI seek clarity on how to effectively prevent the double withdrawal attack described in [ERC20 API: An Attack Vector on Approve/TransferFrom Methods](https://docs.google.com/document/d/1YLPtQxZu1UAvO9cZ1O2RPXBbT0mooh4DYKjA_jp-RLM/edit#)\r\n\r\nSummary / example of the attack:\r\n> 1. Alice allows Bob to transfer N of Alice's tokens (N>0)  by calling approve method on Token smart contract passing Bob's address and N as method arguments\r\n>1. After some time, Alice decides to change from N to M (M>0) the number of Alice's tokens Bob is allowed to transfer, so she calls approve method again, this time passing Bob's address and M as method arguments\r\n>1. Bob notices Alice's second transaction before it was mined and quickly sends another transaction that calls transferFrom method to transfer N Alice's tokens somewhere\r\n>1. If Bob's transaction will be executed before Alice's transaction, then Bob will successfully transfer N Alice's tokens and will gain an ability to transfer another M tokens\r\n>1. Before Alice noticed that something went wrong, Bob calls transferFrom method again, this time to transfer M Alice's tokens.\r\n>\r\n>So, Alice's attempt to change Bob's allowance from N to M (N>0 and M>0) made it possible for Bob to transfer N+M of Alice's tokens, while Alice never wanted to allow so many of her tokens to be transferred by Bob.\r\n\r\n[EIP20 says concerning `approve()`](https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md#approve):\r\n> ... clients SHOULD make sure to create user interfaces in such a way that they set the allowance first to 0 before setting it to another value for the same spender. THOUGH The contract itself shouldn't enforce it, to allow backwards compatibility with contracts deployed before\r\n\r\nI'm confused as to why this check should be passed to the UI, and the contract shouldn't enforce it.\r\n\r\nHow is the UI to know that the `approve(spender, 0)` transaction will be processed *before* the subsequent non-zero approval, and not the other way around? It seems it is [not possible to do this check via the Web3 API](https://github.com/ethereum/EIPs/issues/20#issuecomment-263563087).\r\n\r\nIf the contract doesn't enforce this, then isn't anyone not using a UI still able to effect the attack?\r\n\r\nI also note the lowercase `shouldn't` in \"[t]he contract itself shouldn't enforce it\", from which one may infer a different meaning to an [RFC2119 \"SHOULD NOT\"](http://www.rfc-base.org/txt/rfc-2119.txt). I've raised my issues with the wording of this paragraph [here](https://github.com/ethereum/EIPs/issues/20#issuecomment-335758020).\r\n\r\n[EIP20 refers readers to the MiniMeToken implementation](https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md#implementation-of-adding-the-force-to-0-before-calling-approve-again) regarding this issue which works around it by [adding the line](https://github.com/Giveth/minime/blob/master/contracts/MiniMeToken.sol#L263):\r\n\r\n    require((_amount == 0) || (allowed[msg.sender][_spender] == 0));\r\n\r\nInterestingly the [nimiq-exchange-token breaks the standard with this line](https://github.com/nimiq-network/nimiq-exchange-token/commit/3f0f9599bfe66a1371a57dab59fe080f0f56ab14):\r\n\r\n    require(_value != 0 || allowed[msg.sender][_spender] == 0);\r\n\r\nThis prevents fully cancelling an allowance after it is established (the only way would be via a `transferFrom()` of the total allowance amount)\r\n\r\nEIP20 refers readers to two example token implementations (I've linked to the relevant line numbers):\r\n\r\n* [OpenZeppelin](https://github.com/OpenZeppelin/zeppelin-solidity/blob/master/contracts/token/StandardToken.sol#L41) - Brief issue description and link to the original issue comment. Mentions \"[o]ne possible solution to mitigate this race condition\", but doesn't implement it.\r\n* [ConsenSys](https://github.com/ConsenSys/Tokens/blob/master/contracts/StandardToken.sol#L47) - no mention or attempt to work around the issue\r\n\r\nThe [MiniMeToken function comment](https://github.com/Giveth/minime/blob/master/contracts/MiniMeToken.sol#L251) says:\r\n\r\n> This is a modified version of the ERC20 approve function to be a little bit safer\r\n\r\nGiven this is the reference implementation, I would like to be a lot more confident than \"a little bit safer\".\r\n\r\nI'm also a bit confused as to why a contract implementation is given as an exemplar when the text of EIP20 says that this should be implemented in the UI. This seems inconsistent.\r\n\r\nRegarding [ERC223](https://github.com/ethereum/EIPs/issues/223), @[Dexaran asked](https://github.com/ethereum/EIPs/issues/20#issuecomment-289227754):\r\n> Can someone name advantages of approve + transferFrom usage or even one thing that can not be done with fallback instead of approval.\r\n\r\nI hope that the lack of reply (AFACT) means that fallback and the current [ERC223 recommended implementation](https://github.com/Dexaran/ERC223-token-standard/tree/Recommended) resolves this issue, but frankly I don't know enough about RFC223.\r\n\r\n**Questions**:\r\n\r\n1. Should the resolution to this issue be implemented in both UI and contract?\r\n    1. What exemplar can we point to for the UI?\r\n1. Is it possible to completely prevent this attack (and if not, why)?\r\n1. Is the MiniMeToken approach sufficient? There was some challenge to the approach and some rebuttal, but I couldn't work out a definitive answer.\r\n    1. If insufficient, [recommendations were made in the document describing the issue](https://docs.google.com/document/d/1YLPtQxZu1UAvO9cZ1O2RPXBbT0mooh4DYKjA_jp-RLM/edit#heading=h.6uz9seehjf3n), and also in the EIP20 comments. What is the clear direction that we should follow?\r\n1. Could ERC223 be the point to break EIP20's attempt to [\"allow backwards compatilibilty with contracts deployed before\"](https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md#approve)? \r\n1. The situations in which `approve()` MAY / SHOULD / MUST return false are not currently mentioned. Does this issue necessitate the return value to be specified?\r\n\r\n<sup>Please note that I am looking for Ethereum related work starting January 2018.</sup>",
  "closed_by": {
    "login": "github-actions[bot]",
    "id": 41898282,
    "node_id": "MDM6Qm90NDE4OTgyODI=",
    "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/github-actions%5Bbot%5D",
    "html_url": "https://github.com/apps/github-actions",
    "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
    "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
    "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
    "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
    "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
    "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
    "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
    "type": "Bot",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/738/reactions",
    "total_count": 4,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 4,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/EIPs/issues/738/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/336277632",
    "html_url": "https://github.com/ethereum/EIPs/issues/738#issuecomment-336277632",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/738",
    "id": 336277632,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzNjI3NzYzMg==",
    "user": {
      "login": "Qqwy",
      "id": 5345745,
      "node_id": "MDQ6VXNlcjUzNDU3NDU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5345745?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Qqwy",
      "html_url": "https://github.com/Qqwy",
      "followers_url": "https://api.github.com/users/Qqwy/followers",
      "following_url": "https://api.github.com/users/Qqwy/following{/other_user}",
      "gists_url": "https://api.github.com/users/Qqwy/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Qqwy/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Qqwy/subscriptions",
      "organizations_url": "https://api.github.com/users/Qqwy/orgs",
      "repos_url": "https://api.github.com/users/Qqwy/repos",
      "events_url": "https://api.github.com/users/Qqwy/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Qqwy/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-10-12T21:30:09Z",
    "updated_at": "2017-10-12T21:30:09Z",
    "author_association": "NONE",
    "body": "I know of two possible alternative approaches, one of which is used in the wild:\r\n\r\n1. Add functions that increase/decrease the allowance relative to its current value, such as the [increaseApproval](https://github.com/MonolithDAO/token/blob/94b935828408d6816849797fab8f89dca9a21db3/src/Token.sol#L98) and [decreaseApproval](https://github.com/MonolithDAO/token/blob/94b935828408d6816849797fab8f89dca9a21db3/src/Token.sol#L106) functions in the MonolithDAO Token.\r\n2. Add an alternate approval function `safeApprove(spender, new_value, expected_old_value)` that takes the current expected approval amount as input parameter. This would stop steps 3..5 in the mentioned attack from executing properly: When Bob's `transferFrom(Alice, Bob, N)` transaction occurs before Alice's `safeApprove(Bob, M, N)` transaction then the latter will fail.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/336277632/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/336424511",
    "html_url": "https://github.com/ethereum/EIPs/issues/738#issuecomment-336424511",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/738",
    "id": 336424511,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzNjQyNDUxMQ==",
    "user": {
      "login": "HaleTom",
      "id": 13854417,
      "node_id": "MDQ6VXNlcjEzODU0NDE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/13854417?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/HaleTom",
      "html_url": "https://github.com/HaleTom",
      "followers_url": "https://api.github.com/users/HaleTom/followers",
      "following_url": "https://api.github.com/users/HaleTom/following{/other_user}",
      "gists_url": "https://api.github.com/users/HaleTom/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/HaleTom/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/HaleTom/subscriptions",
      "organizations_url": "https://api.github.com/users/HaleTom/orgs",
      "repos_url": "https://api.github.com/users/HaleTom/repos",
      "events_url": "https://api.github.com/users/HaleTom/events{/privacy}",
      "received_events_url": "https://api.github.com/users/HaleTom/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-10-13T11:20:39Z",
    "updated_at": "2017-10-13T11:20:39Z",
    "author_association": "NONE",
    "body": "It seems that the approach of adding:\r\n``` solidity\r\nrequire((_amount == 0) || (allowed[msg.sender][_spender] == 0));\r\n```\r\n[is not sufficient](https://github.com/OpenZeppelin/zeppelin-solidity/issues/438#issuecomment-329172399):\r\n\r\n> 1. Bob is allowed to transfer N Alice's tokens\r\n> 1. Alice publishes transaction that changes Bob's allowance to zero\r\n> 1. Bob front runs Alice's transaction and transfers N Alice's tokens\r\n> 1. Alice's transaction is mined\r\n> 1. Alice sees that her transaction was mined successfully, that Bob's allowance is now zero and that proper Approval event was logged. This is exactly what she would see if Bob would not transfer any tokens from her, so she has no reason to think that Bob actually used his allowance before it was revoked\r\n> 1. Now Alice publishes transaction that changes Bob's allowance to M\r\n> 1. Alice's second transaction is mined so now Bob is allowed to transfer M Alice's tokens\r\n> 1. Bob transfers M Alice's tokens\r\n>\r\n> Again. Bob got N+M tokens which is more that Alice ever wanted to allow him to transfer.\r\n>\r\n> One may argue that at step 5 Alice should notice that her token balance was decreased and Transfer event was logged. This is true, but if Bob had transferred tokens not to himself but to somebody else, then Transfer event will not be linked to Bob, and, if Alice's account is busy and many people are allowed to transfer from it, Alice may think that this transfer was probably performed by somebody else, not by Bob.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/336424511/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/336424745",
    "html_url": "https://github.com/ethereum/EIPs/issues/738#issuecomment-336424745",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/738",
    "id": 336424745,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzNjQyNDc0NQ==",
    "user": {
      "login": "HaleTom",
      "id": 13854417,
      "node_id": "MDQ6VXNlcjEzODU0NDE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/13854417?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/HaleTom",
      "html_url": "https://github.com/HaleTom",
      "followers_url": "https://api.github.com/users/HaleTom/followers",
      "following_url": "https://api.github.com/users/HaleTom/following{/other_user}",
      "gists_url": "https://api.github.com/users/HaleTom/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/HaleTom/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/HaleTom/subscriptions",
      "organizations_url": "https://api.github.com/users/HaleTom/orgs",
      "repos_url": "https://api.github.com/users/HaleTom/repos",
      "events_url": "https://api.github.com/users/HaleTom/events{/privacy}",
      "received_events_url": "https://api.github.com/users/HaleTom/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-10-13T11:21:52Z",
    "updated_at": "2017-10-13T11:21:52Z",
    "author_association": "NONE",
    "body": "@Qqwy I like your safeApprove approach. All approaches are non backward compatible with ERC20 AFAICT. \r\n\r\nI probably should tag some previously involved people: @mikhail-vladimirov @frozeman @chriseth @Dexaran @GriffGreen @yupasik @koeppelmann @PeterBorah @jbaylina @khovratovich @brudaswen @paberr",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/336424745/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/336429877",
    "html_url": "https://github.com/ethereum/EIPs/issues/738#issuecomment-336429877",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/738",
    "id": 336429877,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzNjQyOTg3Nw==",
    "user": {
      "login": "3sGgpQ8H",
      "id": 3917202,
      "node_id": "MDQ6VXNlcjM5MTcyMDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3917202?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/3sGgpQ8H",
      "html_url": "https://github.com/3sGgpQ8H",
      "followers_url": "https://api.github.com/users/3sGgpQ8H/followers",
      "following_url": "https://api.github.com/users/3sGgpQ8H/following{/other_user}",
      "gists_url": "https://api.github.com/users/3sGgpQ8H/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/3sGgpQ8H/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/3sGgpQ8H/subscriptions",
      "organizations_url": "https://api.github.com/users/3sGgpQ8H/orgs",
      "repos_url": "https://api.github.com/users/3sGgpQ8H/repos",
      "events_url": "https://api.github.com/users/3sGgpQ8H/events{/privacy}",
      "received_events_url": "https://api.github.com/users/3sGgpQ8H/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-10-13T11:49:38Z",
    "updated_at": "2017-10-13T11:49:38Z",
    "author_association": "NONE",
    "body": "@HaleTom \r\n\r\n> All approaches are non backward compatible with ERC20 \r\n\r\nIf you just add new (safeApprove) method, this is backward compatible because all existing code will still be able to use your smart contract.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/336429877/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/337764470",
    "html_url": "https://github.com/ethereum/EIPs/issues/738#issuecomment-337764470",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/738",
    "id": 337764470,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzNzc2NDQ3MA==",
    "user": {
      "login": "nateawelch",
      "id": 706153,
      "node_id": "MDQ6VXNlcjcwNjE1Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/706153?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nateawelch",
      "html_url": "https://github.com/nateawelch",
      "followers_url": "https://api.github.com/users/nateawelch/followers",
      "following_url": "https://api.github.com/users/nateawelch/following{/other_user}",
      "gists_url": "https://api.github.com/users/nateawelch/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nateawelch/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nateawelch/subscriptions",
      "organizations_url": "https://api.github.com/users/nateawelch/orgs",
      "repos_url": "https://api.github.com/users/nateawelch/repos",
      "events_url": "https://api.github.com/users/nateawelch/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nateawelch/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-10-19T00:22:55Z",
    "updated_at": "2017-10-19T00:27:27Z",
    "author_association": "CONTRIBUTOR",
    "body": "@mikhail-vladimirov I think what @HaleTom meant by backwards compatible was that adding a new method means that contracts that interact with ERC20 tokens wouldn't be able to use this safety feature without being replaced.\r\n\r\n@HaleTom I get your issue [here](https://github.com/ethereum/EIPs/issues/738#issuecomment-336424511), and a valid solution to that is to store another bool with each allowance keeping track if any of the allowance has been used since the owner last set allowance. [Here's a quick example](https://gist.github.com/flygoing/836666010f0a5bf91abac211df938611). \r\n\r\nI believe this offers a few benefits over the other solutions:\r\n\r\n1. Unless I misunderstand expectations around returning true/false from `approve`, it's backwards compatible.\r\n2. If the spender hasn't used transferFrom since approve last succeeded, then the 1 transaction is all that's needed. The owner can tell it worked because an Approval event is broadcast with the proper amount. If it didn't work then it'll create an Approval event with 0 amount, since it set the allowance to back to 0.\r\n3. The UI doesn't have to send a 0 approve and then the amount approve with order that matters. Now it can just send 1 if it knows the allowance hasn't been touched yet (again, if the spender managed to get call transferFrom before this has been mined, the `approve` will just set the allowance to 0) or it can just send 2 transactions setting the allowance, in which case the 1st to be mined will reset the `allowance` to 0/`used` to false and the 2nd will actually set the `allowance`.\r\n\r\nPlease give feedback, I'm sure I've missed something.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/337764470/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/337825432",
    "html_url": "https://github.com/ethereum/EIPs/issues/738#issuecomment-337825432",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/738",
    "id": 337825432,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzNzgyNTQzMg==",
    "user": {
      "login": "3sGgpQ8H",
      "id": 3917202,
      "node_id": "MDQ6VXNlcjM5MTcyMDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3917202?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/3sGgpQ8H",
      "html_url": "https://github.com/3sGgpQ8H",
      "followers_url": "https://api.github.com/users/3sGgpQ8H/followers",
      "following_url": "https://api.github.com/users/3sGgpQ8H/following{/other_user}",
      "gists_url": "https://api.github.com/users/3sGgpQ8H/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/3sGgpQ8H/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/3sGgpQ8H/subscriptions",
      "organizations_url": "https://api.github.com/users/3sGgpQ8H/orgs",
      "repos_url": "https://api.github.com/users/3sGgpQ8H/repos",
      "events_url": "https://api.github.com/users/3sGgpQ8H/events{/privacy}",
      "received_events_url": "https://api.github.com/users/3sGgpQ8H/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-10-19T07:40:17Z",
    "updated_at": "2017-10-19T07:40:41Z",
    "author_association": "NONE",
    "body": "The idea with boolean variable looks odd for me because it makes possible the situation when `approve` method changes the allowance but returns false, while currently `false` return value means that allowance and contract's state in general were not changed.\r\n\r\nAlso this does not solve original problem.  Lets assume the following scenario:\r\n\r\n1. Bob is allowed to transfer 100 tokens from Alice and his `used` flag is already true\r\n2. Alice wants to change his allowance to 101\r\n3. Alice calls `approve` method to set Bob's allowance to zero (or to 101, does not matter because Bob's `used` flag is already true)\r\n4. Bob frontruns Alice's transaction and get 100 tokens from Alice\r\n5. Alice sees that her transaction was mined and she has no clues to know that Bob did frontrun it\r\n6. Now Alice calls `approve` method again to set bob's allowance to 101\r\n7. After Alice's transaction is mined, Bob gets another 101 tokens from Alice\r\n\r\nSo Bob got 201 tokens from Alice in total while Alice never intended to give him more than 101 token.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/337825432/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/337897773",
    "html_url": "https://github.com/ethereum/EIPs/issues/738#issuecomment-337897773",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/738",
    "id": 337897773,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzNzg5Nzc3Mw==",
    "user": {
      "login": "nateawelch",
      "id": 706153,
      "node_id": "MDQ6VXNlcjcwNjE1Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/706153?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nateawelch",
      "html_url": "https://github.com/nateawelch",
      "followers_url": "https://api.github.com/users/nateawelch/followers",
      "following_url": "https://api.github.com/users/nateawelch/following{/other_user}",
      "gists_url": "https://api.github.com/users/nateawelch/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nateawelch/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nateawelch/subscriptions",
      "organizations_url": "https://api.github.com/users/nateawelch/orgs",
      "repos_url": "https://api.github.com/users/nateawelch/repos",
      "events_url": "https://api.github.com/users/nateawelch/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nateawelch/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-10-19T12:52:03Z",
    "updated_at": "2017-10-19T18:17:18Z",
    "author_association": "CONTRIBUTOR",
    "body": "Yeah, as I pointed out, my one concern was the expectations around returning true/false from approve. I suppose you could just return true no matter what. Preferably, in any other programming language, I'd update the `used` state and then throw an error, but there's no non-reverting way to raise errors in solidity yet, if ever.\r\n\r\nCan Alice not listen to the event emitted from her first tx? There's 3 possible scenarios in that case:\r\n\r\n1. Alice called `approve` with a non-zero `_value` & the event `_value` matches hers. This means the previous allowance, if there was one, was never used\r\n2. Alice called `approve` with a non-zero `_value` & the event `_value` **is** zero. This means the previous allowance was used.\r\n3. Alice called `approve` with a zero `_value`. In this case the event `_value` will match her `approve` `_value` and she wont know whether or not the spender used the previous allowance. It doesn't really matter since she was setting it to zero anyway.\r\n\r\nEdit: An alternative is to just involve the `used` flag in `require((_amount == 0) || (allowed[msg.sender][_spender] == 0))`, i.e. `require((_amount == 0) || (allowed[msg.sender][_spender].amount == 0 && !allowed[msg.sender][_spender].used))`, meaning you must reset the allowance to 0 *if* the spender has touched it, and this enforces it in the contract instead of just in the UI.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/337897773/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/338770413",
    "html_url": "https://github.com/ethereum/EIPs/issues/738#issuecomment-338770413",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/738",
    "id": 338770413,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzODc3MDQxMw==",
    "user": {
      "login": "maurelian",
      "id": 23033765,
      "node_id": "MDQ6VXNlcjIzMDMzNzY1",
      "avatar_url": "https://avatars.githubusercontent.com/u/23033765?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/maurelian",
      "html_url": "https://github.com/maurelian",
      "followers_url": "https://api.github.com/users/maurelian/followers",
      "following_url": "https://api.github.com/users/maurelian/following{/other_user}",
      "gists_url": "https://api.github.com/users/maurelian/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/maurelian/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/maurelian/subscriptions",
      "organizations_url": "https://api.github.com/users/maurelian/orgs",
      "repos_url": "https://api.github.com/users/maurelian/repos",
      "events_url": "https://api.github.com/users/maurelian/events{/privacy}",
      "received_events_url": "https://api.github.com/users/maurelian/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-10-23T19:29:03Z",
    "updated_at": "2017-10-23T19:29:39Z",
    "author_association": "CONTRIBUTOR",
    "body": "Came here from your email to consensys-diligence @HaleTom. Thanks for addressing this safety issue. \r\n\r\n> [ConsenSys](https://github.com/ConsenSys/Tokens) - no mention or attempt to work around the issue\r\n\r\nIt seems we're going to need to start adapting that to multiple token standards. We'll monitor, and if something resembling consensys is reached be happy to provide an implementation alongside our EIP20 implementation.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/338770413/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/339667875",
    "html_url": "https://github.com/ethereum/EIPs/issues/738#issuecomment-339667875",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/738",
    "id": 339667875,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzOTY2Nzg3NQ==",
    "user": {
      "login": "HaleTom",
      "id": 13854417,
      "node_id": "MDQ6VXNlcjEzODU0NDE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/13854417?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/HaleTom",
      "html_url": "https://github.com/HaleTom",
      "followers_url": "https://api.github.com/users/HaleTom/followers",
      "following_url": "https://api.github.com/users/HaleTom/following{/other_user}",
      "gists_url": "https://api.github.com/users/HaleTom/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/HaleTom/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/HaleTom/subscriptions",
      "organizations_url": "https://api.github.com/users/HaleTom/orgs",
      "repos_url": "https://api.github.com/users/HaleTom/repos",
      "events_url": "https://api.github.com/users/HaleTom/events{/privacy}",
      "received_events_url": "https://api.github.com/users/HaleTom/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-10-26T13:35:44Z",
    "updated_at": "2017-10-26T13:35:44Z",
    "author_association": "NONE",
    "body": "Has anyone written a truffle (or other) test which illustrates this issue?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/339667875/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/373935913",
    "html_url": "https://github.com/ethereum/EIPs/issues/738#issuecomment-373935913",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/738",
    "id": 373935913,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3MzkzNTkxMw==",
    "user": {
      "login": "outofgas",
      "id": 30028340,
      "node_id": "MDQ6VXNlcjMwMDI4MzQw",
      "avatar_url": "https://avatars.githubusercontent.com/u/30028340?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/outofgas",
      "html_url": "https://github.com/outofgas",
      "followers_url": "https://api.github.com/users/outofgas/followers",
      "following_url": "https://api.github.com/users/outofgas/following{/other_user}",
      "gists_url": "https://api.github.com/users/outofgas/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/outofgas/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/outofgas/subscriptions",
      "organizations_url": "https://api.github.com/users/outofgas/orgs",
      "repos_url": "https://api.github.com/users/outofgas/repos",
      "events_url": "https://api.github.com/users/outofgas/events{/privacy}",
      "received_events_url": "https://api.github.com/users/outofgas/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-17T17:02:01Z",
    "updated_at": "2018-03-17T17:02:01Z",
    "author_association": "NONE",
    "body": "Hello,\r\nif higher gas costs were acceptable one could keep track of the so-far spent allowance. Sketch:\r\n```\r\n    struct Allowance {\r\n        uint initial;\r\n        uint residual;\r\n    }\r\n    \r\n    mapping(address => mapping(address => Allowance)) public allowances;\r\n    \r\n    function approve(address spender, uint amount) public returns (bool) {\r\n        Allowance storage _allowance = allowances[msg.sender][spender];\r\n        \r\n        // This test should not be necessary.\r\n        uint spent = _allowance.initial > _allowance.residual\r\n                   ? _allowance.initial - _allowance.residual\r\n                   : 0;\r\n                   \r\n        _allowance.initial = amount;\r\n        _allowance.residual = spent < amount ? amount - spent : 0;\r\n        \r\n        Approval(msg.sender, spender, _allowance.residual);\r\n        \r\n        return true;\r\n    }\r\n    \r\n    function allowance(address holder, address spender) public view returns (uint) {\r\n        return allowances[holder][spender].residual;\r\n    }\r\n    \r\n    function transferFrom(address holder, uint amount) public returns (bool) {\r\n        uint residual = allowance(holder, msg.sender);\r\n        \r\n        require(amount <= residual);\r\n        \r\n        allowances[holder][msg.sender].residual = residual - amount;\r\n        \r\n        // ... do the token transfer\r\n        \r\n        return true;\r\n    }\r\n```\r\nThis approach would still require the allowance to be set to zero prior to setting it to a new value.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/373935913/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/387666142",
    "html_url": "https://github.com/ethereum/EIPs/issues/738#issuecomment-387666142",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/738",
    "id": 387666142,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4NzY2NjE0Mg==",
    "user": {
      "login": "xhyumiracle",
      "id": 17793687,
      "node_id": "MDQ6VXNlcjE3NzkzNjg3",
      "avatar_url": "https://avatars.githubusercontent.com/u/17793687?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/xhyumiracle",
      "html_url": "https://github.com/xhyumiracle",
      "followers_url": "https://api.github.com/users/xhyumiracle/followers",
      "following_url": "https://api.github.com/users/xhyumiracle/following{/other_user}",
      "gists_url": "https://api.github.com/users/xhyumiracle/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/xhyumiracle/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/xhyumiracle/subscriptions",
      "organizations_url": "https://api.github.com/users/xhyumiracle/orgs",
      "repos_url": "https://api.github.com/users/xhyumiracle/repos",
      "events_url": "https://api.github.com/users/xhyumiracle/events{/privacy}",
      "received_events_url": "https://api.github.com/users/xhyumiracle/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-09T08:38:58Z",
    "updated_at": "2018-05-09T08:38:58Z",
    "author_association": "NONE",
    "body": "I think the fix mentioned [here](https://github.com/CORIONplatform/solidity/issues/107) might be helpful. Just FYI.\r\nPersonally I like the idea and it might be a great way to fix the problem, cuz I think the user who updates the allowance value should be responsible for it, (s)he should provide the latest state (tx state or allowance value) when they decide to update, otherwise the best we can do is to notice them. \r\nWhat the implementation should do is to provide a handful way for users to announce the state.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/387666142/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/998958806",
    "html_url": "https://github.com/ethereum/EIPs/issues/738#issuecomment-998958806",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/738",
    "id": 998958806,
    "node_id": "IC_kwDOAq426M47iubW",
    "user": {
      "login": "github-actions[bot]",
      "id": 41898282,
      "node_id": "MDM6Qm90NDE4OTgyODI=",
      "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/github-actions%5Bbot%5D",
      "html_url": "https://github.com/apps/github-actions",
      "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
      "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
      "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
      "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
      "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
      "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
      "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
      "type": "Bot",
      "site_admin": false
    },
    "created_at": "2021-12-21T17:20:48Z",
    "updated_at": "2021-12-21T17:20:48Z",
    "author_association": "NONE",
    "body": "There has been no activity on this issue for two months. It will be closed in a week if no further activity occurs. If you would like to move this EIP forward, please respond to any outstanding feedback or add a comment indicating that you have addressed all required feedback and are ready for a review.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/998958806/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/1005055884",
    "html_url": "https://github.com/ethereum/EIPs/issues/738#issuecomment-1005055884",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/738",
    "id": 1005055884,
    "node_id": "IC_kwDOAq426M475--M",
    "user": {
      "login": "github-actions[bot]",
      "id": 41898282,
      "node_id": "MDM6Qm90NDE4OTgyODI=",
      "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/github-actions%5Bbot%5D",
      "html_url": "https://github.com/apps/github-actions",
      "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
      "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
      "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
      "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
      "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
      "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
      "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
      "type": "Bot",
      "site_admin": false
    },
    "created_at": "2022-01-04T18:13:23Z",
    "updated_at": "2022-01-04T18:13:23Z",
    "author_association": "NONE",
    "body": "This issue was closed due to inactivity. If you are still pursuing it, feel free to reopen it and respond to any feedback or request a review in a comment.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/1005055884/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
