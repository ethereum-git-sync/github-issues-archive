{
  "url": "https://api.github.com/repos/ethereum/EIPs/issues/3601",
  "repository_url": "https://api.github.com/repos/ethereum/EIPs",
  "labels_url": "https://api.github.com/repos/ethereum/EIPs/issues/3601/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/EIPs/issues/3601/comments",
  "events_url": "https://api.github.com/repos/ethereum/EIPs/issues/3601/events",
  "html_url": "https://github.com/ethereum/EIPs/issues/3601",
  "id": 912075086,
  "node_id": "MDU6SXNzdWU5MTIwNzUwODY=",
  "number": 3601,
  "title": "NFT and FT with Royalty Distribution System",
  "user": {
    "login": "PowerStream3604",
    "id": 63450340,
    "node_id": "MDQ6VXNlcjYzNDUwMzQw",
    "avatar_url": "https://avatars.githubusercontent.com/u/63450340?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/PowerStream3604",
    "html_url": "https://github.com/PowerStream3604",
    "followers_url": "https://api.github.com/users/PowerStream3604/followers",
    "following_url": "https://api.github.com/users/PowerStream3604/following{/other_user}",
    "gists_url": "https://api.github.com/users/PowerStream3604/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/PowerStream3604/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/PowerStream3604/subscriptions",
    "organizations_url": "https://api.github.com/users/PowerStream3604/orgs",
    "repos_url": "https://api.github.com/users/PowerStream3604/repos",
    "events_url": "https://api.github.com/users/PowerStream3604/events{/privacy}",
    "received_events_url": "https://api.github.com/users/PowerStream3604/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 2328627851,
      "node_id": "MDU6TGFiZWwyMzI4NjI3ODUx",
      "url": "https://api.github.com/repos/ethereum/EIPs/labels/stale",
      "name": "stale",
      "color": "000000",
      "default": false,
      "description": ""
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 17,
  "created_at": "2021-06-05T02:57:21Z",
  "updated_at": "2022-04-16T04:02:46Z",
  "closed_at": "2022-04-16T04:02:46Z",
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "---\r\neip: <to be assigned>\r\ntitle: Fractional nft and FT with Royalty Distribution system\r\nauthor: Yongjun Kim (@PowerStream3604)\r\ndiscussions-to: https://ethereum-magicians.org/t/fnft-with-royalty-distribution-system/7150\r\nstatus: Draft\r\ntype: Standards Track\r\ncategory : ERC\r\ncreated: 2021-06-01\r\nrequires : 20, 165, 721\r\n---\r\n  \r\n## Simple Summary\r\nA ERC-20 contract becoming the owner of a nft token.\r\nFractionalizing the ownership of NFT into multiple ERC-20 tokens by making the ERC-20 contract as the owner of NFT.\r\nDistributing the royalty(income) to the shareholders who own the specific ERC-20 token.\r\n  \r\n## Abstract\r\nThe intention of this proposal is to extend the functionalities of ERC-20 to represent it as a share of nft and provide automated and trusted method to distribute royalty\r\nto ERC-20 token holders.\r\nUtilizing ERC-165 Standard Interface Detection, it detects if a ERC-20 token is representing the shared ownership of ERC-721 Non-Fungible Token.\r\nERC-165 implementation of this proposal makes it possible to verify from both contract and offchain level if it adheres to this proposal(standard).\r\nThis proposal makes small changes to existing ERC-20 Token Standard and ERC-721 Token Standard to support most of software working on top of this existing token standard.\r\nBy sending ether to the address of the ERC-20 Contract Address(owner of NFT) it will distribute the amount of ether per holders and keep it inside the chain.\r\nWhenever the owner of the contract calls the function for withdrawing their proportion of royalty, they will receive the exact amount of compensation according to their amount \r\nof share at that very moment of being compensated.\r\n\r\n## Motivation\r\nIt is evident that many industries need cryptographically verifiable method to represent shared ownership.\r\nERC-721 Non-Fungible Token standards are ubiquitously used to represent ownership of assets from digital assets such as Digital artworks, Game items(characters), Virtual real estate\r\nto real-world assets such as Real estate, Artworks, Cars, etc.\r\nAs more assets are registered as ERC-721 Non-Fungible Token demands for fractional ownership will rise.\r\n\r\nFractional ownership does not only mean that we own a portion of assets.\r\nBut It also means that we need to obtain financial compensation whenever the asset is making profit through any kinds of financial activities.\r\nFor instance, token holders of NFT representing World Trade Center should receive monthly rent from tenants.\r\nToken holders of NFT representing \"Everydays-The First 5000 days\" should receive advertisement charge, exhibition fees whenever their artwork is being used for financial activities.\r\nIt is crucial for smart-contract(verifable system) to implement this distribution system to prevent any kinds of fraud regarding royalty compensation. Following the fair royalty distribution system which works on top of completely verifable environment(blockchain) will the flourish the NFT market by giving back compensation to investors.\r\n\r\nTo make this possible this proposal implements a rule-of-reason logic to distribute income fairly to the holders.\r\nIn order to make this royalty-distribution-system work with little changes from the standard and comply with distribution logic, several math operations and mappings are additionally used.\r\nBy implementing this standard, wallets will be able to determine if a erc20 token is representing NFT and that means\r\neverywhere that supports the ERC-20 and this proposal(standard) will support fractional NFT tokens.\r\n\r\n## Specification\r\n\r\n**Smart Contracts Implementing this Standard MUST implement all of the functions in BELOW**\r\n  \r\n**Smart contracts implementing the FNFT standard MUST implement the ERC-165 `supportsInterface()`\r\n     and MUST return the constant value `true` if `0xdb453760` is passed through the `interfaceID` argument**\r\n```solidity\r\npragma solidity >=0.7.0 <0.9.0;\r\n\r\n/*  \r\n  @title Fractional-NFT with Royalty distribution system\r\n  Note: The ERC-165 identifier for this interface is 0xdb453760;\r\n*/\r\ninterface FNFT /* is ERC20, ERC165 */{\r\n  \r\n  /**\r\n    @dev 'RoyaltySent' MUST emit when royalty is given.\r\n    The '_sender' argument MUST be the address of the account sending(giving) royalty to token owners.\r\n    The '_value' argument MUST be the value(amount) of ether '_sender' is sending to the token owners.\r\n  **/\r\n  event RoyaltySent(address indexed _sender, uint256 _value);\r\n\r\n  /**\r\n    @dev 'RoyaltyWithdrawn' MUST emit when royalties are withdrawn.\r\n    The '_withdrawer' argument MUST be the address of the account withdrawing royalty of his portion.\r\n    The '_value' argument MUST be the value(amount) of ether '_withdrawer' is withdrawing.\r\n  **/\r\n  event RoyaltyWithdrawn(address indexed _withdrawer, uint256 _value);  \r\n\r\n  /**\r\n    This function is to get the NFT Token information this FNFT token is pointing to.\r\n    The '_nftToken' return value should return contract address this FNFT is pointing to (representing).\r\n    The '_nftTokenId' return value should return token Id of NFT token this FNFT is pointing to (representing)\r\n  **/\r\n  function targetNFT() external view returns(address _nftToken, uint256 _nftTokenId);\r\n                                \r\n  /**\r\n    This function is for sending royalty to token owners.\r\n  **/\r\n  function sendRoyalty() external payable;\r\n                                \r\n  /**\r\n    This function is for withdrawing the amount of royalty received.\r\n    Only called by the owner of tokens.\r\n    Or addresses that used to own this token.\r\n  **/\r\n  function withdrawRoyalty() external;\r\n}\r\n \r\n```\r\n                                \r\n**(1) Third parties need to distinguish Fractional-NFT from other token standards.**\r\n  \r\nERC-165 Standard Interface Detection `supportsInterface()` needs to be included to determine whether this contract supports this standard.\r\nIn this proposal, we use `targetNFT()` to retrieve the contract address of NFT and the token ID of NFT, `sendRoyalty()` to send royalty to token holders, `withdrawRoyalty()` to withdraw royalty they received with `sendRoyalty()`.\r\n\r\n```solidity\r\n  /* Smart contracts implementing the FNFT standard MUST implement the ERC-165 \"supportsInterface()\" \r\n     and MUST return the constant value 'true' if '0xdb453760' is passed through the interfaceID argument.*/\r\n  function supportsInterface(bytes4 interfaceID) external view returns(bool) {\r\n   return\r\n      interfaceID == this.supportsInterface.selector || //ERC165\r\n      interfaceID == this.targetNFT.selector || // targetNFT()\r\n      interfaceID == this.sendRoyalty.selector || // sendRoyalty()\r\n      interfaceID == this.withdrawRoyalty.selector || // withdrawRoyalty()\r\n      interfaceID == this.targetNFT.selector ^ this.sendRoyalty.selector ^ this.withdrawRoyalty.selector;// FNFT\r\n  }\r\n```\r\n                                \r\n**(2) Third parties need to know the NFT contract address this FNFT is pointing to and the tokenID of the NFT.**\r\n                                \r\nThis is the on-chain scenario:                                \r\n```solidity\r\npragma solidity >=0.7.0 <0.9.0;\r\n\r\nimport './FNFT.sol';\r\nimport './ERC721.sol';\r\n\r\ncontract CheckFNFT {\r\n  function checkFNFT(address _FNFT) external view returns(bool) {\r\n     address _NFT;\r\n     uint256 _tokenId;                           \r\n     (NFT, tokenId) = FNFT(_FNFT).targetNFT(); // returns address of NFT contract\r\n     \r\n     return\r\n       NFT(_NFT).supportsInterface(0x80ac58cd) &&// check if it is ERC-721\r\n       NFT(_NFT).ownerOf(_tokenId) == _FNFT; // check if the owner of NFT is FNFT contract address\r\n  }                              \r\n}                                \r\n```  \r\n\r\noff-chain scenario:\r\n                                \r\nusing ethers.js in javascript:\r\n```javascript\r\nasync function checkFNFT(ethers) {                              \r\n  const FNFTABI = [...]; // abi for FNFT\r\n  const FNFTAddress = '0x9874563210123456789asdfdsa'; // address for the deployed FNFT contract\r\n  const ERC721ABI = [...]; // abi for ERC-721 NFT\r\n  const provider = ethers.getDefaultProvider(); // connection to mainnet\r\n                                \r\n  const FNFTContract = new ethers.Contract(FNFTAddress, FNFTABI, provider); // instance of  deployed FNFT contract\r\n  const [ERC721Address, ERC721TokenId] = await FNFTContract.targetNFT(); // retrieve the address of the NFT\r\n  \r\n  const ERC721Contract = new ethers.Contract(ERC721ABI, ERC721Address, provider); // deployed NFT contract according to FNFT return data\r\n  const isERC721 = await ERC721Contract.supportsInterface('0x80ac58cd'); // check if it is ERC-721\r\n  const NFTownerOf = await ERC721Contract.ownerOf(ERC721TokenId); // retrieve the owner of NFT Token\r\n  return NFTownerOf.toLowerCase() === FNFTAddress.toLowerCase(); // check if the owner of NFT is the FNFT Contract\r\n \r\n}                                \r\n```                                \r\nweb3.js                                \r\n```javascript\r\nasync function checkFNFT(web3) {\r\n  const FNFTABI = [...]; // abi for FNFT\r\n  const FNFTAddress = '0x0123456789abcdef0123456789abcdef'; // address for the deployed FNFT contract\r\n  const ERC721ABI = [...]; // abi for ERC-721 NFT\r\n  \r\n  const FNFTContract = new web3.eth.Contract(FNFT, FNFTAddress); // instance of deployed FNFT contract\r\n  const [ERC721Address, ERC721TokenId] = await FNFTContract.methods.targetNFT().call();// retrieve the address of the NFT Contract, and the Token ID\r\n  \r\n  const ERC721Contract = new web3.eth.Contract(ERC721ABI, ERC721Address); // deployed NFT contract according to FNFT return data\r\n  const isERC721 = await ERC721Contract.methods.supportsInterface('0x80ac58cd').call(); // check if it is ERC-721\r\n  const NFTownerOf = await ERC721Contract.methods.ownerOf(ERC721TokenId).call(); // retrieve the owner of NFT token\r\n  \r\n  return NFTownerOf.toLowerCase() === FNFTAddress.toLowerCase(); // check if the owner of NFT is the FNFT Contract\r\n}                                \r\n```\r\n\r\n**Royalty-Distribution-Logic :**\r\nAlthough it is easy to abstractly say what to do in certain function, implementing rule-of-reason logic of distributing royalty needs much consideration.\r\nThere are some **KEY PRINCIPLES** that we have to comply with when designing this logic.\r\n\r\n**(1)** Royalty must be distributed by the ratio of my current stake(share) on totalsupply.\r\n\r\n**(2)** Royalty must be distributed by the ratio of royalty sent at the time compensated(given).\r\n\r\n*For instance, A owned 80% and B owned 20% of totalsupply in 2020 which is when 100ether was given as Royalty.\r\nBut, in 2021 B owns 80% and A owns 20% of totalsupply. Both of them didn't withdraw their royalty until now and no royalty was given in 2021. When A withdraws his royalty now which A should receive 80ethers since he owned 80% of totalsupply at the very moment of royalty given. When B withdraws his royalty he receives 20ethers since he owned 20% of totalsupply at the very moment the royalty was given. Only the ratio of my stake at the moment royalty is given needs to be the only factor that matters because  the timing\r\nof withdrawal totally depends on the owner's decision.*\r\n\r\n**(3)** Cannot withdraw Royalty you already did.\r\n## Rationale\r\nThe design of royalty receiver withdrawing their royalty was considered due to gas efficiency. If any of functions in this contract send ether to all of the holders whenever or regularly royalty is received, huge amount of gas consumption is inevitable.\r\nIn order to handle those issues, this standard(proposal) makes the withdrawer to do most of the calculation for his own withdrawal and \r\nthe sender to do the least as impossible.\r\n                           \r\n## Backwards Compatibility\r\nThis contract is compatible with the existing EIPs since it doesn't modify the existing specifications but just adds 3 functions to provide  Royalty distribution systems.\r\nDepending on the implementaion, data type, logic and additional validations and manipulations might be needed.\r\nHowever, complying with the existing standards won't be an issue but additional gas might be needed for calling `functions`\r\nin this standard.\r\n\r\n## Reference Implementation\r\nThis is an implementation of some smart of FNFT contract.\r\nIt is an extension of ERC-20 Token Contract.\r\n                                \r\n```solidity\r\npragma solidity ^0.8.0;\r\n\r\ncontract FNFT /*is ERC20, ERC165*/ {\r\n    mapping (address => uint256) userIndex;\r\n    mapping (address => bool) ownerHistory;\r\n    uint totalsupply = 0;\r\n    //uint[] balances;\r\n    \r\n    struct Info {\r\n        uint256 balances;\r\n        uint256 royaltyIndex;\r\n    }\r\n    Info[] userInfo;\r\n    \r\n    struct RoyaltyInfo {\r\n        Info[] userInfo;\r\n        uint256 royalty;\r\n    }\r\n    RoyaltyInfo[] royaltyInfo;\r\n    uint256 royaltyCounter = 0;\r\n    \r\n    /**\r\n    @dev 'RoyaltySent' MUST emit when royalty is given.\r\n    The '_sender' argument MUST be the address of the account sending(giving) royalty to token owners.\r\n    The '_value' argument MUST be the value(amount) of ether '_sender' is sending to the token owners.\r\n    **/\r\n    event RoyaltySent(address indexed _sender, uint256 _value);\r\n    \r\n    /**\r\n    @dev 'RoyaltyWithdrawal' MUST emit when royalties are withdrawn.\r\n    The '_withdrawer' argument MUST be the address of the account withdrawing royalty of his portion.\r\n    The '_value' argument MUST be the value(amount) of ether '_withdrawer' is withdrawing.\r\n    **/\r\n    event RoyaltyWithdrawal(address indexed _withdrawer, uint256 _value); \r\n\r\n    function supportsInterface(bytes4 interfaceID) external view returns(bool) {\r\n    return\r\n      interfaceID == this.supportsInterface.selector || //ERC165\r\n      interfaceID == this.targetNFT.selector || // targetNFT()\r\n      interfaceID == this.sendRoyalty.selector || // sendRoyalty()\r\n      interfaceID == this.withdrawRoyalty.selector || // withdrawRoyalty()\r\n      interfaceID == this.targetNFT.selector ^ this.sendRoyalty.selector ^ this.withdrawRoyalty.selector;// FNFT\r\n    }\r\n    /* OpenZeppelin */\r\n     function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        //require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n        //_beforeTokenTransfer(sender, recipient, amount);\r\n        //uint256 senderBalance = _balances[sender];\r\n        //require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        //unchecked {\r\n        //    _balances[sender] = senderBalance - amount;\r\n        //}\r\n        //_balances[recipient] += amount;\r\n        \r\n        /* FNFT logic, below this added  */\r\n        if(ownerHistory[recipient] != true) {\r\n            ownerHistory[recipient] == true;\r\n            userIndex[recipient] = userInfo.length;\r\n            userInfo.push(Info(amount, royaltyCounter));\r\n        }\r\n        /* FNFT */\r\n        \r\n        //emit Transfer(sender, recipient, amount);\r\n    }\r\n    \r\n    /**\r\n     * Functions such as balanceOf should return balance according to \r\n     * the different logic(structure) of contract unlike \r\n     * the conventional balances[tokenOwner]\r\n     **/\r\n    function balanceOf(address tokenOwner) public view returns (uint balance) {\r\n        return userInfo[userIndex[tokenOwner]].balances;\r\n    }\r\n    \r\n    function targetNFT() public returns(address _nftContract, uint _tokenId) {\r\n        return (_nftContract, _tokenId);\r\n    }\r\n    \r\n    function sendRoyalty() public payable returns(bool){\r\n        royaltyInfo[royaltyCounter++] = RoyaltyInfo({userInfo: userInfo, royalty: msg.value});\r\n        // Emit RoyaltySent Event\r\n        emit RoyaltySent(msg.sender, msg.value);\r\n        return true;\r\n    }\r\n    \r\n    function withdrawRoyalty () public payable {\r\n        if(!ownerHistory[msg.sender] || userInfo[userIndex[msg.sender]].royaltyIndex == royaltyCounter) return;/* maybe throwing Error logic is needed */\r\n        uint royaltySum = 0; // temporary holder of royalty sum\r\n        for(uint i = userInfo[userIndex[msg.sender]].royaltyIndex; i < royaltyCounter; i++) {\r\n            /* Should consider using safe math library to divide and multiply safely. \r\n             * Overflow and underflow should be prevented.                                                                         \r\n             */\r\n            royaltySum += (royaltyInfo[i].userInfo[userIndex[msg.sender]].balances * royaltyInfo[i].royalty) / totalsupply;\r\n        }\r\n        userInfo[userIndex[msg.sender]].royaltyIndex = royaltyCounter;\r\n        msg.sender.transfer(royaltySum);\r\n        emit RoyltyWithdrawn(msg.sender, royaltySum);\r\n    }    \r\n}\r\n```\r\n## Security Considerations\r\nThere might be many flaws that might exist when implementing this standard since math operations and complex logic is underlying \r\nthe royalty distribution logic.\r\n**Major Security Risks To Consider**\r\n\r\n**(1)** Math operation in `withdrawRoyalty()`\r\n* Using external library that has been verified is recommended\r\n* Prevent underflow, overflow\r\n* Round off, Round up issues when dividing and multiplying\r\n\r\n**(2)** Variables that holds the state of royalty should not be modified outside the contract\r\n* Only functions and operations should be able to change their state in the right situation.\r\n\r\n### Usage\r\nAlthough this standard is intended for NFTs. This can also be used for distributing royalty or compensation to ERC-20 token holders.\r\nThis standard is also applicable to be used solely for distributing compensation to ERC-20 token holders without any correlations with ERC-721(NFT);\r\n### Compatibility with EIP-2981\r\nWhen complying with this standard I recommend people to ensure compatibility with EIP-2981 \r\nby adding `royaltyInfo()` and returning the information needed to compensation the creator of the asset whenever the asset is sold and resold.       \r\n                                                                               \r\n## References\r\n* [ERC-20 Token Standard](https://eips.ethereum.org/EIPS/eip-20)\r\n* [ERC-721 Non-Fungible Token Standard](https://eips.ethereum.org/EIPS/eip-721)\r\n* [ERC-1633 Re-Fungible Token Standard(RFT)](https://eips.ethereum.org/EIPS/eip-1633)\r\n* [OpenZeppelin ERC-20](https://docs.openzeppelin.com/contracts/2.x/api/token/erc20)\r\n\r\n## Copyright\r\nPlease cite this document as:\r\n\r\n[Kim yongjun](mailto:helloyongjun3604@gmail.com) \"EIP-<to-be-considered>: NFT Royalty Distribution Standard\" June 2021\r\n",
  "closed_by": {
    "login": "github-actions[bot]",
    "id": 41898282,
    "node_id": "MDM6Qm90NDE4OTgyODI=",
    "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/github-actions%5Bbot%5D",
    "html_url": "https://github.com/apps/github-actions",
    "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
    "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
    "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
    "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
    "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
    "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
    "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
    "type": "Bot",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/3601/reactions",
    "total_count": 8,
    "+1": 7,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 1,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/EIPs/issues/3601/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/855172637",
    "html_url": "https://github.com/ethereum/EIPs/issues/3601#issuecomment-855172637",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/3601",
    "id": 855172637,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg1NTE3MjYzNw==",
    "user": {
      "login": "github-actions[bot]",
      "id": 41898282,
      "node_id": "MDM6Qm90NDE4OTgyODI=",
      "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/github-actions%5Bbot%5D",
      "html_url": "https://github.com/apps/github-actions",
      "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
      "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
      "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
      "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
      "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
      "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
      "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
      "type": "Bot",
      "site_admin": false
    },
    "created_at": "2021-06-05T02:57:52Z",
    "updated_at": "2021-06-05T02:57:52Z",
    "author_association": "NONE",
    "body": "Since this is your first issue, we kindly remind you to check out [EIP-1](https://eips.ethereum.org/EIPS/eip-1) for guidance.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/855172637/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/855177829",
    "html_url": "https://github.com/ethereum/EIPs/issues/3601#issuecomment-855177829",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/3601",
    "id": 855177829,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg1NTE3NzgyOQ==",
    "user": {
      "login": "lenifoti",
      "id": 15185717,
      "node_id": "MDQ6VXNlcjE1MTg1NzE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/15185717?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lenifoti",
      "html_url": "https://github.com/lenifoti",
      "followers_url": "https://api.github.com/users/lenifoti/followers",
      "following_url": "https://api.github.com/users/lenifoti/following{/other_user}",
      "gists_url": "https://api.github.com/users/lenifoti/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lenifoti/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lenifoti/subscriptions",
      "organizations_url": "https://api.github.com/users/lenifoti/orgs",
      "repos_url": "https://api.github.com/users/lenifoti/repos",
      "events_url": "https://api.github.com/users/lenifoti/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lenifoti/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-06-05T03:49:32Z",
    "updated_at": "2021-06-05T04:04:53Z",
    "author_association": "NONE",
    "body": "@PowerStream3604 \r\nThanks for this. The title caught my eye as the term royalty is used by EIP-2981 in a very different way. We might want to qualify it. \r\nThis about ownership earnings distribution where ERC-2981 is about creator royalties.\r\nOne area that we recognise is that creators of Nfts can be many and therefore a distribution system is required Independent of the royalty collection.\r\nThere maybe some overlap so it would be unfortunate if this was made too specific to a particular scenario and not a building block that can be used in any revenue sharing application.\r\nI will need to spend some time understanding this!",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/855177829/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/855179988",
    "html_url": "https://github.com/ethereum/EIPs/issues/3601#issuecomment-855179988",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/3601",
    "id": 855179988,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg1NTE3OTk4OA==",
    "user": {
      "login": "PowerStream3604",
      "id": 63450340,
      "node_id": "MDQ6VXNlcjYzNDUwMzQw",
      "avatar_url": "https://avatars.githubusercontent.com/u/63450340?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/PowerStream3604",
      "html_url": "https://github.com/PowerStream3604",
      "followers_url": "https://api.github.com/users/PowerStream3604/followers",
      "following_url": "https://api.github.com/users/PowerStream3604/following{/other_user}",
      "gists_url": "https://api.github.com/users/PowerStream3604/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/PowerStream3604/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/PowerStream3604/subscriptions",
      "organizations_url": "https://api.github.com/users/PowerStream3604/orgs",
      "repos_url": "https://api.github.com/users/PowerStream3604/repos",
      "events_url": "https://api.github.com/users/PowerStream3604/events{/privacy}",
      "received_events_url": "https://api.github.com/users/PowerStream3604/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-06-05T04:11:08Z",
    "updated_at": "2021-06-05T04:11:08Z",
    "author_association": "CONTRIBUTOR",
    "body": "> @PowerStream3604 \n> Thanks for this. The title caught my eye as the term royalty is used by EIP-2981 in a very different way. We might want to quality it. \n> This about ownership earnings distribution where ERC-2981 is about creator royalties.\n> One area that we recognise is that creators of Nfts can be many and therefore a distribution system is required Independent of the royalty collection.\n> There maybe some overlap so it would be unfortunate if this was made too specific to a particular scenario and not a building block that can be used in any revenue sharing application.\n> I will need to spend some time understanding this!\n\nI understand that distribution system is needed regardless of the situation(royalty).\nI agree that this needs a title that should encompass all situations that need distribution system. So I'll consider changing the title into something more broad.\nI appreciate your feedback!!",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/855179988/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/855180920",
    "html_url": "https://github.com/ethereum/EIPs/issues/3601#issuecomment-855180920",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/3601",
    "id": 855180920,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg1NTE4MDkyMA==",
    "user": {
      "login": "lenifoti",
      "id": 15185717,
      "node_id": "MDQ6VXNlcjE1MTg1NzE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/15185717?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lenifoti",
      "html_url": "https://github.com/lenifoti",
      "followers_url": "https://api.github.com/users/lenifoti/followers",
      "following_url": "https://api.github.com/users/lenifoti/following{/other_user}",
      "gists_url": "https://api.github.com/users/lenifoti/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lenifoti/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lenifoti/subscriptions",
      "organizations_url": "https://api.github.com/users/lenifoti/orgs",
      "repos_url": "https://api.github.com/users/lenifoti/repos",
      "events_url": "https://api.github.com/users/lenifoti/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lenifoti/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-06-05T04:22:53Z",
    "updated_at": "2021-06-05T04:22:53Z",
    "author_association": "NONE",
    "body": "Still reading....\r\nSo far I don't see a tight binding with Nfts. This seems to be more to do with fungible tokens that represent a share of something. could it be a Dao?\r\nIs there a reason that the erc20 are extended rather than the parent contact?\r\nThere is no interface for the parent contract, is the requirement simply that the parent contract has new behaviour t interact with the erc20 token? Maybe there needs to be more description of what the parent must do. Maybe a sequence diagram?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/855180920/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/855198665",
    "html_url": "https://github.com/ethereum/EIPs/issues/3601#issuecomment-855198665",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/3601",
    "id": 855198665,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg1NTE5ODY2NQ==",
    "user": {
      "login": "wighawag",
      "id": 790580,
      "node_id": "MDQ6VXNlcjc5MDU4MA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/790580?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wighawag",
      "html_url": "https://github.com/wighawag",
      "followers_url": "https://api.github.com/users/wighawag/followers",
      "following_url": "https://api.github.com/users/wighawag/following{/other_user}",
      "gists_url": "https://api.github.com/users/wighawag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wighawag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wighawag/subscriptions",
      "organizations_url": "https://api.github.com/users/wighawag/orgs",
      "repos_url": "https://api.github.com/users/wighawag/repos",
      "events_url": "https://api.github.com/users/wighawag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wighawag/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-06-05T07:27:41Z",
    "updated_at": "2021-06-05T07:27:41Z",
    "author_association": "CONTRIBUTOR",
    "body": "Hey, thanks @PowerStream3604 for bringing that up. as @lenifoti mentions this would be great to ensure compatibility with EIP-2981, but I think it does in principle.\r\n\r\nElse regarding the link between the NFT and the ERC20, there is another standard specifically addressing that : https://eips.ethereum.org/EIPS/eip-1633\r\n\r\nMaybe this part could be reused ?\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/855198665/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/855204259",
    "html_url": "https://github.com/ethereum/EIPs/issues/3601#issuecomment-855204259",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/3601",
    "id": 855204259,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg1NTIwNDI1OQ==",
    "user": {
      "login": "PowerStream3604",
      "id": 63450340,
      "node_id": "MDQ6VXNlcjYzNDUwMzQw",
      "avatar_url": "https://avatars.githubusercontent.com/u/63450340?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/PowerStream3604",
      "html_url": "https://github.com/PowerStream3604",
      "followers_url": "https://api.github.com/users/PowerStream3604/followers",
      "following_url": "https://api.github.com/users/PowerStream3604/following{/other_user}",
      "gists_url": "https://api.github.com/users/PowerStream3604/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/PowerStream3604/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/PowerStream3604/subscriptions",
      "organizations_url": "https://api.github.com/users/PowerStream3604/orgs",
      "repos_url": "https://api.github.com/users/PowerStream3604/repos",
      "events_url": "https://api.github.com/users/PowerStream3604/events{/privacy}",
      "received_events_url": "https://api.github.com/users/PowerStream3604/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-06-05T08:17:26Z",
    "updated_at": "2021-06-05T08:17:26Z",
    "author_association": "CONTRIBUTOR",
    "body": "> Hey, thanks @PowerStream3604 for bringing that up. as @lenifoti mentions this would be great to ensure compatibility with EIP-2981, but I think it does in principle.\r\n> \r\n> Else regarding the link between the NFT and the ERC20, there is another standard specifically addressing that : https://eips.ethereum.org/EIPS/eip-1633\r\n> \r\n> Maybe this part could be reused ?\r\n\r\nDefinitely, I also think that EIP-1633 can be reused as link between NFT and ERC-20.\r\nI also agree that ensuring compatibility with eip-2891 is considerable as it is becoming conventional in numerous well-known NFT marketplaces.\r\nSince, the focus of this proposal was to explain distribution logic and making the NFT fractional.\r\nI thought that adding `royaltyInfo()` in EIP-2981 is a tacit agreement between programmers.\r\nTo reduce any controversy, I'll add a section to recommend them to add compatibility with EIP-2981.\r\nThanks!!",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/855204259/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/855205805",
    "html_url": "https://github.com/ethereum/EIPs/issues/3601#issuecomment-855205805",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/3601",
    "id": 855205805,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg1NTIwNTgwNQ==",
    "user": {
      "login": "PowerStream3604",
      "id": 63450340,
      "node_id": "MDQ6VXNlcjYzNDUwMzQw",
      "avatar_url": "https://avatars.githubusercontent.com/u/63450340?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/PowerStream3604",
      "html_url": "https://github.com/PowerStream3604",
      "followers_url": "https://api.github.com/users/PowerStream3604/followers",
      "following_url": "https://api.github.com/users/PowerStream3604/following{/other_user}",
      "gists_url": "https://api.github.com/users/PowerStream3604/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/PowerStream3604/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/PowerStream3604/subscriptions",
      "organizations_url": "https://api.github.com/users/PowerStream3604/orgs",
      "repos_url": "https://api.github.com/users/PowerStream3604/repos",
      "events_url": "https://api.github.com/users/PowerStream3604/events{/privacy}",
      "received_events_url": "https://api.github.com/users/PowerStream3604/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-06-05T08:31:00Z",
    "updated_at": "2021-06-05T11:23:15Z",
    "author_association": "CONTRIBUTOR",
    "body": "> Still reading....\r\n> So far I don't see a tight binding with Nfts. This seems to be more to do with fungible tokens that represent a share of something. could it be a Dao?\r\n> Is there a reason that the erc20 are extended rather than the parent contact?\r\n> There is no interface for the parent contract, is the requirement simply that the parent contract has new behaviour t interact with the erc20 token? Maybe there needs to be more description of what the parent must do. Maybe a sequence diagram?\r\n\r\nThis standard could also be used without NFT being the owner of the ERC-20 contract.\r\nWhich means that it can solely be used for distributing royalty to ERC-20 token holders.\r\nHowever, I felt the need for a royalty-distribution-system regarding NFT since NFTs are being used as certificates for owning a asset.\r\nNFTs usually have a pointer to that asset such as a metadata holder that has IPFS hash that points to the asset.\r\nSo, I thought that NFTs are the main usage for this standards as they represent assets themselves.\r\nAnd the objective of this standard was also for NFT since there are no standards until now regarding distributions of royalty to NFT share holders.\r\nBut, I find your opinion to be reasonable as it could also be used without being related to NFTs.\r\nI'll add a section or explanation that this standard could also be used solely without correlation with NFT.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/855205805/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/855364264",
    "html_url": "https://github.com/ethereum/EIPs/issues/3601#issuecomment-855364264",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/3601",
    "id": 855364264,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg1NTM2NDI2NA==",
    "user": {
      "login": "Amxx",
      "id": 2432299,
      "node_id": "MDQ6VXNlcjI0MzIyOTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2432299?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Amxx",
      "html_url": "https://github.com/Amxx",
      "followers_url": "https://api.github.com/users/Amxx/followers",
      "following_url": "https://api.github.com/users/Amxx/following{/other_user}",
      "gists_url": "https://api.github.com/users/Amxx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Amxx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Amxx/subscriptions",
      "organizations_url": "https://api.github.com/users/Amxx/orgs",
      "repos_url": "https://api.github.com/users/Amxx/repos",
      "events_url": "https://api.github.com/users/Amxx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Amxx/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-06-06T08:56:03Z",
    "updated_at": "2021-06-06T08:56:03Z",
    "author_association": "CONTRIBUTOR",
    "body": "Small grain of salt here:\r\nUsing ERC20 to represents \"shares\" in a multisig-like wallet that owns NFTs is a nice thing. Sploiler, its not a new idea: I personally built the contract for an apps that does exactly that.\r\n\r\n- See that [wallet](https://github.com/metalithio/niftex-v2-contracts/blob/master/contracts/wallet/ShardedWallet.sol)\r\n- And the corresponding [modules](https://github.com/metalithio/niftex-v2-contracts/tree/master/contracts/modules/implementations)\r\n\r\nI'm wondering if that needs an ERC, I would argue that no. ERC20 is an ERC, ERC721 is an ERC, ERC165 is an ERC, but combining the 3 in a dapp is just one business logic, we are not going to standardize all business logics. Uniswap V2 Pairs for example and not standardize in an ERC and they don't need to be.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/855364264/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/855526347",
    "html_url": "https://github.com/ethereum/EIPs/issues/3601#issuecomment-855526347",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/3601",
    "id": 855526347,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg1NTUyNjM0Nw==",
    "user": {
      "login": "PowerStream3604",
      "id": 63450340,
      "node_id": "MDQ6VXNlcjYzNDUwMzQw",
      "avatar_url": "https://avatars.githubusercontent.com/u/63450340?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/PowerStream3604",
      "html_url": "https://github.com/PowerStream3604",
      "followers_url": "https://api.github.com/users/PowerStream3604/followers",
      "following_url": "https://api.github.com/users/PowerStream3604/following{/other_user}",
      "gists_url": "https://api.github.com/users/PowerStream3604/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/PowerStream3604/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/PowerStream3604/subscriptions",
      "organizations_url": "https://api.github.com/users/PowerStream3604/orgs",
      "repos_url": "https://api.github.com/users/PowerStream3604/repos",
      "events_url": "https://api.github.com/users/PowerStream3604/events{/privacy}",
      "received_events_url": "https://api.github.com/users/PowerStream3604/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-06-07T02:08:01Z",
    "updated_at": "2021-06-07T06:15:48Z",
    "author_association": "CONTRIBUTOR",
    "body": "> Small grain of salt here:\r\n> Using ERC20 to represents \"shares\" in a multisig-like wallet that owns NFTs is a nice thing. Sploiler, its not a new idea: I personally built the contract for an apps that does exactly that.\r\n> \r\n> * See that [wallet](https://github.com/metalithio/niftex-v2-contracts/blob/master/contracts/wallet/ShardedWallet.sol)\r\n> * And the corresponding [modules](https://github.com/metalithio/niftex-v2-contracts/tree/master/contracts/modules/implementations)\r\n> \r\n> I'm wondering if that needs an ERC, I would argue that no. ERC20 is an ERC, ERC721 is an ERC, ERC165 is an ERC, but combining the 3 in a dapp is just one business logic, we are not going to standardize all business logic. Uniswap V2 Pairs for example and not standardize in an ERC and they don't need to be.\r\n\r\nThe focus of this proposal is not combining ERC 20, 721, 165 but utilizing them to distribute royalty fairly to token owners.\r\nThe main point of this proposal is to make a royalty distribution system on 'Block Chain' so that it is verifiable and reliable.\r\nAlthough currently there are no instances where they distribute a huge amount of money to NFT owners, it is for sure that in the near future this will happen.\r\nTo prepare for these situations we definitely need standards to comply with, if not, every platform and business will have their distinct logic and functions that are not compatible with each other.\r\nThis is certainly a bad phenomenon. To prevent those from happening we need this.\r\nIn your stance, even EIP-2981 is merely business logic.\r\nI would argue that an on-chain system for distributing royalty is needed since relying on a third party's logic such as dapp(off-chain) might cause fraud and accidents.\r\nAnd again this proposal's main point is about standardizing the royalty distribution system to make royalty distribution logic compatible ubiquitously.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/855526347/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/907430787",
    "html_url": "https://github.com/ethereum/EIPs/issues/3601#issuecomment-907430787",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/3601",
    "id": 907430787,
    "node_id": "IC_kwDOAq426M42FkuD",
    "user": {
      "login": "poojaranjan",
      "id": 29681685,
      "node_id": "MDQ6VXNlcjI5NjgxNjg1",
      "avatar_url": "https://avatars.githubusercontent.com/u/29681685?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/poojaranjan",
      "html_url": "https://github.com/poojaranjan",
      "followers_url": "https://api.github.com/users/poojaranjan/followers",
      "following_url": "https://api.github.com/users/poojaranjan/following{/other_user}",
      "gists_url": "https://api.github.com/users/poojaranjan/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/poojaranjan/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/poojaranjan/subscriptions",
      "organizations_url": "https://api.github.com/users/poojaranjan/orgs",
      "repos_url": "https://api.github.com/users/poojaranjan/repos",
      "events_url": "https://api.github.com/users/poojaranjan/events{/privacy}",
      "received_events_url": "https://api.github.com/users/poojaranjan/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-08-27T19:33:54Z",
    "updated_at": "2021-08-27T19:33:54Z",
    "author_association": "CONTRIBUTOR",
    "body": "@PowerStream3604 \r\nFYI, if you're interested in pushing this as an Ethereum Standard in ERC category, you might want to create a pull request in this repo to initiate the process. \r\nAlso, creating a \"discussion-to\" thread at [Fellowship of Ethereum Magicians ](https://ethereum-magicians.org/) is highly recommended as most of the Ethereum devs hangout ther for proposal discussions and this issue may get closed eventually. \r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/907430787/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/926969772",
    "html_url": "https://github.com/ethereum/EIPs/issues/3601#issuecomment-926969772",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/3601",
    "id": 926969772,
    "node_id": "IC_kwDOAq426M43QG-s",
    "user": {
      "login": "markg85",
      "id": 49061,
      "node_id": "MDQ6VXNlcjQ5MDYx",
      "avatar_url": "https://avatars.githubusercontent.com/u/49061?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/markg85",
      "html_url": "https://github.com/markg85",
      "followers_url": "https://api.github.com/users/markg85/followers",
      "following_url": "https://api.github.com/users/markg85/following{/other_user}",
      "gists_url": "https://api.github.com/users/markg85/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/markg85/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/markg85/subscriptions",
      "organizations_url": "https://api.github.com/users/markg85/orgs",
      "repos_url": "https://api.github.com/users/markg85/repos",
      "events_url": "https://api.github.com/users/markg85/events{/privacy}",
      "received_events_url": "https://api.github.com/users/markg85/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-09-24T23:33:44Z",
    "updated_at": "2021-09-24T23:33:44Z",
    "author_association": "NONE",
    "body": "I like this idea. I've been searching for some form of ERC contract that would allow payment per month in an automatic fashion. Say for example you get your monthly salary and need to pay x companies (mortgage, phone contract, internet, ...). An ERC like this would allow that fairly easily.\r\n\r\nOr yearly payments.\r\n\r\nIgnore the fact that my example is moot as this idea would require very wide spread adoption in the entire economic system to do this. And that Ethereum natively doesn't support recurrent time based contract invocation... (There are solutions for that) But hey, it's fun to imagine how it could be done when tech and the world gets there.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/926969772/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/927235804",
    "html_url": "https://github.com/ethereum/EIPs/issues/3601#issuecomment-927235804",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/3601",
    "id": 927235804,
    "node_id": "IC_kwDOAq426M43RH7c",
    "user": {
      "login": "timfong888",
      "id": 14055,
      "node_id": "MDQ6VXNlcjE0MDU1",
      "avatar_url": "https://avatars.githubusercontent.com/u/14055?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/timfong888",
      "html_url": "https://github.com/timfong888",
      "followers_url": "https://api.github.com/users/timfong888/followers",
      "following_url": "https://api.github.com/users/timfong888/following{/other_user}",
      "gists_url": "https://api.github.com/users/timfong888/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/timfong888/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/timfong888/subscriptions",
      "organizations_url": "https://api.github.com/users/timfong888/orgs",
      "repos_url": "https://api.github.com/users/timfong888/repos",
      "events_url": "https://api.github.com/users/timfong888/events{/privacy}",
      "received_events_url": "https://api.github.com/users/timfong888/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-09-26T05:34:24Z",
    "updated_at": "2021-09-26T05:34:24Z",
    "author_association": "NONE",
    "body": "I was also looking for something like this.  I am specing out a contract which would generate an NFT based on multiple content contributors that would be referenced in the tokenURL as meta-data.  In our case, the royalty rate would be evenly distributed by the number of parties.  But I didn't think assigning ERC-20 token for each NFT by the contract was right.\r\n\r\nThe NFTs would be generated the same contract, but have different contributors and unique metadata (I believe ERC-721 can still be applied, but have been confused by the language around ERC-1155 as to whether I need to use that instead).\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/927235804/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/928607792",
    "html_url": "https://github.com/ethereum/EIPs/issues/3601#issuecomment-928607792",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/3601",
    "id": 928607792,
    "node_id": "IC_kwDOAq426M43WW4w",
    "user": {
      "login": "PowerStream3604",
      "id": 63450340,
      "node_id": "MDQ6VXNlcjYzNDUwMzQw",
      "avatar_url": "https://avatars.githubusercontent.com/u/63450340?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/PowerStream3604",
      "html_url": "https://github.com/PowerStream3604",
      "followers_url": "https://api.github.com/users/PowerStream3604/followers",
      "following_url": "https://api.github.com/users/PowerStream3604/following{/other_user}",
      "gists_url": "https://api.github.com/users/PowerStream3604/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/PowerStream3604/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/PowerStream3604/subscriptions",
      "organizations_url": "https://api.github.com/users/PowerStream3604/orgs",
      "repos_url": "https://api.github.com/users/PowerStream3604/repos",
      "events_url": "https://api.github.com/users/PowerStream3604/events{/privacy}",
      "received_events_url": "https://api.github.com/users/PowerStream3604/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-09-28T01:57:19Z",
    "updated_at": "2021-09-28T01:57:19Z",
    "author_association": "CONTRIBUTOR",
    "body": "> @PowerStream3604\r\n> FYI, if you're interested in pushing this as an Ethereum Standard in ERC category, you might want to create a pull request in this repo to initiate the process.\r\n> Also, creating a \"discussion-to\" thread at [Fellowship of Ethereum Magicians ](https://ethereum-magicians.org/) is highly recommended as most of the Ethereum devs hangout ther for proposal discussions and this issue may get closed eventually.\r\n\r\nThanks, @poojaranjan \r\nI actually made a pull request a few months ago...\r\nPR link : [Pull Request](https://github.com/ethereum/EIPs/pull/3602)\r\nAdded Discussions link : [Discussion](https://ethereum-magicians.org/t/fnft-with-royalty-distribution-system/7150)",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/928607792/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/932773334",
    "html_url": "https://github.com/ethereum/EIPs/issues/3601#issuecomment-932773334",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/3601",
    "id": 932773334,
    "node_id": "IC_kwDOAq426M43mP3W",
    "user": {
      "login": "NolanCassidy",
      "id": 22786772,
      "node_id": "MDQ6VXNlcjIyNzg2Nzcy",
      "avatar_url": "https://avatars.githubusercontent.com/u/22786772?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/NolanCassidy",
      "html_url": "https://github.com/NolanCassidy",
      "followers_url": "https://api.github.com/users/NolanCassidy/followers",
      "following_url": "https://api.github.com/users/NolanCassidy/following{/other_user}",
      "gists_url": "https://api.github.com/users/NolanCassidy/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/NolanCassidy/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/NolanCassidy/subscriptions",
      "organizations_url": "https://api.github.com/users/NolanCassidy/orgs",
      "repos_url": "https://api.github.com/users/NolanCassidy/repos",
      "events_url": "https://api.github.com/users/NolanCassidy/events{/privacy}",
      "received_events_url": "https://api.github.com/users/NolanCassidy/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-10-02T15:47:19Z",
    "updated_at": "2021-10-02T15:47:19Z",
    "author_association": "NONE",
    "body": "I have implemented your approach into a test token of mine and it is working great for the most part. One issue I am having is that after buying and selling on open sea, some of the functions start returning errors. Is there another function other then _transfer we need? Possibly Atomic match?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/932773334/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/933095130",
    "html_url": "https://github.com/ethereum/EIPs/issues/3601#issuecomment-933095130",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/3601",
    "id": 933095130,
    "node_id": "IC_kwDOAq426M43neba",
    "user": {
      "login": "PowerStream3604",
      "id": 63450340,
      "node_id": "MDQ6VXNlcjYzNDUwMzQw",
      "avatar_url": "https://avatars.githubusercontent.com/u/63450340?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/PowerStream3604",
      "html_url": "https://github.com/PowerStream3604",
      "followers_url": "https://api.github.com/users/PowerStream3604/followers",
      "following_url": "https://api.github.com/users/PowerStream3604/following{/other_user}",
      "gists_url": "https://api.github.com/users/PowerStream3604/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/PowerStream3604/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/PowerStream3604/subscriptions",
      "organizations_url": "https://api.github.com/users/PowerStream3604/orgs",
      "repos_url": "https://api.github.com/users/PowerStream3604/repos",
      "events_url": "https://api.github.com/users/PowerStream3604/events{/privacy}",
      "received_events_url": "https://api.github.com/users/PowerStream3604/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-10-04T02:28:05Z",
    "updated_at": "2021-10-04T02:31:15Z",
    "author_association": "CONTRIBUTOR",
    "body": "> I have implemented your approach into a test token of mine and it is working great for the most part. One issue I am having is that after buying and selling on open sea, some of the functions start returning errors. Is there another function other then _transfer we need? Possibly Atomic match?\r\n\r\nThis is an **ERC20** contract with additional features(FNFT with Royalty Distribution system),\r\nbesides `_transfer()` you might need other functions needed for **ERC20**.\r\n\r\nOr could be an atomic match triggering the matter.\r\n\r\nSince I don't see the implementation so this is all I can say.\r\nYou can send me the implementation if you want precise directions.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/933095130/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/1086529869",
    "html_url": "https://github.com/ethereum/EIPs/issues/3601#issuecomment-1086529869",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/3601",
    "id": 1086529869,
    "node_id": "IC_kwDOAq426M5AwyFN",
    "user": {
      "login": "github-actions[bot]",
      "id": 41898282,
      "node_id": "MDM6Qm90NDE4OTgyODI=",
      "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/github-actions%5Bbot%5D",
      "html_url": "https://github.com/apps/github-actions",
      "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
      "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
      "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
      "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
      "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
      "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
      "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
      "type": "Bot",
      "site_admin": false
    },
    "created_at": "2022-04-02T03:12:30Z",
    "updated_at": "2022-04-02T03:12:30Z",
    "author_association": "NONE",
    "body": "There has been no activity on this issue for two months. It will be closed in a week if no further activity occurs. If you would like to move this EIP forward, please respond to any outstanding feedback or add a comment indicating that you have addressed all required feedback and are ready for a review.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/1086529869/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/1100560447",
    "html_url": "https://github.com/ethereum/EIPs/issues/3601#issuecomment-1100560447",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/3601",
    "id": 1100560447,
    "node_id": "IC_kwDOAq426M5BmTg_",
    "user": {
      "login": "github-actions[bot]",
      "id": 41898282,
      "node_id": "MDM6Qm90NDE4OTgyODI=",
      "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/github-actions%5Bbot%5D",
      "html_url": "https://github.com/apps/github-actions",
      "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
      "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
      "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
      "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
      "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
      "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
      "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
      "type": "Bot",
      "site_admin": false
    },
    "created_at": "2022-04-16T04:02:46Z",
    "updated_at": "2022-04-16T04:02:46Z",
    "author_association": "NONE",
    "body": "This issue was closed due to inactivity. If you are still pursuing it, feel free to reopen it and respond to any feedback or request a review in a comment.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/1100560447/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
