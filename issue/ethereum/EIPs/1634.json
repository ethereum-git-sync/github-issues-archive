{
  "url": "https://api.github.com/repos/ethereum/EIPs/issues/1634",
  "repository_url": "https://api.github.com/repos/ethereum/EIPs",
  "labels_url": "https://api.github.com/repos/ethereum/EIPs/issues/1634/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/EIPs/issues/1634/comments",
  "events_url": "https://api.github.com/repos/ethereum/EIPs/issues/1634/events",
  "html_url": "https://github.com/ethereum/EIPs/issues/1634",
  "id": 386565353,
  "node_id": "MDU6SXNzdWUzODY1NjUzNTM=",
  "number": 1634,
  "title": "ERC 1633 - RFT (Re-Fungible Token)",
  "user": {
    "login": "okwme",
    "id": 964052,
    "node_id": "MDQ6VXNlcjk2NDA1Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/964052?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/okwme",
    "html_url": "https://github.com/okwme",
    "followers_url": "https://api.github.com/users/okwme/followers",
    "following_url": "https://api.github.com/users/okwme/following{/other_user}",
    "gists_url": "https://api.github.com/users/okwme/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/okwme/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/okwme/subscriptions",
    "organizations_url": "https://api.github.com/users/okwme/orgs",
    "repos_url": "https://api.github.com/users/okwme/repos",
    "events_url": "https://api.github.com/users/okwme/events{/privacy}",
    "received_events_url": "https://api.github.com/users/okwme/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 2328627851,
      "node_id": "MDU6TGFiZWwyMzI4NjI3ODUx",
      "url": "https://api.github.com/repos/ethereum/EIPs/labels/stale",
      "name": "stale",
      "color": "000000",
      "default": false,
      "description": ""
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 10,
  "created_at": "2018-12-02T14:36:50Z",
  "updated_at": "2021-12-05T05:10:43Z",
  "closed_at": "2021-12-05T05:10:43Z",
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "---\r\neip: 1633\r\ntitle: Re-Fungible Token Standard (RFT)\r\nauthor: Billy Rennekamp (@okwme), Dan Long (dan@artblx.com), Kiryl Yermakou (kiryl@artblx.com), Nate van der Ende (nate@artblx.com)\r\ndiscussions-to: https://github.com/ethereum/EIPs/issues/1634\r\nstatus: Draft\r\ntype: Standards Track\r\ncategory: ERC\r\ncreated: 2018-11-18\r\nrequires: 20, 165, 721\r\n---\r\n\r\n## Simple Summary\r\n<!--\"If you can't explain it simply, you don't understand it well enough.\" Provide a simplified and layman-accessible explanation of the EIP.-->\r\nThis improvement proposal outlines an extension to the ERC-20 Token Standard and utilization of ERC-165 Standard Interface Detection. The purpose is to enable the ability to distinguish when an ERC-20 token represents shared ownership of an ERC-721 non-fungible token (NFT) and by extension any potentially underlying asset therein. This is made possible by a re-fungible token (RFT) contract assuming ownership of a non-fungible token.\r\n\r\n## Abstract\r\n<!--A short (~200 word) description of the technical issue being addressed.-->\r\nThe intention of this proposal, the Re-Fungible Token Standard, is to extend the ERC-20 Token Standard and utilize ERC-165 Standard Interface Detection in order to represent the shared ownership of an ERC-721 Non-Fungible Token. The ERC-20 Token Standard was modified as little as possible in order to allow this new class of token to operate in all of the ways and locations which are familiar to assets that follow the original ERC-20 specification. While there are many possible variations of this specification that would enable many different capabilities and scenarios for shared ownership, this proposal is focused on the minimal commonalities to enable as much flexibility as possible for various further extensions. This proposal makes it possible to verify, from the contract level or from an external query, whether a fungible token represents a form of shared ownership of a non-fungible token. The inclusion of ERC-165 makes it possible to verify, from the contract level or from an external query, whether a non-fungible token is owned by ERC-20 token representing shared ownership.\r\n\r\n## Motivation\r\n<!--The motivation is critical for EIPs that want to change the Ethereum protocol. It should clearly explain why the existing protocol specification is inadequate to address the problem that the EIP solves. EIP submissions without sufficient motivation may be rejected outright.-->\r\nShared ownership occurs across many industries and for many reasons. As more assets are registered, regulated and/or represented by the ERC-721 Non-Fungible Token Standard there will be more instances where the need for shared ownership of these assets will arise. For example, ARTBLX Inc. is working towards facilitating a protocol for collective ownership of physical, digital and conceptual artworks. The fungible tokens created from this process will have a value attached to the non-fungible tokens which they represent. This will be useful for price discovery of the underlying asset, liquidity for shared owners and as a new class of asset which can be used as collateral for loans or other financial instruments like stable coins. Providing an interface to this special class of fungible tokens is necessary to allow third parties to recognize them as a special class of fungible token and to recognize when a non-fungible token is collectively owned. This might be useful in the case of a wallet who would want to utilize the metadata of the underlying NFT to show additional info next to an RFT, or on an exchange who might want to make that sort of info similarly available, or an NFT marketplace who may want to direct customers to a relevant exchange who wish to purchase shares in a NFT which is owned by an RFT. Anywhere an ERC-20 is applicable it would be useful for a user to know whether that token represents a shared NFT, and what attributes that NFT may have.\r\n\r\n## Specification\r\n<!--The technical specification should describe the syntax and semantics of any new feature. The specification should be detailed enough to allow competing, interoperable implementations for any of the current Ethereum platforms (go-ethereum, parity, cpp-ethereum, ethereumj, ethereumjs, and [others](https://github.com/ethereum/wiki/wiki/Clients)).-->\r\nAt a minimum, third parties need two things: 1) to be able to distinguish re-fungible tokens from other token standards and 2) to determine when a non-fungible token is collectively owned. These two scenarios can be encountered from the perspective of initial contact with the non-fungible token or from the perspective of initial contact with the re-fungible token.\r\n\r\n#### Inital Contact with the Re-Fungible Token\r\n\r\nIn order for a third party to confirm which non-fungible token is owned by the re-fungible token there needs to be a pointer from the RFT contract to the NFT contract and the relevant token id. This is possible with two public getters named `parentToken()` and `parentTokenId()`. The first getter returns a variable of type `address` and designates the contract address of the Non-Fungible Token contract. The second getter returns a variable of type `uint256` and designates the token ID of the Non-Fungible Token. With these getters, the identity of the Non-Fungible Token can be determined. Below is an example of the Re-Fungible Token Standard interface that includes these getter functions:\r\n\r\n```solidity\r\npragma solidity ^0.4.20;\r\n\r\n/// @dev Note: the ERC-165 identifier for this interface is 0x5755c3f2.\r\ninterface RFT /* is ERC20, ERC165 */ {\r\n\r\n  function parentToken() external view returns(address _parentToken);\r\n  function parentTokenId() external view returns(uint256 _parentTokenId);\r\n\r\n}\r\n```\r\n\r\nThe validity of this claim can be confirmed from another contract (on-chain) or from interacting with an RPC endpoint (off-chain). Below is an example of the on-chain scenario:\r\n\r\n```solidity\r\npragma solidity ^0.4.20;\r\n\r\nimport './RFT.sol';\r\nimport './ERC721.sol';\r\n\r\ncontract ConfirmRFT {\r\n\r\n  function confirmRFT(address _RFT) external view returns(bool) {\r\n    address _NFT = RFT(_RFT).parentToken(); // returns address of NFT contract\r\n    uint256 _tokenId = RFT(_RFT).parentTokenId(); // returns id of ID of NFT\r\n\r\n    return\r\n      NFT(_NFT).supportsInterface(0x80ac58cd) && // confirm it is ERC-721\r\n      NFT(_NFT).ownerOf(_tokenId) == _RFT; // confirm the owner of the NFT is the RFT contract address\r\n  }\r\n\r\n}\r\n```\r\n\r\nBelow is an off-chain example using an instance of web3.js in javascript:\r\n```javascript\r\nasync function confirmRFT(web3) {\r\n\r\n  const ERC721ABI = [...] // abi for ERC721\r\n  const RFTABI = [...] // abi for RFT\r\n  const RFTAddress = '0x0123456789abcdef0123456789abcdef' // address for the deployed RFT\r\n\r\n  const RFTContract = new web3.eth.Contract(RFTABI, RFTAddress) // deployed RFT contract instance\r\n  const ERC721Address = await RFTcontract.methods.parentToken().call() // returns address of NFT contract\r\n  const ERC721TokenId = await RFTcontract.methods.parentTokenId().call() // returns id of ID of NFT\r\n\r\n  const ERC721Contract = new web3.eth.Contract(ERC721ABI, ERC721Address) // deployed ERC721 (as reported by RFT)\r\n  const isERC721 = await ERC721Contract.methods.supportsInterface('0x80ac58cd').call() // confirm it is ERC-721\r\n  const ownerOfAddress = await ERC721Contract.methods.ownerOf(ERC721TokenId).call() // get the owner of the NFT\r\n\r\n  return ERC721Response.toLowerCase() === RFTAddress.toLowerCase() // confirm the owner of the NFT is the RFT contract\r\n}\r\n```\r\n\r\n#### Inital Contact with the Non-Fungible Token\r\n\r\nWhen checking the owner of a specific non-fungible token it's important to be able to determine whether owner is in fact a re-fungible token contract. This is possible by utilizing ERC-165 Standard Interface Detection. In order to comply with that standard a contract must include the following getter function which returns `true` when passed the `bytes4` parameter `0x01ffc9a7`:\r\n```\r\nfunction supportsInterface(bytes4 interfaceID) external view returns (bool);\r\n```\r\nAfter establishing support for this interface it becomes useful in determining whether the contract adheres to the Re-Fungible Token Standard. To do so the `supportsInterface(bytes4 interfaceID)` getter function must return `true` when passed the `bytes4` parameter `0x5755c3f2` which is the result of `bytes4(keccak256('parentToken()')) ^ bytes4(keccak256('parentTokenId()'))` or `parentToken.selector ^ parentTokenId.selector`. This could be achieved with the following code:\r\n```solidity\r\npragma solidity ^0.4.20;\r\n\r\nimport \"./ERC20.sol\";\r\n\r\n/// @dev Note: the ERC-165 identifier for this interface is 0x5755c3f2.\r\ninterface RFT is ERC20 /*, ERC165 */ {\r\n\r\n  function supportsInterface(bytes4 interfaceID) external view returns(bool) {\r\n    return\r\n      interfaceID == this.supportsInterface.selector || // ERC165\r\n      interfaceID == this.parentToken.selector || // parentToken()\r\n      interfaceID == this.parentTokenId.selector || // parentTokenId()\r\n      interfaceID == this.parentToken.selector ^ this.parentTokenId.selector; // RFT\r\n  }\r\n\r\n  function parentToken() external view returns(address _parentToken);\r\n  function parentTokenId() external view returns(uint256 _parentTokenId);\r\n\r\n}\r\n```\r\nThe flow of actually checking the status of a non-fungible token owner as a re-fungible token contract can be done from another contract (on-chain) as well as with an RPC endpoint (off-chain). Below is an example of the on-chain scenario:\r\n```solidity\r\npragma solidity ^0.4.20;\r\n\r\nimport './RFT.sol';\r\nimport './ERC721.sol';\r\n\r\ncontract ConfirmRFT {\r\n\r\n  function confirmRFT(address _NFT, uint256 _tokenId) external view returns(bool) {\r\n    address _RFT = ERC721(_NFT).ownerOf(_tokenId); // get the owner of the NFT\r\n\r\n    return\r\n      RFT(_RFT).supportsInterface(0x01ffc9a7) && // confirm it supports ERC-165\r\n      RFT(_RFT).supportsInterface(0x5755c3f2) // confirm it is RFT\r\n  }\r\n\r\n}\r\n```\r\nBelow is an off-chain example using web3.js in javascript:\r\n```javascript\r\nasync function confirmRFT(web3) {\r\n\r\n  const ERC721ABI = [...] // abi for ERC721\r\n  const RFTABI = [...] // abi for RFT\r\n  const ERC721Address = '0x0123456789abcdef0123456789abcdef' // address for the deployed NFT\r\n  const ERC721TokenId = '7' // token Id of the NFT\r\n\r\n  const ERC721Contract = new web3.eth.Contract(ERC721ABI, ERC721Address) // deployed ERC721\r\n  const RFTAddress = await ERC721Contract.methods.ownerOf(ERC721TokenId).call() // owner address of the NFT\r\n\r\n\r\n  const RFTContract = new web3.eth.Contract(RFTABI, RFTAddress) // deployed RFT contract instance\r\n  const isERC165 = await RFTContract.methods.supportsInterface('0x01ffc9a7').call() // confirm it is ERC-165\r\n  return isERC165 && await RFTContract.methods.supportsInterface('0x5755c3f2').call() // confirm it is RFT\r\n\r\n}\r\n```\r\n## Rationale\r\n<!--The rationale fleshes out the specification by describing what motivated the design and why particular design decisions were made. It should describe alternate designs that were considered and related work, e.g. how the feature is supported in other languages. The rationale may also provide evidence of consensus within the community, and should discuss important objections or concerns raised during discussion.-->\r\nMost of the decisions made around the design of this standard were done in the hopes of keeping it as flexible as possible for as many use cases as possible. This includes making the standard 100% backwards compatible with ERC-20 Token Standard and able to interact with any previously deployed or future ERC-721 non-fungible token. This allows for each project to determine their own system for minting, burning and governing their re-fungible tokens depending on their specific use case.\r\n\r\nThere are a number of other ERCs which have similarities to this proposal however they are often overly opinionated and restict many valid variations which could arise in different scenarios. Many of them break ERC-20 or ERC-721 in the process, or are at their core solving a different problem. We believe a token standard should cover only the required commonality between an otherwise diverse set of scenarios in order for them to behave as expected where necessary but allow them to achieve their individual goals elsewhere. Below are a list of the proposals considered due to some similarities as well as why they may not fulfill the requirements of this standard. \r\n\r\n* [ERC-864: Divisible non-fungible tokens](https://github.com/ethereum/EIPs/issues/864)\r\n  * Proposes a replacement for ERC-20, not ERC-20 compatible\r\n  * Not a complete proposal\r\n* [ERC-1155: Multi Token Standard](https://github.com/ethereum/EIPs/issues/1155)\r\n  * Combines ERC-20 and ERC-721 into a single contract\r\n  * Not ERC-20 backwards compatible\r\n* [EIP-1178: Multi-class Token Standard](https://github.com/ethereum/EIPs/pull/1178)\r\n  * Solves a different problem (multiple classes of ERC-20 in one contract)\r\n* [ERC-1410: Partially Fungible Token Standard](https://github.com/ethereum/EIPs/issues/1410)\r\n  * Solves a different problem (multiple classes of ERC-20 in one contract)\r\n* [ERC-1528: Refungible ERC721 Asset with Fungible ERC20](https://github.com/ethereum/EIPs/issues/1528)\r\n  * Combines ERC-20 and ERC-721 into a single contract\r\n  * Not ERC-721 backwards compatibile\r\n  * Limits the types of assets which can become re-fungible\r\n* [ERC-1553: Asset Token Standard](https://github.com/ethereum/EIPs/issues/1553)\r\n  * Standard for defining real world assets and ownership via ERC-20\r\n  * Only for real world assets\r\n  * Primarily concerned with a different objective (correlating real world and on chain assets)\r\n\r\n## Backwards Compatibility\r\n<!--All EIPs that introduce backwards incompatibilities must include a section describing these incompatibilities and their severity. The EIP must explain how the author proposes to deal with these incompatibilities. EIP submissions without a sufficient backwards compatibility treatise may be rejected outright.-->\r\nThe Re-Fungible Token Standard is 100% backwards compatible with ERC-20 Token Standard. It is a small extension to the original specification and meant to be further extended for more specific use cases. Keeping the standard compatible with ERC-20 is important to allow for this token to benefit from the ecosystem that has grown around supporting the ubiquitous ERC-20 Token Standard.\r\n\r\nThe Re-Fungible Token Standard is intended to interact with the ERC-721 Non-Fungible Token Standard. It is kept purposefully agnostic to extensions beyond the standard in order to allow specific projects to design their own token relationships such as governance over, rights to or permissions on each non-fungible token relative to the respective re-fungible token owners.\r\n\r\n## Implementation\r\n<!--The implementations must be completed before any EIP is given status \"Final\", but it need not be completed before the EIP is accepted. While there is merit to the approach of reaching consensus on the specification and rationale before writing code, the principle of \"rough consensus and running code\" is still useful when it comes to resolving many discussions of API details.-->\r\n```solidity\r\npragma solidity ^0.4.20;\r\n\r\n/// @dev Note: the ERC-165 identifier for this interface is 0x5755c3f2.\r\ninterface RFT /* is ERC20, ERC165 */ {\r\n\r\n  function parentToken() external view returns(address _parentToken);\r\n  function parentTokenId() external view returns(uint256 _parentTokenId);\r\n\r\n}\r\n```\r\n\r\n## Copyright\r\nCopyright and related rights waived via [CC0](https://creativecommons.org/publicdomain/zero/1.0/).\r\n",
  "closed_by": {
    "login": "github-actions[bot]",
    "id": 41898282,
    "node_id": "MDM6Qm90NDE4OTgyODI=",
    "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/github-actions%5Bbot%5D",
    "html_url": "https://github.com/apps/github-actions",
    "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
    "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
    "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
    "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
    "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
    "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
    "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
    "type": "Bot",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/1634/reactions",
    "total_count": 23,
    "+1": 16,
    "-1": 0,
    "laugh": 0,
    "hooray": 4,
    "confused": 0,
    "heart": 0,
    "rocket": 2,
    "eyes": 1
  },
  "timeline_url": "https://api.github.com/repos/ethereum/EIPs/issues/1634/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/443543864",
    "html_url": "https://github.com/ethereum/EIPs/issues/1634#issuecomment-443543864",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1634",
    "id": 443543864,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0MzU0Mzg2NA==",
    "user": {
      "login": "sea51930",
      "id": 745017,
      "node_id": "MDQ6VXNlcjc0NTAxNw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/745017?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sea51930",
      "html_url": "https://github.com/sea51930",
      "followers_url": "https://api.github.com/users/sea51930/followers",
      "following_url": "https://api.github.com/users/sea51930/following{/other_user}",
      "gists_url": "https://api.github.com/users/sea51930/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sea51930/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sea51930/subscriptions",
      "organizations_url": "https://api.github.com/users/sea51930/orgs",
      "repos_url": "https://api.github.com/users/sea51930/repos",
      "events_url": "https://api.github.com/users/sea51930/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sea51930/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-12-02T21:28:55Z",
    "updated_at": "2018-12-02T21:28:55Z",
    "author_association": "CONTRIBUTOR",
    "body": "https://github.com/ethereum/EIPs/issues/864\r\nhttps://github.com/ethereum/EIPs/issues/115\r\nhttps://github.com/ethereum/EIPs/issues/15285",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/443543864/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/443626638",
    "html_url": "https://github.com/ethereum/EIPs/issues/1634#issuecomment-443626638",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1634",
    "id": 443626638,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0MzYyNjYzOA==",
    "user": {
      "login": "okwme",
      "id": 964052,
      "node_id": "MDQ6VXNlcjk2NDA1Mg==",
      "avatar_url": "https://avatars.githubusercontent.com/u/964052?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/okwme",
      "html_url": "https://github.com/okwme",
      "followers_url": "https://api.github.com/users/okwme/followers",
      "following_url": "https://api.github.com/users/okwme/following{/other_user}",
      "gists_url": "https://api.github.com/users/okwme/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/okwme/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/okwme/subscriptions",
      "organizations_url": "https://api.github.com/users/okwme/orgs",
      "repos_url": "https://api.github.com/users/okwme/repos",
      "events_url": "https://api.github.com/users/okwme/events{/privacy}",
      "received_events_url": "https://api.github.com/users/okwme/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-12-03T08:24:57Z",
    "updated_at": "2018-12-03T08:24:57Z",
    "author_association": "CONTRIBUTOR",
    "body": "@sea51930, erc #864 is referenced in the section called Rationale. I don't see how #115 relates and #15285 doesn't exist.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/443626638/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/448965454",
    "html_url": "https://github.com/ethereum/EIPs/issues/1634#issuecomment-448965454",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1634",
    "id": 448965454,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0ODk2NTQ1NA==",
    "user": {
      "login": "tlxsam",
      "id": 41119736,
      "node_id": "MDQ6VXNlcjQxMTE5NzM2",
      "avatar_url": "https://avatars.githubusercontent.com/u/41119736?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tlxsam",
      "html_url": "https://github.com/tlxsam",
      "followers_url": "https://api.github.com/users/tlxsam/followers",
      "following_url": "https://api.github.com/users/tlxsam/following{/other_user}",
      "gists_url": "https://api.github.com/users/tlxsam/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tlxsam/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tlxsam/subscriptions",
      "organizations_url": "https://api.github.com/users/tlxsam/orgs",
      "repos_url": "https://api.github.com/users/tlxsam/repos",
      "events_url": "https://api.github.com/users/tlxsam/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tlxsam/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-12-20T11:30:32Z",
    "updated_at": "2018-12-20T11:30:32Z",
    "author_association": "NONE",
    "body": "@okwme, can you please provide your thoughts on the following statements for #1528 \r\nNot ERC-721 backwards compatibile\r\nLimits the types of assets which can become re-fungible\r\nThanks",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/448965454/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/452044524",
    "html_url": "https://github.com/ethereum/EIPs/issues/1634#issuecomment-452044524",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1634",
    "id": 452044524,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1MjA0NDUyNA==",
    "user": {
      "login": "okwme",
      "id": 964052,
      "node_id": "MDQ6VXNlcjk2NDA1Mg==",
      "avatar_url": "https://avatars.githubusercontent.com/u/964052?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/okwme",
      "html_url": "https://github.com/okwme",
      "followers_url": "https://api.github.com/users/okwme/followers",
      "following_url": "https://api.github.com/users/okwme/following{/other_user}",
      "gists_url": "https://api.github.com/users/okwme/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/okwme/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/okwme/subscriptions",
      "organizations_url": "https://api.github.com/users/okwme/orgs",
      "repos_url": "https://api.github.com/users/okwme/repos",
      "events_url": "https://api.github.com/users/okwme/events{/privacy}",
      "received_events_url": "https://api.github.com/users/okwme/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-07T19:03:22Z",
    "updated_at": "2019-01-07T19:03:22Z",
    "author_association": "CONTRIBUTOR",
    "body": "Hi @tlxsam,\r\n\r\nMy apologies, it appeared to me that your EIP combined ERC-721 and ERC-20 into one contract. I see now you were just re-writing much of the ERC-721 Standard right before re-writing much of the ERC-20 Standard, not suggesting they should be combined. I think it was the third section of management functions made me believe they were all meant to be in one contract.\r\n\r\nAfter reviewing it again I see that our EIPs converge on the function `getNFT()` which is essentially the combination of `parentToken()` and `parentTokenId()`. I disagree with your suggestions of altering the ERC20 with the functions: `holdersCount()`, `holderByIndex(uint256 _index)`, `holders(uint256 _from, uint256 _to)`. I think there should be as minimal of an extension to the ERC-20 Standard as possible to ensure compatibility with existing systems and flexibility for individual use cases.\r\n\r\nI'd also disagree with including the management functions as part of the spec, as this should be left up to specific projects whether or not they need/want these features. Including it as a suggestion could be helpful though. We also considered adding our implementation for this step as a suggestion but not as a requirement.\r\n\r\nOnce you remove all those other extensions to ERC-20, you're left with just `getNFT()` as the only addition to the original standard. This is fine except that when considering ERC-165, it becomes more likely for a collision with only one function name for the ID. We also considered combining the functions into one but it's not safe to assume any contract that has a `getNFT()` interface is also a Re-Fungible Token—especially when the function name is as generic as `getNFT()` or `parentToken()`. It becomes much safer to assume the contract is in fact a Re-Fungible Token if the interface is the combination of more than one function, as is the case in 1633 with `parentToken()` and `parentTokenId()`. In the same vein, adding an additional function that returns both would be an easy way to increase usability as well as 165 collision protection, I'll suggest this as an update!\r\n\r\nI'd be happy to hear your thoughts on all of this!",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/452044524/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/703850059",
    "html_url": "https://github.com/ethereum/EIPs/issues/1634#issuecomment-703850059",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1634",
    "id": 703850059,
    "node_id": "MDEyOklzc3VlQ29tbWVudDcwMzg1MDA1OQ==",
    "user": {
      "login": "JamesDoe",
      "id": 8418929,
      "node_id": "MDQ6VXNlcjg0MTg5Mjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8418929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JamesDoe",
      "html_url": "https://github.com/JamesDoe",
      "followers_url": "https://api.github.com/users/JamesDoe/followers",
      "following_url": "https://api.github.com/users/JamesDoe/following{/other_user}",
      "gists_url": "https://api.github.com/users/JamesDoe/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JamesDoe/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JamesDoe/subscriptions",
      "organizations_url": "https://api.github.com/users/JamesDoe/orgs",
      "repos_url": "https://api.github.com/users/JamesDoe/repos",
      "events_url": "https://api.github.com/users/JamesDoe/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JamesDoe/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-10-05T19:47:35Z",
    "updated_at": "2020-10-05T19:47:35Z",
    "author_association": "NONE",
    "body": "Any update on this EIP: Is it headed towards Last Call?  Has it been abandoned?\r\n\r\nIt's a great proposal, and right-up-the-alley for something I'm currently working on; a securities-based, ERC721 token that can be \"fed\" ERC20 tokens, and then dynamically return principal and profits to the individual \"investors\" — while simultaneously constraining ownership to a singular \"author\".\r\n\r\nI'd love to employ this standard. It seems perfect for it.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/703850059/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/703872990",
    "html_url": "https://github.com/ethereum/EIPs/issues/1634#issuecomment-703872990",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1634",
    "id": 703872990,
    "node_id": "MDEyOklzc3VlQ29tbWVudDcwMzg3Mjk5MA==",
    "user": {
      "login": "okwme",
      "id": 964052,
      "node_id": "MDQ6VXNlcjk2NDA1Mg==",
      "avatar_url": "https://avatars.githubusercontent.com/u/964052?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/okwme",
      "html_url": "https://github.com/okwme",
      "followers_url": "https://api.github.com/users/okwme/followers",
      "following_url": "https://api.github.com/users/okwme/following{/other_user}",
      "gists_url": "https://api.github.com/users/okwme/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/okwme/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/okwme/subscriptions",
      "organizations_url": "https://api.github.com/users/okwme/orgs",
      "repos_url": "https://api.github.com/users/okwme/repos",
      "events_url": "https://api.github.com/users/okwme/events{/privacy}",
      "received_events_url": "https://api.github.com/users/okwme/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-10-05T20:33:38Z",
    "updated_at": "2020-10-05T20:33:38Z",
    "author_association": "CONTRIBUTOR",
    "body": "@JamesDoe sounds like a great use, I'm not sure what it takes to get an eip merged but feel free to weigh in [here](https://github.com/ethereum/EIPs/pull/1633)",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/703872990/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/703874658",
    "html_url": "https://github.com/ethereum/EIPs/issues/1634#issuecomment-703874658",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1634",
    "id": 703874658,
    "node_id": "MDEyOklzc3VlQ29tbWVudDcwMzg3NDY1OA==",
    "user": {
      "login": "JamesDoe",
      "id": 8418929,
      "node_id": "MDQ6VXNlcjg0MTg5Mjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8418929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JamesDoe",
      "html_url": "https://github.com/JamesDoe",
      "followers_url": "https://api.github.com/users/JamesDoe/followers",
      "following_url": "https://api.github.com/users/JamesDoe/following{/other_user}",
      "gists_url": "https://api.github.com/users/JamesDoe/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JamesDoe/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JamesDoe/subscriptions",
      "organizations_url": "https://api.github.com/users/JamesDoe/orgs",
      "repos_url": "https://api.github.com/users/JamesDoe/repos",
      "events_url": "https://api.github.com/users/JamesDoe/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JamesDoe/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-10-05T20:36:55Z",
    "updated_at": "2020-10-05T20:36:55Z",
    "author_association": "NONE",
    "body": "> @JamesDoe sounds like a great use, I'm not sure what it takes to get an eip merged but feel free to weigh in [here](https://github.com/ethereum/EIPs/pull/1633)\r\n\r\nhell yeah!",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/703874658/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/739213813",
    "html_url": "https://github.com/ethereum/EIPs/issues/1634#issuecomment-739213813",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1634",
    "id": 739213813,
    "node_id": "MDEyOklzc3VlQ29tbWVudDczOTIxMzgxMw==",
    "user": {
      "login": "wighawag",
      "id": 790580,
      "node_id": "MDQ6VXNlcjc5MDU4MA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/790580?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wighawag",
      "html_url": "https://github.com/wighawag",
      "followers_url": "https://api.github.com/users/wighawag/followers",
      "following_url": "https://api.github.com/users/wighawag/following{/other_user}",
      "gists_url": "https://api.github.com/users/wighawag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wighawag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wighawag/subscriptions",
      "organizations_url": "https://api.github.com/users/wighawag/orgs",
      "repos_url": "https://api.github.com/users/wighawag/repos",
      "events_url": "https://api.github.com/users/wighawag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wighawag/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-12-05T10:56:43Z",
    "updated_at": "2020-12-05T10:56:43Z",
    "author_association": "CONTRIBUTOR",
    "body": "Great EIP, I like the simplicity of it.\r\nRegarding getNFT vs parentToken+parentTokenId\r\nI think getNFT is better as it does not requires 2 calls. (Call have a non-negligible gas cost: https://eips.ethereum.org/EIPS/eip-2929)\r\nthe concern about EIP-165 collision should be addressed differently in my opinion. \r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/739213813/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/974757134",
    "html_url": "https://github.com/ethereum/EIPs/issues/1634#issuecomment-974757134",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1634",
    "id": 974757134,
    "node_id": "IC_kwDOAq426M46GZ0O",
    "user": {
      "login": "github-actions[bot]",
      "id": 41898282,
      "node_id": "MDM6Qm90NDE4OTgyODI=",
      "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/github-actions%5Bbot%5D",
      "html_url": "https://github.com/apps/github-actions",
      "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
      "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
      "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
      "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
      "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
      "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
      "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
      "type": "Bot",
      "site_admin": false
    },
    "created_at": "2021-11-21T05:09:58Z",
    "updated_at": "2021-11-21T05:09:58Z",
    "author_association": "NONE",
    "body": "There has been no activity on this issue for two months. It will be closed in a week if no further activity occurs. If you would like to move this EIP forward, please respond to any outstanding feedback or add a comment indicating that you have addressed all required feedback and are ready for a review.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/974757134/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/986168208",
    "html_url": "https://github.com/ethereum/EIPs/issues/1634#issuecomment-986168208",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1634",
    "id": 986168208,
    "node_id": "IC_kwDOAq426M46x7uQ",
    "user": {
      "login": "github-actions[bot]",
      "id": 41898282,
      "node_id": "MDM6Qm90NDE4OTgyODI=",
      "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/github-actions%5Bbot%5D",
      "html_url": "https://github.com/apps/github-actions",
      "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
      "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
      "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
      "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
      "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
      "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
      "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
      "type": "Bot",
      "site_admin": false
    },
    "created_at": "2021-12-05T05:10:42Z",
    "updated_at": "2021-12-05T05:10:42Z",
    "author_association": "NONE",
    "body": "This issue was closed due to inactivity. If you are still pursuing it, feel free to reopen it and respond to any feedback or request a review in a comment.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/986168208/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
