{
  "url": "https://api.github.com/repos/status-im/status-mobile/issues/13996",
  "repository_url": "https://api.github.com/repos/status-im/status-mobile",
  "labels_url": "https://api.github.com/repos/status-im/status-mobile/issues/13996/labels{/name}",
  "comments_url": "https://api.github.com/repos/status-im/status-mobile/issues/13996/comments",
  "events_url": "https://api.github.com/repos/status-im/status-mobile/issues/13996/events",
  "html_url": "https://github.com/status-im/status-mobile/issues/13996",
  "id": 1371557478,
  "node_id": "I_kwDOAx4p2c5RwE5m",
  "number": 13996,
  "title": "Lack of consistency on how re-frame events are named",
  "user": {
    "login": "ilmotta",
    "id": 46027,
    "node_id": "MDQ6VXNlcjQ2MDI3",
    "avatar_url": "https://avatars.githubusercontent.com/u/46027?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/ilmotta",
    "html_url": "https://github.com/ilmotta",
    "followers_url": "https://api.github.com/users/ilmotta/followers",
    "following_url": "https://api.github.com/users/ilmotta/following{/other_user}",
    "gists_url": "https://api.github.com/users/ilmotta/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/ilmotta/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/ilmotta/subscriptions",
    "organizations_url": "https://api.github.com/users/ilmotta/orgs",
    "repos_url": "https://api.github.com/users/ilmotta/repos",
    "events_url": "https://api.github.com/users/ilmotta/events{/privacy}",
    "received_events_url": "https://api.github.com/users/ilmotta/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 692308696,
      "node_id": "MDU6TGFiZWw2OTIzMDg2OTY=",
      "url": "https://api.github.com/repos/status-im/status-mobile/labels/tech-debt",
      "name": "tech-debt",
      "color": "e99695",
      "default": false,
      "description": null
    },
    {
      "id": 4052480148,
      "node_id": "LA_kwDOAx4p2c7xi_CU",
      "url": "https://api.github.com/repos/status-im/status-mobile/labels/E:TechDebt",
      "name": "E:TechDebt",
      "color": "502771",
      "default": false,
      "description": ""
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 8,
  "created_at": "2022-09-13T14:32:48Z",
  "updated_at": "2022-10-24T04:49:07Z",
  "closed_at": null,
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "## Problem\r\n\r\nAs years went by, the Status Mobile codebase accumulated many different flavors of naming schemes for re-frame ****events****. There are events using fully qualified keywords, namespaced keywords, non-namespaced keywords, events starting with nouns, sometimes with verbs, and so on.\r\n\r\n- PRs have more back and forth discussions about how events should be named.\r\n- Some events have too common names, thus polluting the global registry with names that could be easily reused by mistake in other parts of the app, thus causing silent bugs. For example: `:close-chat`.\r\n- Many events use Fully Qualified Keywords, which is known to make file renames more brittle and subject to bugs. Tools like `lsp-clojure` can help, but not everyone uses it.\r\n- External contributors have a harder time knowing how to name events. This increases the cost for first contribution.\r\n\r\n### Out of scope\r\n\r\nThis issue doesn't care about how all the many events are organized in the codebase. Even though this too is extremely important, it only cares about a proper naming convention that works for the Status Mobile team.\r\n\r\n### Things we should keep in mind\r\n\r\n1.  Some events are respecting the namespace they're part of. For example `src/status_im/multiaccounts/recover/core.cljs` defines `:multiaccounts.recover/re-encrypt-pressed`. Sometimes the keyword needs to broken down a bit further (see point 2).\r\n\r\n2.  It's common to have event namespaces responsible for more than one *thing*, in practice, this means there's often a need to add a noun to the keyword, to make it clear what we're referring to in the same namespace. For instance, `status-im.bootnodes.core` namespace defines the events `:bootnodes.callback/qr-code-scanned` and `:bootnodes.ui/delete-pressed`, hence we can clearly see `bootnode` and `ui` are two different *things*.\r\n\r\n3.  There's a reasonably well known article about some of the issues of fully qualifying keywords. Fully qualified keywords can also be problematic for consumers of the namespace, as we can see from Clojure's 1.11 release, which added the option `:as-alias` (similar to `:as` in `require`) to help with circular dependencies. <https://vvvvalvalval.github.io/posts/clojure-key-namespacing-convention-considered-harmful.html>\r\n\r\n4.  Events can use different verb conjugations (e.g. past tense or present tense). For example, `:status-im.add-new.core/qr-code-scanned`, when successful, dispatches `:status-im.add-new.core/qr-code-handled`. There's always a way to convert between different conjugations though, so it's a matter of establishing a convention.\r\n\r\n5.  Effects usually dispatch subsequent *success* and/or *error* events. It's common in re-frame to add a suffix to the original event name, like `-success`. This is a very strong convention in re-frame apps, even suggested in re-frame's documentation.\r\n\r\n### Implementation\r\n\r\nWe all know the famous quote from [Phil Karlton](https://www.karlton.org/2017/12/naming-things-hard/), that naming things is one of the most difficult things in Computer Science.\r\n\r\nWe believe **there's no right or wrong in how events are named**, and that it's simply a matter of defining a convention that's flexible enough and easy to follow. We don't want to define a hard rule that covers 100% of all use cases.\r\n\r\n### Convention 1 (suggestion)\r\n\r\n**This is just a suggestion among many others**, feel free to suggest anything else, but please, try to share examples and a little bit of explanation on why you think it might be better.\r\n\r\n1. Name event keywords with part of the fully qualified namespace, but not all of it. This patterns can scale well as the codebase grows and it's an easy rule to follow and make consistent. **Whenever you look at an event name, you can be pretty sure where it's defined**.\r\n\r\n```clojure\r\n;; In src/status_im/multiaccounts/create/core.cljs\r\n    \r\n;; Old\r\n(dispatch [:multiaccount-generate-and-derive-addresses-success])\r\n    \r\n;; New\r\n(dispatch [:multiaccounts.create/generate-and-derive-addresses-success])\r\n```\r\n\r\n2. Name the event keyword in the present tense, as a verb, expressing what it does, not what happened, just like you would name a function. The book Elements of Clojure, by Zach Tellman has an interesting section on how to name functions. Additionally, naming them for what they do can help decouple them from lower level concepts, such as which React Native event was fired, which in turn can help come up with more stable keywords.\r\n\r\n```clojure\r\n;; Old\r\n(dispatch [:intro-wizard/on-key-selected (:id acc)])\r\n\r\n;; New\r\n(dispatch [:intro-wizard/mark-as-selected (:id acc)])\r\n```\r\n\r\n3. Add logical contexts to event keywords when necessary, even though they are not in the fully qualified namespace.\r\n\r\n```clojure\r\n;; In src/status_im/multiaccounts/login/core.clj\r\n(dispatch [:multiaccounts.login.callback/<xyz>])\r\n(dispatch [:multiaccounts.login.ui/<xyz>])\r\n```\r\n\r\n4. When an event can succeed or fail, name them the same as the originating event, but add the `-success` or `-error` suffixes, respectively.\r\n\r\n## Acceptance Criteria\r\n\r\nThis issue can be closed once we can define a convention and a strategy on how to eliminate this tech debt, as well as an example PR showing some namespaces using the newly established convention.\r\n\r\nWe have around 900 events defined in the codebase, so it's definitely too much work to redefine all of them, even if we consider that 50% of them are perfectly fine.\r\n\r\n",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/status-im/status-mobile/issues/13996/reactions",
    "total_count": 10,
    "+1": 6,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 4,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/status-im/status-mobile/issues/13996/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/status-im/status-mobile/issues/comments/1246534341",
    "html_url": "https://github.com/status-im/status-mobile/issues/13996#issuecomment-1246534341",
    "issue_url": "https://api.github.com/repos/status-im/status-mobile/issues/13996",
    "id": 1246534341,
    "node_id": "IC_kwDOAx4p2c5KTJrF",
    "user": {
      "login": "yqrashawn",
      "id": 15090582,
      "node_id": "MDQ6VXNlcjE1MDkwNTgy",
      "avatar_url": "https://avatars.githubusercontent.com/u/15090582?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/yqrashawn",
      "html_url": "https://github.com/yqrashawn",
      "followers_url": "https://api.github.com/users/yqrashawn/followers",
      "following_url": "https://api.github.com/users/yqrashawn/following{/other_user}",
      "gists_url": "https://api.github.com/users/yqrashawn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/yqrashawn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/yqrashawn/subscriptions",
      "organizations_url": "https://api.github.com/users/yqrashawn/orgs",
      "repos_url": "https://api.github.com/users/yqrashawn/repos",
      "events_url": "https://api.github.com/users/yqrashawn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/yqrashawn/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-09-14T10:06:01Z",
    "updated_at": "2022-09-14T10:06:01Z",
    "author_association": "MEMBER",
    "body": "I suggest we come up the simplest rule that can be easily implemented with tools like [clj-kondo](https://github.com/clj-kondo/clj-kondo#readme) or [semgrep](https://github.com/returntocorp/semgrep#readme) and implement the checks, run them in CI.\r\nAfter which, with the implemented tool/checks, we enrich the rules.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/status-im/status-mobile/issues/comments/1246534341/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/status-im/status-mobile/issues/comments/1246624012",
    "html_url": "https://github.com/status-im/status-mobile/issues/13996#issuecomment-1246624012",
    "issue_url": "https://api.github.com/repos/status-im/status-mobile/issues/13996",
    "id": 1246624012,
    "node_id": "IC_kwDOAx4p2c5KTfkM",
    "user": {
      "login": "ilmotta",
      "id": 46027,
      "node_id": "MDQ6VXNlcjQ2MDI3",
      "avatar_url": "https://avatars.githubusercontent.com/u/46027?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ilmotta",
      "html_url": "https://github.com/ilmotta",
      "followers_url": "https://api.github.com/users/ilmotta/followers",
      "following_url": "https://api.github.com/users/ilmotta/following{/other_user}",
      "gists_url": "https://api.github.com/users/ilmotta/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ilmotta/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ilmotta/subscriptions",
      "organizations_url": "https://api.github.com/users/ilmotta/orgs",
      "repos_url": "https://api.github.com/users/ilmotta/repos",
      "events_url": "https://api.github.com/users/ilmotta/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ilmotta/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-09-14T11:24:38Z",
    "updated_at": "2022-09-14T11:24:38Z",
    "author_association": "CONTRIBUTOR",
    "body": "> I suggest we come up the simplest rule that can be easily implemented with tools like clj-kondo or semgrep and implement the checks, run them in CI.\r\n\r\nsemgrep is a great tool, but unfortunately it doesn't support Clojure, but okay clj-kondo is more than capable and probably more adequate for Clojure.\r\n\r\n+1 For gated checks in the CI.\r\n\r\nAlthough I really prefer to automate, there are some important subtleties. I think we can definitely automate some checks, but **event names have semantic meaning** and we'll never be able to automate some things without generating lots of false warnings/errors. Even grammatical checks, like checking events are conjugated in the past/present tense would probably not work reliably. So what I'm saying is that even if we come up with the simplest rules first that can be automated by clj-kondo, later on we won't be able to automate some anyway, so let's just keep that in mind.\r\n\r\nIn terms of automation feasibility, I think `Convention 1` (see issue description) points `(1)` `(3)` `(4)` can be automated by clj-kondo, but not `(2)`. Do you think `Convention 1` is reasonable for the mobile codebase? If not, do you have suggestions?",
    "reactions": {
      "url": "https://api.github.com/repos/status-im/status-mobile/issues/comments/1246624012/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/status-im/status-mobile/issues/comments/1253773918",
    "html_url": "https://github.com/status-im/status-mobile/issues/13996#issuecomment-1253773918",
    "issue_url": "https://api.github.com/repos/status-im/status-mobile/issues/13996",
    "id": 1253773918,
    "node_id": "IC_kwDOAx4p2c5KuxJe",
    "user": {
      "login": "erikseppanen",
      "id": 1012859,
      "node_id": "MDQ6VXNlcjEwMTI4NTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1012859?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/erikseppanen",
      "html_url": "https://github.com/erikseppanen",
      "followers_url": "https://api.github.com/users/erikseppanen/followers",
      "following_url": "https://api.github.com/users/erikseppanen/following{/other_user}",
      "gists_url": "https://api.github.com/users/erikseppanen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/erikseppanen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/erikseppanen/subscriptions",
      "organizations_url": "https://api.github.com/users/erikseppanen/orgs",
      "repos_url": "https://api.github.com/users/erikseppanen/repos",
      "events_url": "https://api.github.com/users/erikseppanen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/erikseppanen/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-09-21T14:13:48Z",
    "updated_at": "2022-09-21T14:13:48Z",
    "author_association": "MEMBER",
    "body": "Another dimension along which to consider Icaro's points is in the context of tests.\r\n\r\nFor example, when I was writing integration tests, sometimes I'd run into re-frame events called something like 'button-pressed' or some such and I'd die a little inside knowing that this test is supposed to be exercising business logic, and ideally (I am an idealist after all) it should be below the surface of the UI and whatever UI controls the user is interacting with.\r\n\r\nI wouldn't ask others to write tests during development, but if it were me, and I had the time and approval, I would do it to help myself maintain clarity of the distinction between UI events and business logic. It kinda forces you to put some thought into naming, because they're exposed in the test.",
    "reactions": {
      "url": "https://api.github.com/repos/status-im/status-mobile/issues/comments/1253773918/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/status-im/status-mobile/issues/comments/1272740629",
    "html_url": "https://github.com/status-im/status-mobile/issues/13996#issuecomment-1272740629",
    "issue_url": "https://api.github.com/repos/status-im/status-mobile/issues/13996",
    "id": 1272740629,
    "node_id": "IC_kwDOAx4p2c5L3HsV",
    "user": {
      "login": "yqrashawn",
      "id": 15090582,
      "node_id": "MDQ6VXNlcjE1MDkwNTgy",
      "avatar_url": "https://avatars.githubusercontent.com/u/15090582?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/yqrashawn",
      "html_url": "https://github.com/yqrashawn",
      "followers_url": "https://api.github.com/users/yqrashawn/followers",
      "following_url": "https://api.github.com/users/yqrashawn/following{/other_user}",
      "gists_url": "https://api.github.com/users/yqrashawn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/yqrashawn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/yqrashawn/subscriptions",
      "organizations_url": "https://api.github.com/users/yqrashawn/orgs",
      "repos_url": "https://api.github.com/users/yqrashawn/repos",
      "events_url": "https://api.github.com/users/yqrashawn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/yqrashawn/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-10-10T03:24:58Z",
    "updated_at": "2022-10-10T03:24:58Z",
    "author_association": "MEMBER",
    "body": "For me, naming is really complex and depends on the mind set of the person when editing the file. People familiar with `status-go` may come out a different name compared to people familiar with both status-go and waku. These affects what `present tense`, `ogical contexts` and `can  succeed or fail` in 2,3,4.\r\n\r\nSo shall we come out a doc of dos and don'ts with simple descriptions as a starting point and point contributors to the doc?\r\nOr maybe we can open issues for each rule. \r\nJust make it more convenient for contributors to discus and see the history about each rule.",
    "reactions": {
      "url": "https://api.github.com/repos/status-im/status-mobile/issues/comments/1272740629/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/status-im/status-mobile/issues/comments/1286998095",
    "html_url": "https://github.com/status-im/status-mobile/issues/13996#issuecomment-1286998095",
    "issue_url": "https://api.github.com/repos/status-im/status-mobile/issues/13996",
    "id": 1286998095,
    "node_id": "IC_kwDOAx4p2c5MtghP",
    "user": {
      "login": "ilmotta",
      "id": 46027,
      "node_id": "MDQ6VXNlcjQ2MDI3",
      "avatar_url": "https://avatars.githubusercontent.com/u/46027?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ilmotta",
      "html_url": "https://github.com/ilmotta",
      "followers_url": "https://api.github.com/users/ilmotta/followers",
      "following_url": "https://api.github.com/users/ilmotta/following{/other_user}",
      "gists_url": "https://api.github.com/users/ilmotta/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ilmotta/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ilmotta/subscriptions",
      "organizations_url": "https://api.github.com/users/ilmotta/orgs",
      "repos_url": "https://api.github.com/users/ilmotta/repos",
      "events_url": "https://api.github.com/users/ilmotta/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ilmotta/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-10-21T13:52:19Z",
    "updated_at": "2022-10-21T13:52:19Z",
    "author_association": "CONTRIBUTOR",
    "body": "> For me, naming is really complex and depends on the mind set of the person when editing the file. People familiar with `status-go` may come out a different name compared to people familiar with both status-go and waku. These affects what `present tense`, `ogical contexts` and `can succeed or fail` in 2,3,4.\r\n> \r\n> So shall we come out a doc of dos and don'ts with simple descriptions as a starting point and point contributors to the doc? Or maybe we can open issues for each rule. Just make it more convenient for contributors to discus and see the history about each rule.\r\n\r\nI agree with you @yqrashawn, it's too much effort with little value to define the rules for semantic meaning, past/present tense, etc, but I think we can align the very basic patterns at least.\r\n\r\nI'll suggest the following to help us reach consensus, it's pretty straightforward IMO and it's something many parts of the codebase already do. **For anyone collaborating, if you agree this a sound suggestion, please like/dislike. If you dislike, please suggest something else and why**.\r\n\r\n### Convention 2 (suggestion)\r\n\r\n1. Name event keywords with part of the fully qualified namespace, but not all of it. Don't use fully qualified keys. Example:\r\n\r\n```clojure\r\n;; In src/status_im/multiaccounts/create/core.cljs\r\n    \r\n;; Old\r\n(dispatch [:multiaccount-generate-and-derive-addresses-success])\r\n    \r\n;; New\r\n(dispatch [:multiaccounts.create/generate-and-derive-addresses-success])\r\n```\r\n\r\n2. Add logical contexts to event keywords when necessary, even though they are not in the fully qualified namespace.\r\n\r\n```clojure\r\n;; In src/status_im/multiaccounts/login/core.clj\r\n(dispatch [:multiaccounts.login.callback/<xyz>])\r\n(dispatch [:multiaccounts.login.ui/<xyz>])\r\n```\r\n\r\n3. When an event can succeed or fail, name them the same as the originating event, but add the `-success` or `-error` suffixes, respectively.\r\n\r\n\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/status-im/status-mobile/issues/comments/1286998095/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/status-im/status-mobile/issues/comments/1287091122",
    "html_url": "https://github.com/status-im/status-mobile/issues/13996#issuecomment-1287091122",
    "issue_url": "https://api.github.com/repos/status-im/status-mobile/issues/13996",
    "id": 1287091122,
    "node_id": "IC_kwDOAx4p2c5Mt3Oy",
    "user": {
      "login": "OmarBasem",
      "id": 29354102,
      "node_id": "MDQ6VXNlcjI5MzU0MTAy",
      "avatar_url": "https://avatars.githubusercontent.com/u/29354102?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/OmarBasem",
      "html_url": "https://github.com/OmarBasem",
      "followers_url": "https://api.github.com/users/OmarBasem/followers",
      "following_url": "https://api.github.com/users/OmarBasem/following{/other_user}",
      "gists_url": "https://api.github.com/users/OmarBasem/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/OmarBasem/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/OmarBasem/subscriptions",
      "organizations_url": "https://api.github.com/users/OmarBasem/orgs",
      "repos_url": "https://api.github.com/users/OmarBasem/repos",
      "events_url": "https://api.github.com/users/OmarBasem/events{/privacy}",
      "received_events_url": "https://api.github.com/users/OmarBasem/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-10-21T15:05:14Z",
    "updated_at": "2022-10-21T15:05:14Z",
    "author_association": "MEMBER",
    "body": "Thanks @ilmotta for bringing up this issue. I noticed several naming inconsistencies across the codebase, not just re-frame events. Another naming inconsistency is in naming files/namespaces. For example, for list items files you can find:\r\n\r\n1. X.cljs\r\n2. X_item.cljs\r\n3. X_list.cljs\r\n\r\nIt would be good if we can list all the spots that have such inconsistencies, and agree on the conventions to be followed, and have them in one document, which also any new contributor would be able to follow without introducing new inconsistencies.",
    "reactions": {
      "url": "https://api.github.com/repos/status-im/status-mobile/issues/comments/1287091122/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/status-im/status-mobile/issues/comments/1287184249",
    "html_url": "https://github.com/status-im/status-mobile/issues/13996#issuecomment-1287184249",
    "issue_url": "https://api.github.com/repos/status-im/status-mobile/issues/13996",
    "id": 1287184249,
    "node_id": "IC_kwDOAx4p2c5MuN95",
    "user": {
      "login": "ilmotta",
      "id": 46027,
      "node_id": "MDQ6VXNlcjQ2MDI3",
      "avatar_url": "https://avatars.githubusercontent.com/u/46027?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ilmotta",
      "html_url": "https://github.com/ilmotta",
      "followers_url": "https://api.github.com/users/ilmotta/followers",
      "following_url": "https://api.github.com/users/ilmotta/following{/other_user}",
      "gists_url": "https://api.github.com/users/ilmotta/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ilmotta/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ilmotta/subscriptions",
      "organizations_url": "https://api.github.com/users/ilmotta/orgs",
      "repos_url": "https://api.github.com/users/ilmotta/repos",
      "events_url": "https://api.github.com/users/ilmotta/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ilmotta/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-10-21T16:26:00Z",
    "updated_at": "2022-10-21T16:26:00Z",
    "author_association": "CONTRIBUTOR",
    "body": "> It would be good if we can list all the spots that have such inconsistencies, and agree on the conventions to be followed, and have them in one document, which also any new contributor would be able to follow without introducing new inconsistencies.\r\n\r\nTotally in agreement @OmarBasem and thanks for further raising the problem. An issue seems appropriate to me, if you're up to creating one ;) I'd personally try to limit the discussion to one specific problem at a time, given that establishing standards can be quite tricky in a team of our size, that's also highly distributed.",
    "reactions": {
      "url": "https://api.github.com/repos/status-im/status-mobile/issues/comments/1287184249/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/status-im/status-mobile/issues/comments/1288416619",
    "html_url": "https://github.com/status-im/status-mobile/issues/13996#issuecomment-1288416619",
    "issue_url": "https://api.github.com/repos/status-im/status-mobile/issues/13996",
    "id": 1288416619,
    "node_id": "IC_kwDOAx4p2c5My61r",
    "user": {
      "login": "OmarBasem",
      "id": 29354102,
      "node_id": "MDQ6VXNlcjI5MzU0MTAy",
      "avatar_url": "https://avatars.githubusercontent.com/u/29354102?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/OmarBasem",
      "html_url": "https://github.com/OmarBasem",
      "followers_url": "https://api.github.com/users/OmarBasem/followers",
      "following_url": "https://api.github.com/users/OmarBasem/following{/other_user}",
      "gists_url": "https://api.github.com/users/OmarBasem/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/OmarBasem/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/OmarBasem/subscriptions",
      "organizations_url": "https://api.github.com/users/OmarBasem/orgs",
      "repos_url": "https://api.github.com/users/OmarBasem/repos",
      "events_url": "https://api.github.com/users/OmarBasem/events{/privacy}",
      "received_events_url": "https://api.github.com/users/OmarBasem/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-10-24T04:49:07Z",
    "updated_at": "2022-10-24T04:49:07Z",
    "author_association": "MEMBER",
    "body": "Sure, I will create an issue for that. Let's focus here on agreeing on re-frame events naming.",
    "reactions": {
      "url": "https://api.github.com/repos/status-im/status-mobile/issues/comments/1288416619/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 1,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
