{
  "url": "https://api.github.com/repos/status-im/status-mobile/issues/14447",
  "repository_url": "https://api.github.com/repos/status-im/status-mobile",
  "labels_url": "https://api.github.com/repos/status-im/status-mobile/issues/14447/labels{/name}",
  "comments_url": "https://api.github.com/repos/status-im/status-mobile/issues/14447/comments",
  "events_url": "https://api.github.com/repos/status-im/status-mobile/issues/14447/events",
  "html_url": "https://github.com/status-im/status-mobile/issues/14447",
  "id": 1466190509,
  "node_id": "I_kwDOAx4p2c5XZEqt",
  "number": 14447,
  "title": "Sync all devices after initial pairing",
  "user": {
    "login": "cammellos",
    "id": 1017008,
    "node_id": "MDQ6VXNlcjEwMTcwMDg=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1017008?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/cammellos",
    "html_url": "https://github.com/cammellos",
    "followers_url": "https://api.github.com/users/cammellos/followers",
    "following_url": "https://api.github.com/users/cammellos/following{/other_user}",
    "gists_url": "https://api.github.com/users/cammellos/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/cammellos/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/cammellos/subscriptions",
    "organizations_url": "https://api.github.com/users/cammellos/orgs",
    "repos_url": "https://api.github.com/users/cammellos/repos",
    "events_url": "https://api.github.com/users/cammellos/events{/privacy}",
    "received_events_url": "https://api.github.com/users/cammellos/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 933023569,
      "node_id": "MDU6TGFiZWw5MzMwMjM1Njk=",
      "url": "https://api.github.com/repos/status-im/status-mobile/labels/feature",
      "name": "feature",
      "color": "172b9e",
      "default": false,
      "description": "feature requests"
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": {
    "login": "qfrank",
    "id": 12406719,
    "node_id": "MDQ6VXNlcjEyNDA2NzE5",
    "avatar_url": "https://avatars.githubusercontent.com/u/12406719?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/qfrank",
    "html_url": "https://github.com/qfrank",
    "followers_url": "https://api.github.com/users/qfrank/followers",
    "following_url": "https://api.github.com/users/qfrank/following{/other_user}",
    "gists_url": "https://api.github.com/users/qfrank/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/qfrank/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/qfrank/subscriptions",
    "organizations_url": "https://api.github.com/users/qfrank/orgs",
    "repos_url": "https://api.github.com/users/qfrank/repos",
    "events_url": "https://api.github.com/users/qfrank/events{/privacy}",
    "received_events_url": "https://api.github.com/users/qfrank/received_events",
    "type": "User",
    "site_admin": false
  },
  "assignees": [
    {
      "login": "qfrank",
      "id": 12406719,
      "node_id": "MDQ6VXNlcjEyNDA2NzE5",
      "avatar_url": "https://avatars.githubusercontent.com/u/12406719?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/qfrank",
      "html_url": "https://github.com/qfrank",
      "followers_url": "https://api.github.com/users/qfrank/followers",
      "following_url": "https://api.github.com/users/qfrank/following{/other_user}",
      "gists_url": "https://api.github.com/users/qfrank/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/qfrank/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/qfrank/subscriptions",
      "organizations_url": "https://api.github.com/users/qfrank/orgs",
      "repos_url": "https://api.github.com/users/qfrank/repos",
      "events_url": "https://api.github.com/users/qfrank/events{/privacy}",
      "received_events_url": "https://api.github.com/users/qfrank/received_events",
      "type": "User",
      "site_admin": false
    }
  ],
  "milestone": {
    "url": "https://api.github.com/repos/status-im/status-mobile/milestones/62",
    "html_url": "https://github.com/status-im/status-mobile/milestone/62",
    "labels_url": "https://api.github.com/repos/status-im/status-mobile/milestones/62/labels",
    "id": 8714443,
    "node_id": "MI_kwDOAx4p2c4AhPjL",
    "number": 62,
    "title": "1.21.0-rc.1",
    "description": "",
    "creator": {
      "login": "cammellos",
      "id": 1017008,
      "node_id": "MDQ6VXNlcjEwMTcwMDg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1017008?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cammellos",
      "html_url": "https://github.com/cammellos",
      "followers_url": "https://api.github.com/users/cammellos/followers",
      "following_url": "https://api.github.com/users/cammellos/following{/other_user}",
      "gists_url": "https://api.github.com/users/cammellos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cammellos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cammellos/subscriptions",
      "organizations_url": "https://api.github.com/users/cammellos/orgs",
      "repos_url": "https://api.github.com/users/cammellos/repos",
      "events_url": "https://api.github.com/users/cammellos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cammellos/received_events",
      "type": "User",
      "site_admin": false
    },
    "open_issues": 0,
    "closed_issues": 114,
    "state": "closed",
    "created_at": "2022-12-02T16:12:04Z",
    "updated_at": "2023-02-27T11:06:34Z",
    "due_on": null,
    "closed_at": "2023-02-27T11:06:34Z"
  },
  "comments": 1,
  "created_at": "2022-11-28T10:39:47Z",
  "updated_at": "2023-01-06T12:21:16Z",
  "closed_at": "2023-01-06T12:21:16Z",
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "As a user\r\nI want my data to be transferred after I paired my devices\r\nSo that all my devices are synchronized\r\n\r\n### Description\r\n\r\nWhen restoring seed phrase from the paired process (@Samyoul is working on it)\r\nafter the pairing is successful, we should make sure the data is transferred to the new device, over the established TCP connection (in order to skip waku).\r\n\r\nBasically, the effect should be identical as the user has clicked on `Sync all` from the old device to the new device.\r\n\r\nEssentially replicating what SyncDevices in status-go does, but not over waku, over this TCP connection, which means creating some protobufs and processing them on the other end as we would as they were received from waku.",
  "closed_by": {
    "login": "qfrank",
    "id": 12406719,
    "node_id": "MDQ6VXNlcjEyNDA2NzE5",
    "avatar_url": "https://avatars.githubusercontent.com/u/12406719?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/qfrank",
    "html_url": "https://github.com/qfrank",
    "followers_url": "https://api.github.com/users/qfrank/followers",
    "following_url": "https://api.github.com/users/qfrank/following{/other_user}",
    "gists_url": "https://api.github.com/users/qfrank/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/qfrank/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/qfrank/subscriptions",
    "organizations_url": "https://api.github.com/users/qfrank/orgs",
    "repos_url": "https://api.github.com/users/qfrank/repos",
    "events_url": "https://api.github.com/users/qfrank/events{/privacy}",
    "received_events_url": "https://api.github.com/users/qfrank/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/status-im/status-mobile/issues/14447/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/status-im/status-mobile/issues/14447/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/status-im/status-mobile/issues/comments/1332441099",
    "html_url": "https://github.com/status-im/status-mobile/issues/14447#issuecomment-1332441099",
    "issue_url": "https://api.github.com/repos/status-im/status-mobile/issues/14447",
    "id": 1332441099,
    "node_id": "IC_kwDOAx4p2c5Pa3AL",
    "user": {
      "login": "Samyoul",
      "id": 5702426,
      "node_id": "MDQ6VXNlcjU3MDI0MjY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5702426?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Samyoul",
      "html_url": "https://github.com/Samyoul",
      "followers_url": "https://api.github.com/users/Samyoul/followers",
      "following_url": "https://api.github.com/users/Samyoul/following{/other_user}",
      "gists_url": "https://api.github.com/users/Samyoul/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Samyoul/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Samyoul/subscriptions",
      "organizations_url": "https://api.github.com/users/Samyoul/orgs",
      "repos_url": "https://api.github.com/users/Samyoul/repos",
      "events_url": "https://api.github.com/users/Samyoul/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Samyoul/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-11-30T16:38:01Z",
    "updated_at": "2022-12-01T08:00:26Z",
    "author_association": "MEMBER",
    "body": "## Potential Approach\r\n\r\nReplicate a similar process flow of:\r\n\r\n```go\r\nfunc (m *Messenger) SyncDevices(ctx context.Context, ensName, photoPath string) (err error)\r\n```\r\n\r\nhttps://github.com/status-im/status-go/blob/10362432769bb759307f911656294b113adf1fa7/protocol/messenger.go#L2220-L2375\r\n\r\nBUT, adapt all the called unexported functions that internally call `_, err = m.dispatchMessage(ctx, common.RawMessage{ ... })` so that they return the `Payload: encodedMessage` and DO NOT dispatch the message.\r\n\r\nExample, in the case of `func (m *Messenger) syncSettings() error`, create a new function called `makeSyncSettingProtobufs() ([][]byte, error)`, where `[][]byte` represents an array of marshalled `common.RawMessage.Payload`\r\n\r\nOnce all the encoded messages are returned bundle them into a single protobuf and send the data via 2 new `PairingServer` handlers registered to a new endpoint. You will need to create a new handler for both sending the data and receiving the data.\r\n\r\n**Registering a new enpoint**\r\nhttps://github.com/status-im/status-go/blob/02446b185dcd9f53351a686e10ad36af695497d6/server/server_pairing.go#L112-L115\r\n\r\n```go\r\n\ts.SetHandlers(HandlerPatternMap{\r\n\t\tpairingReceive:   handlePairingReceive(s),\r\n\t\tpairingChallenge: handlePairingChallenge(s),\r\n\t})\r\n```\r\n\r\n**Create a new Pairing handler**\r\nhttps://github.com/status-im/status-go/blob/f33c1cec383d8cd7e14af2832b8017d1e204d9cf/server/handlers.go#L402-L422\r\n\r\n```go\r\nfunc handlePairingReceive(ps *PairingServer) http.HandlerFunc {\r\n\tsignal.SendLocalPairingEvent(Event{Type: EventConnectionSuccess})\r\n\r\n\treturn func(w http.ResponseWriter, r *http.Request) {\r\n\t\tpayload, err := ioutil.ReadAll(r.Body)\r\n\t\tif err != nil {\r\n\t\t\tsignal.SendLocalPairingEvent(Event{Type: EventTransferError, Error: err.Error()})\r\n\t\t\tps.logger.Error(\"ioutil.ReadAll(r.Body)\", zap.Error(err))\r\n\t\t\treturn\r\n\t\t}\r\n\t\tsignal.SendLocalPairingEvent(Event{Type: EventTransferSuccess})\r\n\r\n\t\terr = ps.PayloadManager.Receive(payload)\r\n\t\tif err != nil {\r\n\t\t\tsignal.SendLocalPairingEvent(Event{Type: EventProcessError, Error: err.Error()})\r\n\t\t\tps.logger.Error(\"ps.PayloadManager.Receive(payload)\", zap.Error(err))\r\n\t\t\treturn\r\n\t\t}\r\n\t\tsignal.SendLocalPairingEvent(Event{Type: EventProcessSuccess})\r\n\t}\r\n}\r\n```\r\n\r\nNext you will need to replicate the same logic but in `PairingClient` side. A good starting point will be:\r\n\r\nhttps://github.com/status-im/status-go/blob/02446b185dcd9f53351a686e10ad36af695497d6/server/client.go#L92-L105\r\n```go\r\nfunc (c *PairingClient) PairAccount() error {\r\n\tswitch c.serverMode {\r\n\tcase Receiving:\r\n\t\treturn c.sendAccountData()\r\n\tcase Sending:\r\n\t\terr := c.getChallenge()\r\n\t\tif err != nil {\r\n\t\t\treturn err\r\n\t\t}\r\n\t\treturn c.receiveAccountData()\r\n\tdefault:\r\n\t\treturn fmt.Errorf(\"unrecognised server mode '%d'\", c.serverMode)\r\n\t}\r\n}\r\n```\r\n\r\nBoth `(c *PairingClient) sendAccountData() error` and `(c *PairingClient) receiveAccountData() error` are effectively client side handlers. Also Pay particular attention to `serverMode; case Sending:` in the above code, this process makes multiple calls, `c.getChallenge()` and `c.receiveAccountData()`, for security the PairingClient MUST always provide a challenge response when requesting data from a `PairingServer`.",
    "reactions": {
      "url": "https://api.github.com/repos/status-im/status-mobile/issues/comments/1332441099/reactions",
      "total_count": 3,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 3,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
