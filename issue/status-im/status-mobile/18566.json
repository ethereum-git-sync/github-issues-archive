{
  "url": "https://api.github.com/repos/status-im/status-mobile/issues/18566",
  "repository_url": "https://api.github.com/repos/status-im/status-mobile",
  "labels_url": "https://api.github.com/repos/status-im/status-mobile/issues/18566/labels{/name}",
  "comments_url": "https://api.github.com/repos/status-im/status-mobile/issues/18566/comments",
  "events_url": "https://api.github.com/repos/status-im/status-mobile/issues/18566/events",
  "html_url": "https://github.com/status-im/status-mobile/issues/18566",
  "id": 2088534911,
  "node_id": "I_kwDOAx4p2c58fIN_",
  "number": 18566,
  "title": "Create reanimated worklets directly in Clojure",
  "user": {
    "login": "ulisesmac",
    "id": 90291778,
    "node_id": "MDQ6VXNlcjkwMjkxNzc4",
    "avatar_url": "https://avatars.githubusercontent.com/u/90291778?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/ulisesmac",
    "html_url": "https://github.com/ulisesmac",
    "followers_url": "https://api.github.com/users/ulisesmac/followers",
    "following_url": "https://api.github.com/users/ulisesmac/following{/other_user}",
    "gists_url": "https://api.github.com/users/ulisesmac/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/ulisesmac/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/ulisesmac/subscriptions",
    "organizations_url": "https://api.github.com/users/ulisesmac/orgs",
    "repos_url": "https://api.github.com/users/ulisesmac/repos",
    "events_url": "https://api.github.com/users/ulisesmac/events{/privacy}",
    "received_events_url": "https://api.github.com/users/ulisesmac/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "open",
  "locked": false,
  "assignee": {
    "login": "ulisesmac",
    "id": 90291778,
    "node_id": "MDQ6VXNlcjkwMjkxNzc4",
    "avatar_url": "https://avatars.githubusercontent.com/u/90291778?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/ulisesmac",
    "html_url": "https://github.com/ulisesmac",
    "followers_url": "https://api.github.com/users/ulisesmac/followers",
    "following_url": "https://api.github.com/users/ulisesmac/following{/other_user}",
    "gists_url": "https://api.github.com/users/ulisesmac/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/ulisesmac/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/ulisesmac/subscriptions",
    "organizations_url": "https://api.github.com/users/ulisesmac/orgs",
    "repos_url": "https://api.github.com/users/ulisesmac/repos",
    "events_url": "https://api.github.com/users/ulisesmac/events{/privacy}",
    "received_events_url": "https://api.github.com/users/ulisesmac/received_events",
    "type": "User",
    "site_admin": false
  },
  "assignees": [
    {
      "login": "ulisesmac",
      "id": 90291778,
      "node_id": "MDQ6VXNlcjkwMjkxNzc4",
      "avatar_url": "https://avatars.githubusercontent.com/u/90291778?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ulisesmac",
      "html_url": "https://github.com/ulisesmac",
      "followers_url": "https://api.github.com/users/ulisesmac/followers",
      "following_url": "https://api.github.com/users/ulisesmac/following{/other_user}",
      "gists_url": "https://api.github.com/users/ulisesmac/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ulisesmac/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ulisesmac/subscriptions",
      "organizations_url": "https://api.github.com/users/ulisesmac/orgs",
      "repos_url": "https://api.github.com/users/ulisesmac/repos",
      "events_url": "https://api.github.com/users/ulisesmac/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ulisesmac/received_events",
      "type": "User",
      "site_admin": false
    }
  ],
  "milestone": null,
  "comments": 2,
  "created_at": "2024-01-18T15:31:58Z",
  "updated_at": "2024-01-18T17:37:55Z",
  "closed_at": null,
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "# Problem\r\n\r\nCurrent worklets need to be written in JS, then imported and called in ClojureScript, it leads to code hard to maintain and we need to create those worklets by hand for evey new operation we want to perform.\r\n\r\nSo it'd be really good if we can create reanimated worklets directly in ClojureScript.\r\nThe main goal is to improve the developer experiece while not hurting the performance, as well as improve the reanimated API.\r\n\r\n## Implementation\r\n\r\n### Story\r\n\r\nI've done several attempts to do this, one of them being succesfully able to execute the following:\r\n```clojure\r\n(let [loading-interpolation (animated/use-shared-value 0.1)\r\n      color-1               \"#627BD2\"\r\n      color-2               \"#408C6A\"\r\n      color-4               \"transparent\"\r\n      loading-colors        (animated/use-animated-style\r\n                             (w/worklet\r\n                              {:background-color (animated/interpolate-color loading-interpolation [0 1] [color-1 color-2])\r\n                               :border-color     (animated/interpolate-color loading-interpolation [0 1] [color-2 color-4])\r\n                               :opacity          (+ (- 1 loading-interpolation) 2)}))])\r\n```\r\n\r\nbacked by a general worklet written in JS and a `w/worklet` macro that passes JS objects containing the instructios for that macro to execute.\r\n\r\nI was happy enough with this implementation, but then I realized at Status we are writting things like:\r\n```js\r\nreturn useDerivedValue(function () {\r\n    'worklet';\r\n    const r = parseInt(color.substring(1, 3), 16);\r\n    const g = parseInt(color.substring(3, 5), 16);\r\n    const b = parseInt(color.substring(5, 7), 16);\r\n\r\n    return progress.value <= 25 ? `rgba(${r}, ${g}, ${b}, .4)` : `rgba(${r}, ${g}, ${b}, .2)`;\r\n  })\r\n```\r\n\r\nTo process it, I'd need to pass all those instructions (`substring`, string concat, `if`, ...) to the general worklet... and that's like reimplement the ClojureScript compiler.\r\n\r\nI was thinking about adding [squint](https://github.com/squint-cljs/squint)  instead, but not sure how to do it, it'd need experimentation.\r\n\r\n### How to solve it now\r\n\r\nI know the reanimated plugin isn't working for our ClojureScript compiled code, but I think there's a way to make it work.\r\nI did an experiment in a JS script to apply that plugin and...  :tada:  and it worked! :tada: \r\n\r\nI was able to perform an animation using the `animated-styles` here:\r\n```clojure\r\n(let [sv              (reanimated/use-shared-value 0)\r\n      animated-styles (animated/useAnimatedStyle\r\n                       (fn my-worklet-fn []\r\n                         (js* \"'worklet;'\") ;; <- Not really needed\r\n                         (js/console.log \"hola\")\r\n                         #js{:transform #js[#js{:translateX (.-value sv)}]}))])\r\n```\r\n\r\nIt just needed to execute that script after building.\r\n\r\nNow the goal is to actually integrate it into Status, I'm aiming to add it as a [shadow-cljs Build Hook](https://shadow-cljs.github.io/docs/UsersGuide.html#build-hooks).\r\n\r\nThis is not the definitive solution, but for most of our animated code it'll work well.\r\n\r\n## Acceptance Criteria\r\n\r\n- Nothing is broken, particularly, animations are working exactly as before. \r\n- We can define worklets directly in ClojureScript\r\n\r\n## Notes\r\n\r\nLimitations:\r\n\r\nWe still won't be able to use Clojure custom data structures inside the worklets, same for Clojure functions, it's writing JS but using ClojureScript.\r\n\r\n## Future Steps\r\n\r\nIf this is sucessfully done, we can start thinking about improving the API, some ideas:\r\n\r\n- A macro that receives Clojure maps using kebab-case keywords and returns JS objects using camelCase strings. it has the common macro limitations, but it may work well for most of the cases\r\n- Consider adding squint, if it emits very lightweight JS code that is able to run in a worklet, it'd be like just using Clojure inside the worklets\r\n- Improve the Reanimated API we created to make it more transparent to the Reanimated code we find in internet (recently, the support to pass a vector of styles has been added, check #18381)\r\n",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/status-im/status-mobile/issues/18566/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/status-im/status-mobile/issues/18566/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/status-im/status-mobile/issues/comments/1898837063",
    "html_url": "https://github.com/status-im/status-mobile/issues/18566#issuecomment-1898837063",
    "issue_url": "https://api.github.com/repos/status-im/status-mobile/issues/18566",
    "id": 1898837063,
    "node_id": "IC_kwDOAx4p2c5xLfRH",
    "user": {
      "login": "Parveshdhull",
      "id": 17097240,
      "node_id": "MDQ6VXNlcjE3MDk3MjQw",
      "avatar_url": "https://avatars.githubusercontent.com/u/17097240?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Parveshdhull",
      "html_url": "https://github.com/Parveshdhull",
      "followers_url": "https://api.github.com/users/Parveshdhull/followers",
      "following_url": "https://api.github.com/users/Parveshdhull/following{/other_user}",
      "gists_url": "https://api.github.com/users/Parveshdhull/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Parveshdhull/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Parveshdhull/subscriptions",
      "organizations_url": "https://api.github.com/users/Parveshdhull/orgs",
      "repos_url": "https://api.github.com/users/Parveshdhull/repos",
      "events_url": "https://api.github.com/users/Parveshdhull/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Parveshdhull/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2024-01-18T16:41:28Z",
    "updated_at": "2024-01-18T16:41:28Z",
    "author_association": "MEMBER",
    "body": "Hi @ulisesmac, Thank you very much for sharing your research on migration of worklets from js to cljs.\r\n\r\nPlease also keep an eye on performance and make sure we are not losing it.\r\n\r\nBtw, a related suggestion from [Thomas Heller](https://github.com/thheller) (creator of shadow-cljs)\r\n\r\n[My advice would be to keep those \"worklets\" in JavaScript.](https://stackoverflow.com/a/72513996)",
    "reactions": {
      "url": "https://api.github.com/repos/status-im/status-mobile/issues/comments/1898837063/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/status-im/status-mobile/issues/comments/1898929671",
    "html_url": "https://github.com/status-im/status-mobile/issues/18566#issuecomment-1898929671",
    "issue_url": "https://api.github.com/repos/status-im/status-mobile/issues/18566",
    "id": 1898929671,
    "node_id": "IC_kwDOAx4p2c5xL14H",
    "user": {
      "login": "ulisesmac",
      "id": 90291778,
      "node_id": "MDQ6VXNlcjkwMjkxNzc4",
      "avatar_url": "https://avatars.githubusercontent.com/u/90291778?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ulisesmac",
      "html_url": "https://github.com/ulisesmac",
      "followers_url": "https://api.github.com/users/ulisesmac/followers",
      "following_url": "https://api.github.com/users/ulisesmac/following{/other_user}",
      "gists_url": "https://api.github.com/users/ulisesmac/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ulisesmac/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ulisesmac/subscriptions",
      "organizations_url": "https://api.github.com/users/ulisesmac/orgs",
      "repos_url": "https://api.github.com/users/ulisesmac/repos",
      "events_url": "https://api.github.com/users/ulisesmac/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ulisesmac/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2024-01-18T17:37:54Z",
    "updated_at": "2024-01-18T17:37:54Z",
    "author_association": "CONTRIBUTOR",
    "body": "Hi @Parveshdhull!\r\n\r\nFirst of all, thanks for sharing your opinion on this, it's highly appreciated! since you were in the process of integrating reanimated!\r\n\r\nProbably I'll be solving this issue for the next moth, we are busy right now. Also I'd like to get even more feedback.\r\n\r\n\r\n> Please also keep an eye on performance and make sure we are not losing it.\r\n\r\nYes, actually while addressing these things, performance is something I'm taking care of.\r\n\r\nFor the scope of this issue, the code transformation will get done at compile stage, so it won't impact negatively. Actually, we won't need many of the wrapper functions we are using, so it'll get slightly improved.\r\n\r\nFor future work:\r\n\r\n  > A macro that receives Clojure maps using kebab-case keywords and returns JS objects using camelCase strings. it has the common macro limitations, but it may work well for most of the cases\r\n\r\n  A macro performs the transformations at compile time, but it needs the data to be there (pass the maps, instead of passing a var containing the maps). so the performance won't get hurt. For a more general solution we could evaluate the tradeoffs between the performance impact vs flexibility.\r\n\r\n  > Consider adding squint, if it emits very lightweight JS code that is able to run in a worklet, it'd be like just using Clojure inside the worklets\r\n\r\n  Again, this would be done at compile time :)\r\n\r\n\r\nRelated to What Thomas Heller said:\r\n\r\n> The main hurdle is that those directives need to be processed by the react-native build tools and it likely won't understand the ClojureScript code in the first place.\r\n\r\nI'm solving that part.\r\n\r\nThe directive (`\"worklet;\"`) is no longer needed for the plug-in to work, as an example we have some JS worklets in our code not having that directive and they still work. Reanimated plugin looks at the usages of Reanimated hooks to decide if the function should be converted or not.\r\n\r\nIf we no longer need the directive, you may wonder: why our code isn't converted then?\r\nwell, our code is being written as a string by shadow-cljs, and the plug-in isn't able to convert it.\r\n\r\nMy experiments showed me that we can apply the plug-in to those strings and we can get a worklet running :) \r\n\r\nThe aim of this issue is adding the plug-in to the build process that shadow-cljs does, before they are being written as strings in `result/index.js`, so we'd get the worklet transformation in our compiled JS code.",
    "reactions": {
      "url": "https://api.github.com/repos/status-im/status-mobile/issues/comments/1898929671/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
