{
  "url": "https://api.github.com/repos/status-im/status-mobile/issues/6962",
  "repository_url": "https://api.github.com/repos/status-im/status-mobile",
  "labels_url": "https://api.github.com/repos/status-im/status-mobile/issues/6962/labels{/name}",
  "comments_url": "https://api.github.com/repos/status-im/status-mobile/issues/6962/comments",
  "events_url": "https://api.github.com/repos/status-im/status-mobile/issues/6962/events",
  "html_url": "https://github.com/status-im/status-mobile/issues/6962",
  "id": 386146165,
  "node_id": "MDU6SXNzdWUzODYxNDYxNjU=",
  "number": 6962,
  "title": "Mailserver spec RFC",
  "user": {
    "login": "yenda",
    "id": 1181225,
    "node_id": "MDQ6VXNlcjExODEyMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1181225?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/yenda",
    "html_url": "https://github.com/yenda",
    "followers_url": "https://api.github.com/users/yenda/followers",
    "following_url": "https://api.github.com/users/yenda/following{/other_user}",
    "gists_url": "https://api.github.com/users/yenda/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/yenda/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/yenda/subscriptions",
    "organizations_url": "https://api.github.com/users/yenda/orgs",
    "repos_url": "https://api.github.com/users/yenda/repos",
    "events_url": "https://api.github.com/users/yenda/events{/privacy}",
    "received_events_url": "https://api.github.com/users/yenda/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 795655580,
      "node_id": "MDU6TGFiZWw3OTU2NTU1ODA=",
      "url": "https://api.github.com/repos/status-im/status-mobile/labels/chat",
      "name": "chat",
      "color": "f70cb0",
      "default": false,
      "description": null
    },
    {
      "id": 1067655928,
      "node_id": "MDU6TGFiZWwxMDY3NjU1OTI4",
      "url": "https://api.github.com/repos/status-im/status-mobile/labels/stale",
      "name": "stale",
      "color": "ffffff",
      "default": false,
      "description": null
    },
    {
      "id": 1143032367,
      "node_id": "MDU6TGFiZWwxMTQzMDMyMzY3",
      "url": "https://api.github.com/repos/status-im/status-mobile/labels/core",
      "name": "core",
      "color": "8befdd",
      "default": false,
      "description": ""
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": {
    "login": "yenda",
    "id": 1181225,
    "node_id": "MDQ6VXNlcjExODEyMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1181225?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/yenda",
    "html_url": "https://github.com/yenda",
    "followers_url": "https://api.github.com/users/yenda/followers",
    "following_url": "https://api.github.com/users/yenda/following{/other_user}",
    "gists_url": "https://api.github.com/users/yenda/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/yenda/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/yenda/subscriptions",
    "organizations_url": "https://api.github.com/users/yenda/orgs",
    "repos_url": "https://api.github.com/users/yenda/repos",
    "events_url": "https://api.github.com/users/yenda/events{/privacy}",
    "received_events_url": "https://api.github.com/users/yenda/received_events",
    "type": "User",
    "site_admin": false
  },
  "assignees": [
    {
      "login": "yenda",
      "id": 1181225,
      "node_id": "MDQ6VXNlcjExODEyMjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1181225?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/yenda",
      "html_url": "https://github.com/yenda",
      "followers_url": "https://api.github.com/users/yenda/followers",
      "following_url": "https://api.github.com/users/yenda/following{/other_user}",
      "gists_url": "https://api.github.com/users/yenda/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/yenda/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/yenda/subscriptions",
      "organizations_url": "https://api.github.com/users/yenda/orgs",
      "repos_url": "https://api.github.com/users/yenda/repos",
      "events_url": "https://api.github.com/users/yenda/events{/privacy}",
      "received_events_url": "https://api.github.com/users/yenda/received_events",
      "type": "User",
      "site_admin": false
    }
  ],
  "milestone": null,
  "comments": 12,
  "created_at": "2018-11-30T11:18:49Z",
  "updated_at": "2019-03-16T18:19:18Z",
  "closed_at": "2019-03-16T18:19:18Z",
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "I wrote a draft for mailserver usage and future api spec, RFC \r\n\r\nIdeally as stated the proposed API would benefit from being implemented in go as there is probably mean to fullfil requirements with much less bloat than on clojure side.\r\n\r\n# Problem\r\n\r\nIn whisper, messages are passed around in whisper enveloppes. A whisper envelope only contains the minimal amount of information required for transporting its message. It doesn't contain information about the sender or recipient of the message and the message is encrypted.\r\n\r\nStatus sends messages with a ttl (time to live) of 10 seconds. That means that if you are disconnected from the network for more than 10 seconds, you will not receive the messages that you missed after you disconnected if their ttl expired before they reached you when you reconnected. \r\n\r\nMailservers are the current solution Status uses to solve this problem. \r\n\r\nA mailserver is a whisper node that keeps all the whisper enveloppes it receives from peers for a period of time. By using a direct P2P connection you can send a request for messages to a mailserver and it will forward to you all the whisper enveloppes including those with an expired ttl that match your request criteria.\r\n\r\nThe request uses a bloomfilter to mask what topics are requested, just like Status does when connecting to regular whisper nodes. This makes it less expensive in terms of bandwidth than requesting all of the messages, but provides a higher degree of privacy.\r\n\r\nThe distinction between bloomfilters and filters is important: \r\n- the bloomfilter is used by the mailserver to decide weither a message should be sent or not based on its topic.\r\n- the filters are used on the whisper client side and provided with a topic and decryption key. Each filters tries to decrypt received messages that match its topic. If no filters are added no messages are received. If a message matches the filter topic but cannot be decrypted it is ignored.\r\n\r\n# Mailserver client requirements\r\n\r\n## Connection\r\n\r\n- The client MUST add a mailserver as a peer and MUST mark it as a trusted peer in order to make message requests and receive the messages, because only a trusted peer can send messages with an expired ttl\r\n\r\n## Request\r\n\r\nA message request includes an array of topics that are turned into a bloomfilter by the `.requestMessages` method. The mailserver will send all the messages that match that bloomfilter. The client will receive all the messages that match the added filters. \r\n\r\n- The client MUST wait for all filters to be added before making a request. Otherwise the messages sent by the mailserver won't be decrypted and received by the client.\r\n\r\n- The client MUST make a new request whenever the user logs in or the client is back online after being temporarly disconnected from peers.\r\n\r\n- The client MUST make a new request everytime a filter is added during a session. If the filter's topic was already requested because it was used in another filter the messages matching the new filter would have been ignored.\r\n\r\n# Mailserver client API\r\n\r\n## Current API\r\n\r\n`web3.shh.requestMessages` is used to request messages. It takes the following arguments:\r\n- `topics`: an array of topics to be requested\r\n- `mailServerPeer`: the address of the mailserver\r\n- `symKeyID`: the symmetric key id of the symmetric key used for the request.\r\n- `timeout`: the timeout in seconds for the request. status-go implementation of whisper client sends a `mailserver.request.expired` signal if it doesn't receives a confirmation from the mailserver that the request has been completed after the timeout expires\r\n- `from`: timestamp in seconds, all messages matching the bloomfilter and more recent that this will be sent\r\n- `to`: timestamp in seconds, all messages matching the bloomfilter and older than this will be sent\r\n\r\nThis is currently the only client API to mailserver. A mailserver client MUST keep track of added filters, previous requests per filter, and network connectivity in order to fulfill the previous requirements.\r\n\r\n- Connection to mailserver can be done with an rpc call to `addPeer` admin method, as well as `web3.shh.markTrustedPeer`.\r\n- The client CAN obtain the symKeyID by generating the sym-key from the mailserver password using `web3.shh.generateSymKeyFromPassword` method, the symKeyID being returned in the callback.\r\n- The client CAN use the callback of `web3.shh.newMessageFilter` to keep track of added filters.\r\n\r\n## Proposed API\r\n\r\nStatus-go could simplify the usage of mailservers by implementing the previous requirements. Other benefits would be reducing the communications related to mailserver connection and requests between status-go and the clients.\r\n\r\nList of things the mailserver modules should be concerned about:\r\n- filters: make a request when user logs in, after ALL filters have been successfully added after initialize is called, make a request when a filter is successfully added\r\n- logout: stop all mailserver related activity when user logs out\r\n- connectivity (number of peers connected): make a request when it goes from 0 to n\r\n\r\n### `status.mailserver.initialize(mailserverList, requestOptions, callback)`\r\n\r\n- `mailserverList`: the list of mailservers is passed as first argument. Try to connect to all mailservers in the list and only keep a connection to the one with lowest latency.\r\n- `requestOptions`: same as `web3.shh.requestMessages` method\r\n- `callback`: feedback channel for logs and errors, could use signals instead. MUST INCLUDE:\r\n  - connection attemps and latency for mailservers\r\n  - connection success and selected mailserver\r\n  - requests made\r\n  - errors\r\n\r\n\r\n- intialize CAN be called more than once during a user session if he whishes to change some parameters\r\n- timestamp for last request MUST be persisted per topic, adding a new filter to a topic MUST reset that timestamp\r\n\r\n### `status.mailserver.request(requestOptions, callback)`\r\n\r\n- `requestOptions`: same as `web3.shh.requestMessages` method\r\n- `callback`: feedback channel for logs and errors, could use signals instead.\r\n\r\n- `mailserverList`: the list of mailservers is passed as first argument. Try to connect to all mailservers in the list and only keep a connection to the one with lowest latency.\r\n\r\n- request CAN be used to force a `messageRequest`\r\n- clients SHOULD only use it for specific use cases, basic history management MUST already be handled my `initialize` method\r\n### TODOS\r\n\r\n- describe signals from status-go and how to use them\r\n\r\n\r\n",
  "closed_by": {
    "login": "status-github-bot[bot]",
    "id": 35452227,
    "node_id": "MDM6Qm90MzU0NTIyMjc=",
    "avatar_url": "https://avatars.githubusercontent.com/in/8157?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/status-github-bot%5Bbot%5D",
    "html_url": "https://github.com/apps/status-github-bot",
    "followers_url": "https://api.github.com/users/status-github-bot%5Bbot%5D/followers",
    "following_url": "https://api.github.com/users/status-github-bot%5Bbot%5D/following{/other_user}",
    "gists_url": "https://api.github.com/users/status-github-bot%5Bbot%5D/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/status-github-bot%5Bbot%5D/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/status-github-bot%5Bbot%5D/subscriptions",
    "organizations_url": "https://api.github.com/users/status-github-bot%5Bbot%5D/orgs",
    "repos_url": "https://api.github.com/users/status-github-bot%5Bbot%5D/repos",
    "events_url": "https://api.github.com/users/status-github-bot%5Bbot%5D/events{/privacy}",
    "received_events_url": "https://api.github.com/users/status-github-bot%5Bbot%5D/received_events",
    "type": "Bot",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/status-im/status-mobile/issues/6962/reactions",
    "total_count": 2,
    "+1": 2,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/status-im/status-mobile/issues/6962/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/status-im/status-mobile/issues/comments/443173921",
    "html_url": "https://github.com/status-im/status-mobile/issues/6962#issuecomment-443173921",
    "issue_url": "https://api.github.com/repos/status-im/status-mobile/issues/6962",
    "id": 443173921,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0MzE3MzkyMQ==",
    "user": {
      "login": "yenda",
      "id": 1181225,
      "node_id": "MDQ6VXNlcjExODEyMjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1181225?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/yenda",
      "html_url": "https://github.com/yenda",
      "followers_url": "https://api.github.com/users/yenda/followers",
      "following_url": "https://api.github.com/users/yenda/following{/other_user}",
      "gists_url": "https://api.github.com/users/yenda/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/yenda/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/yenda/subscriptions",
      "organizations_url": "https://api.github.com/users/yenda/orgs",
      "repos_url": "https://api.github.com/users/yenda/repos",
      "events_url": "https://api.github.com/users/yenda/events{/privacy}",
      "received_events_url": "https://api.github.com/users/yenda/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-30T11:19:51Z",
    "updated_at": "2018-11-30T11:19:51Z",
    "author_association": "CONTRIBUTOR",
    "body": "@mandrigin @PombeirP @dmitryn @dshulyak @bhauman  @oskarth ",
    "reactions": {
      "url": "https://api.github.com/repos/status-im/status-mobile/issues/comments/443173921/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/status-im/status-mobile/issues/comments/443177840",
    "html_url": "https://github.com/status-im/status-mobile/issues/6962#issuecomment-443177840",
    "issue_url": "https://api.github.com/repos/status-im/status-mobile/issues/6962",
    "id": 443177840,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0MzE3Nzg0MA==",
    "user": {
      "login": "dshulyak",
      "id": 1964576,
      "node_id": "MDQ6VXNlcjE5NjQ1NzY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1964576?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dshulyak",
      "html_url": "https://github.com/dshulyak",
      "followers_url": "https://api.github.com/users/dshulyak/followers",
      "following_url": "https://api.github.com/users/dshulyak/following{/other_user}",
      "gists_url": "https://api.github.com/users/dshulyak/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dshulyak/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dshulyak/subscriptions",
      "organizations_url": "https://api.github.com/users/dshulyak/orgs",
      "repos_url": "https://api.github.com/users/dshulyak/repos",
      "events_url": "https://api.github.com/users/dshulyak/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dshulyak/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-30T11:36:48Z",
    "updated_at": "2018-11-30T11:37:32Z",
    "author_association": "CONTRIBUTOR",
    "body": "looks good, i suggest to have different API though\r\n\r\ninstead of a single method `status.mailserver.initialize(mailserverList, requestOptions, callback)`, i suggest to have 2.\r\n\r\nfirst will be called every time when user changes list of selected mail servers. it can be called initialized, but currently i created a binding with name UpdateMailservers. see https://github.com/status-im/status-go/pull/1295. We need persistent connection with mail server as a part of different functionality, so establishing it before making actual requests makes more sense. wdyt?\r\n\r\nsecond one is for making a request, pretty much the same as we have. but instead of providing a mail server peer with a request parameter, we will use any from selected list that is also connected. also this method will wait for establishing a connection as a part of given timeout. it doesn't do it currently.\r\n\r\nanother thing i suggest is to stop counting peers on the status-react side. just retry requests until success. and show to the user error provided as a response. internally we will wait for connection to be established, and try different peers if they will be provided.\r\n\r\n>  and MUST mark it as a trusted peer in order to make message requests and receive the messages, because only a trusted peer can send messages with an expired ttl\r\n\r\nthis is obsolete. whisper marks peer as trusted before making a requests. not sure when it changed, but it is definitely the case atm.",
    "reactions": {
      "url": "https://api.github.com/repos/status-im/status-mobile/issues/comments/443177840/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/status-im/status-mobile/issues/comments/443180695",
    "html_url": "https://github.com/status-im/status-mobile/issues/6962#issuecomment-443180695",
    "issue_url": "https://api.github.com/repos/status-im/status-mobile/issues/6962",
    "id": 443180695,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0MzE4MDY5NQ==",
    "user": {
      "login": "yenda",
      "id": 1181225,
      "node_id": "MDQ6VXNlcjExODEyMjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1181225?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/yenda",
      "html_url": "https://github.com/yenda",
      "followers_url": "https://api.github.com/users/yenda/followers",
      "following_url": "https://api.github.com/users/yenda/following{/other_user}",
      "gists_url": "https://api.github.com/users/yenda/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/yenda/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/yenda/subscriptions",
      "organizations_url": "https://api.github.com/users/yenda/orgs",
      "repos_url": "https://api.github.com/users/yenda/repos",
      "events_url": "https://api.github.com/users/yenda/events{/privacy}",
      "received_events_url": "https://api.github.com/users/yenda/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-30T11:49:43Z",
    "updated_at": "2018-11-30T11:52:00Z",
    "author_association": "CONTRIBUTOR",
    "body": "> second one is for making a request, pretty much the same as we have. but instead of providing a mail server peer with a request parameter, we will use any from selected list that is also connected. also this method will wait for establishing a connection as a part of given timeout. it doesn't do it currently.\r\n\r\nthe proposal is to completely remove the concern of requesting messages from the client there wouldn't be a need for it. The rules for when a request is made are described\r\n\r\n> first will be called every time when user changes list of selected mail servers. it can be called initialized, but currently i created a binding with name UpdateMailservers. see status-im/status-go#1295. We need persistent connection with mail server as a part of different functionality, so establishing it before making actual requests makes more sense. wdyt?\r\n\r\nI'm a bit worried about requiring persistent connection to mailservers because mailservers are supposed to be a temporary solution and relying on them for other features will make it harder to go away from them. I will have a deeper look at it.\r\n\r\n> this is obsolete. whisper marks peer as trusted before making a requests. not sure when it changed, but it is definitely the case atm.\r\n\r\nso that means I can remove that from the current code? Will test.",
    "reactions": {
      "url": "https://api.github.com/repos/status-im/status-mobile/issues/comments/443180695/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/status-im/status-mobile/issues/comments/443181822",
    "html_url": "https://github.com/status-im/status-mobile/issues/6962#issuecomment-443181822",
    "issue_url": "https://api.github.com/repos/status-im/status-mobile/issues/6962",
    "id": 443181822,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0MzE4MTgyMg==",
    "user": {
      "login": "yenda",
      "id": 1181225,
      "node_id": "MDQ6VXNlcjExODEyMjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1181225?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/yenda",
      "html_url": "https://github.com/yenda",
      "followers_url": "https://api.github.com/users/yenda/followers",
      "following_url": "https://api.github.com/users/yenda/following{/other_user}",
      "gists_url": "https://api.github.com/users/yenda/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/yenda/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/yenda/subscriptions",
      "organizations_url": "https://api.github.com/users/yenda/orgs",
      "repos_url": "https://api.github.com/users/yenda/repos",
      "events_url": "https://api.github.com/users/yenda/events{/privacy}",
      "received_events_url": "https://api.github.com/users/yenda/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-30T11:54:33Z",
    "updated_at": "2018-11-30T11:54:33Z",
    "author_association": "CONTRIBUTOR",
    "body": "@dmitryn I also updated the last part of the RFC, `initialize` can be called multiple times if the user changes the list of mailservers to try to connect to.",
    "reactions": {
      "url": "https://api.github.com/repos/status-im/status-mobile/issues/comments/443181822/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/status-im/status-mobile/issues/comments/443194661",
    "html_url": "https://github.com/status-im/status-mobile/issues/6962#issuecomment-443194661",
    "issue_url": "https://api.github.com/repos/status-im/status-mobile/issues/6962",
    "id": 443194661,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0MzE5NDY2MQ==",
    "user": {
      "login": "dshulyak",
      "id": 1964576,
      "node_id": "MDQ6VXNlcjE5NjQ1NzY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1964576?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dshulyak",
      "html_url": "https://github.com/dshulyak",
      "followers_url": "https://api.github.com/users/dshulyak/followers",
      "following_url": "https://api.github.com/users/dshulyak/following{/other_user}",
      "gists_url": "https://api.github.com/users/dshulyak/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dshulyak/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dshulyak/subscriptions",
      "organizations_url": "https://api.github.com/users/dshulyak/orgs",
      "repos_url": "https://api.github.com/users/dshulyak/repos",
      "events_url": "https://api.github.com/users/dshulyak/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dshulyak/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-30T12:51:57Z",
    "updated_at": "2018-11-30T12:51:57Z",
    "author_association": "CONTRIBUTOR",
    "body": "> the proposal is to completely remove the concern of requesting messages from the client there wouldn't be a need for it. The rules for when a request is made are described\r\n\r\nwhat if we will decide to fetch more history when a user scrolls up? the proposal seems too restrictive. why not to separate management of the connections and requests?\r\n\r\n> I'm a bit worried about requiring persistent connection to mailservers because mailservers are supposed to be a temporary solution and relying on them for other features will make it harder to go away from them. I will have a deeper look at it.\r\n\r\nwell they are not atm, and we probably won't get rid from them until new protocol. you can check discussion https://github.com/status-im/status-go/issues/1276 and https://github.com/status-im/status-go/issues/1278. it seems that we have to either refactor completely mail server communication, so that they provide confirmations when user is offline, and change a substantial part of a current chat protocol. or to follow decisions made in those two issues.",
    "reactions": {
      "url": "https://api.github.com/repos/status-im/status-mobile/issues/comments/443194661/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/status-im/status-mobile/issues/comments/443195472",
    "html_url": "https://github.com/status-im/status-mobile/issues/6962#issuecomment-443195472",
    "issue_url": "https://api.github.com/repos/status-im/status-mobile/issues/6962",
    "id": 443195472,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0MzE5NTQ3Mg==",
    "user": {
      "login": "yenda",
      "id": 1181225,
      "node_id": "MDQ6VXNlcjExODEyMjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1181225?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/yenda",
      "html_url": "https://github.com/yenda",
      "followers_url": "https://api.github.com/users/yenda/followers",
      "following_url": "https://api.github.com/users/yenda/following{/other_user}",
      "gists_url": "https://api.github.com/users/yenda/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/yenda/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/yenda/subscriptions",
      "organizations_url": "https://api.github.com/users/yenda/orgs",
      "repos_url": "https://api.github.com/users/yenda/repos",
      "events_url": "https://api.github.com/users/yenda/events{/privacy}",
      "received_events_url": "https://api.github.com/users/yenda/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-30T12:55:20Z",
    "updated_at": "2018-11-30T12:55:20Z",
    "author_association": "CONTRIBUTOR",
    "body": "> what if we will decide to fetch more history when a user scrolls up? the proposal seems too restrictive. why not to separate management of the connections and requests?\r\n\r\nwe can add such method later for this kind of cases but it's not useful at the moment. Such feature would require more discussion anyway  it adds lots of other complication personally I don't like the idea",
    "reactions": {
      "url": "https://api.github.com/repos/status-im/status-mobile/issues/comments/443195472/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/status-im/status-mobile/issues/comments/443197199",
    "html_url": "https://github.com/status-im/status-mobile/issues/6962#issuecomment-443197199",
    "issue_url": "https://api.github.com/repos/status-im/status-mobile/issues/6962",
    "id": 443197199,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0MzE5NzE5OQ==",
    "user": {
      "login": "dshulyak",
      "id": 1964576,
      "node_id": "MDQ6VXNlcjE5NjQ1NzY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1964576?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dshulyak",
      "html_url": "https://github.com/dshulyak",
      "followers_url": "https://api.github.com/users/dshulyak/followers",
      "following_url": "https://api.github.com/users/dshulyak/following{/other_user}",
      "gists_url": "https://api.github.com/users/dshulyak/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dshulyak/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dshulyak/subscriptions",
      "organizations_url": "https://api.github.com/users/dshulyak/orgs",
      "repos_url": "https://api.github.com/users/dshulyak/repos",
      "events_url": "https://api.github.com/users/dshulyak/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dshulyak/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-30T13:02:40Z",
    "updated_at": "2018-11-30T13:02:40Z",
    "author_association": "CONTRIBUTOR",
    "body": "> we can add such method later for this kind of cases but it's not useful at the moment. Such feature would require more discussion anyway it adds lots of other complication personally I don't like the idea\r\n\r\nanyway, i don't understand the reason to make mail server connection management and history requests strongly coupled. and hide all history requests somewhere in status-go codebase.\r\n\r\nwhat is wrong with an alternative that I suggested, offload connection management to status-go and do requests whenever you need, but keep them in status-react?",
    "reactions": {
      "url": "https://api.github.com/repos/status-im/status-mobile/issues/comments/443197199/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/status-im/status-mobile/issues/comments/443198823",
    "html_url": "https://github.com/status-im/status-mobile/issues/6962#issuecomment-443198823",
    "issue_url": "https://api.github.com/repos/status-im/status-mobile/issues/6962",
    "id": 443198823,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0MzE5ODgyMw==",
    "user": {
      "login": "yenda",
      "id": 1181225,
      "node_id": "MDQ6VXNlcjExODEyMjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1181225?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/yenda",
      "html_url": "https://github.com/yenda",
      "followers_url": "https://api.github.com/users/yenda/followers",
      "following_url": "https://api.github.com/users/yenda/following{/other_user}",
      "gists_url": "https://api.github.com/users/yenda/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/yenda/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/yenda/subscriptions",
      "organizations_url": "https://api.github.com/users/yenda/orgs",
      "repos_url": "https://api.github.com/users/yenda/repos",
      "events_url": "https://api.github.com/users/yenda/events{/privacy}",
      "received_events_url": "https://api.github.com/users/yenda/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-30T13:09:44Z",
    "updated_at": "2018-11-30T14:05:00Z",
    "author_association": "CONTRIBUTOR",
    "body": "@dshulyak the only point of mailservers is to fetch message history so it makes sense if they are coupled. \r\n\r\nI agree with the case for having a requestMessages method for special cases like the feature mentionned.\r\nHowever that doesn't mean the client should have to handle all the standard cases. As described in the RFC there is no need to know about the concept of chat or anything for the mailserver to make sure history is requested properly, it's only about topics and filters. And those can be better managed on go-side.",
    "reactions": {
      "url": "https://api.github.com/repos/status-im/status-mobile/issues/comments/443198823/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/status-im/status-mobile/issues/comments/443862360",
    "html_url": "https://github.com/status-im/status-mobile/issues/6962#issuecomment-443862360",
    "issue_url": "https://api.github.com/repos/status-im/status-mobile/issues/6962",
    "id": 443862360,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0Mzg2MjM2MA==",
    "user": {
      "login": "mandrigin",
      "id": 466427,
      "node_id": "MDQ6VXNlcjQ2NjQyNw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/466427?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mandrigin",
      "html_url": "https://github.com/mandrigin",
      "followers_url": "https://api.github.com/users/mandrigin/followers",
      "following_url": "https://api.github.com/users/mandrigin/following{/other_user}",
      "gists_url": "https://api.github.com/users/mandrigin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mandrigin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mandrigin/subscriptions",
      "organizations_url": "https://api.github.com/users/mandrigin/orgs",
      "repos_url": "https://api.github.com/users/mandrigin/repos",
      "events_url": "https://api.github.com/users/mandrigin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mandrigin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-12-03T20:41:18Z",
    "updated_at": "2018-12-03T20:41:18Z",
    "author_association": "CONTRIBUTOR",
    "body": "@yenda why do we have the same `requestOptions` in both methods? I would agree with @dshulyak and remove it from the initialization. All the signals that we get to trigger the mailserver requests are coming from the OS, and that's react part.",
    "reactions": {
      "url": "https://api.github.com/repos/status-im/status-mobile/issues/comments/443862360/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/status-im/status-mobile/issues/comments/445558950",
    "html_url": "https://github.com/status-im/status-mobile/issues/6962#issuecomment-445558950",
    "issue_url": "https://api.github.com/repos/status-im/status-mobile/issues/6962",
    "id": 445558950,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0NTU1ODk1MA==",
    "user": {
      "login": "adambabik",
      "id": 277870,
      "node_id": "MDQ6VXNlcjI3Nzg3MA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/277870?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/adambabik",
      "html_url": "https://github.com/adambabik",
      "followers_url": "https://api.github.com/users/adambabik/followers",
      "following_url": "https://api.github.com/users/adambabik/following{/other_user}",
      "gists_url": "https://api.github.com/users/adambabik/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/adambabik/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/adambabik/subscriptions",
      "organizations_url": "https://api.github.com/users/adambabik/orgs",
      "repos_url": "https://api.github.com/users/adambabik/repos",
      "events_url": "https://api.github.com/users/adambabik/events{/privacy}",
      "received_events_url": "https://api.github.com/users/adambabik/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-12-09T18:13:22Z",
    "updated_at": "2018-12-09T18:13:22Z",
    "author_association": "CONTRIBUTOR",
    "body": "I think we can try this approach for mail servers first and learn from it. I am not sure about offloading these \"standard cases\" to status-go because (1) it's hard to identify all standard cases, (2) there will always be special cases when we need to provide the API so we basically spread the logic between two components. There will be also different standard cases for mobile and desktop.\r\n\r\nA more comprehensive vision is that the app is not aware of Whisper at all. It would only have the API with methods to handle messages. One of these methods can be used to request for historic messages but it might be not even aware of \"historic\" messages just messages.\r\n\r\nObviously, the peers management and connectivity would be moved to status-go completely but some feedback important from the UX perspective could be provided (e.g. users would like to see if they are connected to the network at all).",
    "reactions": {
      "url": "https://api.github.com/repos/status-im/status-mobile/issues/comments/445558950/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/status-im/status-mobile/issues/comments/471208290",
    "html_url": "https://github.com/status-im/status-mobile/issues/6962#issuecomment-471208290",
    "issue_url": "https://api.github.com/repos/status-im/status-mobile/issues/6962",
    "id": 471208290,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3MTIwODI5MA==",
    "user": {
      "login": "status-github-bot[bot]",
      "id": 35452227,
      "node_id": "MDM6Qm90MzU0NTIyMjc=",
      "avatar_url": "https://avatars.githubusercontent.com/in/8157?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/status-github-bot%5Bbot%5D",
      "html_url": "https://github.com/apps/status-github-bot",
      "followers_url": "https://api.github.com/users/status-github-bot%5Bbot%5D/followers",
      "following_url": "https://api.github.com/users/status-github-bot%5Bbot%5D/following{/other_user}",
      "gists_url": "https://api.github.com/users/status-github-bot%5Bbot%5D/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/status-github-bot%5Bbot%5D/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/status-github-bot%5Bbot%5D/subscriptions",
      "organizations_url": "https://api.github.com/users/status-github-bot%5Bbot%5D/orgs",
      "repos_url": "https://api.github.com/users/status-github-bot%5Bbot%5D/repos",
      "events_url": "https://api.github.com/users/status-github-bot%5Bbot%5D/events{/privacy}",
      "received_events_url": "https://api.github.com/users/status-github-bot%5Bbot%5D/received_events",
      "type": "Bot",
      "site_admin": false
    },
    "created_at": "2019-03-09T18:18:58Z",
    "updated_at": "2019-03-09T18:18:58Z",
    "author_association": "NONE",
    "body": "This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n",
    "reactions": {
      "url": "https://api.github.com/repos/status-im/status-mobile/issues/comments/471208290/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/status-im/status-mobile/issues/comments/473571957",
    "html_url": "https://github.com/status-im/status-mobile/issues/6962#issuecomment-473571957",
    "issue_url": "https://api.github.com/repos/status-im/status-mobile/issues/6962",
    "id": 473571957,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3MzU3MTk1Nw==",
    "user": {
      "login": "status-github-bot[bot]",
      "id": 35452227,
      "node_id": "MDM6Qm90MzU0NTIyMjc=",
      "avatar_url": "https://avatars.githubusercontent.com/in/8157?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/status-github-bot%5Bbot%5D",
      "html_url": "https://github.com/apps/status-github-bot",
      "followers_url": "https://api.github.com/users/status-github-bot%5Bbot%5D/followers",
      "following_url": "https://api.github.com/users/status-github-bot%5Bbot%5D/following{/other_user}",
      "gists_url": "https://api.github.com/users/status-github-bot%5Bbot%5D/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/status-github-bot%5Bbot%5D/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/status-github-bot%5Bbot%5D/subscriptions",
      "organizations_url": "https://api.github.com/users/status-github-bot%5Bbot%5D/orgs",
      "repos_url": "https://api.github.com/users/status-github-bot%5Bbot%5D/repos",
      "events_url": "https://api.github.com/users/status-github-bot%5Bbot%5D/events{/privacy}",
      "received_events_url": "https://api.github.com/users/status-github-bot%5Bbot%5D/received_events",
      "type": "Bot",
      "site_admin": false
    },
    "created_at": "2019-03-16T18:19:17Z",
    "updated_at": "2019-03-16T18:19:17Z",
    "author_association": "NONE",
    "body": "This issue has been automatically closed. Please re-open if this issue is important to you.\n",
    "reactions": {
      "url": "https://api.github.com/repos/status-im/status-mobile/issues/comments/473571957/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
