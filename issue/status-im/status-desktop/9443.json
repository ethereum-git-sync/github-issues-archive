{
  "url": "https://api.github.com/repos/status-im/status-desktop/issues/9443",
  "repository_url": "https://api.github.com/repos/status-im/status-desktop",
  "labels_url": "https://api.github.com/repos/status-im/status-desktop/issues/9443/labels{/name}",
  "comments_url": "https://api.github.com/repos/status-im/status-desktop/issues/9443/comments",
  "events_url": "https://api.github.com/repos/status-im/status-desktop/issues/9443/events",
  "html_url": "https://github.com/status-im/status-desktop/issues/9443",
  "id": 1571071756,
  "node_id": "I_kwDOD5KrTM5dpKcM",
  "number": 9443,
  "title": "[wallet] SendModal - lowering entropy in QML implementation",
  "user": {
    "login": "stefandunca",
    "id": 47554641,
    "node_id": "MDQ6VXNlcjQ3NTU0NjQx",
    "avatar_url": "https://avatars.githubusercontent.com/u/47554641?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/stefandunca",
    "html_url": "https://github.com/stefandunca",
    "followers_url": "https://api.github.com/users/stefandunca/followers",
    "following_url": "https://api.github.com/users/stefandunca/following{/other_user}",
    "gists_url": "https://api.github.com/users/stefandunca/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/stefandunca/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/stefandunca/subscriptions",
    "organizations_url": "https://api.github.com/users/stefandunca/orgs",
    "repos_url": "https://api.github.com/users/stefandunca/repos",
    "events_url": "https://api.github.com/users/stefandunca/events{/privacy}",
    "received_events_url": "https://api.github.com/users/stefandunca/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 2331339531,
      "node_id": "MDU6TGFiZWwyMzMxMzM5NTMx",
      "url": "https://api.github.com/repos/status-im/status-desktop/labels/wallet-team",
      "name": "wallet-team",
      "color": "b60205",
      "default": false,
      "description": ""
    },
    {
      "id": 3047427135,
      "node_id": "MDU6TGFiZWwzMDQ3NDI3MTM1",
      "url": "https://api.github.com/repos/status-im/status-desktop/labels/feature",
      "name": "feature",
      "color": "0E8A16",
      "default": false,
      "description": ""
    },
    {
      "id": 3143640900,
      "node_id": "MDU6TGFiZWwzMTQzNjQwOTAw",
      "url": "https://api.github.com/repos/status-im/status-desktop/labels/chore",
      "name": "chore",
      "color": "5AD5E4",
      "default": false,
      "description": ""
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": {
    "url": "https://api.github.com/repos/status-im/status-desktop/milestones/61",
    "html_url": "https://github.com/status-im/status-desktop/milestone/61",
    "labels_url": "https://api.github.com/repos/status-im/status-desktop/milestones/61/labels",
    "id": 8739485,
    "node_id": "MI_kwDOD5KrTM4AhVqd",
    "number": 61,
    "title": "0.16",
    "description": "**1. Finish anything that wasn't completed in the previous 0.15 cycle**\r\n\r\n- And fix bugs as usual.  We need to keep tech. debt at a roughly fixed level as we grow out functionality, can't let it accumulate! ;-)\r\n\r\n**2. Discord history import into a single channel in an existing community**\r\n\r\n- Pay off any Discord history import service tech. debt first\r\n\r\n- Then build the import into a single channel functionality, designs for this are already complete\r\n\r\n**3. Binaries over Waku**\r\n- Improve transfer of binaries over waku via splitting into chunks https://github.com/status-im/status-desktop/issues/9923\r\n- Posting of small files (max size somewhere in the region of 1 to 2mb).  Requires above item before going live\r\n\r\n\r\n**4.  IPFS service for community minted NFTs and other binary community assets**\r\n\r\n- In order for NFT tokens minted in our UI to be correctly displayed with all metadata on OpenSea, their assets need to be stored in IPFS (because IPFS is supported by OpenSea)\r\n\r\n- Will work something like this: IPFS pinning server is integrated into Status Desktop. When a community mints a NFT, the associated assets are IPFS pinned by the community control node.  The community control node then sends a 'user invisible message' to all other community members via Waku, and the Status Desktop installs of all community members then fetch the NFT assets and pin them as well.  This means that every member of a community that is running Status Desktop will always be 'IPFS pinning' all assets related to the community, so that as long as one community member that uses Status Desktop is online, the assets are guaranteed to be available via IPFS.\r\n\r\n- Use a similar scheme to the above for other community assets (that are not related to token minting) like: Community banner image, community icon, community description.\r\n\r\n- Use a similar scheme to the above but for status user data.  Status users pin assets related to their profile (banner image, avatar) using IPFS, and all of the user's mutual contacts also pin that user's profile data.  Must incorporate a setting so that users can opt-out of pinning their mutual contact's profile data.\r\n\r\n**5. Automatic bandwidth test on app startup**\r\n\r\n- automatic bandwidth test on app startup, and use results to automatically configure the waku shard usage appropriately depending on the available bandwidth (at the 'user has tons of bandwidth' end of the spectrum all waku shards will use waku Relay mode, at the 'user has very little bandwidth' end of the spectrum all waku shards will use waku filter + light push mode, and in between these two ends of the spectrum the user will use a mix of waku relay mode and waku filter + light push mode for different shards).  Plus also use  the results of the bandwidth test to automatically set the bittorred throttling at an appropriate setting at the beginning of each new session.\r\n\r\n\r\n\r\n",
    "creator": {
      "login": "iurimatias",
      "id": 176720,
      "node_id": "MDQ6VXNlcjE3NjcyMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/176720?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/iurimatias",
      "html_url": "https://github.com/iurimatias",
      "followers_url": "https://api.github.com/users/iurimatias/followers",
      "following_url": "https://api.github.com/users/iurimatias/following{/other_user}",
      "gists_url": "https://api.github.com/users/iurimatias/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/iurimatias/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/iurimatias/subscriptions",
      "organizations_url": "https://api.github.com/users/iurimatias/orgs",
      "repos_url": "https://api.github.com/users/iurimatias/repos",
      "events_url": "https://api.github.com/users/iurimatias/events{/privacy}",
      "received_events_url": "https://api.github.com/users/iurimatias/received_events",
      "type": "User",
      "site_admin": false
    },
    "open_issues": 25,
    "closed_issues": 0,
    "state": "open",
    "created_at": "2022-12-09T15:06:43Z",
    "updated_at": "2023-07-12T14:07:34Z",
    "due_on": "2023-11-03T07:00:00Z",
    "closed_at": null
  },
  "comments": 0,
  "created_at": "2023-02-04T18:39:31Z",
  "updated_at": "2023-07-17T13:39:18Z",
  "closed_at": null,
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "### Description\n\nSend Modal has one of the most complex user workflows in the wallet module; hence the implementation is also complex and has grown organically. Even though it has already substantially improved, with this epic, we look into how to improve it even more\n\n### Prototyping\n\nInconveniences\n\n- Working with Send Modal requires starting the APP, waiting for tokens update, and having multiple accounts with different values to cover many cases, which is slow and error-prone.\n\nImprovement brainstorming\n\n- Add an abstraction layer based on the current MVC implementation and integrate it with Story-Book\n  - This might require extensive work but can be done in steps using multiple facades and be finalized later on after MVP\n  - I should improve a lot by refactoring and covering multiple use cases without depending on network requests and manual setup\n\n### Layouting\n\nInconsistencies\n\n- The main content is resized by [StackLayout](https://github.com/status-im/status-desktop/blob/46d4193bbdd4a993088a8bc91ebdc47944fe9105/ui/imports/shared/popups/SendModal.qml#L170) but can't see any usage for it (switching between multiple items)\n- Some items have hardcoded sizes and don't adapt, e.g. [TokenListView](https://github.com/status-im/status-desktop/blob/46d4193bbdd4a993088a8bc91ebdc47944fe9105/ui/imports/shared/views/TokenListView.qml#L41)\n- Layout hints follow the parent's size, e.g. [group1 ColumnLayout](https://github.com/status-im/status-desktop/blob/46d4193bbdd4a993088a8bc91ebdc47944fe9105/ui/imports/shared/popups/SendModal.qml#L177)\n  - Defeats the purpose of size hints\n\nSome first steps were started [with #9414 fix](https://github.com/status-im/status-desktop/pull/9414)\n\nImprovement brainstorming\n\n- Switch the main layout simple layout (ColumnLayout?) that takes size hints from the content (impicitWidth/implicitHeight)\n- The underlying dialog implementation will adjust the size based on the layout's hints.\n  - The dialog also has some size limitations, therefore have the main layout fill parent and follow these limits.\n  - All items inside should offer size hints (preferred, min or max) and adapt to (layouts should work ok here)\n- Scrollable content should be scrollable if the content doesn't fit the requirements.\n  - e.g. `interactive: contentWidth > width`\n- Follow contributing guidelines [Positioning and sizing(https://github.com/status-im/status-desktop/blob/46d4193bbdd4a993088a8bc91ebdc47944fe9105/ui/StatusQ/src/contributing.md#L44) and [Layouts](https://github.com/status-im/status-desktop/blob/46d4193bbdd4a993088a8bc91ebdc47944fe9105/ui/StatusQ/src/contributing.md#L85)\n\n\n\n\n\nSome more improvements that can also be moved out of this task and created as a separate task  are defined below , most of them involve moving logic from the UI to the BE (nim)\n\n1. When sending request the last request should be executed only\n2. Cards should not be greyed out when loading is on going\n3. Moving disabled and preferred chains ui state to him and make it more reliable?\n4. Calculating entered address and giving it colours can be done on him side handling usage of modal for send, ens and stickers and bridge can be simplified further",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/status-im/status-desktop/issues/9443/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/status-im/status-desktop/issues/9443/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[

]
