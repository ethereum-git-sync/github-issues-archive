{
  "url": "https://api.github.com/repos/status-im/status-desktop/issues/10911",
  "repository_url": "https://api.github.com/repos/status-im/status-desktop",
  "labels_url": "https://api.github.com/repos/status-im/status-desktop/issues/10911/labels{/name}",
  "comments_url": "https://api.github.com/repos/status-im/status-desktop/issues/10911/comments",
  "events_url": "https://api.github.com/repos/status-im/status-desktop/issues/10911/events",
  "html_url": "https://github.com/status-im/status-desktop/issues/10911",
  "id": 1738696312,
  "node_id": "I_kwDOD5KrTM5nomZ4",
  "number": 10911,
  "title": "Make it possible to load a specific page of messages in the context of navigating to a message",
  "user": {
    "login": "jrainville",
    "id": 11926403,
    "node_id": "MDQ6VXNlcjExOTI2NDAz",
    "avatar_url": "https://avatars.githubusercontent.com/u/11926403?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jrainville",
    "html_url": "https://github.com/jrainville",
    "followers_url": "https://api.github.com/users/jrainville/followers",
    "following_url": "https://api.github.com/users/jrainville/following{/other_user}",
    "gists_url": "https://api.github.com/users/jrainville/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jrainville/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jrainville/subscriptions",
    "organizations_url": "https://api.github.com/users/jrainville/orgs",
    "repos_url": "https://api.github.com/users/jrainville/repos",
    "events_url": "https://api.github.com/users/jrainville/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jrainville/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 3047427135,
      "node_id": "MDU6TGFiZWwzMDQ3NDI3MTM1",
      "url": "https://api.github.com/repos/status-im/status-desktop/labels/feature",
      "name": "feature",
      "color": "0E8A16",
      "default": false,
      "description": ""
    },
    {
      "id": 4548141040,
      "node_id": "LA_kwDOD5KrTM8AAAABDxcf8A",
      "url": "https://api.github.com/repos/status-im/status-desktop/labels/messenger-team",
      "name": "messenger-team",
      "color": "232858",
      "default": false,
      "description": ""
    },
    {
      "id": 5745649251,
      "node_id": "LA_kwDOD5KrTM8AAAABVnemYw",
      "url": "https://api.github.com/repos/status-im/status-desktop/labels/E:Desktop%20Scalability%20For%20Mass%20Market",
      "name": "E:Desktop Scalability For Mass Market",
      "color": "20FD3C",
      "default": false,
      "description": "Issues related to make the app scalable for thousands of user at the same time"
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": {
    "url": "https://api.github.com/repos/status-im/status-desktop/milestones/74",
    "html_url": "https://github.com/status-im/status-desktop/milestone/74",
    "labels_url": "https://api.github.com/repos/status-im/status-desktop/milestones/74/labels",
    "id": 9699162,
    "node_id": "MI_kwDOD5KrTM4Ak_9a",
    "number": 74,
    "title": "0.18",
    "description": "**1. Finish anything that wasn't completed in the previous 0.17 cycle**\r\n\r\n- And fix bugs as usual.  We need to keep tech. debt at a roughly fixed level as we grow out functionality, can't let it accumulate! ;-)\r\n\r\n- Ensure accounts stored on Keycard are taken into consideration for community permissions\r\n\r\n**2. Complete initial airdrop functionality**\r\n- Airdrop history screens\r\n- Ability to airdrop based on in-Community activity (No. of msg, No. msg in time range, joining a community, length of community membership)  Ability to combine multiple attributes into an airdrop\r\n- Ability to token gate airdrops\r\n- Live airdrop gas estimation when setting up airdrop\r\n\r\n**3. Token import functionality**\r\n- Ability for a community Owner to import ERC-20 and NFT tokens, to later be airdropped or retailed\r\n\r\n**4.  IPFS service for community minted NFTs and other binary community assets**\r\n\r\n- In order for NFT tokens minted in our UI to be correctly displayed with all metadata on OpenSea, their assets need to be stored in IPFS (because IPFS is supported by OpenSea)\r\n\r\n- Will work something like this: IPFS pinning server is integrated into Status Desktop. When a community mints a NFT, the associated assets are IPFS pinned by the community control node.  The community control node then sends a 'user invisible message' to all other community members via Waku, and the Status Desktop installs of all community members then fetch the NFT assets and pin them as well.  This means that every member of a community that is running Status Desktop will always be 'IPFS pinning' all assets related to the community, so that as long as one community member that uses Status Desktop is online, the assets are guaranteed to be available via IPFS.\r\n\r\n- Use a similar scheme to the above could be used for other community assets (that are not related to token minting) in the future like: Community banner image, community icon, community description, etc...\r\n\r\n- Use a similar scheme to the above could be used for status user data in the future.  Status users pin assets related to their profile (banner image, avatar, showcase contents) using IPFS, and all of the user's mutual contacts also pin that user's profile data.  Must incorporate a setting so that users can opt-out of pinning their mutual contact's profile data.\r\n\r\n**5. Binaries over Waku**\r\n- Improve transfer of binaries over waku via splitting into chunks https://github.com/status-im/status-desktop/issues/9923\r\n- Posting of small files (max size somewhere in the region of 1 to 2mb).  Requires above item before going live\r\n\r\n\r\n\r\n**--- Wallet Team ---**\r\n\r\n1. Complete remaining work related to total balance graphs for 'All accounts' and each individual account and all graph functionality!\r\n\r\n2. Advanced transaction signing\r\n\r\n3. QR scanner\r\n- Needed for private key transfer\r\n- Ethereum key QRs (send modal triggered)\r\n- User Share URL in a QR (opens user profile dialogue) \r\n- Community and Channel inside Community URL in QRs (takes user to Community or Channel in Community)",
    "creator": {
      "login": "John-44",
      "id": 22846356,
      "node_id": "MDQ6VXNlcjIyODQ2MzU2",
      "avatar_url": "https://avatars.githubusercontent.com/u/22846356?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/John-44",
      "html_url": "https://github.com/John-44",
      "followers_url": "https://api.github.com/users/John-44/followers",
      "following_url": "https://api.github.com/users/John-44/following{/other_user}",
      "gists_url": "https://api.github.com/users/John-44/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/John-44/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/John-44/subscriptions",
      "organizations_url": "https://api.github.com/users/John-44/orgs",
      "repos_url": "https://api.github.com/users/John-44/repos",
      "events_url": "https://api.github.com/users/John-44/events{/privacy}",
      "received_events_url": "https://api.github.com/users/John-44/received_events",
      "type": "User",
      "site_admin": false
    },
    "open_issues": 6,
    "closed_issues": 0,
    "state": "open",
    "created_at": "2023-07-26T10:27:53Z",
    "updated_at": "2023-11-27T18:27:00Z",
    "due_on": "2024-05-23T07:00:00Z",
    "closed_at": null
  },
  "comments": 0,
  "created_at": "2023-06-02T19:24:25Z",
  "updated_at": "2023-11-27T18:10:34Z",
  "closed_at": null,
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "### Description\r\n\r\nRight now, when navigating to a message either from search, from a pinned or reply message or later from a link, we get messages from the DB in order from newest to oldest until we reach the right message.\r\n\r\nHowever, this can be pretty slow and also not great for memory, as we have to load a lot of useless messages.\r\n\r\nThe solution would be to instead have a new status-go function that loads a page of messages with the specific message we want in the middle.\r\n\r\nThen we can update the chat view with those messages and we wouldn't have to get all those in between messages.\r\n\r\nThere are a couple of important details however:\r\n- we'd need to show the loading screen when doing that get, since it might take time\r\n- once we show the retrieved messages, we need to highlight the clicked message (might already be the case)\r\n- we need to still support scrolling up to load more old messages, but this is not the same cursor as the one from the \"normal\" chat list, since we are way higher. That means status-go, when returning the page of messages, also needs to tell us what was that cursor\r\n- we would now need a new scroll behavior where scrolling down loads newer messages. This also requires a new cursor\r\n- we need to show the \"go down button\" to go back to recent messages, but without triggering the message load for newer messages from the line above\r\n\r\nI'm not exactly sure what is the best way to achieve the UI part of it. It might require new components that create a gap between the most recent messages (the normal chat list), and the navigated messages, since there would be lots of missing messages between them.\r\n\r\nMaybe that \"gap\" (let's find a new word for that since we already use gap for store node gaps) component would be the one to store which cursor it is using, that was we know which page to load when scrolling.\r\n\r\n### Acceptance Criteria\r\n\r\n- Navigating to a message, whatever the way, goes to it directly without just scrolling up and  up like right now (so it is faster)\r\n- There is a loading screen/state when loading the messages\r\n- The clicked message is highlighted for a short time (the already implemented highlight feature)\r\n- Scrolling up still works and loads older message from that subset of messages, ie if the page of message is from february, then scrolling up gets messages from february, than january, etc\r\n- Scrolling down loads newer messages, again with the same logic as above\r\n- There is a \"go back down\" button. When it is clicked, it should be instant and there should **not** be any message loading. We just go down to the most recent messages that were already loaded\r\n- Clicking again on the same message link/pin, it should be instant since we already loaded the message (it doesn't load again)\r\n\r\n",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/status-im/status-desktop/issues/10911/reactions",
    "total_count": 1,
    "+1": 1,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/status-im/status-desktop/issues/10911/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[

]
