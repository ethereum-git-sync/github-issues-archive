{
  "url": "https://api.github.com/repos/status-im/status-desktop/issues/13109",
  "repository_url": "https://api.github.com/repos/status-im/status-desktop",
  "labels_url": "https://api.github.com/repos/status-im/status-desktop/issues/13109/labels{/name}",
  "comments_url": "https://api.github.com/repos/status-im/status-desktop/issues/13109/comments",
  "events_url": "https://api.github.com/repos/status-im/status-desktop/issues/13109/events",
  "html_url": "https://github.com/status-im/status-desktop/issues/13109",
  "id": 2058218801,
  "node_id": "I_kwDOD5KrTM56re0x",
  "number": 13109,
  "title": "Preferred chains maintained in two places",
  "user": {
    "login": "saledjenic",
    "id": 86303051,
    "node_id": "MDQ6VXNlcjg2MzAzMDUx",
    "avatar_url": "https://avatars.githubusercontent.com/u/86303051?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/saledjenic",
    "html_url": "https://github.com/saledjenic",
    "followers_url": "https://api.github.com/users/saledjenic/followers",
    "following_url": "https://api.github.com/users/saledjenic/following{/other_user}",
    "gists_url": "https://api.github.com/users/saledjenic/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/saledjenic/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/saledjenic/subscriptions",
    "organizations_url": "https://api.github.com/users/saledjenic/orgs",
    "repos_url": "https://api.github.com/users/saledjenic/repos",
    "events_url": "https://api.github.com/users/saledjenic/events{/privacy}",
    "received_events_url": "https://api.github.com/users/saledjenic/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 2036563458,
      "node_id": "MDU6TGFiZWwyMDM2NTYzNDU4",
      "url": "https://api.github.com/repos/status-im/status-desktop/labels/bug",
      "name": "bug",
      "color": "d73a4a",
      "default": true,
      "description": "Something isn't working"
    },
    {
      "id": 2331339531,
      "node_id": "MDU6TGFiZWwyMzMxMzM5NTMx",
      "url": "https://api.github.com/repos/status-im/status-desktop/labels/wallet-team",
      "name": "wallet-team",
      "color": "b60205",
      "default": false,
      "description": ""
    },
    {
      "id": 6350168202,
      "node_id": "LA_kwDOD5KrTM8AAAABen_gig",
      "url": "https://api.github.com/repos/status-im/status-desktop/labels/E:%20Desktop%20Saved%20Addresses",
      "name": "E: Desktop Saved Addresses",
      "color": "C9C13B",
      "default": false,
      "description": "Saved addresses per new design"
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 2,
  "created_at": "2023-12-28T09:43:31Z",
  "updated_at": "2024-01-04T15:39:50Z",
  "closed_at": null,
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "We're maintaining 2 preferred chains for the same address in some cases (when the user saves a wallet account).\r\n\r\nPrimarily we're maintaining preferred chains in the `keypairs_accounts` table, for all wallet accounts and also we're maintaining preferred chains in the `saved_addresses` table as well for all saved addresses.\r\n\r\nThe trick is that the wallet address can be added to the saved addresses as well. In this case we have 2 preferred chains for the same address that are not synced.\r\n\r\n_Some of the solutions:_\r\n\r\n1. disable adding wallet addresses to the saved addresses list\r\n\r\n2. syncing the change, when changing referred chains for the wallet address, to check if it exists in the saved addresses and update preferred chains there as well, and vice versa, when changing preferred chains for the wallet address to check if it exists in the keypairs_accounts table and update chains there\r\n\r\n3. merging `saved_addresses` into `keypairs_accounts` table, adding some new flags `saved` (to mark if the address is added to the saved addresses or not), `saved_removed` (to mark if the address is removed from the saved addresses list or not) and `saved_clock` (to set the clock of the last change made over saved address), that way we can have a single source of truth and also if keypair/account is deleted (we're doing a soft delete, just setting a flag, not delete it for real), we will still have it in the list of saved addresses till the moment `saved_removed` flag is set to `true`. \r\n \r\n\r\nI'm maybe more for solution 3.  but we can discuss it.",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/status-im/status-desktop/issues/13109/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/status-im/status-desktop/issues/13109/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/status-im/status-desktop/issues/comments/1877243636",
    "html_url": "https://github.com/status-im/status-desktop/issues/13109#issuecomment-1877243636",
    "issue_url": "https://api.github.com/repos/status-im/status-desktop/issues/13109",
    "id": 1877243636,
    "node_id": "IC_kwDOD5KrTM5v5Hb0",
    "user": {
      "login": "benjthayer",
      "id": 110033914,
      "node_id": "U_kgDOBo77-g",
      "avatar_url": "https://avatars.githubusercontent.com/u/110033914?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/benjthayer",
      "html_url": "https://github.com/benjthayer",
      "followers_url": "https://api.github.com/users/benjthayer/followers",
      "following_url": "https://api.github.com/users/benjthayer/following{/other_user}",
      "gists_url": "https://api.github.com/users/benjthayer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/benjthayer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/benjthayer/subscriptions",
      "organizations_url": "https://api.github.com/users/benjthayer/orgs",
      "repos_url": "https://api.github.com/users/benjthayer/repos",
      "events_url": "https://api.github.com/users/benjthayer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/benjthayer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2024-01-04T15:04:11Z",
    "updated_at": "2024-01-04T15:04:11Z",
    "author_association": "NONE",
    "body": "Thanks @saledjenic from a UX perspective, I don't think there's really any benefit in the user adding one of their accounts as a saved address so IMO we could go for route 1 (validating the address field when the user attempts to add one of their own accounts to their saved addresses). It feels like it would be beneficial to safeguard the mental schema that `saved addresses` are primarily for managing and accessing counterparties. \r\n\r\nWe do permit the user to add existing contacts into the saved addresses list even though that causes similar duplicity in the UI (the address would then be visible in the send dialog under both the contacts and saved addresses tabs). But in that case, the concept of saved addresses being the method to manage and access external counterparties is still retained. \r\n\r\nIf we did block the user from adding one of their own accounts as a saved address, would we also need to consider the edge case of a user adding a saved address and then trying to import that same address as their own account?\r\n\r\nJust my initial thoughts, WDYT @John-44 ?",
    "reactions": {
      "url": "https://api.github.com/repos/status-im/status-desktop/issues/comments/1877243636/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/status-im/status-desktop/issues/comments/1877307674",
    "html_url": "https://github.com/status-im/status-desktop/issues/13109#issuecomment-1877307674",
    "issue_url": "https://api.github.com/repos/status-im/status-desktop/issues/13109",
    "id": 1877307674,
    "node_id": "IC_kwDOD5KrTM5v5XEa",
    "user": {
      "login": "John-44",
      "id": 22846356,
      "node_id": "MDQ6VXNlcjIyODQ2MzU2",
      "avatar_url": "https://avatars.githubusercontent.com/u/22846356?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/John-44",
      "html_url": "https://github.com/John-44",
      "followers_url": "https://api.github.com/users/John-44/followers",
      "following_url": "https://api.github.com/users/John-44/following{/other_user}",
      "gists_url": "https://api.github.com/users/John-44/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/John-44/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/John-44/subscriptions",
      "organizations_url": "https://api.github.com/users/John-44/orgs",
      "repos_url": "https://api.github.com/users/John-44/repos",
      "events_url": "https://api.github.com/users/John-44/events{/privacy}",
      "received_events_url": "https://api.github.com/users/John-44/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2024-01-04T15:39:18Z",
    "updated_at": "2024-01-04T15:39:50Z",
    "author_association": "NONE",
    "body": "> Thanks @saledjenic from a UX perspective, I don't think there's really any benefit in the user adding one of their own account addresses as a saved address so IMO we could go for route 1 (validating the address field when the user attempts to add one of their own accounts to their saved addresses). It feels like it would be beneficial to safeguard the mental schema that `saved addresses` are primarily for managing and accessing counterparties.\r\n> \r\n> We do permit the user to add existing contacts into the saved addresses list even though that causes similar duplicity in the UI (the address would then be visible in the send dialog under both the contacts and saved addresses tabs). But in that case, the concept of saved addresses being the method to manage and access external counterparties is still retained.\r\n> \r\n> If we did block the user from adding one of their own accounts as a saved address, would we also need to consider the edge case of a user adding a saved address and then trying to import that same address as their own account?\r\n> \r\n> Just my initial thoughts, WDYT @John-44 ?\r\n\r\n@benjthayer @saledjenic I would be in favour of blocking the user from saving one of their own addresses as a saved address, as this doesn't serve any purpose, could be confusing, and leads to the corner cases @saledjenic described.  Handling \"the edge case of a user adding a saved address and then trying to import that same address as their own account\" seems like it would be easier to handle.  We could do something as simple as pop up a dialogue letting them know that the saved address will be deleted as a result of added an account with the same address, or something like that.",
    "reactions": {
      "url": "https://api.github.com/repos/status-im/status-desktop/issues/comments/1877307674/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
