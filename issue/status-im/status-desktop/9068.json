{
  "url": "https://api.github.com/repos/status-im/status-desktop/issues/9068",
  "repository_url": "https://api.github.com/repos/status-im/status-desktop",
  "labels_url": "https://api.github.com/repos/status-im/status-desktop/issues/9068/labels{/name}",
  "comments_url": "https://api.github.com/repos/status-im/status-desktop/issues/9068/comments",
  "events_url": "https://api.github.com/repos/status-im/status-desktop/issues/9068/events",
  "html_url": "https://github.com/status-im/status-desktop/issues/9068",
  "id": 1529277714,
  "node_id": "I_kwDOD5KrTM5bJu0S",
  "number": 9068,
  "title": "Optimise messages model operations",
  "user": {
    "login": "alexjba",
    "id": 47811206,
    "node_id": "MDQ6VXNlcjQ3ODExMjA2",
    "avatar_url": "https://avatars.githubusercontent.com/u/47811206?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/alexjba",
    "html_url": "https://github.com/alexjba",
    "followers_url": "https://api.github.com/users/alexjba/followers",
    "following_url": "https://api.github.com/users/alexjba/following{/other_user}",
    "gists_url": "https://api.github.com/users/alexjba/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/alexjba/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/alexjba/subscriptions",
    "organizations_url": "https://api.github.com/users/alexjba/orgs",
    "repos_url": "https://api.github.com/users/alexjba/repos",
    "events_url": "https://api.github.com/users/alexjba/events{/privacy}",
    "received_events_url": "https://api.github.com/users/alexjba/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 2987757762,
      "node_id": "MDU6TGFiZWwyOTg3NzU3NzYy",
      "url": "https://api.github.com/repos/status-im/status-desktop/labels/to%20analyze",
      "name": "to analyze",
      "color": "5CC421",
      "default": false,
      "description": ""
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": {
    "login": "jrainville",
    "id": 11926403,
    "node_id": "MDQ6VXNlcjExOTI2NDAz",
    "avatar_url": "https://avatars.githubusercontent.com/u/11926403?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jrainville",
    "html_url": "https://github.com/jrainville",
    "followers_url": "https://api.github.com/users/jrainville/followers",
    "following_url": "https://api.github.com/users/jrainville/following{/other_user}",
    "gists_url": "https://api.github.com/users/jrainville/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jrainville/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jrainville/subscriptions",
    "organizations_url": "https://api.github.com/users/jrainville/orgs",
    "repos_url": "https://api.github.com/users/jrainville/repos",
    "events_url": "https://api.github.com/users/jrainville/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jrainville/received_events",
    "type": "User",
    "site_admin": false
  },
  "assignees": [
    {
      "login": "jrainville",
      "id": 11926403,
      "node_id": "MDQ6VXNlcjExOTI2NDAz",
      "avatar_url": "https://avatars.githubusercontent.com/u/11926403?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jrainville",
      "html_url": "https://github.com/jrainville",
      "followers_url": "https://api.github.com/users/jrainville/followers",
      "following_url": "https://api.github.com/users/jrainville/following{/other_user}",
      "gists_url": "https://api.github.com/users/jrainville/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jrainville/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jrainville/subscriptions",
      "organizations_url": "https://api.github.com/users/jrainville/orgs",
      "repos_url": "https://api.github.com/users/jrainville/repos",
      "events_url": "https://api.github.com/users/jrainville/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jrainville/received_events",
      "type": "User",
      "site_admin": false
    }
  ],
  "milestone": null,
  "comments": 7,
  "created_at": "2023-01-11T15:46:11Z",
  "updated_at": "2023-02-01T18:54:11Z",
  "closed_at": "2023-02-01T18:54:10Z",
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "### Description\r\n\r\nCurrently there are two improvement proposals that can be analysed.\r\n\r\n#### Improve model insert operations\r\n\r\nCurrently all the messages are inserted one by one in the messages model. Each one emitting its own beginInsert/endInsert. This is time consuming and we can see the ui freezing whenever a bunch of messages are inserted in the model.\r\n\r\nWe could find two options in order to improve the insert operations:\r\n1. Use unsorted nim model and append all messages. The UI can consume the model through a sortFilterProxyModel and maintain the current sort.\r\n3. Use sorted nim model and add a bulk insert algorithm.\r\n\r\n#### Improve messages data parsing\r\nThere are 3 stages of message parsing:\r\n1. Async operation of loading messages from backend\r\n2. Text to MessageDto array\r\n3. MessageDto to Item array\r\n\r\nThe proposal here is to extend the async operation to include all the parsing stages and provide an Item array in the main thread.\r\n\r\nNew proposals are more than welcome!\r\n",
  "closed_by": {
    "login": "jrainville",
    "id": 11926403,
    "node_id": "MDQ6VXNlcjExOTI2NDAz",
    "avatar_url": "https://avatars.githubusercontent.com/u/11926403?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jrainville",
    "html_url": "https://github.com/jrainville",
    "followers_url": "https://api.github.com/users/jrainville/followers",
    "following_url": "https://api.github.com/users/jrainville/following{/other_user}",
    "gists_url": "https://api.github.com/users/jrainville/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jrainville/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jrainville/subscriptions",
    "organizations_url": "https://api.github.com/users/jrainville/orgs",
    "repos_url": "https://api.github.com/users/jrainville/repos",
    "events_url": "https://api.github.com/users/jrainville/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jrainville/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/status-im/status-desktop/issues/9068/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/status-im/status-desktop/issues/9068/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/status-im/status-desktop/issues/comments/1378998728",
    "html_url": "https://github.com/status-im/status-desktop/issues/9068#issuecomment-1378998728",
    "issue_url": "https://api.github.com/repos/status-im/status-desktop/issues/9068",
    "id": 1378998728,
    "node_id": "IC_kwDOD5KrTM5SMdnI",
    "user": {
      "login": "alexjba",
      "id": 47811206,
      "node_id": "MDQ6VXNlcjQ3ODExMjA2",
      "avatar_url": "https://avatars.githubusercontent.com/u/47811206?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/alexjba",
      "html_url": "https://github.com/alexjba",
      "followers_url": "https://api.github.com/users/alexjba/followers",
      "following_url": "https://api.github.com/users/alexjba/following{/other_user}",
      "gists_url": "https://api.github.com/users/alexjba/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/alexjba/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/alexjba/subscriptions",
      "organizations_url": "https://api.github.com/users/alexjba/orgs",
      "repos_url": "https://api.github.com/users/alexjba/repos",
      "events_url": "https://api.github.com/users/alexjba/events{/privacy}",
      "received_events_url": "https://api.github.com/users/alexjba/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-01-11T15:49:20Z",
    "updated_at": "2023-01-11T15:49:20Z",
    "author_association": "CONTRIBUTOR",
    "body": "@jrainville What do you think of these proposals? I think it would improve the scroll, chat view loading and app loading.",
    "reactions": {
      "url": "https://api.github.com/repos/status-im/status-desktop/issues/comments/1378998728/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/status-im/status-desktop/issues/comments/1379028139",
    "html_url": "https://github.com/status-im/status-desktop/issues/9068#issuecomment-1379028139",
    "issue_url": "https://api.github.com/repos/status-im/status-desktop/issues/9068",
    "id": 1379028139,
    "node_id": "IC_kwDOD5KrTM5SMkyr",
    "user": {
      "login": "jrainville",
      "id": 11926403,
      "node_id": "MDQ6VXNlcjExOTI2NDAz",
      "avatar_url": "https://avatars.githubusercontent.com/u/11926403?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jrainville",
      "html_url": "https://github.com/jrainville",
      "followers_url": "https://api.github.com/users/jrainville/followers",
      "following_url": "https://api.github.com/users/jrainville/following{/other_user}",
      "gists_url": "https://api.github.com/users/jrainville/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jrainville/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jrainville/subscriptions",
      "organizations_url": "https://api.github.com/users/jrainville/orgs",
      "repos_url": "https://api.github.com/users/jrainville/repos",
      "events_url": "https://api.github.com/users/jrainville/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jrainville/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-01-11T16:01:32Z",
    "updated_at": "2023-01-11T16:01:32Z",
    "author_association": "MEMBER",
    "body": "Great proposals.\r\n\r\n### Improve model insert operations:\r\nThe first solution relying on Improve model insert operations `sortFilterProxyModel` seems like the simplest one. I'm not super familiar with `sortFilterProxyModel`, but if QT experts can confirm that it is fast because it doesn't use JS to sort, then it sounds like a good plan.\r\n\r\n### Improve messages data parsing\r\nProviding an Item array to the main thread looks like a sensible performance enhancement. I think the original goal of the old refactor was to create a distinction from the front-end Item and the backend dto, but I guess it still maintains that.\r\n\r\nIf we can at the same time make it simpler create Items, it would help. The `initItem` calls are everywhere and it's very annoying to add new properties.",
    "reactions": {
      "url": "https://api.github.com/repos/status-im/status-desktop/issues/comments/1379028139/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/status-im/status-desktop/issues/comments/1379031285",
    "html_url": "https://github.com/status-im/status-desktop/issues/9068#issuecomment-1379031285",
    "issue_url": "https://api.github.com/repos/status-im/status-desktop/issues/9068",
    "id": 1379031285,
    "node_id": "IC_kwDOD5KrTM5SMlj1",
    "user": {
      "login": "jrainville",
      "id": 11926403,
      "node_id": "MDQ6VXNlcjExOTI2NDAz",
      "avatar_url": "https://avatars.githubusercontent.com/u/11926403?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jrainville",
      "html_url": "https://github.com/jrainville",
      "followers_url": "https://api.github.com/users/jrainville/followers",
      "following_url": "https://api.github.com/users/jrainville/following{/other_user}",
      "gists_url": "https://api.github.com/users/jrainville/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jrainville/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jrainville/subscriptions",
      "organizations_url": "https://api.github.com/users/jrainville/orgs",
      "repos_url": "https://api.github.com/users/jrainville/repos",
      "events_url": "https://api.github.com/users/jrainville/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jrainville/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-01-11T16:02:49Z",
    "updated_at": "2023-01-11T16:02:49Z",
    "author_association": "MEMBER",
    "body": "I'll wait a couple of days for everyone to have time to review these proposals. When we have an agreement, I'll split those two into two tasks and assign them.",
    "reactions": {
      "url": "https://api.github.com/repos/status-im/status-desktop/issues/comments/1379031285/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/status-im/status-desktop/issues/comments/1379987041",
    "html_url": "https://github.com/status-im/status-desktop/issues/9068#issuecomment-1379987041",
    "issue_url": "https://api.github.com/repos/status-im/status-desktop/issues/9068",
    "id": 1379987041,
    "node_id": "IC_kwDOD5KrTM5SQO5h",
    "user": {
      "login": "osmaczko",
      "id": 33099791,
      "node_id": "MDQ6VXNlcjMzMDk5Nzkx",
      "avatar_url": "https://avatars.githubusercontent.com/u/33099791?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/osmaczko",
      "html_url": "https://github.com/osmaczko",
      "followers_url": "https://api.github.com/users/osmaczko/followers",
      "following_url": "https://api.github.com/users/osmaczko/following{/other_user}",
      "gists_url": "https://api.github.com/users/osmaczko/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/osmaczko/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/osmaczko/subscriptions",
      "organizations_url": "https://api.github.com/users/osmaczko/orgs",
      "repos_url": "https://api.github.com/users/osmaczko/repos",
      "events_url": "https://api.github.com/users/osmaczko/events{/privacy}",
      "received_events_url": "https://api.github.com/users/osmaczko/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-01-12T08:43:44Z",
    "updated_at": "2023-01-12T08:43:44Z",
    "author_association": "CONTRIBUTOR",
    "body": "> We could find two options in order to improve the insert operations:\r\n> \r\n> 1. Use unsorted nim model and append all messages. The UI can consume the model through a sortFilterProxyModel and maintain the current sort.\r\n> 2. Use sorted nim model and add a bulk insert algorithm.\r\n\r\nI would go with the 2nd option because we would have more control over the model. Messages are not always sorted by clock, e.g. new messages marker has the same clock value as the message it points to, but it needs to be above it. I know this case can be solved by proper implementation of `lessThan` predicate but we should keep this logic out of qml.\r\n\r\n> There are 3 stages of message parsing:\r\n> \r\n> 1. Async operation of loading messages from backend\r\n> 2. Text to MessageDto array\r\n> 3. MessageDto to Item array\r\n> \r\n> The proposal here is to extend the async operation to include all the parsing stages and provide an Item array in the main thread.\r\n\r\nThe 2nd seems reasonable to do, as text parsing is usually expensive. Nevertheless, it may require us to improve the way how we do async tasks in NIM. Currently, we can only output strings as async operation result:\r\nhttps://github.com/status-im/status-desktop/blob/a181d1d8674159a00e55aa2285127adad568a8f3/src/app/core/tasks/qt.nim#L12-L16\r\n\r\nThat means, if we do text parsing to MessageDto array in a separate task, we can only forward the result as JSON to the main thread and the main thread will need to parse text anyway :sweat_smile: \r\n\r\nThe 3rd one, I am not so sure, it will most likely not bring any meaningful performance benefit and will increase the complexity of the code.",
    "reactions": {
      "url": "https://api.github.com/repos/status-im/status-desktop/issues/comments/1379987041/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/status-im/status-desktop/issues/comments/1380080349",
    "html_url": "https://github.com/status-im/status-desktop/issues/9068#issuecomment-1380080349",
    "issue_url": "https://api.github.com/repos/status-im/status-desktop/issues/9068",
    "id": 1380080349,
    "node_id": "IC_kwDOD5KrTM5SQlrd",
    "user": {
      "login": "caybro",
      "id": 5377645,
      "node_id": "MDQ6VXNlcjUzNzc2NDU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5377645?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/caybro",
      "html_url": "https://github.com/caybro",
      "followers_url": "https://api.github.com/users/caybro/followers",
      "following_url": "https://api.github.com/users/caybro/following{/other_user}",
      "gists_url": "https://api.github.com/users/caybro/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/caybro/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/caybro/subscriptions",
      "organizations_url": "https://api.github.com/users/caybro/orgs",
      "repos_url": "https://api.github.com/users/caybro/repos",
      "events_url": "https://api.github.com/users/caybro/events{/privacy}",
      "received_events_url": "https://api.github.com/users/caybro/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-01-12T09:58:20Z",
    "updated_at": "2023-01-12T09:58:20Z",
    "author_association": "MEMBER",
    "body": "> > We could find two options in order to improve the insert operations:\r\n> > \r\n> > 1. Use unsorted nim model and append all messages. The UI can consume the model through a sortFilterProxyModel and maintain the current sort.\r\n> > 2. Use sorted nim model and add a bulk insert algorithm.\r\n> \r\n> I would go with the 2nd option because we would have more control over the model. Messages are not always sorted by clock, e.g. new messages marker has the same clock value as the message it points to, but it needs to be above it. I know this case can be solved by proper implementation of `lessThan` predicate but we should keep this logic out of qml.\r\n\r\nI have a 3rd idea that kinda blends the good parts of the 2 proposed solutions above :) What if we do it properly, keep the base NIM model as simple as possible, without any sorting or filtering (this would simplify and speedup the code a _lot_ I assume) and we do a very simple, custom C++ QAbstractProxyModel-based MessagesModel that would then get consumed by QML? ",
    "reactions": {
      "url": "https://api.github.com/repos/status-im/status-desktop/issues/comments/1380080349/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/status-im/status-desktop/issues/comments/1380206045",
    "html_url": "https://github.com/status-im/status-desktop/issues/9068#issuecomment-1380206045",
    "issue_url": "https://api.github.com/repos/status-im/status-desktop/issues/9068",
    "id": 1380206045,
    "node_id": "IC_kwDOD5KrTM5SREXd",
    "user": {
      "login": "alexjba",
      "id": 47811206,
      "node_id": "MDQ6VXNlcjQ3ODExMjA2",
      "avatar_url": "https://avatars.githubusercontent.com/u/47811206?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/alexjba",
      "html_url": "https://github.com/alexjba",
      "followers_url": "https://api.github.com/users/alexjba/followers",
      "following_url": "https://api.github.com/users/alexjba/following{/other_user}",
      "gists_url": "https://api.github.com/users/alexjba/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/alexjba/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/alexjba/subscriptions",
      "organizations_url": "https://api.github.com/users/alexjba/orgs",
      "repos_url": "https://api.github.com/users/alexjba/repos",
      "events_url": "https://api.github.com/users/alexjba/events{/privacy}",
      "received_events_url": "https://api.github.com/users/alexjba/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-01-12T11:44:08Z",
    "updated_at": "2023-01-12T11:44:08Z",
    "author_association": "CONTRIBUTOR",
    "body": "> The 3rd one, I am not so sure, it will most likely not bring any meaningful performance benefit and will increase the complexity of the code.\r\n\r\nWhat I'm afraid here is of db or network query for extra data. Not sure it's the case now with contactDetails as I just got lost on go side. But it's clear the MessageDto or the data already aggregated in the messages module is not enough to build an Item.",
    "reactions": {
      "url": "https://api.github.com/repos/status-im/status-desktop/issues/comments/1380206045/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/status-im/status-desktop/issues/comments/1412556662",
    "html_url": "https://github.com/status-im/status-desktop/issues/9068#issuecomment-1412556662",
    "issue_url": "https://api.github.com/repos/status-im/status-desktop/issues/9068",
    "id": 1412556662,
    "node_id": "IC_kwDOD5KrTM5UMed2",
    "user": {
      "login": "jrainville",
      "id": 11926403,
      "node_id": "MDQ6VXNlcjExOTI2NDAz",
      "avatar_url": "https://avatars.githubusercontent.com/u/11926403?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jrainville",
      "html_url": "https://github.com/jrainville",
      "followers_url": "https://api.github.com/users/jrainville/followers",
      "following_url": "https://api.github.com/users/jrainville/following{/other_user}",
      "gists_url": "https://api.github.com/users/jrainville/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jrainville/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jrainville/subscriptions",
      "organizations_url": "https://api.github.com/users/jrainville/orgs",
      "repos_url": "https://api.github.com/users/jrainville/repos",
      "events_url": "https://api.github.com/users/jrainville/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jrainville/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-02-01T18:54:10Z",
    "updated_at": "2023-02-01T18:54:10Z",
    "author_association": "MEMBER",
    "body": "I'm gonna close this for now. Patryk already implemented one of the solutions and the other one is a bit harder to implement considering we can only pass strings in between threads.",
    "reactions": {
      "url": "https://api.github.com/repos/status-im/status-desktop/issues/comments/1412556662/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
