{
  "url": "https://api.github.com/repos/status-im/status-desktop/issues/8711",
  "repository_url": "https://api.github.com/repos/status-im/status-desktop",
  "labels_url": "https://api.github.com/repos/status-im/status-desktop/issues/8711/labels{/name}",
  "comments_url": "https://api.github.com/repos/status-im/status-desktop/issues/8711/comments",
  "events_url": "https://api.github.com/repos/status-im/status-desktop/issues/8711/events",
  "html_url": "https://github.com/status-im/status-desktop/issues/8711",
  "id": 1486534544,
  "node_id": "I_kwDOD5KrTM5YmreQ",
  "number": 8711,
  "title": "Status app Monitor & Inspection tool - research & discussion",
  "user": {
    "login": "micieslak",
    "id": 20650004,
    "node_id": "MDQ6VXNlcjIwNjUwMDA0",
    "avatar_url": "https://avatars.githubusercontent.com/u/20650004?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/micieslak",
    "html_url": "https://github.com/micieslak",
    "followers_url": "https://api.github.com/users/micieslak/followers",
    "following_url": "https://api.github.com/users/micieslak/following{/other_user}",
    "gists_url": "https://api.github.com/users/micieslak/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/micieslak/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/micieslak/subscriptions",
    "organizations_url": "https://api.github.com/users/micieslak/orgs",
    "repos_url": "https://api.github.com/users/micieslak/repos",
    "events_url": "https://api.github.com/users/micieslak/events{/privacy}",
    "received_events_url": "https://api.github.com/users/micieslak/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 3047427135,
      "node_id": "MDU6TGFiZWwzMDQ3NDI3MTM1",
      "url": "https://api.github.com/repos/status-im/status-desktop/labels/feature",
      "name": "feature",
      "color": "0E8A16",
      "default": false,
      "description": ""
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": {
    "login": "micieslak",
    "id": 20650004,
    "node_id": "MDQ6VXNlcjIwNjUwMDA0",
    "avatar_url": "https://avatars.githubusercontent.com/u/20650004?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/micieslak",
    "html_url": "https://github.com/micieslak",
    "followers_url": "https://api.github.com/users/micieslak/followers",
    "following_url": "https://api.github.com/users/micieslak/following{/other_user}",
    "gists_url": "https://api.github.com/users/micieslak/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/micieslak/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/micieslak/subscriptions",
    "organizations_url": "https://api.github.com/users/micieslak/orgs",
    "repos_url": "https://api.github.com/users/micieslak/repos",
    "events_url": "https://api.github.com/users/micieslak/events{/privacy}",
    "received_events_url": "https://api.github.com/users/micieslak/received_events",
    "type": "User",
    "site_admin": false
  },
  "assignees": [
    {
      "login": "micieslak",
      "id": 20650004,
      "node_id": "MDQ6VXNlcjIwNjUwMDA0",
      "avatar_url": "https://avatars.githubusercontent.com/u/20650004?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/micieslak",
      "html_url": "https://github.com/micieslak",
      "followers_url": "https://api.github.com/users/micieslak/followers",
      "following_url": "https://api.github.com/users/micieslak/following{/other_user}",
      "gists_url": "https://api.github.com/users/micieslak/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/micieslak/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/micieslak/subscriptions",
      "organizations_url": "https://api.github.com/users/micieslak/orgs",
      "repos_url": "https://api.github.com/users/micieslak/repos",
      "events_url": "https://api.github.com/users/micieslak/events{/privacy}",
      "received_events_url": "https://api.github.com/users/micieslak/received_events",
      "type": "User",
      "site_admin": false
    }
  ],
  "milestone": null,
  "comments": 11,
  "created_at": "2022-12-09T10:51:03Z",
  "updated_at": "2022-12-14T12:53:31Z",
  "closed_at": "2022-12-14T12:53:31Z",
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "### Description\r\n\r\nCurrently the backend part is integrated with UI via qml's context properties. Objects like `mainModule` are injected from the NIM code to expose properties and data models representing the current application state. In general this technique is not recommended for integrating qml with a backend but in our case it's enforced by NIM's limitations.\r\n\r\nThis approach has some obvious limitations:\r\n- no imports required, no strict typing. It's not possible to infer when writing qml code what's inside given context property. It's necessary to search in nim code to learn about the structure. Also changes in given contest properties can be easily overlooked in qml part.\r\n- poor support from external tools, in e.g. GammaRay context properties internals are not available (probably bc they come from NIM)\r\n\r\nThis causes that it's not clear on what data the app is operating in a given moment. We don't know if a bug comes from improper rendering or it has it's roots in the underlying data coming from backend. It's hard to detect if some data data are not kept unnecessarily, resulting in high memory consumption.\r\n\r\nThat problem could be addressed by tool for visualizing raw data incoming from the backend, from simple properties to models. It could be plugged-in into the running instance (with minimal incursion of the existing code) of the application and monitor underlying data in the runtime. Additionally such monitor could provide utilities for dynamic interaction with the app via code injected on the fly.\r\n\r\nThe video presents very basic PoC of such tool, built on top of storybook's components for hot reloading:\r\n\r\n[simplescreenrecorder-2022-12-08_17.35.24.webm](https://user-images.githubusercontent.com/20650004/206684444-c15bdd5a-8675-4fc2-b257-0fc619c94d86.webm)\r\n\r\nThe goal of this issue is to discuss if the proposed tool would be useful and collect further ideas for both functionality and implementation.\r\n\r\nFrom technical perspective one of the challenges is to dissect production version which should not (probably) contain monitoring functionality and the local setup with the monitoring enabled.\r\n\r\n@iurimatias @alexandraB99 @noeliaSD @caybro @alexjba @osmaczko please share you thoughts :)\r\n",
  "closed_by": {
    "login": "micieslak",
    "id": 20650004,
    "node_id": "MDQ6VXNlcjIwNjUwMDA0",
    "avatar_url": "https://avatars.githubusercontent.com/u/20650004?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/micieslak",
    "html_url": "https://github.com/micieslak",
    "followers_url": "https://api.github.com/users/micieslak/followers",
    "following_url": "https://api.github.com/users/micieslak/following{/other_user}",
    "gists_url": "https://api.github.com/users/micieslak/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/micieslak/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/micieslak/subscriptions",
    "organizations_url": "https://api.github.com/users/micieslak/orgs",
    "repos_url": "https://api.github.com/users/micieslak/repos",
    "events_url": "https://api.github.com/users/micieslak/events{/privacy}",
    "received_events_url": "https://api.github.com/users/micieslak/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/status-im/status-desktop/issues/8711/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/status-im/status-desktop/issues/8711/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/status-im/status-desktop/issues/comments/1344170707",
    "html_url": "https://github.com/status-im/status-desktop/issues/8711#issuecomment-1344170707",
    "issue_url": "https://api.github.com/repos/status-im/status-desktop/issues/8711",
    "id": 1344170707,
    "node_id": "IC_kwDOD5KrTM5QHmrT",
    "user": {
      "login": "caybro",
      "id": 5377645,
      "node_id": "MDQ6VXNlcjUzNzc2NDU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5377645?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/caybro",
      "html_url": "https://github.com/caybro",
      "followers_url": "https://api.github.com/users/caybro/followers",
      "following_url": "https://api.github.com/users/caybro/following{/other_user}",
      "gists_url": "https://api.github.com/users/caybro/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/caybro/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/caybro/subscriptions",
      "organizations_url": "https://api.github.com/users/caybro/orgs",
      "repos_url": "https://api.github.com/users/caybro/repos",
      "events_url": "https://api.github.com/users/caybro/events{/privacy}",
      "received_events_url": "https://api.github.com/users/caybro/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-12-09T11:09:37Z",
    "updated_at": "2022-12-09T11:09:37Z",
    "author_association": "MEMBER",
    "body": "Wow, nice stuff, we have our own little GammaRay :) I like it how you immediately showed the Community Portal being broken :)\r\n\r\n> From technical perspective one of the challenges is to dissect production version which should not (probably) contain monitoring functionality and the local setup with the monitoring enabled.\r\n\r\nNIM already does distinguish between `production` and other build types (I believe this is exposed to our main.qml already)",
    "reactions": {
      "url": "https://api.github.com/repos/status-im/status-desktop/issues/comments/1344170707/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/status-im/status-desktop/issues/comments/1344186765",
    "html_url": "https://github.com/status-im/status-desktop/issues/8711#issuecomment-1344186765",
    "issue_url": "https://api.github.com/repos/status-im/status-desktop/issues/8711",
    "id": 1344186765,
    "node_id": "IC_kwDOD5KrTM5QHqmN",
    "user": {
      "login": "micieslak",
      "id": 20650004,
      "node_id": "MDQ6VXNlcjIwNjUwMDA0",
      "avatar_url": "https://avatars.githubusercontent.com/u/20650004?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/micieslak",
      "html_url": "https://github.com/micieslak",
      "followers_url": "https://api.github.com/users/micieslak/followers",
      "following_url": "https://api.github.com/users/micieslak/following{/other_user}",
      "gists_url": "https://api.github.com/users/micieslak/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/micieslak/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/micieslak/subscriptions",
      "organizations_url": "https://api.github.com/users/micieslak/orgs",
      "repos_url": "https://api.github.com/users/micieslak/repos",
      "events_url": "https://api.github.com/users/micieslak/events{/privacy}",
      "received_events_url": "https://api.github.com/users/micieslak/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-12-09T11:23:35Z",
    "updated_at": "2022-12-09T11:23:35Z",
    "author_association": "MEMBER",
    "body": "> NIM already does distinguish between production and other build types (I believe this is exposed to our main.qml already)\r\n\r\nThat's good news. Additionally I would need to add conditionally some utilities to `DOtherSide`. Things for basic inspection, e.g. taking names of all injected context properties, role names of models and so on.",
    "reactions": {
      "url": "https://api.github.com/repos/status-im/status-desktop/issues/comments/1344186765/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/status-im/status-desktop/issues/comments/1344191881",
    "html_url": "https://github.com/status-im/status-desktop/issues/8711#issuecomment-1344191881",
    "issue_url": "https://api.github.com/repos/status-im/status-desktop/issues/8711",
    "id": 1344191881,
    "node_id": "IC_kwDOD5KrTM5QHr2J",
    "user": {
      "login": "caybro",
      "id": 5377645,
      "node_id": "MDQ6VXNlcjUzNzc2NDU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5377645?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/caybro",
      "html_url": "https://github.com/caybro",
      "followers_url": "https://api.github.com/users/caybro/followers",
      "following_url": "https://api.github.com/users/caybro/following{/other_user}",
      "gists_url": "https://api.github.com/users/caybro/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/caybro/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/caybro/subscriptions",
      "organizations_url": "https://api.github.com/users/caybro/orgs",
      "repos_url": "https://api.github.com/users/caybro/repos",
      "events_url": "https://api.github.com/users/caybro/events{/privacy}",
      "received_events_url": "https://api.github.com/users/caybro/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-12-09T11:29:09Z",
    "updated_at": "2022-12-09T11:29:09Z",
    "author_association": "MEMBER",
    "body": "> > NIM already does distinguish between production and other build types (I believe this is exposed to our main.qml already)\r\n> \r\n> That's good news. Additionally I would need to add conditionally some utilities to `DOtherSide`. Things for basic inspection, e.g. taking names of all injected context properties, role names of models and so on.\r\n\r\n```qml\r\nSystemTrayIcon {\r\n        id: systemTray\r\n        visible: true\r\n        icon.source: {\r\n            if (production) {\r\n...\r\n```\r\n\r\nmain.qml ^^",
    "reactions": {
      "url": "https://api.github.com/repos/status-im/status-desktop/issues/comments/1344191881/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/status-im/status-desktop/issues/comments/1344233504",
    "html_url": "https://github.com/status-im/status-desktop/issues/8711#issuecomment-1344233504",
    "issue_url": "https://api.github.com/repos/status-im/status-desktop/issues/8711",
    "id": 1344233504,
    "node_id": "IC_kwDOD5KrTM5QH2Ag",
    "user": {
      "login": "micieslak",
      "id": 20650004,
      "node_id": "MDQ6VXNlcjIwNjUwMDA0",
      "avatar_url": "https://avatars.githubusercontent.com/u/20650004?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/micieslak",
      "html_url": "https://github.com/micieslak",
      "followers_url": "https://api.github.com/users/micieslak/followers",
      "following_url": "https://api.github.com/users/micieslak/following{/other_user}",
      "gists_url": "https://api.github.com/users/micieslak/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/micieslak/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/micieslak/subscriptions",
      "organizations_url": "https://api.github.com/users/micieslak/orgs",
      "repos_url": "https://api.github.com/users/micieslak/repos",
      "events_url": "https://api.github.com/users/micieslak/events{/privacy}",
      "received_events_url": "https://api.github.com/users/micieslak/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-12-09T12:12:41Z",
    "updated_at": "2022-12-09T12:12:41Z",
    "author_association": "MEMBER",
    "body": "> I like it how you immediately showed the Community Portal being broken :)\r\n\r\n@caybro It's funny. Generally the problem is known from storybook (Settings -> Load pages asynchronously must be on). In the app the layout is ok. But adding\r\n```\r\n    ApplicationWindow {\r\n        width: 100\r\n        height: 100\r\n        visible: true\r\n    }\r\n ```\r\non the end of `ui/main.qml` makes the bug visible also in the app :laughing: ",
    "reactions": {
      "url": "https://api.github.com/repos/status-im/status-desktop/issues/comments/1344233504/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/status-im/status-desktop/issues/comments/1344329411",
    "html_url": "https://github.com/status-im/status-desktop/issues/8711#issuecomment-1344329411",
    "issue_url": "https://api.github.com/repos/status-im/status-desktop/issues/8711",
    "id": 1344329411,
    "node_id": "IC_kwDOD5KrTM5QINbD",
    "user": {
      "login": "alexjba",
      "id": 47811206,
      "node_id": "MDQ6VXNlcjQ3ODExMjA2",
      "avatar_url": "https://avatars.githubusercontent.com/u/47811206?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/alexjba",
      "html_url": "https://github.com/alexjba",
      "followers_url": "https://api.github.com/users/alexjba/followers",
      "following_url": "https://api.github.com/users/alexjba/following{/other_user}",
      "gists_url": "https://api.github.com/users/alexjba/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/alexjba/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/alexjba/subscriptions",
      "organizations_url": "https://api.github.com/users/alexjba/orgs",
      "repos_url": "https://api.github.com/users/alexjba/repos",
      "events_url": "https://api.github.com/users/alexjba/events{/privacy}",
      "received_events_url": "https://api.github.com/users/alexjba/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-12-09T13:47:23Z",
    "updated_at": "2022-12-09T13:47:23Z",
    "author_association": "CONTRIBUTOR",
    "body": "Wow, really nice!! 👍 \r\nI think it has lots of potential! We could add preconfigured monitoring for some backend modules and models and have an overview out of the box when working with them.\r\n\r\nWe could even configure it for data snapshots. This might help to quickly distinguish between a UI bugs and backend bugs. I've seen such tools on other products when you want to log bugs. Ex: before logging in a bug you need to activate the monitoring tool that will collect logs and create data snapshots for the app data.\r\n\r\nOne thing I would consider regarding production builds is not to add it in the rcc if we don't need it in production (I've seen that the .rcc is already polluted with unneeded data like qml tests)",
    "reactions": {
      "url": "https://api.github.com/repos/status-im/status-desktop/issues/comments/1344329411/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/status-im/status-desktop/issues/comments/1344343978",
    "html_url": "https://github.com/status-im/status-desktop/issues/8711#issuecomment-1344343978",
    "issue_url": "https://api.github.com/repos/status-im/status-desktop/issues/8711",
    "id": 1344343978,
    "node_id": "IC_kwDOD5KrTM5QIQ-q",
    "user": {
      "login": "micieslak",
      "id": 20650004,
      "node_id": "MDQ6VXNlcjIwNjUwMDA0",
      "avatar_url": "https://avatars.githubusercontent.com/u/20650004?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/micieslak",
      "html_url": "https://github.com/micieslak",
      "followers_url": "https://api.github.com/users/micieslak/followers",
      "following_url": "https://api.github.com/users/micieslak/following{/other_user}",
      "gists_url": "https://api.github.com/users/micieslak/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/micieslak/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/micieslak/subscriptions",
      "organizations_url": "https://api.github.com/users/micieslak/orgs",
      "repos_url": "https://api.github.com/users/micieslak/repos",
      "events_url": "https://api.github.com/users/micieslak/events{/privacy}",
      "received_events_url": "https://api.github.com/users/micieslak/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-12-09T14:01:40Z",
    "updated_at": "2022-12-09T14:01:40Z",
    "author_association": "MEMBER",
    "body": "Thank @alexjba for your feedback.\r\n\r\n> We could even configure it for data snapshots. This might help to quickly distinguish between a UI bugs and backend bugs. I've seen such tools on other products when you want to log bugs. Ex: before logging in a bug you need to activate the monitoring tool that will collect logs and create data snapshots for the app data.\r\n\r\nYeah, it's possible, but probably right now we are quite far from such possibility in terms of architecture ;) Especially assuming that we want to have possibility to \"replay\" the app on the snapshot.\r\n\r\n> One thing I would consider regarding production builds is not to add it in the rcc if we don't need it in production (I've seen that the .rcc is already polluted with unneeded data like qml tests)\r\n\r\nYeah, I'd like to avoid polluting prod build in any way. Unfortunately our custom build script is not easily configurable (at least if we want to do it in elegant way ;)).",
    "reactions": {
      "url": "https://api.github.com/repos/status-im/status-desktop/issues/comments/1344343978/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/status-im/status-desktop/issues/comments/1344438693",
    "html_url": "https://github.com/status-im/status-desktop/issues/8711#issuecomment-1344438693",
    "issue_url": "https://api.github.com/repos/status-im/status-desktop/issues/8711",
    "id": 1344438693,
    "node_id": "IC_kwDOD5KrTM5QIoGl",
    "user": {
      "login": "osmaczko",
      "id": 33099791,
      "node_id": "MDQ6VXNlcjMzMDk5Nzkx",
      "avatar_url": "https://avatars.githubusercontent.com/u/33099791?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/osmaczko",
      "html_url": "https://github.com/osmaczko",
      "followers_url": "https://api.github.com/users/osmaczko/followers",
      "following_url": "https://api.github.com/users/osmaczko/following{/other_user}",
      "gists_url": "https://api.github.com/users/osmaczko/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/osmaczko/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/osmaczko/subscriptions",
      "organizations_url": "https://api.github.com/users/osmaczko/orgs",
      "repos_url": "https://api.github.com/users/osmaczko/repos",
      "events_url": "https://api.github.com/users/osmaczko/events{/privacy}",
      "received_events_url": "https://api.github.com/users/osmaczko/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-12-09T15:21:33Z",
    "updated_at": "2022-12-09T15:21:33Z",
    "author_association": "CONTRIBUTOR",
    "body": "Brilliant idea. I can see it as very useful. The great thing about it compared to GammaRay is that it could also be used as a simulator, as in your example video where you opened a backup seed phrase popup.\r\n\r\n> poor support from external tools, in e.g. GammaRay context properties internals are not available (probably bc they come from NIM)\r\n\r\nAt the end of the day, it is DOtherSide (C++) that exposes all the properties and stuff. From GammaRay perspective, there should be no difference, same as there is no difference for qmlengine to handle models and signals that come from nim. Although I have no idea why the inspection of the models doesn't work with status-client. We would need to investigate what's going on in some simple examples based purely on NimQML.\r\n\r\n> From technical perspective one of the challenges is to dissect production version which should not (probably) contain monitoring functionality and the local setup with the monitoring enabled.\r\n\r\nWe should definitely keep it away from the production version. Technically, I think it should be implemented as a plugin in DOtherSide rather than something polluting production code (e.g. debug ApplicationWindow instantiated in main.qml).\r\n\r\nI can imagine it as follows:\r\n\r\nSomeProductionComponentWeWantToInspect.qml\r\n```qml\r\nimport QtQuick 2.14\r\nimport AllOtherImportsWeNeedHere 0.1\r\n...\r\nimport DotherSide.Inspector 0.1\r\nItem {\r\n    id: root\r\n    ...\r\n    ...\r\n    ...\r\n    Inspector {\r\n        sourceComponent: Item {\r\n            Button { onClicked: console.debug(root.somePropertyWeWantToInvestigate) }\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nand in DOtherSide.cpp\r\n```cpp\r\nvoid register_meta_types() {\r\n    ...\r\n#ifdef QML_INSPECTOR\r\n    Inspector::registerTypes();\r\n#endif\r\n}\r\n```\r\n`QML_INSPECTOR` should be false for production builds, this way we ensure no one will commit Inspector code by mistake (we may want to use import checker the same way as we do for StatusQ).\r\n\r\nWith this approach we can:\r\n- instantiate inspectors wherever we want, which will give us the ability to inject inspectors in every possible context\r\n- instantiate as many inspectors as we want, which will give us the ability to simulate different parts of the apps in a clean way\r\n- keep production code unaffected\r\n\r\nThe one cons I see is the lack of auto hot reloading, but the Inspector window may come with a convenient reload button.",
    "reactions": {
      "url": "https://api.github.com/repos/status-im/status-desktop/issues/comments/1344438693/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/status-im/status-desktop/issues/comments/1344509494",
    "html_url": "https://github.com/status-im/status-desktop/issues/8711#issuecomment-1344509494",
    "issue_url": "https://api.github.com/repos/status-im/status-desktop/issues/8711",
    "id": 1344509494,
    "node_id": "IC_kwDOD5KrTM5QI5Y2",
    "user": {
      "login": "micieslak",
      "id": 20650004,
      "node_id": "MDQ6VXNlcjIwNjUwMDA0",
      "avatar_url": "https://avatars.githubusercontent.com/u/20650004?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/micieslak",
      "html_url": "https://github.com/micieslak",
      "followers_url": "https://api.github.com/users/micieslak/followers",
      "following_url": "https://api.github.com/users/micieslak/following{/other_user}",
      "gists_url": "https://api.github.com/users/micieslak/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/micieslak/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/micieslak/subscriptions",
      "organizations_url": "https://api.github.com/users/micieslak/orgs",
      "repos_url": "https://api.github.com/users/micieslak/repos",
      "events_url": "https://api.github.com/users/micieslak/events{/privacy}",
      "received_events_url": "https://api.github.com/users/micieslak/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-12-09T16:27:08Z",
    "updated_at": "2022-12-09T16:27:08Z",
    "author_association": "MEMBER",
    "body": "> At the end of the day, it is DOtherSide (C++) that exposes all the properties and stuff. From GammaRay perspective, there should be no difference, same as there is no difference for qmlengine to handle models and signals that come from nim. Although I have no idea why the inspection of the models doesn't work with status-client. We would need to investigate what's going on in some simple examples based purely on NimQML.\r\n\r\nYeah, generally it works that way. And GammaRay is running with the app, most functionality works as expected, but it tends to crash on some actions. The problem is that GammaRay doesn't rely exclusively on Qt's public API. It relies also on private API of specific versions of Qt. It may lead to problems bc nim's implementation ca break some of those assumptions.\r\n\r\n> We should definitely keep it away from the production version. Technically, I think it should be implemented as a plugin in DOtherSide rather than something polluting production code (e.g. debug ApplicationWindow instantiated in main.qml).\r\n\r\nYeah, that's the plan to keep it separated. But frankly speaking I don't follow the idea with `import DotherSide.Inspector 0.1`. The initially described/presented functionality can be done without touching app's qml code at all. What we need is a pointer to QQmlEngine. It should be enough to track injected context properties, models and also interacting with the running app.",
    "reactions": {
      "url": "https://api.github.com/repos/status-im/status-desktop/issues/comments/1344509494/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/status-im/status-desktop/issues/comments/1344532488",
    "html_url": "https://github.com/status-im/status-desktop/issues/8711#issuecomment-1344532488",
    "issue_url": "https://api.github.com/repos/status-im/status-desktop/issues/8711",
    "id": 1344532488,
    "node_id": "IC_kwDOD5KrTM5QI_AI",
    "user": {
      "login": "osmaczko",
      "id": 33099791,
      "node_id": "MDQ6VXNlcjMzMDk5Nzkx",
      "avatar_url": "https://avatars.githubusercontent.com/u/33099791?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/osmaczko",
      "html_url": "https://github.com/osmaczko",
      "followers_url": "https://api.github.com/users/osmaczko/followers",
      "following_url": "https://api.github.com/users/osmaczko/following{/other_user}",
      "gists_url": "https://api.github.com/users/osmaczko/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/osmaczko/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/osmaczko/subscriptions",
      "organizations_url": "https://api.github.com/users/osmaczko/orgs",
      "repos_url": "https://api.github.com/users/osmaczko/repos",
      "events_url": "https://api.github.com/users/osmaczko/events{/privacy}",
      "received_events_url": "https://api.github.com/users/osmaczko/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-12-09T16:52:17Z",
    "updated_at": "2022-12-09T16:52:17Z",
    "author_association": "CONTRIBUTOR",
    "body": "> Yeah, that's the plan to keep it separated. But frankly speaking I don't follow the idea with `import DotherSide.Inspector 0.1`. The initially described/presented functionality can be done without touching app's qml code at all. What we need is a pointer to QQmlEngine. It should be enough to track injected context properties, models and also interacting with the running app.\r\n\r\nI assumed the solution touches prod qml files based on that comment: https://github.com/status-im/status-desktop/issues/8711#issuecomment-1344233504 and so I blindly came up with the reusable Inspector solution, which also has a drawback of touching prod qml files.\r\n\r\nYes, you are right, creating an Inspector window instance in the backend using the app's `QQmlEngine` is a much better idea.",
    "reactions": {
      "url": "https://api.github.com/repos/status-im/status-desktop/issues/comments/1344532488/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/status-im/status-desktop/issues/comments/1346792299",
    "html_url": "https://github.com/status-im/status-desktop/issues/8711#issuecomment-1346792299",
    "issue_url": "https://api.github.com/repos/status-im/status-desktop/issues/8711",
    "id": 1346792299,
    "node_id": "IC_kwDOD5KrTM5QRmtr",
    "user": {
      "login": "alexandraB99",
      "id": 31625338,
      "node_id": "MDQ6VXNlcjMxNjI1MzM4",
      "avatar_url": "https://avatars.githubusercontent.com/u/31625338?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/alexandraB99",
      "html_url": "https://github.com/alexandraB99",
      "followers_url": "https://api.github.com/users/alexandraB99/followers",
      "following_url": "https://api.github.com/users/alexandraB99/following{/other_user}",
      "gists_url": "https://api.github.com/users/alexandraB99/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/alexandraB99/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/alexandraB99/subscriptions",
      "organizations_url": "https://api.github.com/users/alexandraB99/orgs",
      "repos_url": "https://api.github.com/users/alexandraB99/repos",
      "events_url": "https://api.github.com/users/alexandraB99/events{/privacy}",
      "received_events_url": "https://api.github.com/users/alexandraB99/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-12-12T16:02:52Z",
    "updated_at": "2022-12-12T16:02:52Z",
    "author_association": "COLLABORATOR",
    "body": "good stuff @micieslak thanks for looking into this!",
    "reactions": {
      "url": "https://api.github.com/repos/status-im/status-desktop/issues/comments/1346792299/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/status-im/status-desktop/issues/comments/1351298988",
    "html_url": "https://github.com/status-im/status-desktop/issues/8711#issuecomment-1351298988",
    "issue_url": "https://api.github.com/repos/status-im/status-desktop/issues/8711",
    "id": 1351298988,
    "node_id": "IC_kwDOD5KrTM5Qiy-s",
    "user": {
      "login": "micieslak",
      "id": 20650004,
      "node_id": "MDQ6VXNlcjIwNjUwMDA0",
      "avatar_url": "https://avatars.githubusercontent.com/u/20650004?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/micieslak",
      "html_url": "https://github.com/micieslak",
      "followers_url": "https://api.github.com/users/micieslak/followers",
      "following_url": "https://api.github.com/users/micieslak/following{/other_user}",
      "gists_url": "https://api.github.com/users/micieslak/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/micieslak/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/micieslak/subscriptions",
      "organizations_url": "https://api.github.com/users/micieslak/orgs",
      "repos_url": "https://api.github.com/users/micieslak/repos",
      "events_url": "https://api.github.com/users/micieslak/events{/privacy}",
      "received_events_url": "https://api.github.com/users/micieslak/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-12-14T12:53:31Z",
    "updated_at": "2022-12-14T12:53:31Z",
    "author_association": "MEMBER",
    "body": "Thank you for discussion! As the follow up there are is a set of initial tasks related to that functionality:\r\nhttps://github.com/status-im/status-desktop/issues/8786\r\nhttps://github.com/status-im/status-desktop/issues/8787\r\nhttps://github.com/status-im/status-desktop/issues/8790",
    "reactions": {
      "url": "https://api.github.com/repos/status-im/status-desktop/issues/comments/1351298988/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
