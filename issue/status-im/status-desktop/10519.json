{
  "url": "https://api.github.com/repos/status-im/status-desktop/issues/10519",
  "repository_url": "https://api.github.com/repos/status-im/status-desktop",
  "labels_url": "https://api.github.com/repos/status-im/status-desktop/issues/10519/labels{/name}",
  "comments_url": "https://api.github.com/repos/status-im/status-desktop/issues/10519/comments",
  "events_url": "https://api.github.com/repos/status-im/status-desktop/issues/10519/events",
  "html_url": "https://github.com/status-im/status-desktop/issues/10519",
  "id": 1692648089,
  "node_id": "I_kwDOD5KrTM5k48KZ",
  "number": 10519,
  "title": "[Community Permissions] Figure out how to handle admin edits without the community private key",
  "user": {
    "login": "jrainville",
    "id": 11926403,
    "node_id": "MDQ6VXNlcjExOTI2NDAz",
    "avatar_url": "https://avatars.githubusercontent.com/u/11926403?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jrainville",
    "html_url": "https://github.com/jrainville",
    "followers_url": "https://api.github.com/users/jrainville/followers",
    "following_url": "https://api.github.com/users/jrainville/following{/other_user}",
    "gists_url": "https://api.github.com/users/jrainville/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jrainville/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jrainville/subscriptions",
    "organizations_url": "https://api.github.com/users/jrainville/orgs",
    "repos_url": "https://api.github.com/users/jrainville/repos",
    "events_url": "https://api.github.com/users/jrainville/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jrainville/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 2588688093,
      "node_id": "MDU6TGFiZWwyNTg4Njg4MDkz",
      "url": "https://api.github.com/repos/status-im/status-desktop/labels/Communities",
      "name": "Communities",
      "color": "3923e0",
      "default": false,
      "description": ""
    },
    {
      "id": 2987757762,
      "node_id": "MDU6TGFiZWwyOTg3NzU3NzYy",
      "url": "https://api.github.com/repos/status-im/status-desktop/labels/to%20analyze",
      "name": "to analyze",
      "color": "5CC421",
      "default": false,
      "description": ""
    },
    {
      "id": 3047427135,
      "node_id": "MDU6TGFiZWwzMDQ3NDI3MTM1",
      "url": "https://api.github.com/repos/status-im/status-desktop/labels/feature",
      "name": "feature",
      "color": "0E8A16",
      "default": false,
      "description": ""
    },
    {
      "id": 3955125927,
      "node_id": "LA_kwDOD5KrTM7rvm6n",
      "url": "https://api.github.com/repos/status-im/status-desktop/labels/E:Communities",
      "name": "E:Communities",
      "color": "E56631",
      "default": false,
      "description": ""
    },
    {
      "id": 4548141040,
      "node_id": "LA_kwDOD5KrTM8AAAABDxcf8A",
      "url": "https://api.github.com/repos/status-im/status-desktop/labels/messenger-team",
      "name": "messenger-team",
      "color": "232858",
      "default": false,
      "description": ""
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": {
    "url": "https://api.github.com/repos/status-im/status-desktop/milestones/64",
    "html_url": "https://github.com/status-im/status-desktop/milestone/64",
    "labels_url": "https://api.github.com/repos/status-im/status-desktop/milestones/64/labels",
    "id": 9039503,
    "node_id": "MI_kwDOD5KrTM4Aie6P",
    "number": 64,
    "title": "0.13",
    "description": "Priorities **in priority order** for the 0.13 milestone:\r\n\r\n**1. Finish items started in 0.12**\r\n- Complete any outstanding issues related to pairing (for syncing) - Igor\r\n- Implement the 'Admin' role (issue #10114) - Mykhailo\r\n- 'Featured' category curation via curation dApp - Patryk\r\n- Any remaining work to pay off tech. debt related to mutual contacts - Mishka\r\n- When creating/editing token based permission, ability to search for and selecting Collectables from OpenSea - MichaelC\r\n\r\n**2. Channel token permissions**\r\n- Create, edit and delete channel token permissions in the permissions admin screens\r\n- This includes the \"no tokens required to view this channel\" permission\r\n- All user facing channel token permissions functionality e.g. what happens when a user tries to access a token gated channel they don't have the required tokens to access, what happens when a user only has permissions to view a channel, etc...\r\n- If a community is an open (not token gated at the community level) community, if a channel is token gated AND if **no** \"no tokens required to view this channel\" permission for that channel exists, then the channel should be automatically encrypted.  If token gating is removed from a channel, the channel should become unencrypted.\r\n- Asset (ERC-20) minting and airdropping functionality - GravityBlast\r\n\r\n**3. Add some type of cache in front of sqlite to ensure that writes don't block reads (Patryk?)**\r\n- It has been discovered that one of the causes of sometimes slow channel switching is that writes to sqlite block reads, and this is the cause of slow channel switching in many cases\r\n- Investigate the feasibility of (and if feasible implement) a general purpose cache for sqlite writes, which caches sqlite writes and then only writes them to sqlite in small chunks when no read operations are taking place (so that read operations are always prioritized, and not interrupted by writes).  Such a cache should cache all or almost all write requests from all areas of status-go\r\n\r\n**_OR_**\r\n\r\n- Perhaps it's time to bite the bullet and start the work needed to migrate both Status Desktop and Status Mobile from using sqlite to using PostgreSQL?\r\n\r\n**_OR_**\r\n\r\n- Perhaps there are some other possible solutions to this issue that should be explored before embarking on either of these large items?\r\n\r\n**4. Update app to use new 'Share URL' formats**\r\n- add functionality to status-go to generate the new 'Share URL' formats for sharing links to: User Profiles, Communities, Channel inside a Community\r\n- Update everywhere a user can share a URL from to use the new URL format\r\n- Ability to share a URL that points to a specific channel in a community (issue #10160)\r\n- Update all address inputs to accept a user pasting a 'share URL' into the input (in addition to being able to input the raw address).  This includes: Start new chat input, send contact request input in Settings, the import community key input, etc...\r\n- Update Status Desktops URL handler so that if Status is installed on a computer, when a user clicks on a Status 'Share URL' the app is launched (if not already running) and after signing in the user is automatically taken to the entity the Share URL represented inside the app.  e.g. if a user clicks on a URL for a Status Community, the user should be taken to the home screen for that community inside the Status App\r\n\r\n**5. Profile showcase backend***\r\n\r\n**6. Fix bugs, bugs and more bugs!**\r\n- The 0.13 release is targeted to be Status Desktop's first \"beta\" release, and the first release of Status Desktop that will be used by people outside of the Status Org.  So we want this release to be the best possible quality so it makes a good first impression  \r\n\r\n\r\n\r\n**--- For the Wallet team ---**\r\n\r\n1. Complete any outstanding development related to the activity screens\r\n2. New settings screens\r\n3. Fix 'backup from waku' bugs\r\n4. Fix keycard bugs\r\n5. Implement 'imported key and account' syncing and transfer between devices\r\n6. Transaction signing dialogue (if designs are ready)\r\n\r\n",
    "creator": {
      "login": "iurimatias",
      "id": 176720,
      "node_id": "MDQ6VXNlcjE3NjcyMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/176720?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/iurimatias",
      "html_url": "https://github.com/iurimatias",
      "followers_url": "https://api.github.com/users/iurimatias/followers",
      "following_url": "https://api.github.com/users/iurimatias/following{/other_user}",
      "gists_url": "https://api.github.com/users/iurimatias/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/iurimatias/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/iurimatias/subscriptions",
      "organizations_url": "https://api.github.com/users/iurimatias/orgs",
      "repos_url": "https://api.github.com/users/iurimatias/repos",
      "events_url": "https://api.github.com/users/iurimatias/events{/privacy}",
      "received_events_url": "https://api.github.com/users/iurimatias/received_events",
      "type": "User",
      "site_admin": false
    },
    "open_issues": 104,
    "closed_issues": 3,
    "state": "open",
    "created_at": "2023-02-13T19:04:13Z",
    "updated_at": "2023-05-02T20:59:24Z",
    "due_on": "2023-06-16T07:00:00Z",
    "closed_at": null
  },
  "comments": 2,
  "created_at": "2023-05-02T15:35:57Z",
  "updated_at": "2023-05-02T16:05:59Z",
  "closed_at": null,
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "## Description\r\n\r\nWhile working on https://github.com/status-im/status-desktop/issues/10114, @mprakhov realized that admins cannot actually modify the community description, because they do not have the community's private key, only the owner does.\r\n\r\nSo we need a way to give them the right to edit the description, kick/ban members, update permissions and all that is in the list, without them having the private key.\r\n\r\n---\r\n\r\n### First option: Have the change requests always hit the Owner node\r\n\r\n As we have it right now, the owner node is already the single source of truth, so using that same mechanism, we could have the admin send any community description change to the owner node directly, ie not processed by users, and then the owner validates that the sender is indeed an admin.\r\nIf they are an admin, update the description and send a \"normal\" community description edit signal that all users will recognize, because it is signed by the community key\r\nIf they are not an admin, the owner just ignores it.\r\n\r\n#### Pros:\r\n- Uses the same \"single point of truth\" mechanism already in place\r\n- Users don't have anything different to do, they still only listen to owner changes only\r\n- More secure as only community descriptions signed by the owner are valid\r\n\r\n#### Cons:\r\n- The admin node has even more responsibility\r\n- The admin are reliant on the owner node being up\r\n  - if the owner is not up, we need to either show a \"waiting\" message or optimistically update, but then have a rollback or something if the change doesn't come in\r\n  - changes can become more unpredictable since two admins can then send similar edits at the same time, but since they are waiting on the owner, they wouldn't know it.\r\n\r\n---\r\n\r\n### Second option: Have change requests be validated by each individual nodes\r\n\r\nWe would update the community description to contain the list of admins. That list would be signed by the community key, so it would be known to be valid.\r\n\r\nThen, when an admin edits a community, they send a new message type that would be something like `community-description-by-admin-updated`.\r\nThose would be accepted by all members of the community (including admins and the owner). They will check if the person that signed the message is part of the admin list of the community.\r\nIf yes, process the update as if it was a normal community description edit from the owner.\r\nIf no, ignore.\r\n\r\n#### Pros:\r\n- Not reliant on the owner being up, so edits would be \"instant\"\r\n- No need for a \"waiting\" UI\r\n\r\n### Cons:\r\n- All users need to do checks on signatures (new code)\r\n- Might be an attack vector, since we now accept description changes that are not signed by the community key\r\n\r\n---\r\n\r\n### Conclusion\r\n\r\nPersonally, I prefer option 2, since it's gonna feel better for users and admins alike.\r\nThe attack vector should be mitigated by the admin list being signed by the community key, but we need to think it through to be sure.\r\n\r\nThere are probably other options. Feel free to add them below and to discuss the options I proposed.\r\n\r\ncc @mprakhov @0x-r4bbit @John-44 @cammellos @iurimatias ",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/status-im/status-desktop/issues/10519/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/status-im/status-desktop/issues/10519/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/status-im/status-desktop/issues/comments/1531713550",
    "html_url": "https://github.com/status-im/status-desktop/issues/10519#issuecomment-1531713550",
    "issue_url": "https://api.github.com/repos/status-im/status-desktop/issues/10519",
    "id": 1531713550,
    "node_id": "IC_kwDOD5KrTM5bTBgO",
    "user": {
      "login": "0x-r4bbit",
      "id": 445106,
      "node_id": "MDQ6VXNlcjQ0NTEwNg==",
      "avatar_url": "https://avatars.githubusercontent.com/u/445106?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/0x-r4bbit",
      "html_url": "https://github.com/0x-r4bbit",
      "followers_url": "https://api.github.com/users/0x-r4bbit/followers",
      "following_url": "https://api.github.com/users/0x-r4bbit/following{/other_user}",
      "gists_url": "https://api.github.com/users/0x-r4bbit/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/0x-r4bbit/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/0x-r4bbit/subscriptions",
      "organizations_url": "https://api.github.com/users/0x-r4bbit/orgs",
      "repos_url": "https://api.github.com/users/0x-r4bbit/repos",
      "events_url": "https://api.github.com/users/0x-r4bbit/events{/privacy}",
      "received_events_url": "https://api.github.com/users/0x-r4bbit/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-05-02T15:51:37Z",
    "updated_at": "2023-05-02T15:51:37Z",
    "author_association": "MEMBER",
    "body": "Some additional thoughts:\r\n\r\n**First Option**:\r\n\r\nAnother downside is that this doubles the amount of messages being sent. Even though admin nodes send a message with a community update that are only processed by the owner, other nodes in the network will still receive the message (and relay it).\r\n\r\n**Second option**:\r\n\r\n> Might be an attack vector, since we now accept description changes that are not signed by the community key\r\n\r\nOne \"attack vector\" I could think of here is that, when someone was removed from the admin list, but that update hasn't made it yet to a member node, and then the member node receives a community description update that is signed by the account that **used to be** an admin. \r\n\r\nThe member node will still process the message as it has an outdated admin list...\r\n\r\nNot sure how to get around that.\r\n\r\n**Option 3**:\r\n\r\nThis is just a variation of Option 2, but I think it's worth mentioning (and I believe @osmaczko brought it up as well)\r\n\r\nInstead of having the CommunityDescription message with an admin list  combined with a new message type signed by an admin key, we could also have a new \"CommunityAdminList\" message and have admins still send normal CommunityDescriptoin messages.\r\n\r\nMember nodes would then use the adminlist signal to update their knowledge of admins and simply check communityDescription on multiple signatures (if necessary).",
    "reactions": {
      "url": "https://api.github.com/repos/status-im/status-desktop/issues/comments/1531713550/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/status-im/status-desktop/issues/comments/1531735492",
    "html_url": "https://github.com/status-im/status-desktop/issues/10519#issuecomment-1531735492",
    "issue_url": "https://api.github.com/repos/status-im/status-desktop/issues/10519",
    "id": 1531735492,
    "node_id": "IC_kwDOD5KrTM5bTG3E",
    "user": {
      "login": "cammellos",
      "id": 1017008,
      "node_id": "MDQ6VXNlcjEwMTcwMDg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1017008?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cammellos",
      "html_url": "https://github.com/cammellos",
      "followers_url": "https://api.github.com/users/cammellos/followers",
      "following_url": "https://api.github.com/users/cammellos/following{/other_user}",
      "gists_url": "https://api.github.com/users/cammellos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cammellos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cammellos/subscriptions",
      "organizations_url": "https://api.github.com/users/cammellos/orgs",
      "repos_url": "https://api.github.com/users/cammellos/repos",
      "events_url": "https://api.github.com/users/cammellos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cammellos/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-05-02T16:05:16Z",
    "updated_at": "2023-05-02T16:05:59Z",
    "author_association": "MEMBER",
    "body": "The way that I thought originally is a mixture of 1 & 2,\r\n\r\nowners sets admin permissions, admins are able to add \"addendums\" (edits), which are processed by clients optimistically (the assumption is that the admin is still an admin, as @0x-r4bbit correctly points out, that might not be the case, but that's a risk the owner has to take).\r\n\r\nThe owner periodically collates those changes and incorporates them in the community description.\r\n\r\nSomething like:\r\n\r\n```\r\nmessage CommunityEdit {\r\n\r\nCommunityDescription description = 1; // This is the latest signed by owner community description\r\nrepeated CommunityDescriptionEdit edits = 2; // This is a list of community description edits signed by the admins\r\n}\r\n```\r\n\r\nThis is propagated from admin directly to community members, community members will validate the community description, and validate the edits against the latest commuintydescription signed by the owner that they have.\r\nIf they pass, they will apply the edits.\r\n\r\n\r\nThe admin will periodically incorporate those changes and publish a CommunityDescription incorporating those changes.\r\n\r\nSomething on those lines it's what I initially thought, so it's a mixture of the private group chats that are completely event based, and communities that are instead always the full projection.\r\n\r\nThere some corner cases and timing issue to address of course, but that's what instinctively I would go for.",
    "reactions": {
      "url": "https://api.github.com/repos/status-im/status-desktop/issues/comments/1531735492/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
