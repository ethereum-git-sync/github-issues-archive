{
  "url": "https://api.github.com/repos/status-im/status-desktop/issues/10094",
  "repository_url": "https://api.github.com/repos/status-im/status-desktop",
  "labels_url": "https://api.github.com/repos/status-im/status-desktop/issues/10094/labels{/name}",
  "comments_url": "https://api.github.com/repos/status-im/status-desktop/issues/10094/comments",
  "events_url": "https://api.github.com/repos/status-im/status-desktop/issues/10094/events",
  "html_url": "https://github.com/status-im/status-desktop/issues/10094",
  "id": 1647961233,
  "node_id": "I_kwDOD5KrTM5iOeSR",
  "number": 10094,
  "title": "[Community permissions] Find a way to mitigate users buying a wallet signature \"attack\"",
  "user": {
    "login": "jrainville",
    "id": 11926403,
    "node_id": "MDQ6VXNlcjExOTI2NDAz",
    "avatar_url": "https://avatars.githubusercontent.com/u/11926403?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jrainville",
    "html_url": "https://github.com/jrainville",
    "followers_url": "https://api.github.com/users/jrainville/followers",
    "following_url": "https://api.github.com/users/jrainville/following{/other_user}",
    "gists_url": "https://api.github.com/users/jrainville/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jrainville/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jrainville/subscriptions",
    "organizations_url": "https://api.github.com/users/jrainville/orgs",
    "repos_url": "https://api.github.com/users/jrainville/repos",
    "events_url": "https://api.github.com/users/jrainville/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jrainville/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 3047427135,
      "node_id": "MDU6TGFiZWwzMDQ3NDI3MTM1",
      "url": "https://api.github.com/repos/status-im/status-desktop/labels/feature",
      "name": "feature",
      "color": "0E8A16",
      "default": false,
      "description": ""
    },
    {
      "id": 4548141040,
      "node_id": "LA_kwDOD5KrTM8AAAABDxcf8A",
      "url": "https://api.github.com/repos/status-im/status-desktop/labels/messenger-team",
      "name": "messenger-team",
      "color": "232858",
      "default": false,
      "description": ""
    },
    {
      "id": 5745629806,
      "node_id": "LA_kwDOD5KrTM8AAAABVndabg",
      "url": "https://api.github.com/repos/status-im/status-desktop/labels/E:Desktop%20Comm%20Perms%20and%20Minting%20MVP",
      "name": "E:Desktop Comm Perms and Minting MVP",
      "color": "c2e0c6",
      "default": false,
      "description": "Misc tasks about Community permissions that are not part of another Epic, due for the MVP"
    },
    {
      "id": 5978035322,
      "node_id": "LA_kwDOD5KrTM8AAAABZFGUeg",
      "url": "https://api.github.com/repos/status-im/status-desktop/labels/E:Desktop%20Security%20Improvements%20MVP",
      "name": "E:Desktop Security Improvements MVP",
      "color": "f9d0c4",
      "default": false,
      "description": "Tasks to improve security for MVP"
    },
    {
      "id": 6176323312,
      "node_id": "LA_kwDOD5KrTM8AAAABcCM28A",
      "url": "https://api.github.com/repos/status-im/status-desktop/labels/E:Desktop%20Bugfixes%200.15.5",
      "name": "E:Desktop Bugfixes 0.15.5",
      "color": "BFE9C3",
      "default": false,
      "description": ""
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [
    {
      "login": "endulab",
      "id": 61889657,
      "node_id": "MDQ6VXNlcjYxODg5NjU3",
      "avatar_url": "https://avatars.githubusercontent.com/u/61889657?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/endulab",
      "html_url": "https://github.com/endulab",
      "followers_url": "https://api.github.com/users/endulab/followers",
      "following_url": "https://api.github.com/users/endulab/following{/other_user}",
      "gists_url": "https://api.github.com/users/endulab/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/endulab/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/endulab/subscriptions",
      "organizations_url": "https://api.github.com/users/endulab/orgs",
      "repos_url": "https://api.github.com/users/endulab/repos",
      "events_url": "https://api.github.com/users/endulab/events{/privacy}",
      "received_events_url": "https://api.github.com/users/endulab/received_events",
      "type": "User",
      "site_admin": false
    }
  ],
  "milestone": {
    "url": "https://api.github.com/repos/status-im/status-desktop/milestones/61",
    "html_url": "https://github.com/status-im/status-desktop/milestone/61",
    "labels_url": "https://api.github.com/repos/status-im/status-desktop/milestones/61/labels",
    "id": 8739485,
    "node_id": "MI_kwDOD5KrTM4AhVqd",
    "number": 61,
    "title": "0.16",
    "description": "**1.  Fix bug and stabilise Communities and Messaging functionality**\r\n\r\n**2.  Reduce size of community description metadata**\r\n- better compressions, less duplication\r\n\r\n**3. Use data sync layer (or other mechanism) to improve community description reliability**\r\n- Every time a new user joins the community, the Control Node updates and signs the description.\r\n- Random back off to stop it being too chatty \r\n\r\n**4. Continue work on profile showcase **\r\n\r\n\r\n\r\n**--- Wallet Team ---**\r\n\r\n1. Complete support for Community minted assets\r\n\r\n2. Complete token visibility management screens\r\n\r\n3. Continue working on WalletConnect support\r\n\r\n4. Minor updates to Asset screens\r\n\r\n5. Continue fixing bugs, making optimisations and keeping tech debt low\r\n\r\n\r\n\r\n\r\n",
    "creator": {
      "login": "iurimatias",
      "id": 176720,
      "node_id": "MDQ6VXNlcjE3NjcyMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/176720?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/iurimatias",
      "html_url": "https://github.com/iurimatias",
      "followers_url": "https://api.github.com/users/iurimatias/followers",
      "following_url": "https://api.github.com/users/iurimatias/following{/other_user}",
      "gists_url": "https://api.github.com/users/iurimatias/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/iurimatias/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/iurimatias/subscriptions",
      "organizations_url": "https://api.github.com/users/iurimatias/orgs",
      "repos_url": "https://api.github.com/users/iurimatias/repos",
      "events_url": "https://api.github.com/users/iurimatias/events{/privacy}",
      "received_events_url": "https://api.github.com/users/iurimatias/received_events",
      "type": "User",
      "site_admin": false
    },
    "open_issues": 156,
    "closed_issues": 104,
    "state": "open",
    "created_at": "2022-12-09T15:06:43Z",
    "updated_at": "2023-12-12T12:25:41Z",
    "due_on": "2024-01-31T08:00:00Z",
    "closed_at": null
  },
  "comments": 12,
  "created_at": "2023-03-30T16:42:07Z",
  "updated_at": "2023-12-12T12:53:19Z",
  "closed_at": null,
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "# Description\r\n\r\nAs discussed in the meeting, it seems like it would be possible for a user that doesn't have access to a community, because they do not possess the required tokens, to just buy/get a wallet signature from someone who does.\r\n\r\nSince the current way to create the signature is that we sign the address with the wallet account, and then sign it with the Status account, thus linking the two, someone could actually cheat and get someone else to create the address wallet signature, get that signature and then sigh it with their own Status account. That would create a fake link between those two.\r\n\r\nWe need to find a way to either limit that or remove that possibility altogether.\r\n\r\nThis ticket is to first investigate a solution and then either close and fix in another issue or fix using this ticket.",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/status-im/status-desktop/issues/10094/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/status-im/status-desktop/issues/10094/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/status-im/status-desktop/issues/comments/1490620785",
    "html_url": "https://github.com/status-im/status-desktop/issues/10094#issuecomment-1490620785",
    "issue_url": "https://api.github.com/repos/status-im/status-desktop/issues/10094",
    "id": 1490620785,
    "node_id": "IC_kwDOD5KrTM5Y2RFx",
    "user": {
      "login": "jrainville",
      "id": 11926403,
      "node_id": "MDQ6VXNlcjExOTI2NDAz",
      "avatar_url": "https://avatars.githubusercontent.com/u/11926403?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jrainville",
      "html_url": "https://github.com/jrainville",
      "followers_url": "https://api.github.com/users/jrainville/followers",
      "following_url": "https://api.github.com/users/jrainville/following{/other_user}",
      "gists_url": "https://api.github.com/users/jrainville/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jrainville/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jrainville/subscriptions",
      "organizations_url": "https://api.github.com/users/jrainville/orgs",
      "repos_url": "https://api.github.com/users/jrainville/repos",
      "events_url": "https://api.github.com/users/jrainville/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jrainville/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-03-30T16:50:39Z",
    "updated_at": "2023-03-30T16:50:39Z",
    "author_association": "MEMBER",
    "body": "Some brainstorm ideas, let me know if I'm saying anything that is not doable:\r\n\r\n1. Add a timestamp to both signatures and the timestamps need to be within X seconds for it to be valid (let's say 5 seconds?)\r\n    - Maybe it's still possible to fake the timestamp inside the wallet address signature, but it does seem harder to get  a \"fake\" wallet signature without the \"attackers\" having an actual software to do it for them.\r\n2. Find a way to sign at the same time with both keys\r\n    - I have no idea if this exists, but some smart cryptography expert probably has thought of something like that before\r\n    - Basically, if we had a signature method that takes both keys at the same time to create a single signature, it would solve the problem.\r\n    - I'm not sure if it's safe or doable to do on our side, but since status-go has access to all keystores, it should be doable.\r\n3. What was proposed was to limit the number of times an address can be used (validated by the owner)\r\n    - This is not great, because it's very possible that someone would have multiple Status accounts and import the same wallet address in them, so we can't just block the re-using of the same address, so any limit we use would be arbitrary\r\n    - It still would work to mitigate the problem slightly\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/status-im/status-desktop/issues/comments/1490620785/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/status-im/status-desktop/issues/comments/1491667853",
    "html_url": "https://github.com/status-im/status-desktop/issues/10094#issuecomment-1491667853",
    "issue_url": "https://api.github.com/repos/status-im/status-desktop/issues/10094",
    "id": 1491667853,
    "node_id": "IC_kwDOD5KrTM5Y6QuN",
    "user": {
      "login": "osmaczko",
      "id": 33099791,
      "node_id": "MDQ6VXNlcjMzMDk5Nzkx",
      "avatar_url": "https://avatars.githubusercontent.com/u/33099791?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/osmaczko",
      "html_url": "https://github.com/osmaczko",
      "followers_url": "https://api.github.com/users/osmaczko/followers",
      "following_url": "https://api.github.com/users/osmaczko/following{/other_user}",
      "gists_url": "https://api.github.com/users/osmaczko/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/osmaczko/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/osmaczko/subscriptions",
      "organizations_url": "https://api.github.com/users/osmaczko/orgs",
      "repos_url": "https://api.github.com/users/osmaczko/repos",
      "events_url": "https://api.github.com/users/osmaczko/events{/privacy}",
      "received_events_url": "https://api.github.com/users/osmaczko/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-03-31T10:03:21Z",
    "updated_at": "2023-03-31T10:04:22Z",
    "author_association": "CONTRIBUTOR",
    "body": "Interesting problem.\r\n\r\n> 2. Find a way to sign at the same time with both keys\r\n>    \r\n>    * I have no idea if this exists, but some smart cryptography expert probably has thought of something like that before\r\n>    * Basically, if we had a signature method that takes both keys at the same time to create a single signature, it would solve the problem.\r\n>    * I'm not sure if it's safe or doable to do on our side, but since status-go has access to all keystores, it should be doable.\r\n\r\nThis would be best. I did quick research and found this: https://github.com/hbakhtiyor/schnorr/#aggregatesignaturesprivatekeys-bigint-message-32byte-64byte-error. Although, I am not sure [how it works with secp256k1 keys](https://github.com/bitcoin/bips/blob/master/bip-0340.mediawiki).\r\n\r\n![image](https://user-images.githubusercontent.com/33099791/229090479-6f86b9c7-2b80-4f12-b815-120863405875.png)\r\n\r\nFrom my understanding with Schnorr signatures, you can create a combined signature that requires both the wallet and Status account keys simultaneously.",
    "reactions": {
      "url": "https://api.github.com/repos/status-im/status-desktop/issues/comments/1491667853/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/status-im/status-desktop/issues/comments/1491673459",
    "html_url": "https://github.com/status-im/status-desktop/issues/10094#issuecomment-1491673459",
    "issue_url": "https://api.github.com/repos/status-im/status-desktop/issues/10094",
    "id": 1491673459,
    "node_id": "IC_kwDOD5KrTM5Y6SFz",
    "user": {
      "login": "caybro",
      "id": 5377645,
      "node_id": "MDQ6VXNlcjUzNzc2NDU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5377645?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/caybro",
      "html_url": "https://github.com/caybro",
      "followers_url": "https://api.github.com/users/caybro/followers",
      "following_url": "https://api.github.com/users/caybro/following{/other_user}",
      "gists_url": "https://api.github.com/users/caybro/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/caybro/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/caybro/subscriptions",
      "organizations_url": "https://api.github.com/users/caybro/orgs",
      "repos_url": "https://api.github.com/users/caybro/repos",
      "events_url": "https://api.github.com/users/caybro/events{/privacy}",
      "received_events_url": "https://api.github.com/users/caybro/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-03-31T10:07:25Z",
    "updated_at": "2023-03-31T10:07:25Z",
    "author_association": "MEMBER",
    "body": "> Interesting problem.\r\n> \r\n> > 2. Find a way to sign at the same time with both keys\r\n> >    \r\n> >    * I have no idea if this exists, but some smart cryptography expert probably has thought of something like that before\r\n> >    * Basically, if we had a signature method that takes both keys at the same time to create a single signature, it would solve the problem.\r\n> >    * I'm not sure if it's safe or doable to do on our side, but since status-go has access to all keystores, it should be doable.\r\n> \r\n> This would be best. I did quick research and found this: https://github.com/hbakhtiyor/schnorr/#aggregatesignaturesprivatekeys-bigint-message-32byte-64byte-error. Although, I am not sure [how it works with secp256k1 keys](https://github.com/bitcoin/bips/blob/master/bip-0340.mediawiki).\r\n\r\nThe very first line says:\r\n> This is a Go implementation of the standard 64-byte Schnorr signature scheme over the elliptic curve secp256k1.",
    "reactions": {
      "url": "https://api.github.com/repos/status-im/status-desktop/issues/comments/1491673459/reactions",
      "total_count": 2,
      "+1": 0,
      "-1": 0,
      "laugh": 2,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/status-im/status-desktop/issues/comments/1492094328",
    "html_url": "https://github.com/status-im/status-desktop/issues/10094#issuecomment-1492094328",
    "issue_url": "https://api.github.com/repos/status-im/status-desktop/issues/10094",
    "id": 1492094328,
    "node_id": "IC_kwDOD5KrTM5Y7414",
    "user": {
      "login": "jrainville",
      "id": 11926403,
      "node_id": "MDQ6VXNlcjExOTI2NDAz",
      "avatar_url": "https://avatars.githubusercontent.com/u/11926403?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jrainville",
      "html_url": "https://github.com/jrainville",
      "followers_url": "https://api.github.com/users/jrainville/followers",
      "following_url": "https://api.github.com/users/jrainville/following{/other_user}",
      "gists_url": "https://api.github.com/users/jrainville/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jrainville/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jrainville/subscriptions",
      "organizations_url": "https://api.github.com/users/jrainville/orgs",
      "repos_url": "https://api.github.com/users/jrainville/repos",
      "events_url": "https://api.github.com/users/jrainville/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jrainville/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-03-31T15:13:22Z",
    "updated_at": "2023-03-31T15:13:22Z",
    "author_association": "MEMBER",
    "body": "I read the doc on that library and it seems like what we need. It would totally fix the attack vector we have. I'll wait to start implementation on this until more people can think it through and see if there are maybe edge cases we didn't consider. Also, it's not necessary for the RC.",
    "reactions": {
      "url": "https://api.github.com/repos/status-im/status-desktop/issues/comments/1492094328/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 1,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/status-im/status-desktop/issues/comments/1850227242",
    "html_url": "https://github.com/status-im/status-desktop/issues/10094#issuecomment-1850227242",
    "issue_url": "https://api.github.com/repos/status-im/status-desktop/issues/10094",
    "id": 1850227242,
    "node_id": "IC_kwDOD5KrTM5uSDoq",
    "user": {
      "login": "saledjenic",
      "id": 86303051,
      "node_id": "MDQ6VXNlcjg2MzAzMDUx",
      "avatar_url": "https://avatars.githubusercontent.com/u/86303051?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/saledjenic",
      "html_url": "https://github.com/saledjenic",
      "followers_url": "https://api.github.com/users/saledjenic/followers",
      "following_url": "https://api.github.com/users/saledjenic/following{/other_user}",
      "gists_url": "https://api.github.com/users/saledjenic/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/saledjenic/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/saledjenic/subscriptions",
      "organizations_url": "https://api.github.com/users/saledjenic/orgs",
      "repos_url": "https://api.github.com/users/saledjenic/repos",
      "events_url": "https://api.github.com/users/saledjenic/events{/privacy}",
      "received_events_url": "https://api.github.com/users/saledjenic/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-12-11T14:47:54Z",
    "updated_at": "2023-12-11T14:47:54Z",
    "author_association": "CONTRIBUTOR",
    "body": "For this issue (when a user wants to join the community and we need to be sure that the signature cannot be reused) we should do the following:\r\n\r\n- the user asks the community to join\r\n- community creates a unique message M1 = \"CommunityId|UserPublicKey|CurrentTimestamp\" (basically anything that ensures uniqueness) that needs to be signed and stores that message M1 in the local table for the key that can be user's address\r\n- the user signs the message M1, received from the community \r\n- the user sends the final request to join the community\r\n- the community validates the signature and verifies the message comparing it with the one stored in the table and checks if the timestamp is not older than 5 minutes (let's say 5 minutes is the time after which a generated request expires)\r\n- if all went well, the user becomes a member of the community and the request is removed from the table, otherwise error is returned and the request is removed from the table (also we should periodically check and remove expired requests from the table)\r\n\r\nUsing that approach there is no chance to have user A that will use the signature of user B to successfully join the community.",
    "reactions": {
      "url": "https://api.github.com/repos/status-im/status-desktop/issues/comments/1850227242/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/status-im/status-desktop/issues/comments/1851599266",
    "html_url": "https://github.com/status-im/status-desktop/issues/10094#issuecomment-1851599266",
    "issue_url": "https://api.github.com/repos/status-im/status-desktop/issues/10094",
    "id": 1851599266,
    "node_id": "IC_kwDOD5KrTM5uXSmi",
    "user": {
      "login": "osmaczko",
      "id": 33099791,
      "node_id": "MDQ6VXNlcjMzMDk5Nzkx",
      "avatar_url": "https://avatars.githubusercontent.com/u/33099791?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/osmaczko",
      "html_url": "https://github.com/osmaczko",
      "followers_url": "https://api.github.com/users/osmaczko/followers",
      "following_url": "https://api.github.com/users/osmaczko/following{/other_user}",
      "gists_url": "https://api.github.com/users/osmaczko/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/osmaczko/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/osmaczko/subscriptions",
      "organizations_url": "https://api.github.com/users/osmaczko/orgs",
      "repos_url": "https://api.github.com/users/osmaczko/repos",
      "events_url": "https://api.github.com/users/osmaczko/events{/privacy}",
      "received_events_url": "https://api.github.com/users/osmaczko/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-12-12T09:16:51Z",
    "updated_at": "2023-12-12T09:16:51Z",
    "author_association": "CONTRIBUTOR",
    "body": "> Using that approach there is no chance to have user A that will use the signature of user B to successfully join the community.\r\n\r\nIsn't there still a 5-minute window where someone else could provide a signature?\r\n\r\n> the user asks the community to join\r\n> community creates a unique message M1 = \"CommunityId|UserPublicKey|CurrentTimestamp\" (basically anything that ensures uniqueness) that needs to be signed and stores that message M1 in the local table for the key that can be user's address\r\n\r\nThis process will make joining a community slightly more complex and potentially less reliable in case any message is lost.\r\n```\r\nrequest to join ->\r\n<- unique message to sign\r\nsigned message ->\r\n<- request to join acceptance\r\n```\r\nvs\r\n```\r\nrequest to join ->\r\n<- request to join acceptance\r\n```\r\n\r\n@saledjenic I don't see the advantage of this proposed approach over Schnorr signatures, am I missing something?",
    "reactions": {
      "url": "https://api.github.com/repos/status-im/status-desktop/issues/comments/1851599266/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/status-im/status-desktop/issues/comments/1851755063",
    "html_url": "https://github.com/status-im/status-desktop/issues/10094#issuecomment-1851755063",
    "issue_url": "https://api.github.com/repos/status-im/status-desktop/issues/10094",
    "id": 1851755063,
    "node_id": "IC_kwDOD5KrTM5uX4o3",
    "user": {
      "login": "saledjenic",
      "id": 86303051,
      "node_id": "MDQ6VXNlcjg2MzAzMDUx",
      "avatar_url": "https://avatars.githubusercontent.com/u/86303051?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/saledjenic",
      "html_url": "https://github.com/saledjenic",
      "followers_url": "https://api.github.com/users/saledjenic/followers",
      "following_url": "https://api.github.com/users/saledjenic/following{/other_user}",
      "gists_url": "https://api.github.com/users/saledjenic/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/saledjenic/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/saledjenic/subscriptions",
      "organizations_url": "https://api.github.com/users/saledjenic/orgs",
      "repos_url": "https://api.github.com/users/saledjenic/repos",
      "events_url": "https://api.github.com/users/saledjenic/events{/privacy}",
      "received_events_url": "https://api.github.com/users/saledjenic/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-12-12T10:25:38Z",
    "updated_at": "2023-12-12T10:25:38Z",
    "author_association": "CONTRIBUTOR",
    "body": "> Isn't there still a 5-minute window where someone else could provide a signature?\r\n\r\nEven if we go without a 5-minute window, there is no way that somebody else may sign a message instead of one the message is meant to, until one steals the primary key. A community knows which message is prepared for whom. The only one who can sign it is the one the message is meant to, the community will verify that by inspecting the signature. So if someone else signs the message, the signature will not be correct. \r\n\r\n> This process will make joining a community slightly more complex and potentially less reliable in case any message is lost.\r\n\r\nYes, it will have one step more, will be like:\r\n```\r\n1. request to join ->\r\n2. <- unique message to sign\r\n3. at this step, the user signs the message with each address he wants to reveal to the community and sending those signatures is a prove of ownership of those addresses, where the community decides whether to accept the user as a member of the community or not\r\n```\r\n\r\n> I don't see the advantage of this proposed approach over Schnorr signatures, am I missing something?\r\n\r\nI don't know what's Schnorr signatures, but what I am sure about is that the approach I mentioned above is fully secure.",
    "reactions": {
      "url": "https://api.github.com/repos/status-im/status-desktop/issues/comments/1851755063/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/status-im/status-desktop/issues/comments/1851766782",
    "html_url": "https://github.com/status-im/status-desktop/issues/10094#issuecomment-1851766782",
    "issue_url": "https://api.github.com/repos/status-im/status-desktop/issues/10094",
    "id": 1851766782,
    "node_id": "IC_kwDOD5KrTM5uX7f-",
    "user": {
      "login": "saledjenic",
      "id": 86303051,
      "node_id": "MDQ6VXNlcjg2MzAzMDUx",
      "avatar_url": "https://avatars.githubusercontent.com/u/86303051?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/saledjenic",
      "html_url": "https://github.com/saledjenic",
      "followers_url": "https://api.github.com/users/saledjenic/followers",
      "following_url": "https://api.github.com/users/saledjenic/following{/other_user}",
      "gists_url": "https://api.github.com/users/saledjenic/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/saledjenic/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/saledjenic/subscriptions",
      "organizations_url": "https://api.github.com/users/saledjenic/orgs",
      "repos_url": "https://api.github.com/users/saledjenic/repos",
      "events_url": "https://api.github.com/users/saledjenic/events{/privacy}",
      "received_events_url": "https://api.github.com/users/saledjenic/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-12-12T10:32:33Z",
    "updated_at": "2023-12-12T10:32:33Z",
    "author_association": "CONTRIBUTOR",
    "body": "@osmaczko ahh I see above, that you shared the link to Schnorr signatures, well as I see it signs the message with multiple addresses, that's good, the same as what I said, but applying that without making a unique new message that needs to be signed for each new join community request, even for the same user, won't help. Cause at the end even if we use Schnorr signatures over the same message the signature will be the same and somebody else can reuse it, and that's what we're trying to solve. \r\n\r\nIn the approach I shared above, when a community generates for each joining community request a new unique message that needs to be signed no way of reusing the signature.",
    "reactions": {
      "url": "https://api.github.com/repos/status-im/status-desktop/issues/comments/1851766782/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/status-im/status-desktop/issues/comments/1851929937",
    "html_url": "https://github.com/status-im/status-desktop/issues/10094#issuecomment-1851929937",
    "issue_url": "https://api.github.com/repos/status-im/status-desktop/issues/10094",
    "id": 1851929937,
    "node_id": "IC_kwDOD5KrTM5uYjVR",
    "user": {
      "login": "osmaczko",
      "id": 33099791,
      "node_id": "MDQ6VXNlcjMzMDk5Nzkx",
      "avatar_url": "https://avatars.githubusercontent.com/u/33099791?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/osmaczko",
      "html_url": "https://github.com/osmaczko",
      "followers_url": "https://api.github.com/users/osmaczko/followers",
      "following_url": "https://api.github.com/users/osmaczko/following{/other_user}",
      "gists_url": "https://api.github.com/users/osmaczko/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/osmaczko/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/osmaczko/subscriptions",
      "organizations_url": "https://api.github.com/users/osmaczko/orgs",
      "repos_url": "https://api.github.com/users/osmaczko/repos",
      "events_url": "https://api.github.com/users/osmaczko/events{/privacy}",
      "received_events_url": "https://api.github.com/users/osmaczko/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-12-12T12:20:03Z",
    "updated_at": "2023-12-12T12:20:03Z",
    "author_association": "CONTRIBUTOR",
    "body": "> Even if we go without a 5-minute window, there is no way that somebody else may sign a message instead of one the message is meant to, until one steals the primary key. A community knows which message is prepared for whom. The only one who can sign it is the one the message is meant to, the community will verify that by inspecting the signature. So if someone else signs the message, the signature will not be correct.\r\n\r\nNot sure I understand. Will this message be signed by chat key or wallet? How do we prove we are indeed the owners of given addresses?\r\n\r\n> Cause at the end even if we use Schnorr signatures over the same message the signature will be the same and somebody else can reuse it, and that's what we're trying to solve.\r\n\r\nThe whole idea with Schnorr is to exactly avoid what you wrote. Let me explain it more explicitly. We now send `RequestToJoin` with signed revealed addresses as follows:\r\n```\r\nRequestToJoin + signature(chat key)\r\n - address1 + signature(wallet key 1)\r\n - address2 + signature(wallet key 2)\r\n ...\r\n - addressN + signature(wallet key N)\r\n```\r\n\r\nThe problem with the above, is that `addressN + signature(wallet key N)` can be provided by someone else. For instance, if I own tokens that allows me to join certain community, I can send you this piece of data. Then you can put it inside `RequestToJoin` and sign it with your chat key, effectively making yourself being able to join the community.\r\n\r\nTo solve that, we need to prove we poses all the keys at the same time, that's when Schnorr kicks in, it will look as follows:\r\n```\r\nRequestToJoin + signature(chat key)\r\n - address1 + signature(wallet key 1 + chat key) aka Schnorr\r\n - address2 + signature(wallet key 2 + chat key) aka Schnorr\r\n ...\r\n - addressN + signature(wallet key N + chat key) aka Schnorr\r\n```\r\n\r\nIn other words, somebody else can't reuse it, because we use the combination of wallet key and chat key.",
    "reactions": {
      "url": "https://api.github.com/repos/status-im/status-desktop/issues/comments/1851929937/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/status-im/status-desktop/issues/comments/1851967189",
    "html_url": "https://github.com/status-im/status-desktop/issues/10094#issuecomment-1851967189",
    "issue_url": "https://api.github.com/repos/status-im/status-desktop/issues/10094",
    "id": 1851967189,
    "node_id": "IC_kwDOD5KrTM5uYsbV",
    "user": {
      "login": "saledjenic",
      "id": 86303051,
      "node_id": "MDQ6VXNlcjg2MzAzMDUx",
      "avatar_url": "https://avatars.githubusercontent.com/u/86303051?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/saledjenic",
      "html_url": "https://github.com/saledjenic",
      "followers_url": "https://api.github.com/users/saledjenic/followers",
      "following_url": "https://api.github.com/users/saledjenic/following{/other_user}",
      "gists_url": "https://api.github.com/users/saledjenic/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/saledjenic/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/saledjenic/subscriptions",
      "organizations_url": "https://api.github.com/users/saledjenic/orgs",
      "repos_url": "https://api.github.com/users/saledjenic/repos",
      "events_url": "https://api.github.com/users/saledjenic/events{/privacy}",
      "received_events_url": "https://api.github.com/users/saledjenic/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-12-12T12:44:56Z",
    "updated_at": "2023-12-12T12:44:56Z",
    "author_association": "CONTRIBUTOR",
    "body": "> Not sure I understand. Will this message be signed by chat key or wallet? How do we prove we are indeed the owners of given addresses?\r\n\r\nThat message will be signed by the private key of every address the user wants to reveal to the community.\r\nUser wants to expose 3 addresses, he will need to sign the message prepared by community with each of those 3 addresses and send those 3 signatures to the community as part of the joining community request.",
    "reactions": {
      "url": "https://api.github.com/repos/status-im/status-desktop/issues/comments/1851967189/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/status-im/status-desktop/issues/comments/1851979694",
    "html_url": "https://github.com/status-im/status-desktop/issues/10094#issuecomment-1851979694",
    "issue_url": "https://api.github.com/repos/status-im/status-desktop/issues/10094",
    "id": 1851979694,
    "node_id": "IC_kwDOD5KrTM5uYveu",
    "user": {
      "login": "saledjenic",
      "id": 86303051,
      "node_id": "MDQ6VXNlcjg2MzAzMDUx",
      "avatar_url": "https://avatars.githubusercontent.com/u/86303051?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/saledjenic",
      "html_url": "https://github.com/saledjenic",
      "followers_url": "https://api.github.com/users/saledjenic/followers",
      "following_url": "https://api.github.com/users/saledjenic/following{/other_user}",
      "gists_url": "https://api.github.com/users/saledjenic/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/saledjenic/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/saledjenic/subscriptions",
      "organizations_url": "https://api.github.com/users/saledjenic/orgs",
      "repos_url": "https://api.github.com/users/saledjenic/repos",
      "events_url": "https://api.github.com/users/saledjenic/events{/privacy}",
      "received_events_url": "https://api.github.com/users/saledjenic/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-12-12T12:53:09Z",
    "updated_at": "2023-12-12T12:53:09Z",
    "author_association": "CONTRIBUTOR",
    "body": "@osmaczko not sure what `chat key` and `wallet key` in your examples refer to? Is that chat public key or chat private key?\r\nAlso in that example address is not needed since it can be determined from the signature.\r\nIn order to say more, could you tell me what are all the details we're sending when sending a request to join the community?",
    "reactions": {
      "url": "https://api.github.com/repos/status-im/status-desktop/issues/comments/1851979694/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/status-im/status-desktop/issues/comments/1851979938",
    "html_url": "https://github.com/status-im/status-desktop/issues/10094#issuecomment-1851979938",
    "issue_url": "https://api.github.com/repos/status-im/status-desktop/issues/10094",
    "id": 1851979938,
    "node_id": "IC_kwDOD5KrTM5uYvii",
    "user": {
      "login": "osmaczko",
      "id": 33099791,
      "node_id": "MDQ6VXNlcjMzMDk5Nzkx",
      "avatar_url": "https://avatars.githubusercontent.com/u/33099791?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/osmaczko",
      "html_url": "https://github.com/osmaczko",
      "followers_url": "https://api.github.com/users/osmaczko/followers",
      "following_url": "https://api.github.com/users/osmaczko/following{/other_user}",
      "gists_url": "https://api.github.com/users/osmaczko/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/osmaczko/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/osmaczko/subscriptions",
      "organizations_url": "https://api.github.com/users/osmaczko/orgs",
      "repos_url": "https://api.github.com/users/osmaczko/repos",
      "events_url": "https://api.github.com/users/osmaczko/events{/privacy}",
      "received_events_url": "https://api.github.com/users/osmaczko/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-12-12T12:53:18Z",
    "updated_at": "2023-12-12T12:53:18Z",
    "author_association": "CONTRIBUTOR",
    "body": "> That message will be signed by the private key of every address the user wants to reveal to the community.\r\n> User wants to expose 3 addresses, he will need to sign the message prepared by community with each of those 3 addresses and send those 3 signatures to the community as part of the joining community request.\r\n\r\nWhat prevents someone else from signing these messages :thinking: ? For instance, if you received a message from the community and then forwarded it to me, I could sign it with my wallet and send it back to you. Subsequently, you could send it back to the community.",
    "reactions": {
      "url": "https://api.github.com/repos/status-im/status-desktop/issues/comments/1851979938/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
