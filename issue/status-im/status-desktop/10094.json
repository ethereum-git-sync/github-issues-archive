{
  "url": "https://api.github.com/repos/status-im/status-desktop/issues/10094",
  "repository_url": "https://api.github.com/repos/status-im/status-desktop",
  "labels_url": "https://api.github.com/repos/status-im/status-desktop/issues/10094/labels{/name}",
  "comments_url": "https://api.github.com/repos/status-im/status-desktop/issues/10094/comments",
  "events_url": "https://api.github.com/repos/status-im/status-desktop/issues/10094/events",
  "html_url": "https://github.com/status-im/status-desktop/issues/10094",
  "id": 1647961233,
  "node_id": "I_kwDOD5KrTM5iOeSR",
  "number": 10094,
  "title": "[Community permissions] Find a way to mitigate users buying a wallet signature \"attack\"",
  "user": {
    "login": "jrainville",
    "id": 11926403,
    "node_id": "MDQ6VXNlcjExOTI2NDAz",
    "avatar_url": "https://avatars.githubusercontent.com/u/11926403?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jrainville",
    "html_url": "https://github.com/jrainville",
    "followers_url": "https://api.github.com/users/jrainville/followers",
    "following_url": "https://api.github.com/users/jrainville/following{/other_user}",
    "gists_url": "https://api.github.com/users/jrainville/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jrainville/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jrainville/subscriptions",
    "organizations_url": "https://api.github.com/users/jrainville/orgs",
    "repos_url": "https://api.github.com/users/jrainville/repos",
    "events_url": "https://api.github.com/users/jrainville/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jrainville/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 2987757762,
      "node_id": "MDU6TGFiZWwyOTg3NzU3NzYy",
      "url": "https://api.github.com/repos/status-im/status-desktop/labels/to%20analyze",
      "name": "to analyze",
      "color": "5CC421",
      "default": false,
      "description": ""
    },
    {
      "id": 4548141040,
      "node_id": "LA_kwDOD5KrTM8AAAABDxcf8A",
      "url": "https://api.github.com/repos/status-im/status-desktop/labels/messenger-team",
      "name": "messenger-team",
      "color": "232858",
      "default": false,
      "description": ""
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": {
    "url": "https://api.github.com/repos/status-im/status-desktop/milestones/65",
    "html_url": "https://github.com/status-im/status-desktop/milestone/65",
    "labels_url": "https://api.github.com/repos/status-im/status-desktop/milestones/65/labels",
    "id": 9039509,
    "node_id": "MI_kwDOD5KrTM4Aie6V",
    "number": 65,
    "title": "0.15",
    "description": "**1. Finish anything that wasn't completed in the previous 0.14 cycle**\r\n\r\n- And fix bugs as usual. We need to keep tech. debt at a roughly fixed level as we grow out functionality, can't let it accumulate! ;-)\r\n\r\n**2. Tokenisation of community ownership**\r\n\r\n- Work needed already evaluated in spike.  Community and 'Channel in a Community' URLs don't need to be signed if this will present problems. Patryk to work on this as a continuation of the spike already done.\r\n- See priority 4 below, as this also has some implications for the tokenisation of community work.\r\n\r\n**3. Profile showcase backend**\r\n- The long-delayed profile showcase backend!  We have the UI on the desktop ready to go for this feature, and Mobile is going to need the backend for this feature as well, so let's try to get it done in 0.14 [#11081](https://github.com/status-im/status-desktop/issues/11081)\r\n\r\n**4. Community tokens visible in wallet when received by user who is not a member of that community**\r\n- Solution obvs. needs to be fully decenteralised and permissionless\r\n- Perhaps whenever a community token is A) sent from a Status Wallet to another user or B) airdropped by a community or C) retailed by a community, a M2M (invisible to the user) Waku message should be sent to the recipient's *ethereum address*?\r\n- This message could either: A) contain the metadata for the token B) tell the user that they have received token, and to check the metadata in either another Waku channel where Control Nodes periodically post Metadata OR check the metadata embedded in the token contract (embedding metadata in the token contract might be a better idea?).  \r\n- The token metadata stored in the token contract is signed by the Community's private key to ensure authenticity.  When the community's private key changes due to ownership of a community being transferred or due to the control node being moved, a transaction must be made to update this metadata so it is signed by the community's new private key.\r\n- See here for how a Waku message can be sent to and Ethereum address https://rfc.vac.dev/spec/20/\r\n\r\n**5. Complete initial airdrop functionality**\r\n- Airdrop history screens\r\n- Ability to airdrop based on in-Community activity (No. of msg, No. msg in time range, joining a community, length of community membership)  Ability to combine multiple attributes into an airdrop\r\n- Ability to token gate airdrops\r\n- Live airdrop gas estimation when setting up airdrop\r\n\r\n**6. Token import functionality**\r\n- Ability for a community Owner to import ERC-20 and NFT tokens, to later be airdropped or retailed\r\n\r\n**7. Admin functionality enhancements**\r\n- Ability to mark a token gated channel as 'hidden', only visible to community members with the requisite tokens\r\n- optional service to once a month auto-kick all members who haven't been online for between 30 and 60 days (e.g. auto-kick members whose profile information like Name, Avatar, etc... can no longer be fetched)\r\n\r\n**8. QR scanner**\r\n- Needed for private key transfer\r\n- Ethereum key QRs (send modal triggered)\r\n- User Share URL in a QR (opens user profile dialogue) \r\n- Community and Channel inside Community URL in QRs (takes user to Community or Channel in Community)\r\n\r\n**9. Chat functionality enhancements**\r\n- Introduce @channel as a new type of global @ mention.  This @ mention only @ mention's everyone who has posted a message in a channel in the last 30 days \r\n- Introduce the ability to search the users in the right side members/users bar.  At the same time, make any adaptations needed so that the right side members/users bar can scale to 10,000 users.\r\n\r\n\r\n**--- Wallet Team ---**\r\n\r\n1. Sending Community created tokens to Status users who are not members of that community\r\n- See priority 4) in the messaging priorities list above.\r\n\r\n2. Send NFT functionality\r\n\r\n3. WalletConnect 2.0 support\r\n\r\n4. Total balance graphs for 'All accounts' and each individual account\r\n\r\n5. Advanced transaction signing\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
    "creator": {
      "login": "iurimatias",
      "id": 176720,
      "node_id": "MDQ6VXNlcjE3NjcyMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/176720?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/iurimatias",
      "html_url": "https://github.com/iurimatias",
      "followers_url": "https://api.github.com/users/iurimatias/followers",
      "following_url": "https://api.github.com/users/iurimatias/following{/other_user}",
      "gists_url": "https://api.github.com/users/iurimatias/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/iurimatias/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/iurimatias/subscriptions",
      "organizations_url": "https://api.github.com/users/iurimatias/orgs",
      "repos_url": "https://api.github.com/users/iurimatias/repos",
      "events_url": "https://api.github.com/users/iurimatias/events{/privacy}",
      "received_events_url": "https://api.github.com/users/iurimatias/received_events",
      "type": "User",
      "site_admin": false
    },
    "open_issues": 93,
    "closed_issues": 5,
    "state": "open",
    "created_at": "2023-02-13T19:08:52Z",
    "updated_at": "2023-07-13T18:48:45Z",
    "due_on": "2023-09-29T07:00:00Z",
    "closed_at": null
  },
  "comments": 4,
  "created_at": "2023-03-30T16:42:07Z",
  "updated_at": "2023-07-13T19:11:04Z",
  "closed_at": null,
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "# Description\r\n\r\nAs discussed in the meeting, it seems like it would be possible for a user that doesn't have access to a community, because they do not possess the required tokens, to just buy/get a wallet signature from someone who does.\r\n\r\nSince the current way to create the signature is that we sign the address with the wallet account, and then sign it with the Status account, thus linking the two, someone could actually cheat and get someone else to create the address wallet signature, get that signature and then sigh it with their own Status account. That would create a fake link between those two.\r\n\r\nWe need to find a way to either limit that or remove that possibility altogether.\r\n\r\nThis ticket is to first investigate a solution and then either close and fix in another issue or fix using this ticket.",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/status-im/status-desktop/issues/10094/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/status-im/status-desktop/issues/10094/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/status-im/status-desktop/issues/comments/1490620785",
    "html_url": "https://github.com/status-im/status-desktop/issues/10094#issuecomment-1490620785",
    "issue_url": "https://api.github.com/repos/status-im/status-desktop/issues/10094",
    "id": 1490620785,
    "node_id": "IC_kwDOD5KrTM5Y2RFx",
    "user": {
      "login": "jrainville",
      "id": 11926403,
      "node_id": "MDQ6VXNlcjExOTI2NDAz",
      "avatar_url": "https://avatars.githubusercontent.com/u/11926403?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jrainville",
      "html_url": "https://github.com/jrainville",
      "followers_url": "https://api.github.com/users/jrainville/followers",
      "following_url": "https://api.github.com/users/jrainville/following{/other_user}",
      "gists_url": "https://api.github.com/users/jrainville/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jrainville/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jrainville/subscriptions",
      "organizations_url": "https://api.github.com/users/jrainville/orgs",
      "repos_url": "https://api.github.com/users/jrainville/repos",
      "events_url": "https://api.github.com/users/jrainville/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jrainville/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-03-30T16:50:39Z",
    "updated_at": "2023-03-30T16:50:39Z",
    "author_association": "MEMBER",
    "body": "Some brainstorm ideas, let me know if I'm saying anything that is not doable:\r\n\r\n1. Add a timestamp to both signatures and the timestamps need to be within X seconds for it to be valid (let's say 5 seconds?)\r\n    - Maybe it's still possible to fake the timestamp inside the wallet address signature, but it does seem harder to get  a \"fake\" wallet signature without the \"attackers\" having an actual software to do it for them.\r\n2. Find a way to sign at the same time with both keys\r\n    - I have no idea if this exists, but some smart cryptography expert probably has thought of something like that before\r\n    - Basically, if we had a signature method that takes both keys at the same time to create a single signature, it would solve the problem.\r\n    - I'm not sure if it's safe or doable to do on our side, but since status-go has access to all keystores, it should be doable.\r\n3. What was proposed was to limit the number of times an address can be used (validated by the owner)\r\n    - This is not great, because it's very possible that someone would have multiple Status accounts and import the same wallet address in them, so we can't just block the re-using of the same address, so any limit we use would be arbitrary\r\n    - It still would work to mitigate the problem slightly\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/status-im/status-desktop/issues/comments/1490620785/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/status-im/status-desktop/issues/comments/1491667853",
    "html_url": "https://github.com/status-im/status-desktop/issues/10094#issuecomment-1491667853",
    "issue_url": "https://api.github.com/repos/status-im/status-desktop/issues/10094",
    "id": 1491667853,
    "node_id": "IC_kwDOD5KrTM5Y6QuN",
    "user": {
      "login": "osmaczko",
      "id": 33099791,
      "node_id": "MDQ6VXNlcjMzMDk5Nzkx",
      "avatar_url": "https://avatars.githubusercontent.com/u/33099791?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/osmaczko",
      "html_url": "https://github.com/osmaczko",
      "followers_url": "https://api.github.com/users/osmaczko/followers",
      "following_url": "https://api.github.com/users/osmaczko/following{/other_user}",
      "gists_url": "https://api.github.com/users/osmaczko/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/osmaczko/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/osmaczko/subscriptions",
      "organizations_url": "https://api.github.com/users/osmaczko/orgs",
      "repos_url": "https://api.github.com/users/osmaczko/repos",
      "events_url": "https://api.github.com/users/osmaczko/events{/privacy}",
      "received_events_url": "https://api.github.com/users/osmaczko/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-03-31T10:03:21Z",
    "updated_at": "2023-03-31T10:04:22Z",
    "author_association": "CONTRIBUTOR",
    "body": "Interesting problem.\r\n\r\n> 2. Find a way to sign at the same time with both keys\r\n>    \r\n>    * I have no idea if this exists, but some smart cryptography expert probably has thought of something like that before\r\n>    * Basically, if we had a signature method that takes both keys at the same time to create a single signature, it would solve the problem.\r\n>    * I'm not sure if it's safe or doable to do on our side, but since status-go has access to all keystores, it should be doable.\r\n\r\nThis would be best. I did quick research and found this: https://github.com/hbakhtiyor/schnorr/#aggregatesignaturesprivatekeys-bigint-message-32byte-64byte-error. Although, I am not sure [how it works with secp256k1 keys](https://github.com/bitcoin/bips/blob/master/bip-0340.mediawiki).\r\n\r\n![image](https://user-images.githubusercontent.com/33099791/229090479-6f86b9c7-2b80-4f12-b815-120863405875.png)\r\n\r\nFrom my understanding with Schnorr signatures, you can create a combined signature that requires both the wallet and Status account keys simultaneously.",
    "reactions": {
      "url": "https://api.github.com/repos/status-im/status-desktop/issues/comments/1491667853/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/status-im/status-desktop/issues/comments/1491673459",
    "html_url": "https://github.com/status-im/status-desktop/issues/10094#issuecomment-1491673459",
    "issue_url": "https://api.github.com/repos/status-im/status-desktop/issues/10094",
    "id": 1491673459,
    "node_id": "IC_kwDOD5KrTM5Y6SFz",
    "user": {
      "login": "caybro",
      "id": 5377645,
      "node_id": "MDQ6VXNlcjUzNzc2NDU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5377645?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/caybro",
      "html_url": "https://github.com/caybro",
      "followers_url": "https://api.github.com/users/caybro/followers",
      "following_url": "https://api.github.com/users/caybro/following{/other_user}",
      "gists_url": "https://api.github.com/users/caybro/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/caybro/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/caybro/subscriptions",
      "organizations_url": "https://api.github.com/users/caybro/orgs",
      "repos_url": "https://api.github.com/users/caybro/repos",
      "events_url": "https://api.github.com/users/caybro/events{/privacy}",
      "received_events_url": "https://api.github.com/users/caybro/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-03-31T10:07:25Z",
    "updated_at": "2023-03-31T10:07:25Z",
    "author_association": "MEMBER",
    "body": "> Interesting problem.\r\n> \r\n> > 2. Find a way to sign at the same time with both keys\r\n> >    \r\n> >    * I have no idea if this exists, but some smart cryptography expert probably has thought of something like that before\r\n> >    * Basically, if we had a signature method that takes both keys at the same time to create a single signature, it would solve the problem.\r\n> >    * I'm not sure if it's safe or doable to do on our side, but since status-go has access to all keystores, it should be doable.\r\n> \r\n> This would be best. I did quick research and found this: https://github.com/hbakhtiyor/schnorr/#aggregatesignaturesprivatekeys-bigint-message-32byte-64byte-error. Although, I am not sure [how it works with secp256k1 keys](https://github.com/bitcoin/bips/blob/master/bip-0340.mediawiki).\r\n\r\nThe very first line says:\r\n> This is a Go implementation of the standard 64-byte Schnorr signature scheme over the elliptic curve secp256k1.",
    "reactions": {
      "url": "https://api.github.com/repos/status-im/status-desktop/issues/comments/1491673459/reactions",
      "total_count": 2,
      "+1": 0,
      "-1": 0,
      "laugh": 2,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/status-im/status-desktop/issues/comments/1492094328",
    "html_url": "https://github.com/status-im/status-desktop/issues/10094#issuecomment-1492094328",
    "issue_url": "https://api.github.com/repos/status-im/status-desktop/issues/10094",
    "id": 1492094328,
    "node_id": "IC_kwDOD5KrTM5Y7414",
    "user": {
      "login": "jrainville",
      "id": 11926403,
      "node_id": "MDQ6VXNlcjExOTI2NDAz",
      "avatar_url": "https://avatars.githubusercontent.com/u/11926403?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jrainville",
      "html_url": "https://github.com/jrainville",
      "followers_url": "https://api.github.com/users/jrainville/followers",
      "following_url": "https://api.github.com/users/jrainville/following{/other_user}",
      "gists_url": "https://api.github.com/users/jrainville/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jrainville/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jrainville/subscriptions",
      "organizations_url": "https://api.github.com/users/jrainville/orgs",
      "repos_url": "https://api.github.com/users/jrainville/repos",
      "events_url": "https://api.github.com/users/jrainville/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jrainville/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-03-31T15:13:22Z",
    "updated_at": "2023-03-31T15:13:22Z",
    "author_association": "MEMBER",
    "body": "I read the doc on that library and it seems like what we need. It would totally fix the attack vector we have. I'll wait to start implementation on this until more people can think it through and see if there are maybe edge cases we didn't consider. Also, it's not necessary for the RC.",
    "reactions": {
      "url": "https://api.github.com/repos/status-im/status-desktop/issues/comments/1492094328/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 1,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
