{
  "url": "https://api.github.com/repos/status-im/status-desktop/issues/10251",
  "repository_url": "https://api.github.com/repos/status-im/status-desktop",
  "labels_url": "https://api.github.com/repos/status-im/status-desktop/issues/10251/labels{/name}",
  "comments_url": "https://api.github.com/repos/status-im/status-desktop/issues/10251/comments",
  "events_url": "https://api.github.com/repos/status-im/status-desktop/issues/10251/events",
  "html_url": "https://github.com/status-im/status-desktop/issues/10251",
  "id": 1661349770,
  "node_id": "I_kwDOD5KrTM5jBi-K",
  "number": 10251,
  "title": "Set transaction type",
  "user": {
    "login": "dlipicar",
    "id": 11161531,
    "node_id": "MDQ6VXNlcjExMTYxNTMx",
    "avatar_url": "https://avatars.githubusercontent.com/u/11161531?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/dlipicar",
    "html_url": "https://github.com/dlipicar",
    "followers_url": "https://api.github.com/users/dlipicar/followers",
    "following_url": "https://api.github.com/users/dlipicar/following{/other_user}",
    "gists_url": "https://api.github.com/users/dlipicar/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/dlipicar/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/dlipicar/subscriptions",
    "organizations_url": "https://api.github.com/users/dlipicar/orgs",
    "repos_url": "https://api.github.com/users/dlipicar/repos",
    "events_url": "https://api.github.com/users/dlipicar/events{/privacy}",
    "received_events_url": "https://api.github.com/users/dlipicar/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 2331339531,
      "node_id": "MDU6TGFiZWwyMzMxMzM5NTMx",
      "url": "https://api.github.com/repos/status-im/status-desktop/labels/wallet-team",
      "name": "wallet-team",
      "color": "b60205",
      "default": false,
      "description": ""
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": {
    "login": "dlipicar",
    "id": 11161531,
    "node_id": "MDQ6VXNlcjExMTYxNTMx",
    "avatar_url": "https://avatars.githubusercontent.com/u/11161531?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/dlipicar",
    "html_url": "https://github.com/dlipicar",
    "followers_url": "https://api.github.com/users/dlipicar/followers",
    "following_url": "https://api.github.com/users/dlipicar/following{/other_user}",
    "gists_url": "https://api.github.com/users/dlipicar/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/dlipicar/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/dlipicar/subscriptions",
    "organizations_url": "https://api.github.com/users/dlipicar/orgs",
    "repos_url": "https://api.github.com/users/dlipicar/repos",
    "events_url": "https://api.github.com/users/dlipicar/events{/privacy}",
    "received_events_url": "https://api.github.com/users/dlipicar/received_events",
    "type": "User",
    "site_admin": false
  },
  "assignees": [
    {
      "login": "dlipicar",
      "id": 11161531,
      "node_id": "MDQ6VXNlcjExMTYxNTMx",
      "avatar_url": "https://avatars.githubusercontent.com/u/11161531?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dlipicar",
      "html_url": "https://github.com/dlipicar",
      "followers_url": "https://api.github.com/users/dlipicar/followers",
      "following_url": "https://api.github.com/users/dlipicar/following{/other_user}",
      "gists_url": "https://api.github.com/users/dlipicar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dlipicar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dlipicar/subscriptions",
      "organizations_url": "https://api.github.com/users/dlipicar/orgs",
      "repos_url": "https://api.github.com/users/dlipicar/repos",
      "events_url": "https://api.github.com/users/dlipicar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dlipicar/received_events",
      "type": "User",
      "site_admin": false
    }
  ],
  "milestone": {
    "url": "https://api.github.com/repos/status-im/status-desktop/milestones/64",
    "html_url": "https://github.com/status-im/status-desktop/milestone/64",
    "labels_url": "https://api.github.com/repos/status-im/status-desktop/milestones/64/labels",
    "id": 9039503,
    "node_id": "MI_kwDOD5KrTM4Aie6P",
    "number": 64,
    "title": "0.13",
    "description": "Priorities **in priority order** for the 0.13 milestone:\r\n\r\n**1. Finish items started in 0.12**\r\n- Complete any outstanding issues related to pairing (for syncing) - Igor\r\n- Implement the 'Admin' role (issue #10114) - Mykhailo\r\n- Any remaining work to pay off tech. debt related to mutual contacts - Mishka\r\n- When creating/editing token based permission, ability to search for and selecting Collectables from OpenSea - MichaelC\r\n\r\n**2. Channel token permissions**\r\n- Create, edit and delete channel token permissions in the permissions admin screens\r\n- This includes the \"no tokens required to view this channel\" permission\r\n- All user facing channel token permissions functionality e.g. what happens when a user tries to access a token gated channel they don't have the required tokens to access, what happens when a user only has permissions to view a channel, etc...\r\n- If a community is an open (not token gated at the community level) community, if a channel is token gated AND if **no** \"no tokens required to view this channel\" permission for that channel exists, then the channel should be automatically encrypted.  If token gating is removed from a channel, the channel should become unencrypted.\r\n\r\n**3. DB perf improvements**\r\n- https://www.notion.so/Database-related-performance-1dbaa7ea894c461d885e55676683be07\r\n- Alex and Patryk to work on this, with help from Lukáš\r\n\r\n**4. Update app to use new 'Share URL' formats**\r\n- add functionality to status-go to generate the new 'Share URL' formats for sharing links to: User Profiles, Communities, Channel inside a Community\r\n- Update everywhere a user can share a URL from to use the new URL format\r\n- New/updated URL unroll designs for inside chat, including specific unrolls for the new User Profile, Community and Channel inside a Community URLs\r\n- Ability to share a URL that points to a specific channel in a community (issue #10160)\r\n- Update all address inputs to accept a user pasting a 'share URL' into the input (in addition to being able to input the raw address).  This includes: Start new chat input, send contact request input in Settings, the import community key input, etc...\r\n- Update Status Desktops URL handler so that if Status is installed on a computer, when a user clicks on a Status 'Share URL' the app is launched (if not already running) and after signing in the user is automatically taken to the entity the Share URL represented inside the app.  e.g. if a user clicks on a URL for a Status Community, the user should be taken to the home screen for that community inside the Status App\r\n\r\n**5. Mint Assets functionality**\r\n- Also includes some small improvements to the mint Collectables functionality\r\n- Noelia, GravityBlast\r\n\r\n**6. Profile showcase backend**\r\n\r\n\r\n**--- For the Wallet team ---**\r\ntldr; continue building out Ben's wallet designs\r\n\r\n1. Complete any outstanding development related to the activity screens\r\n2. All accounts overview screens\r\n3. New settings screens\r\n4. Implement 'imported key and account' syncing and transfer between devices\r\n\r\n\r\n",
    "creator": {
      "login": "iurimatias",
      "id": 176720,
      "node_id": "MDQ6VXNlcjE3NjcyMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/176720?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/iurimatias",
      "html_url": "https://github.com/iurimatias",
      "followers_url": "https://api.github.com/users/iurimatias/followers",
      "following_url": "https://api.github.com/users/iurimatias/following{/other_user}",
      "gists_url": "https://api.github.com/users/iurimatias/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/iurimatias/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/iurimatias/subscriptions",
      "organizations_url": "https://api.github.com/users/iurimatias/orgs",
      "repos_url": "https://api.github.com/users/iurimatias/repos",
      "events_url": "https://api.github.com/users/iurimatias/events{/privacy}",
      "received_events_url": "https://api.github.com/users/iurimatias/received_events",
      "type": "User",
      "site_admin": false
    },
    "open_issues": 180,
    "closed_issues": 15,
    "state": "open",
    "created_at": "2023-02-13T19:04:13Z",
    "updated_at": "2023-05-05T16:48:16Z",
    "due_on": "2023-06-16T07:00:00Z",
    "closed_at": null
  },
  "comments": 0,
  "created_at": "2023-04-10T20:55:33Z",
  "updated_at": "2023-05-05T15:48:33Z",
  "closed_at": null,
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "### Description\r\n\r\nWe currently fetch \"transfer\" events for ERC20 and ERC721 contracts, which currently get shown as \"Send\" and \"Receive\" categories depending on which account is selected and the `To` and `From` addresses. `Transfer` events should be categorized according to the following criteria:\r\n- `Send`: When `From` address matches the corresponding account\r\n- `Receive`: When `To` address matches the corresponding account\r\n- `Buy`: A `Receive` transaction with the `From` address matching a known exchange\r\n- `Sell`: A `Send` transaction with the `To` address matching a known exchange\r\n- `Destroy`: A `Send` transaction with the `To` address `0x0`\r\n- `Swap` (Multi Tx): A `Send` transaction followed by a `Receive` transaction with the counterparty matching a known exchange. Both transaction happen on the same chain. Token type should be different.\r\n- `Bridge`  (Multi Tx): A `Send` transaction followed by a `Receive` transaction with the counterparty matching a known exchange. Both transactions occurring in different chains. Token type should be the same.\r\n\r\nWhich services do we want to support for matching known addresses?\r\n\r\nFor Multi Tx, do we have a reliable way of detecting the ones triggered from outside the app? If we do, assign a matching `MultiTransactionID`\r\n\r\nNot sure if it's convenient to store the \"subtype\" in the DB for more straightforward filtering, or if we want to do it \"on the fly\" to be able to upgrade the criteria with a new software version.\r\n\r\n\r\n",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/status-im/status-desktop/issues/10251/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/status-im/status-desktop/issues/10251/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[

]
