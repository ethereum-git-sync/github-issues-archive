{
  "url": "https://api.github.com/repos/status-im/status-desktop/issues/9941",
  "repository_url": "https://api.github.com/repos/status-im/status-desktop",
  "labels_url": "https://api.github.com/repos/status-im/status-desktop/issues/9941/labels{/name}",
  "comments_url": "https://api.github.com/repos/status-im/status-desktop/issues/9941/comments",
  "events_url": "https://api.github.com/repos/status-im/status-desktop/issues/9941/events",
  "html_url": "https://github.com/status-im/status-desktop/issues/9941",
  "id": 1629955948,
  "node_id": "I_kwDOD5KrTM5hJyds",
  "number": 9941,
  "title": "Support fetching Community collectibles",
  "user": {
    "login": "dlipicar",
    "id": 11161531,
    "node_id": "MDQ6VXNlcjExMTYxNTMx",
    "avatar_url": "https://avatars.githubusercontent.com/u/11161531?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/dlipicar",
    "html_url": "https://github.com/dlipicar",
    "followers_url": "https://api.github.com/users/dlipicar/followers",
    "following_url": "https://api.github.com/users/dlipicar/following{/other_user}",
    "gists_url": "https://api.github.com/users/dlipicar/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/dlipicar/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/dlipicar/subscriptions",
    "organizations_url": "https://api.github.com/users/dlipicar/orgs",
    "repos_url": "https://api.github.com/users/dlipicar/repos",
    "events_url": "https://api.github.com/users/dlipicar/events{/privacy}",
    "received_events_url": "https://api.github.com/users/dlipicar/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 2331339531,
      "node_id": "MDU6TGFiZWwyMzMxMzM5NTMx",
      "url": "https://api.github.com/repos/status-im/status-desktop/labels/wallet-team",
      "name": "wallet-team",
      "color": "b60205",
      "default": false,
      "description": ""
    },
    {
      "id": 3047427135,
      "node_id": "MDU6TGFiZWwzMDQ3NDI3MTM1",
      "url": "https://api.github.com/repos/status-im/status-desktop/labels/feature",
      "name": "feature",
      "color": "0E8A16",
      "default": false,
      "description": ""
    },
    {
      "id": 4121954569,
      "node_id": "LA_kwDOD5KrTM71sAkJ",
      "url": "https://api.github.com/repos/status-im/status-desktop/labels/E:Wallet",
      "name": "E:Wallet",
      "color": "084532",
      "default": false,
      "description": ""
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": {
    "login": "dlipicar",
    "id": 11161531,
    "node_id": "MDQ6VXNlcjExMTYxNTMx",
    "avatar_url": "https://avatars.githubusercontent.com/u/11161531?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/dlipicar",
    "html_url": "https://github.com/dlipicar",
    "followers_url": "https://api.github.com/users/dlipicar/followers",
    "following_url": "https://api.github.com/users/dlipicar/following{/other_user}",
    "gists_url": "https://api.github.com/users/dlipicar/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/dlipicar/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/dlipicar/subscriptions",
    "organizations_url": "https://api.github.com/users/dlipicar/orgs",
    "repos_url": "https://api.github.com/users/dlipicar/repos",
    "events_url": "https://api.github.com/users/dlipicar/events{/privacy}",
    "received_events_url": "https://api.github.com/users/dlipicar/received_events",
    "type": "User",
    "site_admin": false
  },
  "assignees": [
    {
      "login": "dlipicar",
      "id": 11161531,
      "node_id": "MDQ6VXNlcjExMTYxNTMx",
      "avatar_url": "https://avatars.githubusercontent.com/u/11161531?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dlipicar",
      "html_url": "https://github.com/dlipicar",
      "followers_url": "https://api.github.com/users/dlipicar/followers",
      "following_url": "https://api.github.com/users/dlipicar/following{/other_user}",
      "gists_url": "https://api.github.com/users/dlipicar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dlipicar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dlipicar/subscriptions",
      "organizations_url": "https://api.github.com/users/dlipicar/orgs",
      "repos_url": "https://api.github.com/users/dlipicar/repos",
      "events_url": "https://api.github.com/users/dlipicar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dlipicar/received_events",
      "type": "User",
      "site_admin": false
    }
  ],
  "milestone": {
    "url": "https://api.github.com/repos/status-im/status-desktop/milestones/55",
    "html_url": "https://github.com/status-im/status-desktop/milestone/55",
    "labels_url": "https://api.github.com/repos/status-im/status-desktop/milestones/55/labels",
    "id": 8475711,
    "node_id": "MI_kwDOD5KrTM4AgVQ_",
    "number": 55,
    "title": "0.11.0",
    "description": "Communities:\r\n- Token Based Functionality\r\n\r\nGeneral:\r\n- User Profile showcase\r\n",
    "creator": {
      "login": "iurimatias",
      "id": 176720,
      "node_id": "MDQ6VXNlcjE3NjcyMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/176720?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/iurimatias",
      "html_url": "https://github.com/iurimatias",
      "followers_url": "https://api.github.com/users/iurimatias/followers",
      "following_url": "https://api.github.com/users/iurimatias/following{/other_user}",
      "gists_url": "https://api.github.com/users/iurimatias/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/iurimatias/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/iurimatias/subscriptions",
      "organizations_url": "https://api.github.com/users/iurimatias/orgs",
      "repos_url": "https://api.github.com/users/iurimatias/repos",
      "events_url": "https://api.github.com/users/iurimatias/events{/privacy}",
      "received_events_url": "https://api.github.com/users/iurimatias/received_events",
      "type": "User",
      "site_admin": false
    },
    "open_issues": 0,
    "closed_issues": 193,
    "state": "closed",
    "created_at": "2022-09-28T20:32:13Z",
    "updated_at": "2023-05-24T09:07:07Z",
    "due_on": "2023-03-24T07:00:00Z",
    "closed_at": "2023-04-24T18:15:13Z"
  },
  "comments": 7,
  "created_at": "2023-03-17T21:43:29Z",
  "updated_at": "2023-03-24T18:17:43Z",
  "closed_at": "2023-03-24T18:17:43Z",
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "Collectibles used for community access do not follow the standard `tokenURI` metadata format. That means OpenSea will return empty metadata and won't provide the link.\r\nIn such cases, we need to get the `tokenURI` by interacting with the contract (see https://docs.infura.io/infura/tutorials/ethereum/retrieve-and-display-erc-721-and-erc-1155-tokens). Prefer Pokt, use Infura as fallback.\r\nOur `tokenURI` will contain some sort of identifier for the corresponding community. We must then fetch the metadata and the image from Waku. Gonna need some help with this last part @0x-r4bbit @endulab ",
  "closed_by": {
    "login": "dlipicar",
    "id": 11161531,
    "node_id": "MDQ6VXNlcjExMTYxNTMx",
    "avatar_url": "https://avatars.githubusercontent.com/u/11161531?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/dlipicar",
    "html_url": "https://github.com/dlipicar",
    "followers_url": "https://api.github.com/users/dlipicar/followers",
    "following_url": "https://api.github.com/users/dlipicar/following{/other_user}",
    "gists_url": "https://api.github.com/users/dlipicar/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/dlipicar/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/dlipicar/subscriptions",
    "organizations_url": "https://api.github.com/users/dlipicar/orgs",
    "repos_url": "https://api.github.com/users/dlipicar/repos",
    "events_url": "https://api.github.com/users/dlipicar/events{/privacy}",
    "received_events_url": "https://api.github.com/users/dlipicar/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/status-im/status-desktop/issues/9941/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/status-im/status-desktop/issues/9941/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/status-im/status-desktop/issues/comments/1475957140",
    "html_url": "https://github.com/status-im/status-desktop/issues/9941#issuecomment-1475957140",
    "issue_url": "https://api.github.com/repos/status-im/status-desktop/issues/9941",
    "id": 1475957140,
    "node_id": "IC_kwDOD5KrTM5X-VGU",
    "user": {
      "login": "0x-r4bbit",
      "id": 445106,
      "node_id": "MDQ6VXNlcjQ0NTEwNg==",
      "avatar_url": "https://avatars.githubusercontent.com/u/445106?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/0x-r4bbit",
      "html_url": "https://github.com/0x-r4bbit",
      "followers_url": "https://api.github.com/users/0x-r4bbit/followers",
      "following_url": "https://api.github.com/users/0x-r4bbit/following{/other_user}",
      "gists_url": "https://api.github.com/users/0x-r4bbit/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/0x-r4bbit/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/0x-r4bbit/subscriptions",
      "organizations_url": "https://api.github.com/users/0x-r4bbit/orgs",
      "repos_url": "https://api.github.com/users/0x-r4bbit/repos",
      "events_url": "https://api.github.com/users/0x-r4bbit/events{/privacy}",
      "received_events_url": "https://api.github.com/users/0x-r4bbit/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-03-20T10:13:31Z",
    "updated_at": "2023-03-20T10:13:31Z",
    "author_association": "MEMBER",
    "body": "> Our tokenURI will contain some sort of identifier for the corresponding community. We must then fetch the metadata and the image from Waku.\r\n\r\nCommunity collectibles live inside a community's `CommunityDescription` (a waku payload) as `CommunityTokensMetadata`.\r\nWe already add token metadata for community tokens to `CommunityDto`s in desktop.\r\n\r\nSo all we'd have to do is the following:\r\n\r\nRequest the tokeUri from the NFT (which is not an actual Uri but a communityId).\r\nUse community Id to check if it already exists in `communitiesService`, if not, we fetch community data. The function for fetching community data is:\r\n\r\n```nim\r\n  proc requestCommunityInfo*(self: Service, communityId: string, importing = false) =\r\n\r\n    try:\r\n      let arg = AsyncRequestCommunityInfoTaskArg(\r\n        tptr: cast[ByteAddress](asyncRequestCommunityInfoTask),\r\n        vptr: cast[ByteAddress](self.vptr),\r\n        slot: \"asyncCommunityInfoLoaded\",\r\n        communityId: communityId,\r\n        importing: importing\r\n      )\r\n      self.threadpool.start(arg)\r\n    except Exception as e:\r\n      error \"Error requesting community info\", msg = e.msg, communityId\r\n```\r\n\r\nThis will cause the node to receive a community description, which then results in a community object being created and added to the service.\r\n\r\nOnce the community exists in the service, we can use its `communityTokensMetadata` to locate the token we're interested in, and access its `image` which should be a base64 encoded string.\r\n\r\nHope this helps!",
    "reactions": {
      "url": "https://api.github.com/repos/status-im/status-desktop/issues/comments/1475957140/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/status-im/status-desktop/issues/comments/1476056304",
    "html_url": "https://github.com/status-im/status-desktop/issues/9941#issuecomment-1476056304",
    "issue_url": "https://api.github.com/repos/status-im/status-desktop/issues/9941",
    "id": 1476056304,
    "node_id": "IC_kwDOD5KrTM5X-tTw",
    "user": {
      "login": "dlipicar",
      "id": 11161531,
      "node_id": "MDQ6VXNlcjExMTYxNTMx",
      "avatar_url": "https://avatars.githubusercontent.com/u/11161531?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dlipicar",
      "html_url": "https://github.com/dlipicar",
      "followers_url": "https://api.github.com/users/dlipicar/followers",
      "following_url": "https://api.github.com/users/dlipicar/following{/other_user}",
      "gists_url": "https://api.github.com/users/dlipicar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dlipicar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dlipicar/subscriptions",
      "organizations_url": "https://api.github.com/users/dlipicar/orgs",
      "repos_url": "https://api.github.com/users/dlipicar/repos",
      "events_url": "https://api.github.com/users/dlipicar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dlipicar/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-03-20T11:26:45Z",
    "updated_at": "2023-03-20T11:26:45Z",
    "author_association": "CONTRIBUTOR",
    "body": "Thanks for the info @0x-r4bbit , that should be enough to get the data I need. One question though, I was hoping I could fetch everything I needed on the status-go side before returning the list of collectibles to the client. Is it the same from your POV if I call `func (m *Messenger) RequestCommunityInfoFromMailserver(communityID string, useDatabase bool) (*communities.Community, error)` instead of doing it on the NIM side?",
    "reactions": {
      "url": "https://api.github.com/repos/status-im/status-desktop/issues/comments/1476056304/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/status-im/status-desktop/issues/comments/1476064270",
    "html_url": "https://github.com/status-im/status-desktop/issues/9941#issuecomment-1476064270",
    "issue_url": "https://api.github.com/repos/status-im/status-desktop/issues/9941",
    "id": 1476064270,
    "node_id": "IC_kwDOD5KrTM5X-vQO",
    "user": {
      "login": "0x-r4bbit",
      "id": 445106,
      "node_id": "MDQ6VXNlcjQ0NTEwNg==",
      "avatar_url": "https://avatars.githubusercontent.com/u/445106?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/0x-r4bbit",
      "html_url": "https://github.com/0x-r4bbit",
      "followers_url": "https://api.github.com/users/0x-r4bbit/followers",
      "following_url": "https://api.github.com/users/0x-r4bbit/following{/other_user}",
      "gists_url": "https://api.github.com/users/0x-r4bbit/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/0x-r4bbit/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/0x-r4bbit/subscriptions",
      "organizations_url": "https://api.github.com/users/0x-r4bbit/orgs",
      "repos_url": "https://api.github.com/users/0x-r4bbit/repos",
      "events_url": "https://api.github.com/users/0x-r4bbit/events{/privacy}",
      "received_events_url": "https://api.github.com/users/0x-r4bbit/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-03-20T11:33:25Z",
    "updated_at": "2023-03-20T11:33:25Z",
    "author_association": "MEMBER",
    "body": "Yes, that'd be the same.\r\nSo essentially you'd move the entire logic a level up to status-go.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/status-im/status-desktop/issues/comments/1476064270/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/status-im/status-desktop/issues/comments/1476170404",
    "html_url": "https://github.com/status-im/status-desktop/issues/9941#issuecomment-1476170404",
    "issue_url": "https://api.github.com/repos/status-im/status-desktop/issues/9941",
    "id": 1476170404,
    "node_id": "IC_kwDOD5KrTM5X_JKk",
    "user": {
      "login": "dlipicar",
      "id": 11161531,
      "node_id": "MDQ6VXNlcjExMTYxNTMx",
      "avatar_url": "https://avatars.githubusercontent.com/u/11161531?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dlipicar",
      "html_url": "https://github.com/dlipicar",
      "followers_url": "https://api.github.com/users/dlipicar/followers",
      "following_url": "https://api.github.com/users/dlipicar/following{/other_user}",
      "gists_url": "https://api.github.com/users/dlipicar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dlipicar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dlipicar/subscriptions",
      "organizations_url": "https://api.github.com/users/dlipicar/orgs",
      "repos_url": "https://api.github.com/users/dlipicar/repos",
      "events_url": "https://api.github.com/users/dlipicar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dlipicar/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-03-20T12:44:57Z",
    "updated_at": "2023-03-20T12:44:57Z",
    "author_association": "CONTRIBUTOR",
    "body": "Do we have some util or some way of knowing if any string is a valid communityID?",
    "reactions": {
      "url": "https://api.github.com/repos/status-im/status-desktop/issues/comments/1476170404/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/status-im/status-desktop/issues/comments/1476179606",
    "html_url": "https://github.com/status-im/status-desktop/issues/9941#issuecomment-1476179606",
    "issue_url": "https://api.github.com/repos/status-im/status-desktop/issues/9941",
    "id": 1476179606,
    "node_id": "IC_kwDOD5KrTM5X_LaW",
    "user": {
      "login": "0x-r4bbit",
      "id": 445106,
      "node_id": "MDQ6VXNlcjQ0NTEwNg==",
      "avatar_url": "https://avatars.githubusercontent.com/u/445106?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/0x-r4bbit",
      "html_url": "https://github.com/0x-r4bbit",
      "followers_url": "https://api.github.com/users/0x-r4bbit/followers",
      "following_url": "https://api.github.com/users/0x-r4bbit/following{/other_user}",
      "gists_url": "https://api.github.com/users/0x-r4bbit/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/0x-r4bbit/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/0x-r4bbit/subscriptions",
      "organizations_url": "https://api.github.com/users/0x-r4bbit/orgs",
      "repos_url": "https://api.github.com/users/0x-r4bbit/repos",
      "events_url": "https://api.github.com/users/0x-r4bbit/events{/privacy}",
      "received_events_url": "https://api.github.com/users/0x-r4bbit/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-03-20T12:52:14Z",
    "updated_at": "2023-03-20T12:52:14Z",
    "author_association": "MEMBER",
    "body": "Any ECDSA pubkey is a valid communityID. I believe the only validity function we have is \r\n\r\n```nim\r\nproc isCompressedPubKey*(strPubKey: string): bool =\r\n  return strPubKey.startsWith(\"zQ3\") and allCharsInSet(strPubKey, CompressedKeyChars)\r\n```\r\n\r\nBut if I remember correctly we don't process community IDs in its compressed form.\r\nSo if you want to check for uncompressed validity, I think you'll have to add a function that does similar checks (if characters are legit + key length), or you try to convert the key you have to a compressed one for, but then it should be a valid compressed one by definition",
    "reactions": {
      "url": "https://api.github.com/repos/status-im/status-desktop/issues/comments/1476179606/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/status-im/status-desktop/issues/comments/1476856950",
    "html_url": "https://github.com/status-im/status-desktop/issues/9941#issuecomment-1476856950",
    "issue_url": "https://api.github.com/repos/status-im/status-desktop/issues/9941",
    "id": 1476856950,
    "node_id": "IC_kwDOD5KrTM5YBwx2",
    "user": {
      "login": "dlipicar",
      "id": 11161531,
      "node_id": "MDQ6VXNlcjExMTYxNTMx",
      "avatar_url": "https://avatars.githubusercontent.com/u/11161531?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dlipicar",
      "html_url": "https://github.com/dlipicar",
      "followers_url": "https://api.github.com/users/dlipicar/followers",
      "following_url": "https://api.github.com/users/dlipicar/following{/other_user}",
      "gists_url": "https://api.github.com/users/dlipicar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dlipicar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dlipicar/subscriptions",
      "organizations_url": "https://api.github.com/users/dlipicar/orgs",
      "repos_url": "https://api.github.com/users/dlipicar/repos",
      "events_url": "https://api.github.com/users/dlipicar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dlipicar/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-03-20T20:03:50Z",
    "updated_at": "2023-03-20T20:04:00Z",
    "author_association": "CONTRIBUTOR",
    "body": "For testing purposes, do we have an account that:\r\n- Holds one of our NFTs\r\n- The `tokenURI` for that NFT is a valid `communityID`\r\n- The `CommunityTokenMetadata` for that `communityID` contains metadata for said NFT\r\n\r\n?",
    "reactions": {
      "url": "https://api.github.com/repos/status-im/status-desktop/issues/comments/1476856950/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/status-im/status-desktop/issues/comments/1479061595",
    "html_url": "https://github.com/status-im/status-desktop/issues/9941#issuecomment-1479061595",
    "issue_url": "https://api.github.com/repos/status-im/status-desktop/issues/9941",
    "id": 1479061595,
    "node_id": "IC_kwDOD5KrTM5YKLBb",
    "user": {
      "login": "endulab",
      "id": 61889657,
      "node_id": "MDQ6VXNlcjYxODg5NjU3",
      "avatar_url": "https://avatars.githubusercontent.com/u/61889657?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/endulab",
      "html_url": "https://github.com/endulab",
      "followers_url": "https://api.github.com/users/endulab/followers",
      "following_url": "https://api.github.com/users/endulab/following{/other_user}",
      "gists_url": "https://api.github.com/users/endulab/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/endulab/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/endulab/subscriptions",
      "organizations_url": "https://api.github.com/users/endulab/orgs",
      "repos_url": "https://api.github.com/users/endulab/repos",
      "events_url": "https://api.github.com/users/endulab/events{/privacy}",
      "received_events_url": "https://api.github.com/users/endulab/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-03-22T07:57:59Z",
    "updated_at": "2023-03-22T07:57:59Z",
    "author_association": "CONTRIBUTOR",
    "body": "> For testing purposes, do we have an account that:\r\n> \r\n> * Holds one of our NFTs\r\n> * The `tokenURI` for that NFT is a valid `communityID`\r\n> * The `CommunityTokenMetadata` for that `communityID` contains metadata for said NFT\r\n> \r\n> ?\r\n\r\n@dlipicar I will mint today correct contract.",
    "reactions": {
      "url": "https://api.github.com/repos/status-im/status-desktop/issues/comments/1479061595/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
