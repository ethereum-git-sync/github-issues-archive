{
  "url": "https://api.github.com/repos/status-im/status-desktop/issues/11694",
  "repository_url": "https://api.github.com/repos/status-im/status-desktop",
  "labels_url": "https://api.github.com/repos/status-im/status-desktop/issues/11694/labels{/name}",
  "comments_url": "https://api.github.com/repos/status-im/status-desktop/issues/11694/comments",
  "events_url": "https://api.github.com/repos/status-im/status-desktop/issues/11694/events",
  "html_url": "https://github.com/status-im/status-desktop/issues/11694",
  "id": 1824630973,
  "node_id": "I_kwDOD5KrTM5swai9",
  "number": 11694,
  "title": "Make Desktop's DTOs reflect status-go types again",
  "user": {
    "login": "osmaczko",
    "id": 33099791,
    "node_id": "MDQ6VXNlcjMzMDk5Nzkx",
    "avatar_url": "https://avatars.githubusercontent.com/u/33099791?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/osmaczko",
    "html_url": "https://github.com/osmaczko",
    "followers_url": "https://api.github.com/users/osmaczko/followers",
    "following_url": "https://api.github.com/users/osmaczko/following{/other_user}",
    "gists_url": "https://api.github.com/users/osmaczko/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/osmaczko/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/osmaczko/subscriptions",
    "organizations_url": "https://api.github.com/users/osmaczko/orgs",
    "repos_url": "https://api.github.com/users/osmaczko/repos",
    "events_url": "https://api.github.com/users/osmaczko/events{/privacy}",
    "received_events_url": "https://api.github.com/users/osmaczko/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 2351074091,
      "node_id": "MDU6TGFiZWwyMzUxMDc0MDkx",
      "url": "https://api.github.com/repos/status-im/status-desktop/labels/refactor",
      "name": "refactor",
      "color": "ef9870",
      "default": false,
      "description": ""
    },
    {
      "id": 4548141040,
      "node_id": "LA_kwDOD5KrTM8AAAABDxcf8A",
      "url": "https://api.github.com/repos/status-im/status-desktop/labels/messenger-team",
      "name": "messenger-team",
      "color": "232858",
      "default": false,
      "description": ""
    },
    {
      "id": 6014779451,
      "node_id": "LA_kwDOD5KrTM8AAAABZoJAOw",
      "url": "https://api.github.com/repos/status-im/status-desktop/labels/E:Desktop%20misc%20refactors",
      "name": "E:Desktop misc refactors",
      "color": "A6C799",
      "default": false,
      "description": ""
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 5,
  "created_at": "2023-07-27T15:36:37Z",
  "updated_at": "2023-09-27T14:06:09Z",
  "closed_at": null,
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "### Description\r\n\r\nDTO types that are defined in `src/app_service/service/*/dto/*.nim` should mirror the types in status-go. This used to be the case, but it has diverged over time. This is causing confusion, making the code hard to follow and difficult to reason about, which in turn negatively affects code extensibility and maintainability. This issue is particularly evident when data from status-go needs extension or adaptation.\r\n\r\nAs an example, `ChatDto`'s `members` field does not reflect status-go's `members` field of `Chat`.\r\n\r\nstatus-go:\r\n```go\r\ntype Chat struct {\r\n...\r\n\tMembers []ChatMember `json:\"members\"`\r\n}\r\n\r\ntype ChatMember struct {\r\n\tID string `json:\"id\"`\r\n\tAdmin bool `json:\"admin\"`\r\n}\r\n```\r\n\r\nstatus-desktop:\r\n```\r\ntype ChatDto* = object\r\n...\r\n  members*: seq[ChatMember]\r\n  \r\ntype ChatMember* = object\r\n  id*: string\r\n  joined*: bool\r\n  role*: MemberRole\r\n  airdropAccount*: RevealedAccount\r\n```\r\n\r\nThis discrepancy is resulting in the following logic:\r\n```\r\nproc toChatDto*(jsonObj: JsonNode): ChatDto =\r\n...\r\n  var membersObj: JsonNode\r\n  if(jsonObj.getProp(\"members\", membersObj)):\r\n    if(membersObj.kind == JArray):\r\n      # during group chat updates\r\n      for memberObj in membersObj:\r\n        result.members.add(toGroupChatMember(memberObj))\r\n    elif(membersObj.kind == JObject):\r\n      # on a startup, chat/channel creation\r\n      for memberId, memberObj in membersObj:\r\n        result.members.add(toChatMember(memberObj, memberId))\r\n```\r\n\r\nAs can be seen, `toChatDto` is being called on different JSONs. It's impossible to understand the intent from the code without inspecting these JSONs, the flows, and where they differ.\r\n\r\n#### Proposal:\r\n- Always ensure that status-go types are mirrored 1-to-1 in DTOs.\r\n- Create domain types where needed. For example:\r\n\r\n`src/app_service/service/*/domain/*.nim` \r\n```\r\ntype ChatMember* = object\r\n    pubKey*: string\r\n    case kind*: DetailsKind\r\n    of kCommunity:\r\n      communityDetails*: CommunityDetails\r\n    of kGroupChat:\r\n      groupChatDetails*: GroupChatDetails\r\n```\r\n- :question:  Keep DTOs internal and use domain types across the app. For example: introduce `Chat` type with fields relevant to status-desktop and use `ChatDto` only for parsing and services processing.",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/status-im/status-desktop/issues/11694/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/status-im/status-desktop/issues/11694/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/status-im/status-desktop/issues/comments/1653896682",
    "html_url": "https://github.com/status-im/status-desktop/issues/11694#issuecomment-1653896682",
    "issue_url": "https://api.github.com/repos/status-im/status-desktop/issues/11694",
    "id": 1653896682,
    "node_id": "IC_kwDOD5KrTM5ilHXq",
    "user": {
      "login": "0x-r4bbit",
      "id": 445106,
      "node_id": "MDQ6VXNlcjQ0NTEwNg==",
      "avatar_url": "https://avatars.githubusercontent.com/u/445106?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/0x-r4bbit",
      "html_url": "https://github.com/0x-r4bbit",
      "followers_url": "https://api.github.com/users/0x-r4bbit/followers",
      "following_url": "https://api.github.com/users/0x-r4bbit/following{/other_user}",
      "gists_url": "https://api.github.com/users/0x-r4bbit/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/0x-r4bbit/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/0x-r4bbit/subscriptions",
      "organizations_url": "https://api.github.com/users/0x-r4bbit/orgs",
      "repos_url": "https://api.github.com/users/0x-r4bbit/repos",
      "events_url": "https://api.github.com/users/0x-r4bbit/events{/privacy}",
      "received_events_url": "https://api.github.com/users/0x-r4bbit/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-07-27T15:53:20Z",
    "updated_at": "2023-07-27T15:53:20Z",
    "author_association": "MEMBER",
    "body": "I generally agree with the sentiment. I guess part of why this is so inconsistent is also because it would mean even more boilerplate code to get values to and from the UI layer.\r\n\r\nFor example, the `TokenPermissionDto` objects are created in various places coming from multiple directions.\r\nYou either get them from status-go, in which case most of the fields match 1:1, in other cases however, you receive data from the UI and need to construct a Dto from that so it can be passed back to the service.\r\n\r\n^ In this case we'd actually need to introduce yet another type that is able to adapt between service layer <-> view layer.\r\n\r\nI'm not saying I'm disagreeing, quite the opposite, but often times it's already a pain to introduce new data structures just to get some primitive value carried all the way to the user interface.\r\n\r\nI guess once all necessary domain types are in place, this will be less annoying. But it'll be a significant amount of work to get there.",
    "reactions": {
      "url": "https://api.github.com/repos/status-im/status-desktop/issues/comments/1653896682/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/status-im/status-desktop/issues/comments/1653900114",
    "html_url": "https://github.com/status-im/status-desktop/issues/11694#issuecomment-1653900114",
    "issue_url": "https://api.github.com/repos/status-im/status-desktop/issues/11694",
    "id": 1653900114,
    "node_id": "IC_kwDOD5KrTM5ilINS",
    "user": {
      "login": "osmaczko",
      "id": 33099791,
      "node_id": "MDQ6VXNlcjMzMDk5Nzkx",
      "avatar_url": "https://avatars.githubusercontent.com/u/33099791?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/osmaczko",
      "html_url": "https://github.com/osmaczko",
      "followers_url": "https://api.github.com/users/osmaczko/followers",
      "following_url": "https://api.github.com/users/osmaczko/following{/other_user}",
      "gists_url": "https://api.github.com/users/osmaczko/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/osmaczko/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/osmaczko/subscriptions",
      "organizations_url": "https://api.github.com/users/osmaczko/orgs",
      "repos_url": "https://api.github.com/users/osmaczko/repos",
      "events_url": "https://api.github.com/users/osmaczko/events{/privacy}",
      "received_events_url": "https://api.github.com/users/osmaczko/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-07-27T15:55:14Z",
    "updated_at": "2023-07-27T15:55:14Z",
    "author_association": "CONTRIBUTOR",
    "body": "The evolution of `ChatMember`:\r\n\r\n```\r\ntype ChatMember* = object\r\n  id*: string\r\n  admin*: bool\r\n  joined*: bool\r\n```\r\n\r\n```diff\r\n type ChatMember* = object\r\n   id*: string\r\n   admin*: bool\r\n   joined*: bool\r\n+  roles*: seq[int]\r\n```\r\n\r\n```diff\r\n type ChatMember* = object\r\n   id*: string\r\n-  admin*: bool\r\n   joined*: bool\r\n-  roles*: seq[int]\r\n+  role*: MemberRole\r\n```\r\n\r\n```diff\r\n type ChatMember* = object\r\n   id*: string\r\n   joined*: bool\r\n   role*: MemberRole\r\n+  airdropAccount*: RevealedAccount\r\n\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/status-im/status-desktop/issues/comments/1653900114/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/status-im/status-desktop/issues/comments/1653924146",
    "html_url": "https://github.com/status-im/status-desktop/issues/11694#issuecomment-1653924146",
    "issue_url": "https://api.github.com/repos/status-im/status-desktop/issues/11694",
    "id": 1653924146,
    "node_id": "IC_kwDOD5KrTM5ilOEy",
    "user": {
      "login": "osmaczko",
      "id": 33099791,
      "node_id": "MDQ6VXNlcjMzMDk5Nzkx",
      "avatar_url": "https://avatars.githubusercontent.com/u/33099791?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/osmaczko",
      "html_url": "https://github.com/osmaczko",
      "followers_url": "https://api.github.com/users/osmaczko/followers",
      "following_url": "https://api.github.com/users/osmaczko/following{/other_user}",
      "gists_url": "https://api.github.com/users/osmaczko/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/osmaczko/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/osmaczko/subscriptions",
      "organizations_url": "https://api.github.com/users/osmaczko/orgs",
      "repos_url": "https://api.github.com/users/osmaczko/repos",
      "events_url": "https://api.github.com/users/osmaczko/events{/privacy}",
      "received_events_url": "https://api.github.com/users/osmaczko/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-07-27T16:09:26Z",
    "updated_at": "2023-07-27T16:10:45Z",
    "author_association": "CONTRIBUTOR",
    "body": "I think the root of the problem is the type inconsistency coming from status-go. status-go signals chat changes through [protocol's Chat](https://github.com/status-im/status-go/blob/10a42e639d6c455e2a14a89006c8d653e9d1d441/protocol/chat.go#L68), while explicit fetch is done through [API's Chat](https://github.com/status-im/status-go/blob/10a42e639d6c455e2a14a89006c8d653e9d1d441/services/chat/api.go#L44). Sadly, they are not the same. For instance, they differ in how members are represented:\r\n\r\nprotocol:\r\n```\r\n// ChatMember represents a member who participates in a group chat\r\ntype ChatMember struct {\r\n        // ID is the hex encoded public key of the member\r\n        ID string `json:\"id\"`\r\n        // Admin indicates if the member is an admin of the group chat\r\n        Admin bool `json:\"admin\"`\r\n}\r\n```\r\n\r\napi:\r\n```\r\ntype Member struct {\r\n        // Community Role\r\n        Role protobuf.CommunityMember_Roles `json:\"role,omitempty\"`\r\n        // Joined indicates if the member has joined the group chat\r\n        Joined bool `json:\"joined\"`\r\n}\r\n```\r\n\r\nstatus-desktop assumes `ChatDto` is always the same for both. That's why we ended up with Frankenstein `ChatMember` that represents both of them and neither of them accurately. ",
    "reactions": {
      "url": "https://api.github.com/repos/status-im/status-desktop/issues/comments/1653924146/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/status-im/status-desktop/issues/comments/1653963481",
    "html_url": "https://github.com/status-im/status-desktop/issues/11694#issuecomment-1653963481",
    "issue_url": "https://api.github.com/repos/status-im/status-desktop/issues/11694",
    "id": 1653963481,
    "node_id": "IC_kwDOD5KrTM5ilXrZ",
    "user": {
      "login": "osmaczko",
      "id": 33099791,
      "node_id": "MDQ6VXNlcjMzMDk5Nzkx",
      "avatar_url": "https://avatars.githubusercontent.com/u/33099791?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/osmaczko",
      "html_url": "https://github.com/osmaczko",
      "followers_url": "https://api.github.com/users/osmaczko/followers",
      "following_url": "https://api.github.com/users/osmaczko/following{/other_user}",
      "gists_url": "https://api.github.com/users/osmaczko/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/osmaczko/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/osmaczko/subscriptions",
      "organizations_url": "https://api.github.com/users/osmaczko/orgs",
      "repos_url": "https://api.github.com/users/osmaczko/repos",
      "events_url": "https://api.github.com/users/osmaczko/events{/privacy}",
      "received_events_url": "https://api.github.com/users/osmaczko/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-07-27T16:32:39Z",
    "updated_at": "2023-07-27T16:32:39Z",
    "author_association": "CONTRIBUTOR",
    "body": "> I generally agree with the sentiment. I guess part of why this is so inconsistent is also because it would mean even more boilerplate code to get values to and from the UI layer.\r\n> \r\n> For example, the `TokenPermissionDto` objects are created in various places coming from multiple directions. You either get them from status-go, in which case most of the fields match 1:1, in other cases however, you receive data from the UI and need to construct a Dto from that so it can be passed back to the service.\r\n> \r\n> ^ In this case we'd actually need to introduce yet another type that is able to adapt between service layer <-> view layer.\r\n\r\nDoes `TokenPermissionDto` contain fields status-go is not aware of?\r\n\r\n> I'm not saying I'm disagreeing, quite the opposite, but often times it's already a pain to introduce new data structures just to get some primitive value carried all the way to the user interface.\r\n\r\nI agree. In ideal world, domain types should be DTOs. We wouldn't need extra types if status-go is consistent and sends what we need.\r\n\r\n> I guess once all necessary domain types are in place, this will be less annoying. But it'll be a significant amount of work to get there.\r\n\r\nRight. I believe we can go hybrid. Treat DTOs as domain types as long as they are mapped 1 to 1 with what status-go represents and introduce domain types only when needed, a good example of that: https://github.com/status-im/status-desktop/blob/master/src/app_service/service/contacts/dto/contact_details.nim (now I realized it shouldn't be inside the dto subfolder).\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/status-im/status-desktop/issues/comments/1653963481/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/status-im/status-desktop/issues/comments/1653970619",
    "html_url": "https://github.com/status-im/status-desktop/issues/11694#issuecomment-1653970619",
    "issue_url": "https://api.github.com/repos/status-im/status-desktop/issues/11694",
    "id": 1653970619,
    "node_id": "IC_kwDOD5KrTM5ilZa7",
    "user": {
      "login": "0x-r4bbit",
      "id": 445106,
      "node_id": "MDQ6VXNlcjQ0NTEwNg==",
      "avatar_url": "https://avatars.githubusercontent.com/u/445106?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/0x-r4bbit",
      "html_url": "https://github.com/0x-r4bbit",
      "followers_url": "https://api.github.com/users/0x-r4bbit/followers",
      "following_url": "https://api.github.com/users/0x-r4bbit/following{/other_user}",
      "gists_url": "https://api.github.com/users/0x-r4bbit/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/0x-r4bbit/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/0x-r4bbit/subscriptions",
      "organizations_url": "https://api.github.com/users/0x-r4bbit/orgs",
      "repos_url": "https://api.github.com/users/0x-r4bbit/repos",
      "events_url": "https://api.github.com/users/0x-r4bbit/events{/privacy}",
      "received_events_url": "https://api.github.com/users/0x-r4bbit/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-07-27T16:37:50Z",
    "updated_at": "2023-07-27T16:37:50Z",
    "author_association": "MEMBER",
    "body": "> Does TokenPermissionDto contain fields status-go is not aware of?\r\n\r\nAh no, it's not exactly that. But there are `to*Dto()` methods that try to account for both sides of the coin. This can be confusing too, but I just realized it's not exactly the same thing you've been exploring here.",
    "reactions": {
      "url": "https://api.github.com/repos/status-im/status-desktop/issues/comments/1653970619/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
