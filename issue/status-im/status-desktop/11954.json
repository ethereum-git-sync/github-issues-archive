{
  "url": "https://api.github.com/repos/status-im/status-desktop/issues/11954",
  "repository_url": "https://api.github.com/repos/status-im/status-desktop",
  "labels_url": "https://api.github.com/repos/status-im/status-desktop/issues/11954/labels{/name}",
  "comments_url": "https://api.github.com/repos/status-im/status-desktop/issues/11954/comments",
  "events_url": "https://api.github.com/repos/status-im/status-desktop/issues/11954/events",
  "html_url": "https://github.com/status-im/status-desktop/issues/11954",
  "id": 1858788669,
  "node_id": "I_kwDOD5KrTM5uyt09",
  "number": 11954,
  "title": "[Community Ownership] deploy Owner Token through community address",
  "user": {
    "login": "osmaczko",
    "id": 33099791,
    "node_id": "MDQ6VXNlcjMzMDk5Nzkx",
    "avatar_url": "https://avatars.githubusercontent.com/u/33099791?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/osmaczko",
    "html_url": "https://github.com/osmaczko",
    "followers_url": "https://api.github.com/users/osmaczko/followers",
    "following_url": "https://api.github.com/users/osmaczko/following{/other_user}",
    "gists_url": "https://api.github.com/users/osmaczko/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/osmaczko/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/osmaczko/subscriptions",
    "organizations_url": "https://api.github.com/users/osmaczko/orgs",
    "repos_url": "https://api.github.com/users/osmaczko/repos",
    "events_url": "https://api.github.com/users/osmaczko/events{/privacy}",
    "received_events_url": "https://api.github.com/users/osmaczko/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 3047427135,
      "node_id": "MDU6TGFiZWwzMDQ3NDI3MTM1",
      "url": "https://api.github.com/repos/status-im/status-desktop/labels/feature",
      "name": "feature",
      "color": "0E8A16",
      "default": false,
      "description": ""
    },
    {
      "id": 4548141040,
      "node_id": "LA_kwDOD5KrTM8AAAABDxcf8A",
      "url": "https://api.github.com/repos/status-im/status-desktop/labels/messenger-team",
      "name": "messenger-team",
      "color": "232858",
      "default": false,
      "description": ""
    },
    {
      "id": 5732688644,
      "node_id": "LA_kwDOD5KrTM8AAAABVbHjBA",
      "url": "https://api.github.com/repos/status-im/status-desktop/labels/E:Desktop%20Tokenized%20Ownership",
      "name": "E:Desktop Tokenized Ownership",
      "color": "fbca04",
      "default": false,
      "description": "Implementation of the tokenization of community ownership and transfer of said ownership"
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [
    {
      "login": "endulab",
      "id": 61889657,
      "node_id": "MDQ6VXNlcjYxODg5NjU3",
      "avatar_url": "https://avatars.githubusercontent.com/u/61889657?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/endulab",
      "html_url": "https://github.com/endulab",
      "followers_url": "https://api.github.com/users/endulab/followers",
      "following_url": "https://api.github.com/users/endulab/following{/other_user}",
      "gists_url": "https://api.github.com/users/endulab/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/endulab/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/endulab/subscriptions",
      "organizations_url": "https://api.github.com/users/endulab/orgs",
      "repos_url": "https://api.github.com/users/endulab/repos",
      "events_url": "https://api.github.com/users/endulab/events{/privacy}",
      "received_events_url": "https://api.github.com/users/endulab/received_events",
      "type": "User",
      "site_admin": false
    }
  ],
  "milestone": {
    "url": "https://api.github.com/repos/status-im/status-desktop/milestones/65",
    "html_url": "https://github.com/status-im/status-desktop/milestone/65",
    "labels_url": "https://api.github.com/repos/status-im/status-desktop/milestones/65/labels",
    "id": 9039509,
    "node_id": "MI_kwDOD5KrTM4Aie6V",
    "number": 65,
    "title": "0.15",
    "description": "**1. Finish anything that wasn't completed in the previous 0.14 cycle**\r\n- And fix bugs as usual. We need to keep tech. debt at a roughly fixed level as we grow out functionality, can't let it accumulate! ;-)\r\n\r\n**2. Tokenisation of community ownership**\r\n- Work needed already evaluated in spike.  Community and 'Channel in a Community' URLs don't need to be signed if this will present problems. Patryk to work on this as a continuation of the spike already done.\r\n- See priority 4 below, as this also has some implications for the tokenisation of community work.\r\n\r\n**3. Profile showcase backend**\r\n- The long-delayed profile showcase backend!  We have the UI on the desktop ready to go for this feature, and Mobile is going to need the backend for this feature as well, so let's try to get it done in 0.14 [#11081](https://github.com/status-im/status-desktop/issues/11081)\r\n\r\n**4. Community tokens visible in wallet when received by user who is not a member of that community**\r\n- Solution obvs. needs to be fully decenteralised and permissionless\r\n- Perhaps whenever a community token is A) sent from a Status Wallet to another user or B) airdropped by a community or C) retailed by a community, a M2M (invisible to the user) Waku message should be sent to the recipient's *ethereum address*?\r\n- This message could either: A) contain the metadata for the token B) tell the user that they have received token, and to check the metadata in either another Waku channel where Control Nodes periodically post Metadata OR check the metadata embedded in the token contract (embedding metadata in the token contract might be a better idea?).  \r\n- The token metadata stored in the token contract is signed by the Community's private key to ensure authenticity.  When the community's private key changes due to ownership of a community being transferred or due to the control node being moved, a transaction must be made to update this metadata so it is signed by the community's new private key.\r\n- See here for how a Waku message can be sent to and Ethereum address https://rfc.vac.dev/spec/20/\r\n\r\n**5. Discord history import into a single channel in an existing community**\r\n- Pay off any Discord history import service tech. debt first\r\n- Then build the import into a single channel functionality, designs for this are already complete\r\n\r\n**6. UI for community owner to enable manual Waku static shading for their community**\r\n- This will be off by default in 0.15\r\n- This UI is only for the Owner of a community (not TokenMasters or Admins)\r\n- Figma designs are here https://www.figma.com/file/qHfFm7C9LwtXpfdbxssCK3/Kuba%E2%8E%9CDesktop---Communities?type=design&node-id=37242%3A222352&mode=design&t=rw6q6NQYmiz3rSn2-1\r\n\r\n**7. Community chat functionality enhancements**\r\n- Ability to mark a token gated channel as 'hidden', only visible to community members with the requisite tokens\r\n\r\n**8. Refactor synchronisation of contacts**\r\n- To fix various contact request issues, is a large work item\r\n- Mishka and Igor to work on this?\r\n- https://github.com/status-im/status-go/issues/3720\r\n- https://github.com/status-im/status-go/issues/3803#issuecomment-1654588500\r\n\r\n\r\n\r\n**--- Wallet Team ---**\r\n\r\n1. Finish anything that wasn't completed in the previous 0.14 cycle\r\n- And fix bugs as usual. We need to keep tech. debt at a roughly fixed level as we grow out functionality, can't let it accumulate! ;-)\r\n\r\n2. Sending Community created tokens to Status users who are not members of that community\r\n- See priority 4) in the messaging priorities list above.\r\n\r\n3. Send NFT functionality\r\n\r\n4. Updated wallet settings with keypair syncing\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
    "creator": {
      "login": "iurimatias",
      "id": 176720,
      "node_id": "MDQ6VXNlcjE3NjcyMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/176720?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/iurimatias",
      "html_url": "https://github.com/iurimatias",
      "followers_url": "https://api.github.com/users/iurimatias/followers",
      "following_url": "https://api.github.com/users/iurimatias/following{/other_user}",
      "gists_url": "https://api.github.com/users/iurimatias/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/iurimatias/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/iurimatias/subscriptions",
      "organizations_url": "https://api.github.com/users/iurimatias/orgs",
      "repos_url": "https://api.github.com/users/iurimatias/repos",
      "events_url": "https://api.github.com/users/iurimatias/events{/privacy}",
      "received_events_url": "https://api.github.com/users/iurimatias/received_events",
      "type": "User",
      "site_admin": false
    },
    "open_issues": 170,
    "closed_issues": 18,
    "state": "open",
    "created_at": "2023-02-13T19:08:52Z",
    "updated_at": "2023-08-23T18:15:47Z",
    "due_on": "2023-09-29T07:00:00Z",
    "closed_at": null
  },
  "comments": 6,
  "created_at": "2023-08-21T07:38:20Z",
  "updated_at": "2023-08-23T15:46:31Z",
  "closed_at": null,
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "The Owner Token must be deployed by the community address. This is to prevent malicious owners from deploying multiple Owner Tokens with potentially harmful intentions in the future.\r\n\r\nThis will effectively bind the contract to the community. Clients will verify the owner token contract address by reviewing the transaction history of the community address; only the first deployment is valid.\r\n\r\nEdit: It should be possible to sign the transaction \"offline\" using the community key, then send the transaction using the user's wallet. That would mean the transaction would still count as performed by the community, but the gas would be paid by the user's wallet.\r\n\r\nCheck out Iuri's old presentation on Ethereum for an example of that. TLDW: he started a transaction in his wallet, took the data, signed it using the first wallet's private key, then took that signed transaction data and pasted it in another wallet. He could then send it using that second wallet, but it still did the transfer from the first wallet.\r\n\r\nIf we do it like that, we do not need all those steps below.\r\n\r\n---\r\n\r\nIgnore this if the way above works\r\n\r\nTo facilitate the deployment by the community address, it needs sufficient funds to cover the gas fees. Therefore, the procedure should be:\r\n1. The owner transfers ETH to the community address to cover gas fees.\r\n2. The community address deploys the Owner Token contract.\r\n3. The community address refunds any remaining ETH to the owner.\r\n4. The owner [sets signerPublicKey](https://github.com/status-im/communities-contracts/blob/8d3f185bf4d382d522815cff7cb2b70902cfffa8/contracts/mvp/OwnerToken.sol#L42) with its chat PublicKey.\r\n\r\n---\r\n\r\n### Acceptance criteria:\r\n- [ ] Owner Token contract is deployed by community address\r\n- [ ] Owner Token's [signerPublicKey](https://github.com/status-im/communities-contracts/blob/8d3f185bf4d382d522815cff7cb2b70902cfffa8/contracts/mvp/OwnerToken.sol#L10) property points to Owner's chat PublicKey\r\n\r\n#### Implementation:\r\nIdeally, these four steps should be executed in a single atomic transaction. This ensures that either all operations succeed, or none are executed, preventing any intermediate and undesirable state. If executing all in one transaction is not feasible, a robust recovery/retry mechanism should be implemented in the event that any of the transactions fail.\r\n\r\n#### Considerations:\r\nExtend Owner Token's constructor with `signerPublicKey` parameter to avoid step 4.",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/status-im/status-desktop/issues/11954/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/status-im/status-desktop/issues/11954/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/status-im/status-desktop/issues/comments/1686536195",
    "html_url": "https://github.com/status-im/status-desktop/issues/11954#issuecomment-1686536195",
    "issue_url": "https://api.github.com/repos/status-im/status-desktop/issues/11954",
    "id": 1686536195,
    "node_id": "IC_kwDOD5KrTM5khoAD",
    "user": {
      "login": "jrainville",
      "id": 11926403,
      "node_id": "MDQ6VXNlcjExOTI2NDAz",
      "avatar_url": "https://avatars.githubusercontent.com/u/11926403?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jrainville",
      "html_url": "https://github.com/jrainville",
      "followers_url": "https://api.github.com/users/jrainville/followers",
      "following_url": "https://api.github.com/users/jrainville/following{/other_user}",
      "gists_url": "https://api.github.com/users/jrainville/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jrainville/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jrainville/subscriptions",
      "organizations_url": "https://api.github.com/users/jrainville/orgs",
      "repos_url": "https://api.github.com/users/jrainville/repos",
      "events_url": "https://api.github.com/users/jrainville/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jrainville/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-08-21T15:21:22Z",
    "updated_at": "2023-08-21T15:21:22Z",
    "author_association": "MEMBER",
    "body": "Lookup signing a transaction by the community and then send the transaction with the user wallet (to pay the gas)",
    "reactions": {
      "url": "https://api.github.com/repos/status-im/status-desktop/issues/comments/1686536195/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/status-im/status-desktop/issues/comments/1690059649",
    "html_url": "https://github.com/status-im/status-desktop/issues/11954#issuecomment-1690059649",
    "issue_url": "https://api.github.com/repos/status-im/status-desktop/issues/11954",
    "id": 1690059649,
    "node_id": "IC_kwDOD5KrTM5kvEOB",
    "user": {
      "login": "jrainville",
      "id": 11926403,
      "node_id": "MDQ6VXNlcjExOTI2NDAz",
      "avatar_url": "https://avatars.githubusercontent.com/u/11926403?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jrainville",
      "html_url": "https://github.com/jrainville",
      "followers_url": "https://api.github.com/users/jrainville/followers",
      "following_url": "https://api.github.com/users/jrainville/following{/other_user}",
      "gists_url": "https://api.github.com/users/jrainville/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jrainville/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jrainville/subscriptions",
      "organizations_url": "https://api.github.com/users/jrainville/orgs",
      "repos_url": "https://api.github.com/users/jrainville/repos",
      "events_url": "https://api.github.com/users/jrainville/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jrainville/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-08-23T14:23:01Z",
    "updated_at": "2023-08-23T14:23:01Z",
    "author_association": "MEMBER",
    "body": "It seems like if we go the route I suggested, it might make it so that the account paying the fee will still be the one marked as signer, which is not what we want, we need to find another solution",
    "reactions": {
      "url": "https://api.github.com/repos/status-im/status-desktop/issues/comments/1690059649/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/status-im/status-desktop/issues/comments/1690068784",
    "html_url": "https://github.com/status-im/status-desktop/issues/11954#issuecomment-1690068784",
    "issue_url": "https://api.github.com/repos/status-im/status-desktop/issues/11954",
    "id": 1690068784,
    "node_id": "IC_kwDOD5KrTM5kvGcw",
    "user": {
      "login": "jrainville",
      "id": 11926403,
      "node_id": "MDQ6VXNlcjExOTI2NDAz",
      "avatar_url": "https://avatars.githubusercontent.com/u/11926403?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jrainville",
      "html_url": "https://github.com/jrainville",
      "followers_url": "https://api.github.com/users/jrainville/followers",
      "following_url": "https://api.github.com/users/jrainville/following{/other_user}",
      "gists_url": "https://api.github.com/users/jrainville/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jrainville/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jrainville/subscriptions",
      "organizations_url": "https://api.github.com/users/jrainville/orgs",
      "repos_url": "https://api.github.com/users/jrainville/repos",
      "events_url": "https://api.github.com/users/jrainville/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jrainville/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-08-23T14:28:08Z",
    "updated_at": "2023-08-23T14:28:08Z",
    "author_association": "MEMBER",
    "body": "One option I discussed with @endulab is to have a \"util/singleton\" contract called CommunityOwnerTokenDeployer, that would basically be a factory that would be deployed once, and we'd \"hardcode\" the address in status-go.\r\n\r\nThen, when deploying the Owner and TokenMaster tokens, we'd use this CommunityOwnerTokenDeployer contract instead and it would then store the addresses of the deployed token contracts in a map using the `communityID`.\r\n\r\nAfterwards, when a user gets sent an OwnerToken, they can ask the CommunityOwnerTokenDeployer if that token is indeed the right one for the community. The contract will check its map and send the address of the deployed token.\r\n\r\nWe need to check with contract experts to know if this option is doable.\r\n\r\nI do think it solves the problem of a malicious owner trying to scam with a fake owner token.\r\n\r\nWe then need to check if there are legal issues with deploying that type of CommunityOwnerTokenDeployer contract. ",
    "reactions": {
      "url": "https://api.github.com/repos/status-im/status-desktop/issues/comments/1690068784/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/status-im/status-desktop/issues/comments/1690134446",
    "html_url": "https://github.com/status-im/status-desktop/issues/11954#issuecomment-1690134446",
    "issue_url": "https://api.github.com/repos/status-im/status-desktop/issues/11954",
    "id": 1690134446,
    "node_id": "IC_kwDOD5KrTM5kvWeu",
    "user": {
      "login": "osmaczko",
      "id": 33099791,
      "node_id": "MDQ6VXNlcjMzMDk5Nzkx",
      "avatar_url": "https://avatars.githubusercontent.com/u/33099791?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/osmaczko",
      "html_url": "https://github.com/osmaczko",
      "followers_url": "https://api.github.com/users/osmaczko/followers",
      "following_url": "https://api.github.com/users/osmaczko/following{/other_user}",
      "gists_url": "https://api.github.com/users/osmaczko/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/osmaczko/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/osmaczko/subscriptions",
      "organizations_url": "https://api.github.com/users/osmaczko/orgs",
      "repos_url": "https://api.github.com/users/osmaczko/repos",
      "events_url": "https://api.github.com/users/osmaczko/events{/privacy}",
      "received_events_url": "https://api.github.com/users/osmaczko/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-08-23T15:05:32Z",
    "updated_at": "2023-08-23T15:05:32Z",
    "author_association": "CONTRIBUTOR",
    "body": "> I do think it solves the problem of a malicious owner trying to scam with a fake owner token.\r\n\r\nIf the `CommunityOwnerTokenDeployer` allows only for one contract per community then I think it solves it, no :thinking: ?",
    "reactions": {
      "url": "https://api.github.com/repos/status-im/status-desktop/issues/comments/1690134446/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/status-im/status-desktop/issues/comments/1690183107",
    "html_url": "https://github.com/status-im/status-desktop/issues/11954#issuecomment-1690183107",
    "issue_url": "https://api.github.com/repos/status-im/status-desktop/issues/11954",
    "id": 1690183107,
    "node_id": "IC_kwDOD5KrTM5kviXD",
    "user": {
      "login": "jrainville",
      "id": 11926403,
      "node_id": "MDQ6VXNlcjExOTI2NDAz",
      "avatar_url": "https://avatars.githubusercontent.com/u/11926403?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jrainville",
      "html_url": "https://github.com/jrainville",
      "followers_url": "https://api.github.com/users/jrainville/followers",
      "following_url": "https://api.github.com/users/jrainville/following{/other_user}",
      "gists_url": "https://api.github.com/users/jrainville/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jrainville/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jrainville/subscriptions",
      "organizations_url": "https://api.github.com/users/jrainville/orgs",
      "repos_url": "https://api.github.com/users/jrainville/repos",
      "events_url": "https://api.github.com/users/jrainville/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jrainville/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-08-23T15:34:57Z",
    "updated_at": "2023-08-23T15:34:57Z",
    "author_association": "MEMBER",
    "body": "> > I do think it solves the problem of a malicious owner trying to scam with a fake owner token.\r\n> \r\n> If the `CommunityOwnerTokenDeployer` allows only for one contract per community then I think it solves it, no 🤔 ?\r\n\r\nYep! (that's what I'm saying in the quoted text, maybe you misread)",
    "reactions": {
      "url": "https://api.github.com/repos/status-im/status-desktop/issues/comments/1690183107/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/status-im/status-desktop/issues/comments/1690203126",
    "html_url": "https://github.com/status-im/status-desktop/issues/11954#issuecomment-1690203126",
    "issue_url": "https://api.github.com/repos/status-im/status-desktop/issues/11954",
    "id": 1690203126,
    "node_id": "IC_kwDOD5KrTM5kvnP2",
    "user": {
      "login": "osmaczko",
      "id": 33099791,
      "node_id": "MDQ6VXNlcjMzMDk5Nzkx",
      "avatar_url": "https://avatars.githubusercontent.com/u/33099791?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/osmaczko",
      "html_url": "https://github.com/osmaczko",
      "followers_url": "https://api.github.com/users/osmaczko/followers",
      "following_url": "https://api.github.com/users/osmaczko/following{/other_user}",
      "gists_url": "https://api.github.com/users/osmaczko/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/osmaczko/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/osmaczko/subscriptions",
      "organizations_url": "https://api.github.com/users/osmaczko/orgs",
      "repos_url": "https://api.github.com/users/osmaczko/repos",
      "events_url": "https://api.github.com/users/osmaczko/events{/privacy}",
      "received_events_url": "https://api.github.com/users/osmaczko/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-08-23T15:46:31Z",
    "updated_at": "2023-08-23T15:46:31Z",
    "author_association": "CONTRIBUTOR",
    "body": "> > > I do think it solves the problem of a malicious owner trying to scam with a fake owner token.\r\n> > \r\n> > \r\n> > If the `CommunityOwnerTokenDeployer` allows only for one contract per community then I think it solves it, no 🤔 ?\r\n> \r\n> Yep! (that's what I'm saying in the quoted text, maybe you misread)\r\n\r\nLol, I read \"I don't think..\", sorry :sweat_smile: ",
    "reactions": {
      "url": "https://api.github.com/repos/status-im/status-desktop/issues/comments/1690203126/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 1,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
