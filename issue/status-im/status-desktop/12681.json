{
  "url": "https://api.github.com/repos/status-im/status-desktop/issues/12681",
  "repository_url": "https://api.github.com/repos/status-im/status-desktop",
  "labels_url": "https://api.github.com/repos/status-im/status-desktop/issues/12681/labels{/name}",
  "comments_url": "https://api.github.com/repos/status-im/status-desktop/issues/12681/comments",
  "events_url": "https://api.github.com/repos/status-im/status-desktop/issues/12681/events",
  "html_url": "https://github.com/status-im/status-desktop/issues/12681",
  "id": 1987238078,
  "node_id": "I_kwDOD5KrTM52cti-",
  "number": 12681,
  "title": "[Epic] StatusQ: Qt Proxy Models Library",
  "user": {
    "login": "micieslak",
    "id": 20650004,
    "node_id": "MDQ6VXNlcjIwNjUwMDA0",
    "avatar_url": "https://avatars.githubusercontent.com/u/20650004?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/micieslak",
    "html_url": "https://github.com/micieslak",
    "followers_url": "https://api.github.com/users/micieslak/followers",
    "following_url": "https://api.github.com/users/micieslak/following{/other_user}",
    "gists_url": "https://api.github.com/users/micieslak/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/micieslak/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/micieslak/subscriptions",
    "organizations_url": "https://api.github.com/users/micieslak/orgs",
    "repos_url": "https://api.github.com/users/micieslak/repos",
    "events_url": "https://api.github.com/users/micieslak/events{/privacy}",
    "received_events_url": "https://api.github.com/users/micieslak/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 2087353959,
      "node_id": "MDU6TGFiZWwyMDg3MzUzOTU5",
      "url": "https://api.github.com/repos/status-im/status-desktop/labels/ui-team",
      "name": "ui-team",
      "color": "1111ff",
      "default": false,
      "description": ""
    },
    {
      "id": 3047427135,
      "node_id": "MDU6TGFiZWwzMDQ3NDI3MTM1",
      "url": "https://api.github.com/repos/status-im/status-desktop/labels/feature",
      "name": "feature",
      "color": "0E8A16",
      "default": false,
      "description": ""
    },
    {
      "id": 6192722821,
      "node_id": "LA_kwDOD5KrTM8AAAABcR1zhQ",
      "url": "https://api.github.com/repos/status-im/status-desktop/labels/E:Desktop%20Qt%20Proxy%20Models%20Library",
      "name": "E:Desktop Qt Proxy Models Library",
      "color": "F4790A",
      "default": false,
      "description": ""
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": {
    "login": "micieslak",
    "id": 20650004,
    "node_id": "MDQ6VXNlcjIwNjUwMDA0",
    "avatar_url": "https://avatars.githubusercontent.com/u/20650004?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/micieslak",
    "html_url": "https://github.com/micieslak",
    "followers_url": "https://api.github.com/users/micieslak/followers",
    "following_url": "https://api.github.com/users/micieslak/following{/other_user}",
    "gists_url": "https://api.github.com/users/micieslak/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/micieslak/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/micieslak/subscriptions",
    "organizations_url": "https://api.github.com/users/micieslak/orgs",
    "repos_url": "https://api.github.com/users/micieslak/repos",
    "events_url": "https://api.github.com/users/micieslak/events{/privacy}",
    "received_events_url": "https://api.github.com/users/micieslak/received_events",
    "type": "User",
    "site_admin": false
  },
  "assignees": [
    {
      "login": "micieslak",
      "id": 20650004,
      "node_id": "MDQ6VXNlcjIwNjUwMDA0",
      "avatar_url": "https://avatars.githubusercontent.com/u/20650004?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/micieslak",
      "html_url": "https://github.com/micieslak",
      "followers_url": "https://api.github.com/users/micieslak/followers",
      "following_url": "https://api.github.com/users/micieslak/following{/other_user}",
      "gists_url": "https://api.github.com/users/micieslak/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/micieslak/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/micieslak/subscriptions",
      "organizations_url": "https://api.github.com/users/micieslak/orgs",
      "repos_url": "https://api.github.com/users/micieslak/repos",
      "events_url": "https://api.github.com/users/micieslak/events{/privacy}",
      "received_events_url": "https://api.github.com/users/micieslak/received_events",
      "type": "User",
      "site_admin": false
    }
  ],
  "milestone": null,
  "comments": 0,
  "created_at": "2023-11-10T09:23:30Z",
  "updated_at": "2024-01-17T13:17:22Z",
  "closed_at": null,
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "# Qt Proxy Models Library\r\n\r\n### Description\r\n\r\nOver a year ago we introduced the SortFilterProxyModel library on the UI side. In many places it has greatly simplified both the backend and frontend. Although SFPM is a great tool, it does not address all needs. Sometimes there is a need to perform a different type of data transformation on the UI side.\r\n\r\nMoreover proxy models has worth noting advantages:\r\n- Hide complexity of potentially complicated actions in a well defined, extensively tested via unit tests, easy to use QML component.\r\n- Are reusable - they doesn't address only single specific use-case. Are generic and can be reused in various context.\r\n- They move responsibility of preparing data for display from the nim backend to UI layer. Thanks to that nim-layer can be more business-logic oriented  and simpler. And also easier to port to C++ in the future.\r\n- Proxy models are written in C++, can be used without any changes in the upcoming C++/Qt6 version of the app.\r\n\r\nFor that reason 3 initial proxy models has been introduced:\r\n\r\n- [x] `LeftJoinModel`, `RenamingProxyModel` - https://github.com/status-im/status-desktop/issues/12502, https://github.com/status-im/status-desktop/issues/12574\r\nIt allows joining two models similarly as two tables can be joined in SQL using Left Join operation. Established join is fully dynamic - all changes in source models are reflected in the output model.\r\n\r\n- [x] `SubmodelProxyModel` - https://github.com/status-im/status-desktop/issues/12630\r\nIt allows to apply transformations also to submodels, directly from the level of top-level model.\r\n\r\nThose utilities has been adopted in real use cases and identified as useful building blocks. Moreover other proxies has been identified as useful and could help simplifying code or improving performance in our codebase:\r\n\r\n- [x] `ConcatModel` - https://github.com/status-im/status-desktop/issues/12682\r\nProxy allowing to concatenate multiple models in order to render them using single `ListView`. It has been identified to have big potential to improve performance bc it may prevent lists \"unrolling\" and instantiating all delegates up-front. Initial discussion can be found here: https://github.com/status-im/status-desktop/pull/12469. Another interesting approach to solve mentioned performance problem is investigated here: https://github.com/status-im/status-desktop/issues/12666\r\n\r\n- [ ] `GroupByModel` - https://github.com/status-im/status-desktop/issues/12683\r\nProxy allowing grouping rows according to provided criteria. Grouped items are exposed by additional role holding submodel.\r\n\r\n- [ ] `AggregateModel` - https://github.com/status-im/status-desktop/issues/13230\r\nProxy allowing to compute single value from a submodel. E.g. when top-level model contains rows representing tokens by token symbol and has role holding submodel storing balances per chain, it's useful to have a sum of all per-chain balances as a top-level role. This proxy is intended to provide possibility of adding such roles based on submodels in an effective and dynamic way.\r\n\r\n- [ ] `MovableModel` - https://github.com/status-im/status-desktop/issues/12686\r\nProxy decorating source mode with additional method `move(from, to)` similar to that available in `ListModel`. The custom order is stored within a proxy, not altering the original model. May be useful whenever UI needs to allow user to set custom order. Temporary state can be held in the proxy, and send to the backend when changes are accepted.\r\n\r\n- [x] `WritableModel` - https://github.com/status-im/status-desktop/issues/12690\r\nProxy decorating source mode with additional method(s) allowing to overwrite value of any property from the model. The temporary (dirty) state would be kept by the proxy, leaving source model unmodified.\r\n\r\n`SortFilterProxyModel` improvements/extensions:\r\n- [x] `FastExpressionRole` - https://github.com/status-im/status-desktop/issues/13047\r\n- [x] `FastExpressionSorter` https://github.com/status-im/status-desktop/issues/13062\r\n- [x] `FastExpressionFilter` https://github.com/status-im/status-desktop/issues/13063\r\n\r\nRelated utilities:\r\n- [x] `Aggregator` - https://github.com/status-im/status-desktop/issues/12685\r\nUtility for computing aggregated value from a model.\r\n\r\nOther adjustmesnts:\r\n- https://github.com/status-im/status-desktop/issues/13065",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/status-im/status-desktop/issues/12681/reactions",
    "total_count": 2,
    "+1": 2,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/status-im/status-desktop/issues/12681/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[

]
