{
  "url": "https://api.github.com/repos/status-im/status-desktop/issues/9816",
  "repository_url": "https://api.github.com/repos/status-im/status-desktop",
  "labels_url": "https://api.github.com/repos/status-im/status-desktop/issues/9816/labels{/name}",
  "comments_url": "https://api.github.com/repos/status-im/status-desktop/issues/9816/comments",
  "events_url": "https://api.github.com/repos/status-im/status-desktop/issues/9816/events",
  "html_url": "https://github.com/status-im/status-desktop/issues/9816",
  "id": 1616684854,
  "node_id": "I_kwDOD5KrTM5gXKc2",
  "number": 9816,
  "title": "[Performance][EPIC] Move backend calls to threadpool",
  "user": {
    "login": "alexjba",
    "id": 47811206,
    "node_id": "MDQ6VXNlcjQ3ODExMjA2",
    "avatar_url": "https://avatars.githubusercontent.com/u/47811206?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/alexjba",
    "html_url": "https://github.com/alexjba",
    "followers_url": "https://api.github.com/users/alexjba/followers",
    "following_url": "https://api.github.com/users/alexjba/following{/other_user}",
    "gists_url": "https://api.github.com/users/alexjba/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/alexjba/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/alexjba/subscriptions",
    "organizations_url": "https://api.github.com/users/alexjba/orgs",
    "repos_url": "https://api.github.com/users/alexjba/repos",
    "events_url": "https://api.github.com/users/alexjba/events{/privacy}",
    "received_events_url": "https://api.github.com/users/alexjba/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 3904301025,
      "node_id": "LA_kwDOD5KrTM7otufh",
      "url": "https://api.github.com/repos/status-im/status-desktop/labels/E:PerformanceImprovements",
      "name": "E:PerformanceImprovements",
      "color": "7D613C",
      "default": false,
      "description": ""
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": {
    "login": "alexjba",
    "id": 47811206,
    "node_id": "MDQ6VXNlcjQ3ODExMjA2",
    "avatar_url": "https://avatars.githubusercontent.com/u/47811206?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/alexjba",
    "html_url": "https://github.com/alexjba",
    "followers_url": "https://api.github.com/users/alexjba/followers",
    "following_url": "https://api.github.com/users/alexjba/following{/other_user}",
    "gists_url": "https://api.github.com/users/alexjba/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/alexjba/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/alexjba/subscriptions",
    "organizations_url": "https://api.github.com/users/alexjba/orgs",
    "repos_url": "https://api.github.com/users/alexjba/repos",
    "events_url": "https://api.github.com/users/alexjba/events{/privacy}",
    "received_events_url": "https://api.github.com/users/alexjba/received_events",
    "type": "User",
    "site_admin": false
  },
  "assignees": [
    {
      "login": "alexjba",
      "id": 47811206,
      "node_id": "MDQ6VXNlcjQ3ODExMjA2",
      "avatar_url": "https://avatars.githubusercontent.com/u/47811206?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/alexjba",
      "html_url": "https://github.com/alexjba",
      "followers_url": "https://api.github.com/users/alexjba/followers",
      "following_url": "https://api.github.com/users/alexjba/following{/other_user}",
      "gists_url": "https://api.github.com/users/alexjba/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/alexjba/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/alexjba/subscriptions",
      "organizations_url": "https://api.github.com/users/alexjba/orgs",
      "repos_url": "https://api.github.com/users/alexjba/repos",
      "events_url": "https://api.github.com/users/alexjba/events{/privacy}",
      "received_events_url": "https://api.github.com/users/alexjba/received_events",
      "type": "User",
      "site_admin": false
    }
  ],
  "milestone": {
    "url": "https://api.github.com/repos/status-im/status-desktop/milestones/56",
    "html_url": "https://github.com/status-im/status-desktop/milestone/56",
    "labels_url": "https://api.github.com/repos/status-im/status-desktop/milestones/56/labels",
    "id": 8475714,
    "node_id": "MI_kwDOD5KrTM4AgVRC",
    "number": 56,
    "title": "0.12",
    "description": "Priorities **in priority order** for the 0.12 milestone:  \r\n\r\n**1. Improve performance**\r\n- Focus on eliminating any UI freezes when the user clicks on something and the app does not display an immediate response.  Target: the app should ideally respond to all user input within 50ms, but let's start with identifying the longest UI freezes and trying to fix the worst UI freezes first.\r\n- Speed and responsiveness of switching between community channels, and 1on1 and ad-hoc group chats is particularly important, especially for channels and chats that contains a lot of history.  We should aim for about 250ms delay in the *worst* case if possible.  Having a lot of history in a channel should not slow channel switching down.\r\n- DB perf optimisations.  \r\n- Move things to async and off main thread\r\n- See Alex's great profiling work for possible tasks (Alex to continue focusing on perf. for this release cycle)\r\n- \"user facing performance in everyday app usage\" is the top priority, but any task that improves performance is worthwhile\r\n\r\n**2. Finish development of token based functionality from 0.11**\r\n- Optimise No. queries made by owner node when checking member tokens (Pascal)\r\n- Community encryption should automatically switch on/off depending on community permissions (issue #9942)\r\n- Implement the 'Admin' role (issue #10114)\r\n- Airdrop to community members (in addition to addresses)\r\n- Optimise gas required by collectable minting smart contracts (issue #9943, GravityBlast)\r\n--- After collectable minting gas optimisation is complete, start work on Asset minting contracts (GravityBlast)\r\n- Complete token remote destruct UI\r\n- Remove 'Community Permissions Settings', 'Community Tokens' and 'Discord Import Tool' feature flags (issue #10115)\r\n- Thoroughly test, and fix all bugs found. \r\n- Anything else related to Community level token permissions, collectable minting, airdropping, and remote destructing that didn't make it into 0.11\r\n\r\n**3. Finish implementing the ability for Community Owners and Admins to drag and drop channels and categories into different orders**\r\n\r\n**4. Finish anything related to the initial pairing process for syncing that wasn't completed in 0.11** (Igor)\r\n\r\n**5. Improve Mutual Contacts functionality to improve reliability and pay off tech debt** (Mishka)\r\n\r\n**6. Complete Community Directory Curation dApp integration inc. Featured functionality** (Patryk)\r\n \r\n**7. Backend for the Profile Showcase**\r\n\r\n**8. Identity Verification** (required for 'Profile Showcase')\r\n\r\n**9. Fix bugs, bugs and more bugs!**\r\n- Esp. find the cause of and fix the longstanding bug of some 'requests to join' not arriving for hours/days after they were sent!\r\n- Many 'fit and finish' bugs for the UI team\r\n\r\n**--- For the Wallet team ---**\r\n\r\n1. Continue feature development inc. kicking off development of the activity screens\r\n2. 'All accounts' section.  The ability to return all tokens owned by the user in all accounts (excluding watch only accounts) is also required for the Showcase functionality\r\n3. Widen scope of 'backup to waku' and 'syncing' so that all relevant Wallet user state is backed up and synced between devices\r\n4. Continue to ensure Wallet functionality is performant.\r\n5. Fix wallet bugs",
    "creator": {
      "login": "iurimatias",
      "id": 176720,
      "node_id": "MDQ6VXNlcjE3NjcyMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/176720?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/iurimatias",
      "html_url": "https://github.com/iurimatias",
      "followers_url": "https://api.github.com/users/iurimatias/followers",
      "following_url": "https://api.github.com/users/iurimatias/following{/other_user}",
      "gists_url": "https://api.github.com/users/iurimatias/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/iurimatias/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/iurimatias/subscriptions",
      "organizations_url": "https://api.github.com/users/iurimatias/orgs",
      "repos_url": "https://api.github.com/users/iurimatias/repos",
      "events_url": "https://api.github.com/users/iurimatias/events{/privacy}",
      "received_events_url": "https://api.github.com/users/iurimatias/received_events",
      "type": "User",
      "site_admin": false
    },
    "open_issues": 84,
    "closed_issues": 141,
    "state": "open",
    "created_at": "2022-09-28T20:32:37Z",
    "updated_at": "2023-04-29T10:33:10Z",
    "due_on": "2023-05-05T07:00:00Z",
    "closed_at": null
  },
  "comments": 15,
  "created_at": "2023-03-09T08:29:13Z",
  "updated_at": "2023-03-24T18:51:53Z",
  "closed_at": null,
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "### Description\r\nIn this [task](https://github.com/status-im/status-desktop/issues/9739) we have identified the most expensive backend calls used at startup.\r\n\r\nThis is a list of expensive backend calls that can be easily moved to threadpool (based on this [benchmarking data](https://github.com/status-im/status-desktop/files/10922121/procBenchmark.csv)), prioritised based on gains over dev time:\r\n\r\n- [x] callPrivateRPC - wakuext_getCommunitiesSettings - 10 sec ï»¿\r\nUsed in a single place - https://github.com/status-im/status-desktop/blob/master/src/app_service/service/community/service.nim#L583\r\nIssue https://github.com/status-im/status-desktop/issues/9825\r\n\r\n- [x] callPrivateRPC - permissions_getDappPermissions - 5 sec\r\nUsed in a single place - https://github.com/status-im/status-desktop/blob/master/src/app_service/service/dapp_permissions/service.nim#L31\r\nEasy refactoring\r\nIssue: https://github.com/status-im/status-desktop/issues/9826\r\n\r\n- [ ] ~~wallet_getEthereumChains - 4 sec\r\nUsed in a single place\r\nhttps://github.com/status-im/status-desktop/blob/master/src/app_service/service/network/service.nim#L39~~\r\n\r\n- [ ] wallet_checkRecentHistoryForChainIDs - 2 sec\r\nFire and forget, used in a single place\r\nhttps://github.com/status-im/status-desktop/blob/master/src/app_service/service/wallet_account/service.nim#L298\r\n\r\n- [x] callPrivateRPC - gif_setTenorAPIKey - 1.5 sec\r\nFire and forget. Used in a single place:\r\nhttps://github.com/status-im/status-desktop/blob/master/src/app_service/service/gif/service.nim#L151\r\nIssue: https://github.com/status-im/status-desktop/issues/9949\r\n\r\n- [ ] callPrivateRPC - wakuext_activityCenterNotificationsCount - 2 sec with 39 calls\r\ntriggered by \r\nSIGNAL_ACTIVITY_CENTER_NOTIFICATIONS_COUNT_MAY_HAVE_CHANGED\r\nor by UI\r\n\r\n- [ ] wallet_getSavedAddresses - 1.8 sec\r\n1 call at startup. Used in 2 places:\r\nhttps://github.com/status-im/status-desktop/blob/master/src/app_service/service/saved_address/service.nim#L36\r\nhttps://github.com/status-im/status-desktop/blob/master/src/app/modules/main/wallet_section/saved_addresses/module.nim#L33\r\n\r\n- [x] callPrivateRPC - wakuext_pendingRequestsToJoinForCommunity - 1 sec\r\nUsed in a single place:\r\nhttps://github.com/status-im/status-desktop/blob/master/src/app_service/service/community/service.nim#L579\r\nAlso part of https://github.com/status-im/status-desktop/issues/9825",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/status-im/status-desktop/issues/9816/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/status-im/status-desktop/issues/9816/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/status-im/status-desktop/issues/comments/1463844920",
    "html_url": "https://github.com/status-im/status-desktop/issues/9816#issuecomment-1463844920",
    "issue_url": "https://api.github.com/repos/status-im/status-desktop/issues/9816",
    "id": 1463844920,
    "node_id": "IC_kwDOD5KrTM5XQIA4",
    "user": {
      "login": "alexjba",
      "id": 47811206,
      "node_id": "MDQ6VXNlcjQ3ODExMjA2",
      "avatar_url": "https://avatars.githubusercontent.com/u/47811206?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/alexjba",
      "html_url": "https://github.com/alexjba",
      "followers_url": "https://api.github.com/users/alexjba/followers",
      "following_url": "https://api.github.com/users/alexjba/following{/other_user}",
      "gists_url": "https://api.github.com/users/alexjba/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/alexjba/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/alexjba/subscriptions",
      "organizations_url": "https://api.github.com/users/alexjba/orgs",
      "repos_url": "https://api.github.com/users/alexjba/repos",
      "events_url": "https://api.github.com/users/alexjba/events{/privacy}",
      "received_events_url": "https://api.github.com/users/alexjba/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-03-10T14:00:33Z",
    "updated_at": "2023-03-10T14:00:33Z",
    "author_association": "CONTRIBUTOR",
    "body": "The benchmarking numbers are chaotic between runs for some calls. The range can get from a few ms to a few seconds. @richard-ramos could it be due to db locks or data locks in status-go? I'm using an account with full message history. When I use the same account without message history the numbers are much lower.",
    "reactions": {
      "url": "https://api.github.com/repos/status-im/status-desktop/issues/comments/1463844920/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/status-im/status-desktop/issues/comments/1463888705",
    "html_url": "https://github.com/status-im/status-desktop/issues/9816#issuecomment-1463888705",
    "issue_url": "https://api.github.com/repos/status-im/status-desktop/issues/9816",
    "id": 1463888705,
    "node_id": "IC_kwDOD5KrTM5XQStB",
    "user": {
      "login": "richard-ramos",
      "id": 1106587,
      "node_id": "MDQ6VXNlcjExMDY1ODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1106587?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/richard-ramos",
      "html_url": "https://github.com/richard-ramos",
      "followers_url": "https://api.github.com/users/richard-ramos/followers",
      "following_url": "https://api.github.com/users/richard-ramos/following{/other_user}",
      "gists_url": "https://api.github.com/users/richard-ramos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/richard-ramos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/richard-ramos/subscriptions",
      "organizations_url": "https://api.github.com/users/richard-ramos/orgs",
      "repos_url": "https://api.github.com/users/richard-ramos/repos",
      "events_url": "https://api.github.com/users/richard-ramos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/richard-ramos/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-03-10T14:32:40Z",
    "updated_at": "2023-03-10T14:34:01Z",
    "author_association": "MEMBER",
    "body": "Perhaps, we're using sqlcipher with concurrent access disabled as described in here. https://github.com/status-im/status-go/blob/develop/sqlite/sqlite.go#L84-L85 meaning that read/insert operations are done synchronously if i understand correctly.  In what operations do you see this variance from ms to seconds? maybe there's some index or query tuning that could be done to help improve performance?",
    "reactions": {
      "url": "https://api.github.com/repos/status-im/status-desktop/issues/comments/1463888705/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/status-im/status-desktop/issues/comments/1463938907",
    "html_url": "https://github.com/status-im/status-desktop/issues/9816#issuecomment-1463938907",
    "issue_url": "https://api.github.com/repos/status-im/status-desktop/issues/9816",
    "id": 1463938907,
    "node_id": "IC_kwDOD5KrTM5XQe9b",
    "user": {
      "login": "alexjba",
      "id": 47811206,
      "node_id": "MDQ6VXNlcjQ3ODExMjA2",
      "avatar_url": "https://avatars.githubusercontent.com/u/47811206?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/alexjba",
      "html_url": "https://github.com/alexjba",
      "followers_url": "https://api.github.com/users/alexjba/followers",
      "following_url": "https://api.github.com/users/alexjba/following{/other_user}",
      "gists_url": "https://api.github.com/users/alexjba/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/alexjba/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/alexjba/subscriptions",
      "organizations_url": "https://api.github.com/users/alexjba/orgs",
      "repos_url": "https://api.github.com/users/alexjba/repos",
      "events_url": "https://api.github.com/users/alexjba/events{/privacy}",
      "received_events_url": "https://api.github.com/users/alexjba/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-03-10T15:07:37Z",
    "updated_at": "2023-03-10T15:07:37Z",
    "author_association": "CONTRIBUTOR",
    "body": "> Perhaps, we're using sqlcipher with concurrent access disabled as described in here. https://github.com/status-im/status-go/blob/develop/sqlite/sqlite.go#L84-L85 meaning that read/insert operations are done synchronously if i understand correctly. In what operations do you see this variance from ms to seconds? maybe there's some index or query tuning that could be done to help improve performance?\r\n\r\nThese are some of the calls that raised red flags:\r\n`getDappPermissions`, `setTenorAPIKey`, `getEthereumChains`.",
    "reactions": {
      "url": "https://api.github.com/repos/status-im/status-desktop/issues/comments/1463938907/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/status-im/status-desktop/issues/comments/1464337369",
    "html_url": "https://github.com/status-im/status-desktop/issues/9816#issuecomment-1464337369",
    "issue_url": "https://api.github.com/repos/status-im/status-desktop/issues/9816",
    "id": 1464337369,
    "node_id": "IC_kwDOD5KrTM5XSAPZ",
    "user": {
      "login": "richard-ramos",
      "id": 1106587,
      "node_id": "MDQ6VXNlcjExMDY1ODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1106587?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/richard-ramos",
      "html_url": "https://github.com/richard-ramos",
      "followers_url": "https://api.github.com/users/richard-ramos/followers",
      "following_url": "https://api.github.com/users/richard-ramos/following{/other_user}",
      "gists_url": "https://api.github.com/users/richard-ramos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/richard-ramos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/richard-ramos/subscriptions",
      "organizations_url": "https://api.github.com/users/richard-ramos/orgs",
      "repos_url": "https://api.github.com/users/richard-ramos/repos",
      "events_url": "https://api.github.com/users/richard-ramos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/richard-ramos/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-03-10T19:54:21Z",
    "updated_at": "2023-03-10T19:54:21Z",
    "author_association": "MEMBER",
    "body": "The SQL performed by those operations are not heavy at all (the total number of rows the tables used by these queries are very very few), which makes me think that it's another operation that's causing some db contention\r\n\r\ngetDappPermissions:\r\n```\r\n-- in a single transaction\r\nSELECT id, name, address FROM dapps\r\nSELECT dapp_id, permission from permissions\r\n```\r\n\r\nsetTenorKey\r\n```\r\nUPDATE settings SET %s = ? WHERE synthetic_id = 'id'\r\n```\r\n\r\ngetEthereumChains\r\n```\r\nSELECT chain_id, chain_name, rpc_url, fallback_url, block_explorer_url, icon_url, native_currency_name, native_currency_symbol, native_currency_decimals, is_test, layer, enabled, chain_color, short_name FROM networks\r\nWHERE enabled = ?\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/status-im/status-desktop/issues/comments/1464337369/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/status-im/status-desktop/issues/comments/1466203687",
    "html_url": "https://github.com/status-im/status-desktop/issues/9816#issuecomment-1466203687",
    "issue_url": "https://api.github.com/repos/status-im/status-desktop/issues/9816",
    "id": 1466203687,
    "node_id": "IC_kwDOD5KrTM5XZH4n",
    "user": {
      "login": "alexjba",
      "id": 47811206,
      "node_id": "MDQ6VXNlcjQ3ODExMjA2",
      "avatar_url": "https://avatars.githubusercontent.com/u/47811206?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/alexjba",
      "html_url": "https://github.com/alexjba",
      "followers_url": "https://api.github.com/users/alexjba/followers",
      "following_url": "https://api.github.com/users/alexjba/following{/other_user}",
      "gists_url": "https://api.github.com/users/alexjba/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/alexjba/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/alexjba/subscriptions",
      "organizations_url": "https://api.github.com/users/alexjba/orgs",
      "repos_url": "https://api.github.com/users/alexjba/repos",
      "events_url": "https://api.github.com/users/alexjba/events{/privacy}",
      "received_events_url": "https://api.github.com/users/alexjba/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-03-13T14:03:16Z",
    "updated_at": "2023-03-13T14:03:16Z",
    "author_association": "CONTRIBUTOR",
    "body": "> The SQL performed by those operations are not heavy at all (the total number of rows the tables used by these queries are very very few), which makes me think that it's another operation that's causing some db contention\r\n> \r\n> getDappPermissions:\r\n> \r\n> ```\r\n> -- in a single transaction\r\n> SELECT id, name, address FROM dapps\r\n> SELECT dapp_id, permission from permissions\r\n> ```\r\n> \r\n> setTenorKey\r\n> \r\n> ```\r\n> UPDATE settings SET %s = ? WHERE synthetic_id = 'id'\r\n> ```\r\n> \r\n> getEthereumChains\r\n> \r\n> ```\r\n> SELECT chain_id, chain_name, rpc_url, fallback_url, block_explorer_url, icon_url, native_currency_name, native_currency_symbol, native_currency_decimals, is_test, layer, enabled, chain_color, short_name FROM networks\r\n> WHERE enabled = ?\r\n> ```\r\n\r\n@richard-ramos The benchmark numbers will stabilise if we call status-go from a single thread. This way I'm getting the expected performance for these queries. If I understand this correctly, we're running into db locks.\r\n\r\nDo you think it would be worth considering a connection pool?\r\nA possible implementation is described [here](https://turriate.com/articles/making-sqlite-faster-in-go).",
    "reactions": {
      "url": "https://api.github.com/repos/status-im/status-desktop/issues/comments/1466203687/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/status-im/status-desktop/issues/comments/1466354007",
    "html_url": "https://github.com/status-im/status-desktop/issues/9816#issuecomment-1466354007",
    "issue_url": "https://api.github.com/repos/status-im/status-desktop/issues/9816",
    "id": 1466354007,
    "node_id": "IC_kwDOD5KrTM5XZslX",
    "user": {
      "login": "alexjba",
      "id": 47811206,
      "node_id": "MDQ6VXNlcjQ3ODExMjA2",
      "avatar_url": "https://avatars.githubusercontent.com/u/47811206?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/alexjba",
      "html_url": "https://github.com/alexjba",
      "followers_url": "https://api.github.com/users/alexjba/followers",
      "following_url": "https://api.github.com/users/alexjba/following{/other_user}",
      "gists_url": "https://api.github.com/users/alexjba/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/alexjba/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/alexjba/subscriptions",
      "organizations_url": "https://api.github.com/users/alexjba/orgs",
      "repos_url": "https://api.github.com/users/alexjba/repos",
      "events_url": "https://api.github.com/users/alexjba/events{/privacy}",
      "received_events_url": "https://api.github.com/users/alexjba/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-03-13T15:20:56Z",
    "updated_at": "2023-03-13T15:20:56Z",
    "author_association": "CONTRIBUTOR",
    "body": "I've been running the app in a single thread to avoid the db locks and here are the results. There are multiple sheets from multiple runs to make sure the results are consistent.\r\n[procBenchmark-oneThreadApp.xlsx](https://github.com/status-im/status-desktop/files/10958840/procBenchmark-oneThreadApp.xlsx)\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/status-im/status-desktop/issues/comments/1466354007/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/status-im/status-desktop/issues/comments/1466358980",
    "html_url": "https://github.com/status-im/status-desktop/issues/9816#issuecomment-1466358980",
    "issue_url": "https://api.github.com/repos/status-im/status-desktop/issues/9816",
    "id": 1466358980,
    "node_id": "IC_kwDOD5KrTM5XZtzE",
    "user": {
      "login": "jrainville",
      "id": 11926403,
      "node_id": "MDQ6VXNlcjExOTI2NDAz",
      "avatar_url": "https://avatars.githubusercontent.com/u/11926403?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jrainville",
      "html_url": "https://github.com/jrainville",
      "followers_url": "https://api.github.com/users/jrainville/followers",
      "following_url": "https://api.github.com/users/jrainville/following{/other_user}",
      "gists_url": "https://api.github.com/users/jrainville/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jrainville/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jrainville/subscriptions",
      "organizations_url": "https://api.github.com/users/jrainville/orgs",
      "repos_url": "https://api.github.com/users/jrainville/repos",
      "events_url": "https://api.github.com/users/jrainville/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jrainville/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-03-13T15:23:49Z",
    "updated_at": "2023-03-13T15:23:49Z",
    "author_association": "MEMBER",
    "body": "Cool. Yeah it seems like we have 3 main offenders. I'll create a task for `getChats` as it is the worst of them",
    "reactions": {
      "url": "https://api.github.com/repos/status-im/status-desktop/issues/comments/1466358980/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/status-im/status-desktop/issues/comments/1467207287",
    "html_url": "https://github.com/status-im/status-desktop/issues/9816#issuecomment-1467207287",
    "issue_url": "https://api.github.com/repos/status-im/status-desktop/issues/9816",
    "id": 1467207287,
    "node_id": "IC_kwDOD5KrTM5Xc853",
    "user": {
      "login": "richard-ramos",
      "id": 1106587,
      "node_id": "MDQ6VXNlcjExMDY1ODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1106587?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/richard-ramos",
      "html_url": "https://github.com/richard-ramos",
      "followers_url": "https://api.github.com/users/richard-ramos/followers",
      "following_url": "https://api.github.com/users/richard-ramos/following{/other_user}",
      "gists_url": "https://api.github.com/users/richard-ramos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/richard-ramos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/richard-ramos/subscriptions",
      "organizations_url": "https://api.github.com/users/richard-ramos/orgs",
      "repos_url": "https://api.github.com/users/richard-ramos/repos",
      "events_url": "https://api.github.com/users/richard-ramos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/richard-ramos/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-03-14T01:29:44Z",
    "updated_at": "2023-03-14T01:29:44Z",
    "author_association": "MEMBER",
    "body": "> The benchmark numbers will stabilise if we call status-go from a single thread. This way I'm getting the expected performance for these queries. If I understand this correctly, we're running into db locks.\r\n> \r\n> Do you think it would be worth considering a connection pool? A possible implementation is described [here](https://turriate.com/articles/making-sqlite-faster-in-go).\r\n\r\nSounds like a good idea. We're already using WAL in status-go and creating prepared statements when the services are initiated should be somewhat easy to implement. No idea if we have tried before to use a connection pool and shared cache. We also have to verify if the sqlcipher driver we use supports these features. cc-ing: @cammellos and @rasom for their insights in case these approaches have been tried before",
    "reactions": {
      "url": "https://api.github.com/repos/status-im/status-desktop/issues/comments/1467207287/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/status-im/status-desktop/issues/comments/1467512520",
    "html_url": "https://github.com/status-im/status-desktop/issues/9816#issuecomment-1467512520",
    "issue_url": "https://api.github.com/repos/status-im/status-desktop/issues/9816",
    "id": 1467512520,
    "node_id": "IC_kwDOD5KrTM5XeHbI",
    "user": {
      "login": "cammellos",
      "id": 1017008,
      "node_id": "MDQ6VXNlcjEwMTcwMDg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1017008?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cammellos",
      "html_url": "https://github.com/cammellos",
      "followers_url": "https://api.github.com/users/cammellos/followers",
      "following_url": "https://api.github.com/users/cammellos/following{/other_user}",
      "gists_url": "https://api.github.com/users/cammellos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cammellos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cammellos/subscriptions",
      "organizations_url": "https://api.github.com/users/cammellos/orgs",
      "repos_url": "https://api.github.com/users/cammellos/repos",
      "events_url": "https://api.github.com/users/cammellos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cammellos/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-03-14T07:16:47Z",
    "updated_at": "2023-03-14T07:16:47Z",
    "author_association": "MEMBER",
    "body": "If I read well, getChats takes 64 seconds?\r\nWe don't use that particular method in status-mobile, but it still seems too high, have we tried to hit directly status-go to make sure there's no issue somewhere else?\r\n(On mobile as far as I can see, we don't have these numbers, and run in much lowered power devices)",
    "reactions": {
      "url": "https://api.github.com/repos/status-im/status-desktop/issues/comments/1467512520/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/status-im/status-desktop/issues/comments/1467526049",
    "html_url": "https://github.com/status-im/status-desktop/issues/9816#issuecomment-1467526049",
    "issue_url": "https://api.github.com/repos/status-im/status-desktop/issues/9816",
    "id": 1467526049,
    "node_id": "IC_kwDOD5KrTM5XeKuh",
    "user": {
      "login": "cammellos",
      "id": 1017008,
      "node_id": "MDQ6VXNlcjEwMTcwMDg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1017008?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cammellos",
      "html_url": "https://github.com/cammellos",
      "followers_url": "https://api.github.com/users/cammellos/followers",
      "following_url": "https://api.github.com/users/cammellos/following{/other_user}",
      "gists_url": "https://api.github.com/users/cammellos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cammellos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cammellos/subscriptions",
      "organizations_url": "https://api.github.com/users/cammellos/orgs",
      "repos_url": "https://api.github.com/users/cammellos/repos",
      "events_url": "https://api.github.com/users/cammellos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cammellos/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-03-14T07:24:53Z",
    "updated_at": "2023-03-14T07:24:53Z",
    "author_association": "MEMBER",
    "body": "Oh, now that I look at the code, I see that it calls pinned message by chat id for each chat, and it looks like the query has been made quite more complex after introducing discord messages, and you mention you tested on a database with quite a few messages, it seems this could be the issue",
    "reactions": {
      "url": "https://api.github.com/repos/status-im/status-desktop/issues/comments/1467526049/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/status-im/status-desktop/issues/comments/1468302202",
    "html_url": "https://github.com/status-im/status-desktop/issues/9816#issuecomment-1468302202",
    "issue_url": "https://api.github.com/repos/status-im/status-desktop/issues/9816",
    "id": 1468302202,
    "node_id": "IC_kwDOD5KrTM5XhIN6",
    "user": {
      "login": "jrainville",
      "id": 11926403,
      "node_id": "MDQ6VXNlcjExOTI2NDAz",
      "avatar_url": "https://avatars.githubusercontent.com/u/11926403?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jrainville",
      "html_url": "https://github.com/jrainville",
      "followers_url": "https://api.github.com/users/jrainville/followers",
      "following_url": "https://api.github.com/users/jrainville/following{/other_user}",
      "gists_url": "https://api.github.com/users/jrainville/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jrainville/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jrainville/subscriptions",
      "organizations_url": "https://api.github.com/users/jrainville/orgs",
      "repos_url": "https://api.github.com/users/jrainville/repos",
      "events_url": "https://api.github.com/users/jrainville/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jrainville/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-03-14T15:17:57Z",
    "updated_at": "2023-03-14T15:17:57Z",
    "author_association": "MEMBER",
    "body": "Yeah, we'll try to simplify `getChats` and also split it so that we only call it for the current section.\r\n\r\n@cammellos you're saying that you don't use that API? So we're free to break it if needed?",
    "reactions": {
      "url": "https://api.github.com/repos/status-im/status-desktop/issues/comments/1468302202/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/status-im/status-desktop/issues/comments/1468305444",
    "html_url": "https://github.com/status-im/status-desktop/issues/9816#issuecomment-1468305444",
    "issue_url": "https://api.github.com/repos/status-im/status-desktop/issues/9816",
    "id": 1468305444,
    "node_id": "IC_kwDOD5KrTM5XhJAk",
    "user": {
      "login": "cammellos",
      "id": 1017008,
      "node_id": "MDQ6VXNlcjEwMTcwMDg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1017008?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cammellos",
      "html_url": "https://github.com/cammellos",
      "followers_url": "https://api.github.com/users/cammellos/followers",
      "following_url": "https://api.github.com/users/cammellos/following{/other_user}",
      "gists_url": "https://api.github.com/users/cammellos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cammellos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cammellos/subscriptions",
      "organizations_url": "https://api.github.com/users/cammellos/orgs",
      "repos_url": "https://api.github.com/users/cammellos/repos",
      "events_url": "https://api.github.com/users/cammellos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cammellos/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-03-14T15:19:54Z",
    "updated_at": "2023-03-14T15:19:54Z",
    "author_association": "MEMBER",
    "body": "> Yeah, we'll try to simplify `getChats` and also split it so that we only call it for the current section.\r\n> \r\n> @cammellos you're saying that you don't use that API? So we're free to break it if needed?\r\n\r\nYes, we don't use that api, what do you need it for exactly? Ideally we use the same apis, but it's not one that we need, so maybe there's some inconsistencies between the behavior of desktop/mobile",
    "reactions": {
      "url": "https://api.github.com/repos/status-im/status-desktop/issues/comments/1468305444/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/status-im/status-desktop/issues/comments/1468321830",
    "html_url": "https://github.com/status-im/status-desktop/issues/9816#issuecomment-1468321830",
    "issue_url": "https://api.github.com/repos/status-im/status-desktop/issues/9816",
    "id": 1468321830,
    "node_id": "IC_kwDOD5KrTM5XhNAm",
    "user": {
      "login": "jrainville",
      "id": 11926403,
      "node_id": "MDQ6VXNlcjExOTI2NDAz",
      "avatar_url": "https://avatars.githubusercontent.com/u/11926403?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jrainville",
      "html_url": "https://github.com/jrainville",
      "followers_url": "https://api.github.com/users/jrainville/followers",
      "following_url": "https://api.github.com/users/jrainville/following{/other_user}",
      "gists_url": "https://api.github.com/users/jrainville/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jrainville/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jrainville/subscriptions",
      "organizations_url": "https://api.github.com/users/jrainville/orgs",
      "repos_url": "https://api.github.com/users/jrainville/repos",
      "events_url": "https://api.github.com/users/jrainville/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jrainville/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-03-14T15:29:37Z",
    "updated_at": "2023-03-14T15:29:37Z",
    "author_association": "MEMBER",
    "body": "> what do you need it for exactly?\r\n\r\nWe use it currently to generate all the sections and get all the initial data for all chats. It made life easier, as it got everything needed and considered all chats as similar. \r\nWe did it as a simplification, since we used to have lots of conditions on the type of chat and there were different apis called based on that, so we tried to consolidate everything in one call.\r\n\r\nSo we are here now. Turns out it's not that great when we have such a big DB in SQLite. It takes way too much time.\r\n\r\nSo we're planning on either split `getChats` to use it in a smarter way, or we can look at how you do it on mobile. I think our initial way, before introducing `getChats`, was based on mobile, but you guys might have improved it as well since then.",
    "reactions": {
      "url": "https://api.github.com/repos/status-im/status-desktop/issues/comments/1468321830/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/status-im/status-desktop/issues/comments/1468330874",
    "html_url": "https://github.com/status-im/status-desktop/issues/9816#issuecomment-1468330874",
    "issue_url": "https://api.github.com/repos/status-im/status-desktop/issues/9816",
    "id": 1468330874,
    "node_id": "IC_kwDOD5KrTM5XhPN6",
    "user": {
      "login": "cammellos",
      "id": 1017008,
      "node_id": "MDQ6VXNlcjEwMTcwMDg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1017008?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cammellos",
      "html_url": "https://github.com/cammellos",
      "followers_url": "https://api.github.com/users/cammellos/followers",
      "following_url": "https://api.github.com/users/cammellos/following{/other_user}",
      "gists_url": "https://api.github.com/users/cammellos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cammellos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cammellos/subscriptions",
      "organizations_url": "https://api.github.com/users/cammellos/orgs",
      "repos_url": "https://api.github.com/users/cammellos/repos",
      "events_url": "https://api.github.com/users/cammellos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cammellos/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-03-14T15:34:28Z",
    "updated_at": "2023-03-14T15:34:28Z",
    "author_association": "MEMBER",
    "body": "> > what do you need it for exactly?\r\n> \r\n> We use it currently to generate all the sections and get all the initial data for all chats. It made life easier, as it got everything needed and considered all chats as similar. We did it as a simplification, since we used to have lots of conditions on the type of chat and there were different apis called based on that, so we tried to consolidate everything in one call.\r\n> \r\n> So we are here now. Turns out it's not that great when we have such a big DB in SQLite. It takes way too much time.\r\n> \r\n> So we're planning on either split `getChats` to use it in a smarter way, or we can look at how you do it on mobile. I think our initial way, before introducing `getChats`, was based on mobile, but you guys might have improved it as well since then.\r\n\r\nCool, we can go through it an try to consolidate usage of the two clients, otherwise we can help optimize this call (most likely the issue is with the pinned messages query, we only load them once you open a chat ourselves, so might be less visible)",
    "reactions": {
      "url": "https://api.github.com/repos/status-im/status-desktop/issues/comments/1468330874/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/status-im/status-desktop/issues/comments/1468334197",
    "html_url": "https://github.com/status-im/status-desktop/issues/9816#issuecomment-1468334197",
    "issue_url": "https://api.github.com/repos/status-im/status-desktop/issues/9816",
    "id": 1468334197,
    "node_id": "IC_kwDOD5KrTM5XhQB1",
    "user": {
      "login": "jrainville",
      "id": 11926403,
      "node_id": "MDQ6VXNlcjExOTI2NDAz",
      "avatar_url": "https://avatars.githubusercontent.com/u/11926403?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jrainville",
      "html_url": "https://github.com/jrainville",
      "followers_url": "https://api.github.com/users/jrainville/followers",
      "following_url": "https://api.github.com/users/jrainville/following{/other_user}",
      "gists_url": "https://api.github.com/users/jrainville/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jrainville/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jrainville/subscriptions",
      "organizations_url": "https://api.github.com/users/jrainville/orgs",
      "repos_url": "https://api.github.com/users/jrainville/repos",
      "events_url": "https://api.github.com/users/jrainville/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jrainville/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-03-14T15:36:10Z",
    "updated_at": "2023-03-14T15:36:10Z",
    "author_association": "MEMBER",
    "body": "> most likely the issue is with the pinned messages query\r\n\r\nYeah, it seems like this call is pretty slow, so doing it on every chat at the app start sounds like a bad idea nonetheless",
    "reactions": {
      "url": "https://api.github.com/repos/status-im/status-desktop/issues/comments/1468334197/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
