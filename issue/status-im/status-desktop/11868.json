{
  "url": "https://api.github.com/repos/status-im/status-desktop/issues/11868",
  "repository_url": "https://api.github.com/repos/status-im/status-desktop",
  "labels_url": "https://api.github.com/repos/status-im/status-desktop/issues/11868/labels{/name}",
  "comments_url": "https://api.github.com/repos/status-im/status-desktop/issues/11868/comments",
  "events_url": "https://api.github.com/repos/status-im/status-desktop/issues/11868/events",
  "html_url": "https://github.com/status-im/status-desktop/issues/11868",
  "id": 1845733992,
  "node_id": "I_kwDOD5KrTM5uA6po",
  "number": 11868,
  "title": "Generic Async Task runner",
  "user": {
    "login": "dlipicar",
    "id": 11161531,
    "node_id": "MDQ6VXNlcjExMTYxNTMx",
    "avatar_url": "https://avatars.githubusercontent.com/u/11161531?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/dlipicar",
    "html_url": "https://github.com/dlipicar",
    "followers_url": "https://api.github.com/users/dlipicar/followers",
    "following_url": "https://api.github.com/users/dlipicar/following{/other_user}",
    "gists_url": "https://api.github.com/users/dlipicar/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/dlipicar/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/dlipicar/subscriptions",
    "organizations_url": "https://api.github.com/users/dlipicar/orgs",
    "repos_url": "https://api.github.com/users/dlipicar/repos",
    "events_url": "https://api.github.com/users/dlipicar/events{/privacy}",
    "received_events_url": "https://api.github.com/users/dlipicar/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 2331339531,
      "node_id": "MDU6TGFiZWwyMzMxMzM5NTMx",
      "url": "https://api.github.com/repos/status-im/status-desktop/labels/wallet-team",
      "name": "wallet-team",
      "color": "b60205",
      "default": false,
      "description": ""
    },
    {
      "id": 2351074091,
      "node_id": "MDU6TGFiZWwyMzUxMDc0MDkx",
      "url": "https://api.github.com/repos/status-im/status-desktop/labels/refactor",
      "name": "refactor",
      "color": "ef9870",
      "default": false,
      "description": ""
    },
    {
      "id": 6014779451,
      "node_id": "LA_kwDOD5KrTM8AAAABZoJAOw",
      "url": "https://api.github.com/repos/status-im/status-desktop/labels/E:Desktop%20misc%20refactors",
      "name": "E:Desktop misc refactors",
      "color": "A6C799",
      "default": false,
      "description": ""
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 1,
  "created_at": "2023-08-10T19:03:06Z",
  "updated_at": "2023-10-29T08:38:19Z",
  "closed_at": null,
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "### Description\r\n\r\nWe've got some repeated patterns in the status-go Wallet Activity and Collectibles modules with regards to management of async tasks triggered by the client. We can probably develop a common\"task manager\" module that handles:\r\n- Client registration (no need to hardcode the requestID in the Client)\r\n- TaskID handler registration (distribute handlers of each taskID across different modules)\r\n- Common structure for response events (for easily identifying on the client side which response event comes from which task run), no need to use different events for each new task.\r\n- Single generic API function for Task execution.\r\n\r\nWe're now manually managing task distribution between threads (1 scheduler -> 1 thread). Is this desired, or do we want something more flexible like a thread pool? There are some thread pool implementations available.\r\n\r\n",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/status-im/status-desktop/issues/11868/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/status-im/status-desktop/issues/11868/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/status-im/status-desktop/issues/comments/1674617231",
    "html_url": "https://github.com/status-im/status-desktop/issues/11868#issuecomment-1674617231",
    "issue_url": "https://api.github.com/repos/status-im/status-desktop/issues/11868",
    "id": 1674617231,
    "node_id": "IC_kwDOD5KrTM5j0KGP",
    "user": {
      "login": "stefandunca",
      "id": 47554641,
      "node_id": "MDQ6VXNlcjQ3NTU0NjQx",
      "avatar_url": "https://avatars.githubusercontent.com/u/47554641?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/stefandunca",
      "html_url": "https://github.com/stefandunca",
      "followers_url": "https://api.github.com/users/stefandunca/followers",
      "following_url": "https://api.github.com/users/stefandunca/following{/other_user}",
      "gists_url": "https://api.github.com/users/stefandunca/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/stefandunca/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/stefandunca/subscriptions",
      "organizations_url": "https://api.github.com/users/stefandunca/orgs",
      "repos_url": "https://api.github.com/users/stefandunca/repos",
      "events_url": "https://api.github.com/users/stefandunca/events{/privacy}",
      "received_events_url": "https://api.github.com/users/stefandunca/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-08-11T11:48:27Z",
    "updated_at": "2023-08-11T11:51:37Z",
    "author_association": "CONTRIBUTOR",
    "body": ">... \r\n> * Client registration (no need to hardcode the requestID in the Client)\r\n\r\nI tried to use the Nim instance address but it didn't work for some reason. We could generate an ID for each request on the backend instead. However, this might be covered better with a more advanced generic subscription mechanism that can improve the wallet events also.\r\n\r\n> * TaskID handler registration (distribute handlers of each taskID across different modules)\r\n\r\nIf we unify then this is required indeed.\r\n\r\n> * Common structure for response events (for easily identifying on the client side which response event comes from which task run), no need to use different events for each new task.\r\n\r\nWe already use Wallet event and I think we should move away from that and have only the request-identity common and payload different for each client.\r\n\r\n> * Single generic API function for Task execution.\r\n\r\nNot sure here what do you mean.\r\n\r\n> We're now manually managing task distribution between threads (1 scheduler -> 1 thread). Is this desired, or do we want something more flexible like a thread pool?\r\n\r\nI blocked only one thread because of the finding that the `sqlcipher` has contention issues found by colleagues from messaging. Not sure if this changed with the version upgrade. For sure we should do some benchmarks and allow few more in parallel for reading and serialize for writing.\r\n\r\n>  There are some thread pool implementations available.\r\n\r\nAFAIK goroutines are already efficient enough and run on a thread pool. Unless we have some long-running tasks that don't use the go sync primitives for cooperative multitasking, we should be ok by spanning as many as we need.\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/status-im/status-desktop/issues/comments/1674617231/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
