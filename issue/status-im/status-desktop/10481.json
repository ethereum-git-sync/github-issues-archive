{
  "url": "https://api.github.com/repos/status-im/status-desktop/issues/10481",
  "repository_url": "https://api.github.com/repos/status-im/status-desktop",
  "labels_url": "https://api.github.com/repos/status-im/status-desktop/issues/10481/labels{/name}",
  "comments_url": "https://api.github.com/repos/status-im/status-desktop/issues/10481/comments",
  "events_url": "https://api.github.com/repos/status-im/status-desktop/issues/10481/events",
  "html_url": "https://github.com/status-im/status-desktop/issues/10481",
  "id": 1688740644,
  "node_id": "I_kwDOD5KrTM5kqCMk",
  "number": 10481,
  "title": "Optimise nb queries made by owner node when checking member tokens ",
  "user": {
    "login": "jrainville",
    "id": 11926403,
    "node_id": "MDQ6VXNlcjExOTI2NDAz",
    "avatar_url": "https://avatars.githubusercontent.com/u/11926403?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jrainville",
    "html_url": "https://github.com/jrainville",
    "followers_url": "https://api.github.com/users/jrainville/followers",
    "following_url": "https://api.github.com/users/jrainville/following{/other_user}",
    "gists_url": "https://api.github.com/users/jrainville/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jrainville/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jrainville/subscriptions",
    "organizations_url": "https://api.github.com/users/jrainville/orgs",
    "repos_url": "https://api.github.com/users/jrainville/repos",
    "events_url": "https://api.github.com/users/jrainville/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jrainville/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 3955125927,
      "node_id": "LA_kwDOD5KrTM7rvm6n",
      "url": "https://api.github.com/repos/status-im/status-desktop/labels/E:Communities",
      "name": "E:Communities",
      "color": "E56631",
      "default": false,
      "description": ""
    },
    {
      "id": 4220089404,
      "node_id": "LA_kwDOD5KrTM77iXQ8",
      "url": "https://api.github.com/repos/status-im/status-desktop/labels/S:3",
      "name": "S:3",
      "color": "03A6A2",
      "default": false,
      "description": "We know what needs to be done, some extra steps, but thatâ€™s it, little to no unknowns"
    },
    {
      "id": 4548141040,
      "node_id": "LA_kwDOD5KrTM8AAAABDxcf8A",
      "url": "https://api.github.com/repos/status-im/status-desktop/labels/messenger-team",
      "name": "messenger-team",
      "color": "232858",
      "default": false,
      "description": ""
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": {
    "login": "0x-r4bbit",
    "id": 445106,
    "node_id": "MDQ6VXNlcjQ0NTEwNg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/445106?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/0x-r4bbit",
    "html_url": "https://github.com/0x-r4bbit",
    "followers_url": "https://api.github.com/users/0x-r4bbit/followers",
    "following_url": "https://api.github.com/users/0x-r4bbit/following{/other_user}",
    "gists_url": "https://api.github.com/users/0x-r4bbit/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/0x-r4bbit/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/0x-r4bbit/subscriptions",
    "organizations_url": "https://api.github.com/users/0x-r4bbit/orgs",
    "repos_url": "https://api.github.com/users/0x-r4bbit/repos",
    "events_url": "https://api.github.com/users/0x-r4bbit/events{/privacy}",
    "received_events_url": "https://api.github.com/users/0x-r4bbit/received_events",
    "type": "User",
    "site_admin": false
  },
  "assignees": [
    {
      "login": "0x-r4bbit",
      "id": 445106,
      "node_id": "MDQ6VXNlcjQ0NTEwNg==",
      "avatar_url": "https://avatars.githubusercontent.com/u/445106?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/0x-r4bbit",
      "html_url": "https://github.com/0x-r4bbit",
      "followers_url": "https://api.github.com/users/0x-r4bbit/followers",
      "following_url": "https://api.github.com/users/0x-r4bbit/following{/other_user}",
      "gists_url": "https://api.github.com/users/0x-r4bbit/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/0x-r4bbit/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/0x-r4bbit/subscriptions",
      "organizations_url": "https://api.github.com/users/0x-r4bbit/orgs",
      "repos_url": "https://api.github.com/users/0x-r4bbit/repos",
      "events_url": "https://api.github.com/users/0x-r4bbit/events{/privacy}",
      "received_events_url": "https://api.github.com/users/0x-r4bbit/received_events",
      "type": "User",
      "site_admin": false
    }
  ],
  "milestone": {
    "url": "https://api.github.com/repos/status-im/status-desktop/milestones/64",
    "html_url": "https://github.com/status-im/status-desktop/milestone/64",
    "labels_url": "https://api.github.com/repos/status-im/status-desktop/milestones/64/labels",
    "id": 9039503,
    "node_id": "MI_kwDOD5KrTM4Aie6P",
    "number": 64,
    "title": "0.13",
    "description": "Priorities **in priority order** for the 0.13 milestone:\r\n\r\n**1. Finish items started in 0.12**\r\n- Complete any outstanding issues related to pairing (for syncing) - Igor\r\n- Implement the 'Admin' role (issue #10114) - Mykhailo\r\n- 'Featured' category curation via curation dApp - Patryk\r\n- Any remaining work to pay off tech. debt related to mutual contacts - Mishka\r\n- When creating/editing token based permission, ability to search for and selecting Collectables from OpenSea - MichaelC\r\n\r\n**2. Channel token permissions**\r\n- Create, edit and delete channel token permissions in the permissions admin screens\r\n- This includes the \"no tokens required to view this channel\" permission\r\n- All user facing channel token permissions functionality e.g. what happens when a user tries to access a token gated channel they don't have the required tokens to access, what happens when a user only has permissions to view a channel, etc...\r\n- If a community is an open (not token gated at the community level) community, if a channel is token gated AND if **no** \"no tokens required to view this channel\" permission for that channel exists, then the channel should be automatically encrypted.  If token gating is removed from a channel, the channel should become unencrypted.\r\n- Asset (ERC-20) minting and airdropping functionality - GravityBlast\r\n\r\n**3. Add some type of cache in front of sqlite to ensure that writes don't block reads (Patryk?)**\r\n- It has been discovered that one of the causes of sometimes slow channel switching is that writes to sqlite block reads, and this is the cause of slow channel switching in many cases\r\n- Investigate the feasibility of (and if feasible implement) a general purpose cache for sqlite writes, which caches sqlite writes and then only writes them to sqlite in small chunks when no read operations are taking place (so that read operations are always prioritized, and not interrupted by writes).  Such a cache should cache all or almost all write requests from all areas of status-go\r\n\r\n**_OR_**\r\n\r\n- Perhaps it's time to bite the bullet and start the work needed to migrate both Status Desktop and Status Mobile from using sqlite to using PostgreSQL?\r\n\r\n**_OR_**\r\n\r\n- Perhaps there are some other possible solutions to this issue that should be explored before embarking on either of these large items?\r\n\r\n**4. Update app to use new 'Share URL' formats**\r\n- add functionality to status-go to generate the new 'Share URL' formats for sharing links to: User Profiles, Communities, Channel inside a Community\r\n- Update everywhere a user can share a URL from to use the new URL format\r\n- Ability to share a URL that points to a specific channel in a community (issue #10160)\r\n- Update all address inputs to accept a user pasting a 'share URL' into the input (in addition to being able to input the raw address).  This includes: Start new chat input, send contact request input in Settings, the import community key input, etc...\r\n- Update Status Desktops URL handler so that if Status is installed on a computer, when a user clicks on a Status 'Share URL' the app is launched (if not already running) and after signing in the user is automatically taken to the entity the Share URL represented inside the app.  e.g. if a user clicks on a URL for a Status Community, the user should be taken to the home screen for that community inside the Status App\r\n\r\n**5. Profile showcase backend***\r\n\r\n**6. Fix bugs, bugs and more bugs!**\r\n- The 0.13 release is targeted to be Status Desktop's first \"beta\" release, and the first release of Status Desktop that will be used by people outside of the Status Org.  So we want this release to be the best possible quality so it makes a good first impression  \r\n\r\n\r\n\r\n**--- For the Wallet team ---**\r\n\r\n1. Complete any outstanding development related to the activity screens\r\n2. New settings screens\r\n3. Fix 'backup from waku' bugs\r\n4. Fix keycard bugs\r\n5. Implement 'imported key and account' syncing and transfer between devices\r\n6. Transaction signing dialogue (if designs are ready)\r\n\r\n",
    "creator": {
      "login": "iurimatias",
      "id": 176720,
      "node_id": "MDQ6VXNlcjE3NjcyMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/176720?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/iurimatias",
      "html_url": "https://github.com/iurimatias",
      "followers_url": "https://api.github.com/users/iurimatias/followers",
      "following_url": "https://api.github.com/users/iurimatias/following{/other_user}",
      "gists_url": "https://api.github.com/users/iurimatias/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/iurimatias/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/iurimatias/subscriptions",
      "organizations_url": "https://api.github.com/users/iurimatias/orgs",
      "repos_url": "https://api.github.com/users/iurimatias/repos",
      "events_url": "https://api.github.com/users/iurimatias/events{/privacy}",
      "received_events_url": "https://api.github.com/users/iurimatias/received_events",
      "type": "User",
      "site_admin": false
    },
    "open_issues": 104,
    "closed_issues": 3,
    "state": "open",
    "created_at": "2023-02-13T19:04:13Z",
    "updated_at": "2023-05-02T20:59:24Z",
    "due_on": "2023-06-16T07:00:00Z",
    "closed_at": null
  },
  "comments": 2,
  "created_at": "2023-04-28T15:20:10Z",
  "updated_at": "2023-05-02T16:46:47Z",
  "closed_at": null,
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "As an owner node of a community that has token permissions, every membership request and every membership needs to be (regularly) checked to ensure they still own the necessary funds to be part of the community.\r\n\r\nThis includes checking ERC20 token balances and ERC721 token ownership on all supported chains.\r\nAt the moment we always check every supported chain always.\r\n\r\nOne way to improve this would be to have members tell the owner on which chains they'll find which funds. \r\nBased on that information, the owner node can then specifically query a subset of chains to check funds.\r\n\r\nTo make this work a few things will be needed:\r\n\r\n1. We need to change the protocol to support chain information (e.g. requirement is 200 USDC; chainID 1 => 20 USDC, chainID 1337 => 120 USDC)\r\n2. We need to figure out how we decide which chains will be used for that information, if the necessary funds live on multiple chains\r\n3. We also need to decide what the \"split\" going to be in case the funds live on multiple chains.\r\n\r\nre: 3): here's what I mean:\r\n\r\nSay the requirement to request access to a community is 2000 SNT.\r\nA user owns a wallet with 2000 SNT on Ethereum and 5000 SNT Arbitrum.\r\n\r\nNow there are various configurations that would fulfill the requirement\r\n\r\n=> ETH: 2000 SNT\r\n=> ARB: 2000 SNT\r\n=> ETH: 1000 SNT, ARB: 1000 SNT\r\n... // all other combinations that make 2000 SNT across supported chains\r\n\r\n^ In such a scenario, how do we decide which chain info will be attached to the membership request (and later preserved in the membership data) ?\r\n\r\n/cc @John-44 if you have thoughts on this, let me know",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/status-im/status-desktop/issues/10481/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/status-im/status-desktop/issues/10481/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/status-im/status-desktop/issues/comments/1531559493",
    "html_url": "https://github.com/status-im/status-desktop/issues/10481#issuecomment-1531559493",
    "issue_url": "https://api.github.com/repos/status-im/status-desktop/issues/10481",
    "id": 1531559493,
    "node_id": "IC_kwDOD5KrTM5bSb5F",
    "user": {
      "login": "jrainville",
      "id": 11926403,
      "node_id": "MDQ6VXNlcjExOTI2NDAz",
      "avatar_url": "https://avatars.githubusercontent.com/u/11926403?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jrainville",
      "html_url": "https://github.com/jrainville",
      "followers_url": "https://api.github.com/users/jrainville/followers",
      "following_url": "https://api.github.com/users/jrainville/following{/other_user}",
      "gists_url": "https://api.github.com/users/jrainville/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jrainville/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jrainville/subscriptions",
      "organizations_url": "https://api.github.com/users/jrainville/orgs",
      "repos_url": "https://api.github.com/users/jrainville/repos",
      "events_url": "https://api.github.com/users/jrainville/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jrainville/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-05-02T14:14:40Z",
    "updated_at": "2023-05-02T14:14:40Z",
    "author_association": "MEMBER",
    "body": ">  In such a scenario, how do we decide which chain info will be attached to the membership request (and later preserved in the membership data) ?\r\n\r\nI think we probably want to make the life of the user easier, so we should send the chain IDs of all the chains that contain SNT (as per the example).\r\n\r\nSo even if the ETH chain already has enough SNT, we send the ARB chain, just because we know it's a chain that the user uses for SNT, so they might swap around those two chains.\r\n\r\nThat's my own opinion, maybe some people have some objections. Obviously, this solution is more costly in terms of messages sent and stored. However, we still have the \"smart\" code where it will stop sending balance requests if the permission is fulfilled.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/status-im/status-desktop/issues/comments/1531559493/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/status-im/status-desktop/issues/comments/1531808064",
    "html_url": "https://github.com/status-im/status-desktop/issues/10481#issuecomment-1531808064",
    "issue_url": "https://api.github.com/repos/status-im/status-desktop/issues/10481",
    "id": 1531808064,
    "node_id": "IC_kwDOD5KrTM5bTYlA",
    "user": {
      "login": "jrainville",
      "id": 11926403,
      "node_id": "MDQ6VXNlcjExOTI2NDAz",
      "avatar_url": "https://avatars.githubusercontent.com/u/11926403?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jrainville",
      "html_url": "https://github.com/jrainville",
      "followers_url": "https://api.github.com/users/jrainville/followers",
      "following_url": "https://api.github.com/users/jrainville/following{/other_user}",
      "gists_url": "https://api.github.com/users/jrainville/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jrainville/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jrainville/subscriptions",
      "organizations_url": "https://api.github.com/users/jrainville/orgs",
      "repos_url": "https://api.github.com/users/jrainville/repos",
      "events_url": "https://api.github.com/users/jrainville/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jrainville/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-05-02T16:46:47Z",
    "updated_at": "2023-05-02T16:46:47Z",
    "author_association": "MEMBER",
    "body": "Another question @0x-r4bbit and I had in our meeting is whether or not we want this to be backwards compatible.\r\n\r\nSince this will create a new field in the community description's permission list (for the chain ID), older versions would not have it.\r\n\r\n---\r\n\r\n### Option 1: Keep the old code that checks all chains\r\n\r\nFor accounts that have not updated yet, ie they do not have the chain IDs listed, we use the old code where we check all chains.\r\nOnce they update, we create a \"migration\" that sends the chains to the owner to update.\r\n\r\n#### Pros:\r\n- Good experience for users since they do not have anything to do\r\n\r\n#### Cons:\r\n- Keeps old code\r\n  - It's possible to incorporate the new code with that old one, but it would still be more logic that is needed\r\n  - We still have the problem that if users don't update, we will poll all chains\r\n\r\n---\r\n\r\n### Option 2: Kick out users that are using the old version\r\n\r\nBreak backwards compatibility. We just kick the users and don't accept new ones if they do not send the chain IDs.\r\n\r\nIt forces the users to update\r\n\r\n#### Pros:\r\n- Only uses the new code (least effort option)\r\n- Only polls the right chains\r\n\r\n#### Cons:\r\n- Confusing for users, since they will be kicked without info\r\n  - Might be acceptable since we are only using it for Status CCs)\r\n\r\n---\r\n\r\n### Option 3: Have the owner node migrate the users\r\n\r\nWhen the Owner updates to the new version, they are the one that performs a migration while doing the token checks.\r\n\r\nWhat this means is that while doing the loops of all chains, the owner notes which chain has the wanted token and adds them in the new `chainId`s field for that user.\r\n\r\nThis would be necessary only for accounts that didn't send their chain ids.\r\n\r\n#### Pros:\r\n- User has nothing to do\r\n- We would only poll all chains once, then we use the new approach for all account\r\n\r\n#### Cons:\r\n- A bit more code is needed on the admin side\r\n\r\n---\r\n\r\n### Conclusion\r\n\r\nIMO, the solution 2 and 3 are the best ones. Option 3 is better for users, as it migrates more intuitively and the owner node is already the source of truth. Option 2 is the simpler one for us devs, but we need to communicate why it doesn't work for those that haven't updated.\r\n\r\nFeel free to add other options and discuss the ones I brought up.",
    "reactions": {
      "url": "https://api.github.com/repos/status-im/status-desktop/issues/comments/1531808064/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
