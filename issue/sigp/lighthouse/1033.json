{
  "url": "https://api.github.com/repos/sigp/lighthouse/issues/1033",
  "repository_url": "https://api.github.com/repos/sigp/lighthouse",
  "labels_url": "https://api.github.com/repos/sigp/lighthouse/issues/1033/labels{/name}",
  "comments_url": "https://api.github.com/repos/sigp/lighthouse/issues/1033/comments",
  "events_url": "https://api.github.com/repos/sigp/lighthouse/issues/1033/events",
  "html_url": "https://github.com/sigp/lighthouse/issues/1033",
  "id": 603848083,
  "node_id": "MDU6SXNzdWU2MDM4NDgwODM=",
  "number": 1033,
  "title": "Intermittent invalid Discv5 session w/ enr=None causes panic",
  "user": {
    "login": "jrhea",
    "id": 5555162,
    "node_id": "MDQ6VXNlcjU1NTUxNjI=",
    "avatar_url": "https://avatars.githubusercontent.com/u/5555162?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jrhea",
    "html_url": "https://github.com/jrhea",
    "followers_url": "https://api.github.com/users/jrhea/followers",
    "following_url": "https://api.github.com/users/jrhea/following{/other_user}",
    "gists_url": "https://api.github.com/users/jrhea/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jrhea/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jrhea/subscriptions",
    "organizations_url": "https://api.github.com/users/jrhea/orgs",
    "repos_url": "https://api.github.com/users/jrhea/repos",
    "events_url": "https://api.github.com/users/jrhea/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jrhea/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 2,
  "created_at": "2020-04-21T09:25:37Z",
  "updated_at": "2020-04-21T20:12:34Z",
  "closed_at": "2020-04-21T11:29:49Z",
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "## Description\r\n\r\nWhen connecting to the topaz testnet it eventually crashes with this error:\r\n\r\n```\r\nthread 'tokio-runtime-worker' panicked at 'Should never be None at this point', src/libcore/option.rs:1188:5\r\n```\r\n\r\n## Version\r\n\r\nlibp2p: \r\n```\r\nlibp2p =  { git = \"https://github.com/sigp/rust-libp2p\", rev = \"37b7e9349cf3e724da02bbd4b5dd6c054c2d56d3\", package = \"libp2p\"}\r\n```\r\n> Note:  using prrkl/imp & mothra instead of lighthouse\r\n\r\n## Present Behaviour\r\n\r\nI can connect to the topaz testnet, discover peers, and listen to gossip messages for 30 mins just fine, but eventually the error mentioned above crashes the app.  I have recreated the issue twice and captured the logs when running with: RUST_LOG=libp2p_discv5=debug\r\n\r\nThe problem starts when we send a `RandomPacket` to Node_Id: `0xce3f..25b4`\r\n\r\n```\r\n[2020-04-21T03:51:22Z DEBUG libp2p_discv5::behaviour] Sending RPC Request: FindNode { distance: 252 } to node: 0xce3f..25b4\r\n[2020-04-21T03:51:22Z DEBUG libp2p_discv5::session_service] No session established, sending a random packet to: 0xce3f..25b4 \r\n```\r\nAfter a timeout elapses it is sent again:\r\n```\r\n[2020-04-21T03:51:33Z DEBUG libp2p_discv5::session_service] Resending message: RandomPacket { tag: [175, 216, 26, 111, 250, 203, 9, 215, 34, 146, 151, 242, 200, 167, 196, 78, 54, 184, 109, 44, 93, 219, 104, 187, 156, 156, 233, 63, 64, 109, 232, 36], auth_tag: [87, 26, 94, 20, 96, 111, 241, 216, 69, 225, 39, 64], data: [2, 188, 126, 225, 255, 252, 120, 26, 225, 29, 189, 251, 148, 66, 237, 28, 101, 171, 196, 63, 214, 75, 188, 84, 181, 176, 143, 231, 215, 95, 79, 147, 179, 240, 168, 116, 133, 2, 65, 146, 116, 128, 144, 23] } to node: 0xce3f..25b4\r\n```\r\n  - `session_service.rs::handle_message()`: we find the session where RandomPacket was sent (line: 526)\r\n - line 543: detects `session.is_random_sent()` is true and \"upgrades it to WhoAreYou\" and inserts it into the list of events to be processed - `self.events`\r\n - on line 565:` let message = match session.decrypt_message(auth_tag, message, &tag)`  results in error \r\n - on line then on line 573: the error message you see below is posted:\r\n- on line 575-580: we add A SECOND WhoAreYou (in addition to the one from line 543) to `self.events`\r\n- on line 574: self.sessions.remove(&src_id); we remove the session where the random packet was originally sent \r\n```\r\n[2020-04-21T03:51:34Z DEBUG libp2p_discv5::session_service] Message from node: 0xce3f..25b4 is not encrypted with known session keys. Requesting a WHOAREYOU packet\r\n```\r\nA few things to note at this point:\r\n1)  we remove the RandomPacket session from `self.sessions`, but left it in `self.pending_requests`\r\n2) We have now added two `WhoAreYou` events  to `self.events`\r\n\r\n\r\nNext, the following code in src/behaviour.rs: line: 1084 \r\n```rust\r\n     // do not know of this peer\r\n    debug!(\"NodeId unknown, requesting ENR. NodeId: {}\", src_id);\r\n    self.service.send_whoareyou(src, &src_id, 0, None, auth_tag)\r\n```\r\nresults in this error message\r\n```\r\n2020-04-21T03:51:34Z DEBUG libp2p_discv5::behaviour] NodeId unknown, requesting ENR. NodeId: 0xce3f..25b4\r\n```\r\nNotice that the call to: `self.service.send_whoareyou(src, &src_id, 0, None, auth_tag)`  passes in None for remote_enr.  Next, at src/session_service.rs: line 289 inside `send_whoareyou()` a previous session is NOT found for the node_id: 0xce3f so remote_enr stays None\r\n\r\n\r\nNext we see the following message and\r\n- `new_whoareyou(node_id, enr_seq, remote_enr, auth_tag)` is called with remote_enr=None  resulting in a new session that is inserted into self.sessions on session_service.rs: line 301\r\n```\r\n[2020-04-21T03:51:34Z DEBUG libp2p_discv5::session_service] Sending WHOAREYOU packet to: 0xce3f..25b4 \r\n```\r\n\r\nRemember when we inserted two WHOAREYOU requests into the even queue?  I believe we now see the second one processed.  I think it is benign bc the code recognizes that an existing session exists, but it should probably be reviewed.\r\n```\r\n[2020-04-21T03:51:34Z DEBUG libp2p_discv5::behaviour] NodeId unknown, requesting ENR. NodeId: 0xce3f..25b4  \r\n[2020-04-21T03:51:34Z WARN  libp2p_discv5::session_service] Session exists. WhoAreYou packet not sent               \r\n```\r\n\r\nfinally, we have the final log entry originating from `handle_whoareyou()` session_service.rs  followed by the error:\r\n```\r\n[2020-04-21T03:51:34Z DEBUG libp2p_discv5::session_service] Received a WHOAREYOU packet. Source: 192.252.232.65:12000 \r\nthread 'tokio-runtime-worker' panicked at 'Should never be None at this point', src/libcore/option.rs:1188:5\r\n```\r\n\r\nMy take on what is happening is:\r\n- on line: 339 we retrieve the req corresponding to a RandomPacket request from self.pending_requests\r\n- on line: 343 we the log prints out telling us that we are processing a WHOAREYOU packet (YIKES)\r\n\r\n\r\n #### Remember, the session for the RandomPacket was removed, but not the pending request.  I (think) this means that we have a session with a Enr=None corresponding to a pending request for a RandomPacket. ####\r\n\r\nIf the pending_request had been a WhoAreYou, then the following code on line 377 would have exited the routine:\r\n\r\n```rust\r\nPacket::WhoAreYou { .. } => {\r\n                    // a WhoAreYou packet was received in response to a WHOAREYOU.\r\n                    warn!(\"A WHOAREYOU packet was received in response to a WHOAREYOU. Dropping packet and marking messages as failed\");\r\n                    return Err(());\r\n                }\r\n```\r\n\r\ninstead condition on line 360 evaluates true:\r\n```rust\r\n               Packet::RandomPacket { .. } => {\r\n                    // get the messages that are waiting for an established session\r\n                    let messages = self\r\n                        .pending_messages\r\n                        .get_mut(&src_id)\r\n                        .ok_or_else(|| warn!(\"No pending messages found for WHOAREYOU request.\"))?;\r\n\r\n                    if messages.is_empty() {\r\n                        // This could happen for an established connection and another peer (from the\r\n                        // the same socketaddr) sends a WHOAREYOU packet\r\n                        debug!(\"No pending messages found for WHOAREYOU request.\");\r\n                        return Err(());\r\n                    }\r\n                    // select the first message in the queue\r\n                    messages.remove(0)\r\n                }\r\n```\r\n\r\nand as result on line 400 `session.encrypt_with_header()` is called:\r\n\r\n```rust\r\n\r\n        let (encryption_key, decryption_key, auth_resp_key, ephem_pubkey) =\r\n            crypto::generate_session_keys(\r\n                local_node_id,\r\n                self.remote_enr\r\n                    .as_ref()\r\n                    .expect(\"Should never be None at this point\"),\r\n                id_nonce,\r\n            )?;\r\n```\r\nand the error is triggered. \r\n\r\nHere is a link to the full log: \r\n[imp.log](https://github.com/sigp/lighthouse/files/4508976/imp.log)\r\n\r\n## Steps to resolve\r\n\r\n#### Problem 1:\r\nThe fact that the session for the RandomPacket is removed from the sessions list in in src/session_service.rs `handle_message()` later causes a new session to be created with a an ENR=None.  The problem is made worse by the fact that the RandomPacket request still exists in the pending_requests list.  If it wasn't then `handle_whoareyou()` would have exited the routine with an error at line 371.  \r\n\r\nIs there a way to synchronize the sessions and pending_requests more easily?\r\n\r\n\r\n\r\n#### Problem 2 (may not be critical, but should be looked at):\r\n\r\nin src/session_service.rs `handle_message()`\r\n\r\ntwo WHOAREYOU's are added to the event queue:\r\n\r\n1. line 542-550\r\n```rust\r\n        // if we have sent a random packet, upgrade to a WhoAreYou request\r\n        if session.is_random_sent() {\r\n            let event = SessionEvent::WhoAreYouRequest {\r\n                src,\r\n                src_id: src_id.clone(),\r\n                auth_tag,\r\n            };\r\n            self.events.push_back(event);\r\n        }\r\n```\r\n\r\n2.  line 564-580\r\n```rust\r\n        // attempt to decrypt and process the message.\r\n        let message = match session.decrypt_message(auth_tag, message, &tag) {\r\n            Ok(m) => ProtocolMessage::decode(m)\r\n                .map_err(|e| warn!(\"Failed to decode message. Error: {:?}\", e))?,\r\n            Err(_) => {\r\n                // We have a session, but the message could not be decrypted. It is likely the node\r\n                // sending this message has dropped their session. In this case, this message is a\r\n                // Random packet and we should reply with a WHOAREYOU.\r\n                // This means we need to drop the current session and re-establish.\r\n                debug!(\"Message from node: {} is not encrypted with known session keys. Requesting a WHOAREYOU packet\", src_id);\r\n                self.sessions.remove(&src_id);\r\n                let event = SessionEvent::WhoAreYouRequest {\r\n                    src,\r\n                    src_id: src_id.clone(),\r\n                    auth_tag,\r\n                };\r\n                self.events.push_back(event);\r\n                return Ok(());\r\n            }\r\n        };\r\n```\r\n",
  "closed_by": {
    "login": "AgeManning",
    "id": 7454587,
    "node_id": "MDQ6VXNlcjc0NTQ1ODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/7454587?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/AgeManning",
    "html_url": "https://github.com/AgeManning",
    "followers_url": "https://api.github.com/users/AgeManning/followers",
    "following_url": "https://api.github.com/users/AgeManning/following{/other_user}",
    "gists_url": "https://api.github.com/users/AgeManning/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/AgeManning/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/AgeManning/subscriptions",
    "organizations_url": "https://api.github.com/users/AgeManning/orgs",
    "repos_url": "https://api.github.com/users/AgeManning/repos",
    "events_url": "https://api.github.com/users/AgeManning/events{/privacy}",
    "received_events_url": "https://api.github.com/users/AgeManning/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/sigp/lighthouse/issues/1033/reactions",
    "total_count": 1,
    "+1": 1,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/sigp/lighthouse/issues/1033/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/sigp/lighthouse/issues/comments/617115904",
    "html_url": "https://github.com/sigp/lighthouse/issues/1033#issuecomment-617115904",
    "issue_url": "https://api.github.com/repos/sigp/lighthouse/issues/1033",
    "id": 617115904,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYxNzExNTkwNA==",
    "user": {
      "login": "AgeManning",
      "id": 7454587,
      "node_id": "MDQ6VXNlcjc0NTQ1ODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7454587?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/AgeManning",
      "html_url": "https://github.com/AgeManning",
      "followers_url": "https://api.github.com/users/AgeManning/followers",
      "following_url": "https://api.github.com/users/AgeManning/following{/other_user}",
      "gists_url": "https://api.github.com/users/AgeManning/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/AgeManning/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/AgeManning/subscriptions",
      "organizations_url": "https://api.github.com/users/AgeManning/orgs",
      "repos_url": "https://api.github.com/users/AgeManning/repos",
      "events_url": "https://api.github.com/users/AgeManning/events{/privacy}",
      "received_events_url": "https://api.github.com/users/AgeManning/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-04-21T11:18:43Z",
    "updated_at": "2020-04-21T11:18:43Z",
    "author_association": "MEMBER",
    "body": "@jrhea Thank you VERY much for this detailed trace of this error. Has saved me lots of time!!\r\n\r\nI think what you are seeing here is the following:\r\n- You are trying to discover a new node\r\n- You send a RandomPacket to the new node to establish an encryption handshake\r\n- Based on whatever config value is set for the timeout of a packet, the random packet times out. \r\n- You have `retries` set to something other than 1 so your node attempts the random packet again. \r\n- For whatever reason, the node you are connecting to has a session established with you, so tried to send you an encrypted message, or is also sending you a random packet to discover you. \r\n\r\nThe current implementation was expecting a WHOAREYOU response to the random packet, but got an encrypted message. The logic should have been to ignore the original random packet set and instead send a WHOAREYOU in response to this new random packet. The code missed a `return` and continued to try to decrypt the message without knowing any keys (this is the code path that duplicated WHOAREYOU's in the events). \r\n\r\n- Your node does successfully send a WHOAREYOU packet in response to this encrypted message. \r\n- The node is slow, and finally responds with it's WHOAREYOU response to your original (now expired) RandomPacket. Because the RandomPacket was not removed from `self.pending_requests` as you rightfully point out, we don't drop this packet instead try to process it, assuming the session state is still in the \"random_sent\" state (but we've upgraded to a whoareyou). Whoareyou states cannot establish any kind of crypto and we get the error you have seen. \r\n\r\nThe logic should go:\r\n- Receive encrypted message after we sent a random request, remove random request, and ask for a WhoAreYou (keeping the random session as is). \r\n- The behaviour looks for a better ENR, if it finds one it uses it, if not, it uses the enr that is in the existing random session. \r\n- Sends the WhoAreYou and awaits the response\r\n- Drops old WhoareYou packets as they no longer match any random request. \r\n\r\nI've made these changes in this commit: https://github.com/sigp/rust-libp2p/commit/46415e9467a42e70c6bb3d2525354e648867c6a3\r\n\r\nI've merged this into lighthouse. Let me know if this doesn't resolve your issue.\r\n\r\nThanks again!\r\n \r\nI agree there should be some kind of re-write that simplifies a lot of this timing logic and complexities. When it was first written, the idea was to keep layers, the behaviour layer, the session layer then the packet layer. Each of them operate independently with each being somewhat opaque to each other. i.e someone working on the queries in the behaviour can be completely ignorant about any handshakes and packet timing being established. \r\nThe sessions are long-lasting and individual packets time-out quickly which is why they are distinct. I also have no heartbeat, where everything gets checked and updated, instead opted for exact timings for everything which leads to arbitrary events firing all the time. I'm always open to suggestions on code improvement, maybe one day I'll update this given some free time :)\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/sigp/lighthouse/issues/comments/617115904/reactions",
      "total_count": 3,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 2,
      "confused": 0,
      "heart": 1,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/sigp/lighthouse/issues/comments/617120880",
    "html_url": "https://github.com/sigp/lighthouse/issues/1033#issuecomment-617120880",
    "issue_url": "https://api.github.com/repos/sigp/lighthouse/issues/1033",
    "id": 617120880,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYxNzEyMDg4MA==",
    "user": {
      "login": "AgeManning",
      "id": 7454587,
      "node_id": "MDQ6VXNlcjc0NTQ1ODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7454587?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/AgeManning",
      "html_url": "https://github.com/AgeManning",
      "followers_url": "https://api.github.com/users/AgeManning/followers",
      "following_url": "https://api.github.com/users/AgeManning/following{/other_user}",
      "gists_url": "https://api.github.com/users/AgeManning/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/AgeManning/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/AgeManning/subscriptions",
      "organizations_url": "https://api.github.com/users/AgeManning/orgs",
      "repos_url": "https://api.github.com/users/AgeManning/repos",
      "events_url": "https://api.github.com/users/AgeManning/events{/privacy}",
      "received_events_url": "https://api.github.com/users/AgeManning/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-04-21T11:29:49Z",
    "updated_at": "2020-04-21T11:29:49Z",
    "author_association": "MEMBER",
    "body": "I'm preemptively consider this closed, please re-open if the bug persists.",
    "reactions": {
      "url": "https://api.github.com/repos/sigp/lighthouse/issues/comments/617120880/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
