{
  "url": "https://api.github.com/repos/sigp/lighthouse/issues/2946",
  "repository_url": "https://api.github.com/repos/sigp/lighthouse",
  "labels_url": "https://api.github.com/repos/sigp/lighthouse/issues/2946/labels{/name}",
  "comments_url": "https://api.github.com/repos/sigp/lighthouse/issues/2946/comments",
  "events_url": "https://api.github.com/repos/sigp/lighthouse/issues/2946/events",
  "html_url": "https://github.com/sigp/lighthouse/issues/2946",
  "id": 1110054675,
  "node_id": "I_kwDOCFeAzc5CKhcT",
  "number": 2946,
  "title": "Optimistic sync changes for HTTP API",
  "user": {
    "login": "paulhauner",
    "id": 6660660,
    "node_id": "MDQ6VXNlcjY2NjA2NjA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6660660?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/paulhauner",
    "html_url": "https://github.com/paulhauner",
    "followers_url": "https://api.github.com/users/paulhauner/followers",
    "following_url": "https://api.github.com/users/paulhauner/following{/other_user}",
    "gists_url": "https://api.github.com/users/paulhauner/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/paulhauner/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/paulhauner/subscriptions",
    "organizations_url": "https://api.github.com/users/paulhauner/orgs",
    "repos_url": "https://api.github.com/users/paulhauner/repos",
    "events_url": "https://api.github.com/users/paulhauner/events{/privacy}",
    "received_events_url": "https://api.github.com/users/paulhauner/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 3743113288,
      "node_id": "LA_kwDOCFeAzc7fG2BI",
      "url": "https://api.github.com/repos/sigp/lighthouse/labels/bellatrix",
      "name": "bellatrix",
      "color": "A906A4",
      "default": false,
      "description": "Required to support the Bellatrix Upgrade"
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": {
    "login": "paulhauner",
    "id": 6660660,
    "node_id": "MDQ6VXNlcjY2NjA2NjA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6660660?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/paulhauner",
    "html_url": "https://github.com/paulhauner",
    "followers_url": "https://api.github.com/users/paulhauner/followers",
    "following_url": "https://api.github.com/users/paulhauner/following{/other_user}",
    "gists_url": "https://api.github.com/users/paulhauner/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/paulhauner/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/paulhauner/subscriptions",
    "organizations_url": "https://api.github.com/users/paulhauner/orgs",
    "repos_url": "https://api.github.com/users/paulhauner/repos",
    "events_url": "https://api.github.com/users/paulhauner/events{/privacy}",
    "received_events_url": "https://api.github.com/users/paulhauner/received_events",
    "type": "User",
    "site_admin": false
  },
  "assignees": [
    {
      "login": "paulhauner",
      "id": 6660660,
      "node_id": "MDQ6VXNlcjY2NjA2NjA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6660660?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/paulhauner",
      "html_url": "https://github.com/paulhauner",
      "followers_url": "https://api.github.com/users/paulhauner/followers",
      "following_url": "https://api.github.com/users/paulhauner/following{/other_user}",
      "gists_url": "https://api.github.com/users/paulhauner/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/paulhauner/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/paulhauner/subscriptions",
      "organizations_url": "https://api.github.com/users/paulhauner/orgs",
      "repos_url": "https://api.github.com/users/paulhauner/repos",
      "events_url": "https://api.github.com/users/paulhauner/events{/privacy}",
      "received_events_url": "https://api.github.com/users/paulhauner/received_events",
      "type": "User",
      "site_admin": false
    }
  ],
  "milestone": null,
  "comments": 4,
  "created_at": "2022-01-21T04:51:41Z",
  "updated_at": "2022-02-17T23:21:06Z",
  "closed_at": "2022-02-17T23:21:06Z",
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "## Overview\r\n\r\nThis issue replaces #2945. I've noticed that my [opt sync PR](https://github.com/ethereum/consensus-specs/pull/2770) is not granular enough regarding the changes required and it would be nice if clients were consistent (but not a must-have).\r\n\r\nIf this format turns out to be helpful, I might propose to add it to the opt sync spec.\r\n\r\n## Table of API changes for optimistic sync\r\n\r\nThe table lists all [beacon-APIs][https://github.com/ethereum/beacon-APIs/tree/4319e74dd0a17f864fced64cccbff910ca0c9f5e] endpoints. All the changes are described in more detail later in the document.\r\n\r\n| Path | Method | Change?\r\n|---|---|---|\r\n/eth/v1/beacon/genesis | GET | No change.\r\n/eth/v1/beacon/states/{state_id}/root | GET | Change: `block_id` or `state_id`\r\n/eth/v1/beacon/states/{state_id}/fork | GET | Change: `block_id` or `state_id`\r\n/eth/v1/beacon/states/{state_id}/finality_checkpoints | GET | Change: `block_id` or `state_id`\r\n/eth/v1/beacon/states/{state_id}/validators | GET | Change: `block_id` or `state_id`\r\n/eth/v1/beacon/states/{state_id}/validators/{validator_id} | GET | Change: `block_id` or `state_id`\r\n/eth/v1/beacon/states/{state_id}/validator_balances | GET | Change: `block_id` or `state_id`\r\n/eth/v1/beacon/states/{state_id}/committees | GET | Change: `block_id` or `state_id`\r\n/eth/v1/beacon/states/{state_id}/sync_committees | GET | Change: `block_id` or `state_id`\r\n/eth/v1/beacon/headers | GET | Change: headers\r\n/eth/v1/beacon/headers/{block_id} | GET | Change: `block_id` or `state_id`\r\n/eth/v1/beacon/blocks | POST | Change: block publishing\r\n/eth/v1/beacon/blocks/{block_id} | GET | Change: `block_id` or `state_id`\r\n/eth/v2/beacon/blocks/{block_id} | GET | Change: `block_id` or `state_id`\r\n/eth/v1/beacon/blocks/{block_id}/root | GET | Change: `block_id` or `state_id`\r\n/eth/v1/beacon/blocks/{block_id}/attestations | GET | Change: `block_id` or `state_id`\r\n|||\r\n/eth/v1/beacon/pool/attestations | GET | No change.\r\n/eth/v1/beacon/pool/attestations | POST | No Change (see attestation publishing).\r\n/eth/v1/beacon/pool/attester_slashings | GET/POST | No change.\r\n/eth/v1/beacon/pool/proposer_slashings | GET/POST | No change.\r\n/eth/v1/beacon/pool/sync_committees | GET/POST | No change (see sync publishing).\r\n/eth/v1/beacon/pool/voluntary_exits | GET/POST | No change.\r\n|||\r\n/eth/v1/debug/beacon/states/{state_id} | GET | Change: `block_id` or `state_id`\r\n/eth/v2/debug/beacon/states/{state_id} | GET | Change: `block_id` or `state_id`\r\n/eth/v1/debug/beacon/heads | GET | Change: debug heads\r\n|||\r\n/eth/v1/node/identity | GET | No change.\r\n/eth/v1/node/peers | GET | No change.\r\n/eth/v1/node/peers/{peer_id} | GET | No change.\r\n/eth/v1/node/peer_count | GET | No change.\r\n/eth/v1/node/version | GET | No change.\r\n/eth/v1/node/syncing | GET | Node syncing.\r\n/eth/v1/node/health | GET | No change.\r\n|||\r\n/eth/v1/config/fork_schedule | GET  | No change.\r\n/eth/v1/config/spec | GET  | No change.\r\n/eth/v1/config/deposit_contract | GET  | No change.\r\n|||\r\n/eth/v1/validator/duties/attester/{epoch} | POST | No change.\r\n/eth/v1/validator/duties/proposer/{epoch} | GET | No change.\r\n/eth/v1/validator/duties/sync/{epoch} | POST | No change.\r\n/eth/v1/validator/blocks/{slot} | GET | Change: block production\r\n/eth/v2/validator/blocks/{slot} | GET | As per v1 ^^\r\n/eth/v1/validator/attestation_data | GET | Change: attestation production\r\n/eth/v1/validator/aggregate_attestation | GET | Change: attestation production\r\n/eth/v1/validator/aggregate_and_proofs | POST | Change: attestation publishing\r\n/eth/v1/validator/beacon_committee_subscriptions | POST | No change.\r\n/eth/v1/validator/sync_committee_subscriptions | POST | No change.\r\n/eth/v1/validator/sync_committee_contribution | GET | Change: sync production\r\n/eth/v1/validator/contribution_and_proofs | POST | Change: sync publishing\r\n\r\n/eth/v1/events | SSE | Change: event stream\r\n\r\n## Change details\r\n\r\n#### Change: `block_id` or `state_id`\r\n[block_id or state_id]: #block_id-or-state_id\r\n\r\n- `head`: return the [`latest_verified_ancestor`][].\r\n- `genesis`: always return the genesis block (it's never optimistic).\r\n- `finalized`: if the finalized checkpoint is optimistic, return a 503.\r\n- `justified`: if the justified checkpoint is optimistic, return a 503.\r\n- `<slot>`: return a 503 if the block is optimistic.\r\n- `<root>`: return a 503 if the block is optimistic.\r\n\r\nNote, it might be onerous to determine if some ancient `<slot>` or `<root>`\r\nblocks are optimistic or not. I'd say that if their *prior* to the finalized\r\ncheckpoint (i.e., no longer in fork choice) then just use the state of the\r\nfinalized checkpoint. I.e., if the finalized checkpoint is optimistic, assume\r\nall prior block are as well.\r\n\r\n#### Change: headers.\r\n\r\nIf query parameters are *not* provided, use the [`latest_verified_ancestor`][https://github.com/sigp/consensus-specs/blob/opt-sync-2/sync/optimistic.md#helpers].\r\n\r\nIf query parameters are provided, return a 503 if the matching block is optimistic.\r\n\r\n#### Change: block publishing\r\n\r\nIf the block is valid and a candidate for optimistic import, import the block and return a 200 OK response.\r\n\r\n#### Change: block production\r\n\r\nNever return a block with an optimistic parent.\r\n\r\nUltimately, this should require no change since\r\n[`engine_getPayloadV1`](https://github.com/ethereum/execution-apis/blob/main/src/engine/specification.md#engine_getpayloadv1)\r\nshould return an error if the parent is unknown or invalid.\r\n\r\n#### Change: attestation publishing\r\n\r\nNo change is required. Assume that if a validator signed a message then it was\r\nconfident of the validity of the head block.\r\n\r\n#### Change: attestation production\r\n\r\nFor any `AttestationData` included in a request or response, return an error\r\nwhere `attestation_data.beacon_block_root` is optimistic.\r\n\r\n#### Change: sync publishing\r\n\r\nNo change is required. Assume that if a validator signed a message then it was\r\nconfident of the validity of the head block.\r\n\r\n#### Change: sync production\r\n\r\nNo change is required. Assume that if a validator signed a message then it was\r\nconfident of the validity of the head block.\r\n\r\n#### Change: node syncing\r\n\r\nNo change is required, however it might be prudent to add a `is_optimistic: bool` to the returned object. This would require an API to the specs repo.\r\n\r\n#### Change: debug heads (WIP)\r\n\r\nI'm not sure of this one. I'm tempted to leave it as-is since it's a debug endpoint and more useful that way.\r\n\r\n#### Change: event stream (WIP)\r\n\r\nI'm not sure of this one. Perhaps we should add an `is_optimistic` flag to indicate if a block or head is optimistic or not. This requires more thought.",
  "closed_by": {
    "login": "paulhauner",
    "id": 6660660,
    "node_id": "MDQ6VXNlcjY2NjA2NjA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6660660?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/paulhauner",
    "html_url": "https://github.com/paulhauner",
    "followers_url": "https://api.github.com/users/paulhauner/followers",
    "following_url": "https://api.github.com/users/paulhauner/following{/other_user}",
    "gists_url": "https://api.github.com/users/paulhauner/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/paulhauner/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/paulhauner/subscriptions",
    "organizations_url": "https://api.github.com/users/paulhauner/orgs",
    "repos_url": "https://api.github.com/users/paulhauner/repos",
    "events_url": "https://api.github.com/users/paulhauner/events{/privacy}",
    "received_events_url": "https://api.github.com/users/paulhauner/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/sigp/lighthouse/issues/2946/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/sigp/lighthouse/issues/2946/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/sigp/lighthouse/issues/comments/1018181487",
    "html_url": "https://github.com/sigp/lighthouse/issues/2946#issuecomment-1018181487",
    "issue_url": "https://api.github.com/repos/sigp/lighthouse/issues/2946",
    "id": 1018181487,
    "node_id": "IC_kwDOCFeAzc48sDdv",
    "user": {
      "login": "paulhauner",
      "id": 6660660,
      "node_id": "MDQ6VXNlcjY2NjA2NjA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6660660?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/paulhauner",
      "html_url": "https://github.com/paulhauner",
      "followers_url": "https://api.github.com/users/paulhauner/followers",
      "following_url": "https://api.github.com/users/paulhauner/following{/other_user}",
      "gists_url": "https://api.github.com/users/paulhauner/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/paulhauner/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/paulhauner/subscriptions",
      "organizations_url": "https://api.github.com/users/paulhauner/orgs",
      "repos_url": "https://api.github.com/users/paulhauner/repos",
      "events_url": "https://api.github.com/users/paulhauner/events{/privacy}",
      "received_events_url": "https://api.github.com/users/paulhauner/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-01-21T04:59:26Z",
    "updated_at": "2022-01-21T04:59:26Z",
    "author_association": "MEMBER",
    "body": "This issue is not ready for implementation yet, there's still some more thinking to be done.",
    "reactions": {
      "url": "https://api.github.com/repos/sigp/lighthouse/issues/comments/1018181487/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/sigp/lighthouse/issues/comments/1018185842",
    "html_url": "https://github.com/sigp/lighthouse/issues/2946#issuecomment-1018185842",
    "issue_url": "https://api.github.com/repos/sigp/lighthouse/issues/2946",
    "id": 1018185842,
    "node_id": "IC_kwDOCFeAzc48sEhy",
    "user": {
      "login": "paulhauner",
      "id": 6660660,
      "node_id": "MDQ6VXNlcjY2NjA2NjA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6660660?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/paulhauner",
      "html_url": "https://github.com/paulhauner",
      "followers_url": "https://api.github.com/users/paulhauner/followers",
      "following_url": "https://api.github.com/users/paulhauner/following{/other_user}",
      "gists_url": "https://api.github.com/users/paulhauner/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/paulhauner/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/paulhauner/subscriptions",
      "organizations_url": "https://api.github.com/users/paulhauner/orgs",
      "repos_url": "https://api.github.com/users/paulhauner/repos",
      "events_url": "https://api.github.com/users/paulhauner/events{/privacy}",
      "received_events_url": "https://api.github.com/users/paulhauner/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-01-21T05:09:25Z",
    "updated_at": "2022-01-21T05:11:01Z",
    "author_association": "MEMBER",
    "body": "Another, completely different, approach to this is to allow the beacon node to return info about execution-optimistic chains as if they were fully valid. Perhaps a `is_execution_optimistic: bool` value could be added wherever the response involves an execution-optimistic assumption.\r\n\r\nThis approach is appealing because it doesn't break any of the mechanisms that allow validators to follow the head of the optimistic chain. I believe that validators should follow the duties of the canonical chain, even if it's optimistic. However, validators should *never* produce/sign a message about an optimistic chain. Ensuring validators can follow the duties of an optimistic canonical chain helps ensure that they will be able to do their duties as soon as the chain is fully verified.",
    "reactions": {
      "url": "https://api.github.com/repos/sigp/lighthouse/issues/comments/1018185842/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/sigp/lighthouse/issues/comments/1029534685",
    "html_url": "https://github.com/sigp/lighthouse/issues/2946#issuecomment-1029534685",
    "issue_url": "https://api.github.com/repos/sigp/lighthouse/issues/2946",
    "id": 1029534685,
    "node_id": "IC_kwDOCFeAzc49XXPd",
    "user": {
      "login": "paulhauner",
      "id": 6660660,
      "node_id": "MDQ6VXNlcjY2NjA2NjA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6660660?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/paulhauner",
      "html_url": "https://github.com/paulhauner",
      "followers_url": "https://api.github.com/users/paulhauner/followers",
      "following_url": "https://api.github.com/users/paulhauner/following{/other_user}",
      "gists_url": "https://api.github.com/users/paulhauner/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/paulhauner/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/paulhauner/subscriptions",
      "organizations_url": "https://api.github.com/users/paulhauner/orgs",
      "repos_url": "https://api.github.com/users/paulhauner/repos",
      "events_url": "https://api.github.com/users/paulhauner/events{/privacy}",
      "received_events_url": "https://api.github.com/users/paulhauner/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-02-04T00:43:33Z",
    "updated_at": "2022-02-04T00:43:33Z",
    "author_association": "MEMBER",
    "body": "I'm proposing changes to the API spec here: https://github.com/ethereum/beacon-APIs/pull/190",
    "reactions": {
      "url": "https://api.github.com/repos/sigp/lighthouse/issues/comments/1029534685/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/sigp/lighthouse/issues/comments/1043608608",
    "html_url": "https://github.com/sigp/lighthouse/issues/2946#issuecomment-1043608608",
    "issue_url": "https://api.github.com/repos/sigp/lighthouse/issues/2946",
    "id": 1043608608,
    "node_id": "IC_kwDOCFeAzc4-NDQg",
    "user": {
      "login": "paulhauner",
      "id": 6660660,
      "node_id": "MDQ6VXNlcjY2NjA2NjA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6660660?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/paulhauner",
      "html_url": "https://github.com/paulhauner",
      "followers_url": "https://api.github.com/users/paulhauner/followers",
      "following_url": "https://api.github.com/users/paulhauner/following{/other_user}",
      "gists_url": "https://api.github.com/users/paulhauner/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/paulhauner/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/paulhauner/subscriptions",
      "organizations_url": "https://api.github.com/users/paulhauner/orgs",
      "repos_url": "https://api.github.com/users/paulhauner/repos",
      "events_url": "https://api.github.com/users/paulhauner/events{/privacy}",
      "received_events_url": "https://api.github.com/users/paulhauner/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-02-17T23:21:06Z",
    "updated_at": "2022-02-17T23:21:06Z",
    "author_association": "MEMBER",
    "body": "Closed in favor of #3031",
    "reactions": {
      "url": "https://api.github.com/repos/sigp/lighthouse/issues/comments/1043608608/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
