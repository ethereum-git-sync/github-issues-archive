{
  "url": "https://api.github.com/repos/sigp/lighthouse/issues/3026",
  "repository_url": "https://api.github.com/repos/sigp/lighthouse",
  "labels_url": "https://api.github.com/repos/sigp/lighthouse/issues/3026/labels{/name}",
  "comments_url": "https://api.github.com/repos/sigp/lighthouse/issues/3026/comments",
  "events_url": "https://api.github.com/repos/sigp/lighthouse/issues/3026/events",
  "html_url": "https://github.com/sigp/lighthouse/issues/3026",
  "id": 1139330656,
  "node_id": "I_kwDOCFeAzc5D6M5g",
  "number": 3026,
  "title": "Don't let state reconstruction starve pruning",
  "user": {
    "login": "michaelsproul",
    "id": 4452260,
    "node_id": "MDQ6VXNlcjQ0NTIyNjA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4452260?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/michaelsproul",
    "html_url": "https://github.com/michaelsproul",
    "followers_url": "https://api.github.com/users/michaelsproul/followers",
    "following_url": "https://api.github.com/users/michaelsproul/following{/other_user}",
    "gists_url": "https://api.github.com/users/michaelsproul/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/michaelsproul/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/michaelsproul/subscriptions",
    "organizations_url": "https://api.github.com/users/michaelsproul/orgs",
    "repos_url": "https://api.github.com/users/michaelsproul/repos",
    "events_url": "https://api.github.com/users/michaelsproul/events{/privacy}",
    "received_events_url": "https://api.github.com/users/michaelsproul/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 985647284,
      "node_id": "MDU6TGFiZWw5ODU2NDcyODQ=",
      "url": "https://api.github.com/repos/sigp/lighthouse/labels/enhancement",
      "name": "enhancement",
      "color": "a2eeef",
      "default": true,
      "description": "New feature or request"
    },
    {
      "id": 2336798682,
      "node_id": "MDU6TGFiZWwyMzM2Nzk4Njgy",
      "url": "https://api.github.com/repos/sigp/lighthouse/labels/database",
      "name": "database",
      "color": "C01C9D",
      "default": false,
      "description": ""
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 3,
  "created_at": "2022-02-15T23:49:37Z",
  "updated_at": "2023-05-12T04:00:44Z",
  "closed_at": null,
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "## Description\r\n\r\nOur Prater nodes running with `--reconstruct-historic-states` sometimes run out of disk space and die because of this caveat of state reconstruction:\r\n\r\n> While reconstruction is running the node will temporarily pause migrating new data to the freezer database. This will lead to the database increasing in size temporarily (by a few GB per day) until state reconstruction completes.\r\n\r\nRather than requiring state reconstruction to run in one go I think we should allow the background migrator to alternate between state reconstruction and pruning tasks. This will require a bit of a refactor of the `reconstruct_historic_states` function, perhaps passing in a maximum number of slots to reconstruct in one batch before returning. We might also have to track the reconstruction status in the `BackgroundMigrator`.\r\n",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/sigp/lighthouse/issues/3026/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/sigp/lighthouse/issues/3026/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/sigp/lighthouse/issues/comments/1134215723",
    "html_url": "https://github.com/sigp/lighthouse/issues/3026#issuecomment-1134215723",
    "issue_url": "https://api.github.com/repos/sigp/lighthouse/issues/3026",
    "id": 1134215723,
    "node_id": "IC_kwDOCFeAzc5DmsIr",
    "user": {
      "login": "michaelsproul",
      "id": 4452260,
      "node_id": "MDQ6VXNlcjQ0NTIyNjA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4452260?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/michaelsproul",
      "html_url": "https://github.com/michaelsproul",
      "followers_url": "https://api.github.com/users/michaelsproul/followers",
      "following_url": "https://api.github.com/users/michaelsproul/following{/other_user}",
      "gists_url": "https://api.github.com/users/michaelsproul/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/michaelsproul/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/michaelsproul/subscriptions",
      "organizations_url": "https://api.github.com/users/michaelsproul/orgs",
      "repos_url": "https://api.github.com/users/michaelsproul/repos",
      "events_url": "https://api.github.com/users/michaelsproul/events{/privacy}",
      "received_events_url": "https://api.github.com/users/michaelsproul/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-05-23T06:01:39Z",
    "updated_at": "2022-05-23T06:01:39Z",
    "author_association": "MEMBER",
    "body": "Thanks @tthebst for starting to look into this.\r\n\r\nHere are a few pointers that might be useful:\r\n\r\n* The code for the state reconstruction lives in this function: https://github.com/sigp/lighthouse/blob/79db2d4deb6a47947699d8a4a39347c19ee6e5d6/beacon_node/store/src/reconstruct.rs#L18\r\n  It will probably need to be modified to take an argument like the \"maximum number of slots to reconstruct in one pass\". For efficiency it should probably be a multiple of the slots-per-restore-point (maybe 8192, which is a multiple of every SPRP).\r\n* The code for driving the state reconstruction and the finalization migration lives here:\r\n   https://github.com/sigp/lighthouse/blob/60449849e22351b99e6fbcefc14dbf256d7609af/beacon_node/beacon_chain/src/migrate.rs#L137-L143\r\n   One way to implement the batching for the async migrator would be to re-send the `Notification::Reconstruction` message at the end of `run_reconstruction` whenever the reconstruction function (`reconstruct_historic_states`) indicates that it has more work remaining. This would allow the background thread to interleave finalization processing and reconstruction. For example if the message queue starts with `[Reconstruction, Finalization]`, we would process one reconstruction batch, push `Reconstruction` to the queue, then process the finalization. Now the queue would be `[Reconstruction]` and we would sit there running reconstruction batches until a new `Finalization` message arrived. To make this work we'd have to remove the preferential treatment for `Reconstruction` in the message de-queue logic [here](https://github.com/sigp/lighthouse/blob/60449849e22351b99e6fbcefc14dbf256d7609af/beacon_node/beacon_chain/src/migrate.rs#L282-L284), and maybe re-consider the behaviour where we drain the whole channel on every iteration. That was added as an optimisation for the case where we have `Finalization` notifications backed up and want to just process the most recent one. I think it would be possible to keep that optimisation, but haven't thought through the mechanics in depth.\r\n   \r\nThere are likely many approaches that would work here, and this is just an idea. You're welcome to implement any design that you think would be appropriate :blush: ",
    "reactions": {
      "url": "https://api.github.com/repos/sigp/lighthouse/issues/comments/1134215723/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/sigp/lighthouse/issues/comments/1545031224",
    "html_url": "https://github.com/sigp/lighthouse/issues/3026#issuecomment-1545031224",
    "issue_url": "https://api.github.com/repos/sigp/lighthouse/issues/3026",
    "id": 1545031224,
    "node_id": "IC_kwDOCFeAzc5cF044",
    "user": {
      "login": "int88",
      "id": 106391185,
      "node_id": "U_kgDOBldmkQ",
      "avatar_url": "https://avatars.githubusercontent.com/u/106391185?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/int88",
      "html_url": "https://github.com/int88",
      "followers_url": "https://api.github.com/users/int88/followers",
      "following_url": "https://api.github.com/users/int88/following{/other_user}",
      "gists_url": "https://api.github.com/users/int88/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/int88/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/int88/subscriptions",
      "organizations_url": "https://api.github.com/users/int88/orgs",
      "repos_url": "https://api.github.com/users/int88/repos",
      "events_url": "https://api.github.com/users/int88/events{/privacy}",
      "received_events_url": "https://api.github.com/users/int88/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-05-12T02:51:07Z",
    "updated_at": "2023-05-12T02:51:07Z",
    "author_association": "CONTRIBUTOR",
    "body": "@michaelsproul Has this issue been fixed? If not, I'd like to try ðŸ˜ƒ ",
    "reactions": {
      "url": "https://api.github.com/repos/sigp/lighthouse/issues/comments/1545031224/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/sigp/lighthouse/issues/comments/1545073205",
    "html_url": "https://github.com/sigp/lighthouse/issues/3026#issuecomment-1545073205",
    "issue_url": "https://api.github.com/repos/sigp/lighthouse/issues/3026",
    "id": 1545073205,
    "node_id": "IC_kwDOCFeAzc5cF_I1",
    "user": {
      "login": "michaelsproul",
      "id": 4452260,
      "node_id": "MDQ6VXNlcjQ0NTIyNjA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4452260?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/michaelsproul",
      "html_url": "https://github.com/michaelsproul",
      "followers_url": "https://api.github.com/users/michaelsproul/followers",
      "following_url": "https://api.github.com/users/michaelsproul/following{/other_user}",
      "gists_url": "https://api.github.com/users/michaelsproul/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/michaelsproul/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/michaelsproul/subscriptions",
      "organizations_url": "https://api.github.com/users/michaelsproul/orgs",
      "repos_url": "https://api.github.com/users/michaelsproul/repos",
      "events_url": "https://api.github.com/users/michaelsproul/events{/privacy}",
      "received_events_url": "https://api.github.com/users/michaelsproul/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-05-12T04:00:43Z",
    "updated_at": "2023-05-12T04:00:43Z",
    "author_association": "MEMBER",
    "body": "@int88 It was implemented by @tthebst, but he abandoned the impl because he was running into strange database corruption issues similar to https://github.com/sigp/lighthouse/issues/3433 and https://github.com/sigp/lighthouse/issues/3455. So far I've never managed to reproduce those issues.\r\n\r\nThe commit is here if you're interested: https://github.com/sigp/lighthouse/pull/3206/commits/481e79289880b75e53cbfea1be07564b1b437323\r\n\r\nThat commit is adapted to work with `tree-states` (my mega-optimisation project that is currently broken), but we could backport it to `unstable`. I suspect the change doesn't meaningfully increase the chance of database corruption, as it was running fine on several `tree-states` nodes for several weeks.",
    "reactions": {
      "url": "https://api.github.com/repos/sigp/lighthouse/issues/comments/1545073205/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
