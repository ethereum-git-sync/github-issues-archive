{
  "url": "https://api.github.com/repos/sigp/lighthouse/issues/281",
  "repository_url": "https://api.github.com/repos/sigp/lighthouse",
  "labels_url": "https://api.github.com/repos/sigp/lighthouse/issues/281/labels{/name}",
  "comments_url": "https://api.github.com/repos/sigp/lighthouse/issues/281/comments",
  "events_url": "https://api.github.com/repos/sigp/lighthouse/issues/281/events",
  "html_url": "https://github.com/sigp/lighthouse/issues/281",
  "id": 417133311,
  "node_id": "MDU6SXNzdWU0MTcxMzMzMTE=",
  "number": 281,
  "title": "Implement a sensible block-operations pool",
  "user": {
    "login": "paulhauner",
    "id": 6660660,
    "node_id": "MDQ6VXNlcjY2NjA2NjA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6660660?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/paulhauner",
    "html_url": "https://github.com/paulhauner",
    "followers_url": "https://api.github.com/users/paulhauner/followers",
    "following_url": "https://api.github.com/users/paulhauner/following{/other_user}",
    "gists_url": "https://api.github.com/users/paulhauner/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/paulhauner/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/paulhauner/subscriptions",
    "organizations_url": "https://api.github.com/users/paulhauner/orgs",
    "repos_url": "https://api.github.com/users/paulhauner/repos",
    "events_url": "https://api.github.com/users/paulhauner/events{/privacy}",
    "received_events_url": "https://api.github.com/users/paulhauner/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 1141293876,
      "node_id": "MDU6TGFiZWwxMTQxMjkzODc2",
      "url": "https://api.github.com/repos/sigp/lighthouse/labels/work-started",
      "name": "work-started",
      "color": "e072ab",
      "default": false,
      "description": ""
    },
    {
      "id": 1157252215,
      "node_id": "MDU6TGFiZWwxMTU3MjUyMjE1",
      "url": "https://api.github.com/repos/sigp/lighthouse/labels/major-task",
      "name": "major-task",
      "color": "c18d3f",
      "default": false,
      "description": "A significant amount of work or conceptual task."
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": {
    "login": "michaelsproul",
    "id": 4452260,
    "node_id": "MDQ6VXNlcjQ0NTIyNjA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4452260?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/michaelsproul",
    "html_url": "https://github.com/michaelsproul",
    "followers_url": "https://api.github.com/users/michaelsproul/followers",
    "following_url": "https://api.github.com/users/michaelsproul/following{/other_user}",
    "gists_url": "https://api.github.com/users/michaelsproul/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/michaelsproul/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/michaelsproul/subscriptions",
    "organizations_url": "https://api.github.com/users/michaelsproul/orgs",
    "repos_url": "https://api.github.com/users/michaelsproul/repos",
    "events_url": "https://api.github.com/users/michaelsproul/events{/privacy}",
    "received_events_url": "https://api.github.com/users/michaelsproul/received_events",
    "type": "User",
    "site_admin": false
  },
  "assignees": [
    {
      "login": "michaelsproul",
      "id": 4452260,
      "node_id": "MDQ6VXNlcjQ0NTIyNjA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4452260?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/michaelsproul",
      "html_url": "https://github.com/michaelsproul",
      "followers_url": "https://api.github.com/users/michaelsproul/followers",
      "following_url": "https://api.github.com/users/michaelsproul/following{/other_user}",
      "gists_url": "https://api.github.com/users/michaelsproul/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/michaelsproul/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/michaelsproul/subscriptions",
      "organizations_url": "https://api.github.com/users/michaelsproul/orgs",
      "repos_url": "https://api.github.com/users/michaelsproul/repos",
      "events_url": "https://api.github.com/users/michaelsproul/events{/privacy}",
      "received_events_url": "https://api.github.com/users/michaelsproul/received_events",
      "type": "User",
      "site_admin": false
    }
  ],
  "milestone": null,
  "comments": 6,
  "created_at": "2019-03-05T06:07:41Z",
  "updated_at": "2019-04-25T23:04:55Z",
  "closed_at": "2019-04-25T23:04:55Z",
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "## Overview\r\n\r\nWe need to implement a sustainable block-operations pool for storage of objects that may be included in blocks.\r\n\r\n### Details\r\n\r\nThe following [v0.4.0](https://github.com/ethereum/eth2.0-specs/blob/0.4.0/specs/core/0_beacon-chain.md) block operations (blops, lol) are covered in the scope of this issue:\r\n\r\n- `Attestation`\r\n- `Deposit`\r\n-  `ProposerSlashing`\r\n- `AttesterSlashing`\r\n- `VoluntaryExit`\r\n- `Transfer`\r\n\r\nFor each of these items, we need to provide a pool/queue so they can potentially be included in a future block.\r\n\r\n# Detail\r\n\r\nThis section provides the following information for each of the blops:\r\n\r\n- **Insertion**: defines conditions around what should be inserted into the pool.\r\n- **Reading**: defines how the pool should return a list of items for inclusion in some block.\r\n- **Deletion**: defines when items should be deleted from the pool.\r\n\r\n_Note: a pool should not contain duplicate items._\r\n\r\n## `Attestation`\r\n\r\nEasily the most complex case as it involves aggregating attestations and has the most complex validation logic.\r\n\r\n### Insertion\r\n\r\nShall accept an `Attestation` and aggregate it with an existing `Attestation` if possible (ask for more details).\r\n\r\nThe `Attestation` must be valid for \r\n\r\n### Reading\r\n\r\nShall provide a function to return `Attestation`s for some `(beacon_block, beacon_state)` pair such that each attestation passes the [block inclusion validity conditions](\r\nhttps://github.com/ethereum/eth2.0-specs/blob/0.4.0/specs/core/0_beacon-chain.md#attestations-1).\r\n\r\nIf the number of attestations for a block exceed `MAX_ATTESTATIONS`, then attestations should be included to maximize the [attestation inclusion rewards](https://github.com/ethereum/eth2.0-specs/blob/0.4.0/specs/core/0_beacon-chain.md#attestation-inclusion) for the block proposer.\r\n\r\n### Deletion\r\n\r\nDelete if:\r\n\r\n- Let `state` be the latest state.\r\n- `attestation.data.slot < state.slot - spec.slots_per_epoch`: such an `Attestation` is too old to be included in a block.\r\n\r\n## `Deposit`\r\n\r\n### Insertion\r\n\r\nNo validation conditions -- deposits are provided from our own Eth1 service so we assume all are valid.\r\n\r\n### Reading\r\n\r\nShall provide a function to return `Deposit`s for some `(beacon_block, beacon_state)` pair which:\r\n\r\n- Are sorted by `deposit.index`\r\n- Pass the [block inclusion validity conditions](https://github.com/ethereum/eth2.0-specs/blob/0.4.0/specs/core/0_beacon-chain.md#deposits-1) for that block/state.\r\n\r\n### Deletion\r\n\r\nShall remove `Deposit`s from the pool if:\r\n\r\n- Let `state` be the latest finalised state.\r\n- `state.deposit_index >  deposit.index`\r\n\r\n## `ProposerSlashing` & `AttesterSlashing`\r\n\r\n_Both objects have the same conditions._\r\n\r\n### Insertion\r\n\r\nMust pass the following requirements:\r\n\r\n- Validator(s) implicated must be known in the latest `state.validator_registry`\r\n- Slashing must be legit (see [proposer slashing validity](https://github.com/ethereum/eth2.0-specs/blob/0.4.0/specs/core/0_beacon-chain.md#proposer-slashings-1) and [attester slashing validity](https://github.com/ethereum/eth2.0-specs/blob/0.4.0/specs/core/0_beacon-chain.md#attester-slashings-1))\r\n\r\n### Reading\r\n\r\nShall provide a function to return `Deposit`s for some `(beacon_block, beacon_state)` pair where:\r\n\r\n- Implicated validators are not already slashed (`validator.slashed == false`)\r\n\r\n### Deletion\r\n\r\nShall remove slashings from the pool if the implicated validators are slashed or withdrawn in the latest finalized state.\r\n\r\n## `VoluntaryExit`\r\n\r\n### Insertion\r\n\r\nMust pass the following conditions:\r\n\r\n- `validator_index` is in the latest `state.validator_registry`.\r\n- `signature` is valid.\r\n- validator is not already exited.\r\n\r\n### Reading\r\n\r\nShall provide a function to return `VoluntaryExit`s for some `(beacon_block, beacon_state)` pair such that the exit passes the [block inclusion validity conditions](https://github.com/ethereum/eth2.0-specs/blob/0.4.0/specs/core/0_beacon-chain.md#voluntary-exits-1).\r\n\r\n### Deletion\r\n\r\nShall delete `Exit`s where the specified validator is exited in the latest finalized state.\r\n\r\n## `Transfer`\r\n\r\n### Insertion\r\n\r\nMust pass the following conditions:\r\n\r\n- `transfer.slot` is not in the past.\r\n- `from` and `to` validators are known in the latest state.\r\n- `transfer.signature` is valid.\r\n\r\n### Reading\r\n\r\nShall provide a function to return `Transfer`s for some `(beacon_block, beacon_state)` pair such that the transfer passes the [block inclusion validity conditions](https://github.com/ethereum/eth2.0-specs/blob/0.4.0/specs/core/0_beacon-chain.md#transfers-1).\r\n\r\n### Deletion\r\n\r\nShall delete all `Transfer`s where `transfer.slot` is in the past.",
  "closed_by": {
    "login": "paulhauner",
    "id": 6660660,
    "node_id": "MDQ6VXNlcjY2NjA2NjA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6660660?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/paulhauner",
    "html_url": "https://github.com/paulhauner",
    "followers_url": "https://api.github.com/users/paulhauner/followers",
    "following_url": "https://api.github.com/users/paulhauner/following{/other_user}",
    "gists_url": "https://api.github.com/users/paulhauner/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/paulhauner/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/paulhauner/subscriptions",
    "organizations_url": "https://api.github.com/users/paulhauner/orgs",
    "repos_url": "https://api.github.com/users/paulhauner/repos",
    "events_url": "https://api.github.com/users/paulhauner/events{/privacy}",
    "received_events_url": "https://api.github.com/users/paulhauner/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/sigp/lighthouse/issues/281/reactions",
    "total_count": 1,
    "+1": 1,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/sigp/lighthouse/issues/281/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/sigp/lighthouse/issues/comments/469552205",
    "html_url": "https://github.com/sigp/lighthouse/issues/281#issuecomment-469552205",
    "issue_url": "https://api.github.com/repos/sigp/lighthouse/issues/281",
    "id": 469552205,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ2OTU1MjIwNQ==",
    "user": {
      "login": "paulhauner",
      "id": 6660660,
      "node_id": "MDQ6VXNlcjY2NjA2NjA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6660660?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/paulhauner",
      "html_url": "https://github.com/paulhauner",
      "followers_url": "https://api.github.com/users/paulhauner/followers",
      "following_url": "https://api.github.com/users/paulhauner/following{/other_user}",
      "gists_url": "https://api.github.com/users/paulhauner/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/paulhauner/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/paulhauner/subscriptions",
      "organizations_url": "https://api.github.com/users/paulhauner/orgs",
      "repos_url": "https://api.github.com/users/paulhauner/repos",
      "events_url": "https://api.github.com/users/paulhauner/events{/privacy}",
      "received_events_url": "https://api.github.com/users/paulhauner/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-03-05T06:09:42Z",
    "updated_at": "2019-03-05T06:09:42Z",
    "author_association": "MEMBER",
    "body": "I'm thinking it might be sensible to leave `Attestation` out of scope now -- it's pretty significant. Apologies for the giant text.",
    "reactions": {
      "url": "https://api.github.com/repos/sigp/lighthouse/issues/comments/469552205/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/sigp/lighthouse/issues/comments/469855345",
    "html_url": "https://github.com/sigp/lighthouse/issues/281#issuecomment-469855345",
    "issue_url": "https://api.github.com/repos/sigp/lighthouse/issues/281",
    "id": 469855345,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ2OTg1NTM0NQ==",
    "user": {
      "login": "paulhauner",
      "id": 6660660,
      "node_id": "MDQ6VXNlcjY2NjA2NjA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6660660?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/paulhauner",
      "html_url": "https://github.com/paulhauner",
      "followers_url": "https://api.github.com/users/paulhauner/followers",
      "following_url": "https://api.github.com/users/paulhauner/following{/other_user}",
      "gists_url": "https://api.github.com/users/paulhauner/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/paulhauner/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/paulhauner/subscriptions",
      "organizations_url": "https://api.github.com/users/paulhauner/orgs",
      "repos_url": "https://api.github.com/users/paulhauner/repos",
      "events_url": "https://api.github.com/users/paulhauner/events{/privacy}",
      "received_events_url": "https://api.github.com/users/paulhauner/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-03-05T21:00:54Z",
    "updated_at": "2019-03-05T21:00:54Z",
    "author_association": "MEMBER",
    "body": "Note: I just updated the deletion conditions for `Attestation`",
    "reactions": {
      "url": "https://api.github.com/repos/sigp/lighthouse/issues/comments/469855345/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/sigp/lighthouse/issues/comments/469890568",
    "html_url": "https://github.com/sigp/lighthouse/issues/281#issuecomment-469890568",
    "issue_url": "https://api.github.com/repos/sigp/lighthouse/issues/281",
    "id": 469890568,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ2OTg5MDU2OA==",
    "user": {
      "login": "michaelsproul",
      "id": 4452260,
      "node_id": "MDQ6VXNlcjQ0NTIyNjA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4452260?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/michaelsproul",
      "html_url": "https://github.com/michaelsproul",
      "followers_url": "https://api.github.com/users/michaelsproul/followers",
      "following_url": "https://api.github.com/users/michaelsproul/following{/other_user}",
      "gists_url": "https://api.github.com/users/michaelsproul/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/michaelsproul/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/michaelsproul/subscriptions",
      "organizations_url": "https://api.github.com/users/michaelsproul/orgs",
      "repos_url": "https://api.github.com/users/michaelsproul/repos",
      "events_url": "https://api.github.com/users/michaelsproul/events{/privacy}",
      "received_events_url": "https://api.github.com/users/michaelsproul/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-03-05T22:49:16Z",
    "updated_at": "2019-03-05T22:49:16Z",
    "author_association": "MEMBER",
    "body": "To clarify, we're talking about an in-memory-only pool for now, yeah?",
    "reactions": {
      "url": "https://api.github.com/repos/sigp/lighthouse/issues/comments/469890568/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/sigp/lighthouse/issues/comments/469891167",
    "html_url": "https://github.com/sigp/lighthouse/issues/281#issuecomment-469891167",
    "issue_url": "https://api.github.com/repos/sigp/lighthouse/issues/281",
    "id": 469891167,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ2OTg5MTE2Nw==",
    "user": {
      "login": "paulhauner",
      "id": 6660660,
      "node_id": "MDQ6VXNlcjY2NjA2NjA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6660660?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/paulhauner",
      "html_url": "https://github.com/paulhauner",
      "followers_url": "https://api.github.com/users/paulhauner/followers",
      "following_url": "https://api.github.com/users/paulhauner/following{/other_user}",
      "gists_url": "https://api.github.com/users/paulhauner/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/paulhauner/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/paulhauner/subscriptions",
      "organizations_url": "https://api.github.com/users/paulhauner/orgs",
      "repos_url": "https://api.github.com/users/paulhauner/repos",
      "events_url": "https://api.github.com/users/paulhauner/events{/privacy}",
      "received_events_url": "https://api.github.com/users/paulhauner/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-03-05T22:51:19Z",
    "updated_at": "2019-03-05T22:51:19Z",
    "author_association": "MEMBER",
    "body": "> To clarify, we're talking about an in-memory-only pool for now, yeah?\r\n\r\nYep!",
    "reactions": {
      "url": "https://api.github.com/repos/sigp/lighthouse/issues/comments/469891167/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/sigp/lighthouse/issues/comments/469935519",
    "html_url": "https://github.com/sigp/lighthouse/issues/281#issuecomment-469935519",
    "issue_url": "https://api.github.com/repos/sigp/lighthouse/issues/281",
    "id": 469935519,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ2OTkzNTUxOQ==",
    "user": {
      "login": "paulhauner",
      "id": 6660660,
      "node_id": "MDQ6VXNlcjY2NjA2NjA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6660660?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/paulhauner",
      "html_url": "https://github.com/paulhauner",
      "followers_url": "https://api.github.com/users/paulhauner/followers",
      "following_url": "https://api.github.com/users/paulhauner/following{/other_user}",
      "gists_url": "https://api.github.com/users/paulhauner/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/paulhauner/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/paulhauner/subscriptions",
      "organizations_url": "https://api.github.com/users/paulhauner/orgs",
      "repos_url": "https://api.github.com/users/paulhauner/repos",
      "events_url": "https://api.github.com/users/paulhauner/events{/privacy}",
      "received_events_url": "https://api.github.com/users/paulhauner/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-03-06T01:58:44Z",
    "updated_at": "2019-03-06T01:58:44Z",
    "author_association": "MEMBER",
    "body": "I'm doing a refactor of the block/state processing logic for `v0.4.0` and it's producing a lot of functions that will be useful for the inclusion validator conditions here.\r\n\r\nHopefully I can get a WIP PR up this afternoon -- I'll point out the useful functions to you :)",
    "reactions": {
      "url": "https://api.github.com/repos/sigp/lighthouse/issues/comments/469935519/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/sigp/lighthouse/issues/comments/474153398",
    "html_url": "https://github.com/sigp/lighthouse/issues/281#issuecomment-474153398",
    "issue_url": "https://api.github.com/repos/sigp/lighthouse/issues/281",
    "id": 474153398,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3NDE1MzM5OA==",
    "user": {
      "login": "paulhauner",
      "id": 6660660,
      "node_id": "MDQ6VXNlcjY2NjA2NjA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6660660?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/paulhauner",
      "html_url": "https://github.com/paulhauner",
      "followers_url": "https://api.github.com/users/paulhauner/followers",
      "following_url": "https://api.github.com/users/paulhauner/following{/other_user}",
      "gists_url": "https://api.github.com/users/paulhauner/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/paulhauner/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/paulhauner/subscriptions",
      "organizations_url": "https://api.github.com/users/paulhauner/orgs",
      "repos_url": "https://api.github.com/users/paulhauner/repos",
      "events_url": "https://api.github.com/users/paulhauner/events{/privacy}",
      "received_events_url": "https://api.github.com/users/paulhauner/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-03-19T00:36:23Z",
    "updated_at": "2019-03-19T00:47:44Z",
    "author_association": "MEMBER",
    "body": "Hey, related to our conversation a few minutes ago -- here's my step-by-step of how I think attestation aggregation should work.\r\n\r\n_Note: I'm not 100% sure this is accurate. Keep an eye out for edge cases or oversights on my behalf._\r\n\r\n1. Get an `Attestation` (`a`) from the network.\r\n1. [Validate](https://github.com/sigp/lighthouse/blob/37b8e9f39a50737bd7d74f984fc614d6bf6e5f49/eth2/state_processing/src/per_block_processing/validate_attestation.rs#L12) `a.aggregate_signature` against some `BeaconState`, discard if invalid.\r\n1. Determine if an equivalent `a.data` exists in the pool (lets call it `b`) (see \"Key-ing AttestationData\")\r\n    1. Determine if we can aggregate `a` with `b` (see \"Can two attestations be aggregated\")\r\n1. If we can aggregate, aggregate `a` and `b` into `ab` (see \"Aggregating two attestations\").\r\n    1. Ditch `a`.\r\n    1. Remove `b` from the pool.\r\n    2. Add `ab` to the pool.\r\n1. If we _cant_ aggregate, store the `a` as is, adding `b` to the pool as well.\r\n\r\n### Can two attestations be aggregated\r\n\r\nThey can be aggregated if the following two conditions are satisfied:\r\n\r\n- If `a.data == b.data` \r\n- If the set of set bits on `a.aggregation_bitfield` and the set of bits on `b.aggregration_bitfield` are disjoint (a.k.a. don't aggregate two `aggregate_signatures` that both have the same signature on them).\r\n\r\n### Key-ing AttestationData\r\n\r\nI assume you're going to build a `HashMap` of `AttestationData -> Attestation` so you can ask \"do I have an attestation with the same attestation data?\".\r\n\r\nThe naive way to do that would be to just `Impl Hash for AttestationData` and let `HashMap` deal with it. _However_, that does not have built in protection against forks. The same `AttestationData` on fork A would have the same key as the one on fork B.\r\n\r\nAs such, I would use this for keying `Attestation` (no guarantees this compiles, just for demonstration):\r\n\r\n```rust\r\nlet epoch = attestation_data.slot.epoch(spec.slots_per_epoch);\r\n\r\nlet mut key: Vec<u8> = ssz_encode(&attestation_data);\r\nkey.append(&mut int_to_bytes8(spec.get_domain(epoch, Domain::Attestation, &state.fork)));\r\n\r\nkey  // `HashMap` can just hash this however it wants.\r\n```\r\n\r\n### Aggregating two attestations\r\n\r\n- `ab.aggregate_signature = a.aggregate_signature.add_aggregate(b.aggregate_signature)`*\r\n- `ab.custody_bitfield` becomes the union of the `custody_bitfields` on `a` and `b`.\r\n- `ab.aggregation_bitfield` becomes the union of the `aggregation_bitfields` on `a` and `b`.\r\n\r\n*: `AggregateSignature::aggregate_signature(..)` is not yet implemented, however it is [present](https://github.com/sigp/signature-schemes/blob/master/src/aggregates.rs#L96) on our underlying library. I'll implement it on the v0.5.0 branch and ping you when it's done.",
    "reactions": {
      "url": "https://api.github.com/repos/sigp/lighthouse/issues/comments/474153398/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
