{
  "url": "https://api.github.com/repos/sigp/lighthouse/issues/2945",
  "repository_url": "https://api.github.com/repos/sigp/lighthouse",
  "labels_url": "https://api.github.com/repos/sigp/lighthouse/issues/2945/labels{/name}",
  "comments_url": "https://api.github.com/repos/sigp/lighthouse/issues/2945/comments",
  "events_url": "https://api.github.com/repos/sigp/lighthouse/issues/2945/events",
  "html_url": "https://github.com/sigp/lighthouse/issues/2945",
  "id": 1110000863,
  "node_id": "I_kwDOCFeAzc5CKUTf",
  "number": 2945,
  "title": "Optimistic sync changes for HTTP API",
  "user": {
    "login": "paulhauner",
    "id": 6660660,
    "node_id": "MDQ6VXNlcjY2NjA2NjA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6660660?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/paulhauner",
    "html_url": "https://github.com/paulhauner",
    "followers_url": "https://api.github.com/users/paulhauner/followers",
    "following_url": "https://api.github.com/users/paulhauner/following{/other_user}",
    "gists_url": "https://api.github.com/users/paulhauner/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/paulhauner/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/paulhauner/subscriptions",
    "organizations_url": "https://api.github.com/users/paulhauner/orgs",
    "repos_url": "https://api.github.com/users/paulhauner/repos",
    "events_url": "https://api.github.com/users/paulhauner/events{/privacy}",
    "received_events_url": "https://api.github.com/users/paulhauner/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 3743113288,
      "node_id": "LA_kwDOCFeAzc7fG2BI",
      "url": "https://api.github.com/repos/sigp/lighthouse/labels/bellatrix",
      "name": "bellatrix",
      "color": "A906A4",
      "default": false,
      "description": "Required to support the Bellatrix Upgrade"
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 1,
  "created_at": "2022-01-21T03:08:10Z",
  "updated_at": "2022-01-21T04:52:00Z",
  "closed_at": "2022-01-21T04:52:00Z",
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "## Description\r\n\r\n**This issue is a WIP, please don't start work on it yet. I'm still ironing out the details :pray:**\r\n\r\n[`latest_verified_ancestor`]: https://github.com/sigp/consensus-specs/blob/opt-sync-2/sync/optimistic.md#helpers\r\n\r\nAs a part of implementing optimistic sync (presently defined in [this spec PR](https://github.com/ethereum/consensus-specs/pull/2770)), we must ensure that the BN HTTP API doesn't present information about optimistic blocks as canonical. We also need to ensure that we don't create blocks/attestations/sync messages for our head when it's optimistic.\r\n\r\nThere are a few things we need to consider to make our API optimistic-safe. I'll try to list them all here.\r\n\r\n## Details\r\n\r\n### The `{block_id}` and `{state_id}` tags\r\n\r\nWhen we get a request using a `{block_id}` or `{state_id}`, we must consider optimistic sync. I will enumerate all the types and how they should behave.\r\n\r\n- `head`: return the [`latest_verified_ancestor`][].\r\n- `genesis`: always return the genesis block (it's never optimistic).\r\n- `finalized`: if the finalized checkpoint is optimistic, return a 503 syncing.\r\n- `justified`: if the justified checkpoint is optimistic, return a 503 syncing.\r\n- `<slot>`: return a 503 syncing if the block is optimistic.\r\n- `<root>`: return a 503 syncing if the block is optimistic.\r\n\r\nNote, it might be onerous to determine if some ancient `<slot>` or `<root>` blocks are optimistic or not. I'd say that if their *prior* to the finalized checkpoint (i.e., no longer in fork choice) then just use the state of the finalized checkpoint. I.e., if the finalized checkpoint is optimistic, assume all prior block are as well.\r\n\r\n### The `*/beacon/pool/*` endpoints\r\n\r\nFor the `GET` requests, one could argue that we should filter out all results that reference an optimistic block, but I don't think that's necessary.\r\n\r\nFor the `POST` requests, only the `*/pool/attestations` route is relative to optimistic sync. I think we should still publish attestations to optimistic heads. If a validator has signed the message, it must have authority from some other BN that the block's payload is valid.\r\n\r\nSo, no changes for the pool endpoints.\r\n\r\n### `GET /eth/v1/beacon/headers`\r\n\r\nIf no query parameters are provided, use the [`latest_verified_ancestor`][]. If parameters are provided, return a 503 syncing if the matching block is optimistic.\r\n\r\n### `POST /eth/v1/beacon/blocks`\r\n\r\nNo need to apply restrictions here, either. If a validator POSTs a block here and it references an optimistic parent and can be imported optimistically, I think we should import it and return a 200 OK as usual.\r\n\r\nIf a VC has managed to produce a block, we assume it must have done it via a node which as verified the parent payload (it's impossible to produce a payload on an unknown parent payload, anyway).\r\n\r\n### `/eth1/v2/debug/beacon/heads`\r\n\r\nTODO: I'm not sure about this one.\r\n\r\n### `/eth/v1/events`\r\n\r\nTODO: I'm not sure if we should emit `head`, `reorg` or `block` events for optimistic blocks.\r\n\r\n### The `*/validator/*` endpoints\r\n\r\n The following endpoints require no changes:\r\n \r\n- `GET /eth/v1/validator/duties/*`\r\n- `POST /eth/v1/validator/duties/*`\r\n- `POST /eth/v1/validator/aggregate_and_proofs`\r\n- `POST /eth/v1/validator/beacon_committee_subscriptions`\r\n- `POST /eth/v1/validator/sync_committee_contributions`\r\n- `POST /eth/v1/validator/contribution_and_proofs`\r\n\r\n#### `/eth/*/validator/blocks/{slot}`\r\n\r\nThis endpoint should never allow building a block atop an optimistic parent. It's impossible anyway, and EL can't build a payload upon an unknown parent.\r\n\r\nWe don't actually need to do anything here, apart from ensure that a block can't be optimistically *produced*. This should be natural since the [`engine_getPayloadV1`](https://github.com/ethereum/execution-apis/blob/main/src/engine/specification.md#engine_getpayloadv1) call will fail and we won't have an `ExecutionPayload` to put in the block.\r\n\r\n#### `GET /eth/*/validator/blocks/attestation_data`\r\n\r\nThis endpoint will need to be modified to ensure that we *never* return at attestation to an optimistic head. Doing so might cause the chain to finalize invalid data :scream_cat: \r\n\r\nI think we should go about this by producing an attestation, then checking to see if the `attestation.data.beacon_block_root` is optimistic. If so, return an error.\r\n\r\n#### `GET /eth/*/validator/blocks/aggregate_attestation`\r\n\r\nI think we should filter this response like the `attestation_data` call. If it turns out that the `beacon_block_root` is optimistic, return an error.\r\n\r\n#### `/eth/*/validator/blocks/sync_committee_contribution`\r\n\r\nJust like `attestation_data`, filter out any responses where the `beacon_block_root` is optimistic.\r\n\r\n\r\n\r\n",
  "closed_by": {
    "login": "paulhauner",
    "id": 6660660,
    "node_id": "MDQ6VXNlcjY2NjA2NjA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6660660?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/paulhauner",
    "html_url": "https://github.com/paulhauner",
    "followers_url": "https://api.github.com/users/paulhauner/followers",
    "following_url": "https://api.github.com/users/paulhauner/following{/other_user}",
    "gists_url": "https://api.github.com/users/paulhauner/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/paulhauner/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/paulhauner/subscriptions",
    "organizations_url": "https://api.github.com/users/paulhauner/orgs",
    "repos_url": "https://api.github.com/users/paulhauner/repos",
    "events_url": "https://api.github.com/users/paulhauner/events{/privacy}",
    "received_events_url": "https://api.github.com/users/paulhauner/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/sigp/lighthouse/issues/2945/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/sigp/lighthouse/issues/2945/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/sigp/lighthouse/issues/comments/1018178736",
    "html_url": "https://github.com/sigp/lighthouse/issues/2945#issuecomment-1018178736",
    "issue_url": "https://api.github.com/repos/sigp/lighthouse/issues/2945",
    "id": 1018178736,
    "node_id": "IC_kwDOCFeAzc48sCyw",
    "user": {
      "login": "paulhauner",
      "id": 6660660,
      "node_id": "MDQ6VXNlcjY2NjA2NjA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6660660?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/paulhauner",
      "html_url": "https://github.com/paulhauner",
      "followers_url": "https://api.github.com/users/paulhauner/followers",
      "following_url": "https://api.github.com/users/paulhauner/following{/other_user}",
      "gists_url": "https://api.github.com/users/paulhauner/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/paulhauner/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/paulhauner/subscriptions",
      "organizations_url": "https://api.github.com/users/paulhauner/orgs",
      "repos_url": "https://api.github.com/users/paulhauner/repos",
      "events_url": "https://api.github.com/users/paulhauner/events{/privacy}",
      "received_events_url": "https://api.github.com/users/paulhauner/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-01-21T04:51:55Z",
    "updated_at": "2022-01-21T04:51:55Z",
    "author_association": "MEMBER",
    "body": "Deprecated in favor or #2946",
    "reactions": {
      "url": "https://api.github.com/repos/sigp/lighthouse/issues/comments/1018178736/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
