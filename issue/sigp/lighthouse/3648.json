{
  "url": "https://api.github.com/repos/sigp/lighthouse/issues/3648",
  "repository_url": "https://api.github.com/repos/sigp/lighthouse",
  "labels_url": "https://api.github.com/repos/sigp/lighthouse/issues/3648/labels{/name}",
  "comments_url": "https://api.github.com/repos/sigp/lighthouse/issues/3648/comments",
  "events_url": "https://api.github.com/repos/sigp/lighthouse/issues/3648/events",
  "html_url": "https://github.com/sigp/lighthouse/issues/3648",
  "id": 1416971023,
  "node_id": "I_kwDOCFeAzc5UdUMP",
  "number": 3648,
  "title": "Implement deterministic subnets peer discovery",
  "user": {
    "login": "divagant-martian",
    "id": 26765164,
    "node_id": "MDQ6VXNlcjI2NzY1MTY0",
    "avatar_url": "https://avatars.githubusercontent.com/u/26765164?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/divagant-martian",
    "html_url": "https://github.com/divagant-martian",
    "followers_url": "https://api.github.com/users/divagant-martian/followers",
    "following_url": "https://api.github.com/users/divagant-martian/following{/other_user}",
    "gists_url": "https://api.github.com/users/divagant-martian/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/divagant-martian/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/divagant-martian/subscriptions",
    "organizations_url": "https://api.github.com/users/divagant-martian/orgs",
    "repos_url": "https://api.github.com/users/divagant-martian/repos",
    "events_url": "https://api.github.com/users/divagant-martian/events{/privacy}",
    "received_events_url": "https://api.github.com/users/divagant-martian/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 2336800125,
      "node_id": "MDU6TGFiZWwyMzM2ODAwMTI1",
      "url": "https://api.github.com/repos/sigp/lighthouse/labels/t%20Networking",
      "name": "t Networking",
      "color": "40E0D0",
      "default": false,
      "description": ""
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 5,
  "created_at": "2022-10-20T17:03:27Z",
  "updated_at": "2023-11-06T01:40:15Z",
  "closed_at": null,
  "author_association": "COLLABORATOR",
  "active_lock_reason": null,
  "body": "## Description\r\nAfter #2847 we still need to implement the changes required to search for peers that should be subscribed to their deterministic long lived subnets. This search is in the form of prefix searching, in contrast to our current predicate search. After this is implemented, and as a separate issue, we also need to think how to deal with peers that should be subscribed a long lived subnet but aren't.\r\n\r\n## Version\r\n[unstable](https://github.com/sigp/lighthouse/commit/dbb93cd0d268513017d75936d9097732cf2d5ee3)\r\n\r\n## Present Behaviour\r\nwe can switch to using deterministic long lived subnets but this only changes the subscription process. The search process is still predicate based\r\n\r\n## Expected Behaviour\r\n\r\nAdd (as in, include without removing the current code for backwards compatibility) the logic to search peers based on a prefix \r\n(see https://github.com/ethereum/consensus-specs/issues/2749 )\r\n\r\n## Steps to resolve\r\nStill need to think it more",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/sigp/lighthouse/issues/3648/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/sigp/lighthouse/issues/3648/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/sigp/lighthouse/issues/comments/1588769752",
    "html_url": "https://github.com/sigp/lighthouse/issues/3648#issuecomment-1588769752",
    "issue_url": "https://api.github.com/repos/sigp/lighthouse/issues/3648",
    "id": 1588769752,
    "node_id": "IC_kwDOCFeAzc5esrPY",
    "user": {
      "login": "AgeManning",
      "id": 7454587,
      "node_id": "MDQ6VXNlcjc0NTQ1ODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7454587?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/AgeManning",
      "html_url": "https://github.com/AgeManning",
      "followers_url": "https://api.github.com/users/AgeManning/followers",
      "following_url": "https://api.github.com/users/AgeManning/following{/other_user}",
      "gists_url": "https://api.github.com/users/AgeManning/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/AgeManning/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/AgeManning/subscriptions",
      "organizations_url": "https://api.github.com/users/AgeManning/orgs",
      "repos_url": "https://api.github.com/users/AgeManning/repos",
      "events_url": "https://api.github.com/users/AgeManning/events{/privacy}",
      "received_events_url": "https://api.github.com/users/AgeManning/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-06-13T08:07:36Z",
    "updated_at": "2023-06-13T08:07:36Z",
    "author_association": "MEMBER",
    "body": "The issue here gives a decent overview: https://github.com/ethereum/consensus-specs/issues/2749\r\n\r\nDiscovery is based on a kademlia-like routing table. \r\n\r\nCurrently when we do a discovery search, we look for a random target, which means we randomly search the DHT for new nodes and collect useful nodes as we traverse the the DHT. \r\n\r\nSee here in lighthouse code: https://github.com/sigp/lighthouse/blob/stable/beacon_node/lighthouse_network/src/discovery/mod.rs#L348\r\n\r\nAfter spec change, peers on specific subnets can now be found based on their node-ids. I.e the prefix of their node-id determines which subnet they should be subscribed to. This means that instead of doing random searches when looking for peers for a given subnet, we can target specific node-ids. \r\n\r\nWhen we try to discover peers on a given subnet, we call this function: https://github.com/sigp/lighthouse/blob/stable/beacon_node/lighthouse_network/src/discovery/mod.rs#L361\r\n\r\nWhen we go to actually run a subnet query (i.e a search for peers for a given set of subnets) we run this function: https://github.com/sigp/lighthouse/blob/stable/beacon_node/lighthouse_network/src/discovery/mod.rs#L697\r\n\r\nWe ultimately call this function: https://github.com/sigp/lighthouse/blob/stable/beacon_node/lighthouse_network/src/discovery/mod.rs#L756\r\n\r\nWhich sets a random node id as the target for the query. It collects all nodes it finds that match the subnets we are looking for and reports them back. See here: https://github.com/sigp/lighthouse/blob/stable/beacon_node/lighthouse_network/src/discovery/mod.rs#L777\r\n\r\nInstead of using a random node id, we can be smarter and use a random node-id that is pre-fixed with the required bits for nodes on the subnet we are looking for. \r\n\r\nThere are a few tricky parts to this. \r\n\r\nThe first is that given a node-id we can compute the subnet-id at a given epoch that the node is supposed to be subscribed to using this function: https://github.com/sigp/lighthouse/blob/stable/consensus/types/src/subnet_id.rs#L78\r\n\r\nWe would like the inverse, given an epoch and a subnet, what is the node-prefix required? Failing to get this function we can construct a mapping of prefixes to the 64 subnets and use that (which changes per epoch). \r\n\r\nThis change therefore involves discovery having some notion of epochs. \r\n\r\nSecondly - We currently group subnet discoveries. A grouped discovery is not going to work if we are shifting the target node. There has been some simulations that suggest parallel discoveries are just as efficient. So I think we need to remove the concept of grouped discoveries and only have single subnet discoveries but increase the parallelisation of number of searchers. \r\n\r\nWe can increase the parallel queries via: https://github.com/sigp/lighthouse/blob/stable/beacon_node/lighthouse_network/src/discovery/mod.rs#LL62C48-L62C48 and https://github.com/sigp/lighthouse/blob/stable/beacon_node/lighthouse_network/src/config.rs#L289\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/sigp/lighthouse/issues/comments/1588769752/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/sigp/lighthouse/issues/comments/1774209168",
    "html_url": "https://github.com/sigp/lighthouse/issues/3648#issuecomment-1774209168",
    "issue_url": "https://api.github.com/repos/sigp/lighthouse/issues/3648",
    "id": 1774209168,
    "node_id": "IC_kwDOCFeAzc5pwEiQ",
    "user": {
      "login": "ackintosh",
      "id": 1885716,
      "node_id": "MDQ6VXNlcjE4ODU3MTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1885716?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ackintosh",
      "html_url": "https://github.com/ackintosh",
      "followers_url": "https://api.github.com/users/ackintosh/followers",
      "following_url": "https://api.github.com/users/ackintosh/following{/other_user}",
      "gists_url": "https://api.github.com/users/ackintosh/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ackintosh/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ackintosh/subscriptions",
      "organizations_url": "https://api.github.com/users/ackintosh/orgs",
      "repos_url": "https://api.github.com/users/ackintosh/repos",
      "events_url": "https://api.github.com/users/ackintosh/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ackintosh/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-10-22T21:53:12Z",
    "updated_at": "2023-10-22T21:53:12Z",
    "author_association": "MEMBER",
    "body": "I'll take this on after reading the issue.",
    "reactions": {
      "url": "https://api.github.com/repos/sigp/lighthouse/issues/comments/1774209168/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 1,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/sigp/lighthouse/issues/comments/1774336293",
    "html_url": "https://github.com/sigp/lighthouse/issues/3648#issuecomment-1774336293",
    "issue_url": "https://api.github.com/repos/sigp/lighthouse/issues/3648",
    "id": 1774336293,
    "node_id": "IC_kwDOCFeAzc5pwjkl",
    "user": {
      "login": "divagant-martian",
      "id": 26765164,
      "node_id": "MDQ6VXNlcjI2NzY1MTY0",
      "avatar_url": "https://avatars.githubusercontent.com/u/26765164?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/divagant-martian",
      "html_url": "https://github.com/divagant-martian",
      "followers_url": "https://api.github.com/users/divagant-martian/followers",
      "following_url": "https://api.github.com/users/divagant-martian/following{/other_user}",
      "gists_url": "https://api.github.com/users/divagant-martian/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/divagant-martian/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/divagant-martian/subscriptions",
      "organizations_url": "https://api.github.com/users/divagant-martian/orgs",
      "repos_url": "https://api.github.com/users/divagant-martian/repos",
      "events_url": "https://api.github.com/users/divagant-martian/events{/privacy}",
      "received_events_url": "https://api.github.com/users/divagant-martian/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-10-23T02:28:41Z",
    "updated_at": "2023-10-23T02:28:41Z",
    "author_association": "COLLABORATOR",
    "body": "Hey @ackintosh awesome you are taking this, let me know if I can help you in anyway",
    "reactions": {
      "url": "https://api.github.com/repos/sigp/lighthouse/issues/comments/1774336293/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 1,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/sigp/lighthouse/issues/comments/1782241189",
    "html_url": "https://github.com/sigp/lighthouse/issues/3648#issuecomment-1782241189",
    "issue_url": "https://api.github.com/repos/sigp/lighthouse/issues/3648",
    "id": 1782241189,
    "node_id": "IC_kwDOCFeAzc5qOtel",
    "user": {
      "login": "ackintosh",
      "id": 1885716,
      "node_id": "MDQ6VXNlcjE4ODU3MTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1885716?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ackintosh",
      "html_url": "https://github.com/ackintosh",
      "followers_url": "https://api.github.com/users/ackintosh/followers",
      "following_url": "https://api.github.com/users/ackintosh/following{/other_user}",
      "gists_url": "https://api.github.com/users/ackintosh/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ackintosh/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ackintosh/subscriptions",
      "organizations_url": "https://api.github.com/users/ackintosh/orgs",
      "repos_url": "https://api.github.com/users/ackintosh/repos",
      "events_url": "https://api.github.com/users/ackintosh/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ackintosh/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-10-27T03:41:43Z",
    "updated_at": "2023-10-27T03:41:43Z",
    "author_association": "MEMBER",
    "body": "> We would like the inverse, given an epoch and a subnet, what is the node-prefix required? \r\n\r\nI've been thinking about it for a while, but I couldn't come up with how to calculate the node-prefix. 🤔 \r\n\r\nhttps://github.com/ethereum/consensus-specs/blob/dev/specs/phase0/p2p-interface.md#attestation-subnet-subscription\r\n\r\n```python\r\ndef compute_subscribed_subnet(node_id: NodeID, epoch: Epoch, index: int) -> SubnetID:\r\n    node_id_prefix = node_id >> (NODE_ID_BITS - ATTESTATION_SUBNET_PREFIX_BITS)\r\n    node_offset = node_id % EPOCHS_PER_SUBNET_SUBSCRIPTION\r\n    permutation_seed = hash(uint_to_bytes(uint64((epoch + node_offset) // EPOCHS_PER_SUBNET_SUBSCRIPTION)))\r\n    permutated_prefix = compute_shuffled_index(\r\n        node_id_prefix,\r\n        1 << ATTESTATION_SUBNET_PREFIX_BITS,\r\n        permutation_seed,\r\n    )\r\n    return SubnetID((permutated_prefix + index) % ATTESTATION_SUBNET_COUNT)\r\n```\r\n\r\n`permutation_seed` is a hash calculated from some values including `node_offset`, and `node_offset` is based on *node_id*. Therefore, the meaning of a node-prefix depends on its *node_id*. We can not determine a node-prefix given an epoch and a subnet.\r\n\r\n@divagant-martian @AgeManning Please correct me if I have misunderstood something.",
    "reactions": {
      "url": "https://api.github.com/repos/sigp/lighthouse/issues/comments/1782241189/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/sigp/lighthouse/issues/comments/1793949079",
    "html_url": "https://github.com/sigp/lighthouse/issues/3648#issuecomment-1793949079",
    "issue_url": "https://api.github.com/repos/sigp/lighthouse/issues/3648",
    "id": 1793949079,
    "node_id": "IC_kwDOCFeAzc5q7X2X",
    "user": {
      "login": "AgeManning",
      "id": 7454587,
      "node_id": "MDQ6VXNlcjc0NTQ1ODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7454587?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/AgeManning",
      "html_url": "https://github.com/AgeManning",
      "followers_url": "https://api.github.com/users/AgeManning/followers",
      "following_url": "https://api.github.com/users/AgeManning/following{/other_user}",
      "gists_url": "https://api.github.com/users/AgeManning/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/AgeManning/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/AgeManning/subscriptions",
      "organizations_url": "https://api.github.com/users/AgeManning/orgs",
      "repos_url": "https://api.github.com/users/AgeManning/repos",
      "events_url": "https://api.github.com/users/AgeManning/events{/privacy}",
      "received_events_url": "https://api.github.com/users/AgeManning/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-11-06T01:39:56Z",
    "updated_at": "2023-11-06T01:40:15Z",
    "author_association": "MEMBER",
    "body": "No I think you're right. What we need is the permutation seed to be based on the node_id_prefix right? \r\nWe would want:\r\n\r\n```python\r\nnode_offset = node_id_prefix % EPOCHS_PER_SUBNET_SUBSCRIPTION\r\n```\r\nRight?\r\nThat should resolve the issue? We could then pre-calculate the 64 prefixes required. ",
    "reactions": {
      "url": "https://api.github.com/repos/sigp/lighthouse/issues/comments/1793949079/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
