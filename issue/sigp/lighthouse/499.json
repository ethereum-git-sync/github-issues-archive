{
  "url": "https://api.github.com/repos/sigp/lighthouse/issues/499",
  "repository_url": "https://api.github.com/repos/sigp/lighthouse",
  "labels_url": "https://api.github.com/repos/sigp/lighthouse/issues/499/labels{/name}",
  "comments_url": "https://api.github.com/repos/sigp/lighthouse/issues/499/comments",
  "events_url": "https://api.github.com/repos/sigp/lighthouse/issues/499/events",
  "html_url": "https://github.com/sigp/lighthouse/issues/499",
  "id": 479433700,
  "node_id": "MDU6SXNzdWU0Nzk0MzM3MDA=",
  "number": 499,
  "title": "Optimise state storage with long-term freezer database",
  "user": {
    "login": "michaelsproul",
    "id": 4452260,
    "node_id": "MDQ6VXNlcjQ0NTIyNjA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4452260?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/michaelsproul",
    "html_url": "https://github.com/michaelsproul",
    "followers_url": "https://api.github.com/users/michaelsproul/followers",
    "following_url": "https://api.github.com/users/michaelsproul/following{/other_user}",
    "gists_url": "https://api.github.com/users/michaelsproul/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/michaelsproul/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/michaelsproul/subscriptions",
    "organizations_url": "https://api.github.com/users/michaelsproul/orgs",
    "repos_url": "https://api.github.com/users/michaelsproul/repos",
    "events_url": "https://api.github.com/users/michaelsproul/events{/privacy}",
    "received_events_url": "https://api.github.com/users/michaelsproul/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 985647284,
      "node_id": "MDU6TGFiZWw5ODU2NDcyODQ=",
      "url": "https://api.github.com/repos/sigp/lighthouse/labels/enhancement",
      "name": "enhancement",
      "color": "a2eeef",
      "default": true,
      "description": "New feature or request"
    },
    {
      "id": 1141293876,
      "node_id": "MDU6TGFiZWwxMTQxMjkzODc2",
      "url": "https://api.github.com/repos/sigp/lighthouse/labels/work-started",
      "name": "work-started",
      "color": "e072ab",
      "default": false,
      "description": ""
    },
    {
      "id": 1157252215,
      "node_id": "MDU6TGFiZWwxMTU3MjUyMjE1",
      "url": "https://api.github.com/repos/sigp/lighthouse/labels/major-task",
      "name": "major-task",
      "color": "c18d3f",
      "default": false,
      "description": "A significant amount of work or conceptual task."
    },
    {
      "id": 1232620456,
      "node_id": "MDU6TGFiZWwxMjMyNjIwNDU2",
      "url": "https://api.github.com/repos/sigp/lighthouse/labels/RFC",
      "name": "RFC",
      "color": "4aaa19",
      "default": false,
      "description": "Request for comment"
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": {
    "login": "michaelsproul",
    "id": 4452260,
    "node_id": "MDQ6VXNlcjQ0NTIyNjA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4452260?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/michaelsproul",
    "html_url": "https://github.com/michaelsproul",
    "followers_url": "https://api.github.com/users/michaelsproul/followers",
    "following_url": "https://api.github.com/users/michaelsproul/following{/other_user}",
    "gists_url": "https://api.github.com/users/michaelsproul/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/michaelsproul/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/michaelsproul/subscriptions",
    "organizations_url": "https://api.github.com/users/michaelsproul/orgs",
    "repos_url": "https://api.github.com/users/michaelsproul/repos",
    "events_url": "https://api.github.com/users/michaelsproul/events{/privacy}",
    "received_events_url": "https://api.github.com/users/michaelsproul/received_events",
    "type": "User",
    "site_admin": false
  },
  "assignees": [
    {
      "login": "michaelsproul",
      "id": 4452260,
      "node_id": "MDQ6VXNlcjQ0NTIyNjA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4452260?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/michaelsproul",
      "html_url": "https://github.com/michaelsproul",
      "followers_url": "https://api.github.com/users/michaelsproul/followers",
      "following_url": "https://api.github.com/users/michaelsproul/following{/other_user}",
      "gists_url": "https://api.github.com/users/michaelsproul/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/michaelsproul/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/michaelsproul/subscriptions",
      "organizations_url": "https://api.github.com/users/michaelsproul/orgs",
      "repos_url": "https://api.github.com/users/michaelsproul/repos",
      "events_url": "https://api.github.com/users/michaelsproul/events{/privacy}",
      "received_events_url": "https://api.github.com/users/michaelsproul/received_events",
      "type": "User",
      "site_admin": false
    },
    {
      "login": "paulhauner",
      "id": 6660660,
      "node_id": "MDQ6VXNlcjY2NjA2NjA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6660660?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/paulhauner",
      "html_url": "https://github.com/paulhauner",
      "followers_url": "https://api.github.com/users/paulhauner/followers",
      "following_url": "https://api.github.com/users/paulhauner/following{/other_user}",
      "gists_url": "https://api.github.com/users/paulhauner/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/paulhauner/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/paulhauner/subscriptions",
      "organizations_url": "https://api.github.com/users/paulhauner/orgs",
      "repos_url": "https://api.github.com/users/paulhauner/repos",
      "events_url": "https://api.github.com/users/paulhauner/events{/privacy}",
      "received_events_url": "https://api.github.com/users/paulhauner/received_events",
      "type": "User",
      "site_admin": false
    }
  ],
  "milestone": {
    "url": "https://api.github.com/repos/sigp/lighthouse/milestones/2",
    "html_url": "https://github.com/sigp/lighthouse/milestone/2",
    "labels_url": "https://api.github.com/repos/sigp/lighthouse/milestones/2/labels",
    "id": 4868268,
    "node_id": "MDk6TWlsZXN0b25lNDg2ODI2OA==",
    "number": 2,
    "title": "Public Testnet",
    "description": null,
    "creator": {
      "login": "paulhauner",
      "id": 6660660,
      "node_id": "MDQ6VXNlcjY2NjA2NjA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6660660?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/paulhauner",
      "html_url": "https://github.com/paulhauner",
      "followers_url": "https://api.github.com/users/paulhauner/followers",
      "following_url": "https://api.github.com/users/paulhauner/following{/other_user}",
      "gists_url": "https://api.github.com/users/paulhauner/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/paulhauner/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/paulhauner/subscriptions",
      "organizations_url": "https://api.github.com/users/paulhauner/orgs",
      "repos_url": "https://api.github.com/users/paulhauner/repos",
      "events_url": "https://api.github.com/users/paulhauner/events{/privacy}",
      "received_events_url": "https://api.github.com/users/paulhauner/received_events",
      "type": "User",
      "site_admin": false
    },
    "open_issues": 0,
    "closed_issues": 33,
    "state": "closed",
    "created_at": "2019-11-21T23:13:44Z",
    "updated_at": "2019-12-18T07:13:57Z",
    "due_on": null,
    "closed_at": "2019-12-18T07:13:57Z"
  },
  "comments": 7,
  "created_at": "2019-08-12T00:42:15Z",
  "updated_at": "2019-11-26T23:55:25Z",
  "closed_at": "2019-11-26T23:55:25Z",
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "## Description\r\n\r\nAs raised in #484 we need to do something about the duplication of state in the database. This RFC proposes to solve the problem by storing state efficiently before the last finalized checkpoint, in tables similar to those used in #484 (sequential DB keys, multiple values per key).\r\n\r\n## Design Details\r\n\r\nThis is more of a quick idea dump before I start prototyping:\r\n\r\n* Separate \"hot\" and \"cold\" databases. Provide an abstraction that makes the distinction transparent to the user (maybe with an optional flag to say \"hot only\" or \"cold only\"). We can implement the `Store` trait for the abstraction wrapper, so that the hot-cold DB can be swapped in and out with the existing DB implementation.\r\n* The wrapper over the hot and cold databases needs to keep track of the finalized checkpoint at which the database splits, so that it knows which database to check for a given state root/block root/slot.\r\n* We don't want to \"stop the world\" each time we want to move things from the hot database to the cold. I think we can avoid this by running the migration in its own thread, using an algorithm something like:\r\n    1. Copy all of the state from hot to cold, taking only temporary per-entry read/write locks on the database (allows the main thread to interleave reads)\r\n    2. Atomically update the finalized checkpoint in the database wrapper, so that it starts to direct queries for the recently copied states to the cold database.\r\n    3. Delete the copied entries one by one from the hot database using short-lived write locks.\r\n  AFAICT this should prevent the main thread from observing a partial migration (which would be difficult to handle).\r\n\r\n## TODO\r\n\r\nA few issues require a bit more thought:\r\n\r\n* What if a finalized checkpoint _is_ reverted, by 1/3 of validators getting slashed? If we have the wrong chain in our DB and we've deleted the other chain then we're a bit screwed. A pragmatic solution might be to lag protocol finalization by a little bit... i.e. only migrate the database once a checkpoint has other finalized checkpoints after it (but that would seem to defeat the point!)\r\n* Exactly how do we find all the short-lived forks that can be garbage-collected once the main chain is finalized? We likely want to hook into the fork choice code, but I haven't thought about this in-depth or formulated an exact plan yet.\r\n",
  "closed_by": {
    "login": "paulhauner",
    "id": 6660660,
    "node_id": "MDQ6VXNlcjY2NjA2NjA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6660660?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/paulhauner",
    "html_url": "https://github.com/paulhauner",
    "followers_url": "https://api.github.com/users/paulhauner/followers",
    "following_url": "https://api.github.com/users/paulhauner/following{/other_user}",
    "gists_url": "https://api.github.com/users/paulhauner/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/paulhauner/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/paulhauner/subscriptions",
    "organizations_url": "https://api.github.com/users/paulhauner/orgs",
    "repos_url": "https://api.github.com/users/paulhauner/repos",
    "events_url": "https://api.github.com/users/paulhauner/events{/privacy}",
    "received_events_url": "https://api.github.com/users/paulhauner/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/sigp/lighthouse/issues/499/reactions",
    "total_count": 1,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 1,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/sigp/lighthouse/issues/499/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/sigp/lighthouse/issues/comments/520276584",
    "html_url": "https://github.com/sigp/lighthouse/issues/499#issuecomment-520276584",
    "issue_url": "https://api.github.com/repos/sigp/lighthouse/issues/499",
    "id": 520276584,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUyMDI3NjU4NA==",
    "user": {
      "login": "paulhauner",
      "id": 6660660,
      "node_id": "MDQ6VXNlcjY2NjA2NjA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6660660?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/paulhauner",
      "html_url": "https://github.com/paulhauner",
      "followers_url": "https://api.github.com/users/paulhauner/followers",
      "following_url": "https://api.github.com/users/paulhauner/following{/other_user}",
      "gists_url": "https://api.github.com/users/paulhauner/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/paulhauner/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/paulhauner/subscriptions",
      "organizations_url": "https://api.github.com/users/paulhauner/orgs",
      "repos_url": "https://api.github.com/users/paulhauner/repos",
      "events_url": "https://api.github.com/users/paulhauner/events{/privacy}",
      "received_events_url": "https://api.github.com/users/paulhauner/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-08-12T01:02:05Z",
    "updated_at": "2019-08-12T01:02:05Z",
    "author_association": "MEMBER",
    "body": "Sounds good! I've been thinking about this a bit and I'm totally on board!\r\n\r\nHere's some points I've been considering:\r\n\r\n- Having some overlap between hot/cold might be nice too (e.g., a few epochs).\r\n   - This works well with a background process that's working over time to migrate values from hot \r\n- Using an arbitrary, user configurable hot/cold boundary range would be useful (e.g., not just always finalized epoch).\r\n   - User can decide if they care more about speed or disk size (e.g., a server may not care about disk size, but want fast reads).\r\n   - Being able to move this on the fly would be appealing but only if it's low-hanging fruit, IMO.\r\nto cold -- it allows the process some room to lag during temporary periods of heavy-resource use.\r\n- We do a lot of _\"does this block hash exist in the database\"_ calls during block processing\r\n  - A fairly simple solution would be to check hot, then check cold. If neither have the block, it's not there.\r\n  - We could do better if we can pass `block.slot` along with `block.tree_hash_root()` (this is possible in block processing). In this case, we could (sometimes) know that the block is too old/young to be in the hot/cold database and do just one read.",
    "reactions": {
      "url": "https://api.github.com/repos/sigp/lighthouse/issues/comments/520276584/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/sigp/lighthouse/issues/comments/520277884",
    "html_url": "https://github.com/sigp/lighthouse/issues/499#issuecomment-520277884",
    "issue_url": "https://api.github.com/repos/sigp/lighthouse/issues/499",
    "id": 520277884,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUyMDI3Nzg4NA==",
    "user": {
      "login": "michaelsproul",
      "id": 4452260,
      "node_id": "MDQ6VXNlcjQ0NTIyNjA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4452260?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/michaelsproul",
      "html_url": "https://github.com/michaelsproul",
      "followers_url": "https://api.github.com/users/michaelsproul/followers",
      "following_url": "https://api.github.com/users/michaelsproul/following{/other_user}",
      "gists_url": "https://api.github.com/users/michaelsproul/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/michaelsproul/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/michaelsproul/subscriptions",
      "organizations_url": "https://api.github.com/users/michaelsproul/orgs",
      "repos_url": "https://api.github.com/users/michaelsproul/repos",
      "events_url": "https://api.github.com/users/michaelsproul/events{/privacy}",
      "received_events_url": "https://api.github.com/users/michaelsproul/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-08-12T01:17:26Z",
    "updated_at": "2019-08-12T01:17:26Z",
    "author_association": "MEMBER",
    "body": "Yeah I'm on-board with all your points!\r\n\r\nI think the configurable boundary point is a particularly good idea, I'll make sure the code is generic over that.\r\n\r\n> Being able to move this on the fly would be appealing but only if it's low-hanging fruit, IMO.\r\n\r\nYou mean you ask the node to switch more data into the hot/cold database while it's running? I can see how that would be useful, and doing the cold -> hot transfer could probably mirror the hot -> cold transfer quite easily.",
    "reactions": {
      "url": "https://api.github.com/repos/sigp/lighthouse/issues/comments/520277884/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/sigp/lighthouse/issues/comments/520278209",
    "html_url": "https://github.com/sigp/lighthouse/issues/499#issuecomment-520278209",
    "issue_url": "https://api.github.com/repos/sigp/lighthouse/issues/499",
    "id": 520278209,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUyMDI3ODIwOQ==",
    "user": {
      "login": "paulhauner",
      "id": 6660660,
      "node_id": "MDQ6VXNlcjY2NjA2NjA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6660660?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/paulhauner",
      "html_url": "https://github.com/paulhauner",
      "followers_url": "https://api.github.com/users/paulhauner/followers",
      "following_url": "https://api.github.com/users/paulhauner/following{/other_user}",
      "gists_url": "https://api.github.com/users/paulhauner/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/paulhauner/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/paulhauner/subscriptions",
      "organizations_url": "https://api.github.com/users/paulhauner/orgs",
      "repos_url": "https://api.github.com/users/paulhauner/repos",
      "events_url": "https://api.github.com/users/paulhauner/events{/privacy}",
      "received_events_url": "https://api.github.com/users/paulhauner/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-08-12T01:20:49Z",
    "updated_at": "2019-08-12T01:20:49Z",
    "author_association": "MEMBER",
    "body": "> You mean you ask the node to switch more data into the hot/cold database while it's running?\r\n\r\nCorrect! I didn't consider that we'd need to go cold -> hot. If that turns out to be complicated, I think just getting a non-dynamic system running would be a very significant improvement alone!",
    "reactions": {
      "url": "https://api.github.com/repos/sigp/lighthouse/issues/comments/520278209/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/sigp/lighthouse/issues/comments/520333433",
    "html_url": "https://github.com/sigp/lighthouse/issues/499#issuecomment-520333433",
    "issue_url": "https://api.github.com/repos/sigp/lighthouse/issues/499",
    "id": 520333433,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUyMDMzMzQzMw==",
    "user": {
      "login": "michaelsproul",
      "id": 4452260,
      "node_id": "MDQ6VXNlcjQ0NTIyNjA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4452260?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/michaelsproul",
      "html_url": "https://github.com/michaelsproul",
      "followers_url": "https://api.github.com/users/michaelsproul/followers",
      "following_url": "https://api.github.com/users/michaelsproul/following{/other_user}",
      "gists_url": "https://api.github.com/users/michaelsproul/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/michaelsproul/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/michaelsproul/subscriptions",
      "organizations_url": "https://api.github.com/users/michaelsproul/orgs",
      "repos_url": "https://api.github.com/users/michaelsproul/repos",
      "events_url": "https://api.github.com/users/michaelsproul/events{/privacy}",
      "received_events_url": "https://api.github.com/users/michaelsproul/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-08-12T08:10:33Z",
    "updated_at": "2019-08-12T08:10:33Z",
    "author_association": "MEMBER",
    "body": "I'm prototyping, so far so good...",
    "reactions": {
      "url": "https://api.github.com/repos/sigp/lighthouse/issues/comments/520333433/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 1,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/sigp/lighthouse/issues/comments/521079335",
    "html_url": "https://github.com/sigp/lighthouse/issues/499#issuecomment-521079335",
    "issue_url": "https://api.github.com/repos/sigp/lighthouse/issues/499",
    "id": 521079335,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUyMTA3OTMzNQ==",
    "user": {
      "login": "paulhauner",
      "id": 6660660,
      "node_id": "MDQ6VXNlcjY2NjA2NjA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6660660?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/paulhauner",
      "html_url": "https://github.com/paulhauner",
      "followers_url": "https://api.github.com/users/paulhauner/followers",
      "following_url": "https://api.github.com/users/paulhauner/following{/other_user}",
      "gists_url": "https://api.github.com/users/paulhauner/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/paulhauner/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/paulhauner/subscriptions",
      "organizations_url": "https://api.github.com/users/paulhauner/orgs",
      "repos_url": "https://api.github.com/users/paulhauner/repos",
      "events_url": "https://api.github.com/users/paulhauner/events{/privacy}",
      "received_events_url": "https://api.github.com/users/paulhauner/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-08-14T02:34:10Z",
    "updated_at": "2019-08-14T02:34:10Z",
    "author_association": "MEMBER",
    "body": "I just had a thought, when we start syncing from some mid-chain finalized state (e.g., weak subjectivity bounary) we'll want to be able to drop blocks/state directly into the freezer (without touching the hot db). ",
    "reactions": {
      "url": "https://api.github.com/repos/sigp/lighthouse/issues/comments/521079335/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/sigp/lighthouse/issues/comments/521539363",
    "html_url": "https://github.com/sigp/lighthouse/issues/499#issuecomment-521539363",
    "issue_url": "https://api.github.com/repos/sigp/lighthouse/issues/499",
    "id": 521539363,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUyMTUzOTM2Mw==",
    "user": {
      "login": "michaelsproul",
      "id": 4452260,
      "node_id": "MDQ6VXNlcjQ0NTIyNjA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4452260?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/michaelsproul",
      "html_url": "https://github.com/michaelsproul",
      "followers_url": "https://api.github.com/users/michaelsproul/followers",
      "following_url": "https://api.github.com/users/michaelsproul/following{/other_user}",
      "gists_url": "https://api.github.com/users/michaelsproul/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/michaelsproul/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/michaelsproul/subscriptions",
      "organizations_url": "https://api.github.com/users/michaelsproul/orgs",
      "repos_url": "https://api.github.com/users/michaelsproul/repos",
      "events_url": "https://api.github.com/users/michaelsproul/events{/privacy}",
      "received_events_url": "https://api.github.com/users/michaelsproul/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-08-15T07:04:55Z",
    "updated_at": "2019-08-15T07:05:11Z",
    "author_association": "MEMBER",
    "body": "Yeah, with the way things are shaping up, I think syncing \"middle out\" from some finalized block should work well",
    "reactions": {
      "url": "https://api.github.com/repos/sigp/lighthouse/issues/comments/521539363/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 1,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/sigp/lighthouse/issues/comments/558867017",
    "html_url": "https://github.com/sigp/lighthouse/issues/499#issuecomment-558867017",
    "issue_url": "https://api.github.com/repos/sigp/lighthouse/issues/499",
    "id": 558867017,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1ODg2NzAxNw==",
    "user": {
      "login": "paulhauner",
      "id": 6660660,
      "node_id": "MDQ6VXNlcjY2NjA2NjA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6660660?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/paulhauner",
      "html_url": "https://github.com/paulhauner",
      "followers_url": "https://api.github.com/users/paulhauner/followers",
      "following_url": "https://api.github.com/users/paulhauner/following{/other_user}",
      "gists_url": "https://api.github.com/users/paulhauner/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/paulhauner/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/paulhauner/subscriptions",
      "organizations_url": "https://api.github.com/users/paulhauner/orgs",
      "repos_url": "https://api.github.com/users/paulhauner/repos",
      "events_url": "https://api.github.com/users/paulhauner/events{/privacy}",
      "received_events_url": "https://api.github.com/users/paulhauner/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-11-26T23:55:25Z",
    "updated_at": "2019-11-26T23:55:25Z",
    "author_association": "MEMBER",
    "body": "Resolved by #508",
    "reactions": {
      "url": "https://api.github.com/repos/sigp/lighthouse/issues/comments/558867017/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
