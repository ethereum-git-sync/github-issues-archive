{
  "url": "https://api.github.com/repos/sigp/lighthouse/issues/1076",
  "repository_url": "https://api.github.com/repos/sigp/lighthouse",
  "labels_url": "https://api.github.com/repos/sigp/lighthouse/issues/1076/labels{/name}",
  "comments_url": "https://api.github.com/repos/sigp/lighthouse/issues/1076/comments",
  "events_url": "https://api.github.com/repos/sigp/lighthouse/issues/1076/events",
  "html_url": "https://github.com/sigp/lighthouse/issues/1076",
  "id": 608173795,
  "node_id": "MDU6SXNzdWU2MDgxNzM3OTU=",
  "number": 1076,
  "title": "Tidy `process_deposit`",
  "user": {
    "login": "JustinDrake",
    "id": 731743,
    "node_id": "MDQ6VXNlcjczMTc0Mw==",
    "avatar_url": "https://avatars.githubusercontent.com/u/731743?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/JustinDrake",
    "html_url": "https://github.com/JustinDrake",
    "followers_url": "https://api.github.com/users/JustinDrake/followers",
    "following_url": "https://api.github.com/users/JustinDrake/following{/other_user}",
    "gists_url": "https://api.github.com/users/JustinDrake/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/JustinDrake/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/JustinDrake/subscriptions",
    "organizations_url": "https://api.github.com/users/JustinDrake/orgs",
    "repos_url": "https://api.github.com/users/JustinDrake/repos",
    "events_url": "https://api.github.com/users/JustinDrake/events{/privacy}",
    "received_events_url": "https://api.github.com/users/JustinDrake/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 1690958121,
      "node_id": "MDU6TGFiZWwxNjkwOTU4MTIx",
      "url": "https://api.github.com/repos/sigp/lighthouse/labels/code-quality",
      "name": "code-quality",
      "color": "77a7ff",
      "default": false,
      "description": ""
    },
    {
      "id": 2034355093,
      "node_id": "MDU6TGFiZWwyMDM0MzU1MDkz",
      "url": "https://api.github.com/repos/sigp/lighthouse/labels/consensus",
      "name": "consensus",
      "color": "5e59bf",
      "default": false,
      "description": "An issue/PR that touches consensus code, such as state_processing or block verification."
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": {
    "login": "michaelsproul",
    "id": 4452260,
    "node_id": "MDQ6VXNlcjQ0NTIyNjA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4452260?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/michaelsproul",
    "html_url": "https://github.com/michaelsproul",
    "followers_url": "https://api.github.com/users/michaelsproul/followers",
    "following_url": "https://api.github.com/users/michaelsproul/following{/other_user}",
    "gists_url": "https://api.github.com/users/michaelsproul/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/michaelsproul/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/michaelsproul/subscriptions",
    "organizations_url": "https://api.github.com/users/michaelsproul/orgs",
    "repos_url": "https://api.github.com/users/michaelsproul/repos",
    "events_url": "https://api.github.com/users/michaelsproul/events{/privacy}",
    "received_events_url": "https://api.github.com/users/michaelsproul/received_events",
    "type": "User",
    "site_admin": false
  },
  "assignees": [
    {
      "login": "michaelsproul",
      "id": 4452260,
      "node_id": "MDQ6VXNlcjQ0NTIyNjA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4452260?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/michaelsproul",
      "html_url": "https://github.com/michaelsproul",
      "followers_url": "https://api.github.com/users/michaelsproul/followers",
      "following_url": "https://api.github.com/users/michaelsproul/following{/other_user}",
      "gists_url": "https://api.github.com/users/michaelsproul/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/michaelsproul/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/michaelsproul/subscriptions",
      "organizations_url": "https://api.github.com/users/michaelsproul/orgs",
      "repos_url": "https://api.github.com/users/michaelsproul/repos",
      "events_url": "https://api.github.com/users/michaelsproul/events{/privacy}",
      "received_events_url": "https://api.github.com/users/michaelsproul/received_events",
      "type": "User",
      "site_admin": false
    }
  ],
  "milestone": null,
  "comments": 3,
  "created_at": "2020-04-28T09:41:30Z",
  "updated_at": "2022-11-09T05:03:02Z",
  "closed_at": "2020-09-14T12:26:16Z",
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "**Context**: I started yesterday to familiarise myself with the Lighthouse codebase. (I'm enjoyed it BTWâ€”very readable and accessible.) I'll report issues and ask questions as I go along if that's OK :) Apologies in advance if I ask stupid questions :joy:\r\n\r\n---\r\n\r\nWhat is the purpose of the following snippet in `process_deposit`?\r\n\r\n```rust\r\n    let pubkey: PublicKey = match (&deposit.data.pubkey).try_into() {\r\n        Err(_) => return Ok(()), //bad public key => return early\r\n        Ok(k) => k,\r\n    };\r\n```\r\n\r\n1) From what I can tell the `pubkey` variable is only used way down (`pubkey.into()` under \"Create a new validator.\").\r\n2) If the public key is \"bad\" (what exactly does bad mean here?) then shouldn't `verify_deposit_signature(&deposit.data, spec).is_err()` cause `process_deposit` to return early anyway?\r\n3) As a nitpick the comment `//bad public key => return early` is a bit sloppy. (Missing space after `//`, missing capitalisation of `bad`, missing `.` at the end, use of `=>`.)",
  "closed_by": {
    "login": "bors[bot]",
    "id": 26634292,
    "node_id": "MDM6Qm90MjY2MzQyOTI=",
    "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/bors%5Bbot%5D",
    "html_url": "https://github.com/apps/bors",
    "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers",
    "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}",
    "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions",
    "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs",
    "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos",
    "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}",
    "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events",
    "type": "Bot",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/sigp/lighthouse/issues/1076/reactions",
    "total_count": 1,
    "+1": 1,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/sigp/lighthouse/issues/1076/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/sigp/lighthouse/issues/comments/620538815",
    "html_url": "https://github.com/sigp/lighthouse/issues/1076#issuecomment-620538815",
    "issue_url": "https://api.github.com/repos/sigp/lighthouse/issues/1076",
    "id": 620538815,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYyMDUzODgxNQ==",
    "user": {
      "login": "paulhauner",
      "id": 6660660,
      "node_id": "MDQ6VXNlcjY2NjA2NjA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6660660?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/paulhauner",
      "html_url": "https://github.com/paulhauner",
      "followers_url": "https://api.github.com/users/paulhauner/followers",
      "following_url": "https://api.github.com/users/paulhauner/following{/other_user}",
      "gists_url": "https://api.github.com/users/paulhauner/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/paulhauner/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/paulhauner/subscriptions",
      "organizations_url": "https://api.github.com/users/paulhauner/orgs",
      "repos_url": "https://api.github.com/users/paulhauner/repos",
      "events_url": "https://api.github.com/users/paulhauner/events{/privacy}",
      "received_events_url": "https://api.github.com/users/paulhauner/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-04-28T11:08:30Z",
    "updated_at": "2020-04-28T11:08:30Z",
    "author_association": "MEMBER",
    "body": "> From what I can tell the pubkey variable is only used way down (pubkey.into() under \"Create a new validator.\").\r\n\r\nOrdering here is indeed a bit odd. I suspect it's because `get_existing_validator_index` used to take a `PublicKey` not a `PublicKeyBytes`, but not sure.\r\n\r\nI'd be tempted to move the `try_into` higher up in the function so we can fail earlier if we get junk BLS. @michaelsproul, thoughts?\r\n\r\n> If the public key is \"bad\" (what exactly does bad mean here?) then shouldn't verify_deposit_signature(&deposit.data, spec).is_err() cause process_deposit to return early anyway?\r\n\r\nWe have two ways to represent a public key:\r\n\r\n  - `PublicKeyBytes`: some bytes that are supposed to be a compressed pubkey.\r\n  - `PublicKey`: an actual decompressed pubkey.\r\n\r\nWhat you're seeing is a conversion from `PublicKeyBytes` to `PublicKey` that will fail if `PublicKeyBytes` doesn't represent a point on the curve.\r\n\r\nThe problem with only having a `PublicKeyBytes` struct and decompressing each time we do signature verification is that it does repeated decompression (not cheap). It is primarily for this reason we maintain these two structs throughout the codebase.\r\n\r\nOn a side-note, we also maintain a [ValidatorPubkeyCache](https://github.com/sigp/lighthouse/blob/master/beacon_node/beacon_chain/src/validator_pubkey_cache.rs) on the `BeaconChain` that we use to keep all known pubkeys in decompressed form in RAM, making the assumption that `ETH1_FOLLOW_DISTANCE` means finality for eth1. This struct will probably need re-thinking when we start re-using validator indices, but I think that'll be a matter of representing them as `(epoch, index)` tuples; a bridge we can cross when we come to it.\r\n\r\n> As a nitpick the comment //bad public key => return early is a bit sloppy. (Missing space after //, missing capitalisation of bad, missing . at the end, use of =>.)\r\n\r\nYep, good point, it's not consistent with the rest of our code. Git blame says that an external contributor did this and I didn't pick it up in a PR review.\r\n\r\nIn order to close this issue I think we should:\r\n\r\n- Decide if we're going to move that `try_into` (cc @michaelsproul)\r\n- Tidy that comment",
    "reactions": {
      "url": "https://api.github.com/repos/sigp/lighthouse/issues/comments/620538815/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/sigp/lighthouse/issues/comments/620546902",
    "html_url": "https://github.com/sigp/lighthouse/issues/1076#issuecomment-620546902",
    "issue_url": "https://api.github.com/repos/sigp/lighthouse/issues/1076",
    "id": 620546902,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYyMDU0NjkwMg==",
    "user": {
      "login": "JustinDrake",
      "id": 731743,
      "node_id": "MDQ6VXNlcjczMTc0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/731743?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JustinDrake",
      "html_url": "https://github.com/JustinDrake",
      "followers_url": "https://api.github.com/users/JustinDrake/followers",
      "following_url": "https://api.github.com/users/JustinDrake/following{/other_user}",
      "gists_url": "https://api.github.com/users/JustinDrake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JustinDrake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JustinDrake/subscriptions",
      "organizations_url": "https://api.github.com/users/JustinDrake/orgs",
      "repos_url": "https://api.github.com/users/JustinDrake/repos",
      "events_url": "https://api.github.com/users/JustinDrake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JustinDrake/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-04-28T11:26:18Z",
    "updated_at": "2020-04-28T11:26:18Z",
    "author_association": "CONTRIBUTOR",
    "body": "> We have two ways to represent a public key\r\n\r\nThat makes sense. Since decompression is expensive do you maintain a cache mapping compressed to uncompressed keys?",
    "reactions": {
      "url": "https://api.github.com/repos/sigp/lighthouse/issues/comments/620546902/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/sigp/lighthouse/issues/comments/620559301",
    "html_url": "https://github.com/sigp/lighthouse/issues/1076#issuecomment-620559301",
    "issue_url": "https://api.github.com/repos/sigp/lighthouse/issues/1076",
    "id": 620559301,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYyMDU1OTMwMQ==",
    "user": {
      "login": "paulhauner",
      "id": 6660660,
      "node_id": "MDQ6VXNlcjY2NjA2NjA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6660660?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/paulhauner",
      "html_url": "https://github.com/paulhauner",
      "followers_url": "https://api.github.com/users/paulhauner/followers",
      "following_url": "https://api.github.com/users/paulhauner/following{/other_user}",
      "gists_url": "https://api.github.com/users/paulhauner/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/paulhauner/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/paulhauner/subscriptions",
      "organizations_url": "https://api.github.com/users/paulhauner/orgs",
      "repos_url": "https://api.github.com/users/paulhauner/repos",
      "events_url": "https://api.github.com/users/paulhauner/events{/privacy}",
      "received_events_url": "https://api.github.com/users/paulhauner/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-04-28T11:55:18Z",
    "updated_at": "2020-04-28T11:55:18Z",
    "author_association": "MEMBER",
    "body": "> Since decompression is expensive do you maintain a cache mapping compressed to uncompressed keys?\r\n\r\nWe don't maintain an arbitrary cache of compressed bytes -> uncompressed bytes, if that's your question. We keep that `ValidatorPubkeyCache` instead, which does validator index -> uncompressed struct representation. ",
    "reactions": {
      "url": "https://api.github.com/repos/sigp/lighthouse/issues/comments/620559301/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
