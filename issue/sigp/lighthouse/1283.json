{
  "url": "https://api.github.com/repos/sigp/lighthouse/issues/1283",
  "repository_url": "https://api.github.com/repos/sigp/lighthouse",
  "labels_url": "https://api.github.com/repos/sigp/lighthouse/issues/1283/labels{/name}",
  "comments_url": "https://api.github.com/repos/sigp/lighthouse/issues/1283/comments",
  "events_url": "https://api.github.com/repos/sigp/lighthouse/issues/1283/events",
  "html_url": "https://github.com/sigp/lighthouse/issues/1283",
  "id": 643507013,
  "node_id": "MDU6SXNzdWU2NDM1MDcwMTM=",
  "number": 1283,
  "title": "Track banned peers via IP/PORT",
  "user": {
    "login": "AgeManning",
    "id": 7454587,
    "node_id": "MDQ6VXNlcjc0NTQ1ODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/7454587?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/AgeManning",
    "html_url": "https://github.com/AgeManning",
    "followers_url": "https://api.github.com/users/AgeManning/followers",
    "following_url": "https://api.github.com/users/AgeManning/following{/other_user}",
    "gists_url": "https://api.github.com/users/AgeManning/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/AgeManning/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/AgeManning/subscriptions",
    "organizations_url": "https://api.github.com/users/AgeManning/orgs",
    "repos_url": "https://api.github.com/users/AgeManning/repos",
    "events_url": "https://api.github.com/users/AgeManning/events{/privacy}",
    "received_events_url": "https://api.github.com/users/AgeManning/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": {
    "login": "blacktemplar",
    "id": 3133334,
    "node_id": "MDQ6VXNlcjMxMzMzMzQ=",
    "avatar_url": "https://avatars.githubusercontent.com/u/3133334?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/blacktemplar",
    "html_url": "https://github.com/blacktemplar",
    "followers_url": "https://api.github.com/users/blacktemplar/followers",
    "following_url": "https://api.github.com/users/blacktemplar/following{/other_user}",
    "gists_url": "https://api.github.com/users/blacktemplar/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/blacktemplar/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/blacktemplar/subscriptions",
    "organizations_url": "https://api.github.com/users/blacktemplar/orgs",
    "repos_url": "https://api.github.com/users/blacktemplar/repos",
    "events_url": "https://api.github.com/users/blacktemplar/events{/privacy}",
    "received_events_url": "https://api.github.com/users/blacktemplar/received_events",
    "type": "User",
    "site_admin": false
  },
  "assignees": [
    {
      "login": "blacktemplar",
      "id": 3133334,
      "node_id": "MDQ6VXNlcjMxMzMzMzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3133334?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/blacktemplar",
      "html_url": "https://github.com/blacktemplar",
      "followers_url": "https://api.github.com/users/blacktemplar/followers",
      "following_url": "https://api.github.com/users/blacktemplar/following{/other_user}",
      "gists_url": "https://api.github.com/users/blacktemplar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/blacktemplar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/blacktemplar/subscriptions",
      "organizations_url": "https://api.github.com/users/blacktemplar/orgs",
      "repos_url": "https://api.github.com/users/blacktemplar/repos",
      "events_url": "https://api.github.com/users/blacktemplar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/blacktemplar/received_events",
      "type": "User",
      "site_admin": false
    }
  ],
  "milestone": null,
  "comments": 6,
  "created_at": "2020-06-23T03:45:13Z",
  "updated_at": "2020-08-21T02:10:28Z",
  "closed_at": "2020-08-21T02:10:28Z",
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "## Description\r\n\r\nPeers are identified via their PeerId. Their score is tagged to this `PeerId`. \r\n\r\nThe tracking logic should be updated to keep track of PeerId and IP/PORT. We then blacklist not just a PeerId but also an IP/PORT to prevent attackers from spamming new `PeerId` and performing the same attack. \r\n",
  "closed_by": {
    "login": "AgeManning",
    "id": 7454587,
    "node_id": "MDQ6VXNlcjc0NTQ1ODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/7454587?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/AgeManning",
    "html_url": "https://github.com/AgeManning",
    "followers_url": "https://api.github.com/users/AgeManning/followers",
    "following_url": "https://api.github.com/users/AgeManning/following{/other_user}",
    "gists_url": "https://api.github.com/users/AgeManning/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/AgeManning/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/AgeManning/subscriptions",
    "organizations_url": "https://api.github.com/users/AgeManning/orgs",
    "repos_url": "https://api.github.com/users/AgeManning/repos",
    "events_url": "https://api.github.com/users/AgeManning/events{/privacy}",
    "received_events_url": "https://api.github.com/users/AgeManning/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/sigp/lighthouse/issues/1283/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/sigp/lighthouse/issues/1283/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/sigp/lighthouse/issues/comments/650472238",
    "html_url": "https://github.com/sigp/lighthouse/issues/1283#issuecomment-650472238",
    "issue_url": "https://api.github.com/repos/sigp/lighthouse/issues/1283",
    "id": 650472238,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY1MDQ3MjIzOA==",
    "user": {
      "login": "ethDreamer",
      "id": 37123614,
      "node_id": "MDQ6VXNlcjM3MTIzNjE0",
      "avatar_url": "https://avatars.githubusercontent.com/u/37123614?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ethDreamer",
      "html_url": "https://github.com/ethDreamer",
      "followers_url": "https://api.github.com/users/ethDreamer/followers",
      "following_url": "https://api.github.com/users/ethDreamer/following{/other_user}",
      "gists_url": "https://api.github.com/users/ethDreamer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ethDreamer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ethDreamer/subscriptions",
      "organizations_url": "https://api.github.com/users/ethDreamer/orgs",
      "repos_url": "https://api.github.com/users/ethDreamer/repos",
      "events_url": "https://api.github.com/users/ethDreamer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ethDreamer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-06-27T01:53:03Z",
    "updated_at": "2020-06-27T01:53:03Z",
    "author_association": "COLLABORATOR",
    "body": "This looks interesting. I'll check it out this weekend :)",
    "reactions": {
      "url": "https://api.github.com/repos/sigp/lighthouse/issues/comments/650472238/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/sigp/lighthouse/issues/comments/650658713",
    "html_url": "https://github.com/sigp/lighthouse/issues/1283#issuecomment-650658713",
    "issue_url": "https://api.github.com/repos/sigp/lighthouse/issues/1283",
    "id": 650658713,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY1MDY1ODcxMw==",
    "user": {
      "login": "ethDreamer",
      "id": 37123614,
      "node_id": "MDQ6VXNlcjM3MTIzNjE0",
      "avatar_url": "https://avatars.githubusercontent.com/u/37123614?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ethDreamer",
      "html_url": "https://github.com/ethDreamer",
      "followers_url": "https://api.github.com/users/ethDreamer/followers",
      "following_url": "https://api.github.com/users/ethDreamer/following{/other_user}",
      "gists_url": "https://api.github.com/users/ethDreamer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ethDreamer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ethDreamer/subscriptions",
      "organizations_url": "https://api.github.com/users/ethDreamer/orgs",
      "repos_url": "https://api.github.com/users/ethDreamer/repos",
      "events_url": "https://api.github.com/users/ethDreamer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ethDreamer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-06-28T00:50:29Z",
    "updated_at": "2020-06-28T00:50:29Z",
    "author_association": "COLLABORATOR",
    "body": "After looking into it, I'm not sure if this problem is straight-forward or if it involves more work to be done optimally.\r\n\r\nHere's a simple way to do this. Let me know if this is on the right track with what you were thinking:\r\n```\r\ndiff --git a/beacon_node/eth2_libp2p/src/peer_manager/peerdb.rs b/beacon_node/eth2_libp2p/src/peer_manager/peerdb.rs\r\nindex 063d36db..1e18059f 100644\r\n--- a/beacon_node/eth2_libp2p/src/peer_manager/peerdb.rs\r\n+++ b/beacon_node/eth2_libp2p/src/peer_manager/peerdb.rs\r\n@@ -1,18 +1,20 @@\r\n use super::peer_info::{PeerConnectionStatus, PeerInfo};\r\n use super::peer_sync_status::PeerSyncStatus;\r\n use crate::rpc::methods::MetaData;\r\n use crate::PeerId;\r\n use slog::{crit, debug, trace, warn};\r\n use std::collections::{hash_map::Entry, HashMap};\r\n use std::time::Instant;\r\n use types::{EthSpec, SubnetId};\r\n+use crate::peer_manager::Multiaddr;\r\n+use std::collections::HashSet;\r\n \r\n /// A peer's reputation (perceived potential usefulness)\r\n pub type Rep = u8;\r\n\r\n \r\n@@ -23,20 +25,22 @@ const MAX_DC_PEERS: usize = 30;\r\n pub const DEFAULT_REPUTATION: Rep = 50;\r\n \r\n /// Storage of known peers, their reputation and information\r\n pub struct PeerDB<TSpec: EthSpec> {\r\n     /// The collection of known connected peers, their status and reputation\r\n     peers: HashMap<PeerId, PeerInfo<TSpec>>,\r\n     /// Tracking of number of disconnected nodes\r\n     n_dc: usize,\r\n     /// PeerDB's logger\r\n     log: slog::Logger,\r\n+    /// Banned Addresses\r\n+    banned_addrs: HashSet<Multiaddr>,\r\n }\r\n\r\n@@ -52,20 +56,21 @@ impl RepChange {\r\n         }\r\n     }\r\n }\r\n \r\n impl<TSpec: EthSpec> PeerDB<TSpec> {\r\n     pub fn new(log: &slog::Logger) -> Self {\r\n         Self {\r\n             log: log.clone(),\r\n             n_dc: 0,\r\n             peers: HashMap::new(),\r\n+            banned_addrs: HashSet::new(),\r\n         }\r\n     }\r\n \r\n@@ -101,22 +106,34 @@ impl<TSpec: EthSpec> PeerDB<TSpec> {\r\n     pub fn peer_synced(&self, peer_id: &PeerId) -> bool {\r\n         match self.peers.get(peer_id).map(|info| &info.sync_status) {\r\n             Some(PeerSyncStatus::Synced { .. }) => true,\r\n             Some(_) => false,\r\n             None => false,\r\n         }\r\n     }\r\n \r\n     /// Returns true if the Peer is banned.\r\n     pub fn peer_banned(&self, peer_id: &PeerId) -> bool {\r\n-        match self.peers.get(peer_id).map(|info| &info.connection_status) {\r\n-            Some(status) => status.is_banned(),\r\n+        match self.peers.get(peer_id) {\r\n+            Some(info) => {\r\n+                if info.connection_status.is_banned() {\r\n+                    true\r\n+                }\r\n+                else {\r\n+                    for address in info.listening_addresses.iter() {\r\n+                        if self.banned_addrs.contains(address) {\r\n+                            return true;\r\n+                        }\r\n+                    }\r\n+                    false\r\n+                }\r\n+            },\r\n+            // See note below about this case\r\n             None => false,\r\n         }\r\n     }\r\n \r\n@@ -335,20 +352,25 @@ impl<TSpec: EthSpec> PeerDB<TSpec> {\r\n     pub fn ban(&mut self, peer_id: &PeerId) {\r\n         let log_ref = &self.log;\r\n         let info = self.peers.entry(peer_id.clone()).or_insert_with(|| {\r\n             warn!(log_ref, \"Banning unknown peer\";\r\n                     \"peer_id\" => peer_id.to_string());\r\n             PeerInfo::default()\r\n         });\r\n         if info.connection_status.is_disconnected() {\r\n             self.n_dc = self.n_dc.saturating_sub(1);\r\n         }\r\n+        // Ban every known listening address\r\n+        for address in info.listening_addresses.iter() {\r\n+            self.banned_addrs.insert(address.clone());\r\n+        }\r\n+\r\n         info.connection_status.ban();\r\n     }\r\n \r\n```\r\nThe only place where `peer_banned()` is checked is in [peers_discovered()](https://github.com/sigp/lighthouse/blob/master/beacon_node/eth2_libp2p/src/peer_manager/mod.rs#L425) so I believe this would work once peers are actually banned. Currently, no peers ever get banned because calls to [PeerManager.update_reputations()](https://github.com/sigp/lighthouse/blob/master/beacon_node/eth2_libp2p/src/peer_manager/mod.rs#L508) aren't made yet and the code for this function is commented out.\r\n\r\nI did notice [this comment](https://github.com/sigp/lighthouse/blob/master/beacon_node/eth2_libp2p/src/peer_manager/mod.rs#L421) on `peers_discovered()` which suggests this might be refactored to use addresses rather than peer_id's in which case there might be more work to do this properly...\r\n\r\nAlong that line of thinking, I'm not sure if it's possible (in the future) for `peer_banned()` to be called before the peer_id is in the peerDB. If it were possible, the last match case (None) should run the same check by grabbing the addresses using a similar logic as [addresses_of_peer()](https://github.com/sigp/lighthouse/blob/master/beacon_node/eth2_libp2p/src/peer_manager/mod.rs#L384) perhaps... though without access to the `PeerManager` this isn't really possible.. just a thought I had\r\n\r\nanyway.. would appreciate some feedback on this :)\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/sigp/lighthouse/issues/comments/650658713/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/sigp/lighthouse/issues/comments/650845477",
    "html_url": "https://github.com/sigp/lighthouse/issues/1283#issuecomment-650845477",
    "issue_url": "https://api.github.com/repos/sigp/lighthouse/issues/1283",
    "id": 650845477,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY1MDg0NTQ3Nw==",
    "user": {
      "login": "AgeManning",
      "id": 7454587,
      "node_id": "MDQ6VXNlcjc0NTQ1ODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7454587?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/AgeManning",
      "html_url": "https://github.com/AgeManning",
      "followers_url": "https://api.github.com/users/AgeManning/followers",
      "following_url": "https://api.github.com/users/AgeManning/following{/other_user}",
      "gists_url": "https://api.github.com/users/AgeManning/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/AgeManning/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/AgeManning/subscriptions",
      "organizations_url": "https://api.github.com/users/AgeManning/orgs",
      "repos_url": "https://api.github.com/users/AgeManning/repos",
      "events_url": "https://api.github.com/users/AgeManning/events{/privacy}",
      "received_events_url": "https://api.github.com/users/AgeManning/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-06-29T00:33:10Z",
    "updated_at": "2020-06-29T00:33:10Z",
    "author_association": "MEMBER",
    "body": "Hey, great work! \r\n\r\nApologies for the little detail in this issue. I have a quite a few issues similar to this one, where there is little detail. I'm kind of using these as notes to myself as I go, to remember to go back and add in the feature. \r\n\r\nI was out this weekend, so sorry for not responding sooner. \r\n\r\nAs you've discovered there is a bit of code here that isn't currently in use. In particular the banning and using the banning logic isn't connected and has no real effect on current lighthouse. #1284 will introduce this logic and integrate the banning and peer scoring logic into lighthouse. So this issue is currently kind of blocked with #1284. \r\n\r\nIn terms of what you've done, I think I agree with you. We would need to ban IP/Multiaddrs separately from peers in the peer manager. There is some added complexity however, as I've currently designed the scoring system to have a decay rate, where banned peer's scores will decay over time and become usable again. \r\n\r\nI think we'd need to think about how banning IP's would work also. Some clients are using relays, in which many peers use a relay peer with a single IP. If one peer misbehaves, should we ban the IP for a specific amount of time?\r\n\r\nI think in the first iteration of this, we have some hard coded constant, `NUMBER_OF_BANNED_PEERS_PER_IP` which when we exceed this, i.e we ban a peer on the same IP more than this number of times, then we ban the IP for a fixed amount of time. \r\n\r\nLet me finish #1284 (which should be done this week, if not too many other things come up) then we should be able to add this guy in also. :) \r\nI imagine it will be clearer where everything fits into place then. I'll be able to link some code with where it's being used also. \r\n\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/sigp/lighthouse/issues/comments/650845477/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/sigp/lighthouse/issues/comments/675150299",
    "html_url": "https://github.com/sigp/lighthouse/issues/1283#issuecomment-675150299",
    "issue_url": "https://api.github.com/repos/sigp/lighthouse/issues/1283",
    "id": 675150299,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY3NTE1MDI5OQ==",
    "user": {
      "login": "divagant-martian",
      "id": 26765164,
      "node_id": "MDQ6VXNlcjI2NzY1MTY0",
      "avatar_url": "https://avatars.githubusercontent.com/u/26765164?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/divagant-martian",
      "html_url": "https://github.com/divagant-martian",
      "followers_url": "https://api.github.com/users/divagant-martian/followers",
      "following_url": "https://api.github.com/users/divagant-martian/following{/other_user}",
      "gists_url": "https://api.github.com/users/divagant-martian/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/divagant-martian/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/divagant-martian/subscriptions",
      "organizations_url": "https://api.github.com/users/divagant-martian/orgs",
      "repos_url": "https://api.github.com/users/divagant-martian/repos",
      "events_url": "https://api.github.com/users/divagant-martian/events{/privacy}",
      "received_events_url": "https://api.github.com/users/divagant-martian/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-08-17T22:40:59Z",
    "updated_at": "2020-08-17T22:40:59Z",
    "author_association": "CONTRIBUTOR",
    "body": "Is this still blocked?",
    "reactions": {
      "url": "https://api.github.com/repos/sigp/lighthouse/issues/comments/675150299/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/sigp/lighthouse/issues/comments/675282374",
    "html_url": "https://github.com/sigp/lighthouse/issues/1283#issuecomment-675282374",
    "issue_url": "https://api.github.com/repos/sigp/lighthouse/issues/1283",
    "id": 675282374,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY3NTI4MjM3NA==",
    "user": {
      "login": "blacktemplar",
      "id": 3133334,
      "node_id": "MDQ6VXNlcjMxMzMzMzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3133334?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/blacktemplar",
      "html_url": "https://github.com/blacktemplar",
      "followers_url": "https://api.github.com/users/blacktemplar/followers",
      "following_url": "https://api.github.com/users/blacktemplar/following{/other_user}",
      "gists_url": "https://api.github.com/users/blacktemplar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/blacktemplar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/blacktemplar/subscriptions",
      "organizations_url": "https://api.github.com/users/blacktemplar/orgs",
      "repos_url": "https://api.github.com/users/blacktemplar/repos",
      "events_url": "https://api.github.com/users/blacktemplar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/blacktemplar/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-08-18T06:29:39Z",
    "updated_at": "2020-08-18T06:29:39Z",
    "author_association": "CONTRIBUTOR",
    "body": "I don't think so, I am currently working on it and will submit a pull request today :).",
    "reactions": {
      "url": "https://api.github.com/repos/sigp/lighthouse/issues/comments/675282374/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/sigp/lighthouse/issues/comments/677998108",
    "html_url": "https://github.com/sigp/lighthouse/issues/1283#issuecomment-677998108",
    "issue_url": "https://api.github.com/repos/sigp/lighthouse/issues/1283",
    "id": 677998108,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY3Nzk5ODEwOA==",
    "user": {
      "login": "AgeManning",
      "id": 7454587,
      "node_id": "MDQ6VXNlcjc0NTQ1ODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7454587?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/AgeManning",
      "html_url": "https://github.com/AgeManning",
      "followers_url": "https://api.github.com/users/AgeManning/followers",
      "following_url": "https://api.github.com/users/AgeManning/following{/other_user}",
      "gists_url": "https://api.github.com/users/AgeManning/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/AgeManning/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/AgeManning/subscriptions",
      "organizations_url": "https://api.github.com/users/AgeManning/orgs",
      "repos_url": "https://api.github.com/users/AgeManning/repos",
      "events_url": "https://api.github.com/users/AgeManning/events{/privacy}",
      "received_events_url": "https://api.github.com/users/AgeManning/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-08-21T02:10:28Z",
    "updated_at": "2020-08-21T02:10:28Z",
    "author_association": "MEMBER",
    "body": "Closed in #1543 ",
    "reactions": {
      "url": "https://api.github.com/repos/sigp/lighthouse/issues/comments/677998108/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
