{
  "url": "https://api.github.com/repos/sigp/lighthouse/issues/208",
  "repository_url": "https://api.github.com/repos/sigp/lighthouse",
  "labels_url": "https://api.github.com/repos/sigp/lighthouse/issues/208/labels{/name}",
  "comments_url": "https://api.github.com/repos/sigp/lighthouse/issues/208/comments",
  "events_url": "https://api.github.com/repos/sigp/lighthouse/issues/208/events",
  "html_url": "https://github.com/sigp/lighthouse/issues/208",
  "id": 410079554,
  "node_id": "MDU6SXNzdWU0MTAwNzk1NTQ=",
  "number": 208,
  "title": "Remove constants from function parameters",
  "user": {
    "login": "drozdziak1",
    "id": 8928339,
    "node_id": "MDQ6VXNlcjg5MjgzMzk=",
    "avatar_url": "https://avatars.githubusercontent.com/u/8928339?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/drozdziak1",
    "html_url": "https://github.com/drozdziak1",
    "followers_url": "https://api.github.com/users/drozdziak1/followers",
    "following_url": "https://api.github.com/users/drozdziak1/following{/other_user}",
    "gists_url": "https://api.github.com/users/drozdziak1/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/drozdziak1/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/drozdziak1/subscriptions",
    "organizations_url": "https://api.github.com/users/drozdziak1/orgs",
    "repos_url": "https://api.github.com/users/drozdziak1/repos",
    "events_url": "https://api.github.com/users/drozdziak1/events{/privacy}",
    "received_events_url": "https://api.github.com/users/drozdziak1/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 1232620456,
      "node_id": "MDU6TGFiZWwxMjMyNjIwNDU2",
      "url": "https://api.github.com/repos/sigp/lighthouse/labels/RFC",
      "name": "RFC",
      "color": "4aaa19",
      "default": false,
      "description": "Request for comment"
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 8,
  "created_at": "2019-01-14T09:51:51Z",
  "updated_at": "2019-03-13T00:32:54Z",
  "closed_at": "2019-03-13T00:32:54Z",
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "## Description\r\nThe spec defines several constants which currently are mostly placed in `ChainSpec`. This causes some of the spec-defined functions in Lighthouse to have different signatures - constants are passed instead of just being globally referenced (the `ChainSpec` has to be instantiated and my guess is it doesn't make sense to instantiate it every time)\r\n## Present Behaviour\r\n^^^^\r\n\r\n## Expected Behaviour\r\nWe should be able to reference the necessary constants rightaway.\r\n\r\n## Steps to resolve\r\n1. Either:\r\n* Break ChainSpec into individual const/static variables - a bit harder but way easier to maintain\r\n* Instantiate a global instance of ChainSpec via lazy_static - a bit easier but less ergonomic and more bug-prone as Rust will complain about synchronization and make us use a Mutex which will need to be locked on every use. Deadlocks are also a possibility\r\n2. Look for uses of ChainSpec and change accordingly. Mind lock lifetimes if the mutex approach is to be used\r\n",
  "closed_by": {
    "login": "paulhauner",
    "id": 6660660,
    "node_id": "MDQ6VXNlcjY2NjA2NjA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6660660?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/paulhauner",
    "html_url": "https://github.com/paulhauner",
    "followers_url": "https://api.github.com/users/paulhauner/followers",
    "following_url": "https://api.github.com/users/paulhauner/following{/other_user}",
    "gists_url": "https://api.github.com/users/paulhauner/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/paulhauner/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/paulhauner/subscriptions",
    "organizations_url": "https://api.github.com/users/paulhauner/orgs",
    "repos_url": "https://api.github.com/users/paulhauner/repos",
    "events_url": "https://api.github.com/users/paulhauner/events{/privacy}",
    "received_events_url": "https://api.github.com/users/paulhauner/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/sigp/lighthouse/issues/208/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/sigp/lighthouse/issues/208/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/sigp/lighthouse/issues/comments/454225116",
    "html_url": "https://github.com/sigp/lighthouse/issues/208#issuecomment-454225116",
    "issue_url": "https://api.github.com/repos/sigp/lighthouse/issues/208",
    "id": 454225116,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1NDIyNTExNg==",
    "user": {
      "login": "paulhauner",
      "id": 6660660,
      "node_id": "MDQ6VXNlcjY2NjA2NjA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6660660?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/paulhauner",
      "html_url": "https://github.com/paulhauner",
      "followers_url": "https://api.github.com/users/paulhauner/followers",
      "following_url": "https://api.github.com/users/paulhauner/following{/other_user}",
      "gists_url": "https://api.github.com/users/paulhauner/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/paulhauner/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/paulhauner/subscriptions",
      "organizations_url": "https://api.github.com/users/paulhauner/orgs",
      "repos_url": "https://api.github.com/users/paulhauner/repos",
      "events_url": "https://api.github.com/users/paulhauner/events{/privacy}",
      "received_events_url": "https://api.github.com/users/paulhauner/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-15T01:04:18Z",
    "updated_at": "2019-01-15T01:06:31Z",
    "author_association": "MEMBER",
    "body": "My intention with `ChainSpec` was as follows:\r\n\r\n1. Defined at first boot, according to some CLI flags. (Likely use whatever the EF defines by default), or\r\n2. Loaded from the local `~/.lighthouse` (or w/e) directory along with the database.\r\n\r\nDuring run-time there should be a single, immutable instance. Rust will be fine to send it anywhere if it's in an `Arc` or `'static`.\r\n\r\nIt's important to me that the spec isn't `const`. People need to be able to define and run their own chain specs (e.g., testnet). We also need to be able to test with different `spec` values.\r\n\r\nI don't think we should be allowing the present spec iteration to affect our architecture decisions _too much_. As we've seen it changes a lot, plus I imagine there's going to be at least one more major re-write after the content becomes stable.\r\n\r\nIMO, keeping the function names the same is fine. I don't think it will be hard to get used to the idea that functions have an additional parameters passed in, instead of global constants.\r\n\r\n@drozdziak1 what are you thoughts, given this?",
    "reactions": {
      "url": "https://api.github.com/repos/sigp/lighthouse/issues/comments/454225116/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/sigp/lighthouse/issues/comments/454366099",
    "html_url": "https://github.com/sigp/lighthouse/issues/208#issuecomment-454366099",
    "issue_url": "https://api.github.com/repos/sigp/lighthouse/issues/208",
    "id": 454366099,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1NDM2NjA5OQ==",
    "user": {
      "login": "drozdziak1",
      "id": 8928339,
      "node_id": "MDQ6VXNlcjg5MjgzMzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8928339?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/drozdziak1",
      "html_url": "https://github.com/drozdziak1",
      "followers_url": "https://api.github.com/users/drozdziak1/followers",
      "following_url": "https://api.github.com/users/drozdziak1/following{/other_user}",
      "gists_url": "https://api.github.com/users/drozdziak1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/drozdziak1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/drozdziak1/subscriptions",
      "organizations_url": "https://api.github.com/users/drozdziak1/orgs",
      "repos_url": "https://api.github.com/users/drozdziak1/repos",
      "events_url": "https://api.github.com/users/drozdziak1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/drozdziak1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-15T11:50:36Z",
    "updated_at": "2019-01-15T11:51:16Z",
    "author_association": "CONTRIBUTOR",
    "body": "yeah, swapping out constant values easily is convincing. What do you think of a global `ChainSpec` instance though? It shouldn't be too difficult to use and provide researchers, chain owners etc. with easy enough way to change how a chain operates.\r\n\r\n**Short-term note:** We'll most likely want to actually have both. e.g. I've found that the stack overflow I get in #157 was caused by the initial validator generator self referencing a `spec` instance I've created which would then call the initial validator generator again which is a recurrence loop. Also keeping constants would somehow limit the initial validator functions, but then we probably would want to put those initial validators in a config somewhere anyway, until the main beacon chain launches.\r\n\r\n**Long-term note:** Individual constants could be more secure as they would be inserted everywhere by-value at compile-time. Imagine a bad actor finding a way to change the values in the dynamically initialized ChainSpec using just a P2P comms vulnerability. In such case a smart adversary could make anyone's validator nodes assume wrong constants and e.g. miss their slot or cause slashable conditions, for which the attacker could collect the bounty. Them being just after ETH 2.0's reputation could also be the case and ruining that would be even easier.",
    "reactions": {
      "url": "https://api.github.com/repos/sigp/lighthouse/issues/comments/454366099/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/sigp/lighthouse/issues/comments/454889658",
    "html_url": "https://github.com/sigp/lighthouse/issues/208#issuecomment-454889658",
    "issue_url": "https://api.github.com/repos/sigp/lighthouse/issues/208",
    "id": 454889658,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1NDg4OTY1OA==",
    "user": {
      "login": "ralexstokes",
      "id": 3113781,
      "node_id": "MDQ6VXNlcjMxMTM3ODE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3113781?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ralexstokes",
      "html_url": "https://github.com/ralexstokes",
      "followers_url": "https://api.github.com/users/ralexstokes/followers",
      "following_url": "https://api.github.com/users/ralexstokes/following{/other_user}",
      "gists_url": "https://api.github.com/users/ralexstokes/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ralexstokes/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ralexstokes/subscriptions",
      "organizations_url": "https://api.github.com/users/ralexstokes/orgs",
      "repos_url": "https://api.github.com/users/ralexstokes/repos",
      "events_url": "https://api.github.com/users/ralexstokes/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ralexstokes/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-16T18:33:56Z",
    "updated_at": "2019-01-16T18:33:56Z",
    "author_association": "CONTRIBUTOR",
    "body": "to chime in here, i would recommend we parameterize the codebase wrt to the constants for the reasons given above. i would suggest we avoid global statics or anything like this as i find its easier to achieve the goals of parametricity when you can simply provide the relevant values to as small a scope as possible (general notion is principle of least authority here).\r\n\r\nif we can agree on this, the question remains how to best implement it. And to that end, I think what we are currently doing is a nice compromise (passing constants as extra fn parameters as needed). It does add some extra overhead (and if it was really that bad we could wrap the codebase in some crazy macro) but i think it is worth the benefits.\r\n\r\none thing i did look at as an example here was passing a `&ChainSpec` to `BeaconState` so that those helpers could reference `self` to get the constants rather than placing that burden on the caller. the result was that the `spec` crate uses `types` crate as a dependency so that caused a circular import error. if this route sounds interesting as a compromise we would have to write `spec` as the \"bottom\" crate (in terms of being at the base of the dependency lattice). right now it passes around the genesis validators so imports `ValidatorRecord` (and possibly some other stuff... i don't precisely recall)",
    "reactions": {
      "url": "https://api.github.com/repos/sigp/lighthouse/issues/comments/454889658/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/sigp/lighthouse/issues/comments/455012994",
    "html_url": "https://github.com/sigp/lighthouse/issues/208#issuecomment-455012994",
    "issue_url": "https://api.github.com/repos/sigp/lighthouse/issues/208",
    "id": 455012994,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1NTAxMjk5NA==",
    "user": {
      "login": "paulhauner",
      "id": 6660660,
      "node_id": "MDQ6VXNlcjY2NjA2NjA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6660660?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/paulhauner",
      "html_url": "https://github.com/paulhauner",
      "followers_url": "https://api.github.com/users/paulhauner/followers",
      "following_url": "https://api.github.com/users/paulhauner/following{/other_user}",
      "gists_url": "https://api.github.com/users/paulhauner/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/paulhauner/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/paulhauner/subscriptions",
      "organizations_url": "https://api.github.com/users/paulhauner/orgs",
      "repos_url": "https://api.github.com/users/paulhauner/repos",
      "events_url": "https://api.github.com/users/paulhauner/events{/privacy}",
      "received_events_url": "https://api.github.com/users/paulhauner/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-17T01:55:41Z",
    "updated_at": "2019-01-17T01:55:41Z",
    "author_association": "MEMBER",
    "body": "> yeah, swapping out constant values easily is convincing. What do you think of a global `ChainSpec` instance though? It shouldn't be too difficult to use and provide researchers, chain owners etc. with easy enough way to change how a chain operates.\r\n\r\nI'm not sure if you're suggesting that swapping chains requires a re-compile. If so, I don't think that's permissible as we need to allow typical users to be able to switch to different chain specs, via CLI flags or some JSON file. It's used very heavily in Ethereum 1.0 for test-nets (Ropsten, etc.)\r\n\r\n> **Short-term note:** We'll most likely want to actually have both. e.g. I've found that the stack overflow I get in #157 was caused by the initial validator generator self referencing a `spec` instance I've created which would then call the initial validator generator again which is a recurrence loop. Also keeping constants would somehow limit the initial validator functions, but then we probably would want to put those initial validators in a config somewhere anyway, until the main beacon chain launches.\r\n\r\nI agree we read them from a config file for now.\r\n\r\n> **Long-term note:** Individual constants could be more secure as they would be inserted everywhere by-value at compile-time. Imagine a bad actor finding a way to change the values in the dynamically initialized ChainSpec using just a P2P comms vulnerability. In such case a smart adversary could make anyone's validator nodes assume wrong constants and e.g. miss their slot or cause slashable conditions, for which the attacker could collect the bounty. Them being just after ETH 2.0's reputation could also be the case and ruining that would be even easier.\r\n\r\nI'm still not convinced that someone should need to re-compile if they want to use a testnet. That's not the case in Ethereum 1.0.\r\n\r\nRe: modifying the chainspec via p2p comms. That sounds to me like an RCE or a \"can modify arbitrary memory remotely\" vuln, which would destroy us even if we were using constants. In this case I would say that anything you could achieve via modifying the spec you could do with other variables. E.g., If you wanted to make validators miss their slots, they could just modify the `slot_clock`.\r\n\r\nOn a side note: by design it should be impossible for a beacon_node to make a validator produce slashable messages.\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/sigp/lighthouse/issues/comments/455012994/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/sigp/lighthouse/issues/comments/455015836",
    "html_url": "https://github.com/sigp/lighthouse/issues/208#issuecomment-455015836",
    "issue_url": "https://api.github.com/repos/sigp/lighthouse/issues/208",
    "id": 455015836,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1NTAxNTgzNg==",
    "user": {
      "login": "paulhauner",
      "id": 6660660,
      "node_id": "MDQ6VXNlcjY2NjA2NjA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6660660?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/paulhauner",
      "html_url": "https://github.com/paulhauner",
      "followers_url": "https://api.github.com/users/paulhauner/followers",
      "following_url": "https://api.github.com/users/paulhauner/following{/other_user}",
      "gists_url": "https://api.github.com/users/paulhauner/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/paulhauner/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/paulhauner/subscriptions",
      "organizations_url": "https://api.github.com/users/paulhauner/orgs",
      "repos_url": "https://api.github.com/users/paulhauner/repos",
      "events_url": "https://api.github.com/users/paulhauner/events{/privacy}",
      "received_events_url": "https://api.github.com/users/paulhauner/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-17T02:10:52Z",
    "updated_at": "2019-01-17T02:10:52Z",
    "author_association": "MEMBER",
    "body": "> to chime in here, i would recommend we parameterize the codebase wrt to the constants for the reasons given above. i would suggest we avoid global statics or anything like this as i find its easier to achieve the goals of parametricity when you can simply provide the relevant values to as small a scope as possible (general notion is principle of least authority here).\r\n\r\nI'm also preferring to parameterize the functions with spec variables. I'm not sure what we gain from having constants, apart from matching the function signatures of the spec. As I've said before, I see the present rendering of the spec as temporary.\r\n\r\n> if we can agree on this, the question remains how to best implement it. And to that end, I think what we are currently doing is a nice compromise (passing constants as extra fn parameters as needed). It does add some extra overhead (and if it was really that bad we could wrap the codebase in some crazy macro) but i think it is worth the benefits.\r\n\r\nFor me, the choices are:\r\n1. Pass individual variables (e.g., `fn foo(bar, epoch_length, slot_duration...)`\r\n2. Pass the whole spec struct (e.g., `fn foo(bar, spec)`)\r\n\r\nThe purist in me likes (1) but I suspect that will get out of hand. Clippy starts throwing warnings at 7 function parameters. Maybe we could default to (1) and revert back to (2) if we exceed 7 function params?\r\n\r\nAlso, I don't _really_ mind if there isn't perfect consistency between (1) and (2). Perfect is the enemy of good, etc.\r\n\r\n> one thing i did look at as an example here was passing a `&ChainSpec` to `BeaconState` so that those helpers could reference `self` to get the constants rather than placing that burden on the caller. the result was that the `spec` crate uses `types` crate as a dependency so that caused a circular import error. if this route sounds interesting as a compromise we would have to write `spec` as the \"bottom\" crate (in terms of being at the base of the dependency lattice). right now it passes around the genesis validators so imports `ValidatorRecord` (and possibly some other stuff... i don't precisely recall)\r\n\r\nThis is appealing, but it does break our present state of \"all fields on `types` are in the spec\". Not sure if I'm emotionally prepared to break that one yet.. Do you feel strongly about implementing this @ralexstokes?\r\n\r\nJust had a thought about this, it means we'll need to pass a `spec` whenever we want to load a `BeaconState` from the DB. Unless it's an `Option<ChainSpec>` but then all the helpers need to be prepared to _not_ have a spec, etc.",
    "reactions": {
      "url": "https://api.github.com/repos/sigp/lighthouse/issues/comments/455015836/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/sigp/lighthouse/issues/comments/455017632",
    "html_url": "https://github.com/sigp/lighthouse/issues/208#issuecomment-455017632",
    "issue_url": "https://api.github.com/repos/sigp/lighthouse/issues/208",
    "id": 455017632,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1NTAxNzYzMg==",
    "user": {
      "login": "paulhauner",
      "id": 6660660,
      "node_id": "MDQ6VXNlcjY2NjA2NjA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6660660?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/paulhauner",
      "html_url": "https://github.com/paulhauner",
      "followers_url": "https://api.github.com/users/paulhauner/followers",
      "following_url": "https://api.github.com/users/paulhauner/following{/other_user}",
      "gists_url": "https://api.github.com/users/paulhauner/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/paulhauner/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/paulhauner/subscriptions",
      "organizations_url": "https://api.github.com/users/paulhauner/orgs",
      "repos_url": "https://api.github.com/users/paulhauner/repos",
      "events_url": "https://api.github.com/users/paulhauner/events{/privacy}",
      "received_events_url": "https://api.github.com/users/paulhauner/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-17T02:20:24Z",
    "updated_at": "2019-01-17T02:20:24Z",
    "author_association": "MEMBER",
    "body": "In summary, I think the major question at the moment is: _\"should we require a recompile to change the spec\"._\r\n\r\nIMO, we shouldn't require a recompile and I feel pretty strongly about that for UX reasons. As always, I'm open to have my mind changed.\r\n\r\nFollowing the decision tree down the \"no recompile\" path, we then need to choose between `lazy_static` or passing params around. I've not used `lazy_static` much, @drozdziak1 how will it go reading from files or from the CLI? My gut feeling is that it's not going to be very nice, but I could be wrong.",
    "reactions": {
      "url": "https://api.github.com/repos/sigp/lighthouse/issues/comments/455017632/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/sigp/lighthouse/issues/comments/455032611",
    "html_url": "https://github.com/sigp/lighthouse/issues/208#issuecomment-455032611",
    "issue_url": "https://api.github.com/repos/sigp/lighthouse/issues/208",
    "id": 455032611,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1NTAzMjYxMQ==",
    "user": {
      "login": "ralexstokes",
      "id": 3113781,
      "node_id": "MDQ6VXNlcjMxMTM3ODE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3113781?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ralexstokes",
      "html_url": "https://github.com/ralexstokes",
      "followers_url": "https://api.github.com/users/ralexstokes/followers",
      "following_url": "https://api.github.com/users/ralexstokes/following{/other_user}",
      "gists_url": "https://api.github.com/users/ralexstokes/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ralexstokes/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ralexstokes/subscriptions",
      "organizations_url": "https://api.github.com/users/ralexstokes/orgs",
      "repos_url": "https://api.github.com/users/ralexstokes/repos",
      "events_url": "https://api.github.com/users/ralexstokes/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ralexstokes/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-17T03:49:02Z",
    "updated_at": "2019-01-17T03:49:02Z",
    "author_association": "CONTRIBUTOR",
    "body": "> \r\n> For me, the choices are:\r\n> \r\n> 1. Pass individual variables (e.g., `fn foo(bar, epoch_length, slot_duration...)`\r\n> 2. Pass the whole spec struct (e.g., `fn foo(bar, spec)`)\r\n> \r\n> The purist in me likes (1) but I suspect that will get out of hand. Clippy starts throwing warnings at 7 function parameters. Maybe we could default to (1) and revert back to (2) if we exceed 7 function params?\r\n> \r\n> Also, I don't _really_ mind if there isn't perfect consistency between (1) and (2). Perfect is the enemy of good, etc.\r\n> \r\n\r\nYeah, some combination of (1) and (2) seem nice.\r\n\r\n> This is appealing, but it does break our present state of \"all fields on `types` are in the spec\". Not sure if I'm emotionally prepared to break that one yet.. Do you feel strongly about implementing this @ralexstokes?\r\n\r\nIt is what I would do if I was making the decision -- but I figured you had some extra semantics around `ChainSpec` that I didn't know so it didn't feel appropriate to suggest a big change without discussing it first. I would pull out the \"dynamic\" bits of `ChainSpec` so that it is just the constant data and then, like you suggest, we pass around a single immutable reference to `ChainSpec` lying high up on the stack. Things like the genesis validator set can be handed off at the appropriate time to the relevant consumers as they are required. I don't think this is such a win that it has to be this way so I'll stop providing support for it after this comment.\r\n\r\n> Just had a thought about this, it means we'll need to pass a `spec` whenever we want to load a `BeaconState` from the DB. Unless it's an `Option<ChainSpec>` but then all the helpers need to be prepared to _not_ have a spec, etc.\r\n\r\nYeah, there will be some more activity around dependency injection -- but I see this as just routing a `&ChainSpec` to the relevant consumers. In general, my aim w/ this style is to have everything be as \"parametrized\" as possible so that the only real job of a user of the software is to assemble the choices we can't make for them. If this is done in a way to minimize mutability and access, then we tend towards safer software that is easier to test (easier in terms of assessing correctness, not necessarily ergonomics; i don't _absolutely_ love adding parameters to functions, just enough to accomplish the aforementioned goals)",
    "reactions": {
      "url": "https://api.github.com/repos/sigp/lighthouse/issues/comments/455032611/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/sigp/lighthouse/issues/comments/472233575",
    "html_url": "https://github.com/sigp/lighthouse/issues/208#issuecomment-472233575",
    "issue_url": "https://api.github.com/repos/sigp/lighthouse/issues/208",
    "id": 472233575,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3MjIzMzU3NQ==",
    "user": {
      "login": "paulhauner",
      "id": 6660660,
      "node_id": "MDQ6VXNlcjY2NjA2NjA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6660660?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/paulhauner",
      "html_url": "https://github.com/paulhauner",
      "followers_url": "https://api.github.com/users/paulhauner/followers",
      "following_url": "https://api.github.com/users/paulhauner/following{/other_user}",
      "gists_url": "https://api.github.com/users/paulhauner/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/paulhauner/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/paulhauner/subscriptions",
      "organizations_url": "https://api.github.com/users/paulhauner/orgs",
      "repos_url": "https://api.github.com/users/paulhauner/repos",
      "events_url": "https://api.github.com/users/paulhauner/events{/privacy}",
      "received_events_url": "https://api.github.com/users/paulhauner/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-03-13T00:32:54Z",
    "updated_at": "2019-03-13T00:32:54Z",
    "author_association": "MEMBER",
    "body": "Closing this as I can't see us implementing this anytime soon.",
    "reactions": {
      "url": "https://api.github.com/repos/sigp/lighthouse/issues/comments/472233575/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
