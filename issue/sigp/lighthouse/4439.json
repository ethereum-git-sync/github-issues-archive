{
  "url": "https://api.github.com/repos/sigp/lighthouse/issues/4439",
  "repository_url": "https://api.github.com/repos/sigp/lighthouse",
  "labels_url": "https://api.github.com/repos/sigp/lighthouse/issues/4439/labels{/name}",
  "comments_url": "https://api.github.com/repos/sigp/lighthouse/issues/4439/comments",
  "events_url": "https://api.github.com/repos/sigp/lighthouse/issues/4439/events",
  "html_url": "https://github.com/sigp/lighthouse/issues/4439",
  "id": 1778176940,
  "node_id": "I_kwDOCFeAzc5p_NOs",
  "number": 4439,
  "title": "Improve handling of HTTP connection closure",
  "user": {
    "login": "michaelsproul",
    "id": 4452260,
    "node_id": "MDQ6VXNlcjQ0NTIyNjA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4452260?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/michaelsproul",
    "html_url": "https://github.com/michaelsproul",
    "followers_url": "https://api.github.com/users/michaelsproul/followers",
    "following_url": "https://api.github.com/users/michaelsproul/following{/other_user}",
    "gists_url": "https://api.github.com/users/michaelsproul/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/michaelsproul/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/michaelsproul/subscriptions",
    "organizations_url": "https://api.github.com/users/michaelsproul/orgs",
    "repos_url": "https://api.github.com/users/michaelsproul/repos",
    "events_url": "https://api.github.com/users/michaelsproul/events{/privacy}",
    "received_events_url": "https://api.github.com/users/michaelsproul/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 985647284,
      "node_id": "MDU6TGFiZWw5ODU2NDcyODQ=",
      "url": "https://api.github.com/repos/sigp/lighthouse/labels/enhancement",
      "name": "enhancement",
      "color": "a2eeef",
      "default": true,
      "description": "New feature or request"
    },
    {
      "id": 2336800343,
      "node_id": "MDU6TGFiZWwyMzM2ODAwMzQz",
      "url": "https://api.github.com/repos/sigp/lighthouse/labels/HTTP-API",
      "name": "HTTP-API",
      "color": "5A63A2",
      "default": false,
      "description": ""
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 2,
  "created_at": "2023-06-28T04:44:38Z",
  "updated_at": "2023-10-26T00:32:00Z",
  "closed_at": null,
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "## Description\r\n\r\nOccasionally when making an HTTP request, we get an `IncompleteMessage` error from `reqwest`. We have at least one report of this causing a missed block:\r\n\r\n> Jun 27 08:55:01.069 WARN Builder failed to reveal payload        parent_hash: \"X\", block_root: Y, relay_response_ms: 0, error: Builder(Reqwest(reqwest::Error { kind: Request, url: Url { scheme: \"http\", cannot_be_a_base: false, username: \"\", password: None, host: Some(Ipv4(127.0.0.1)), port: Some(18550), path: \"/eth/v1/builder/blinded_blocks\", query: None, fragment: None }, source: hyper::Error(IncompleteMessage) })), info: this is common behaviour for some builders and may not indicate an issue, service: exec\r\n\r\nThis occurs when the server closes the connection while we are making the request. Because HTTP POST requests aren't usually idempotent, our HTTP client (`reqwest`) will not retry: it doesn't know whether the server has already acted on the request by the time it closes the connection. There's some more info here: https://github.com/hyperium/hyper/issues/2136.\r\n\r\n## Steps to resolve\r\n\r\n### Option 1: Auto-Retry\r\n\r\nWe could add custom methods to our HTTP clients which automatically retry requests that fail with the `IncompleteMessage` error. I think this is probably the most robust solution. All of the requests we are making should fail gracefully if they are accidentally repeated, i.e. the worst case is that we get an application-level error from the CL/EL/relay on the other end of the connection. This should be better than what we have now.\r\n\r\nThe crates that would need modifying include:\r\n\r\n- `common/eth2`\r\n- `beacon_node/execution_layer`\r\n- `beacon_node/builder_client`\r\n\r\nIt might make sense to define a _mixin_ trait on `reqwest::Connection` in its own crate, and then use the mixin methods from these other 3 crates.\r\n\r\n### Option 2: Disable Connection Pooling\r\n\r\nSome other `reqwest` users had success disabling connection pooling (see https://github.com/hyperium/hyper/issues/2136#issuecomment-861826148), which I think means we will initiate a new TCP connection for every request. This seems very wasteful, and we should probably avoid doing this if we can. Some users also report that the error still occurs after disabling pooling.\r\n\r\n### Option 3: Adjustable Keep-Alive timeout\r\n\r\nI _think_ that we would be less likely to get these errors if we could ensure that the client's connection timeout is _shorter_ than the server's. That avoids the scenario where the server hangs up on the client. There could be CLI parameters for each of the main HTTP connections (EL + builder connections for the BN, BN connection for the VC). The downside to this approach is that it requires manually fiddling with timeouts, and knowledge of the server's timeout. I think if we implement Option 1 this wouldn't be worth doing.\r\n\r\nRegardless of which approach we take, testing is going to be a bit difficult.\r\n",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/sigp/lighthouse/issues/4439/reactions",
    "total_count": 1,
    "+1": 1,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/sigp/lighthouse/issues/4439/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/sigp/lighthouse/issues/comments/1666337199",
    "html_url": "https://github.com/sigp/lighthouse/issues/4439#issuecomment-1666337199",
    "issue_url": "https://api.github.com/repos/sigp/lighthouse/issues/4439",
    "id": 1666337199,
    "node_id": "IC_kwDOCFeAzc5jUkmv",
    "user": {
      "login": "michaelsproul",
      "id": 4452260,
      "node_id": "MDQ6VXNlcjQ0NTIyNjA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4452260?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/michaelsproul",
      "html_url": "https://github.com/michaelsproul",
      "followers_url": "https://api.github.com/users/michaelsproul/followers",
      "following_url": "https://api.github.com/users/michaelsproul/following{/other_user}",
      "gists_url": "https://api.github.com/users/michaelsproul/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/michaelsproul/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/michaelsproul/subscriptions",
      "organizations_url": "https://api.github.com/users/michaelsproul/orgs",
      "repos_url": "https://api.github.com/users/michaelsproul/repos",
      "events_url": "https://api.github.com/users/michaelsproul/events{/privacy}",
      "received_events_url": "https://api.github.com/users/michaelsproul/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-08-05T01:32:24Z",
    "updated_at": "2023-08-05T01:32:24Z",
    "author_association": "MEMBER",
    "body": "Nice write-up by @nflaig of an issue observed with Lodestar as the client and Lighthouse as the server. It might contain some insights for this issue (I haven't read in detail yet): https://github.com/ChainSafe/lodestar/issues/5765",
    "reactions": {
      "url": "https://api.github.com/repos/sigp/lighthouse/issues/comments/1666337199/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/sigp/lighthouse/issues/comments/1780238540",
    "html_url": "https://github.com/sigp/lighthouse/issues/4439#issuecomment-1780238540",
    "issue_url": "https://api.github.com/repos/sigp/lighthouse/issues/4439",
    "id": 1780238540,
    "node_id": "IC_kwDOCFeAzc5qHEjM",
    "user": {
      "login": "michaelsproul",
      "id": 4452260,
      "node_id": "MDQ6VXNlcjQ0NTIyNjA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4452260?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/michaelsproul",
      "html_url": "https://github.com/michaelsproul",
      "followers_url": "https://api.github.com/users/michaelsproul/followers",
      "following_url": "https://api.github.com/users/michaelsproul/following{/other_user}",
      "gists_url": "https://api.github.com/users/michaelsproul/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/michaelsproul/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/michaelsproul/subscriptions",
      "organizations_url": "https://api.github.com/users/michaelsproul/orgs",
      "repos_url": "https://api.github.com/users/michaelsproul/repos",
      "events_url": "https://api.github.com/users/michaelsproul/events{/privacy}",
      "received_events_url": "https://api.github.com/users/michaelsproul/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-10-26T00:32:00Z",
    "updated_at": "2023-10-26T00:32:00Z",
    "author_association": "MEMBER",
    "body": "This has also been reported with web3signer connections. Lucikly, web3signer includes a flag for tweaking the idle timeout. If my theory from Option 3 is correct, then running web3signer with `--idle-connection-timeout-seconds 100` should ensure that Lighthouse closes the connection before web3signer. The Lighthouse timeout is 90s (the default from reqwest).  \r\n\r\nDocs: https://docs.web3signer.consensys.net/reference/cli/options#idle-connection-timeout-seconds",
    "reactions": {
      "url": "https://api.github.com/repos/sigp/lighthouse/issues/comments/1780238540/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
