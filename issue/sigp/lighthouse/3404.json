{
  "url": "https://api.github.com/repos/sigp/lighthouse/issues/3404",
  "repository_url": "https://api.github.com/repos/sigp/lighthouse",
  "labels_url": "https://api.github.com/repos/sigp/lighthouse/issues/3404/labels{/name}",
  "comments_url": "https://api.github.com/repos/sigp/lighthouse/issues/3404/comments",
  "events_url": "https://api.github.com/repos/sigp/lighthouse/issues/3404/events",
  "html_url": "https://github.com/sigp/lighthouse/issues/3404",
  "id": 1325192699,
  "node_id": "I_kwDOCFeAzc5O_NX7",
  "number": 3404,
  "title": "Counterintuitive `warp` error for `Unsupported endpoint version`",
  "user": {
    "login": "michaelsproul",
    "id": 4452260,
    "node_id": "MDQ6VXNlcjQ0NTIyNjA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4452260?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/michaelsproul",
    "html_url": "https://github.com/michaelsproul",
    "followers_url": "https://api.github.com/users/michaelsproul/followers",
    "following_url": "https://api.github.com/users/michaelsproul/following{/other_user}",
    "gists_url": "https://api.github.com/users/michaelsproul/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/michaelsproul/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/michaelsproul/subscriptions",
    "organizations_url": "https://api.github.com/users/michaelsproul/orgs",
    "repos_url": "https://api.github.com/users/michaelsproul/repos",
    "events_url": "https://api.github.com/users/michaelsproul/events{/privacy}",
    "received_events_url": "https://api.github.com/users/michaelsproul/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 985647281,
      "node_id": "MDU6TGFiZWw5ODU2NDcyODE=",
      "url": "https://api.github.com/repos/sigp/lighthouse/labels/bug",
      "name": "bug",
      "color": "d73a4a",
      "default": true,
      "description": "Something isn't working"
    },
    {
      "id": 985647286,
      "node_id": "MDU6TGFiZWw5ODU2NDcyODY=",
      "url": "https://api.github.com/repos/sigp/lighthouse/labels/good%20first%20issue",
      "name": "good first issue",
      "color": "7057ff",
      "default": true,
      "description": "Good for newcomers"
    },
    {
      "id": 2336800343,
      "node_id": "MDU6TGFiZWwyMzM2ODAwMzQz",
      "url": "https://api.github.com/repos/sigp/lighthouse/labels/HTTP-API",
      "name": "HTTP-API",
      "color": "5A63A2",
      "default": false,
      "description": ""
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 11,
  "created_at": "2022-08-02T02:14:55Z",
  "updated_at": "2023-07-25T22:31:05Z",
  "closed_at": null,
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "## Description\r\n\r\nWhen hitting the `/eth/v2/validators/blocks/{slot}` endpoint with an invalid `randao_reveal` (and `verify_randao=true` or empty) Lighthouse will return this error:\r\n\r\n```\r\n$ curl \"http://localhost:5052/eth/v2/validator/blocks/1000000\"\r\n{\"code\":400,\"message\":\"BAD_REQUEST: Unsupported endpoint version: v2\",\"stacktraces\":[]}\r\n```\r\n\r\nThis makes _zero sense_, as the endpoint is cleared declared supporting v2 here:\r\n\r\nhttps://github.com/sigp/lighthouse/blob/2983235650811437b44199f9c94e517e948a1e9b/beacon_node/http_api/src/lib.rs#L1928-L1935\r\n\r\nAdding a panic to `unsupported_endpoint_version` to get a backtrace shows some funky `warp` stuff going on:\r\n\r\n```\r\nthread 'tokio-runtime-worker' panicked at 'unsupported_version_rejection: v2', beacon_node/http_api/src/version.rs:60:5\r\nstack backtrace:\r\n   0: rust_begin_unwind\r\n             at /rustc/e092d0b6b43f2de967af0887873151bb1c0b18d3/library/std/src/panicking.rs:584:5\r\n   1: core::panicking::panic_fmt\r\n             at /rustc/e092d0b6b43f2de967af0887873151bb1c0b18d3/library/core/src/panicking.rs:142:14\r\n   2: http_api::version::unsupported_version_rejection\r\n   3: <warp::filter::and_then::AndThenFuture<T,F> as core::future::future::Future>::poll\r\n   4: <warp::filter::and::AndFuture<T,U> as core::future::future::Future>::poll\r\n   5: <warp::filter::and::AndFuture<T,U> as core::future::future::Future>::poll\r\n   6: <warp::filter::and::AndFuture<T,U> as core::future::future::Future>::poll\r\n   7: <warp::filter::and::AndFuture<T,U> as core::future::future::Future>::poll\r\n   8: <warp::filter::and_then::AndThenFuture<T,F> as core::future::future::Future>::poll\r\n   9: <futures_util::future::try_future::into_future::IntoFuture<Fut> as core::future::future::Future>::poll\r\n  10: <warp::filter::or::EitherFuture<T,U> as core::future::future::Future>::poll\r\n  11: <warp::filter::or::EitherFuture<T,U> as core::future::future::Future>::poll\r\n  12: <F as futures_core::future::TryFuture>::try_poll\r\n  13: <warp::filter::or::EitherFuture<T,U> as core::future::future::Future>::poll\r\n  14: <warp::filter::and::AndFuture<T,U> as core::future::future::Future>::poll\r\n  15: <warp::filter::or::EitherFuture<T,U> as core::future::future::Future>::poll\r\n  16: <warp::filter::recover::RecoverFuture<T,F> as core::future::future::Future>::poll\r\n  17: <warp::filters::log::internal::WithLogFuture<FN,F> as core::future::future::Future>::poll\r\n  18: <warp::filters::cors::internal::WrappedFuture<F> as core::future::future::Future>::poll\r\n  19: scoped_tls::ScopedKey<T>::set\r\n  20: <warp::filter::service::FilteredFuture<F> as core::future::future::Future>::poll\r\n  21: hyper::proto::h1::dispatch::Dispatcher<D,Bs,I,T>::poll_catch\r\n  22: <hyper::server::conn::upgrades::UpgradeableConnection<I,S,E> as core::future::future::Future>::poll\r\n  23: <hyper::server::server::new_svc::NewSvcTask<I,N,S,E,W> as core::future::future::Future>::poll\r\n  24: tokio::runtime::task::core::CoreStage<T>::poll\r\n  25: tokio::runtime::task::harness::Harness<T,S>::poll\r\n  26: std::thread::local::LocalKey<T>::with\r\n  27: tokio::runtime::thread_pool::worker::Context::run_task\r\n  28: tokio::runtime::thread_pool::worker::Context::run\r\n  29: tokio::macros::scoped_tls::ScopedKey<T>::set\r\n  30: tokio::runtime::thread_pool::worker::run\r\n  31: <tokio::runtime::blocking::task::BlockingTask<T> as core::future::future::Future>::poll\r\n  32: tokio::runtime::task::harness::Harness<T,S>::poll\r\n  33: tokio::runtime::blocking::pool::Inner::run\r\nnote: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.\r\n```\r\n\r\ni.e. it seems that `warp` is doing some counterintuitive backtracking through a few `and_then`/`and`/`or` until it hits the `unsupported_version_endpoint` for a _different_ endpoint (one that is `v1` only). This makes little sense to me, and would probably require someone to dig pretty deep into `warp` to understand why this happens. I think this is similar to another open issue (https://github.com/sigp/lighthouse/issues/3112) related to our apparent misuse of `warp` combinators.\r\n\r\nFinally, if `verify_randao=false` is set or the randao reveal is valid then no error occurs:\r\n\r\n```\r\n$ curl \"http://localhost:5052/eth/v2/validator/blocks/3574858?verify_randao=false\"\r\n{ .. }\r\n```\r\n\r\n## Version\r\n\r\nv2.5.0\r\n\r\n## Related issues\r\n\r\n- https://github.com/sigp/lighthouse/issues/3112",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/sigp/lighthouse/issues/3404/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/sigp/lighthouse/issues/3404/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/sigp/lighthouse/issues/comments/1201942831",
    "html_url": "https://github.com/sigp/lighthouse/issues/3404#issuecomment-1201942831",
    "issue_url": "https://api.github.com/repos/sigp/lighthouse/issues/3404",
    "id": 1201942831,
    "node_id": "IC_kwDOCFeAzc5HpDEv",
    "user": {
      "login": "michaelsproul",
      "id": 4452260,
      "node_id": "MDQ6VXNlcjQ0NTIyNjA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4452260?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/michaelsproul",
      "html_url": "https://github.com/michaelsproul",
      "followers_url": "https://api.github.com/users/michaelsproul/followers",
      "following_url": "https://api.github.com/users/michaelsproul/following{/other_user}",
      "gists_url": "https://api.github.com/users/michaelsproul/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/michaelsproul/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/michaelsproul/subscriptions",
      "organizations_url": "https://api.github.com/users/michaelsproul/orgs",
      "repos_url": "https://api.github.com/users/michaelsproul/repos",
      "events_url": "https://api.github.com/users/michaelsproul/events{/privacy}",
      "received_events_url": "https://api.github.com/users/michaelsproul/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-08-02T02:26:46Z",
    "updated_at": "2022-08-02T02:26:46Z",
    "author_association": "MEMBER",
    "body": "It may be that we want to avoid `and_then` for our handlers and instead use `then`. The `warp` docs state:\r\n\r\n> Rejections are meant to say “this filter didn’t accept the request, maybe another can”. So for application-level errors, consider using [Filter::then](https://docs.rs/warp/0.3.2/warp/trait.Filter.html#method.then) instead.",
    "reactions": {
      "url": "https://api.github.com/repos/sigp/lighthouse/issues/comments/1201942831/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/sigp/lighthouse/issues/comments/1500988532",
    "html_url": "https://github.com/sigp/lighthouse/issues/3404#issuecomment-1500988532",
    "issue_url": "https://api.github.com/repos/sigp/lighthouse/issues/3404",
    "id": 1500988532,
    "node_id": "IC_kwDOCFeAzc5Zd0R0",
    "user": {
      "login": "muang0",
      "id": 28738612,
      "node_id": "MDQ6VXNlcjI4NzM4NjEy",
      "avatar_url": "https://avatars.githubusercontent.com/u/28738612?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/muang0",
      "html_url": "https://github.com/muang0",
      "followers_url": "https://api.github.com/users/muang0/followers",
      "following_url": "https://api.github.com/users/muang0/following{/other_user}",
      "gists_url": "https://api.github.com/users/muang0/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/muang0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/muang0/subscriptions",
      "organizations_url": "https://api.github.com/users/muang0/orgs",
      "repos_url": "https://api.github.com/users/muang0/repos",
      "events_url": "https://api.github.com/users/muang0/events{/privacy}",
      "received_events_url": "https://api.github.com/users/muang0/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-04-08T22:21:08Z",
    "updated_at": "2023-04-08T22:21:08Z",
    "author_association": "NONE",
    "body": "I'll look into this one and follow up, thx",
    "reactions": {
      "url": "https://api.github.com/repos/sigp/lighthouse/issues/comments/1500988532/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 1,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/sigp/lighthouse/issues/comments/1577745605",
    "html_url": "https://github.com/sigp/lighthouse/issues/3404#issuecomment-1577745605",
    "issue_url": "https://api.github.com/repos/sigp/lighthouse/issues/3404",
    "id": 1577745605,
    "node_id": "IC_kwDOCFeAzc5eCnzF",
    "user": {
      "login": "michaelsproul",
      "id": 4452260,
      "node_id": "MDQ6VXNlcjQ0NTIyNjA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4452260?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/michaelsproul",
      "html_url": "https://github.com/michaelsproul",
      "followers_url": "https://api.github.com/users/michaelsproul/followers",
      "following_url": "https://api.github.com/users/michaelsproul/following{/other_user}",
      "gists_url": "https://api.github.com/users/michaelsproul/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/michaelsproul/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/michaelsproul/subscriptions",
      "organizations_url": "https://api.github.com/users/michaelsproul/orgs",
      "repos_url": "https://api.github.com/users/michaelsproul/repos",
      "events_url": "https://api.github.com/users/michaelsproul/events{/privacy}",
      "received_events_url": "https://api.github.com/users/michaelsproul/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-06-06T01:03:33Z",
    "updated_at": "2023-06-06T01:03:33Z",
    "author_association": "MEMBER",
    "body": "> It may be that we want to avoid and_then for our handlers and instead use then.\r\n\r\n@jmcph4 and I got this working on https://github.com/sigp/lighthouse/pull/4316. Our approach avoids returning a `warp::reject::Reject` for errors in the handlers themselves. For now we're converting the rejects into error responses using `handle_rejection`, like this:\r\n\r\nhttps://github.com/sigp/lighthouse/blob/73b30a64472455fa555896b70559b5a55c335db3/beacon_node/http_api/src/lib.rs#L1232-L1264\r\n\r\nJack will fix just the new v2/blocks endpoints in that PR, and this issue can remain open until we roll out the fix across the codebase. We might want to write a small abstraction to minimise the amount of code duplication (something like `then_or_reject`, `then_or_error`).",
    "reactions": {
      "url": "https://api.github.com/repos/sigp/lighthouse/issues/comments/1577745605/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/sigp/lighthouse/issues/comments/1636705228",
    "html_url": "https://github.com/sigp/lighthouse/issues/3404#issuecomment-1636705228",
    "issue_url": "https://api.github.com/repos/sigp/lighthouse/issues/3404",
    "id": 1636705228,
    "node_id": "IC_kwDOCFeAzc5hjiPM",
    "user": {
      "login": "muang0",
      "id": 28738612,
      "node_id": "MDQ6VXNlcjI4NzM4NjEy",
      "avatar_url": "https://avatars.githubusercontent.com/u/28738612?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/muang0",
      "html_url": "https://github.com/muang0",
      "followers_url": "https://api.github.com/users/muang0/followers",
      "following_url": "https://api.github.com/users/muang0/following{/other_user}",
      "gists_url": "https://api.github.com/users/muang0/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/muang0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/muang0/subscriptions",
      "organizations_url": "https://api.github.com/users/muang0/orgs",
      "repos_url": "https://api.github.com/users/muang0/repos",
      "events_url": "https://api.github.com/users/muang0/events{/privacy}",
      "received_events_url": "https://api.github.com/users/muang0/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-07-15T08:07:32Z",
    "updated_at": "2023-07-15T08:07:32Z",
    "author_association": "NONE",
    "body": "@michaelsproul Thanks for helping get this one moving. Been a bit busy lately but should be freeing up more in the immediate future.\r\n\r\nI'm not sure how a rejection handler solves our initial issue of warp mixing up endpoint specific logic... If you've got any advice/guidance there it would be much appreciated.\r\n\r\nAlso, do you mind clarifying how this would look? `We might want to write a small abstraction to minimise the amount of code duplication (something like then_or_reject, then_or_error).`",
    "reactions": {
      "url": "https://api.github.com/repos/sigp/lighthouse/issues/comments/1636705228/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/sigp/lighthouse/issues/comments/1636710805",
    "html_url": "https://github.com/sigp/lighthouse/issues/3404#issuecomment-1636710805",
    "issue_url": "https://api.github.com/repos/sigp/lighthouse/issues/3404",
    "id": 1636710805,
    "node_id": "IC_kwDOCFeAzc5hjjmV",
    "user": {
      "login": "michaelsproul",
      "id": 4452260,
      "node_id": "MDQ6VXNlcjQ0NTIyNjA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4452260?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/michaelsproul",
      "html_url": "https://github.com/michaelsproul",
      "followers_url": "https://api.github.com/users/michaelsproul/followers",
      "following_url": "https://api.github.com/users/michaelsproul/following{/other_user}",
      "gists_url": "https://api.github.com/users/michaelsproul/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/michaelsproul/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/michaelsproul/subscriptions",
      "organizations_url": "https://api.github.com/users/michaelsproul/orgs",
      "repos_url": "https://api.github.com/users/michaelsproul/repos",
      "events_url": "https://api.github.com/users/michaelsproul/events{/privacy}",
      "received_events_url": "https://api.github.com/users/michaelsproul/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-07-15T08:38:43Z",
    "updated_at": "2023-07-15T08:38:43Z",
    "author_association": "MEMBER",
    "body": "Hey @muang0, the pattern we found that works is this one:\r\n\r\nhttps://github.com/sigp/lighthouse/blob/dfcb3363c757671eb19d5f8e519b4b94ac74677a/beacon_node/http_api/src/lib.rs#L1248-L1274\r\n\r\ni.e. change the `and_then` to a `then` so that there's no possibility of returning a `Rejection`. This prevents `warp` from backtracking when a handler errors.\r\n\r\nThe complication is that, `then` expects a `Response` as the return value, not a `Result<Response, Rejection>` so we need to convert the `Rejection`s that were previously returned into responses, which is what that `warp_utils::reject::handle_rejection` accomplishes. The abstraction I'm thinking of is something like:\r\n\r\n```rust\r\nthen_or_error(|| {\r\n   // this function `f` returns a `Result<T, Rejection>`, which `then_or_error` will convert to a\r\n   // `Response`. We can hopefully do a find and replace of `and_then` for `then_or_error`,\r\n   // with minimal other changes.\r\n   f()\r\n})\r\n```\r\n\r\nThe implementation of `then_or_error` might look like this:\r\n\r\n```rust\r\nuse warp::{filters::BoxedFilter, Filter, reply::Reply};\r\n\r\n// Mixin trait (add methods to all warp types implementing Filter)\r\npub trait ThenOrError {\r\n   fn then_or_error<G, R>(self, g: G) -> BoxedFilter<(Response,)> \r\n      where G: Future<Item = Result<R, Rejection>>,\r\n            R: Reply,\r\n   {\r\n       self.then(|| {\r\n           match f.await {\r\n               Ok(result) => result.into_response(),\r\n               Err(e) => match warp_utils::reject::handle_rejection(e).await { \r\n                 Ok(reply) => reply.into_response(), \r\n                 Err(_) => warp::reply::with_status( \r\n                     StatusCode::INTERNAL_SERVER_ERROR, \r\n                     eth2::StatusCode::INTERNAL_SERVER_ERROR, \r\n                 )\r\n                 .into_response(), \r\n             },\r\n           }\r\n       })\r\n       .boxed()\r\n   }\r\n}\r\n\r\nimpl<F> ThenOrError for F: Filter {}\r\n```\r\n\r\nThis might require some tweaks to get working.\r\n\r\nWe are also working on a big overhaul of the HTTP API here: https://github.com/sigp/lighthouse/pull/4462, so it might make sense for that to stabilise before rolling out this change (or we can raise a PR based on #4462 and merge this afterwards). I'm away for the next two weeks, but if you feel like working on it in the meantime I hope this is enough info to make progress",
    "reactions": {
      "url": "https://api.github.com/repos/sigp/lighthouse/issues/comments/1636710805/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/sigp/lighthouse/issues/comments/1639331387",
    "html_url": "https://github.com/sigp/lighthouse/issues/3404#issuecomment-1639331387",
    "issue_url": "https://api.github.com/repos/sigp/lighthouse/issues/3404",
    "id": 1639331387,
    "node_id": "IC_kwDOCFeAzc5htjY7",
    "user": {
      "login": "muang0",
      "id": 28738612,
      "node_id": "MDQ6VXNlcjI4NzM4NjEy",
      "avatar_url": "https://avatars.githubusercontent.com/u/28738612?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/muang0",
      "html_url": "https://github.com/muang0",
      "followers_url": "https://api.github.com/users/muang0/followers",
      "following_url": "https://api.github.com/users/muang0/following{/other_user}",
      "gists_url": "https://api.github.com/users/muang0/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/muang0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/muang0/subscriptions",
      "organizations_url": "https://api.github.com/users/muang0/orgs",
      "repos_url": "https://api.github.com/users/muang0/repos",
      "events_url": "https://api.github.com/users/muang0/events{/privacy}",
      "received_events_url": "https://api.github.com/users/muang0/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-07-18T03:55:42Z",
    "updated_at": "2023-07-18T03:55:42Z",
    "author_association": "NONE",
    "body": "Thanks for the clarification @michaelsproul \r\n\r\nI think we may be able to solve this using warp-native constructs (see example [here](https://github.com/seanmonstar/warp/blob/master/examples/rejections.rs#L36)). I'll play around with it a bit tomorrow.\r\n\r\nIn the meantime, can anyone provide context around the choice of a custom `uor` rather than `or` (beyond the in-line comment below)? \r\n`This is a shorthand for self.or(other).unify().boxed(), which is useful because it keeps the filter type simple and prevents type-checker explosions.`\r\nIs now an appropriate time for us to face the 'type-checker explosions?'\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/sigp/lighthouse/issues/comments/1639331387/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/sigp/lighthouse/issues/comments/1639428339",
    "html_url": "https://github.com/sigp/lighthouse/issues/3404#issuecomment-1639428339",
    "issue_url": "https://api.github.com/repos/sigp/lighthouse/issues/3404",
    "id": 1639428339,
    "node_id": "IC_kwDOCFeAzc5ht7Dz",
    "user": {
      "login": "michaelsproul",
      "id": 4452260,
      "node_id": "MDQ6VXNlcjQ0NTIyNjA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4452260?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/michaelsproul",
      "html_url": "https://github.com/michaelsproul",
      "followers_url": "https://api.github.com/users/michaelsproul/followers",
      "following_url": "https://api.github.com/users/michaelsproul/following{/other_user}",
      "gists_url": "https://api.github.com/users/michaelsproul/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/michaelsproul/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/michaelsproul/subscriptions",
      "organizations_url": "https://api.github.com/users/michaelsproul/orgs",
      "repos_url": "https://api.github.com/users/michaelsproul/repos",
      "events_url": "https://api.github.com/users/michaelsproul/events{/privacy}",
      "received_events_url": "https://api.github.com/users/michaelsproul/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-07-18T04:39:31Z",
    "updated_at": "2023-07-18T04:40:17Z",
    "author_association": "MEMBER",
    "body": "Hey @muang0, I don't think `recover` on its own is sufficient. We are already using it here: \r\n\r\nhttps://github.com/sigp/lighthouse/blob/dfcb3363c757671eb19d5f8e519b4b94ac74677a/beacon_node/http_api/src/lib.rs#L3945\r\n\r\nThe problem is the `and_then`: it will backtrack and try a different handler if the handler returns a `Rejection`, which is exactly what we don't want. We could maybe achieve the same thing as `then_or_error` by sprinkling `recover`s immediately after every `and_then`, is that what you had in mind?\r\n\r\n> Is now an appropriate time for us to face the 'type-checker explosions?'\r\n\r\nI don't think there's a better solution, but willing to be proved wrong. The boxing greatly simplifies the types and prevents us from hitting the compiler's recursion limit on massive types like `Or<Or<Or<Or<Or<Or<....>>>>>>`. It _mostly worked_ fine without the boxing before, except that new compiler releases would subtly change the recursion limit behaviour and cause compilation to fail. We haven't had any compilation issues since adopting the boxing.",
    "reactions": {
      "url": "https://api.github.com/repos/sigp/lighthouse/issues/comments/1639428339/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/sigp/lighthouse/issues/comments/1640206333",
    "html_url": "https://github.com/sigp/lighthouse/issues/3404#issuecomment-1640206333",
    "issue_url": "https://api.github.com/repos/sigp/lighthouse/issues/3404",
    "id": 1640206333,
    "node_id": "IC_kwDOCFeAzc5hw4_9",
    "user": {
      "login": "muang0",
      "id": 28738612,
      "node_id": "MDQ6VXNlcjI4NzM4NjEy",
      "avatar_url": "https://avatars.githubusercontent.com/u/28738612?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/muang0",
      "html_url": "https://github.com/muang0",
      "followers_url": "https://api.github.com/users/muang0/followers",
      "following_url": "https://api.github.com/users/muang0/following{/other_user}",
      "gists_url": "https://api.github.com/users/muang0/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/muang0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/muang0/subscriptions",
      "organizations_url": "https://api.github.com/users/muang0/orgs",
      "repos_url": "https://api.github.com/users/muang0/repos",
      "events_url": "https://api.github.com/users/muang0/events{/privacy}",
      "received_events_url": "https://api.github.com/users/muang0/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-07-18T13:12:46Z",
    "updated_at": "2023-07-18T13:12:46Z",
    "author_association": "NONE",
    "body": "`We could maybe achieve the same thing as then_or_error by sprinkling recovers immediately after every and_then, is that what you had in mind?\r\n`\r\nWasn't thinking of this approach in particular, but I think this would be more optimal than writing a custom Mixin.\r\n\r\n`new compiler releases would subtly change the recursion limit behaviour and cause compilation to fail. We haven't had any compilation issues since adopting the boxing.\r\n`\r\nI'm [following you](https://github.com/sigp/lighthouse/commit/90cef1db868378ae7a10189b960b62bbc21b7fe6#diff-0aec0f89455da3fc1b452417ec63873cd95bd4ee3319e386233535544f47ab30), neat workaround for the compiler issues.\r\n\r\nAssuming no concerns, I'll update an endpoint to use `recover() `after the `and_then`; then we can see how it looks/behaves",
    "reactions": {
      "url": "https://api.github.com/repos/sigp/lighthouse/issues/comments/1640206333/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/sigp/lighthouse/issues/comments/1640579182",
    "html_url": "https://github.com/sigp/lighthouse/issues/3404#issuecomment-1640579182",
    "issue_url": "https://api.github.com/repos/sigp/lighthouse/issues/3404",
    "id": 1640579182,
    "node_id": "IC_kwDOCFeAzc5hyUBu",
    "user": {
      "login": "muang0",
      "id": 28738612,
      "node_id": "MDQ6VXNlcjI4NzM4NjEy",
      "avatar_url": "https://avatars.githubusercontent.com/u/28738612?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/muang0",
      "html_url": "https://github.com/muang0",
      "followers_url": "https://api.github.com/users/muang0/followers",
      "following_url": "https://api.github.com/users/muang0/following{/other_user}",
      "gists_url": "https://api.github.com/users/muang0/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/muang0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/muang0/subscriptions",
      "organizations_url": "https://api.github.com/users/muang0/orgs",
      "repos_url": "https://api.github.com/users/muang0/repos",
      "events_url": "https://api.github.com/users/muang0/events{/privacy}",
      "received_events_url": "https://api.github.com/users/muang0/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-07-18T16:48:36Z",
    "updated_at": "2023-07-19T01:54:40Z",
    "author_association": "NONE",
    "body": "~Testing blocked on an interesting cloudfront error.  I'll give it some time before retrying & the subsequent Crates/AWS support tickets~ unblocked\r\n```\r\nbender@Jamess-MacBook-Air lighthouse % make install-lcli\r\ncargo install --path lcli --force --locked \\\r\n\t\t--features \"jemalloc\" \\\r\n\t\t--profile \"release\" \\\r\n\t\t\r\n  Installing lcli v4.3.0 (/Users/bender/Projects/fun/lighthouse/lcli)\r\n    Updating crates.io index\r\nerror: download of ha/sh/hashers failed\r\n\r\nCaused by:\r\n  failed to get successful HTTP response from `https://index.crates.io/ha/sh/hashers` (18.165.83.65), got 421\r\n  debug headers:\r\n  x-amz-cf-pop: IAD12-P1\r\n  x-cache: Error from cloudfront\r\n  x-amz-cf-pop: IAD55-P3\r\n  x-amz-cf-id: bK5gURNzbur0Xk8kh7XHscLP0xLRes6LhH_hq4Ez1R5gcSHN8ir2cQ==\r\n  body:\r\n  <!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\r\n  <HTML><HEAD><META HTTP-EQUIV=\"Content-Type\" CONTENT=\"text/html; charset=iso-8859-1\">\r\n  <TITLE>ERROR: The request could not be satisfied</TITLE>\r\n  </HEAD><BODY>\r\n  <H1>421 ERROR</H1>\r\n  <H2>The request could not be satisfied.</H2>\r\n  <HR noshade size=\"1px\">\r\n  The distribution does not match the certificate for which the HTTPS connection was established with.\r\n  We can't connect to the server for this app or website at this …\r\nmake: *** [install-lcli] Error 101\r\n\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/sigp/lighthouse/issues/comments/1640579182/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/sigp/lighthouse/issues/comments/1641369415",
    "html_url": "https://github.com/sigp/lighthouse/issues/3404#issuecomment-1641369415",
    "issue_url": "https://api.github.com/repos/sigp/lighthouse/issues/3404",
    "id": 1641369415,
    "node_id": "IC_kwDOCFeAzc5h1U9H",
    "user": {
      "login": "muang0",
      "id": 28738612,
      "node_id": "MDQ6VXNlcjI4NzM4NjEy",
      "avatar_url": "https://avatars.githubusercontent.com/u/28738612?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/muang0",
      "html_url": "https://github.com/muang0",
      "followers_url": "https://api.github.com/users/muang0/followers",
      "following_url": "https://api.github.com/users/muang0/following{/other_user}",
      "gists_url": "https://api.github.com/users/muang0/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/muang0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/muang0/subscriptions",
      "organizations_url": "https://api.github.com/users/muang0/orgs",
      "repos_url": "https://api.github.com/users/muang0/repos",
      "events_url": "https://api.github.com/users/muang0/events{/privacy}",
      "received_events_url": "https://api.github.com/users/muang0/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-07-19T03:44:30Z",
    "updated_at": "2023-07-19T19:17:50Z",
    "author_association": "NONE",
    "body": "~Running into an issue starting the local testnet, looks like the clients are expecting a `deploy_block.txt` file that's not being created. Will investigate more tmrw.~ unblocked",
    "reactions": {
      "url": "https://api.github.com/repos/sigp/lighthouse/issues/comments/1641369415/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/sigp/lighthouse/issues/comments/1650650802",
    "html_url": "https://github.com/sigp/lighthouse/issues/3404#issuecomment-1650650802",
    "issue_url": "https://api.github.com/repos/sigp/lighthouse/issues/3404",
    "id": 1650650802,
    "node_id": "IC_kwDOCFeAzc5iYu6y",
    "user": {
      "login": "muang0",
      "id": 28738612,
      "node_id": "MDQ6VXNlcjI4NzM4NjEy",
      "avatar_url": "https://avatars.githubusercontent.com/u/28738612?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/muang0",
      "html_url": "https://github.com/muang0",
      "followers_url": "https://api.github.com/users/muang0/followers",
      "following_url": "https://api.github.com/users/muang0/following{/other_user}",
      "gists_url": "https://api.github.com/users/muang0/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/muang0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/muang0/subscriptions",
      "organizations_url": "https://api.github.com/users/muang0/orgs",
      "repos_url": "https://api.github.com/users/muang0/repos",
      "events_url": "https://api.github.com/users/muang0/events{/privacy}",
      "received_events_url": "https://api.github.com/users/muang0/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-07-25T22:31:05Z",
    "updated_at": "2023-07-25T22:31:05Z",
    "author_association": "NONE",
    "body": "Update: Adding recover() to each filter didn't solve the backtracking issue. I'll try the Mixin approach next.",
    "reactions": {
      "url": "https://api.github.com/repos/sigp/lighthouse/issues/comments/1650650802/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
