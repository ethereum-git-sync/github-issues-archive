{
  "url": "https://api.github.com/repos/sigp/lighthouse/issues/5112",
  "repository_url": "https://api.github.com/repos/sigp/lighthouse",
  "labels_url": "https://api.github.com/repos/sigp/lighthouse/issues/5112/labels{/name}",
  "comments_url": "https://api.github.com/repos/sigp/lighthouse/issues/5112/comments",
  "events_url": "https://api.github.com/repos/sigp/lighthouse/issues/5112/events",
  "html_url": "https://github.com/sigp/lighthouse/issues/5112",
  "id": 2095264303,
  "node_id": "I_kwDOCFeAzc584zIv",
  "number": 5112,
  "title": "Improve & unify parallel de-duplication caches",
  "user": {
    "login": "michaelsproul",
    "id": 4452260,
    "node_id": "MDQ6VXNlcjQ0NTIyNjA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4452260?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/michaelsproul",
    "html_url": "https://github.com/michaelsproul",
    "followers_url": "https://api.github.com/users/michaelsproul/followers",
    "following_url": "https://api.github.com/users/michaelsproul/following{/other_user}",
    "gists_url": "https://api.github.com/users/michaelsproul/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/michaelsproul/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/michaelsproul/subscriptions",
    "organizations_url": "https://api.github.com/users/michaelsproul/orgs",
    "repos_url": "https://api.github.com/users/michaelsproul/repos",
    "events_url": "https://api.github.com/users/michaelsproul/events{/privacy}",
    "received_events_url": "https://api.github.com/users/michaelsproul/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 1690958121,
      "node_id": "MDU6TGFiZWwxNjkwOTU4MTIx",
      "url": "https://api.github.com/repos/sigp/lighthouse/labels/code-quality",
      "name": "code-quality",
      "color": "77a7ff",
      "default": false,
      "description": ""
    },
    {
      "id": 1999784343,
      "node_id": "MDU6TGFiZWwxOTk5Nzg0MzQz",
      "url": "https://api.github.com/repos/sigp/lighthouse/labels/optimization",
      "name": "optimization",
      "color": "f9de40",
      "default": false,
      "description": "Something to make Lighthouse run more efficiently."
    },
    {
      "id": 5636045869,
      "node_id": "LA_kwDOCFeAzc8AAAABT-88LQ",
      "url": "https://api.github.com/repos/sigp/lighthouse/labels/tree-states",
      "name": "tree-states",
      "color": "91FCA5",
      "default": false,
      "description": "Upcoming state and database overhaul"
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 0,
  "created_at": "2024-01-23T05:22:57Z",
  "updated_at": "2024-01-23T05:22:58Z",
  "closed_at": null,
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "## Description\r\n\r\nIn https://github.com/sigp/lighthouse/pull/4879 I somewhat hastily introduced a new cache on `tree-states` to improve the performance of parallel HTTP requests. I'm now thinking that this wasn't the best way to implement it, because:\r\n\r\n- The cache is never pruned, so any states that end up there _stay there_ until they're replaced. This means if a bunch of states that aren't anchored to the store's main state cache are present, then they will stay in memory consuming a bunch of RAM until new requests evict them.\r\n- The cache needs to be manually used in every HTTP API handler, and many of the ones that people commonly use (e.g. rewards) don't yet utilise the new cache. Unifying caches and simplifying things to remove footguns and performance pitfalls is one of the main goals of `tree-states` and its primary `state_cache`, so the current situation is not ideal.\r\n- The cache fundamentally serves the same purpose as the committee cache, which is why the implementation is so similar.\r\n\r\n## Version\r\n\r\nLighthouse v4.6.111-exp.\r\n\r\n## Steps to resolve\r\n\r\nThe basic idea is:\r\n\r\n- Push the parallel cache (PromiseCache) down into the `store`. Maybe it sits in front of the `state_cache` but only stores slots or state_roots (not full states).\r\n\r\nThe problem is how to manage freezer states. They aren't in the regular `state_cache` and have very different logic for fetching, as well as the ability to index by slot. One option would be two promise caches, where the freezer one sits in front of the `diff_buffer_cache` (indexed by slot). Alternatively it may make sense to revive the historic state cache, which so far is lying dormant on the tree-states branch (replaced by the diff buffer cache).",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/sigp/lighthouse/issues/5112/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/sigp/lighthouse/issues/5112/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[

]
