{
  "url": "https://api.github.com/repos/sigp/lighthouse/issues/2805",
  "repository_url": "https://api.github.com/repos/sigp/lighthouse",
  "labels_url": "https://api.github.com/repos/sigp/lighthouse/issues/2805/labels{/name}",
  "comments_url": "https://api.github.com/repos/sigp/lighthouse/issues/2805/comments",
  "events_url": "https://api.github.com/repos/sigp/lighthouse/issues/2805/events",
  "html_url": "https://github.com/sigp/lighthouse/issues/2805",
  "id": 1051625641,
  "node_id": "I_kwDOCFeAzc4-roip",
  "number": 2805,
  "title": "Improve block processing performance during re-org",
  "user": {
    "login": "michaelsproul",
    "id": 4452260,
    "node_id": "MDQ6VXNlcjQ0NTIyNjA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4452260?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/michaelsproul",
    "html_url": "https://github.com/michaelsproul",
    "followers_url": "https://api.github.com/users/michaelsproul/followers",
    "following_url": "https://api.github.com/users/michaelsproul/following{/other_user}",
    "gists_url": "https://api.github.com/users/michaelsproul/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/michaelsproul/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/michaelsproul/subscriptions",
    "organizations_url": "https://api.github.com/users/michaelsproul/orgs",
    "repos_url": "https://api.github.com/users/michaelsproul/repos",
    "events_url": "https://api.github.com/users/michaelsproul/events{/privacy}",
    "received_events_url": "https://api.github.com/users/michaelsproul/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 1157252215,
      "node_id": "MDU6TGFiZWwxMTU3MjUyMjE1",
      "url": "https://api.github.com/repos/sigp/lighthouse/labels/major-task",
      "name": "major-task",
      "color": "c18d3f",
      "default": false,
      "description": "A significant amount of work or conceptual task."
    },
    {
      "id": 1999784343,
      "node_id": "MDU6TGFiZWwxOTk5Nzg0MzQz",
      "url": "https://api.github.com/repos/sigp/lighthouse/labels/optimization",
      "name": "optimization",
      "color": "f9de40",
      "default": false,
      "description": "Something to make Lighthouse run more efficiently."
    },
    {
      "id": 2490305065,
      "node_id": "MDU6TGFiZWwyNDkwMzA1MDY1",
      "url": "https://api.github.com/repos/sigp/lighthouse/labels/A1",
      "name": "A1",
      "color": "223184",
      "default": false,
      "description": ""
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 0,
  "created_at": "2021-11-12T06:23:26Z",
  "updated_at": "2021-11-12T06:23:26Z",
  "closed_at": null,
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "## Description\r\n\r\nConsider the following re-org that frustrates Lighthouse's attempts to process blocks quickly:\r\n\r\nLet `n` be a slot on an epoch boundary (`n % 32 == 0`).\r\n\r\n1. Immediately prior to slot `n` the preemptive state advance occurs as normal\r\n2. The block from slot `n` arrives super late (12s+), consuming the advanced state\r\n3. The block from slot `n + 1` arrives on time, but builds upon the parent at slot `n -1`. It's going to be super slow to process because its parent state is missing from the cache, meaning:\r\n    a) We need to load the full state for slot `n - 1` from disk (a few hundred ms)\r\n    b) We need to transition that state through an epoch boundary (200ms)\r\n    c) We need to store the state for slot `n` on disk. It is different from the slot `n` slot with block `n` applied, and presently we store every epoch boundary state\r\n\r\n## Example\r\n\r\nHere's an instance of this behaviour that I observed at slot `n=2485472` on mainnet, resulting in block processing taking 2.5s instead of the usual 80ms (median) or 456ms (99th percentile) (metrics from https://github.com/sigp/lighthouse-metrics/pull/31).\r\n\r\n```\r\nNov 11 16:55:03.815 WARN Beacon chain re-org                     reorg_distance: 1, new_slot: 2485473, new_head: 0xb17f…a572, new_head_parent: 0x0f98…9b22, previous_slot: 2485472, previous_head: 0x1c4d…c94b, service: beacon\r\nNov 11 16:55:03.818 DEBG Delayed head block                      set_as_head_delay: Some(222.219889ms), imported_delay: Some(2.545278411s), observed_delay: Some(2.051036927s), block_delay: 4.818535227s, slot: 2485473, proposer_index: 52065, block_root: 0xb17fe52ce55315713a9e3eb28858a1a53039daf9e1f6406aa2c8d0d8ae11a572, service: beacon\r\n```\r\n\r\nEven though the block arrived on time, taking 2.5s to process it meant that any attestations at this slot would have missed (if running on this node).\r\n\r\n## Additional Info\r\n\r\nIt should be noted that this behaviour should be quite rare, due to the infrequency of re-orgs and late blocks on mainnet (at worst ~4% of blocks are late, with very few being 12s+ late). However if proposer boosting is adopted we may see more re-orgs of this type, where a proposer intentionally orphans the previous block despite it having been published.\r\n",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/sigp/lighthouse/issues/2805/reactions",
    "total_count": 1,
    "+1": 1,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/sigp/lighthouse/issues/2805/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[

]
