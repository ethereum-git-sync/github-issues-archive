{
  "url": "https://api.github.com/repos/sigp/lighthouse/issues/2371",
  "repository_url": "https://api.github.com/repos/sigp/lighthouse",
  "labels_url": "https://api.github.com/repos/sigp/lighthouse/issues/2371/labels{/name}",
  "comments_url": "https://api.github.com/repos/sigp/lighthouse/issues/2371/comments",
  "events_url": "https://api.github.com/repos/sigp/lighthouse/issues/2371/events",
  "html_url": "https://github.com/sigp/lighthouse/issues/2371",
  "id": 903134246,
  "node_id": "MDU6SXNzdWU5MDMxMzQyNDY=",
  "number": 2371,
  "title": "Implement consensus context optimisation",
  "user": {
    "login": "michaelsproul",
    "id": 4452260,
    "node_id": "MDQ6VXNlcjQ0NTIyNjA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4452260?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/michaelsproul",
    "html_url": "https://github.com/michaelsproul",
    "followers_url": "https://api.github.com/users/michaelsproul/followers",
    "following_url": "https://api.github.com/users/michaelsproul/following{/other_user}",
    "gists_url": "https://api.github.com/users/michaelsproul/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/michaelsproul/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/michaelsproul/subscriptions",
    "organizations_url": "https://api.github.com/users/michaelsproul/orgs",
    "repos_url": "https://api.github.com/users/michaelsproul/repos",
    "events_url": "https://api.github.com/users/michaelsproul/events{/privacy}",
    "received_events_url": "https://api.github.com/users/michaelsproul/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 1232620456,
      "node_id": "MDU6TGFiZWwxMjMyNjIwNDU2",
      "url": "https://api.github.com/repos/sigp/lighthouse/labels/RFC",
      "name": "RFC",
      "color": "4aaa19",
      "default": false,
      "description": "Request for comment"
    },
    {
      "id": 1999784343,
      "node_id": "MDU6TGFiZWwxOTk5Nzg0MzQz",
      "url": "https://api.github.com/repos/sigp/lighthouse/labels/optimization",
      "name": "optimization",
      "color": "f9de40",
      "default": false,
      "description": "Something to make Lighthouse run more efficiently."
    },
    {
      "id": 2034355093,
      "node_id": "MDU6TGFiZWwyMDM0MzU1MDkz",
      "url": "https://api.github.com/repos/sigp/lighthouse/labels/consensus",
      "name": "consensus",
      "color": "5e59bf",
      "default": false,
      "description": "An issue/PR that touches consensus code, such as state_processing or block verification."
    },
    {
      "id": 2490305065,
      "node_id": "MDU6TGFiZWwyNDkwMzA1MDY1",
      "url": "https://api.github.com/repos/sigp/lighthouse/labels/A1",
      "name": "A1",
      "color": "223184",
      "default": false,
      "description": ""
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": {
    "login": "michaelsproul",
    "id": 4452260,
    "node_id": "MDQ6VXNlcjQ0NTIyNjA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4452260?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/michaelsproul",
    "html_url": "https://github.com/michaelsproul",
    "followers_url": "https://api.github.com/users/michaelsproul/followers",
    "following_url": "https://api.github.com/users/michaelsproul/following{/other_user}",
    "gists_url": "https://api.github.com/users/michaelsproul/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/michaelsproul/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/michaelsproul/subscriptions",
    "organizations_url": "https://api.github.com/users/michaelsproul/orgs",
    "repos_url": "https://api.github.com/users/michaelsproul/repos",
    "events_url": "https://api.github.com/users/michaelsproul/events{/privacy}",
    "received_events_url": "https://api.github.com/users/michaelsproul/received_events",
    "type": "User",
    "site_admin": false
  },
  "assignees": [
    {
      "login": "michaelsproul",
      "id": 4452260,
      "node_id": "MDQ6VXNlcjQ0NTIyNjA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4452260?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/michaelsproul",
      "html_url": "https://github.com/michaelsproul",
      "followers_url": "https://api.github.com/users/michaelsproul/followers",
      "following_url": "https://api.github.com/users/michaelsproul/following{/other_user}",
      "gists_url": "https://api.github.com/users/michaelsproul/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/michaelsproul/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/michaelsproul/subscriptions",
      "organizations_url": "https://api.github.com/users/michaelsproul/orgs",
      "repos_url": "https://api.github.com/users/michaelsproul/repos",
      "events_url": "https://api.github.com/users/michaelsproul/events{/privacy}",
      "received_events_url": "https://api.github.com/users/michaelsproul/received_events",
      "type": "User",
      "site_admin": false
    }
  ],
  "milestone": null,
  "comments": 2,
  "created_at": "2021-05-27T02:29:13Z",
  "updated_at": "2022-11-09T05:02:42Z",
  "closed_at": "2022-10-20T01:04:10Z",
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "## Description\r\n\r\nThroughout state processing, we quite often make use of a pattern where we pass in a pre-computed value in order to avoid recomputing it, e.g. the `state_root` passed to `per_slot_processing` or the `total_active_balance` passed to various rewards processing functions. There are more opportunities for such optimisations, including the proposer index (https://github.com/sigp/lighthouse/issues/598) and other properties of the validator set (`unslashed_participating_indices` for the 3 different flags).\r\n\r\nMy idea for neatly generalising this pattern and enabling more of these optimisations is to add a single context struct to contain these values, and pass it around between all relevant state transition functions:\r\n\r\n```rust\r\npub struct ConsensusContext<T: EthSpec> {\r\n    /// Slot to act as an identifier/safeguard\r\n    slot: Slot,\r\n    state_root: Option<Hash256>,\r\n    proposer_index: Option<u64>,\r\n    ...\r\n}\r\n```\r\n\r\nThe signature of `per_slot_processing` would change as follows:\r\n\r\n```rust\r\npub fn per_slot_processing<T: EthSpec>(\r\n    state: &mut BeaconState<T>,\r\n    context: &mut ConsensusContext<T>,\r\n    spec: &ChainSpec,\r\n) -> Result<Option<EpochProcessingSummary>, Error>;\r\n```\r\n\r\nThe context would have constructors/builders for making a context with 0 or more pre-computed values. If you have the `state_root` handy, you feed it in, or if you have the proposer index from the `BeaconChain`'s proposer index cache, you supply that.\r\n\r\n```rust\r\nlet mut ctxt = ConsensusContext::new(slot)\r\n    .set_state_root(state_root)\r\n    .set_proposer_index(proposer_index);\r\n```\r\n\r\nThen in the consensus code when these values are required they are fetched via memoising accessors that either a) use the cached value if it exists, or b) compute the value from scratch and add it to the context for future use.\r\n\r\n```rust\r\nimpl<T: EthSpec> ConsensusContext<T> {\r\n    pub fn get_beacon_proposer_index(\r\n        &mut self,\r\n        state: &BeaconState<T>,\r\n        spec: &ChainSpec\r\n    ) -> Result<usize, Error> {\r\n        if let Some(proposer_index) = self.proposer_index {\r\n            return Ok(proposer_index);\r\n        }\r\n        let proposer_index = state.get_beacon_proposer_index(self.slot, spec)?;\r\n        self.proposer_index = Some(proposer_index)\r\n        Ok(proposer_index)\r\n    }\r\n}\r\n```\r\n\r\n## Alternatives\r\n\r\n* As an alternative we could instead add these optional memoising caches to the `BeaconState`, but I think that would be messier, and would introduce cache invalidation bugs that don't exist with an ephemeral cache like the `ConsensusContext`\r\n* Plumb parameters around manually. Also messier, introduces friction for new optimisations, no memoisation logic.",
  "closed_by": {
    "login": "michaelsproul",
    "id": 4452260,
    "node_id": "MDQ6VXNlcjQ0NTIyNjA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4452260?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/michaelsproul",
    "html_url": "https://github.com/michaelsproul",
    "followers_url": "https://api.github.com/users/michaelsproul/followers",
    "following_url": "https://api.github.com/users/michaelsproul/following{/other_user}",
    "gists_url": "https://api.github.com/users/michaelsproul/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/michaelsproul/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/michaelsproul/subscriptions",
    "organizations_url": "https://api.github.com/users/michaelsproul/orgs",
    "repos_url": "https://api.github.com/users/michaelsproul/repos",
    "events_url": "https://api.github.com/users/michaelsproul/events{/privacy}",
    "received_events_url": "https://api.github.com/users/michaelsproul/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/sigp/lighthouse/issues/2371/reactions",
    "total_count": 2,
    "+1": 1,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 1,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/sigp/lighthouse/issues/2371/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/sigp/lighthouse/issues/comments/868256513",
    "html_url": "https://github.com/sigp/lighthouse/issues/2371#issuecomment-868256513",
    "issue_url": "https://api.github.com/repos/sigp/lighthouse/issues/2371",
    "id": 868256513,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg2ODI1NjUxMw==",
    "user": {
      "login": "paulhauner",
      "id": 6660660,
      "node_id": "MDQ6VXNlcjY2NjA2NjA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6660660?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/paulhauner",
      "html_url": "https://github.com/paulhauner",
      "followers_url": "https://api.github.com/users/paulhauner/followers",
      "following_url": "https://api.github.com/users/paulhauner/following{/other_user}",
      "gists_url": "https://api.github.com/users/paulhauner/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/paulhauner/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/paulhauner/subscriptions",
      "organizations_url": "https://api.github.com/users/paulhauner/orgs",
      "repos_url": "https://api.github.com/users/paulhauner/repos",
      "events_url": "https://api.github.com/users/paulhauner/events{/privacy}",
      "received_events_url": "https://api.github.com/users/paulhauner/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-06-25T06:24:30Z",
    "updated_at": "2021-06-25T06:24:30Z",
    "author_association": "MEMBER",
    "body": "I've just come across this again after forgetting about it.\r\n\r\nThere's some optimizations in #2416 which cover `unslashed_participating_indices` and total balances, but only for Altair. That implements a `ParticipationCache` which would be a good candidate to include in `ConsensusContext.`",
    "reactions": {
      "url": "https://api.github.com/repos/sigp/lighthouse/issues/comments/868256513/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 1,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/sigp/lighthouse/issues/comments/1043824597",
    "html_url": "https://github.com/sigp/lighthouse/issues/2371#issuecomment-1043824597",
    "issue_url": "https://api.github.com/repos/sigp/lighthouse/issues/2371",
    "id": 1043824597,
    "node_id": "IC_kwDOCFeAzc4-N3_V",
    "user": {
      "login": "michaelsproul",
      "id": 4452260,
      "node_id": "MDQ6VXNlcjQ0NTIyNjA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4452260?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/michaelsproul",
      "html_url": "https://github.com/michaelsproul",
      "followers_url": "https://api.github.com/users/michaelsproul/followers",
      "following_url": "https://api.github.com/users/michaelsproul/following{/other_user}",
      "gists_url": "https://api.github.com/users/michaelsproul/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/michaelsproul/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/michaelsproul/subscriptions",
      "organizations_url": "https://api.github.com/users/michaelsproul/orgs",
      "repos_url": "https://api.github.com/users/michaelsproul/repos",
      "events_url": "https://api.github.com/users/michaelsproul/events{/privacy}",
      "received_events_url": "https://api.github.com/users/michaelsproul/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-02-18T03:31:28Z",
    "updated_at": "2022-02-18T03:31:28Z",
    "author_association": "MEMBER",
    "body": "I've implemented this while working on #2806",
    "reactions": {
      "url": "https://api.github.com/repos/sigp/lighthouse/issues/comments/1043824597/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
