{
  "url": "https://api.github.com/repos/sigp/lighthouse/issues/503",
  "repository_url": "https://api.github.com/repos/sigp/lighthouse",
  "labels_url": "https://api.github.com/repos/sigp/lighthouse/issues/503/labels{/name}",
  "comments_url": "https://api.github.com/repos/sigp/lighthouse/issues/503/comments",
  "events_url": "https://api.github.com/repos/sigp/lighthouse/issues/503/events",
  "html_url": "https://github.com/sigp/lighthouse/issues/503",
  "id": 483273951,
  "node_id": "MDU6SXNzdWU0ODMyNzM5NTE=",
  "number": 503,
  "title": "CLI strategy",
  "user": {
    "login": "paulhauner",
    "id": 6660660,
    "node_id": "MDQ6VXNlcjY2NjA2NjA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6660660?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/paulhauner",
    "html_url": "https://github.com/paulhauner",
    "followers_url": "https://api.github.com/users/paulhauner/followers",
    "following_url": "https://api.github.com/users/paulhauner/following{/other_user}",
    "gists_url": "https://api.github.com/users/paulhauner/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/paulhauner/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/paulhauner/subscriptions",
    "organizations_url": "https://api.github.com/users/paulhauner/orgs",
    "repos_url": "https://api.github.com/users/paulhauner/repos",
    "events_url": "https://api.github.com/users/paulhauner/events{/privacy}",
    "received_events_url": "https://api.github.com/users/paulhauner/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 1232620456,
      "node_id": "MDU6TGFiZWwxMjMyNjIwNDU2",
      "url": "https://api.github.com/repos/sigp/lighthouse/labels/RFC",
      "name": "RFC",
      "color": "4aaa19",
      "default": false,
      "description": "Request for comment"
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 4,
  "created_at": "2019-08-21T08:28:35Z",
  "updated_at": "2019-09-26T04:02:02Z",
  "closed_at": "2019-09-26T04:02:02Z",
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "## Problem\r\n\r\nWe have several months of testing ahead of us that's going involve starting and restarting the `beacon_node` binary  in all different configurations. E.g., during the interop event we're going to be using several different configurations per day.\r\n\r\nThe CLI interface is getting a little cluttered and it's not clear as to what's going to happen. For example:\r\n\r\n- What happens if I give a different `--spec` flag to whats in the on-disk config?\r\n- What if I already have a database initialized with a different genesis state?\r\n- How do I know what params I need to give in order to start from some interop method?\r\n\r\n## Proposal\r\n\r\nI say there's two main use cases:\r\n\r\n- **Resuming** an existing node (e.g., load from an existing datadir/DB).\r\n- Starting a **new node** from one of many genesis-procedures (HTTP bootstrap, genesis yaml, etc) with some spec (e.g., minimal, mainnet, custom).\r\n\r\nTo suite these two purposes, we utilize clap `subcommands` to separate between these two tasks:\r\n\r\n- `$ ./beacon_node` (no args): is a \"resume\" operation.\r\n  - If there is a datadir and DB, it's business as usual.\r\n  - If there's no existing DB we throw an error and tell the user to use the `testnet` subcommand.\r\n  - Once we have a big testnet or mainnet, we can make the assumption that if no DB exists, they want to connect to this testnet.\r\n  - Does not accept a `--spec` flag. You're either using the default or an existing config. No choice for you.\r\n- `$ ./beacon_node testnet`: is a \"new node\" operation. \r\n  - If the `datadir` already exists, return an error (avoids overwriting, confusion about whether or not TOML files will be effective).\r\n  - We can specify a `--force` flag that will remove any existing `datadir`.\r\n  - We can also specify a `--tmp` flag that just crates a random datadir in the `/tmp` dir.\r\n  - Accepts a `--spec` flag. Can haz choice here.\r\n\r\n### Testnet examples\r\n\r\nStart a testnet node from the given YAML file and the minimal spec:\r\n```\r\n$ ./beacon_node testnet yaml ~/genesis_state.yaml --spec mainnet\r\n```\r\n\r\nStart a testnet node with 100 nodes using \"recent genesis\" and mainnet spec:\r\n```\r\n$ ./beacon_node testnet recent 100 --spec mainnet\r\n```\r\n\r\nStart a testnet node from another lighthouse node using Bootstrapâ„¢\r\n```\r\n$ ./beacon_node testnet bootstrap http://192.168.1.2\r\n```\r\n\r\n##  Pros\r\n\r\n- You don't ever accidentally start from an existing DB when you wanted to start anew.\r\n- Using `subcommands` we get name-spacing for CLI flags. E.g., if `bootstrap` needs the `--ssl` flag, we can add it to that subcommand without it showing up everywhere else.\r\n- It'll be very obvious when you're missing a flag required for an interop method (clap can know some flag is required for a subcommand).\r\n- You only ever need to worry about the TOML files if you want to change them.\r\n- Doesn't over-write config files.\r\n- Doesn't ignore config files.\r\n\r\n## Cons\r\n\r\n- Having to type `testnet` is additional work.\r\n- Need to think about whether or not you're starting new or not (arguably a pro).\r\n\r\n\r\n",
  "closed_by": {
    "login": "paulhauner",
    "id": 6660660,
    "node_id": "MDQ6VXNlcjY2NjA2NjA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6660660?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/paulhauner",
    "html_url": "https://github.com/paulhauner",
    "followers_url": "https://api.github.com/users/paulhauner/followers",
    "following_url": "https://api.github.com/users/paulhauner/following{/other_user}",
    "gists_url": "https://api.github.com/users/paulhauner/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/paulhauner/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/paulhauner/subscriptions",
    "organizations_url": "https://api.github.com/users/paulhauner/orgs",
    "repos_url": "https://api.github.com/users/paulhauner/repos",
    "events_url": "https://api.github.com/users/paulhauner/events{/privacy}",
    "received_events_url": "https://api.github.com/users/paulhauner/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/sigp/lighthouse/issues/503/reactions",
    "total_count": 3,
    "+1": 2,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 1,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/sigp/lighthouse/issues/503/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/sigp/lighthouse/issues/comments/523453494",
    "html_url": "https://github.com/sigp/lighthouse/issues/503#issuecomment-523453494",
    "issue_url": "https://api.github.com/repos/sigp/lighthouse/issues/503",
    "id": 523453494,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUyMzQ1MzQ5NA==",
    "user": {
      "login": "AgeManning",
      "id": 7454587,
      "node_id": "MDQ6VXNlcjc0NTQ1ODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7454587?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/AgeManning",
      "html_url": "https://github.com/AgeManning",
      "followers_url": "https://api.github.com/users/AgeManning/followers",
      "following_url": "https://api.github.com/users/AgeManning/following{/other_user}",
      "gists_url": "https://api.github.com/users/AgeManning/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/AgeManning/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/AgeManning/subscriptions",
      "organizations_url": "https://api.github.com/users/AgeManning/orgs",
      "repos_url": "https://api.github.com/users/AgeManning/repos",
      "events_url": "https://api.github.com/users/AgeManning/events{/privacy}",
      "received_events_url": "https://api.github.com/users/AgeManning/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-08-21T13:20:34Z",
    "updated_at": "2019-08-21T13:20:34Z",
    "author_association": "MEMBER",
    "body": "I like the idea of subcommands for CLI parameters that we can group into them. I agree we have a few different ways to start the client and I like the testnet subcommand idea for setting up various forms of the network.\r\n\r\nI don't think we should throw and error for all new users who run `./beacon_node` however. I think we should make it as simple and easy for new users to use lighthouse. Therefore I think the functionality of no CLI parameters would be run existing db and chains if they exist on file, otherwise create them with default mainnet parameters. \r\n\r\nThis will prevent all new users wanting to join mainnet to having an error thrown at them, then having to type the word 'testnet' when they really want to connect to mainnet. I think this could throw off a few people \r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/sigp/lighthouse/issues/comments/523453494/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/sigp/lighthouse/issues/comments/523658793",
    "html_url": "https://github.com/sigp/lighthouse/issues/503#issuecomment-523658793",
    "issue_url": "https://api.github.com/repos/sigp/lighthouse/issues/503",
    "id": 523658793,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUyMzY1ODc5Mw==",
    "user": {
      "login": "paulhauner",
      "id": 6660660,
      "node_id": "MDQ6VXNlcjY2NjA2NjA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6660660?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/paulhauner",
      "html_url": "https://github.com/paulhauner",
      "followers_url": "https://api.github.com/users/paulhauner/followers",
      "following_url": "https://api.github.com/users/paulhauner/following{/other_user}",
      "gists_url": "https://api.github.com/users/paulhauner/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/paulhauner/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/paulhauner/subscriptions",
      "organizations_url": "https://api.github.com/users/paulhauner/orgs",
      "repos_url": "https://api.github.com/users/paulhauner/repos",
      "events_url": "https://api.github.com/users/paulhauner/events{/privacy}",
      "received_events_url": "https://api.github.com/users/paulhauner/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-08-21T21:35:17Z",
    "updated_at": "2019-08-21T21:35:17Z",
    "author_association": "MEMBER",
    "body": "> I don't think we should throw and error for all new users\r\n\r\nAgreed, that's what I meant by this:\r\n\r\n> Once we have a big testnet or mainnet, we can make the assumption that if no DB exists, they want to connect to this testnet.\r\n\r\nI just think that whilst the default setting is unclear (i.e., no testnet, no mainnet), we just throw an error. \r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/sigp/lighthouse/issues/comments/523658793/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/sigp/lighthouse/issues/comments/523763150",
    "html_url": "https://github.com/sigp/lighthouse/issues/503#issuecomment-523763150",
    "issue_url": "https://api.github.com/repos/sigp/lighthouse/issues/503",
    "id": 523763150,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUyMzc2MzE1MA==",
    "user": {
      "login": "AgeManning",
      "id": 7454587,
      "node_id": "MDQ6VXNlcjc0NTQ1ODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7454587?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/AgeManning",
      "html_url": "https://github.com/AgeManning",
      "followers_url": "https://api.github.com/users/AgeManning/followers",
      "following_url": "https://api.github.com/users/AgeManning/following{/other_user}",
      "gists_url": "https://api.github.com/users/AgeManning/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/AgeManning/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/AgeManning/subscriptions",
      "organizations_url": "https://api.github.com/users/AgeManning/orgs",
      "repos_url": "https://api.github.com/users/AgeManning/repos",
      "events_url": "https://api.github.com/users/AgeManning/events{/privacy}",
      "received_events_url": "https://api.github.com/users/AgeManning/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-08-22T06:09:44Z",
    "updated_at": "2019-08-22T06:09:44Z",
    "author_association": "MEMBER",
    "body": "Yeah cool. \r\n\r\nLet's do this then. As things evolve, this part is really easy to change so if we go down a different path later, not much time is lost :)",
    "reactions": {
      "url": "https://api.github.com/repos/sigp/lighthouse/issues/comments/523763150/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/sigp/lighthouse/issues/comments/523763364",
    "html_url": "https://github.com/sigp/lighthouse/issues/503#issuecomment-523763364",
    "issue_url": "https://api.github.com/repos/sigp/lighthouse/issues/503",
    "id": 523763364,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUyMzc2MzM2NA==",
    "user": {
      "login": "paulhauner",
      "id": 6660660,
      "node_id": "MDQ6VXNlcjY2NjA2NjA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6660660?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/paulhauner",
      "html_url": "https://github.com/paulhauner",
      "followers_url": "https://api.github.com/users/paulhauner/followers",
      "following_url": "https://api.github.com/users/paulhauner/following{/other_user}",
      "gists_url": "https://api.github.com/users/paulhauner/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/paulhauner/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/paulhauner/subscriptions",
      "organizations_url": "https://api.github.com/users/paulhauner/orgs",
      "repos_url": "https://api.github.com/users/paulhauner/repos",
      "events_url": "https://api.github.com/users/paulhauner/events{/privacy}",
      "received_events_url": "https://api.github.com/users/paulhauner/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-08-22T06:10:36Z",
    "updated_at": "2019-08-22T06:10:36Z",
    "author_association": "MEMBER",
    "body": "I'll roll this in with some of the interop works I'm doing.",
    "reactions": {
      "url": "https://api.github.com/repos/sigp/lighthouse/issues/comments/523763364/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
