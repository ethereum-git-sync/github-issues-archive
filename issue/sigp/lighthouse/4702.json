{
  "url": "https://api.github.com/repos/sigp/lighthouse/issues/4702",
  "repository_url": "https://api.github.com/repos/sigp/lighthouse",
  "labels_url": "https://api.github.com/repos/sigp/lighthouse/issues/4702/labels{/name}",
  "comments_url": "https://api.github.com/repos/sigp/lighthouse/issues/4702/comments",
  "events_url": "https://api.github.com/repos/sigp/lighthouse/issues/4702/events",
  "html_url": "https://github.com/sigp/lighthouse/issues/4702",
  "id": 1882997747,
  "node_id": "I_kwDOCFeAzc5wPEPz",
  "number": 4702,
  "title": "Execution layer `getPayload` probably shouldn't take `ForkchoiceUpdateParameters`",
  "user": {
    "login": "michaelsproul",
    "id": 4452260,
    "node_id": "MDQ6VXNlcjQ0NTIyNjA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4452260?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/michaelsproul",
    "html_url": "https://github.com/michaelsproul",
    "followers_url": "https://api.github.com/users/michaelsproul/followers",
    "following_url": "https://api.github.com/users/michaelsproul/following{/other_user}",
    "gists_url": "https://api.github.com/users/michaelsproul/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/michaelsproul/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/michaelsproul/subscriptions",
    "organizations_url": "https://api.github.com/users/michaelsproul/orgs",
    "repos_url": "https://api.github.com/users/michaelsproul/repos",
    "events_url": "https://api.github.com/users/michaelsproul/events{/privacy}",
    "received_events_url": "https://api.github.com/users/michaelsproul/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 1690958121,
      "node_id": "MDU6TGFiZWwxNjkwOTU4MTIx",
      "url": "https://api.github.com/repos/sigp/lighthouse/labels/code-quality",
      "name": "code-quality",
      "color": "77a7ff",
      "default": false,
      "description": ""
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 0,
  "created_at": "2023-09-06T01:39:51Z",
  "updated_at": "2023-09-06T01:39:51Z",
  "closed_at": null,
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "## Description\r\n\r\nWhile reviewing Deneb I noticed that we do something slightly strange with the fork choice params when building a payload.\r\n\r\nWe get the parameters _for the head_, even if we are attempting a re-org, here:\r\n\r\nhttps://github.com/sigp/lighthouse/blob/2841f60686d642fcc0785c884d43e34e47a800dc/beacon_node/beacon_chain/src/execution_payload.rs#L523-L532\r\n\r\nThis makes little sense, as `get_execution_payload` is called with a `state` that it should be building a block for. It shouldn't be looking at what the canonical head is at all.\r\n\r\nWe pass these params to `ExecutionLayer::get_payload`:\r\n\r\nhttps://github.com/sigp/lighthouse/blob/2841f60686d642fcc0785c884d43e34e47a800dc/beacon_node/beacon_chain/src/execution_payload.rs#L545-L553\r\n\r\nThe only fields that are used are the `justified_hash` and `finalized_hash`, here:\r\n\r\nhttps://github.com/sigp/lighthouse/blob/2841f60686d642fcc0785c884d43e34e47a800dc/beacon_node/execution_layer/src/lib.rs#L1041-L1049\r\n\r\nThat `parent_hash` which is used in place of the `fork_choice_update_params.head_hash` is the hash of the block that we actually intend to build on (e.g. the parent of the canonical head in the case of a single-slot re-org). The strange part is that we use the justified and finalized hashes of the canonical head in a sort of hacked-up hybrid. This is _safe_ for the re-org strategy, because one of the conditions is that the re-org block must have the same justified and finalized checkpoints as the canonical head, but it is not correct in general (e.g. building on arbitrary parents). I'm not sure if I was aware of this and made this choice intentionally when implementing the re-org strategy.\r\n\r\n### Steps to resolve\r\n\r\nWork out a cleaner way to pass the fork choice update params. It would be better to derive them from the `state` (although I don't think this is possible). Or we could have a dedicated method on `CanonicalHead` which either returns parameters for the head or parameters for the head's parent, and is a bit clearer about what it is doing. For the case of building on an arbitrary parent (which is useful in tests) we could have a heavier-weight method that accomplishes that. It could be disabled in prod for safety.\r\n",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/sigp/lighthouse/issues/4702/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/sigp/lighthouse/issues/4702/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[

]
