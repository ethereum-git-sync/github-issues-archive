{
  "url": "https://api.github.com/repos/sigp/lighthouse/issues/2107",
  "repository_url": "https://api.github.com/repos/sigp/lighthouse",
  "labels_url": "https://api.github.com/repos/sigp/lighthouse/issues/2107/labels{/name}",
  "comments_url": "https://api.github.com/repos/sigp/lighthouse/issues/2107/comments",
  "events_url": "https://api.github.com/repos/sigp/lighthouse/issues/2107/events",
  "html_url": "https://github.com/sigp/lighthouse/issues/2107",
  "id": 771780013,
  "node_id": "MDU6SXNzdWU3NzE3ODAwMTM=",
  "number": 2107,
  "title": "Filter full peers from DHT",
  "user": {
    "login": "AgeManning",
    "id": 7454587,
    "node_id": "MDQ6VXNlcjc0NTQ1ODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/7454587?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/AgeManning",
    "html_url": "https://github.com/AgeManning",
    "followers_url": "https://api.github.com/users/AgeManning/followers",
    "following_url": "https://api.github.com/users/AgeManning/following{/other_user}",
    "gists_url": "https://api.github.com/users/AgeManning/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/AgeManning/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/AgeManning/subscriptions",
    "organizations_url": "https://api.github.com/users/AgeManning/orgs",
    "repos_url": "https://api.github.com/users/AgeManning/repos",
    "events_url": "https://api.github.com/users/AgeManning/events{/privacy}",
    "received_events_url": "https://api.github.com/users/AgeManning/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 4,
  "created_at": "2020-12-21T02:04:36Z",
  "updated_at": "2021-11-01T02:18:11Z",
  "closed_at": "2021-11-01T02:18:11Z",
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "## Description\r\n\r\nPrysm do not allow new connections once their client has reached their desired peer count. The Eth2 DHT has a large quantity of full prysm peers making discovery slow to find useful peers to connect to. \r\n\r\nI think we should attempt to filter out these peers from our stored DHT to make it easier to find contactable and useful peers. Lighthouse nodes could do this by attempting to connect to newly discovered peers and if the peer instantly rejects the connection, we mark that peers as \"Disconnected\" in our DHT freeing up a space in the bucket for a more contactable peer.\r\n\r\nWe shouldn't remove the peer entirely from the bucket as we run the risk of emptying our entire DHT and not being able to discovery any peers.",
  "closed_by": {
    "login": "AgeManning",
    "id": 7454587,
    "node_id": "MDQ6VXNlcjc0NTQ1ODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/7454587?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/AgeManning",
    "html_url": "https://github.com/AgeManning",
    "followers_url": "https://api.github.com/users/AgeManning/followers",
    "following_url": "https://api.github.com/users/AgeManning/following{/other_user}",
    "gists_url": "https://api.github.com/users/AgeManning/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/AgeManning/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/AgeManning/subscriptions",
    "organizations_url": "https://api.github.com/users/AgeManning/orgs",
    "repos_url": "https://api.github.com/users/AgeManning/repos",
    "events_url": "https://api.github.com/users/AgeManning/events{/privacy}",
    "received_events_url": "https://api.github.com/users/AgeManning/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/sigp/lighthouse/issues/2107/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/sigp/lighthouse/issues/2107/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/sigp/lighthouse/issues/comments/782549606",
    "html_url": "https://github.com/sigp/lighthouse/issues/2107#issuecomment-782549606",
    "issue_url": "https://api.github.com/repos/sigp/lighthouse/issues/2107",
    "id": 782549606,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc4MjU0OTYwNg==",
    "user": {
      "login": "ethDreamer",
      "id": 37123614,
      "node_id": "MDQ6VXNlcjM3MTIzNjE0",
      "avatar_url": "https://avatars.githubusercontent.com/u/37123614?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ethDreamer",
      "html_url": "https://github.com/ethDreamer",
      "followers_url": "https://api.github.com/users/ethDreamer/followers",
      "following_url": "https://api.github.com/users/ethDreamer/following{/other_user}",
      "gists_url": "https://api.github.com/users/ethDreamer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ethDreamer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ethDreamer/subscriptions",
      "organizations_url": "https://api.github.com/users/ethDreamer/orgs",
      "repos_url": "https://api.github.com/users/ethDreamer/repos",
      "events_url": "https://api.github.com/users/ethDreamer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ethDreamer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-02-20T03:25:10Z",
    "updated_at": "2021-02-20T03:25:10Z",
    "author_association": "COLLABORATOR",
    "body": "I'll check this out this weekend",
    "reactions": {
      "url": "https://api.github.com/repos/sigp/lighthouse/issues/comments/782549606/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/sigp/lighthouse/issues/comments/782975855",
    "html_url": "https://github.com/sigp/lighthouse/issues/2107#issuecomment-782975855",
    "issue_url": "https://api.github.com/repos/sigp/lighthouse/issues/2107",
    "id": 782975855,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc4Mjk3NTg1NQ==",
    "user": {
      "login": "ethDreamer",
      "id": 37123614,
      "node_id": "MDQ6VXNlcjM3MTIzNjE0",
      "avatar_url": "https://avatars.githubusercontent.com/u/37123614?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ethDreamer",
      "html_url": "https://github.com/ethDreamer",
      "followers_url": "https://api.github.com/users/ethDreamer/followers",
      "following_url": "https://api.github.com/users/ethDreamer/following{/other_user}",
      "gists_url": "https://api.github.com/users/ethDreamer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ethDreamer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ethDreamer/subscriptions",
      "organizations_url": "https://api.github.com/users/ethDreamer/orgs",
      "repos_url": "https://api.github.com/users/ethDreamer/repos",
      "events_url": "https://api.github.com/users/ethDreamer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ethDreamer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-02-22T01:13:15Z",
    "updated_at": "2021-02-22T06:37:47Z",
    "author_association": "COLLABORATOR",
    "body": "Okay so... may have bitten off more than I could chew in a weekend lol. But I made some good progress before getting blocked by unanswered questions.\r\n\r\n> Lighthouse nodes could do this by attempting to connect to newly discovered peers and if the peer instantly rejects the connection, we mark that peers as \"Disconnected\" in our DHT freeing up a space in the bucket for a more contactable peer.\r\n\r\nThis is what's giving me the most trouble. This implies a mixing across layers (discv5 & libp2p), not sure if that's necessarily bad.\r\n\r\nChecking for liveness upon discovery of a new node is discouraged in the [discv5 spec under 'Table Maintenance In Practice'](https://github.com/ethereum/devp2p/blob/master/discv5/discv5-theory.md):\r\n\r\n>Checking node liveness whenever a node is to be added to a bucket is impractical and creates a DoS vector.\r\n\r\nThis also appears to be discouraged in the [original Kademlia design](https://bedan.ir/modules/Translator/PDFs/AR52.pdf)\r\n\r\n> if a k-bucket is full, it requires sending a ping RPC every time a message is received from an unknown node in the bucket’s range. The ping checks to see if the least-recently used contact in the k-bucket is still valid. If it isn’t, the new contact replaces the old one. **Unfortunately, the algorithm as described would require a large number of network messages for these pings. To reduce traffic, Kademlia delays probing contacts until it has useful messages to send them.**\r\n\r\nI'm not totally sure if these warnings apply. But if they are valid and we are concerned about DoS attacks and too much traffic, we could take the suggestion in that last sentence to delay probing until the peer manager actually tries to probe, and on failure or disconnect we could at least mark the peers as disconnected in the discv5 DHT.\r\n\r\nI've created a PR to do that #2219 \r\n\r\nThere were other questions that came up while looking into this. When I originally read this algorithm, I expected that a newly joined node would build its local node table by looking up **itself**:\r\n\r\n```\r\n// algorithm described in 'Lookup' section at:\r\n// https://github.com/ethereum/devp2p/blob/master/discv5/discv5-theory.md\r\nlet alpha = 3;\r\nlet mut distance = 127;\r\nlet mut nodes = vec!(vec!(local_node));\r\n\r\nwhile let Some(targets) = nodes.pop() {\r\n    let mut query_results = vec![];\r\n    for target in targets {\r\n        &mut query_results.append(&mut target.findnode_log2distance(distance, local_node));\r\n    }\r\n    query_results.sort_by(|a, b| local_node.log2distance(a).cmp(&local_node.log2distance(b)));\r\n    query_results.truncate(alpha);\r\n    if let Some(best) = query_results.first() {\r\n        distance = local_node.log2distance(best) - 1;\r\n    }\r\n    if !query_results.is_empty() {\r\n        nodes.push(query_results);\r\n    }\r\n}\r\n```\r\n\r\nBut I don't see any logic like that (though maybe I missed it). It looks like (correct me if wrong) discovery is done by generating a random peer_id and calling findnode only on the local node table. So I'm not seeing anything that would motivate a node to connect with its nearest neighbors (unless it hits them randomly). In practice, this would leave the lower buckets in the node table much more sparse than they should be.\r\n\r\n@AgeManning ",
    "reactions": {
      "url": "https://api.github.com/repos/sigp/lighthouse/issues/comments/782975855/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/sigp/lighthouse/issues/comments/784158756",
    "html_url": "https://github.com/sigp/lighthouse/issues/2107#issuecomment-784158756",
    "issue_url": "https://api.github.com/repos/sigp/lighthouse/issues/2107",
    "id": 784158756,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc4NDE1ODc1Ng==",
    "user": {
      "login": "AgeManning",
      "id": 7454587,
      "node_id": "MDQ6VXNlcjc0NTQ1ODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7454587?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/AgeManning",
      "html_url": "https://github.com/AgeManning",
      "followers_url": "https://api.github.com/users/AgeManning/followers",
      "following_url": "https://api.github.com/users/AgeManning/following{/other_user}",
      "gists_url": "https://api.github.com/users/AgeManning/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/AgeManning/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/AgeManning/subscriptions",
      "organizations_url": "https://api.github.com/users/AgeManning/orgs",
      "repos_url": "https://api.github.com/users/AgeManning/repos",
      "events_url": "https://api.github.com/users/AgeManning/events{/privacy}",
      "received_events_url": "https://api.github.com/users/AgeManning/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-02-23T12:14:47Z",
    "updated_at": "2021-02-23T12:14:47Z",
    "author_association": "MEMBER",
    "body": "Hey!\r\nYeah, the issue itself is somewhat easy to implement, but understanding everything that is going on requires a bit of background knowledge, which it sounds like you dove into. \r\n\r\nLet me try and answer your questions sequentially. \r\n\r\n> This is what's giving me the most trouble. This implies a mixing across layers (discv5 & libp2p), not sure if that's necessarily bad.\r\n\r\nThis is a good point. I'm not sure about this either. In theory, we should keep the DHT as large as possible. In Eth2 we've added some keys to the ENR that help us identify if a node is part of our chain or not (ForkId). It is pretty much always the case that we end up mixing all the testnet DHTs together and I think now eth1 supports discv5 so probably some eth1 nodes also. So typically at any given time, our DHT will contain mainnet, pyrmont, older testnets and eth1 nodes all mixed in. I've added functionality (mainly for developers) that allows us to filter peers that are not on our network out, but its somewhat superfluous if other clients also don't implement it. The theory says its also best to keep many nodes anyway. So on the outset, we already have mixing of various nodes and types and protocols. \r\n\r\nIts true that this PR now explicitly judges a node not only by its udp (discv5) connectivity but also by its tcp (libp2p) connectivity. The standard discv5 spec indicates we should remove non-contactable peers, I think we extend the definition to include tcp connectivity. I think its fine to say a node that advertises a tcp port and a udp port, that we can connect via udp but not via tcp, that the node is not live. This will also filter out eth1 nodes that advertise tcp but are not contactable via the libp2p protocols we use. I think there is a trade off here, by filtering non-contactable nodes, we make discovery faster and more efficient at the cost of some security (a larger DHT is more secure). \r\n\r\n> Checking for liveness upon discovery of a new node is discouraged in the discv5 spec under 'Table Maintenance In Practice':\r\n\r\nI think this is talking about synchronous tests. We don't synchronously wait for a response before adding a peer to the table. We asynchronously test for liveness periodically. The actual ping/liveness checks in the current form can be optimized actually, I just haven't got around to it yet. Anyway, I think its fine to asynchronously test liveness via libp2p connections also. \r\n\r\n> I'm not totally sure if these warnings apply. But if they are valid and we are concerned about DoS attacks and too much traffic, we could take the suggestion in that last sentence to delay probing until the peer manager actually tries to probe, and on failure or disconnect we could at least mark the peers as disconnected in the discv5 DHT\r\n\r\nI think I have been careful about DoS attacks. The liveness checks can be optimized, but if you can think of a DoS vulnerability (I didn't fully understand the attack you are alluding to here), i'd be interested to understand further. \r\n\r\n> But I don't see any logic like that (though maybe I missed it). It looks like (correct me if wrong) discovery is done by generating a random peer_id and calling findnode only on the local node table. So I'm not seeing anything that would motivate a node to connect with its nearest neighbors (unless it hits them randomly). In practice, this would leave the lower buckets in the node table much more sparse than they should be.\r\n\r\nThe buckets are filled stochasticly. 50% of random nodes will lie in bucket 255, 25% in 254, 12% in 253 etc. The buckets closer to us are very sparse. Its true we could skew the distribution by searching for ourself which I think is suggested in the kad paper, and is probably an optimisation we should do. Currently we just randomly fill the buckets.  I dont think we have any reason to connect to our nearest neighbours (we are using discv5 as a discovery mechanism not a DHT-value lookup like kad at the moment, so we dont need to be near neighbours to fetch/distribute data). \r\n\r\nI think you are missing the entire logic of a discovery query. We do randomly select a node-id and search for peers closest to that, but we do some sophisticated searching in the local table and amongst our peers. We collect results from our peers and walk through those results and recursively send further FindNode requests in order of closest peers to our random ID, until we have either exhausted all the paths, have all the requests of the 16 closest peers returned, or we run out of time. See: https://github.com/sigp/discv5/blob/master/src/query_pool/peers/closest.rs\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/sigp/lighthouse/issues/comments/784158756/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/sigp/lighthouse/issues/comments/787539795",
    "html_url": "https://github.com/sigp/lighthouse/issues/2107#issuecomment-787539795",
    "issue_url": "https://api.github.com/repos/sigp/lighthouse/issues/2107",
    "id": 787539795,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc4NzUzOTc5NQ==",
    "user": {
      "login": "ethDreamer",
      "id": 37123614,
      "node_id": "MDQ6VXNlcjM3MTIzNjE0",
      "avatar_url": "https://avatars.githubusercontent.com/u/37123614?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ethDreamer",
      "html_url": "https://github.com/ethDreamer",
      "followers_url": "https://api.github.com/users/ethDreamer/followers",
      "following_url": "https://api.github.com/users/ethDreamer/following{/other_user}",
      "gists_url": "https://api.github.com/users/ethDreamer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ethDreamer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ethDreamer/subscriptions",
      "organizations_url": "https://api.github.com/users/ethDreamer/orgs",
      "repos_url": "https://api.github.com/users/ethDreamer/repos",
      "events_url": "https://api.github.com/users/ethDreamer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ethDreamer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-02-28T22:54:48Z",
    "updated_at": "2021-02-28T22:55:32Z",
    "author_association": "COLLABORATOR",
    "body": "@AgeManning \r\n> I think you're missing the entire logic of a discovery query\r\n\r\nahhh I see now thanks.\r\n\r\n> Anyway, I think its fine to asynchronously test liveness via libp2p connections also.\r\n\r\nOkay I *think* my latest update to #2219 should do that. There's a few points that need closer inspection though:\r\n\r\n1. I didn't have enough time this weekend to ensure that I inserted these things at the best place in the code\r\n2. If newly inserted peers are successfully dialed, they will become peers, not sure if that's an issue\r\n3. I didn't ensure that network_globals.connected_or_dialing_peers() < max_peers before dialing a newly inserted peer\r\n4. Should probably remove some of the debug lines before merge\r\n\r\nQuestions 2 & 3 suggest an alternative possibility where the newly inserted peers that are being dialed to test connectivity could be maintained in a separate pool than the peers being dialed for discovery and connection. Not sure if that should be done.\r\n\r\n> Its true we could skew the distribution by searching for ourself which I think is suggested in the kad paper, and is probably an optimisation we should do.\r\n\r\nIs that something that should be made a separate issue & PR or should we try to include that in #2219 before merging? If this ends up pruning a lot of the DHT, that optimization might be a good way to add more ENRs.\r\n\r\nI ran #2219 for a while with those debugging lines, it seemed to produce sane output:\r\n```\r\nFeb 28 17:11:56.301 DEBG Dialing discovered peer                 peer_id: 16Uiu2HAmFf1Af4q4vceVzuTHG8EvmZbq6PpUxmaUxv9UGKp4gi5o, service: libp2p\r\nFeb 28 17:11:56.301 DEBG Dialing discovered peer                 peer_id: 16Uiu2HAmJwxCRNMVUM2aGsRmRg4skVMnfEisWof73aAoaFMUAcAX, service: libp2p\r\nFeb 28 17:11:56.301 DEBG Dialing discovered peer                 peer_id: 16Uiu2HAm8d64bUaNGbHdmdk3BwAwbUrrqA1LsQXYGhY7YN1DiP8t, service: libp2p\r\nFeb 28 17:11:56.301 DEBG Dialing discovered peer                 peer_id: 16Uiu2HAmAn2GmcTUVHrtHCseoSuPaR5B3T1WdZ7hv6Pyipai3PVk, service: libp2p\r\nFeb 28 17:11:56.301 DEBG Dialing discovered peer                 peer_id: 16Uiu2HAmMnPKa3Fm9L4PP4HWUcLZEHsbxTEe7stperb42aGXX5xS, service: libp2p\r\nFeb 28 17:11:56.301 DEBG Dialing discovered peer                 peer_id: 16Uiu2HAmMJ8PNxnkshYkBEhFDGJBhSn1vtyWM7HBHyGadtgw5eDK, service: libp2p\r\nFeb 28 17:11:56.301 DEBG Dialing discovered peer                 peer_id: 16Uiu2HAmUSuxbmSEp2i1M7raYzdTQYExKKyRyVMnBfdn3uLqEKuB, service: libp2p\r\nFeb 28 17:11:56.301 DEBG Dialing discovered peer                 peer_id: 16Uiu2HAkyjDz9pAXRmkHQ3kFKU7swXNYW4sULbitAbGGiweKJq2n, service: libp2p\r\nFeb 28 17:11:56.301 DEBG Dialing discovered peer                 peer_id: 16Uiu2HAm1t4XUY6PMt2fqY4LLMkhfA1NDcZDPL84TfDRwZi9P86V, service: libp2p\r\nFeb 28 17:11:56.301 DEBG Dialing discovered peer                 peer_id: 16Uiu2HAmLZUNgfsA6kNkQYhcSvUtusGz7JisJUWKKBwMYWPQZa3X, service: libp2p\r\nFeb 28 17:11:56.360 DEBG Marking peer disconnected in DHT        peer_id: 16Uiu2HAm8d64bUaNGbHdmdk3BwAwbUrrqA1LsQXYGhY7YN1DiP8t, service: libp2p\r\nFeb 28 17:11:56.483 DEBG Marking peer disconnected in DHT        peer_id: 16Uiu2HAmMJ8PNxnkshYkBEhFDGJBhSn1vtyWM7HBHyGadtgw5eDK, service: libp2p\r\nFeb 28 17:11:56.508 DEBG Marking peer disconnected in DHT        peer_id: 16Uiu2HAmMnPKa3Fm9L4PP4HWUcLZEHsbxTEe7stperb42aGXX5xS, service: libp2p\r\nFeb 28 17:12:23.468 DEBG Dialing inserted peer                   peer_id: 16Uiu2HAmV7PhPjdtNsNS5wZaNX9ksoow6DcwwT5uhzVK4WHBNh6u, service: libp2p\r\nFeb 28 17:12:23.484 DEBG Dialing inserted peer                   peer_id: 16Uiu2HAmL5q8cCMQPzqdc48hBzCfQRKf1aJJQprZUWAdMgDKbLzQ, service: libp2p\r\nFeb 28 17:12:23.490 DEBG Dialing inserted peer                   peer_id: 16Uiu2HAmAk5JLqvzgzsn8dZnEFmsyUo1fRbL6imR6KcjsBc5utZh, service: libp2p\r\nFeb 28 17:12:23.500 DEBG Dialing inserted peer                   peer_id: 16Uiu2HAkuu1qxnFDJ4vqxCk9JKZiwcMLRwAAEFzu7d7BhqyQr3ru, service: libp2p\r\nFeb 28 17:12:23.525 DEBG Dialing inserted peer                   peer_id: 16Uiu2HAkvNvLnFejaESx3UgL8pgz9cXHoWKhrgrFY9wzQtUdpUFt, service: libp2p\r\nFeb 28 17:12:23.548 DEBG Dialing inserted peer                   peer_id: 16Uiu2HAmPfGNTDxoqtArzXD4T2MwbdWRxEZbB9GixeS9snBjEtGw, service: libp2p\r\nFeb 28 17:12:23.551 DEBG Dialing inserted peer                   peer_id: 16Uiu2HAm4Gksk9peFE5b9eYEhZfNTmKMw7MNsQhWJnHDb8ypZEip, service: libp2p\r\nFeb 28 17:12:23.558 DEBG Dialing inserted peer                   peer_id: 16Uiu2HAmSi5UufLLBpvh3ALNr2N6KmZD4pvNabgr9XaxSSu6YNC8, service: libp2p\r\nFeb 28 17:12:23.558 DEBG Dialing inserted peer                   peer_id: 16Uiu2HAkwuPL1vrDTEZLH4nJwvDsXVPYMPtJH1uXQyBvXMBKvJ16, service: libp2p\r\nFeb 28 17:12:23.559 DEBG Dialing inserted peer                   peer_id: 16Uiu2HAkxJK8ix5idKHFZdT1jn469vNu4XGu9BEF9vKPoCYCzrqw, service: libp2p\r\nFeb 28 17:12:23.559 DEBG Dialing inserted peer                   peer_id: 16Uiu2HAmVnUTSSPc3gHe2ofk5Ypk3s18VVDZDwR4USf8BY1HhQ1w, service: libp2p\r\nFeb 28 17:12:23.573 DEBG Dialing inserted peer                   peer_id: 16Uiu2HAmG9tavBPe8eGNJAJ1G1XBtUHkwgNw5zJGWzLJXBsqdrcr, service: libp2p\r\nFeb 28 17:12:23.658 DEBG Marking peer disconnected in DHT        peer_id: 16Uiu2HAmV7PhPjdtNsNS5wZaNX9ksoow6DcwwT5uhzVK4WHBNh6u, service: libp2p\r\nFeb 28 17:12:23.666 DEBG Marking peer disconnected in DHT        peer_id: 16Uiu2HAkvNvLnFejaESx3UgL8pgz9cXHoWKhrgrFY9wzQtUdpUFt, service: libp2p\r\nFeb 28 17:12:23.672 DEBG Dialing inserted peer                   peer_id: 16Uiu2HAm6pXBE6rFhdawociQnMceEQfheAar8pf994TXFxeRcHQc, service: libp2p\r\nFeb 28 17:12:23.675 DEBG Dialing inserted peer                   peer_id: 16Uiu2HAmEoeZcpZg4u4fhbo719dEwbUJFtkLkvhe55Rn43xrRVWj, service: libp2p\r\nFeb 28 17:12:23.681 DEBG Dialing inserted peer                   peer_id: 16Uiu2HAmQcjA3p9eAW8bd5aVeovKRcL3vA6U95BefHDaPz78x8yy, service: libp2p\r\nFeb 28 17:12:23.686 DEBG Marking peer disconnected in DHT        peer_id: 16Uiu2HAmAk5JLqvzgzsn8dZnEFmsyUo1fRbL6imR6KcjsBc5utZh, service: libp2p\r\nFeb 28 17:12:23.742 DEBG Marking peer disconnected in DHT        peer_id: 16Uiu2HAm4Gksk9peFE5b9eYEhZfNTmKMw7MNsQhWJnHDb8ypZEip, service: libp2p\r\nFeb 28 17:12:23.766 DEBG Marking peer disconnected in DHT        peer_id: 16Uiu2HAmVnUTSSPc3gHe2ofk5Ypk3s18VVDZDwR4USf8BY1HhQ1w, service: libp2p\r\nFeb 28 17:12:23.768 DEBG Marking peer disconnected in DHT        peer_id: 16Uiu2HAkxJK8ix5idKHFZdT1jn469vNu4XGu9BEF9vKPoCYCzrqw, service: libp2p\r\nFeb 28 17:12:23.776 DEBG Dialing inserted peer                   peer_id: 16Uiu2HAkuceVWHSV7JzNufMxgV39UkKUcyaootQzksQwJPWocB3X, service: libp2p\r\nFeb 28 17:12:23.789 DEBG Dialing inserted peer                   peer_id: 16Uiu2HAmHoStHVzQfsJrSvQjB592KHjLkjfN8wMvWcWucP7ZqtqA, service: libp2p\r\nFeb 28 17:12:23.822 DEBG Marking peer disconnected in DHT        peer_id: 16Uiu2HAmPfGNTDxoqtArzXD4T2MwbdWRxEZbB9GixeS9snBjEtGw, service: libp2p\r\nFeb 28 17:12:23.828 DEBG Marking peer disconnected in DHT        peer_id: 16Uiu2HAm6pXBE6rFhdawociQnMceEQfheAar8pf994TXFxeRcHQc, service: libp2p\r\nFeb 28 17:12:23.899 DEBG Marking peer disconnected in DHT        peer_id: 16Uiu2HAmEoeZcpZg4u4fhbo719dEwbUJFtkLkvhe55Rn43xrRVWj, service: libp2p\r\nFeb 28 17:12:23.972 DEBG Marking peer disconnected in DHT        peer_id: 16Uiu2HAmG9tavBPe8eGNJAJ1G1XBtUHkwgNw5zJGWzLJXBsqdrcr, service: libp2p\r\nFeb 28 17:12:24.342 DEBG Marking peer disconnected in DHT        peer_id: 16Uiu2HAkuceVWHSV7JzNufMxgV39UkKUcyaootQzksQwJPWocB3X, service: libp2p\r\nFeb 28 17:12:24.499 DEBG Dialing inserted peer                   peer_id: 16Uiu2HAm4L5iHSpR8VcUKW9m4WbcGAz45Ube1ZXRJFqSv1nrhr26, service: libp2p\r\nFeb 28 17:12:24.727 DEBG Dialing inserted peer                   peer_id: 16Uiu2HAm892Pa9kHqgCh5Gz9BgoSEiEpcxdoee5HtZ8Maw6TVSv5, service: libp2p\r\nFeb 28 17:12:24.750 DEBG Dialing inserted peer                   peer_id: 16Uiu2HAmVbhCAcDFNFSRpQY8HaTvfnGZmDu8GrkjL4ovEMQSHPDX, service: libp2p\r\nFeb 28 17:12:24.851 DEBG Dialing inserted peer                   peer_id: 16Uiu2HAmC62CppnStJpZM3sQZSebcCFDEDKS2He32UqTBPDBGSbK, service: libp2p\r\nFeb 28 17:12:25.040 DEBG Marking peer disconnected in DHT        peer_id: 16Uiu2HAmC62CppnStJpZM3sQZSebcCFDEDKS2He32UqTBPDBGSbK, service: libp2p\r\nFeb 28 17:12:26.806 DEBG Dialing inserted peer                   peer_id: 16Uiu2HAmCfFx2vn2fwqzr19WQY8B5Vt4UZvrxEQny9643hLJZT41, service: libp2p\r\nFeb 28 17:12:26.859 DEBG Dialing inserted peer                   peer_id: 16Uiu2HAm6RFXrSgTFNZdYHCrGkKsp1sz7Gt5r3694FqHYpTrJ4g3, service: libp2p\r\nFeb 28 17:12:26.876 DEBG Dialing inserted peer                   peer_id: 16Uiu2HAkwLtAoDus5AFVeRM8gA7h68vdjWWCujCnL8S8duD1EnB2, service: libp2p\r\nFeb 28 17:12:26.917 DEBG Dialing inserted peer                   peer_id: 16Uiu2HAkuWLo1HuECXuJ1CETHmtrjEr6p5qN6RhkhZoYm7J7yzJT, service: libp2p\r\nFeb 28 17:12:26.932 DEBG Dialing inserted peer                   peer_id: 16Uiu2HAmJoT1g3KzuMe43TfoJowP9RStP2ZmdqAHFUiAV8mjZ2Gx, service: libp2p\r\nFeb 28 17:12:26.953 DEBG Dialing inserted peer                   peer_id: 16Uiu2HAm6W9UHy7NfG3ARADREoaGpcJNBfsEMfUYqjvBYFk4MFV6, service: libp2p\r\nFeb 28 17:12:27.016 DEBG Marking peer disconnected in DHT        peer_id: 16Uiu2HAm6RFXrSgTFNZdYHCrGkKsp1sz7Gt5r3694FqHYpTrJ4g3, service: libp2p\r\nFeb 28 17:12:27.076 DEBG Marking peer disconnected in DHT        peer_id: 16Uiu2HAkwLtAoDus5AFVeRM8gA7h68vdjWWCujCnL8S8duD1EnB2, service: libp2p\r\nFeb 28 17:12:27.161 DEBG Marking peer disconnected in DHT        peer_id: 16Uiu2HAm6W9UHy7NfG3ARADREoaGpcJNBfsEMfUYqjvBYFk4MFV6, service: libp2p\r\nFeb 28 17:12:27.161 DEBG Dialing inserted peer                   peer_id: 16Uiu2HAmE5Fvue9krWag7kZt3xWAxNrAcXa6pQ5JmKJ3Atj6aHRc, service: libp2p\r\nFeb 28 17:12:27.161 DEBG Marking peer disconnected in DHT        peer_id: 16Uiu2HAkuWLo1HuECXuJ1CETHmtrjEr6p5qN6RhkhZoYm7J7yzJT, service: libp2p\r\nFeb 28 17:12:28.325 DEBG Dialing inserted peer                   peer_id: 16Uiu2HAmCgS1kxtyrdPHxZhfQJFis7s3dYPHzxThXGHDXBYctsQt, service: libp2p\r\nFeb 28 17:12:28.387 DEBG Marking peer disconnected in DHT        peer_id: 16Uiu2HAmCgS1kxtyrdPHxZhfQJFis7s3dYPHzxThXGHDXBYctsQt, service: libp2p\r\nFeb 28 17:12:28.569 DEBG Dialing inserted peer                   peer_id: 16Uiu2HAmSuhZA9GuUnJNzmwXrnsUybjQhR1HW8j6KV92mRhrEzwA, service: libp2p\r\nFeb 28 17:12:28.772 DEBG Marking peer disconnected in DHT        peer_id: 16Uiu2HAmSuhZA9GuUnJNzmwXrnsUybjQhR1HW8j6KV92mRhrEzwA, service: libp2p\r\nFeb 28 17:12:34.727 DEBG Marking peer disconnected in DHT        peer_id: 16Uiu2HAm892Pa9kHqgCh5Gz9BgoSEiEpcxdoee5HtZ8Maw6TVSv5, service: libp2p\r\nFeb 28 17:12:39.627 DEBG Dialing inserted peer                   peer_id: 16Uiu2HAmKMUSDVHUak6PrjTRstYDqgpFL3BaY81N9wvMPUrPoh6P, service: libp2p\r\nFeb 28 17:12:41.983 DEBG Dialing inserted peer                   peer_id: 16Uiu2HAmPgBuKhL2EM46u357ZGFqcE3243t2sduvc5RrzQ4sVmwR, service: libp2p\r\nFeb 28 17:12:41.988 DEBG Marking peer disconnected in DHT        peer_id: 16Uiu2HAmPgBuKhL2EM46u357ZGFqcE3243t2sduvc5RrzQ4sVmwR, service: libp2p\r\nFeb 28 17:12:49.628 DEBG Marking peer disconnected in DHT        peer_id: 16Uiu2HAmKMUSDVHUak6PrjTRstYDqgpFL3BaY81N9wvMPUrPoh6P, service: libp2p\r\nFeb 28 17:12:54.191 DEBG Dialing inserted peer                   peer_id: 16Uiu2HAmMnabXZNaqw3TAJ92SBU5rY3asHtS4P74wM1gQbXUShdz, service: libp2p\r\nFeb 28 17:13:27.748 DEBG Dialing discovered peer                 peer_id: 16Uiu2HAmKs4cCwGkkCEpS8oeqGnxPGYBbZZr1xsXeYA4LF47aaje, service: libp2p\r\nFeb 28 17:13:27.748 DEBG Dialing discovered peer                 peer_id: 16Uiu2HAmNmntGDGu6fFY1mu7kQU9WXQeK2KfZoLi9d8pxuDe5TPc, service: libp2p\r\nFeb 28 17:13:27.748 DEBG Dialing discovered peer                 peer_id: 16Uiu2HAmTYfjz8Bcpkjma38fLgiVuQ9x27q1gBtrMbefFoLJimQ5, service: libp2p\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/sigp/lighthouse/issues/comments/787539795/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
