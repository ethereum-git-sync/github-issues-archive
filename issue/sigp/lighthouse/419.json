{
  "url": "https://api.github.com/repos/sigp/lighthouse/issues/419",
  "repository_url": "https://api.github.com/repos/sigp/lighthouse",
  "labels_url": "https://api.github.com/repos/sigp/lighthouse/issues/419/labels{/name}",
  "comments_url": "https://api.github.com/repos/sigp/lighthouse/issues/419/comments",
  "events_url": "https://api.github.com/repos/sigp/lighthouse/issues/419/events",
  "html_url": "https://github.com/sigp/lighthouse/issues/419",
  "id": 462575012,
  "node_id": "MDU6SXNzdWU0NjI1NzUwMTI=",
  "number": 419,
  "title": "BlockRootsIterator skips the block at the start slot",
  "user": {
    "login": "michaelsproul",
    "id": 4452260,
    "node_id": "MDQ6VXNlcjQ0NTIyNjA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4452260?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/michaelsproul",
    "html_url": "https://github.com/michaelsproul",
    "followers_url": "https://api.github.com/users/michaelsproul/followers",
    "following_url": "https://api.github.com/users/michaelsproul/following{/other_user}",
    "gists_url": "https://api.github.com/users/michaelsproul/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/michaelsproul/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/michaelsproul/subscriptions",
    "organizations_url": "https://api.github.com/users/michaelsproul/orgs",
    "repos_url": "https://api.github.com/users/michaelsproul/repos",
    "events_url": "https://api.github.com/users/michaelsproul/events{/privacy}",
    "received_events_url": "https://api.github.com/users/michaelsproul/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 1141293876,
      "node_id": "MDU6TGFiZWwxMTQxMjkzODc2",
      "url": "https://api.github.com/repos/sigp/lighthouse/labels/work-started",
      "name": "work-started",
      "color": "e072ab",
      "default": false,
      "description": ""
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 4,
  "created_at": "2019-07-01T08:12:56Z",
  "updated_at": "2019-08-22T06:44:22Z",
  "closed_at": "2019-08-22T06:44:22Z",
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "## Description\r\n\r\nThe `BlockRootsIterator` iterates backwards over all blocks from a given slot, but doesn't ever return the block at the `start_slot` which the iterator is instantiated with.\r\n\r\n## Present Behaviour\r\n\r\nIterates backwards over blocks from `start_slot - 1` (inclusive)\r\n\r\n## Expected Behaviour\r\n\r\nIterates backwards over blocks from `start_slot` (inclusive)\r\n\r\n## Steps to resolve\r\n\r\nI think we should either change the behaviour so that the block at the `start_slot` is included, or we should document that the iterator behaves as it does.\r\n\r\nI tried changing the impl of `Iterator` so that it decrements `self.slot` _after_ retrieving the block root, but this broke a bunch of things in the reduced-tree fork choice, so I didn't push through with it.",
  "closed_by": {
    "login": "paulhauner",
    "id": 6660660,
    "node_id": "MDQ6VXNlcjY2NjA2NjA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6660660?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/paulhauner",
    "html_url": "https://github.com/paulhauner",
    "followers_url": "https://api.github.com/users/paulhauner/followers",
    "following_url": "https://api.github.com/users/paulhauner/following{/other_user}",
    "gists_url": "https://api.github.com/users/paulhauner/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/paulhauner/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/paulhauner/subscriptions",
    "organizations_url": "https://api.github.com/users/paulhauner/orgs",
    "repos_url": "https://api.github.com/users/paulhauner/repos",
    "events_url": "https://api.github.com/users/paulhauner/events{/privacy}",
    "received_events_url": "https://api.github.com/users/paulhauner/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/sigp/lighthouse/issues/419/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/sigp/lighthouse/issues/419/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/sigp/lighthouse/issues/comments/508337763",
    "html_url": "https://github.com/sigp/lighthouse/issues/419#issuecomment-508337763",
    "issue_url": "https://api.github.com/repos/sigp/lighthouse/issues/419",
    "id": 508337763,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUwODMzNzc2Mw==",
    "user": {
      "login": "paulhauner",
      "id": 6660660,
      "node_id": "MDQ6VXNlcjY2NjA2NjA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6660660?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/paulhauner",
      "html_url": "https://github.com/paulhauner",
      "followers_url": "https://api.github.com/users/paulhauner/followers",
      "following_url": "https://api.github.com/users/paulhauner/following{/other_user}",
      "gists_url": "https://api.github.com/users/paulhauner/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/paulhauner/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/paulhauner/subscriptions",
      "organizations_url": "https://api.github.com/users/paulhauner/orgs",
      "repos_url": "https://api.github.com/users/paulhauner/repos",
      "events_url": "https://api.github.com/users/paulhauner/events{/privacy}",
      "received_events_url": "https://api.github.com/users/paulhauner/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-07-04T04:55:30Z",
    "updated_at": "2019-07-04T04:55:30Z",
    "author_association": "MEMBER",
    "body": "Good pick up, thanks for raising this. I've been meaning to explain my rationale here.\r\n\r\nThe root at `state.slot` is a little tricky. Firstly, we can never get it from `state.block_roots` because it only gets included when `process_slot` transitions into the next slot.\r\n\r\nThere is the possibility that if `state.beacon_block_header.slot == state.slot` we could determine the beacon_block root, however that means running `tree_hash(state)` and `tree_hash(state.beacon_block_header)`.\r\n\r\nTherefore, I feel that it's not worth returning the `state.slot` root because it's potentially going to do a couple of very expensive operations. The way the iterator works means that, in some cases, you'll have to do these expensive hashes _even if_ you don't want the first block root (i.e., you're skipping past it to get a prior block).",
    "reactions": {
      "url": "https://api.github.com/repos/sigp/lighthouse/issues/comments/508337763/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/sigp/lighthouse/issues/comments/509474677",
    "html_url": "https://github.com/sigp/lighthouse/issues/419#issuecomment-509474677",
    "issue_url": "https://api.github.com/repos/sigp/lighthouse/issues/419",
    "id": 509474677,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUwOTQ3NDY3Nw==",
    "user": {
      "login": "kirk-baird",
      "id": 27878213,
      "node_id": "MDQ6VXNlcjI3ODc4MjEz",
      "avatar_url": "https://avatars.githubusercontent.com/u/27878213?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kirk-baird",
      "html_url": "https://github.com/kirk-baird",
      "followers_url": "https://api.github.com/users/kirk-baird/followers",
      "following_url": "https://api.github.com/users/kirk-baird/following{/other_user}",
      "gists_url": "https://api.github.com/users/kirk-baird/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kirk-baird/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kirk-baird/subscriptions",
      "organizations_url": "https://api.github.com/users/kirk-baird/orgs",
      "repos_url": "https://api.github.com/users/kirk-baird/repos",
      "events_url": "https://api.github.com/users/kirk-baird/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kirk-baird/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-07-09T03:40:43Z",
    "updated_at": "2019-07-09T03:42:13Z",
    "author_association": "MEMBER",
    "body": "This may cause issues when trying to target slots that are not the current.\r\nFor example:\r\n`current_slot = 100` \r\n`target_slot = 50`\r\n`BlockRootsIterator::new(target_slot)` will start counting down from `49` and skip the `target_slot`\r\n\r\nProposing a solution to:\r\nIterate backwards from `start_slot` (inclusive)\r\nIf `start_slot == state.current_slot -> return None`\r\n\r\nThis will involve putting `self.slot -= 1` at the end of `next()` rather than the beginning.\r\nAdjustments will need to be made to existing calls to `BlockRootsIterator::new(target_slot)` and `BlockRootsIterator::owned(target_slot)` to `target_slot - 1`\r\n\r\nSimilarly for `StateRootsIterator`",
    "reactions": {
      "url": "https://api.github.com/repos/sigp/lighthouse/issues/comments/509474677/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/sigp/lighthouse/issues/comments/509514305",
    "html_url": "https://github.com/sigp/lighthouse/issues/419#issuecomment-509514305",
    "issue_url": "https://api.github.com/repos/sigp/lighthouse/issues/419",
    "id": 509514305,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUwOTUxNDMwNQ==",
    "user": {
      "login": "paulhauner",
      "id": 6660660,
      "node_id": "MDQ6VXNlcjY2NjA2NjA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6660660?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/paulhauner",
      "html_url": "https://github.com/paulhauner",
      "followers_url": "https://api.github.com/users/paulhauner/followers",
      "following_url": "https://api.github.com/users/paulhauner/following{/other_user}",
      "gists_url": "https://api.github.com/users/paulhauner/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/paulhauner/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/paulhauner/subscriptions",
      "organizations_url": "https://api.github.com/users/paulhauner/orgs",
      "repos_url": "https://api.github.com/users/paulhauner/repos",
      "events_url": "https://api.github.com/users/paulhauner/events{/privacy}",
      "received_events_url": "https://api.github.com/users/paulhauner/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-07-09T06:53:37Z",
    "updated_at": "2019-07-09T06:53:43Z",
    "author_association": "MEMBER",
    "body": "You're right, it's unnecessarily strict. Good catch!\r\n\r\nLooking forward to seeing the fix in your PR :)",
    "reactions": {
      "url": "https://api.github.com/repos/sigp/lighthouse/issues/comments/509514305/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/sigp/lighthouse/issues/comments/523772077",
    "html_url": "https://github.com/sigp/lighthouse/issues/419#issuecomment-523772077",
    "issue_url": "https://api.github.com/repos/sigp/lighthouse/issues/419",
    "id": 523772077,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUyMzc3MjA3Nw==",
    "user": {
      "login": "paulhauner",
      "id": 6660660,
      "node_id": "MDQ6VXNlcjY2NjA2NjA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6660660?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/paulhauner",
      "html_url": "https://github.com/paulhauner",
      "followers_url": "https://api.github.com/users/paulhauner/followers",
      "following_url": "https://api.github.com/users/paulhauner/following{/other_user}",
      "gists_url": "https://api.github.com/users/paulhauner/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/paulhauner/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/paulhauner/subscriptions",
      "organizations_url": "https://api.github.com/users/paulhauner/orgs",
      "repos_url": "https://api.github.com/users/paulhauner/repos",
      "events_url": "https://api.github.com/users/paulhauner/events{/privacy}",
      "received_events_url": "https://api.github.com/users/paulhauner/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-08-22T06:44:22Z",
    "updated_at": "2019-08-22T06:44:22Z",
    "author_association": "MEMBER",
    "body": "Solved in recent PRs.",
    "reactions": {
      "url": "https://api.github.com/repos/sigp/lighthouse/issues/comments/523772077/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
