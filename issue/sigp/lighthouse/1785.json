{
  "url": "https://api.github.com/repos/sigp/lighthouse/issues/1785",
  "repository_url": "https://api.github.com/repos/sigp/lighthouse",
  "labels_url": "https://api.github.com/repos/sigp/lighthouse/issues/1785/labels{/name}",
  "comments_url": "https://api.github.com/repos/sigp/lighthouse/issues/1785/comments",
  "events_url": "https://api.github.com/repos/sigp/lighthouse/issues/1785/events",
  "html_url": "https://github.com/sigp/lighthouse/issues/1785",
  "id": 724294684,
  "node_id": "MDU6SXNzdWU3MjQyOTQ2ODQ=",
  "number": 1785,
  "title": "Remove head tracker in favour of fork choice",
  "user": {
    "login": "michaelsproul",
    "id": 4452260,
    "node_id": "MDQ6VXNlcjQ0NTIyNjA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4452260?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/michaelsproul",
    "html_url": "https://github.com/michaelsproul",
    "followers_url": "https://api.github.com/users/michaelsproul/followers",
    "following_url": "https://api.github.com/users/michaelsproul/following{/other_user}",
    "gists_url": "https://api.github.com/users/michaelsproul/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/michaelsproul/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/michaelsproul/subscriptions",
    "organizations_url": "https://api.github.com/users/michaelsproul/orgs",
    "repos_url": "https://api.github.com/users/michaelsproul/repos",
    "events_url": "https://api.github.com/users/michaelsproul/events{/privacy}",
    "received_events_url": "https://api.github.com/users/michaelsproul/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 2034355093,
      "node_id": "MDU6TGFiZWwyMDM0MzU1MDkz",
      "url": "https://api.github.com/repos/sigp/lighthouse/labels/consensus",
      "name": "consensus",
      "color": "5e59bf",
      "default": false,
      "description": "An issue/PR that touches consensus code, such as state_processing or block verification."
    },
    {
      "id": 2490305065,
      "node_id": "MDU6TGFiZWwyNDkwMzA1MDY1",
      "url": "https://api.github.com/repos/sigp/lighthouse/labels/A1",
      "name": "A1",
      "color": "223184",
      "default": false,
      "description": ""
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 1,
  "created_at": "2020-10-19T06:05:40Z",
  "updated_at": "2024-01-18T13:29:34Z",
  "closed_at": null,
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "## Description\r\n\r\nThe head tracker contains redundant information that is already present in the fork choice block DAG. This is undesirable as it means there isn't just \"one source of truth\", and the two data structures need to be kept in sync across concurrent executions, which is highly non-trivial (see #1771 for more)\r\n\r\n## Steps to resolve\r\n\r\n* Write code to derive the list of heads from fork choice\r\n* Remove the `HeadTracker` struct from the beacon chain\r\n* Port the migration code to use the head data from fork choice\r\n* Work out how to reconcile the pruning of fork choice with pruning of the database. Possible approaches:\r\n     * Mark blocks deleted from disk as `deleted` in fork choice, until they are cleaned up by fork choice's own pruning mechanism\r\n     * Mirror the pruning of the on-disk database in fork choice (i.e. prune the two structures together)\r\n",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/sigp/lighthouse/issues/1785/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/sigp/lighthouse/issues/1785/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/sigp/lighthouse/issues/comments/1898483553",
    "html_url": "https://github.com/sigp/lighthouse/issues/1785#issuecomment-1898483553",
    "issue_url": "https://api.github.com/repos/sigp/lighthouse/issues/1785",
    "id": 1898483553,
    "node_id": "IC_kwDOCFeAzc5xKI9h",
    "user": {
      "login": "dapplion",
      "id": 35266934,
      "node_id": "MDQ6VXNlcjM1MjY2OTM0",
      "avatar_url": "https://avatars.githubusercontent.com/u/35266934?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dapplion",
      "html_url": "https://github.com/dapplion",
      "followers_url": "https://api.github.com/users/dapplion/followers",
      "following_url": "https://api.github.com/users/dapplion/following{/other_user}",
      "gists_url": "https://api.github.com/users/dapplion/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dapplion/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dapplion/subscriptions",
      "organizations_url": "https://api.github.com/users/dapplion/orgs",
      "repos_url": "https://api.github.com/users/dapplion/repos",
      "events_url": "https://api.github.com/users/dapplion/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dapplion/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2024-01-18T13:29:33Z",
    "updated_at": "2024-01-18T13:29:33Z",
    "author_association": "CONTRIBUTOR",
    "body": "Some notes for non-michael readers and myself\r\n\r\nHeadTracker is used for two things currently:\r\n- As optimisation to query heads quickly to serve API requests. Premature optimization IMO, or could be integrated into the fork-choice and does not require to be persisted on disk.\r\n- To optimize pruning hot data, more below\r\n\r\n## How to prune hot data\r\n\r\nBlocks and states are persisted in the hot DB by root. To figure out what to prune you need to build a block DAG and compute what branches are non-viable / abandoned. Some ways to do it:\r\n\r\n1. **\"Brute-force\"**: stream all items in the DB's hot block column, build graph, prune.\r\n2. **With a HeadTracker**: helps with tip discovery, then iterate each head chain to figure out if it's viable or not. With the current `RootsIterator` requires to load a full BeaconState every 8192 slots.\r\n3. **With fork-choice prune output**: fork-choice prune can return a Vec of pruned proto-nodes, from which you can build a partial graph of abandoned chains, and prune.\r\n\r\nThe pruning routine must be crash safe, options 2 and 3 risk \"forgetting\" data or causing inconsistencies like https://github.com/sigp/lighthouse/issues/4773 if not implemented properly.\r\n\r\n## Brute-force\r\n\r\nThe current implementation uses the `RootsIterator` which loads a full BeaconState every 8192 slots. With a state of size of 100MB (likely more represented in memory) that's 12 KB per slot. Blinded beacon blocks are ~50KB? so that's not _too_ far off. I don't see any immediate issues with such approach besides the others being more optimal. Even in the worse case, pruning runs on a background thread so streaming some hundred MB from the DB in the case of long non-finality does not sound too bad. Thoughts?\r\n\r\n## Using fork-choice\r\n\r\nUsing the fork-choice for pruning without holding its lock for too long may require persisting _some_ prune helper data to the database. The desired order of operations is:\r\n\r\n1. Aquire fork-choice write lock\r\n2. Prune fork-choice\r\n3. Prune database\r\n4. Release fork-choice write lock\r\n5. Persist pruned fork-choice\r\n\r\nIf the lock is not hold for this long and the node crashes during 3 then you lose track of pruned branches that will never be pruned. Another approach is to:\r\n\r\n1. Aquire fork-choice write lock\r\n2. Prune fork-choice\r\n3. Persist pruning summary (i.e. pruned heads)\r\n4. Release fork-choice write lock\r\n\r\nThen in a background thread, and in an atomic operation\r\n\r\n- Prune database\r\n- Clear pruning summary\r\n\r\nHere you are sort of storing a HeadTracker but only for prune data that is decoupled from the fork-choice.\r\n\r\n## HeadTracker but eagerly persisted\r\n\r\nWe can achieve better atomicity in the HeadTracker by persisting each head to the DB individually in separate keys. Heads are inserted in the HeadTracker in the existing atomic transaction during block import. Heads are pruned during the atomic operation of hot DB pruning. No action is necessary on shutdown. The pruning routine can stream all keys in that column range to iterate the HeadTracker.\r\n\r\nThis option allows to keep the pruning logic the same but remove the potential inconsistencies on shutdown.\r\n\r\n\r\n\r\n\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/sigp/lighthouse/issues/comments/1898483553/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
