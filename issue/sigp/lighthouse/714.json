{
  "url": "https://api.github.com/repos/sigp/lighthouse/issues/714",
  "repository_url": "https://api.github.com/repos/sigp/lighthouse",
  "labels_url": "https://api.github.com/repos/sigp/lighthouse/issues/714/labels{/name}",
  "comments_url": "https://api.github.com/repos/sigp/lighthouse/issues/714/comments",
  "events_url": "https://api.github.com/repos/sigp/lighthouse/issues/714/events",
  "html_url": "https://github.com/sigp/lighthouse/issues/714",
  "id": 536701119,
  "node_id": "MDU6SXNzdWU1MzY3MDExMTk=",
  "number": 714,
  "title": "Validator client sync check is incompatible with recent genesis local testnets",
  "user": {
    "login": "michaelsproul",
    "id": 4452260,
    "node_id": "MDQ6VXNlcjQ0NTIyNjA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4452260?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/michaelsproul",
    "html_url": "https://github.com/michaelsproul",
    "followers_url": "https://api.github.com/users/michaelsproul/followers",
    "following_url": "https://api.github.com/users/michaelsproul/following{/other_user}",
    "gists_url": "https://api.github.com/users/michaelsproul/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/michaelsproul/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/michaelsproul/subscriptions",
    "organizations_url": "https://api.github.com/users/michaelsproul/orgs",
    "repos_url": "https://api.github.com/users/michaelsproul/repos",
    "events_url": "https://api.github.com/users/michaelsproul/events{/privacy}",
    "received_events_url": "https://api.github.com/users/michaelsproul/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 2,
  "created_at": "2019-12-12T01:17:00Z",
  "updated_at": "2020-02-04T01:43:05Z",
  "closed_at": "2020-02-04T01:43:05Z",
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "In #656 a check was introduced in the validator client to ensure that the beacon node is actually synced before producing blocks and attestations. This is definitely a good idea, but the current implementation is a bit too restrictive in the case of a \"recent genesis\" testnet.\r\n\r\nhttps://github.com/sigp/lighthouse/blob/8a62f3f456633a42c53c0191ead6aac2d3944af0/validator_client/src/duties_service.rs#L408-L414\r\n\r\nIf we've just booted a node, and the recent genesis is more than 2 epochs ago, then the validator client will be stuck thinking the beacon node is still attempting to sync, and the beacon node will be stuck trying to sync non-existent blocks.\r\n\r\nThis could also happen in theory on a real network -- if nobody proposed any blocks for those first two epochs -- but it's unlikely.\r\n\r\nI'm not sure of the best way to address this. Currently I've added in an extra check `&& beacon_head_epoch > 0`, but it's less than ideal (we don't want validator clients to _always_ produce blocks and attestations for the genesis epoch, because they may be still syncing).\r\n\r\nAnother option might be for the VC to try and detect \"real\" syncing progress, but this seems fragile and likely to break. Or it could have a timeout, and start producing if it doesn't see any progress from the node after that timeout... also quite fragile.\r\n\r\nInterested to hear your thoughts on this @paulhauner.",
  "closed_by": {
    "login": "paulhauner",
    "id": 6660660,
    "node_id": "MDQ6VXNlcjY2NjA2NjA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6660660?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/paulhauner",
    "html_url": "https://github.com/paulhauner",
    "followers_url": "https://api.github.com/users/paulhauner/followers",
    "following_url": "https://api.github.com/users/paulhauner/following{/other_user}",
    "gists_url": "https://api.github.com/users/paulhauner/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/paulhauner/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/paulhauner/subscriptions",
    "organizations_url": "https://api.github.com/users/paulhauner/orgs",
    "repos_url": "https://api.github.com/users/paulhauner/repos",
    "events_url": "https://api.github.com/users/paulhauner/events{/privacy}",
    "received_events_url": "https://api.github.com/users/paulhauner/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/sigp/lighthouse/issues/714/reactions",
    "total_count": 1,
    "+1": 1,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/sigp/lighthouse/issues/714/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/sigp/lighthouse/issues/comments/564807542",
    "html_url": "https://github.com/sigp/lighthouse/issues/714#issuecomment-564807542",
    "issue_url": "https://api.github.com/repos/sigp/lighthouse/issues/714",
    "id": 564807542,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU2NDgwNzU0Mg==",
    "user": {
      "login": "paulhauner",
      "id": 6660660,
      "node_id": "MDQ6VXNlcjY2NjA2NjA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6660660?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/paulhauner",
      "html_url": "https://github.com/paulhauner",
      "followers_url": "https://api.github.com/users/paulhauner/followers",
      "following_url": "https://api.github.com/users/paulhauner/following{/other_user}",
      "gists_url": "https://api.github.com/users/paulhauner/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/paulhauner/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/paulhauner/subscriptions",
      "organizations_url": "https://api.github.com/users/paulhauner/orgs",
      "repos_url": "https://api.github.com/users/paulhauner/repos",
      "events_url": "https://api.github.com/users/paulhauner/events{/privacy}",
      "received_events_url": "https://api.github.com/users/paulhauner/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-12-12T01:24:08Z",
    "updated_at": "2019-12-12T01:24:08Z",
    "author_association": "MEMBER",
    "body": "Oh yeah, this is interesting. Seems like a recurring case where things that are reasonable to do in testing are not reasonable for production.\r\n\r\nMy first thought is to add a `--allow-unsynced` flag (and perhaps set it by default whenever the `testnet` subcommand is used).\r\n\r\nWe do have the problem here were if mainnet gets more than 1 epoch behind we simply stop producing blocks (unless we run with the flag). I'm not sure I have the headspace to completely solve this problem at the moment, though.\r\n\r\nI'd be tempted to add the flag for now, then make a more sophisticated solution later (e.g., one that can make some determination that it's had enough waiting).\r\n\r\nThat being said, if you feel like getting into this and solving it once-and-for-all, please don't let me stop you!",
    "reactions": {
      "url": "https://api.github.com/repos/sigp/lighthouse/issues/comments/564807542/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/sigp/lighthouse/issues/comments/564973037",
    "html_url": "https://github.com/sigp/lighthouse/issues/714#issuecomment-564973037",
    "issue_url": "https://api.github.com/repos/sigp/lighthouse/issues/714",
    "id": 564973037,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU2NDk3MzAzNw==",
    "user": {
      "login": "AgeManning",
      "id": 7454587,
      "node_id": "MDQ6VXNlcjc0NTQ1ODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7454587?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/AgeManning",
      "html_url": "https://github.com/AgeManning",
      "followers_url": "https://api.github.com/users/AgeManning/followers",
      "following_url": "https://api.github.com/users/AgeManning/following{/other_user}",
      "gists_url": "https://api.github.com/users/AgeManning/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/AgeManning/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/AgeManning/subscriptions",
      "organizations_url": "https://api.github.com/users/AgeManning/orgs",
      "repos_url": "https://api.github.com/users/AgeManning/repos",
      "events_url": "https://api.github.com/users/AgeManning/events{/privacy}",
      "received_events_url": "https://api.github.com/users/AgeManning/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-12-12T11:43:33Z",
    "updated_at": "2019-12-12T11:44:13Z",
    "author_association": "MEMBER",
    "body": "#720 May help with this. \r\nThe sync manager knows about whether it's synced or not, and it doesn't do it based on current block slot. It's based on our current blocks relative to all peers we know about. If all peers connected to us, also only have the current head_slot, we are considered synced. \r\n\r\nIn a single node situation, that node is considered stalled, and perhaps we want to produce blocks. Perhaps using the sync manager's definition of sync state solves this",
    "reactions": {
      "url": "https://api.github.com/repos/sigp/lighthouse/issues/comments/564973037/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
