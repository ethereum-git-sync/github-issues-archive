{
  "url": "https://api.github.com/repos/sigp/lighthouse/issues/4972",
  "repository_url": "https://api.github.com/repos/sigp/lighthouse",
  "labels_url": "https://api.github.com/repos/sigp/lighthouse/issues/4972/labels{/name}",
  "comments_url": "https://api.github.com/repos/sigp/lighthouse/issues/4972/comments",
  "events_url": "https://api.github.com/repos/sigp/lighthouse/issues/4972/events",
  "html_url": "https://github.com/sigp/lighthouse/issues/4972",
  "id": 2022782176,
  "node_id": "I_kwDOCFeAzc54kTTg",
  "number": 4972,
  "title": "Investigate `UnknownTargetRoot` slasher errors",
  "user": {
    "login": "michaelsproul",
    "id": 4452260,
    "node_id": "MDQ6VXNlcjQ0NTIyNjA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4452260?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/michaelsproul",
    "html_url": "https://github.com/michaelsproul",
    "followers_url": "https://api.github.com/users/michaelsproul/followers",
    "following_url": "https://api.github.com/users/michaelsproul/following{/other_user}",
    "gists_url": "https://api.github.com/users/michaelsproul/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/michaelsproul/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/michaelsproul/subscriptions",
    "organizations_url": "https://api.github.com/users/michaelsproul/orgs",
    "repos_url": "https://api.github.com/users/michaelsproul/repos",
    "events_url": "https://api.github.com/users/michaelsproul/events{/privacy}",
    "received_events_url": "https://api.github.com/users/michaelsproul/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 985647284,
      "node_id": "MDU6TGFiZWw5ODU2NDcyODQ=",
      "url": "https://api.github.com/repos/sigp/lighthouse/labels/enhancement",
      "name": "enhancement",
      "color": "a2eeef",
      "default": true,
      "description": "New feature or request"
    },
    {
      "id": 2336802021,
      "node_id": "MDU6TGFiZWwyMzM2ODAyMDIx",
      "url": "https://api.github.com/repos/sigp/lighthouse/labels/UX-and-logs",
      "name": "UX-and-logs",
      "color": "DB9046",
      "default": false,
      "description": ""
    },
    {
      "id": 2602136164,
      "node_id": "MDU6TGFiZWwyNjAyMTM2MTY0",
      "url": "https://api.github.com/repos/sigp/lighthouse/labels/slasher",
      "name": "slasher",
      "color": "FAD722",
      "default": false,
      "description": ""
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 3,
  "created_at": "2023-12-04T00:05:09Z",
  "updated_at": "2023-12-13T01:57:13Z",
  "closed_at": null,
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "## Description\r\n\r\nWe have quite a few minor errors on the slasher like:\r\n\r\n> Dec 03 23:37:38.417 DEBG Unable to obtain indexed form of attestation for slasher, error: UnknownTargetRoot(0x72eff6e4116a060b103f0731aa7590c96a3b8cd23441144aa6d9d214019e04d9), attestation_root: 0x2aa4ab96fd4d42386c23a5988f9d6955b98edc9d804026f451a783c5b3675d8f, service: beacon\r\n\r\nI think this error means:\r\n\r\n- We processed an attestation for which we _did_ know the head block (`beacon_block_root`).\r\n- However, we _didn't_ know the `target_root`. This is an invalid type of attestation, as it implies the target isn't an ancestor of the head.\r\n- Because the target is unknown, the beacon node fails to load the beacon state for the target block, which the slasher needs to verify the signature. Therefore the attestation gets discarded without being checked for slashability (a potential blind spot!).\r\n\r\n## Steps to resolve\r\n\r\n1. Confirm that this is what's happening, e.g. invalid attestations where the `beacon_block_root` does not descend from the `target_root`.\r\n2. Decide on a mitigation strategy:\r\n   a) Use the attestation's head state to verify the signatures when the target block is unknown. This should not result in any errors, as attestations are only sent for processing once their head block is known (otherwise they get requeued).\r\n   b) Add a different queue for the slasher which waits for the target root to be known. From the logs it seems that many of the target blocks are actually valid (and canonical), so it might just be a race where a peer attests `head=N - 1` and `target=N` at the start of slot `N` before we've had time to import block `N`.\r\n3. Work out which peers are sending these attestations, as it probably indicates a bug in some client software, or (less likely) someone experimenting with attack strategies.\r\n\r\nI think I prefer `2a` for its simplicity. We just have to make sure we don't get DoS'd by state loads, as attestation head states likely don't lie on epoch boundaries and are more expensive to fetch than target states in general. Tree states will help with this ;)\r\n\r\n## Version\r\n\r\nLighthouse v4.5.0\r\n",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/sigp/lighthouse/issues/4972/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/sigp/lighthouse/issues/4972/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/sigp/lighthouse/issues/comments/1843825065",
    "html_url": "https://github.com/sigp/lighthouse/issues/4972#issuecomment-1843825065",
    "issue_url": "https://api.github.com/repos/sigp/lighthouse/issues/4972",
    "id": 1843825065,
    "node_id": "IC_kwDOCFeAzc5t5omp",
    "user": {
      "login": "michaelsproul",
      "id": 4452260,
      "node_id": "MDQ6VXNlcjQ0NTIyNjA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4452260?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/michaelsproul",
      "html_url": "https://github.com/michaelsproul",
      "followers_url": "https://api.github.com/users/michaelsproul/followers",
      "following_url": "https://api.github.com/users/michaelsproul/following{/other_user}",
      "gists_url": "https://api.github.com/users/michaelsproul/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/michaelsproul/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/michaelsproul/subscriptions",
      "organizations_url": "https://api.github.com/users/michaelsproul/orgs",
      "repos_url": "https://api.github.com/users/michaelsproul/repos",
      "events_url": "https://api.github.com/users/michaelsproul/events{/privacy}",
      "received_events_url": "https://api.github.com/users/michaelsproul/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-12-06T23:00:22Z",
    "updated_at": "2023-12-06T23:00:22Z",
    "author_association": "MEMBER",
    "body": "## How to test\r\n\r\n1. Run a slasher on Goerli. Use the flags `--network goerli --checkpoint-sync-url \"https://beaconstate-goerli.chainsafe.io\" --slasher --slasher-history-length 256 `.\r\n2. Look for slasher-related logs with `tail -f ~/.lighthouse/goerli/beacon/logs/beacon.log | grep slasher`.\r\n3. Wait for the error message to appear (seems to happen once every ~15 minutes)\r\n\r\n## How to confirm the issue\r\n\r\nEdit the log message for `Unable to obtain indexed form of attestation for slasher` so that it prints out the `beacon_block_root` and the `target.root` for the attestation. Re-compile Lighthouse (using `make`), re-run it and wait for the error to appear. When the error shows up again with the extra information, look up the block roots on the Goerli block explorer, like this:\r\n\r\n- example head: https://goerli.beaconcha.in/slot/0x890a09a119bb0ca3c5aa44c6430350f6d7edcd2e938ed35a82dcc3dedb804cfe\r\n- example target: https://goerli.beaconcha.in/slot/0xf854bc2a8da4534a70b21974988c89de8ccb54392a6e90780aac88911cf5e428\r\n\r\nIf my theory is correct then we should have `target_slot > head_slot`.",
    "reactions": {
      "url": "https://api.github.com/repos/sigp/lighthouse/issues/comments/1843825065/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/sigp/lighthouse/issues/comments/1843825745",
    "html_url": "https://github.com/sigp/lighthouse/issues/4972#issuecomment-1843825745",
    "issue_url": "https://api.github.com/repos/sigp/lighthouse/issues/4972",
    "id": 1843825745,
    "node_id": "IC_kwDOCFeAzc5t5oxR",
    "user": {
      "login": "michaelsproul",
      "id": 4452260,
      "node_id": "MDQ6VXNlcjQ0NTIyNjA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4452260?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/michaelsproul",
      "html_url": "https://github.com/michaelsproul",
      "followers_url": "https://api.github.com/users/michaelsproul/followers",
      "following_url": "https://api.github.com/users/michaelsproul/following{/other_user}",
      "gists_url": "https://api.github.com/users/michaelsproul/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/michaelsproul/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/michaelsproul/subscriptions",
      "organizations_url": "https://api.github.com/users/michaelsproul/orgs",
      "repos_url": "https://api.github.com/users/michaelsproul/repos",
      "events_url": "https://api.github.com/users/michaelsproul/events{/privacy}",
      "received_events_url": "https://api.github.com/users/michaelsproul/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-12-06T23:01:05Z",
    "updated_at": "2023-12-06T23:01:05Z",
    "author_association": "MEMBER",
    "body": "^ @armaganyildirak",
    "reactions": {
      "url": "https://api.github.com/repos/sigp/lighthouse/issues/comments/1843825745/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 1,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/sigp/lighthouse/issues/comments/1843925143",
    "html_url": "https://github.com/sigp/lighthouse/issues/4972#issuecomment-1843925143",
    "issue_url": "https://api.github.com/repos/sigp/lighthouse/issues/4972",
    "id": 1843925143,
    "node_id": "IC_kwDOCFeAzc5t6BCX",
    "user": {
      "login": "michaelsproul",
      "id": 4452260,
      "node_id": "MDQ6VXNlcjQ0NTIyNjA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4452260?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/michaelsproul",
      "html_url": "https://github.com/michaelsproul",
      "followers_url": "https://api.github.com/users/michaelsproul/followers",
      "following_url": "https://api.github.com/users/michaelsproul/following{/other_user}",
      "gists_url": "https://api.github.com/users/michaelsproul/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/michaelsproul/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/michaelsproul/subscriptions",
      "organizations_url": "https://api.github.com/users/michaelsproul/orgs",
      "repos_url": "https://api.github.com/users/michaelsproul/repos",
      "events_url": "https://api.github.com/users/michaelsproul/events{/privacy}",
      "received_events_url": "https://api.github.com/users/michaelsproul/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-12-07T00:16:44Z",
    "updated_at": "2023-12-07T00:16:44Z",
    "author_association": "MEMBER",
    "body": "## How to fix\r\n\r\nI think the attestation probably fails verification here:\r\n\r\nhttps://github.com/sigp/lighthouse/blob/441fc1691b69f9edc4bbdc6665f3efab16265c9b/beacon_node/beacon_chain/src/attestation_verification.rs#L518\r\n\r\nIt then gets passed to the slasher via `process_slash_info`, which uses `obtain_indexed_attestation_and_committees_per_slot` to convert the attestation into an `IndexedAttestation`:\r\n\r\nhttps://github.com/sigp/lighthouse/blob/441fc1691b69f9edc4bbdc6665f3efab16265c9b/beacon_node/beacon_chain/src/attestation_verification.rs#L382-L385\r\n\r\nThe `IndexedAttestation` has the `aggregation_bitfield` from the original attestation replaced by the list of validators who signed the attestation. The slasher needs an `IndexedAttestation` because it does all its calculations in terms of validator indices.\r\n\r\nThe process of converting the `aggregation_bitfield` to a list of validators is handled by `map_attestation_committee` which looks at the attester shuffling from a `BeaconState` (in each epoch the validators are shuffled into committees. We use the aggregation bits to select the validators from a specific committee in a specific epoch + state).\r\n\r\nPresently the `map_attestation_committee` function uses the `target.root` from the attestation to look up the committee and _fails_ if that target root is not known, here:\r\n\r\nhttps://github.com/sigp/lighthouse/blob/441fc1691b69f9edc4bbdc6665f3efab16265c9b/beacon_node/beacon_chain/src/attestation_verification.rs#L1255-L1269\r\n\r\nTo fix the issue we want to prevent this error from being returned, either by:\r\n\r\n1. Always using the `attestation.data.beacon_block_root` instead of `attestation.data.target.root` when looking up the committees. This might be the simplest fix, but would have worse performance in case of a cache miss in `with_committee_cache`.\r\n2. Using the `attestation.data.beacon_block_root` _only if_ the `attestation.data.target.root` is not found in fork choice. This should fix the issue while not regressing performance for any existing cases.",
    "reactions": {
      "url": "https://api.github.com/repos/sigp/lighthouse/issues/comments/1843925143/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
