{
  "url": "https://api.github.com/repos/sigp/lighthouse/issues/417",
  "repository_url": "https://api.github.com/repos/sigp/lighthouse",
  "labels_url": "https://api.github.com/repos/sigp/lighthouse/issues/417/labels{/name}",
  "comments_url": "https://api.github.com/repos/sigp/lighthouse/issues/417/comments",
  "events_url": "https://api.github.com/repos/sigp/lighthouse/issues/417/events",
  "html_url": "https://github.com/sigp/lighthouse/issues/417",
  "id": 461324581,
  "node_id": "MDU6SXNzdWU0NjEzMjQ1ODE=",
  "number": 417,
  "title": "SSZ Partials API",
  "user": {
    "login": "paulhauner",
    "id": 6660660,
    "node_id": "MDQ6VXNlcjY2NjA2NjA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6660660?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/paulhauner",
    "html_url": "https://github.com/paulhauner",
    "followers_url": "https://api.github.com/users/paulhauner/followers",
    "following_url": "https://api.github.com/users/paulhauner/following{/other_user}",
    "gists_url": "https://api.github.com/users/paulhauner/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/paulhauner/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/paulhauner/subscriptions",
    "organizations_url": "https://api.github.com/users/paulhauner/orgs",
    "repos_url": "https://api.github.com/users/paulhauner/repos",
    "events_url": "https://api.github.com/users/paulhauner/events{/privacy}",
    "received_events_url": "https://api.github.com/users/paulhauner/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 1232620456,
      "node_id": "MDU6TGFiZWwxMjMyNjIwNDU2",
      "url": "https://api.github.com/repos/sigp/lighthouse/labels/RFC",
      "name": "RFC",
      "color": "4aaa19",
      "default": false,
      "description": "Request for comment"
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 4,
  "created_at": "2019-06-27T05:40:14Z",
  "updated_at": "2019-07-04T04:56:14Z",
  "closed_at": "2019-07-04T04:56:14Z",
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "## Description\r\n\r\nHigh-level discussion about implementing SSZ partials in Lighthouse.\r\n\r\n## API Design\r\n\r\nI have thought of two potential designs, one has stronger type-level guarantees whilst the other is simpler to implement on a struct.\r\n\r\nMy preference is **API 1**.\r\n\r\nThe code provided is intended as a rough example, it wouldn't compile.\r\n\r\nI'm keen for input/feedback.\r\n\r\n### API 1: Not wrapping all the fields\r\n\r\nCharacteristics: \r\n\r\n- Simpler implement: there are no \"wrapper\" structs around each field, implementation is a single proc derive macro.\r\n- Less type safety: the type system does not enforce that some value has been loaded and is not default.\r\n\r\n```rust\r\n#[derive(SszPartial)]\r\nstruct Foo {\r\n  a: usize\r\n}\r\n\r\n#[derive(SszPartial)]\r\nstruct Foo {\r\n  a: usize\r\n}\r\n\r\n#[derive(SszPartial)]\r\nstruct MyStruct {\r\n  foo: Foo,\r\n  bar: Bar\r\n}\r\n\r\n//\r\n// Encoding\r\n//\r\n\r\nlet random = MyStruct::random();\r\nlet foo_bytes: Vec<u8> = random.get_serialized_partial(\"foo.a\").unwrap();\r\nlet bar_bytes: Vec<u8> = random.get_serialized_partial(\"bar.a\").unwrap();\r\n\r\n//\r\n// Decoding\r\n//\r\n\r\n// Supplied path must be rooted in `trusted_root`. Ensures the authenticity of `bytes`.\r\nlet trusted_root = random.tree_hash_root();  \r\nlet mut partial = MyStruct::default();\r\npartial.load_serialized_path(trusted_root, \"foo.a\", foo_bytes).unwrap();\r\n\r\nassert!(partial.path_was_loaded(\"foo.a\"), \"safety check to ensure foo.a has been loaded\");\r\nassert_eq!(random.foo.a, partial.foo.a, \"foo.a was loaded from proof\");\r\nassert_eq!(partial.bar, Bar::default(), \"bar.a was not loaded from proof\");\r\n\r\n// Load bar.a from proof.\r\npartial.load_serialized_path(trusted_root, \"bar.a\", bar_bytes).unwrap();\r\n\r\nassert_eq!(random.bar.a, partial.bar.a, \"bar.a was loaded from proof\");\r\n```\r\n\r\n### API 2: Wrapping all the fields\r\n\r\nCharacteristics:\r\n\r\n- Implementation is intrusive: all supported field must be wrapped in a `SszPartial` type.\r\n- Provides type-level assurance that each field was loaded from bytes and is not some default value.\r\n\r\n```rust\r\nuse ssz_partial::SszPartial;\r\nuse ssz_partial_derive::SszPartial;\r\n\r\n#[derive(SszPartial)]\r\nstruct Foo {\r\n  a: SszPartial<usize>\r\n}\r\n\r\n#[derive(SszPartial)]\r\nstruct Foo {\r\n  a: SszPartial<usize>\r\n}\r\n\r\n#[derive(SszPartial)]\r\nstruct MyStruct {\r\n  foo: SszPartial<Foo>,\r\n  bar: SszPartial<Bar>\r\n}\r\n\r\n//\r\n// Encoding\r\n//\r\n\r\nlet full: SszPartial<MyStruct> = SszPartial::from(MyStruct::new());\r\nlet foo_bytes: Vec<u8> = full.get_serialized_partial(\"foo.a\").unwrap();\r\n\r\n//\r\n// Decoding\r\n//\r\n\r\n// Supplied path must be rooted in `trusted_root`. Ensures the authenticity of `bytes`.\r\nlet trusted_root = full.tree_hash_root();  \r\nlet partial = MyStruct::from_serialized_partial(trusted_root, \"foo.a\", foo_bytes).unwrap();\r\n\r\nassert!(partial.foo.a.is_some());\r\nassert!(partial.bar.is_none());\r\n```",
  "closed_by": {
    "login": "paulhauner",
    "id": 6660660,
    "node_id": "MDQ6VXNlcjY2NjA2NjA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6660660?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/paulhauner",
    "html_url": "https://github.com/paulhauner",
    "followers_url": "https://api.github.com/users/paulhauner/followers",
    "following_url": "https://api.github.com/users/paulhauner/following{/other_user}",
    "gists_url": "https://api.github.com/users/paulhauner/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/paulhauner/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/paulhauner/subscriptions",
    "organizations_url": "https://api.github.com/users/paulhauner/orgs",
    "repos_url": "https://api.github.com/users/paulhauner/repos",
    "events_url": "https://api.github.com/users/paulhauner/events{/privacy}",
    "received_events_url": "https://api.github.com/users/paulhauner/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/sigp/lighthouse/issues/417/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/sigp/lighthouse/issues/417/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/sigp/lighthouse/issues/comments/506205435",
    "html_url": "https://github.com/sigp/lighthouse/issues/417#issuecomment-506205435",
    "issue_url": "https://api.github.com/repos/sigp/lighthouse/issues/417",
    "id": 506205435,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUwNjIwNTQzNQ==",
    "user": {
      "login": "paulhauner",
      "id": 6660660,
      "node_id": "MDQ6VXNlcjY2NjA2NjA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6660660?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/paulhauner",
      "html_url": "https://github.com/paulhauner",
      "followers_url": "https://api.github.com/users/paulhauner/followers",
      "following_url": "https://api.github.com/users/paulhauner/following{/other_user}",
      "gists_url": "https://api.github.com/users/paulhauner/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/paulhauner/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/paulhauner/subscriptions",
      "organizations_url": "https://api.github.com/users/paulhauner/orgs",
      "repos_url": "https://api.github.com/users/paulhauner/repos",
      "events_url": "https://api.github.com/users/paulhauner/events{/privacy}",
      "received_events_url": "https://api.github.com/users/paulhauner/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-06-27T06:08:18Z",
    "updated_at": "2019-06-27T06:08:18Z",
    "author_association": "MEMBER",
    "body": "Re-opening. I closed the issue because I accidentally posted it before I completed writing it.",
    "reactions": {
      "url": "https://api.github.com/repos/sigp/lighthouse/issues/comments/506205435/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/sigp/lighthouse/issues/comments/506508149",
    "html_url": "https://github.com/sigp/lighthouse/issues/417#issuecomment-506508149",
    "issue_url": "https://api.github.com/repos/sigp/lighthouse/issues/417",
    "id": 506508149,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUwNjUwODE0OQ==",
    "user": {
      "login": "lightclient",
      "id": 14004106,
      "node_id": "MDQ6VXNlcjE0MDA0MTA2",
      "avatar_url": "https://avatars.githubusercontent.com/u/14004106?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lightclient",
      "html_url": "https://github.com/lightclient",
      "followers_url": "https://api.github.com/users/lightclient/followers",
      "following_url": "https://api.github.com/users/lightclient/following{/other_user}",
      "gists_url": "https://api.github.com/users/lightclient/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lightclient/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lightclient/subscriptions",
      "organizations_url": "https://api.github.com/users/lightclient/orgs",
      "repos_url": "https://api.github.com/users/lightclient/repos",
      "events_url": "https://api.github.com/users/lightclient/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lightclient/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-06-27T20:56:32Z",
    "updated_at": "2019-06-27T20:56:49Z",
    "author_association": "CONTRIBUTOR",
    "body": "This is great, thanks @paulhauner!\r\n\r\nI think the first API would be a great place to start. Here are my thoughts on it:\r\n\r\n* the simplicity is great\r\n* the lack of type-level make me feel like there are better solutions\r\n* most of the work for this interface would need to be implemented anyways for more complex interfaces\r\n* I don't see a major use case for accessing elements via their path vs. the dot syntax in Rust (e.g. we'll know paths we want to access at compile time\r\n* I think that serializing and deserializing entire objects (or merkle multi proofs) will be more prevalent than individual branches\r\n\r\n\r\nWith that said, I still thing this is a good starting point. How do you feel about me going ahead with API 1 and then once that is complete we can take a second look (hopefully with some new insights from the initial implementation) at improving it?\r\n\r\nI'll also include what I was originally imagining below -- but I'm seeing how the implementation will be much heavier.\r\n\r\n```rust\r\n// The commented code will derive to the uncommented code via the SszPartial macro.\r\n//\r\n// #[derive(SszPartial)]\r\n// struct Foo {\r\n//   a: usize\r\n// }\r\n\r\n// #[derive(SszPartial)]\r\n// struct Bar {\r\n//   a: Vec<usize>\r\n// }\r\n\r\n// #[derive(SszPartial)]\r\n// struct MyStruct {\r\n//   foo:  Foo,\r\n//   bar: Bar\r\n// }\r\n\r\nstruct Foo {\r\n  a: SszPartial<usize>\r\n}\r\n\r\nstruct Bar {\r\n  a: SszPartial<PartialHashMap<usize>>\r\n}\r\n\r\nstruct MyStruct {\r\n  foo: SszPartial<Foo>\r\n  bar: SszPartial<Bar>\r\n}\r\n\r\nlet my_struct = MyStruct::random();\r\nlet foo_bytes: Vec<u8> = my_struct.foo.a.get_serialized_partial().unwrap();\r\nlet bar_bytes: Vec<u8> = my_struct.bar.a.get_serialized_partial().unwrap();\r\n\r\nlet trusted_root = random.tree_hash_root();\r\nlet mut partial = MyStruct::load_serialized_partial(trusted_root, foo_bytes).unwrap();\r\nassert_eq!(my_struct.foo.a.unwrap(), partial.foo.a.unwrap());\r\n\r\npartial.foo.a.set(100);\r\nlet new_root = partial.tree_hash_root();\r\nassert_nq!(new_root, trusted_root);\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/sigp/lighthouse/issues/comments/506508149/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/sigp/lighthouse/issues/comments/506900939",
    "html_url": "https://github.com/sigp/lighthouse/issues/417#issuecomment-506900939",
    "issue_url": "https://api.github.com/repos/sigp/lighthouse/issues/417",
    "id": 506900939,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUwNjkwMDkzOQ==",
    "user": {
      "login": "axic",
      "id": 20340,
      "node_id": "MDQ6VXNlcjIwMzQw",
      "avatar_url": "https://avatars.githubusercontent.com/u/20340?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/axic",
      "html_url": "https://github.com/axic",
      "followers_url": "https://api.github.com/users/axic/followers",
      "following_url": "https://api.github.com/users/axic/following{/other_user}",
      "gists_url": "https://api.github.com/users/axic/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/axic/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/axic/subscriptions",
      "organizations_url": "https://api.github.com/users/axic/orgs",
      "repos_url": "https://api.github.com/users/axic/repos",
      "events_url": "https://api.github.com/users/axic/events{/privacy}",
      "received_events_url": "https://api.github.com/users/axic/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-06-28T23:03:53Z",
    "updated_at": "2019-06-28T23:03:53Z",
    "author_association": "NONE",
    "body": "For prototyping reasons I'd argue **API 1** is a good starting point, assuming it won't take too much time to implement compared to **API 2**.\r\n\r\nWe can experiment with this API within execution environments, which should give a good indication whether individual leaf nodes or bigger branches are accessed more frequently and should also clarify how frequently unavailable nodes are accessed (e.g. those set to defaults).",
    "reactions": {
      "url": "https://api.github.com/repos/sigp/lighthouse/issues/comments/506900939/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/sigp/lighthouse/issues/comments/508337876",
    "html_url": "https://github.com/sigp/lighthouse/issues/417#issuecomment-508337876",
    "issue_url": "https://api.github.com/repos/sigp/lighthouse/issues/417",
    "id": 508337876,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUwODMzNzg3Ng==",
    "user": {
      "login": "paulhauner",
      "id": 6660660,
      "node_id": "MDQ6VXNlcjY2NjA2NjA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6660660?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/paulhauner",
      "html_url": "https://github.com/paulhauner",
      "followers_url": "https://api.github.com/users/paulhauner/followers",
      "following_url": "https://api.github.com/users/paulhauner/following{/other_user}",
      "gists_url": "https://api.github.com/users/paulhauner/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/paulhauner/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/paulhauner/subscriptions",
      "organizations_url": "https://api.github.com/users/paulhauner/orgs",
      "repos_url": "https://api.github.com/users/paulhauner/repos",
      "events_url": "https://api.github.com/users/paulhauner/events{/privacy}",
      "received_events_url": "https://api.github.com/users/paulhauner/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-07-04T04:56:14Z",
    "updated_at": "2019-07-04T04:56:14Z",
    "author_association": "MEMBER",
    "body": "Cool! Seem's we agree :)\r\n\r\nI'll close this for now, feel free to open up if you want to discuss",
    "reactions": {
      "url": "https://api.github.com/repos/sigp/lighthouse/issues/comments/508337876/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
