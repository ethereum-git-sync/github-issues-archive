{
  "url": "https://api.github.com/repos/sigp/lighthouse/issues/481",
  "repository_url": "https://api.github.com/repos/sigp/lighthouse",
  "labels_url": "https://api.github.com/repos/sigp/lighthouse/issues/481/labels{/name}",
  "comments_url": "https://api.github.com/repos/sigp/lighthouse/issues/481/comments",
  "events_url": "https://api.github.com/repos/sigp/lighthouse/issues/481/events",
  "html_url": "https://github.com/sigp/lighthouse/issues/481",
  "id": 475955075,
  "node_id": "MDU6SXNzdWU0NzU5NTUwNzU=",
  "number": 481,
  "title": "Skip slots causing issues with ancestor iters",
  "user": {
    "login": "paulhauner",
    "id": 6660660,
    "node_id": "MDQ6VXNlcjY2NjA2NjA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6660660?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/paulhauner",
    "html_url": "https://github.com/paulhauner",
    "followers_url": "https://api.github.com/users/paulhauner/followers",
    "following_url": "https://api.github.com/users/paulhauner/following{/other_user}",
    "gists_url": "https://api.github.com/users/paulhauner/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/paulhauner/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/paulhauner/subscriptions",
    "organizations_url": "https://api.github.com/users/paulhauner/orgs",
    "repos_url": "https://api.github.com/users/paulhauner/repos",
    "events_url": "https://api.github.com/users/paulhauner/events{/privacy}",
    "received_events_url": "https://api.github.com/users/paulhauner/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 985647281,
      "node_id": "MDU6TGFiZWw5ODU2NDcyODE=",
      "url": "https://api.github.com/repos/sigp/lighthouse/labels/bug",
      "name": "bug",
      "color": "d73a4a",
      "default": true,
      "description": "Something isn't working"
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 3,
  "created_at": "2019-08-02T01:29:11Z",
  "updated_at": "2019-10-21T23:03:27Z",
  "closed_at": "2019-10-21T23:03:27Z",
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "## Description\r\n\r\nThe [`StateRootsIterator`](https://github.com/sigp/lighthouse/blob/89cb01cc93c637ca489a01e5867c80690eb4ed9a/beacon_node/store/src/iter.rs#L24-L78) assumes that all roots in `state.state_roots` are valid keys in the database.\r\n\r\nThis assumption is incorrect, because don't store states when there is a skip-slot. There are two places (I can think of) where we produce a state without storing any intermediate skipped states:\r\n\r\n1. [`BeaconChain::process_block(..)`](https://github.com/sigp/lighthouse/blob/89cb01cc93c637ca489a01e5867c80690eb4ed9a/beacon_node/beacon_chain/src/beacon_chain.rs#L575-L698): If there are skipped slots between the block being processed and it's parent, `per_slot_processing` is used to advance the state and those intermediate states are not stored, but the final state is.\r\n1. [`BeaconChain::catchup_state(..)`](https://github.com/sigp/lighthouse/blob/89cb01cc93c637ca489a01e5867c80690eb4ed9a/beacon_node/beacon_chain/src/beacon_chain.rs#L293-L317): Here we produce a state that has been advanced to the latest slot (via skip slots) and we don't store any of those intermediate, skipped states. Notably, we don't actually store the produced state either, but it's still an issue because we may expect to iterate through the roots of that state.\r\n\r\nWe also create intermediate states without storing them in `BeaconChain::produce_block_on_state(..)`, however the state we produce is never stored and ephemeral, so I find this valid behavior.\r\n\r\n## Steps to resolve\r\n\r\nA naive solution to (1) would involve storing each intermediate state as we produce it, however this is incorrect because we don't actually know the block is valid (and it's states should be stored) until later on. As such, we probably need to keep all the intermediate states in a `Vec` and then store them once we're certain the block is valid.\r\n\r\nRegarding (2), this problem should go away if we implement my suggestions in #482.\r\n",
  "closed_by": {
    "login": "paulhauner",
    "id": 6660660,
    "node_id": "MDQ6VXNlcjY2NjA2NjA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6660660?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/paulhauner",
    "html_url": "https://github.com/paulhauner",
    "followers_url": "https://api.github.com/users/paulhauner/followers",
    "following_url": "https://api.github.com/users/paulhauner/following{/other_user}",
    "gists_url": "https://api.github.com/users/paulhauner/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/paulhauner/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/paulhauner/subscriptions",
    "organizations_url": "https://api.github.com/users/paulhauner/orgs",
    "repos_url": "https://api.github.com/users/paulhauner/repos",
    "events_url": "https://api.github.com/users/paulhauner/events{/privacy}",
    "received_events_url": "https://api.github.com/users/paulhauner/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/sigp/lighthouse/issues/481/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/sigp/lighthouse/issues/481/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/sigp/lighthouse/issues/comments/517522583",
    "html_url": "https://github.com/sigp/lighthouse/issues/481#issuecomment-517522583",
    "issue_url": "https://api.github.com/repos/sigp/lighthouse/issues/481",
    "id": 517522583,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUxNzUyMjU4Mw==",
    "user": {
      "login": "michaelsproul",
      "id": 4452260,
      "node_id": "MDQ6VXNlcjQ0NTIyNjA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4452260?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/michaelsproul",
      "html_url": "https://github.com/michaelsproul",
      "followers_url": "https://api.github.com/users/michaelsproul/followers",
      "following_url": "https://api.github.com/users/michaelsproul/following{/other_user}",
      "gists_url": "https://api.github.com/users/michaelsproul/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/michaelsproul/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/michaelsproul/subscriptions",
      "organizations_url": "https://api.github.com/users/michaelsproul/orgs",
      "repos_url": "https://api.github.com/users/michaelsproul/repos",
      "events_url": "https://api.github.com/users/michaelsproul/events{/privacy}",
      "received_events_url": "https://api.github.com/users/michaelsproul/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-08-02T02:22:22Z",
    "updated_at": "2019-08-02T02:22:22Z",
    "author_association": "MEMBER",
    "body": "As an alternative solution, could we make `StateRootsIterator` reconstruct the skipped states? It could iterate back until it finds a real state and then run forwards again, caching the results for future iterations. Sounds a bit complicated and slow though, and maintaining the invariant that if a state is stored in the database then all its ancestors are too is nicer anyway...\r\n\r\nIn that case I'm happy with both proposed solutions",
    "reactions": {
      "url": "https://api.github.com/repos/sigp/lighthouse/issues/comments/517522583/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/sigp/lighthouse/issues/comments/517527702",
    "html_url": "https://github.com/sigp/lighthouse/issues/481#issuecomment-517527702",
    "issue_url": "https://api.github.com/repos/sigp/lighthouse/issues/481",
    "id": 517527702,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUxNzUyNzcwMg==",
    "user": {
      "login": "paulhauner",
      "id": 6660660,
      "node_id": "MDQ6VXNlcjY2NjA2NjA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6660660?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/paulhauner",
      "html_url": "https://github.com/paulhauner",
      "followers_url": "https://api.github.com/users/paulhauner/followers",
      "following_url": "https://api.github.com/users/paulhauner/following{/other_user}",
      "gists_url": "https://api.github.com/users/paulhauner/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/paulhauner/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/paulhauner/subscriptions",
      "organizations_url": "https://api.github.com/users/paulhauner/orgs",
      "repos_url": "https://api.github.com/users/paulhauner/repos",
      "events_url": "https://api.github.com/users/paulhauner/events{/privacy}",
      "received_events_url": "https://api.github.com/users/paulhauner/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-08-02T02:52:14Z",
    "updated_at": "2019-08-02T02:52:14Z",
    "author_association": "MEMBER",
    "body": "> As an alternative solution, could we make StateRootsIterator reconstruct the skipped states?\r\n\r\nI don't think this works in all cases. For example, if we skip > `SLOTS_PER_HISTORICAL_ROOT` slots then we won't have any reference to a full-state.",
    "reactions": {
      "url": "https://api.github.com/repos/sigp/lighthouse/issues/comments/517527702/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/sigp/lighthouse/issues/comments/544744140",
    "html_url": "https://github.com/sigp/lighthouse/issues/481#issuecomment-544744140",
    "issue_url": "https://api.github.com/repos/sigp/lighthouse/issues/481",
    "id": 544744140,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU0NDc0NDE0MA==",
    "user": {
      "login": "paulhauner",
      "id": 6660660,
      "node_id": "MDQ6VXNlcjY2NjA2NjA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6660660?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/paulhauner",
      "html_url": "https://github.com/paulhauner",
      "followers_url": "https://api.github.com/users/paulhauner/followers",
      "following_url": "https://api.github.com/users/paulhauner/following{/other_user}",
      "gists_url": "https://api.github.com/users/paulhauner/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/paulhauner/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/paulhauner/subscriptions",
      "organizations_url": "https://api.github.com/users/paulhauner/orgs",
      "repos_url": "https://api.github.com/users/paulhauner/repos",
      "events_url": "https://api.github.com/users/paulhauner/events{/privacy}",
      "received_events_url": "https://api.github.com/users/paulhauner/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-10-21T23:03:27Z",
    "updated_at": "2019-10-21T23:03:27Z",
    "author_association": "MEMBER",
    "body": "This was fixed in some prior PR",
    "reactions": {
      "url": "https://api.github.com/repos/sigp/lighthouse/issues/comments/544744140/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
