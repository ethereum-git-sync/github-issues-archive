{
  "url": "https://api.github.com/repos/sigp/lighthouse/issues/1028",
  "repository_url": "https://api.github.com/repos/sigp/lighthouse",
  "labels_url": "https://api.github.com/repos/sigp/lighthouse/issues/1028/labels{/name}",
  "comments_url": "https://api.github.com/repos/sigp/lighthouse/issues/1028/comments",
  "events_url": "https://api.github.com/repos/sigp/lighthouse/issues/1028/events",
  "html_url": "https://github.com/sigp/lighthouse/issues/1028",
  "id": 602977472,
  "node_id": "MDU6SXNzdWU2MDI5Nzc0NzI=",
  "number": 1028,
  "title": "Gossip verify block to return block if no parent",
  "user": {
    "login": "AgeManning",
    "id": 7454587,
    "node_id": "MDQ6VXNlcjc0NTQ1ODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/7454587?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/AgeManning",
    "html_url": "https://github.com/AgeManning",
    "followers_url": "https://api.github.com/users/AgeManning/followers",
    "following_url": "https://api.github.com/users/AgeManning/following{/other_user}",
    "gists_url": "https://api.github.com/users/AgeManning/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/AgeManning/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/AgeManning/subscriptions",
    "organizations_url": "https://api.github.com/users/AgeManning/orgs",
    "repos_url": "https://api.github.com/users/AgeManning/repos",
    "events_url": "https://api.github.com/users/AgeManning/events{/privacy}",
    "received_events_url": "https://api.github.com/users/AgeManning/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 985647286,
      "node_id": "MDU6TGFiZWw5ODU2NDcyODY=",
      "url": "https://api.github.com/repos/sigp/lighthouse/labels/good%20first%20issue",
      "name": "good first issue",
      "color": "7057ff",
      "default": true,
      "description": "Good for newcomers"
    },
    {
      "id": 1999784343,
      "node_id": "MDU6TGFiZWwxOTk5Nzg0MzQz",
      "url": "https://api.github.com/repos/sigp/lighthouse/labels/optimization",
      "name": "optimization",
      "color": "f9de40",
      "default": false,
      "description": "Something to make Lighthouse run more efficiently."
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": {
    "login": "thor314",
    "id": 7041313,
    "node_id": "MDQ6VXNlcjcwNDEzMTM=",
    "avatar_url": "https://avatars.githubusercontent.com/u/7041313?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/thor314",
    "html_url": "https://github.com/thor314",
    "followers_url": "https://api.github.com/users/thor314/followers",
    "following_url": "https://api.github.com/users/thor314/following{/other_user}",
    "gists_url": "https://api.github.com/users/thor314/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/thor314/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/thor314/subscriptions",
    "organizations_url": "https://api.github.com/users/thor314/orgs",
    "repos_url": "https://api.github.com/users/thor314/repos",
    "events_url": "https://api.github.com/users/thor314/events{/privacy}",
    "received_events_url": "https://api.github.com/users/thor314/received_events",
    "type": "User",
    "site_admin": false
  },
  "assignees": [
    {
      "login": "thor314",
      "id": 7041313,
      "node_id": "MDQ6VXNlcjcwNDEzMTM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7041313?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/thor314",
      "html_url": "https://github.com/thor314",
      "followers_url": "https://api.github.com/users/thor314/followers",
      "following_url": "https://api.github.com/users/thor314/following{/other_user}",
      "gists_url": "https://api.github.com/users/thor314/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/thor314/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/thor314/subscriptions",
      "organizations_url": "https://api.github.com/users/thor314/orgs",
      "repos_url": "https://api.github.com/users/thor314/repos",
      "events_url": "https://api.github.com/users/thor314/events{/privacy}",
      "received_events_url": "https://api.github.com/users/thor314/received_events",
      "type": "User",
      "site_admin": false
    }
  ],
  "milestone": null,
  "comments": 17,
  "created_at": "2020-04-20T06:27:02Z",
  "updated_at": "2020-08-17T22:42:57Z",
  "closed_at": "2020-08-17T22:42:57Z",
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "## Description\r\n\r\nWhen verifying a block for gossip propagation, one error that can occur is `ParentUnknown`. In this case, we want to store the block and lookup its parents before processing a chain of blocks. \r\n\r\nCurrently this return type doesn't return the block and we must clone the block before checking the verification in case we need to do a parent lookup. \r\n\r\nTo avoid the clone, the `load_parent` function should return the `SignedBeaconBlock` itself in the error message. ",
  "closed_by": {
    "login": "divagant-martian",
    "id": 26765164,
    "node_id": "MDQ6VXNlcjI2NzY1MTY0",
    "avatar_url": "https://avatars.githubusercontent.com/u/26765164?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/divagant-martian",
    "html_url": "https://github.com/divagant-martian",
    "followers_url": "https://api.github.com/users/divagant-martian/followers",
    "following_url": "https://api.github.com/users/divagant-martian/following{/other_user}",
    "gists_url": "https://api.github.com/users/divagant-martian/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/divagant-martian/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/divagant-martian/subscriptions",
    "organizations_url": "https://api.github.com/users/divagant-martian/orgs",
    "repos_url": "https://api.github.com/users/divagant-martian/repos",
    "events_url": "https://api.github.com/users/divagant-martian/events{/privacy}",
    "received_events_url": "https://api.github.com/users/divagant-martian/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/sigp/lighthouse/issues/1028/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/sigp/lighthouse/issues/1028/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/sigp/lighthouse/issues/comments/616398905",
    "html_url": "https://github.com/sigp/lighthouse/issues/1028#issuecomment-616398905",
    "issue_url": "https://api.github.com/repos/sigp/lighthouse/issues/1028",
    "id": 616398905,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYxNjM5ODkwNQ==",
    "user": {
      "login": "paulhauner",
      "id": 6660660,
      "node_id": "MDQ6VXNlcjY2NjA2NjA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6660660?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/paulhauner",
      "html_url": "https://github.com/paulhauner",
      "followers_url": "https://api.github.com/users/paulhauner/followers",
      "following_url": "https://api.github.com/users/paulhauner/following{/other_user}",
      "gists_url": "https://api.github.com/users/paulhauner/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/paulhauner/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/paulhauner/subscriptions",
      "organizations_url": "https://api.github.com/users/paulhauner/orgs",
      "repos_url": "https://api.github.com/users/paulhauner/repos",
      "events_url": "https://api.github.com/users/paulhauner/events{/privacy}",
      "received_events_url": "https://api.github.com/users/paulhauner/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-04-20T08:37:53Z",
    "updated_at": "2020-04-20T08:38:55Z",
    "author_association": "MEMBER",
    "body": "Could you just clone the `block.parent_root` instead of the whole thing?\r\n\r\nEDIT: oh you need to store the whole block to process it later.",
    "reactions": {
      "url": "https://api.github.com/repos/sigp/lighthouse/issues/comments/616398905/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/sigp/lighthouse/issues/comments/616400798",
    "html_url": "https://github.com/sigp/lighthouse/issues/1028#issuecomment-616400798",
    "issue_url": "https://api.github.com/repos/sigp/lighthouse/issues/1028",
    "id": 616400798,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYxNjQwMDc5OA==",
    "user": {
      "login": "paulhauner",
      "id": 6660660,
      "node_id": "MDQ6VXNlcjY2NjA2NjA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6660660?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/paulhauner",
      "html_url": "https://github.com/paulhauner",
      "followers_url": "https://api.github.com/users/paulhauner/followers",
      "following_url": "https://api.github.com/users/paulhauner/following{/other_user}",
      "gists_url": "https://api.github.com/users/paulhauner/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/paulhauner/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/paulhauner/subscriptions",
      "organizations_url": "https://api.github.com/users/paulhauner/orgs",
      "repos_url": "https://api.github.com/users/paulhauner/repos",
      "events_url": "https://api.github.com/users/paulhauner/events{/privacy}",
      "received_events_url": "https://api.github.com/users/paulhauner/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-04-20T08:41:28Z",
    "updated_at": "2020-04-20T08:44:34Z",
    "author_association": "MEMBER",
    "body": "I'm going to un-assign myself from this one since it's a relatively minor optimization. Someone else can come pick it up if they like, otherwise I'll get to it at some point.\r\n\r\nReturning the parent block means making `BlockError` generic over `EthSpec`.",
    "reactions": {
      "url": "https://api.github.com/repos/sigp/lighthouse/issues/comments/616400798/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/sigp/lighthouse/issues/comments/617060044",
    "html_url": "https://github.com/sigp/lighthouse/issues/1028#issuecomment-617060044",
    "issue_url": "https://api.github.com/repos/sigp/lighthouse/issues/1028",
    "id": 617060044,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYxNzA2MDA0NA==",
    "user": {
      "login": "AgeManning",
      "id": 7454587,
      "node_id": "MDQ6VXNlcjc0NTQ1ODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7454587?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/AgeManning",
      "html_url": "https://github.com/AgeManning",
      "followers_url": "https://api.github.com/users/AgeManning/followers",
      "following_url": "https://api.github.com/users/AgeManning/following{/other_user}",
      "gists_url": "https://api.github.com/users/AgeManning/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/AgeManning/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/AgeManning/subscriptions",
      "organizations_url": "https://api.github.com/users/AgeManning/orgs",
      "repos_url": "https://api.github.com/users/AgeManning/repos",
      "events_url": "https://api.github.com/users/AgeManning/events{/privacy}",
      "received_events_url": "https://api.github.com/users/AgeManning/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-04-21T09:18:29Z",
    "updated_at": "2020-04-21T09:18:29Z",
    "author_association": "MEMBER",
    "body": "Sounds good to me",
    "reactions": {
      "url": "https://api.github.com/repos/sigp/lighthouse/issues/comments/617060044/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/sigp/lighthouse/issues/comments/623994641",
    "html_url": "https://github.com/sigp/lighthouse/issues/1028#issuecomment-623994641",
    "issue_url": "https://api.github.com/repos/sigp/lighthouse/issues/1028",
    "id": 623994641,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYyMzk5NDY0MQ==",
    "user": {
      "login": "thor314",
      "id": 7041313,
      "node_id": "MDQ6VXNlcjcwNDEzMTM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7041313?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/thor314",
      "html_url": "https://github.com/thor314",
      "followers_url": "https://api.github.com/users/thor314/followers",
      "following_url": "https://api.github.com/users/thor314/following{/other_user}",
      "gists_url": "https://api.github.com/users/thor314/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/thor314/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/thor314/subscriptions",
      "organizations_url": "https://api.github.com/users/thor314/orgs",
      "repos_url": "https://api.github.com/users/thor314/repos",
      "events_url": "https://api.github.com/users/thor314/events{/privacy}",
      "received_events_url": "https://api.github.com/users/thor314/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-05-05T11:16:33Z",
    "updated_at": "2020-05-05T11:16:33Z",
    "author_association": "CONTRIBUTOR",
    "body": "Working on this now.",
    "reactions": {
      "url": "https://api.github.com/repos/sigp/lighthouse/issues/comments/623994641/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/sigp/lighthouse/issues/comments/623997444",
    "html_url": "https://github.com/sigp/lighthouse/issues/1028#issuecomment-623997444",
    "issue_url": "https://api.github.com/repos/sigp/lighthouse/issues/1028",
    "id": 623997444,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYyMzk5NzQ0NA==",
    "user": {
      "login": "thor314",
      "id": 7041313,
      "node_id": "MDQ6VXNlcjcwNDEzMTM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7041313?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/thor314",
      "html_url": "https://github.com/thor314",
      "followers_url": "https://api.github.com/users/thor314/followers",
      "following_url": "https://api.github.com/users/thor314/following{/other_user}",
      "gists_url": "https://api.github.com/users/thor314/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/thor314/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/thor314/subscriptions",
      "organizations_url": "https://api.github.com/users/thor314/orgs",
      "repos_url": "https://api.github.com/users/thor314/repos",
      "events_url": "https://api.github.com/users/thor314/events{/privacy}",
      "received_events_url": "https://api.github.com/users/thor314/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-05-05T11:23:35Z",
    "updated_at": "2020-05-05T11:26:20Z",
    "author_association": "CONTRIBUTOR",
    "body": "@AgeManning Haven't contributed to your repo before, so excuse the dumb questions.\r\n\"Store the block/Lookup its parents\" - store/lookup where\r\n\"before processing chain of blocks\" - Unclear what chain of blocks referred to\r\n\"processing\" - unclear, what is meant by process in this instance?\r\n\"Don't want to clone the block\" - Seems right\r\nreturn `signedBeaconBlock` in error message - Seems right\r\n\r\nI assume the team is generally busy and don't expect fast response",
    "reactions": {
      "url": "https://api.github.com/repos/sigp/lighthouse/issues/comments/623997444/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/sigp/lighthouse/issues/comments/624004252",
    "html_url": "https://github.com/sigp/lighthouse/issues/1028#issuecomment-624004252",
    "issue_url": "https://api.github.com/repos/sigp/lighthouse/issues/1028",
    "id": 624004252,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYyNDAwNDI1Mg==",
    "user": {
      "login": "AgeManning",
      "id": 7454587,
      "node_id": "MDQ6VXNlcjc0NTQ1ODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7454587?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/AgeManning",
      "html_url": "https://github.com/AgeManning",
      "followers_url": "https://api.github.com/users/AgeManning/followers",
      "following_url": "https://api.github.com/users/AgeManning/following{/other_user}",
      "gists_url": "https://api.github.com/users/AgeManning/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/AgeManning/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/AgeManning/subscriptions",
      "organizations_url": "https://api.github.com/users/AgeManning/orgs",
      "repos_url": "https://api.github.com/users/AgeManning/repos",
      "events_url": "https://api.github.com/users/AgeManning/events{/privacy}",
      "received_events_url": "https://api.github.com/users/AgeManning/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-05-05T11:40:58Z",
    "updated_at": "2020-05-05T11:40:58Z",
    "author_association": "MEMBER",
    "body": "Hey @thor314. Thanks for the interest.\r\nLet me explain this issue in a little more detail. \r\n\r\nWe get a `SignedBeaconBlock` in from the network and we need to make a decision about whether we should propagate it to the rest of the network or not (to filter out spam and bad blocks etc). The function that deals with this is here:\r\nhttps://github.com/sigp/lighthouse/blob/master/beacon_node/network/src/router/processor.rs#L463\r\n\r\nAs you can see, we then call [this](https://github.com/sigp/lighthouse/blob/master/beacon_node/beacon_chain/src/beacon_chain.rs#L1533) function to determine if we should propagate the block or not. \r\n\r\nNow it can happen that the block we received references a block that we do not know about. In this case the `verify_for_gossip` function returns a `ParentUnknown` variant as you can see [here](https://github.com/sigp/lighthouse/blob/master/beacon_node/network/src/router/processor.rs#L470)\r\n\r\nIn this case, we want to go and find the parent block. As you can see, the returned error `ParentUnknown` variant only returns the block hash. However we want the actual block in the case the parent is unknown. So, what we want to do is let the `ParentUnknown` variant actually return the block itself, to avoid the block clone when sending to the `verify_block_for_gossip`. \r\n\r\nYou'll have to track down the processing in `verify_block_for_gossip` and try to keep ownership of the block and if the parent is unknown return it in the variant. As paul mentions, this will mean making the `BlockError` generic over EthSpec, i.e it will become `BlockError<T: EthSpec>` and this will need to be propagated through the code base. \r\n\r\nHopefully this is enough information to get you started :)",
    "reactions": {
      "url": "https://api.github.com/repos/sigp/lighthouse/issues/comments/624004252/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/sigp/lighthouse/issues/comments/628663600",
    "html_url": "https://github.com/sigp/lighthouse/issues/1028#issuecomment-628663600",
    "issue_url": "https://api.github.com/repos/sigp/lighthouse/issues/1028",
    "id": 628663600,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYyODY2MzYwMA==",
    "user": {
      "login": "thor314",
      "id": 7041313,
      "node_id": "MDQ6VXNlcjcwNDEzMTM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7041313?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/thor314",
      "html_url": "https://github.com/thor314",
      "followers_url": "https://api.github.com/users/thor314/followers",
      "following_url": "https://api.github.com/users/thor314/following{/other_user}",
      "gists_url": "https://api.github.com/users/thor314/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/thor314/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/thor314/subscriptions",
      "organizations_url": "https://api.github.com/users/thor314/orgs",
      "repos_url": "https://api.github.com/users/thor314/repos",
      "events_url": "https://api.github.com/users/thor314/events{/privacy}",
      "received_events_url": "https://api.github.com/users/thor314/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-05-14T14:12:39Z",
    "updated_at": "2020-05-14T14:12:39Z",
    "author_association": "CONTRIBUTOR",
    "body": "Thanks for bearing with me @AgeManning. I'm going to talk to you like a rubber duck for a bit, sprinkling questions as they arise, then restate the questions at the end. Commence rubber ducking:\r\nThe predicate `should_forward_block` runs `verify_block_for_gossip`. \r\nIf `verify_block_for_gossip` fails, it propagates back an error. \r\nBack in `should_forward_block`, we pattern match for `ParentUnknown` errors. This line suggests to me that someone believes:\r\n`ParentUnknown` is the only error we need to handle in `should_forward_block`, and any other possible errors are going to be further propagated to any caller of `should_forward_block`. You explained this a little, as if `ParentUnknown` comes back \"we want to go and find the parent block\". Makes the sense, it does.\r\nFinally, if the propagated error has type `ParentUnknown`, we call method `send_to_sync()`. \r\nSo here's the issue, as you explain: we want to let the `ParentUnknown` `BlockError`, return the block itself. \r\n0. You reference Paul's mentioning that `BlockError` needs to become generic over `EthSpec`; I don't quite understand why, but I can do that, and likewise wherever else it pops up in the code base. Sanity check: I'm going to be changing a bunch of instances of `BlockError` to `BlockError<T>`, where I'm going to bound `T:EthSpec`, this is what is meant by generic over `EthSpec` yes?\r\n\r\n1. Now s'pose we have some impl block for `ChainSegmentResult`:\r\n```\r\nimpl ChainSegmentResult {\r\n    pub fn to_block_error(self) -> Result<(), BlockError> {\r\n        match self {\r\n            ChainSegmentResult::Failed { error, .. } => Err(error),\r\n            ChainSegmentResult::Successful { .. } => Ok(()),\r\n        }\r\n    }\r\n}\r\n```\r\nWe want to make BlockError generic over `EthSpec`, but to change this line, BlockError needs to become `BlockError<T>`. To do that we have to make `ChainSegmentResult` generic over `EthSpec` too. Unless I'm misunderstanding?\r\n\r\nNow once that's handled, we skedaddle back on over to `should_forward_block`, where this line appears: \r\n`let result = self.chain.verify_block_for_gossip(*block.clone());`\r\nSignedBeaconBlock<T> is wrapped in a Box, presumably because:\r\n2. we don't know how many messages a BeaconBlock will contain? \r\n\r\nAfter we clear up making `BlockError` generic over `Ethspec`, we get to bop the clone straight out of existence: \r\n`let result = self.chain.verify_block_for_gossip(*block);`\r\nAnd rustc is probably going to have some things to say, and I'll fiddle with the verify_block_for_gossip function to see if I can't fix them. That about right?\r\n\r\n\r\n0. I looked at the `EthSpec` trait, and it's pretty huge. What is the property of `EthSpec` that we are benefitting from by making `BlockError` generic over `Ethspec`? And then, \r\n1. Do I need to make ChainSegmentResult generic over EthSpec too? \r\n2. *skippable - do you pass `SignedBeaconBlock`  references inside a `Box` because the number of messages contained is not known at compile time?\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/sigp/lighthouse/issues/comments/628663600/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/sigp/lighthouse/issues/comments/629204208",
    "html_url": "https://github.com/sigp/lighthouse/issues/1028#issuecomment-629204208",
    "issue_url": "https://api.github.com/repos/sigp/lighthouse/issues/1028",
    "id": 629204208,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYyOTIwNDIwOA==",
    "user": {
      "login": "AgeManning",
      "id": 7454587,
      "node_id": "MDQ6VXNlcjc0NTQ1ODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7454587?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/AgeManning",
      "html_url": "https://github.com/AgeManning",
      "followers_url": "https://api.github.com/users/AgeManning/followers",
      "following_url": "https://api.github.com/users/AgeManning/following{/other_user}",
      "gists_url": "https://api.github.com/users/AgeManning/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/AgeManning/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/AgeManning/subscriptions",
      "organizations_url": "https://api.github.com/users/AgeManning/orgs",
      "repos_url": "https://api.github.com/users/AgeManning/repos",
      "events_url": "https://api.github.com/users/AgeManning/events{/privacy}",
      "received_events_url": "https://api.github.com/users/AgeManning/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-05-15T12:21:02Z",
    "updated_at": "2020-05-15T12:21:02Z",
    "author_association": "MEMBER",
    "body": "Let me answer these in some arbitrary high level order and then go back to some more specifics. \r\n\r\nThe whole EthSpec thing seems to be a point of confusion, and i don't blame you, it's pretty funky. At the crux of it, a `BeaconBlock` (and many other types) change their form depending on a specification. More concretely, we have a number of different specs, like a mainnet spec, a minimal spec an interop spec. Each of these specs change constants about eth2 consensus which affect the structure of a block. A minimal spec has less attestations allowed in it than say a block for mainnet. \r\nSo when we start a client we specify which spec we using. I.e `BeaconBlock<T>` where T is EthSpec which concretely could be a mainnet spec or a minimal spec, and these kinds of blocks would be different types/sizes etc. \r\n\r\nNow, `BlockError` only returns things like hashes and slots IIRC. If `BlockError` were to return a `BeaconBlock` also (or it's signed equivalent) then it too would have it's type change based on the spec because the variant `BlockError::ParentUnknown(BeaconBlock<T>)` would be a different type dependent on the Spec being used. \r\n\r\nHopefully this answers your question 0 above. \r\n\r\n1. From a generic rust point of view, the answer is no. For any function, you can do things like:\r\n```rust\r\n    pub fn to_block_error<T:EthSpec>(self) -> Result<(), BlockError<T>> {\r\n        match self {\r\n            ChainSegmentResult::Failed { error, .. } => Err(error),\r\n            ChainSegmentResult::Successful { .. } => Ok(()),\r\n        }\r\n    }\r\n```\r\nHowever depending on the logic, perhaps you want to make `ChainSegmentResult` generic over T as well. I'm not sure where abouts this is, so can't comment on that right now.\r\n\r\n2. A number of objects come from the network are sent through a channel via an Enum. If we had a enum like:\r\n```rust\r\nenum Thing {\r\n   A(BeaconBlock),\r\n   B(usize),\r\n```\r\n`Thing` would occupy the max size of either variant. So if we had B, it would consume in memory as much as a BeaconBlock, which could be quite large. If we Box BeaconBlock, then we are only storing a pointer to some heap memory and the total enum is small for all variants. So we have it as a box. \r\n\r\nNow, I think the core of this issue, is finding out where the block is being consumed when it fails with parent unknown. A quick look points me to the check starting [here](https://github.com/sigp/lighthouse/blob/stable-futures/beacon_node/beacon_chain/src/block_verification.rs#L289)\r\nThen this thing happens, which looks suspect: [load_parent](https://github.com/sigp/lighthouse/blob/stable-futures/beacon_node/beacon_chain/src/block_verification.rs#L320) but its only taking a borrow of the block. \r\n\r\nIt's [here](https://github.com/sigp/lighthouse/blob/stable-futures/beacon_node/beacon_chain/src/block_verification.rs#L747)\r\n\r\nand it errors [here](https://github.com/sigp/lighthouse/blob/stable-futures/beacon_node/beacon_chain/src/block_verification.rs#L764)\r\n\r\nIt seems to me, the solution would be to set `load_parent` to take a full block, not a borrow.. do its calculations and return the block on error and also on success so the rest of the calculations can be done on the block, if you follow\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/sigp/lighthouse/issues/comments/629204208/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/sigp/lighthouse/issues/comments/630788475",
    "html_url": "https://github.com/sigp/lighthouse/issues/1028#issuecomment-630788475",
    "issue_url": "https://api.github.com/repos/sigp/lighthouse/issues/1028",
    "id": 630788475,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYzMDc4ODQ3NQ==",
    "user": {
      "login": "thor314",
      "id": 7041313,
      "node_id": "MDQ6VXNlcjcwNDEzMTM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7041313?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/thor314",
      "html_url": "https://github.com/thor314",
      "followers_url": "https://api.github.com/users/thor314/followers",
      "following_url": "https://api.github.com/users/thor314/following{/other_user}",
      "gists_url": "https://api.github.com/users/thor314/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/thor314/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/thor314/subscriptions",
      "organizations_url": "https://api.github.com/users/thor314/orgs",
      "repos_url": "https://api.github.com/users/thor314/repos",
      "events_url": "https://api.github.com/users/thor314/events{/privacy}",
      "received_events_url": "https://api.github.com/users/thor314/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-05-19T12:35:17Z",
    "updated_at": "2020-05-19T12:35:17Z",
    "author_association": "CONTRIBUTOR",
    "body": "Okay, so I'm struggling in tracking down all the changes needed for making `BlockError` generic.\r\nHere's what I've done so far (I have a more detailed worklog file if details are important, this is a summary of that):\r\n1. *block.clone() -> *block\r\n```processor.rs\r\nlet result = self.chain.verify_block_for_gossip(*block.clone()); // to\r\nlet result = self.chain.verify_block_for_gossip(*block);\r\n```\r\n2. Let BlockError be generic over EthSpec\r\n```block_verification.rs\r\npub enum BlockError<T> {\r\n    /// The parent block was unknown.\r\n    ParentUnknown(Hash256),\r\n// change to\r\npub enum BlockError<T:EthSpec> {\r\n    /// The parent block was unknown.\r\n    ParentUnknown(Hash256),\r\n```\r\n3. deal with all 25 resulting instances of `error0107` (replace `BlockError` with `BlockError<T>` in a bunch of places, and trait bound `T` with `EthSpec` where not already bound\r\n4. deal with `E0207` in `BlockProcessingOutcome`:\r\n```block_processing_outcome.rs\r\npub enum BlockProcessingOutcome {\r\n...\r\n    /// The parent block was unknown.\r\n    ParentUnknown,\r\n...\r\nimpl BlockProcessingOutcome {\r\n    pub fn<T> shim(\r\n        result: Result<Hash256, BlockError>,\r\n   ) -> Result<BlockProcessingOutcome, BeaconChainError> {\r\n//to\r\npub enum<T:EthSpec> BlockProcessingOutcome<T> {\r\n...\r\n    /// The parent block was unknown.\r\n    ParentUnknown(T),\r\n...\r\nimpl BlockProcessingOutcome {\r\n    pub fn<T> shim(\r\n        result: Result<Hash256, BlockError<T>>,\r\n   ) -> Result<BlockProcessingOutcome<T>, BeaconChainError> {\r\n```\r\n\r\n5. Deal with E0277 (easy) and E0392 (confusing)\r\n`E0277`:  tried use a trait in a type that doesn't expect that trait.\r\n```block_verification.rs\r\n// Changing:\r\npub fn signature_verify_chain_segment<T: BeaconChainTypes>(\r\n// to \r\npub fn signature_verify_chain_segment<T: BeaconChainTypes + EthSpec>(\r\n```\r\ndone again in `check_block_against_finalized_slot`\r\n`check_block_relevancy`\r\n`load_parent`\r\nand\r\n\r\n`E0392`: A type or lifetime parameter has been declared but not used.\r\n```\r\n// Errors: \r\nbeacon_chain.rs\r\n76 | pub enum ChainSegmentResult<T: EthSpec> {\r\n   |                             ^ unused parameter\r\n\r\nblock_verification.rs\r\n88 | pub enum BlockError<T: EthSpec> {\r\n   |                     ^ unused parameter\r\n```\r\n\r\nI'm interpreting this to mean that I need to change the following:\r\n```block_verification.rs\r\npub enum BlockError<T:EthSpec> {\r\n    /// The parent block was unknown.\r\n    ParentUnknown(Hash256),\r\n// change to\r\npub enum BlockError<T:EthSpec> {\r\n    /// The parent block was unknown.\r\n    ParentUnknown(T),\r\n```\r\nand in fact that does solve both instances of `E0392`, but then dumps 44 new errors (some rather involved ones too) out, and by Occam's razor, I deduce that I may have simply done something dumb and/or misunderstood something.\r\n\r\nSome other questions that came up along the way:\r\n1. Is there a reason `cheap_state_advance_to_obtain_committees` (in `block_verification.rs`) is non-uniform to the rest of the codebase: generic over the generic over the letter `E` rather than `T`?\r\n2. I made `ChainSegmentResult` (in `beacon_chain.rs`) generic over `EthSpec`, so that I BlockError would have a generic argument available for `BlockError`. This increments the number of args `ChainSegmentResult` takes from 0 to 1. \r\n3. In `BlockProcessingOutcome` (block_processing_outcome.rs), I think I need to increase the number of arguments that `BlockProcessingOutcome` takes from 0 to 1, or else the enumerated `ParentUnknown(T)` type can't use the generic type for an argument\r\n4. If I'm making `BlockError` generic over `EthSpec`, while trying to keep ownership of the block in `ParentUnknown`, does `ParentUnknown(Hash256)` become  `ParentUnknown(T)` or stay the same? Or use an entirely different type?",
    "reactions": {
      "url": "https://api.github.com/repos/sigp/lighthouse/issues/comments/630788475/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/sigp/lighthouse/issues/comments/631167034",
    "html_url": "https://github.com/sigp/lighthouse/issues/1028#issuecomment-631167034",
    "issue_url": "https://api.github.com/repos/sigp/lighthouse/issues/1028",
    "id": 631167034,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYzMTE2NzAzNA==",
    "user": {
      "login": "AgeManning",
      "id": 7454587,
      "node_id": "MDQ6VXNlcjc0NTQ1ODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7454587?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/AgeManning",
      "html_url": "https://github.com/AgeManning",
      "followers_url": "https://api.github.com/users/AgeManning/followers",
      "following_url": "https://api.github.com/users/AgeManning/following{/other_user}",
      "gists_url": "https://api.github.com/users/AgeManning/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/AgeManning/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/AgeManning/subscriptions",
      "organizations_url": "https://api.github.com/users/AgeManning/orgs",
      "repos_url": "https://api.github.com/users/AgeManning/repos",
      "events_url": "https://api.github.com/users/AgeManning/events{/privacy}",
      "received_events_url": "https://api.github.com/users/AgeManning/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-05-20T00:44:43Z",
    "updated_at": "2020-05-20T00:44:43Z",
    "author_association": "MEMBER",
    "body": "Hey, to resolve all the issues with the generic type parameter, I threaded the generic parameter through to help you start. Its in #1174. \r\nI've made a `ParentUnknownCorrect` variant placeholder to show you what I was expecting. It should replace the `ParentUnknown` variant once complete (but with the same name). \r\n\r\nHope this gives a helping hand. ",
    "reactions": {
      "url": "https://api.github.com/repos/sigp/lighthouse/issues/comments/631167034/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/sigp/lighthouse/issues/comments/634017265",
    "html_url": "https://github.com/sigp/lighthouse/issues/1028#issuecomment-634017265",
    "issue_url": "https://api.github.com/repos/sigp/lighthouse/issues/1028",
    "id": 634017265,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYzNDAxNzI2NQ==",
    "user": {
      "login": "thor314",
      "id": 7041313,
      "node_id": "MDQ6VXNlcjcwNDEzMTM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7041313?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/thor314",
      "html_url": "https://github.com/thor314",
      "followers_url": "https://api.github.com/users/thor314/followers",
      "following_url": "https://api.github.com/users/thor314/following{/other_user}",
      "gists_url": "https://api.github.com/users/thor314/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/thor314/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/thor314/subscriptions",
      "organizations_url": "https://api.github.com/users/thor314/orgs",
      "repos_url": "https://api.github.com/users/thor314/repos",
      "events_url": "https://api.github.com/users/thor314/events{/privacy}",
      "received_events_url": "https://api.github.com/users/thor314/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-05-26T13:14:42Z",
    "updated_at": "2020-05-26T13:44:01Z",
    "author_association": "CONTRIBUTOR",
    "body": "Sorry on the delay, balancing this with finals. \r\n\r\n`ParentUnknownCorrect` expects a `SignedBeaconBlock`. The argument to `load_parent` is just a `BeaconBlock`, ie. the `message` without the `signature` of the `SignedBeaconBlock`. Shouldn't `ParentUnknownCorrect` should expect a `BeaconBlock` then, or should I wire up a new `load_parent_signed` function for this use case?\r\n\r\nMore explicitly:\r\n`GossipVerifiedBlock::new` takes a `SignedBeaconBlock`, and calls `load_parent` to borrow the block's `message` field, but not the `signature` field.\r\nthen, `load_parent` takes a borrowed `BeaconBlock` (NOT a `SignedBeaconBlock`), and if the Parent is unknown, returns a `ParentUnknown`, which used to wrap the block root, but we're modifying to return `ParentUnknownCorrect`, which wraps a `SignedBeaconBlock`. \r\n\r\nEdit: ignore just now, still sorting myself out\r\nEdit2: feeling sorted again. See above :)",
    "reactions": {
      "url": "https://api.github.com/repos/sigp/lighthouse/issues/comments/634017265/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/sigp/lighthouse/issues/comments/634377688",
    "html_url": "https://github.com/sigp/lighthouse/issues/1028#issuecomment-634377688",
    "issue_url": "https://api.github.com/repos/sigp/lighthouse/issues/1028",
    "id": 634377688,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYzNDM3NzY4OA==",
    "user": {
      "login": "AgeManning",
      "id": 7454587,
      "node_id": "MDQ6VXNlcjc0NTQ1ODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7454587?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/AgeManning",
      "html_url": "https://github.com/AgeManning",
      "followers_url": "https://api.github.com/users/AgeManning/followers",
      "following_url": "https://api.github.com/users/AgeManning/following{/other_user}",
      "gists_url": "https://api.github.com/users/AgeManning/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/AgeManning/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/AgeManning/subscriptions",
      "organizations_url": "https://api.github.com/users/AgeManning/orgs",
      "repos_url": "https://api.github.com/users/AgeManning/repos",
      "events_url": "https://api.github.com/users/AgeManning/events{/privacy}",
      "received_events_url": "https://api.github.com/users/AgeManning/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-05-27T01:50:30Z",
    "updated_at": "2020-05-27T01:50:30Z",
    "author_association": "MEMBER",
    "body": "Yes you're right. Make the load_parent accept a `SignedBeaconBlock` instead of just a `BeaconBlock`",
    "reactions": {
      "url": "https://api.github.com/repos/sigp/lighthouse/issues/comments/634377688/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/sigp/lighthouse/issues/comments/635822710",
    "html_url": "https://github.com/sigp/lighthouse/issues/1028#issuecomment-635822710",
    "issue_url": "https://api.github.com/repos/sigp/lighthouse/issues/1028",
    "id": 635822710,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYzNTgyMjcxMA==",
    "user": {
      "login": "thor314",
      "id": 7041313,
      "node_id": "MDQ6VXNlcjcwNDEzMTM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7041313?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/thor314",
      "html_url": "https://github.com/thor314",
      "followers_url": "https://api.github.com/users/thor314/followers",
      "following_url": "https://api.github.com/users/thor314/following{/other_user}",
      "gists_url": "https://api.github.com/users/thor314/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/thor314/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/thor314/subscriptions",
      "organizations_url": "https://api.github.com/users/thor314/orgs",
      "repos_url": "https://api.github.com/users/thor314/repos",
      "events_url": "https://api.github.com/users/thor314/events{/privacy}",
      "received_events_url": "https://api.github.com/users/thor314/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-05-29T07:56:32Z",
    "updated_at": "2020-06-02T07:33:09Z",
    "author_association": "CONTRIBUTOR",
    "body": "Okay, I'm getting stuck, but I think I can resolve that with some input. Here's what I've done:\r\nI copied `load_parent` into a separate function, `load_parent_correct`, updated in 2 places:\r\n* changed the signature from borrowing the block to taking ownership\r\n* changed the error return to return `ParentUnknownCorrect`.\r\nhttps://github.com/thor314/lighthouse/blob/issue1028/beacon_node/beacon_chain/src/block_verification.rs#L824\r\n```\r\n    block: BeaconBlock<T::EthSpec>,\r\n...\r\n    if !chain.fork_choice.contains_block(&block.parent_root) {\r\n        return Err(BlockError::ParentUnknownCorrect(Box::new(block)));\r\n```\r\nThis compiles. Now if I [plug in](https://github.com/thor314/lighthouse/blob/issue1028/beacon_node/beacon_chain/src/block_verification.rs#L324) `load_parent_correct` to `GossipVerifiedBlock::new`:\r\n`let mut parent = load_parent_correct(block.message, chain)?;`\r\nThen when `block.message` is used [50 lines later](https://github.com/thor314/lighthouse/blob/issue1028/beacon_node/beacon_chain/src/block_verification.rs#L370), we're fighting the borrow checker.\r\n\r\nHere's the problem: \r\nMy version of `load_parent_correct` is currently returning type `Result<BeaconSnapshot<T::EthSpec>, BlockError<T::EthSpec>>`\r\n\r\nwhere `BeaconSnapshot` is defined\r\n```\r\npub struct BeaconSnapshot<E: EthSpec> {\r\n    pub beacon_block: SignedBeaconBlock<E>,\r\n    pub beacon_block_root: Hash256,\r\n    pub beacon_state: BeaconState<E>,\r\n    pub beacon_state_root: Hash256,\r\n}\r\n```\r\nAnd [presently](hhttps://github.com/thor314/lighthouse/blob/issue1028/beacon_node/beacon_chain/src/block_verification.rs#L760) is only looking at the parent of the borrowed block, so it's dropping the block I just gave it ownership of when it returns the snapshot.\r\n\r\nHere's what I think I need to do: \r\nUpdate the signature of `load_parent_correct` from \r\n`Result<BeaconSnapshot<T::EthSpec>, BlockError<T::EthSpec>>`\r\nto a Result containing a tuple of BeaconSnapshot and BeaconBlock:\r\n`Result<(BeaconSnapshot<T::EthSpec>, BeaconBlock<T::EthSpec), BlockError<T::EthSpec>>`\r\nThis looks ugly to me, to have a Result wrapping a tuple, but I'm not sure what a better solution would be.\r\n**Q1: Is there something more idiomatic/consistent with the existing codebase?**\r\n\r\nIf I do that, I'm only using `load_parent_correct` in the `GossipVerifiedBlock::new`, but `load_parent` is used in some other places. \r\n**Q2: Should I only replace this one instance of load_parent, or all of them with load_parent_correct?**\r\n**Q2.1: if only this one instance, I should rename \"blah_correct\" to something like \"blah_takes_and_returns\", yeah?**",
    "reactions": {
      "url": "https://api.github.com/repos/sigp/lighthouse/issues/comments/635822710/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/sigp/lighthouse/issues/comments/636896974",
    "html_url": "https://github.com/sigp/lighthouse/issues/1028#issuecomment-636896974",
    "issue_url": "https://api.github.com/repos/sigp/lighthouse/issues/1028",
    "id": 636896974,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYzNjg5Njk3NA==",
    "user": {
      "login": "divagant-martian",
      "id": 26765164,
      "node_id": "MDQ6VXNlcjI2NzY1MTY0",
      "avatar_url": "https://avatars.githubusercontent.com/u/26765164?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/divagant-martian",
      "html_url": "https://github.com/divagant-martian",
      "followers_url": "https://api.github.com/users/divagant-martian/followers",
      "following_url": "https://api.github.com/users/divagant-martian/following{/other_user}",
      "gists_url": "https://api.github.com/users/divagant-martian/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/divagant-martian/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/divagant-martian/subscriptions",
      "organizations_url": "https://api.github.com/users/divagant-martian/orgs",
      "repos_url": "https://api.github.com/users/divagant-martian/repos",
      "events_url": "https://api.github.com/users/divagant-martian/events{/privacy}",
      "received_events_url": "https://api.github.com/users/divagant-martian/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-06-01T14:37:53Z",
    "updated_at": "2020-06-01T14:37:53Z",
    "author_association": "COLLABORATOR",
    "body": "Hi @thor314 , where are you working on this if may I ask? went lurking to your fork but I couldn't get to a branch, and most links on your last comment go to the `stable-futures` branch which no longer exists",
    "reactions": {
      "url": "https://api.github.com/repos/sigp/lighthouse/issues/comments/636896974/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/sigp/lighthouse/issues/comments/637339483",
    "html_url": "https://github.com/sigp/lighthouse/issues/1028#issuecomment-637339483",
    "issue_url": "https://api.github.com/repos/sigp/lighthouse/issues/1028",
    "id": 637339483,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYzNzMzOTQ4Mw==",
    "user": {
      "login": "thor314",
      "id": 7041313,
      "node_id": "MDQ6VXNlcjcwNDEzMTM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7041313?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/thor314",
      "html_url": "https://github.com/thor314",
      "followers_url": "https://api.github.com/users/thor314/followers",
      "following_url": "https://api.github.com/users/thor314/following{/other_user}",
      "gists_url": "https://api.github.com/users/thor314/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/thor314/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/thor314/subscriptions",
      "organizations_url": "https://api.github.com/users/thor314/orgs",
      "repos_url": "https://api.github.com/users/thor314/repos",
      "events_url": "https://api.github.com/users/thor314/events{/privacy}",
      "received_events_url": "https://api.github.com/users/thor314/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-06-02T07:12:51Z",
    "updated_at": "2020-06-02T07:33:40Z",
    "author_association": "CONTRIBUTOR",
    "body": "@divagant-martian Ah, I'm still getting used to a git workflow. It should be up to date now. I'm updating all the links from my prev comment now, to point to the right stuff. K, links updated to be in my fork of the repo.",
    "reactions": {
      "url": "https://api.github.com/repos/sigp/lighthouse/issues/comments/637339483/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/sigp/lighthouse/issues/comments/638862480",
    "html_url": "https://github.com/sigp/lighthouse/issues/1028#issuecomment-638862480",
    "issue_url": "https://api.github.com/repos/sigp/lighthouse/issues/1028",
    "id": 638862480,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYzODg2MjQ4MA==",
    "user": {
      "login": "divagant-martian",
      "id": 26765164,
      "node_id": "MDQ6VXNlcjI2NzY1MTY0",
      "avatar_url": "https://avatars.githubusercontent.com/u/26765164?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/divagant-martian",
      "html_url": "https://github.com/divagant-martian",
      "followers_url": "https://api.github.com/users/divagant-martian/followers",
      "following_url": "https://api.github.com/users/divagant-martian/following{/other_user}",
      "gists_url": "https://api.github.com/users/divagant-martian/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/divagant-martian/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/divagant-martian/subscriptions",
      "organizations_url": "https://api.github.com/users/divagant-martian/orgs",
      "repos_url": "https://api.github.com/users/divagant-martian/repos",
      "events_url": "https://api.github.com/users/divagant-martian/events{/privacy}",
      "received_events_url": "https://api.github.com/users/divagant-martian/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-06-04T13:52:20Z",
    "updated_at": "2020-06-04T13:52:20Z",
    "author_association": "COLLABORATOR",
    "body": "Hi, answering your questions:\r\n- 1. Making the result's happy path to be a tuple is ok. I think this is what you should do\r\n- 2. Update all `load_parent` appearances. I don't think you need to rename it, just update the docs.\r\n\r\nAlso, if you check, all calls to `load_parent` are over `block.message` where `block` is of type `SignedBeaconBlock` and message, of type `BeaconBlock`. To avoid moving the block/message out of the signed block if would be easier to make `load_parent` receive the whole signed block instead of just the block. Otherwise, if the signed block is used later you would need to reconstruct it from the block and signature of the original signed block. Maybe check where it's called and decide if it's better to send it as a whole or not. In any case, since the `ParentUnknown(Correct)` error is constructed from the block that `load_parent` receives, their types (of the block) should match.\r\n\r\nLet me know if you run into issues ",
    "reactions": {
      "url": "https://api.github.com/repos/sigp/lighthouse/issues/comments/638862480/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/sigp/lighthouse/issues/comments/638864732",
    "html_url": "https://github.com/sigp/lighthouse/issues/1028#issuecomment-638864732",
    "issue_url": "https://api.github.com/repos/sigp/lighthouse/issues/1028",
    "id": 638864732,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYzODg2NDczMg==",
    "user": {
      "login": "divagant-martian",
      "id": 26765164,
      "node_id": "MDQ6VXNlcjI2NzY1MTY0",
      "avatar_url": "https://avatars.githubusercontent.com/u/26765164?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/divagant-martian",
      "html_url": "https://github.com/divagant-martian",
      "followers_url": "https://api.github.com/users/divagant-martian/followers",
      "following_url": "https://api.github.com/users/divagant-martian/following{/other_user}",
      "gists_url": "https://api.github.com/users/divagant-martian/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/divagant-martian/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/divagant-martian/subscriptions",
      "organizations_url": "https://api.github.com/users/divagant-martian/orgs",
      "repos_url": "https://api.github.com/users/divagant-martian/repos",
      "events_url": "https://api.github.com/users/divagant-martian/events{/privacy}",
      "received_events_url": "https://api.github.com/users/divagant-martian/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-06-04T13:55:07Z",
    "updated_at": "2020-06-04T13:55:07Z",
    "author_association": "COLLABORATOR",
    "body": "Also probably wrap the block in a Box since those are thick boys",
    "reactions": {
      "url": "https://api.github.com/repos/sigp/lighthouse/issues/comments/638864732/reactions",
      "total_count": 4,
      "+1": 0,
      "-1": 0,
      "laugh": 4,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
