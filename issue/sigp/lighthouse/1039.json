{
  "url": "https://api.github.com/repos/sigp/lighthouse/issues/1039",
  "repository_url": "https://api.github.com/repos/sigp/lighthouse",
  "labels_url": "https://api.github.com/repos/sigp/lighthouse/issues/1039/labels{/name}",
  "comments_url": "https://api.github.com/repos/sigp/lighthouse/issues/1039/comments",
  "events_url": "https://api.github.com/repos/sigp/lighthouse/issues/1039/events",
  "html_url": "https://github.com/sigp/lighthouse/issues/1039",
  "id": 604549895,
  "node_id": "MDU6SXNzdWU2MDQ1NDk4OTU=",
  "number": 1039,
  "title": "Attn processing: distinguishing between old blocks and unknown blocks",
  "user": {
    "login": "paulhauner",
    "id": 6660660,
    "node_id": "MDQ6VXNlcjY2NjA2NjA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6660660?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/paulhauner",
    "html_url": "https://github.com/paulhauner",
    "followers_url": "https://api.github.com/users/paulhauner/followers",
    "following_url": "https://api.github.com/users/paulhauner/following{/other_user}",
    "gists_url": "https://api.github.com/users/paulhauner/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/paulhauner/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/paulhauner/subscriptions",
    "organizations_url": "https://api.github.com/users/paulhauner/orgs",
    "repos_url": "https://api.github.com/users/paulhauner/repos",
    "events_url": "https://api.github.com/users/paulhauner/events{/privacy}",
    "received_events_url": "https://api.github.com/users/paulhauner/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 2034355093,
      "node_id": "MDU6TGFiZWwyMDM0MzU1MDkz",
      "url": "https://api.github.com/repos/sigp/lighthouse/labels/consensus",
      "name": "consensus",
      "color": "5e59bf",
      "default": false,
      "description": "An issue/PR that touches consensus code, such as state_processing or block verification."
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 1,
  "created_at": "2020-04-22T08:13:02Z",
  "updated_at": "2022-11-09T05:01:56Z",
  "closed_at": "2020-11-08T23:21:48Z",
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "## Description\r\n\r\nSo currently our attestation processing code uses fork choice to determine if an `attestation.data.beacon_block_root` is known:\r\n\r\nhttps://github.com/sigp/lighthouse/blob/9c3f76a33b41cbcfd30a710753ff0284f743f701/beacon_node/beacon_chain/src/beacon_chain.rs#L900-L913\r\n\r\nThis is nice and fast, however it can't determine between:\r\n\r\n- A block that is unknown.\r\n- A block that is pre-finalization.\r\n\r\nIn normal circumstances, this is fine. However, consider the following attestation for slot `attn_slot` where our chain is finalized at slot `finalized_slot`:\r\n\r\n- `attestation.data.slot = attn_slot`\r\n- `attestation.data.beacon_block_root = finalized_slot - 1`\r\n\r\nThis attestation is valid since the validator might indeed have their head at `finalized_slot - 1`.\r\n\r\nThe problem is that we can't expect `finalized_slot - 1` to be in our fork choice anymore, so we'll report back saying that the block is unknown when it might actually be known. So here's how this might eventuate into a loop:\r\n\r\n1. We get the `attestation` from the original example\r\n1. We process it and get `ParentUnknown(parent_root)`\r\n1. We store the `attestation` and ask the peer for `parent_root`\r\n1. The peer gives us the `parent_root` and when we process it we determine that we already know this block.\r\n1. We decide that since we know this block, we can process the `attestation` now.\r\n1. GOTO 1\r\n\r\nSo the obvious solution might be to say that if fork-choice doesn't know the block then we do a database lookup. However, this doesn't work so well when it comes to a weak-subjectivity sync. If `finalized_slot - 1` happens to be _prior_ to our first weak subjectivity sync, then we'll also find that we don't actually know the block that's being pointed to this time.\r\n\r\n## Solution\r\n\r\nI think the solution here is to make sure that if we attempt to process a block that is prior to finalization, we ensure we return an error indicating the the block is prior to finalization _before_ we indicate if we already know it. In such a case we could decide that since the block is prior to finalization there's no point in processing the attestation anyway.\r\n\r\nThere's another edge case here though regarding validator profits. It might be that the `attestation` has the correct `source` and could provide value to a block producer. This would have to mean that the attestation is not honestly/correctly formed. I'm tempted to just forgo the reward in this case because the complexity to handle it is more of a risk than the edge-case reward pays.\r\n\r\n",
  "closed_by": {
    "login": "paulhauner",
    "id": 6660660,
    "node_id": "MDQ6VXNlcjY2NjA2NjA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6660660?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/paulhauner",
    "html_url": "https://github.com/paulhauner",
    "followers_url": "https://api.github.com/users/paulhauner/followers",
    "following_url": "https://api.github.com/users/paulhauner/following{/other_user}",
    "gists_url": "https://api.github.com/users/paulhauner/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/paulhauner/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/paulhauner/subscriptions",
    "organizations_url": "https://api.github.com/users/paulhauner/orgs",
    "repos_url": "https://api.github.com/users/paulhauner/repos",
    "events_url": "https://api.github.com/users/paulhauner/events{/privacy}",
    "received_events_url": "https://api.github.com/users/paulhauner/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/sigp/lighthouse/issues/1039/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/sigp/lighthouse/issues/1039/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/sigp/lighthouse/issues/comments/723681664",
    "html_url": "https://github.com/sigp/lighthouse/issues/1039#issuecomment-723681664",
    "issue_url": "https://api.github.com/repos/sigp/lighthouse/issues/1039",
    "id": 723681664,
    "node_id": "MDEyOklzc3VlQ29tbWVudDcyMzY4MTY2NA==",
    "user": {
      "login": "paulhauner",
      "id": 6660660,
      "node_id": "MDQ6VXNlcjY2NjA2NjA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6660660?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/paulhauner",
      "html_url": "https://github.com/paulhauner",
      "followers_url": "https://api.github.com/users/paulhauner/followers",
      "following_url": "https://api.github.com/users/paulhauner/following{/other_user}",
      "gists_url": "https://api.github.com/users/paulhauner/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/paulhauner/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/paulhauner/subscriptions",
      "organizations_url": "https://api.github.com/users/paulhauner/orgs",
      "repos_url": "https://api.github.com/users/paulhauner/repos",
      "events_url": "https://api.github.com/users/paulhauner/events{/privacy}",
      "received_events_url": "https://api.github.com/users/paulhauner/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-11-08T23:21:48Z",
    "updated_at": "2020-11-08T23:21:48Z",
    "author_association": "MEMBER",
    "body": "Closing since this logic has been revised since I opened the issue.",
    "reactions": {
      "url": "https://api.github.com/repos/sigp/lighthouse/issues/comments/723681664/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
