{
  "url": "https://api.github.com/repos/sigp/lighthouse/issues/367",
  "repository_url": "https://api.github.com/repos/sigp/lighthouse",
  "labels_url": "https://api.github.com/repos/sigp/lighthouse/issues/367/labels{/name}",
  "comments_url": "https://api.github.com/repos/sigp/lighthouse/issues/367/comments",
  "events_url": "https://api.github.com/repos/sigp/lighthouse/issues/367/events",
  "html_url": "https://github.com/sigp/lighthouse/issues/367",
  "id": 441030085,
  "node_id": "MDU6SXNzdWU0NDEwMzAwODU=",
  "number": 367,
  "title": "Fixed-length SSZ lists",
  "user": {
    "login": "paulhauner",
    "id": 6660660,
    "node_id": "MDQ6VXNlcjY2NjA2NjA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6660660?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/paulhauner",
    "html_url": "https://github.com/paulhauner",
    "followers_url": "https://api.github.com/users/paulhauner/followers",
    "following_url": "https://api.github.com/users/paulhauner/following{/other_user}",
    "gists_url": "https://api.github.com/users/paulhauner/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/paulhauner/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/paulhauner/subscriptions",
    "organizations_url": "https://api.github.com/users/paulhauner/orgs",
    "repos_url": "https://api.github.com/users/paulhauner/repos",
    "events_url": "https://api.github.com/users/paulhauner/events{/privacy}",
    "received_events_url": "https://api.github.com/users/paulhauner/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 1232620456,
      "node_id": "MDU6TGFiZWwxMjMyNjIwNDU2",
      "url": "https://api.github.com/repos/sigp/lighthouse/labels/RFC",
      "name": "RFC",
      "color": "4aaa19",
      "default": false,
      "description": "Request for comment"
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 3,
  "created_at": "2019-05-07T05:10:00Z",
  "updated_at": "2019-05-13T05:16:04Z",
  "closed_at": "2019-05-13T05:16:04Z",
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "## Description\r\n\r\nDuring #364 I have come across an issue with how we deal with spec \"constants\".\r\n\r\n## Summary\r\n\r\nWhen SSZ decoding some bytes into a `BeaconState`, we must know the length of any fixed-length list (e.g., `latest_randao_mixes`, `current_crosslinks`, etc) in order to decode it.\r\n\r\nPresently we have these lists as variable-length `Vec` and we have a chicken/egg problem where we don't know how long the list is until we decode it and we can't decode the list without knowing how long it is.\r\n\r\n## Detail\r\n\r\nThe following `BeaconState` fields have this issue:\r\n\r\n```python\r\n    ...\r\n    'latest_randao_mixes': ['bytes32', LATEST_RANDAO_MIXES_LENGTH],\r\n    ...\r\n    'current_crosslinks': [Crosslink, SHARD_COUNT],\r\n    'previous_crosslinks': [Crosslink, SHARD_COUNT],\r\n    'latest_block_roots': ['bytes32', SLOTS_PER_HISTORICAL_ROOT],\r\n    'latest_state_roots': ['bytes32', SLOTS_PER_HISTORICAL_ROOT],\r\n    'latest_active_index_roots': ['bytes32', LATEST_ACTIVE_INDEX_ROOTS_LENGTH],\r\n    'latest_slashed_balances': ['uint64', LATEST_SLASHED_EXIT_LENGTH],  # Balances slashed at every withdrawal period\r\n    ...\r\n```\r\n\r\nHere are some solutions to this issue:\r\n\r\n1. Hard-code the required list-lengths as `const`.\r\n2. Modify our SSZ impl such that some \"context\" is passed around allowing us to determine how big each list should be.\r\n3. Implement a custom decode method for `BeaconState` such that some context is passed (e.g., `ChainSpec`) that allows determining the length of these fields (this is basically (2) but special-cased for `BeaconState`).\r\n4. Make `BeaconState` generic across all list lengths and make them concrete when we instantiate a chain. There's a [rust playground](https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=dd30f998954155767c0d73772b681e2b) here to demonstrate.\r\n\r\n## My Preference\r\n\r\nI prefer (4) for the following reasons:\r\n - Maintains the ability to choose \"constants\" at runtime, as opposed to (1).\r\n - Keeps SSZ clean and doesn't require some nasty lookups to some \"context\" being passed around the decoder, as in (2).\r\n - Maintains a single, canonical method for de-serializing objects -- `Type::from_ssz_bytes(..)`. Doing (3) breaks this.\r\n\r\nDownsides to (4):\r\n - Makes our `BeaconChain` definition a bit more complex (still peanuts compared to rust-libp2p, lol)\r\n- Ergonomics -- all functions that deal with `BeaconState` need to be generic across those different array lengths. (As you can see in the playground link above, we can bundle them all into one trait, so you just need to specify `BeaconState<T> where T: Bundle`).\r\n\r\nAdditional upsides to (4):\r\n - We get a bit more type safety -- fixed-length lists can never be the wrong size (that's possible now).\r\n - Some more stuff lives on the stack instead of the heap (not a big deal.. huge lists might need to live in the heap anyway)",
  "closed_by": {
    "login": "paulhauner",
    "id": 6660660,
    "node_id": "MDQ6VXNlcjY2NjA2NjA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6660660?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/paulhauner",
    "html_url": "https://github.com/paulhauner",
    "followers_url": "https://api.github.com/users/paulhauner/followers",
    "following_url": "https://api.github.com/users/paulhauner/following{/other_user}",
    "gists_url": "https://api.github.com/users/paulhauner/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/paulhauner/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/paulhauner/subscriptions",
    "organizations_url": "https://api.github.com/users/paulhauner/orgs",
    "repos_url": "https://api.github.com/users/paulhauner/repos",
    "events_url": "https://api.github.com/users/paulhauner/events{/privacy}",
    "received_events_url": "https://api.github.com/users/paulhauner/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/sigp/lighthouse/issues/367/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/sigp/lighthouse/issues/367/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/sigp/lighthouse/issues/comments/489912276",
    "html_url": "https://github.com/sigp/lighthouse/issues/367#issuecomment-489912276",
    "issue_url": "https://api.github.com/repos/sigp/lighthouse/issues/367",
    "id": 489912276,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ4OTkxMjI3Ng==",
    "user": {
      "login": "AgeManning",
      "id": 7454587,
      "node_id": "MDQ6VXNlcjc0NTQ1ODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7454587?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/AgeManning",
      "html_url": "https://github.com/AgeManning",
      "followers_url": "https://api.github.com/users/AgeManning/followers",
      "following_url": "https://api.github.com/users/AgeManning/following{/other_user}",
      "gists_url": "https://api.github.com/users/AgeManning/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/AgeManning/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/AgeManning/subscriptions",
      "organizations_url": "https://api.github.com/users/AgeManning/orgs",
      "repos_url": "https://api.github.com/users/AgeManning/repos",
      "events_url": "https://api.github.com/users/AgeManning/events{/privacy}",
      "received_events_url": "https://api.github.com/users/AgeManning/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-05-07T05:19:35Z",
    "updated_at": "2019-05-07T05:19:35Z",
    "author_association": "MEMBER",
    "body": "(4) - combined with a macro seems like a good solution to me",
    "reactions": {
      "url": "https://api.github.com/repos/sigp/lighthouse/issues/comments/489912276/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/sigp/lighthouse/issues/comments/489921593",
    "html_url": "https://github.com/sigp/lighthouse/issues/367#issuecomment-489921593",
    "issue_url": "https://api.github.com/repos/sigp/lighthouse/issues/367",
    "id": 489921593,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ4OTkyMTU5Mw==",
    "user": {
      "login": "paulhauner",
      "id": 6660660,
      "node_id": "MDQ6VXNlcjY2NjA2NjA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6660660?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/paulhauner",
      "html_url": "https://github.com/paulhauner",
      "followers_url": "https://api.github.com/users/paulhauner/followers",
      "following_url": "https://api.github.com/users/paulhauner/following{/other_user}",
      "gists_url": "https://api.github.com/users/paulhauner/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/paulhauner/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/paulhauner/subscriptions",
      "organizations_url": "https://api.github.com/users/paulhauner/orgs",
      "repos_url": "https://api.github.com/users/paulhauner/repos",
      "events_url": "https://api.github.com/users/paulhauner/events{/privacy}",
      "received_events_url": "https://api.github.com/users/paulhauner/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-05-07T06:08:07Z",
    "updated_at": "2019-05-07T06:08:07Z",
    "author_association": "MEMBER",
    "body": "I have verbal approval for (4) from @michaelsproul so I'll go ahead and create a PR for it.",
    "reactions": {
      "url": "https://api.github.com/repos/sigp/lighthouse/issues/comments/489921593/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/sigp/lighthouse/issues/comments/489930583",
    "html_url": "https://github.com/sigp/lighthouse/issues/367#issuecomment-489930583",
    "issue_url": "https://api.github.com/repos/sigp/lighthouse/issues/367",
    "id": 489930583,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ4OTkzMDU4Mw==",
    "user": {
      "login": "michaelsproul",
      "id": 4452260,
      "node_id": "MDQ6VXNlcjQ0NTIyNjA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4452260?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/michaelsproul",
      "html_url": "https://github.com/michaelsproul",
      "followers_url": "https://api.github.com/users/michaelsproul/followers",
      "following_url": "https://api.github.com/users/michaelsproul/following{/other_user}",
      "gists_url": "https://api.github.com/users/michaelsproul/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/michaelsproul/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/michaelsproul/subscriptions",
      "organizations_url": "https://api.github.com/users/michaelsproul/orgs",
      "repos_url": "https://api.github.com/users/michaelsproul/repos",
      "events_url": "https://api.github.com/users/michaelsproul/events{/privacy}",
      "received_events_url": "https://api.github.com/users/michaelsproul/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-05-07T06:46:26Z",
    "updated_at": "2019-05-07T06:46:26Z",
    "author_association": "MEMBER",
    "body": "Yep, I'm in favour of (4) so long as we limit the number of type parameters introduced on Beacon State to 1.\r\n\r\nI also think we should consider using `typenum`/`generic_array` to reduce the amount of boilerplate we have to write. My PoC for this is here, including boxing the array so it's stored on the heap: https://gist.github.com/michaelsproul/2c8e0d68617c736352ce9f4055cb295b\r\n\r\nThe only thing we lose by implementing (4) is the ability to load _arbitrary_ `ChainSpec`s at runtime and instantiate a `BeaconState` , although I don't think that is a great loss – for our purposes a handful of parameter bundles should be sufficient (foundation, testing small, testing big, etc).",
    "reactions": {
      "url": "https://api.github.com/repos/sigp/lighthouse/issues/comments/489930583/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
