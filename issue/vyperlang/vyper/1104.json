{
  "url": "https://api.github.com/repos/vyperlang/vyper/issues/1104",
  "repository_url": "https://api.github.com/repos/vyperlang/vyper",
  "labels_url": "https://api.github.com/repos/vyperlang/vyper/issues/1104/labels{/name}",
  "comments_url": "https://api.github.com/repos/vyperlang/vyper/issues/1104/comments",
  "events_url": "https://api.github.com/repos/vyperlang/vyper/issues/1104/events",
  "html_url": "https://github.com/vyperlang/vyper/issues/1104",
  "id": 384928701,
  "node_id": "MDU6SXNzdWUzODQ5Mjg3MDE=",
  "number": 1104,
  "title": "help with raw_call",
  "user": {
    "login": "asiva",
    "id": 7215279,
    "node_id": "MDQ6VXNlcjcyMTUyNzk=",
    "avatar_url": "https://avatars.githubusercontent.com/u/7215279?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/asiva",
    "html_url": "https://github.com/asiva",
    "followers_url": "https://api.github.com/users/asiva/followers",
    "following_url": "https://api.github.com/users/asiva/following{/other_user}",
    "gists_url": "https://api.github.com/users/asiva/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/asiva/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/asiva/subscriptions",
    "organizations_url": "https://api.github.com/users/asiva/orgs",
    "repos_url": "https://api.github.com/users/asiva/repos",
    "events_url": "https://api.github.com/users/asiva/events{/privacy}",
    "received_events_url": "https://api.github.com/users/asiva/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 6,
  "created_at": "2018-11-27T18:28:44Z",
  "updated_at": "2018-11-28T12:17:54Z",
  "closed_at": "2018-11-28T12:17:54Z",
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "Not sure if this is the right to ask for help.\r\n\r\nI'd like to call a constant function on one contract (X) from another contract (Y). I have the ABI and address for X. X and Y are both on Ropsten. I can interact with X fine using, for example, MEW.\r\n\r\nHere is the code for X:\r\n\r\n```\r\n@public\r\n@constant\r\ndef read() -> bytes32:\r\n    return 0x0000000000000000000000000000000000000000000000059f43ef8557c30000\r\n```\r\n\r\nAnd the ABI:\r\n```\r\n[{\"name\": \"read\", \"outputs\": [{\"type\": \"bytes32\", \"name\": \"out\"}], \"inputs\": [], \"constant\": true, \"payable\": false, \"type\": \"function\", \"gas\": 283}]\r\n```\r\nContract Y looks like this:\r\n```\r\nfeedaddress: public(address)\r\nfeed: public(bytes[32])\r\n\r\n@public\r\ndef __init__():\r\n    self.feedaddress = 0xAb3F6737b0cf41e8a6AE297A3833021f8af2a3aC\r\n\r\n@public\r\ndef myread():\r\n    self.feed = raw_call(self.feedaddress, 'read', outsize=32, gas=msg.gas)\r\n\r\n@public\r\ndef setfeedaddress(_new: address):\r\n    self.feedaddress = _new\r\n```\r\nIt returns \"Warning! Error encountered during contract execution [Reverted]\" on etherscan. I've used ```raw_call(self.feedaddress, 'x57xdex26xa4', outsize=32, gas=msg.gas)``` as well as '0x57de26a4' and '57de26a4' which is the first four bytes of keccak256 as per the [documentation](https://vyper.readthedocs.io/en/latest/built-in-functions.html#raw-call) with plenty of gas and all return the same error as above. \r\n\r\nWhat am I doing wrong?",
  "closed_by": {
    "login": "asiva",
    "id": 7215279,
    "node_id": "MDQ6VXNlcjcyMTUyNzk=",
    "avatar_url": "https://avatars.githubusercontent.com/u/7215279?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/asiva",
    "html_url": "https://github.com/asiva",
    "followers_url": "https://api.github.com/users/asiva/followers",
    "following_url": "https://api.github.com/users/asiva/following{/other_user}",
    "gists_url": "https://api.github.com/users/asiva/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/asiva/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/asiva/subscriptions",
    "organizations_url": "https://api.github.com/users/asiva/orgs",
    "repos_url": "https://api.github.com/users/asiva/repos",
    "events_url": "https://api.github.com/users/asiva/events{/privacy}",
    "received_events_url": "https://api.github.com/users/asiva/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/1104/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/vyperlang/vyper/issues/1104/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/442166405",
    "html_url": "https://github.com/vyperlang/vyper/issues/1104#issuecomment-442166405",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/1104",
    "id": 442166405,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0MjE2NjQwNQ==",
    "user": {
      "login": "fubuloubu",
      "id": 3859395,
      "node_id": "MDQ6VXNlcjM4NTkzOTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3859395?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fubuloubu",
      "html_url": "https://github.com/fubuloubu",
      "followers_url": "https://api.github.com/users/fubuloubu/followers",
      "following_url": "https://api.github.com/users/fubuloubu/following{/other_user}",
      "gists_url": "https://api.github.com/users/fubuloubu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fubuloubu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fubuloubu/subscriptions",
      "organizations_url": "https://api.github.com/users/fubuloubu/orgs",
      "repos_url": "https://api.github.com/users/fubuloubu/repos",
      "events_url": "https://api.github.com/users/fubuloubu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fubuloubu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-27T18:29:48Z",
    "updated_at": "2018-11-27T18:29:48Z",
    "author_association": "MEMBER",
    "body": "Should it be `read()` for the signature?",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/442166405/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/442167006",
    "html_url": "https://github.com/vyperlang/vyper/issues/1104#issuecomment-442167006",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/1104",
    "id": 442167006,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0MjE2NzAwNg==",
    "user": {
      "login": "asiva",
      "id": 7215279,
      "node_id": "MDQ6VXNlcjcyMTUyNzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7215279?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/asiva",
      "html_url": "https://github.com/asiva",
      "followers_url": "https://api.github.com/users/asiva/followers",
      "following_url": "https://api.github.com/users/asiva/following{/other_user}",
      "gists_url": "https://api.github.com/users/asiva/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/asiva/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/asiva/subscriptions",
      "organizations_url": "https://api.github.com/users/asiva/orgs",
      "repos_url": "https://api.github.com/users/asiva/repos",
      "events_url": "https://api.github.com/users/asiva/events{/privacy}",
      "received_events_url": "https://api.github.com/users/asiva/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-27T18:31:45Z",
    "updated_at": "2018-11-27T18:47:01Z",
    "author_association": "NONE",
    "body": "I've tried that as a string. Actually the keccak examples are for \"read()\". I've also tried keccak for \"read\" with no progress.",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/442167006/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/442374172",
    "html_url": "https://github.com/vyperlang/vyper/issues/1104#issuecomment-442374172",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/1104",
    "id": 442374172,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0MjM3NDE3Mg==",
    "user": {
      "login": "jacqueswww",
      "id": 6917456,
      "node_id": "MDQ6VXNlcjY5MTc0NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6917456?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jacqueswww",
      "html_url": "https://github.com/jacqueswww",
      "followers_url": "https://api.github.com/users/jacqueswww/followers",
      "following_url": "https://api.github.com/users/jacqueswww/following{/other_user}",
      "gists_url": "https://api.github.com/users/jacqueswww/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jacqueswww/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jacqueswww/subscriptions",
      "organizations_url": "https://api.github.com/users/jacqueswww/orgs",
      "repos_url": "https://api.github.com/users/jacqueswww/repos",
      "events_url": "https://api.github.com/users/jacqueswww/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jacqueswww/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-28T09:12:42Z",
    "updated_at": "2018-11-28T09:12:42Z",
    "author_association": "CONTRIBUTOR",
    "body": "@asiva You probably want to use method_id() for the function signature. I am just curious, but do you need raw_call specifically in this case, wouldn't a contract interface suffice?",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/442374172/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/442380103",
    "html_url": "https://github.com/vyperlang/vyper/issues/1104#issuecomment-442380103",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/1104",
    "id": 442380103,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0MjM4MDEwMw==",
    "user": {
      "login": "asiva",
      "id": 7215279,
      "node_id": "MDQ6VXNlcjcyMTUyNzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7215279?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/asiva",
      "html_url": "https://github.com/asiva",
      "followers_url": "https://api.github.com/users/asiva/followers",
      "following_url": "https://api.github.com/users/asiva/following{/other_user}",
      "gists_url": "https://api.github.com/users/asiva/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/asiva/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/asiva/subscriptions",
      "organizations_url": "https://api.github.com/users/asiva/orgs",
      "repos_url": "https://api.github.com/users/asiva/repos",
      "events_url": "https://api.github.com/users/asiva/events{/privacy}",
      "received_events_url": "https://api.github.com/users/asiva/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-28T09:31:48Z",
    "updated_at": "2018-11-28T09:31:48Z",
    "author_association": "NONE",
    "body": "Thanks @jacqueswww . The code above is for testing purposes. I'd like in the end to make use of a solidity based contract that's already live. My current understanding is that contract interfaces are for use with vyper contracts that are compiled together. Is that right?\r\n\r\nAny illustration on how to use a method_id() would be great.\r\n\r\nI see this code [from a test](https://github.com/ethereum/vyper/blob/d2e077a19bb1d6e855c1e3c62a2cfca7fea9f2e6/tests/parser/functions/test_method_id.py):\r\n\r\n`ans: bytes[32] = raw_call(self, concat(method_id(\"double(int128)\", bytes[4]), convert(5, bytes32)), gas=50000, outsize=32)\r\n`\r\n\r\nBut I am not sure how it works.",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/442380103/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/442387345",
    "html_url": "https://github.com/vyperlang/vyper/issues/1104#issuecomment-442387345",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/1104",
    "id": 442387345,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0MjM4NzM0NQ==",
    "user": {
      "login": "jacqueswww",
      "id": 6917456,
      "node_id": "MDQ6VXNlcjY5MTc0NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6917456?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jacqueswww",
      "html_url": "https://github.com/jacqueswww",
      "followers_url": "https://api.github.com/users/jacqueswww/followers",
      "following_url": "https://api.github.com/users/jacqueswww/following{/other_user}",
      "gists_url": "https://api.github.com/users/jacqueswww/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jacqueswww/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jacqueswww/subscriptions",
      "organizations_url": "https://api.github.com/users/jacqueswww/orgs",
      "repos_url": "https://api.github.com/users/jacqueswww/repos",
      "events_url": "https://api.github.com/users/jacqueswww/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jacqueswww/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-28T09:54:58Z",
    "updated_at": "2018-11-28T09:58:17Z",
    "author_association": "CONTRIBUTOR",
    "body": "Contract interfaces are ABI compatible so you can use them ;)\r\n```python\r\ncontract Test:\r\n    def read(a: bytes32): constant\r\n```\r\nVyper obviously doesn't have certain solidity types like infinite array. But post your findings here or on gitter and we can help you translate most of your calls.\r\nYes so for raw_call try:\r\n```python\r\nself.feed = raw_call(self.feedaddress, method_id('read(bytes32)', bytes[4]), outsize=32, gas=msg.gas)\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/442387345/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/442427270",
    "html_url": "https://github.com/vyperlang/vyper/issues/1104#issuecomment-442427270",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/1104",
    "id": 442427270,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0MjQyNzI3MA==",
    "user": {
      "login": "asiva",
      "id": 7215279,
      "node_id": "MDQ6VXNlcjcyMTUyNzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7215279?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/asiva",
      "html_url": "https://github.com/asiva",
      "followers_url": "https://api.github.com/users/asiva/followers",
      "following_url": "https://api.github.com/users/asiva/following{/other_user}",
      "gists_url": "https://api.github.com/users/asiva/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/asiva/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/asiva/subscriptions",
      "organizations_url": "https://api.github.com/users/asiva/orgs",
      "repos_url": "https://api.github.com/users/asiva/repos",
      "events_url": "https://api.github.com/users/asiva/events{/privacy}",
      "received_events_url": "https://api.github.com/users/asiva/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-28T12:17:48Z",
    "updated_at": "2018-11-28T12:17:48Z",
    "author_association": "NONE",
    "body": "The contract interface approach works great. I haven't tried the raw_call approach. I'll use Gitter for any further questions.\r\n\r\nIn case it's useful for anyone else later, following the original toy example above this works:\r\n\r\n```\r\ncontract Beread:\r\n    def read() -> bytes32: constant\r\n\r\nfeedaddress: public(address)\r\nfeed: public(bytes32)\r\nberead: Beread\r\n\r\n\r\n@public\r\ndef __init__():\r\n    self.feedaddress = 0x161E2Eea68ac57F3C7220170435396Fd7089d9fE\r\n\r\n@public\r\ndef myread():\r\n    self.beread = self.feedaddress\r\n    self.feed = self.beread.read()\r\n\r\n@public\r\ndef setfeedaddress(_new: address):\r\n    self.feedaddress = _new\r\n    \r\n\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/442427270/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
