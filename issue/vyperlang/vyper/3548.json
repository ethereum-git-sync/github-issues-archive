{
  "url": "https://api.github.com/repos/vyperlang/vyper/issues/3548",
  "repository_url": "https://api.github.com/repos/vyperlang/vyper",
  "labels_url": "https://api.github.com/repos/vyperlang/vyper/issues/3548/labels{/name}",
  "comments_url": "https://api.github.com/repos/vyperlang/vyper/issues/3548/comments",
  "events_url": "https://api.github.com/repos/vyperlang/vyper/issues/3548/events",
  "html_url": "https://github.com/vyperlang/vyper/issues/3548",
  "id": 1835275163,
  "node_id": "I_kwDOBGDvrM5tZBOb",
  "number": 3548,
  "title": "VIP: Introduce a special function for protocol level Invariants",
  "user": {
    "login": "El-Ku",
    "id": 46983244,
    "node_id": "MDQ6VXNlcjQ2OTgzMjQ0",
    "avatar_url": "https://avatars.githubusercontent.com/u/46983244?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/El-Ku",
    "html_url": "https://github.com/El-Ku",
    "followers_url": "https://api.github.com/users/El-Ku/followers",
    "following_url": "https://api.github.com/users/El-Ku/following{/other_user}",
    "gists_url": "https://api.github.com/users/El-Ku/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/El-Ku/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/El-Ku/subscriptions",
    "organizations_url": "https://api.github.com/users/El-Ku/orgs",
    "repos_url": "https://api.github.com/users/El-Ku/repos",
    "events_url": "https://api.github.com/users/El-Ku/events{/privacy}",
    "received_events_url": "https://api.github.com/users/El-Ku/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 2,
  "created_at": "2023-08-03T15:21:58Z",
  "updated_at": "2024-01-09T19:50:34Z",
  "closed_at": null,
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "## Simple Summary\r\nIntroduce a special function for protocol level invariants. This function could be called automatically at the end of every function which makes external calls. \r\n\r\n## Motivation\r\nThe world of smart contracts is too complicated that its too scary to just rely on few audits and `battle-tested in time` claims to trust a protocol. The users need something more tangible to give them the assurance that, no matter what kind of sorcery the blackhat will do, there are a few things he will be unable to achieve (read `invariants`). \r\n\r\n## Specification\r\nThe special function could be called `__invariants__` for example. \r\n\r\nIf the dev doesnt specify an invariant function it would be defaulted to this:\r\n\r\n```python\r\n@internal\r\n@view\r\ndef __invariants__():\r\n\tpass\r\n```\r\n\r\nOne point to be noted is that, it would be more useful if this function is used to specify more general invariants. When we focus to mitigate specific scenarios alone, there is a possibility for someone who could just think `outside the box` to come up with a different idea to rekt the protocol. \r\n\r\nThis feature could be used to automatically pause the contract in case of an attack, which will give enough time for whitehats to mitigate the issue and rescue the funds.\r\n\r\n\r\n## Backwards Compatibility\r\nn/a\r\n\r\n## Dependencies\r\nn/a\r\n\r\n## References\r\nn/a\r\n\r\n## Copyright\r\nCopyright and related rights waived via [CC0](https://creativecommons.org/publicdomain/zero/1.0/)\r\n",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/3548/reactions",
    "total_count": 1,
    "+1": 1,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/vyperlang/vyper/issues/3548/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/1664260611",
    "html_url": "https://github.com/vyperlang/vyper/issues/3548#issuecomment-1664260611",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/3548",
    "id": 1664260611,
    "node_id": "IC_kwDOBGDvrM5jMpoD",
    "user": {
      "login": "fubuloubu",
      "id": 3859395,
      "node_id": "MDQ6VXNlcjM4NTkzOTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3859395?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fubuloubu",
      "html_url": "https://github.com/fubuloubu",
      "followers_url": "https://api.github.com/users/fubuloubu/followers",
      "following_url": "https://api.github.com/users/fubuloubu/following{/other_user}",
      "gists_url": "https://api.github.com/users/fubuloubu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fubuloubu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fubuloubu/subscriptions",
      "organizations_url": "https://api.github.com/users/fubuloubu/orgs",
      "repos_url": "https://api.github.com/users/fubuloubu/repos",
      "events_url": "https://api.github.com/users/fubuloubu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fubuloubu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-08-03T16:10:19Z",
    "updated_at": "2023-08-03T16:10:19Z",
    "author_association": "MEMBER",
    "body": "We have the `UNREACHABLE` modifier for `assert` and `revert` statements, which injects the `0xFE` opcode used by many FV tooling such as Symbolic Execution engines to detect invariant violations. It's a good safety measure, because even though you expect it never to be hit, if it does happen to be hit it will invoke a transaction abort",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/1664260611/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/1883682788",
    "html_url": "https://github.com/vyperlang/vyper/issues/3548#issuecomment-1883682788",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/3548",
    "id": 1883682788,
    "node_id": "IC_kwDOBGDvrM5wRrfk",
    "user": {
      "login": "charles-cooper",
      "id": 3867501,
      "node_id": "MDQ6VXNlcjM4Njc1MDE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3867501?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/charles-cooper",
      "html_url": "https://github.com/charles-cooper",
      "followers_url": "https://api.github.com/users/charles-cooper/followers",
      "following_url": "https://api.github.com/users/charles-cooper/following{/other_user}",
      "gists_url": "https://api.github.com/users/charles-cooper/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/charles-cooper/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/charles-cooper/subscriptions",
      "organizations_url": "https://api.github.com/users/charles-cooper/orgs",
      "repos_url": "https://api.github.com/users/charles-cooper/repos",
      "events_url": "https://api.github.com/users/charles-cooper/events{/privacy}",
      "received_events_url": "https://api.github.com/users/charles-cooper/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2024-01-09T19:50:32Z",
    "updated_at": "2024-01-09T19:50:32Z",
    "author_association": "MEMBER",
    "body": "i'm generally a fan of this proposal. the compiler would insert calls to `__invariant__()` at the exit of every mutable external function call (which is tedious and somewhat difficult to do by hand in the general case).",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/1883682788/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
