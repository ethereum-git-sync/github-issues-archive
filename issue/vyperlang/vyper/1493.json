{
  "url": "https://api.github.com/repos/vyperlang/vyper/issues/1493",
  "repository_url": "https://api.github.com/repos/vyperlang/vyper",
  "labels_url": "https://api.github.com/repos/vyperlang/vyper/issues/1493/labels{/name}",
  "comments_url": "https://api.github.com/repos/vyperlang/vyper/issues/1493/comments",
  "events_url": "https://api.github.com/repos/vyperlang/vyper/issues/1493/events",
  "html_url": "https://github.com/vyperlang/vyper/issues/1493",
  "id": 459277687,
  "node_id": "MDU6SXNzdWU0NTkyNzc2ODc=",
  "number": 1493,
  "title": "VIP: Specify behavior of uninitialized variables",
  "user": {
    "login": "charles-cooper",
    "id": 3867501,
    "node_id": "MDQ6VXNlcjM4Njc1MDE=",
    "avatar_url": "https://avatars.githubusercontent.com/u/3867501?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/charles-cooper",
    "html_url": "https://github.com/charles-cooper",
    "followers_url": "https://api.github.com/users/charles-cooper/followers",
    "following_url": "https://api.github.com/users/charles-cooper/following{/other_user}",
    "gists_url": "https://api.github.com/users/charles-cooper/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/charles-cooper/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/charles-cooper/subscriptions",
    "organizations_url": "https://api.github.com/users/charles-cooper/orgs",
    "repos_url": "https://api.github.com/users/charles-cooper/repos",
    "events_url": "https://api.github.com/users/charles-cooper/events{/privacy}",
    "received_events_url": "https://api.github.com/users/charles-cooper/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 20,
  "created_at": "2019-06-21T16:27:13Z",
  "updated_at": "2019-09-27T13:35:00Z",
  "closed_at": "2019-09-27T13:35:00Z",
  "author_association": "COLLABORATOR",
  "active_lock_reason": null,
  "body": "## Simple Summary\r\nRequire newly declared variables to be initialized.\r\n\r\n## Abstract\r\n\r\n## Motivation\r\nUninitialized variables can currently refer to garbage memory (https://github.com/ethereum/vyper/issues/1476#issuecomment-503619359). Probably not what people expect.\r\n\r\n## Specification\r\noption 1) Require variables to be set by the programmer\r\noption 2) if the programmer declares a new variable without setting it, auto set it to a default value of 0\r\n\r\nEDIT: the eventual consensus was to choose option 1. See https://github.com/ethereum/vyper/issues/1493#issuecomment-505672915 for the rationale.\r\n\r\n## Backwards Compatibility\r\nPrograms which don't initialize variables will no longer compile.\r\n\r\n## Dependencies\r\nModifies existing behavior of creating new memory variables\r\n\r\n## Copyright\r\nCopyright and related rights waived via [CC0](https://creativecommons.org/publicdomain/zero/1.0/)\r\n",
  "closed_by": {
    "login": "fubuloubu",
    "id": 3859395,
    "node_id": "MDQ6VXNlcjM4NTkzOTU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/3859395?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/fubuloubu",
    "html_url": "https://github.com/fubuloubu",
    "followers_url": "https://api.github.com/users/fubuloubu/followers",
    "following_url": "https://api.github.com/users/fubuloubu/following{/other_user}",
    "gists_url": "https://api.github.com/users/fubuloubu/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/fubuloubu/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/fubuloubu/subscriptions",
    "organizations_url": "https://api.github.com/users/fubuloubu/orgs",
    "repos_url": "https://api.github.com/users/fubuloubu/repos",
    "events_url": "https://api.github.com/users/fubuloubu/events{/privacy}",
    "received_events_url": "https://api.github.com/users/fubuloubu/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/1493/reactions",
    "total_count": 1,
    "+1": 1,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/vyperlang/vyper/issues/1493/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/505556220",
    "html_url": "https://github.com/vyperlang/vyper/issues/1493#issuecomment-505556220",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/1493",
    "id": 505556220,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUwNTU1NjIyMA==",
    "user": {
      "login": "jacqueswww",
      "id": 6917456,
      "node_id": "MDQ6VXNlcjY5MTc0NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6917456?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jacqueswww",
      "html_url": "https://github.com/jacqueswww",
      "followers_url": "https://api.github.com/users/jacqueswww/followers",
      "following_url": "https://api.github.com/users/jacqueswww/following{/other_user}",
      "gists_url": "https://api.github.com/users/jacqueswww/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jacqueswww/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jacqueswww/subscriptions",
      "organizations_url": "https://api.github.com/users/jacqueswww/orgs",
      "repos_url": "https://api.github.com/users/jacqueswww/repos",
      "events_url": "https://api.github.com/users/jacqueswww/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jacqueswww/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-06-25T18:02:15Z",
    "updated_at": "2019-06-25T18:02:49Z",
    "author_association": "CONTRIBUTOR",
    "body": "This shouldn't be happening. I assume this is happening after calls to private functions? (ie. a variable get defined after a private call) :/",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/505556220/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/505566471",
    "html_url": "https://github.com/vyperlang/vyper/issues/1493#issuecomment-505566471",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/1493",
    "id": 505566471,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUwNTU2NjQ3MQ==",
    "user": {
      "login": "fubuloubu",
      "id": 3859395,
      "node_id": "MDQ6VXNlcjM4NTkzOTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3859395?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fubuloubu",
      "html_url": "https://github.com/fubuloubu",
      "followers_url": "https://api.github.com/users/fubuloubu/followers",
      "following_url": "https://api.github.com/users/fubuloubu/following{/other_user}",
      "gists_url": "https://api.github.com/users/fubuloubu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fubuloubu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fubuloubu/subscriptions",
      "organizations_url": "https://api.github.com/users/fubuloubu/orgs",
      "repos_url": "https://api.github.com/users/fubuloubu/repos",
      "events_url": "https://api.github.com/users/fubuloubu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fubuloubu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-06-25T18:29:20Z",
    "updated_at": "2019-06-25T18:29:20Z",
    "author_association": "MEMBER",
    "body": "Even if it shouldn't be happening, IMO (1) is the best way to mitigate a mistake in calling code or whatever.",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/505566471/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/505573723",
    "html_url": "https://github.com/vyperlang/vyper/issues/1493#issuecomment-505573723",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/1493",
    "id": 505573723,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUwNTU3MzcyMw==",
    "user": {
      "login": "jacqueswww",
      "id": 6917456,
      "node_id": "MDQ6VXNlcjY5MTc0NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6917456?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jacqueswww",
      "html_url": "https://github.com/jacqueswww",
      "followers_url": "https://api.github.com/users/jacqueswww/followers",
      "following_url": "https://api.github.com/users/jacqueswww/following{/other_user}",
      "gists_url": "https://api.github.com/users/jacqueswww/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jacqueswww/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jacqueswww/subscriptions",
      "organizations_url": "https://api.github.com/users/jacqueswww/orgs",
      "repos_url": "https://api.github.com/users/jacqueswww/repos",
      "events_url": "https://api.github.com/users/jacqueswww/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jacqueswww/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-06-25T18:48:48Z",
    "updated_at": "2019-06-25T18:49:05Z",
    "author_association": "CONTRIBUTOR",
    "body": "Yes, the compiler should have a flag that adds mstore <var_pos> 0 to memory after a variable is created, the flag is only set after a self call to private occurs.",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/505573723/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/505581551",
    "html_url": "https://github.com/vyperlang/vyper/issues/1493#issuecomment-505581551",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/1493",
    "id": 505581551,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUwNTU4MTU1MQ==",
    "user": {
      "login": "fubuloubu",
      "id": 3859395,
      "node_id": "MDQ6VXNlcjM4NTkzOTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3859395?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fubuloubu",
      "html_url": "https://github.com/fubuloubu",
      "followers_url": "https://api.github.com/users/fubuloubu/followers",
      "following_url": "https://api.github.com/users/fubuloubu/following{/other_user}",
      "gists_url": "https://api.github.com/users/fubuloubu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fubuloubu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fubuloubu/subscriptions",
      "organizations_url": "https://api.github.com/users/fubuloubu/orgs",
      "repos_url": "https://api.github.com/users/fubuloubu/repos",
      "events_url": "https://api.github.com/users/fubuloubu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fubuloubu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-06-25T19:08:39Z",
    "updated_at": "2019-06-25T19:11:00Z",
    "author_association": "MEMBER",
    "body": "That... Seems way more complicated then just enforcing you set a local on definition if it is not set before it's read.",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/505581551/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/505652997",
    "html_url": "https://github.com/vyperlang/vyper/issues/1493#issuecomment-505652997",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/1493",
    "id": 505652997,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUwNTY1Mjk5Nw==",
    "user": {
      "login": "jakerockland",
      "id": 8602661,
      "node_id": "MDQ6VXNlcjg2MDI2NjE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8602661?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jakerockland",
      "html_url": "https://github.com/jakerockland",
      "followers_url": "https://api.github.com/users/jakerockland/followers",
      "following_url": "https://api.github.com/users/jakerockland/following{/other_user}",
      "gists_url": "https://api.github.com/users/jakerockland/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jakerockland/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jakerockland/subscriptions",
      "organizations_url": "https://api.github.com/users/jakerockland/orgs",
      "repos_url": "https://api.github.com/users/jakerockland/repos",
      "events_url": "https://api.github.com/users/jakerockland/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jakerockland/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-06-25T22:58:18Z",
    "updated_at": "2019-06-25T22:58:18Z",
    "author_association": "CONTRIBUTOR",
    "body": "My 2¢: Also seems to me that (1) makes it the most explicit as to what is going on / less error prone.",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/505652997/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/505663653",
    "html_url": "https://github.com/vyperlang/vyper/issues/1493#issuecomment-505663653",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/1493",
    "id": 505663653,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUwNTY2MzY1Mw==",
    "user": {
      "login": "jacqueswww",
      "id": 6917456,
      "node_id": "MDQ6VXNlcjY5MTc0NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6917456?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jacqueswww",
      "html_url": "https://github.com/jacqueswww",
      "followers_url": "https://api.github.com/users/jacqueswww/followers",
      "following_url": "https://api.github.com/users/jacqueswww/following{/other_user}",
      "gists_url": "https://api.github.com/users/jacqueswww/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jacqueswww/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jacqueswww/subscriptions",
      "organizations_url": "https://api.github.com/users/jacqueswww/orgs",
      "repos_url": "https://api.github.com/users/jacqueswww/repos",
      "events_url": "https://api.github.com/users/jacqueswww/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jacqueswww/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-06-25T23:51:12Z",
    "updated_at": "2019-06-25T23:54:35Z",
    "author_association": "CONTRIBUTOR",
    "body": "I feel like there are two separate problems here, one is changing how vyper currently works to be more explicit about initial values. \r\nThe other is that currently vyper has default assignment of initial values, but after changing to `CALL` the default values of the EVM are not zero by default in memory, as it was before.\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/505663653/reactions",
      "total_count": 3,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/505672915",
    "html_url": "https://github.com/vyperlang/vyper/issues/1493#issuecomment-505672915",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/1493",
    "id": 505672915,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUwNTY3MjkxNQ==",
    "user": {
      "login": "charles-cooper",
      "id": 3867501,
      "node_id": "MDQ6VXNlcjM4Njc1MDE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3867501?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/charles-cooper",
      "html_url": "https://github.com/charles-cooper",
      "followers_url": "https://api.github.com/users/charles-cooper/followers",
      "following_url": "https://api.github.com/users/charles-cooper/following{/other_user}",
      "gists_url": "https://api.github.com/users/charles-cooper/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/charles-cooper/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/charles-cooper/subscriptions",
      "organizations_url": "https://api.github.com/users/charles-cooper/orgs",
      "repos_url": "https://api.github.com/users/charles-cooper/repos",
      "events_url": "https://api.github.com/users/charles-cooper/events{/privacy}",
      "received_events_url": "https://api.github.com/users/charles-cooper/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-06-26T00:42:13Z",
    "updated_at": "2019-06-26T00:42:13Z",
    "author_association": "COLLABORATOR",
    "body": "I am leaning towards having the programmer explicitly set it. Then they don't have to depend on what the language decides as the default value. Also, there isn't much reason to not initialize a variable - most of the time, the programmer wants to set it at some point in the function. The main use case I can think of is when a programmer defines a variable, and then the value assigned to it is branch dependent. That's a kind of 'edge case' that we could discuss separately (maybe worth implementing something like the balanced return checker but for setting variables) but in any case it is still clearer to set it to a sentinel value at declaration! As a secondary concern, since declared variables are usually assigned to, it's better performance to skip the compiler generated mstore 0 and go straight to assigning whatever the programmer was planning to assign to it.",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/505672915/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/505676850",
    "html_url": "https://github.com/vyperlang/vyper/issues/1493#issuecomment-505676850",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/1493",
    "id": 505676850,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUwNTY3Njg1MA==",
    "user": {
      "login": "jakerockland",
      "id": 8602661,
      "node_id": "MDQ6VXNlcjg2MDI2NjE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8602661?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jakerockland",
      "html_url": "https://github.com/jakerockland",
      "followers_url": "https://api.github.com/users/jakerockland/followers",
      "following_url": "https://api.github.com/users/jakerockland/following{/other_user}",
      "gists_url": "https://api.github.com/users/jakerockland/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jakerockland/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jakerockland/subscriptions",
      "organizations_url": "https://api.github.com/users/jakerockland/orgs",
      "repos_url": "https://api.github.com/users/jakerockland/repos",
      "events_url": "https://api.github.com/users/jakerockland/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jakerockland/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-06-26T01:05:31Z",
    "updated_at": "2019-06-26T01:05:31Z",
    "author_association": "CONTRIBUTOR",
    "body": "Yeah definitely are two problems at play @jacqueswww, so we may want to update the issues to more accurately reflect that. \r\n\r\nOn the note of the first problem though, I think I'd be in favor of a VIP that makes Vyper more explicit about initial values. \r\n\r\nThat may warrant more discussion though that just fixing the currently broken behavior of how the initial values are _supposed_ to behave.",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/505676850/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/505737478",
    "html_url": "https://github.com/vyperlang/vyper/issues/1493#issuecomment-505737478",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/1493",
    "id": 505737478,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUwNTczNzQ3OA==",
    "user": {
      "login": "jakerockland",
      "id": 8602661,
      "node_id": "MDQ6VXNlcjg2MDI2NjE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8602661?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jakerockland",
      "html_url": "https://github.com/jakerockland",
      "followers_url": "https://api.github.com/users/jakerockland/followers",
      "following_url": "https://api.github.com/users/jakerockland/following{/other_user}",
      "gists_url": "https://api.github.com/users/jakerockland/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jakerockland/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jakerockland/subscriptions",
      "organizations_url": "https://api.github.com/users/jakerockland/orgs",
      "repos_url": "https://api.github.com/users/jakerockland/repos",
      "events_url": "https://api.github.com/users/jakerockland/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jakerockland/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-06-26T06:25:12Z",
    "updated_at": "2019-06-26T06:25:12Z",
    "author_association": "CONTRIBUTOR",
    "body": "Thinking about this more, fixing the current broken behavior seems higher priority change than removing default initial values, as the later would be non backwards compatible. \r\n\r\nEspecially given this is explicitly marked to be the case in the docs: https://vyper.readthedocs.io/en/v0.1.0-beta.10/types.html#initial-values\r\n\r\nStill, I'd be in favor of a VIP that removes default initial values and requires them to be set by the programmer. 😅 ",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/505737478/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/505758786",
    "html_url": "https://github.com/vyperlang/vyper/issues/1493#issuecomment-505758786",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/1493",
    "id": 505758786,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUwNTc1ODc4Ng==",
    "user": {
      "login": "fubuloubu",
      "id": 3859395,
      "node_id": "MDQ6VXNlcjM4NTkzOTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3859395?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fubuloubu",
      "html_url": "https://github.com/fubuloubu",
      "followers_url": "https://api.github.com/users/fubuloubu/followers",
      "following_url": "https://api.github.com/users/fubuloubu/following{/other_user}",
      "gists_url": "https://api.github.com/users/fubuloubu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fubuloubu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fubuloubu/subscriptions",
      "organizations_url": "https://api.github.com/users/fubuloubu/orgs",
      "repos_url": "https://api.github.com/users/fubuloubu/repos",
      "events_url": "https://api.github.com/users/fubuloubu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fubuloubu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-06-26T07:39:19Z",
    "updated_at": "2019-06-26T07:39:19Z",
    "author_association": "MEMBER",
    "body": "One thing to note about the suggestion to require the developer to set a variable before reading it: it doesn't _have_ to be at creation of the variable, but it should be set before it's read (aka write once before read). That would allow the use case @charlescooper was describing with dependent settings.",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/505758786/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/507358795",
    "html_url": "https://github.com/vyperlang/vyper/issues/1493#issuecomment-507358795",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/1493",
    "id": 507358795,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUwNzM1ODc5NQ==",
    "user": {
      "login": "davesque",
      "id": 791437,
      "node_id": "MDQ6VXNlcjc5MTQzNw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/791437?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/davesque",
      "html_url": "https://github.com/davesque",
      "followers_url": "https://api.github.com/users/davesque/followers",
      "following_url": "https://api.github.com/users/davesque/following{/other_user}",
      "gists_url": "https://api.github.com/users/davesque/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/davesque/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/davesque/subscriptions",
      "organizations_url": "https://api.github.com/users/davesque/orgs",
      "repos_url": "https://api.github.com/users/davesque/repos",
      "events_url": "https://api.github.com/users/davesque/events{/privacy}",
      "received_events_url": "https://api.github.com/users/davesque/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-07-01T17:39:51Z",
    "updated_at": "2019-07-01T17:43:22Z",
    "author_association": "CONTRIBUTOR",
    "body": "@fubuloubu Re: Setting var values before read.  That would waste gas in the case that the variable is set to zero intially since all memory is well-defined initially as zero.  Also, as @jacqueswww described it to me, if the internal call context storage is working correctly, even uninitialized zero values will be explicitly copied to memory and then restored later when the internal call returns.  So maybe it's actually the case that there's a bug in the context storage mechanism for internal calls?\r\n\r\nIt's a bit hard to tell if anyone is suggesting this, but I wouldn't want to insert extra ops meant to zero-out memory when, as far as we know, the internal call context storage mechanism should be preserving variable values across calls, even if those values were uninitialized zero values.  We should instead try to figure out why our mental model of what should be happening isn't matching up with what actually happens.\r\n\r\nHowever, I'm all in favor of requiring that variables syntactically have an initial value.  But if that initial value is zero, we shouldn't do any extra work that doesn't need to happen.  Having new memory set to zero is a detail of the EVM spec (it's not a Vyper language feature) and is not likely to change.",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/507358795/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/507363326",
    "html_url": "https://github.com/vyperlang/vyper/issues/1493#issuecomment-507363326",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/1493",
    "id": 507363326,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUwNzM2MzMyNg==",
    "user": {
      "login": "jakerockland",
      "id": 8602661,
      "node_id": "MDQ6VXNlcjg2MDI2NjE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8602661?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jakerockland",
      "html_url": "https://github.com/jakerockland",
      "followers_url": "https://api.github.com/users/jakerockland/followers",
      "following_url": "https://api.github.com/users/jakerockland/following{/other_user}",
      "gists_url": "https://api.github.com/users/jakerockland/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jakerockland/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jakerockland/subscriptions",
      "organizations_url": "https://api.github.com/users/jakerockland/orgs",
      "repos_url": "https://api.github.com/users/jakerockland/repos",
      "events_url": "https://api.github.com/users/jakerockland/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jakerockland/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-07-01T17:54:22Z",
    "updated_at": "2019-07-01T17:54:22Z",
    "author_association": "CONTRIBUTOR",
    "body": "@davesque Yeah that's a good point that if we make a VIP around values needing initial values to be explicitly set by the programmer when implementing we are sure to have a compile-time optimization that doesn't add extra ops if the default value is just 0.",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/507363326/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/507365110",
    "html_url": "https://github.com/vyperlang/vyper/issues/1493#issuecomment-507365110",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/1493",
    "id": 507365110,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUwNzM2NTExMA==",
    "user": {
      "login": "charles-cooper",
      "id": 3867501,
      "node_id": "MDQ6VXNlcjM4Njc1MDE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3867501?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/charles-cooper",
      "html_url": "https://github.com/charles-cooper",
      "followers_url": "https://api.github.com/users/charles-cooper/followers",
      "following_url": "https://api.github.com/users/charles-cooper/following{/other_user}",
      "gists_url": "https://api.github.com/users/charles-cooper/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/charles-cooper/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/charles-cooper/subscriptions",
      "organizations_url": "https://api.github.com/users/charles-cooper/orgs",
      "repos_url": "https://api.github.com/users/charles-cooper/repos",
      "events_url": "https://api.github.com/users/charles-cooper/events{/privacy}",
      "received_events_url": "https://api.github.com/users/charles-cooper/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-07-01T17:59:50Z",
    "updated_at": "2019-07-01T18:00:54Z",
    "author_association": "COLLABORATOR",
    "body": "@davesque it has to do with when a private function has a larger frame than the caller, and a variable is declared after the private function call.\r\n\r\n```python\r\n@private\r\ndef priv(): # frame is > 30 words\r\n    xs: uint256[30]\r\n    for i in range(0, 30):\r\n        xs[i] = 7 # write values to memory\r\n\r\n@public\r\ndef caller() -> uint256: # frame is < 10 words\r\n    self.priv()\r\n    x: uint256 # looks like should be zero, but it's occupying space that was written to by priv()\r\n    return x # not 0\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/507365110/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/507424856",
    "html_url": "https://github.com/vyperlang/vyper/issues/1493#issuecomment-507424856",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/1493",
    "id": 507424856,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUwNzQyNDg1Ng==",
    "user": {
      "login": "davesque",
      "id": 791437,
      "node_id": "MDQ6VXNlcjc5MTQzNw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/791437?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/davesque",
      "html_url": "https://github.com/davesque",
      "followers_url": "https://api.github.com/users/davesque/followers",
      "following_url": "https://api.github.com/users/davesque/following{/other_user}",
      "gists_url": "https://api.github.com/users/davesque/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/davesque/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/davesque/subscriptions",
      "organizations_url": "https://api.github.com/users/davesque/orgs",
      "repos_url": "https://api.github.com/users/davesque/repos",
      "events_url": "https://api.github.com/users/davesque/events{/privacy}",
      "received_events_url": "https://api.github.com/users/davesque/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-07-01T21:02:53Z",
    "updated_at": "2019-07-01T21:10:43Z",
    "author_association": "CONTRIBUTOR",
    "body": "@charles-cooper @jacqueswww \r\n\r\nOkay, yeah that seems correct.\r\n\r\nI've been looking into this for an hour or two and here's my current understanding of this:\r\n\r\nVariable records are only created as assignment statements are encountered in the code.  However, the private call builder just uses whatever variables it finds in the context to copy local vars to the stack and pop them off.  For variable assignments with explicit values that occur after private calls, this isn't a problem since the value will always be set at the appropriate location in memory.  However, for uninitialized variable assignments, it will just use whatever memory was not written over by the frame recovery which will be junk values from the callee's frame if that frame was larger than the caller's frame.\r\n\r\nSo it seems like, ideally, the compiler would be aware of all assignment statements in the caller's scope and include them all (including implicit, uninitialized zero values) when copying the caller's frame to the stack.  Or, it would have to zero-out memory for uninitialized variables after any private call, because how could it otherwise know whether or not the private call had written beyond the caller's frame in memory?  I guess it's a question of whether copying all local vars to the stack (including ones that haven't even been used yet) would be more expensive than zeroing out memory for uninitialized vars that occur after private calls.  My guess is that zeroing-out memory would be less expensive.\r\n\r\nSorry if any of this is redundant.  Partially, I'm writing this all down here so you guys can tell me if I'm on the right track with my thinking and also just in case any of this is novel to the discussion.",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/507424856/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/507428289",
    "html_url": "https://github.com/vyperlang/vyper/issues/1493#issuecomment-507428289",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/1493",
    "id": 507428289,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUwNzQyODI4OQ==",
    "user": {
      "login": "davesque",
      "id": 791437,
      "node_id": "MDQ6VXNlcjc5MTQzNw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/791437?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/davesque",
      "html_url": "https://github.com/davesque",
      "followers_url": "https://api.github.com/users/davesque/followers",
      "following_url": "https://api.github.com/users/davesque/following{/other_user}",
      "gists_url": "https://api.github.com/users/davesque/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/davesque/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/davesque/subscriptions",
      "organizations_url": "https://api.github.com/users/davesque/orgs",
      "repos_url": "https://api.github.com/users/davesque/repos",
      "events_url": "https://api.github.com/users/davesque/events{/privacy}",
      "received_events_url": "https://api.github.com/users/davesque/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-07-01T21:13:59Z",
    "updated_at": "2019-07-01T21:14:12Z",
    "author_association": "CONTRIBUTOR",
    "body": "@jacqueswww Is there any point in time at which we would start asking whether or not doing private calls with our own stack discipline is worth it over just using an EVM opcode?  I'm not keenly aware of the gas costs involved but just though I'd pose the question.",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/507428289/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/507429619",
    "html_url": "https://github.com/vyperlang/vyper/issues/1493#issuecomment-507429619",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/1493",
    "id": 507429619,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUwNzQyOTYxOQ==",
    "user": {
      "login": "charles-cooper",
      "id": 3867501,
      "node_id": "MDQ6VXNlcjM4Njc1MDE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3867501?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/charles-cooper",
      "html_url": "https://github.com/charles-cooper",
      "followers_url": "https://api.github.com/users/charles-cooper/followers",
      "following_url": "https://api.github.com/users/charles-cooper/following{/other_user}",
      "gists_url": "https://api.github.com/users/charles-cooper/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/charles-cooper/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/charles-cooper/subscriptions",
      "organizations_url": "https://api.github.com/users/charles-cooper/orgs",
      "repos_url": "https://api.github.com/users/charles-cooper/repos",
      "events_url": "https://api.github.com/users/charles-cooper/events{/privacy}",
      "received_events_url": "https://api.github.com/users/charles-cooper/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-07-01T21:18:27Z",
    "updated_at": "2019-07-01T21:18:27Z",
    "author_association": "COLLABORATOR",
    "body": "@davesque there is an issue on this, basically vyper used to use CALL to self but that was too expensive. There might be a couple more options if EIPs 615 or 1380 are merged in the next fork so we want to keep from making too large of an overhaul right now before we have all options at our disposal.",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/507429619/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/507430239",
    "html_url": "https://github.com/vyperlang/vyper/issues/1493#issuecomment-507430239",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/1493",
    "id": 507430239,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUwNzQzMDIzOQ==",
    "user": {
      "login": "charles-cooper",
      "id": 3867501,
      "node_id": "MDQ6VXNlcjM4Njc1MDE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3867501?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/charles-cooper",
      "html_url": "https://github.com/charles-cooper",
      "followers_url": "https://api.github.com/users/charles-cooper/followers",
      "following_url": "https://api.github.com/users/charles-cooper/following{/other_user}",
      "gists_url": "https://api.github.com/users/charles-cooper/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/charles-cooper/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/charles-cooper/subscriptions",
      "organizations_url": "https://api.github.com/users/charles-cooper/orgs",
      "repos_url": "https://api.github.com/users/charles-cooper/repos",
      "events_url": "https://api.github.com/users/charles-cooper/events{/privacy}",
      "received_events_url": "https://api.github.com/users/charles-cooper/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-07-01T21:20:33Z",
    "updated_at": "2019-07-01T21:20:33Z",
    "author_association": "COLLABORATOR",
    "body": "FWIW I really think the best course of action at this stage is to get rid of declaring variables without initialization. Technically it's not fixing the bug but it's simpler for the compiler and cleaner for the user for the reasons detailed above. ",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/507430239/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/507437457",
    "html_url": "https://github.com/vyperlang/vyper/issues/1493#issuecomment-507437457",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/1493",
    "id": 507437457,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUwNzQzNzQ1Nw==",
    "user": {
      "login": "davesque",
      "id": 791437,
      "node_id": "MDQ6VXNlcjc5MTQzNw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/791437?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/davesque",
      "html_url": "https://github.com/davesque",
      "followers_url": "https://api.github.com/users/davesque/followers",
      "following_url": "https://api.github.com/users/davesque/following{/other_user}",
      "gists_url": "https://api.github.com/users/davesque/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/davesque/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/davesque/subscriptions",
      "organizations_url": "https://api.github.com/users/davesque/orgs",
      "repos_url": "https://api.github.com/users/davesque/repos",
      "events_url": "https://api.github.com/users/davesque/events{/privacy}",
      "received_events_url": "https://api.github.com/users/davesque/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-07-01T21:45:14Z",
    "updated_at": "2019-07-01T21:45:14Z",
    "author_association": "CONTRIBUTOR",
    "body": "@charles-cooper Yeah, I was aware that we used to do it that way.  I was more asking if we should ever revert back to using that approach.  But I forgot about those EIPs.  Thanks!\r\n\r\nAnd yeah I think you're right about requiring explicit assignment.  I'm not sure there's a viable alternative.  The one exception I can think of is if the assignment is the default value for a type and it occurs in a public call, before any private calls.  Then we should be able to safely optimize out the `mstore <pos> 0`.  Otherwise, I'm not sure we can make that assumption.",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/507437457/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/507445375",
    "html_url": "https://github.com/vyperlang/vyper/issues/1493#issuecomment-507445375",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/1493",
    "id": 507445375,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUwNzQ0NTM3NQ==",
    "user": {
      "login": "jakerockland",
      "id": 8602661,
      "node_id": "MDQ6VXNlcjg2MDI2NjE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8602661?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jakerockland",
      "html_url": "https://github.com/jakerockland",
      "followers_url": "https://api.github.com/users/jakerockland/followers",
      "following_url": "https://api.github.com/users/jakerockland/following{/other_user}",
      "gists_url": "https://api.github.com/users/jakerockland/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jakerockland/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jakerockland/subscriptions",
      "organizations_url": "https://api.github.com/users/jakerockland/orgs",
      "repos_url": "https://api.github.com/users/jakerockland/repos",
      "events_url": "https://api.github.com/users/jakerockland/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jakerockland/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-07-01T22:16:11Z",
    "updated_at": "2019-07-01T22:16:11Z",
    "author_association": "CONTRIBUTOR",
    "body": "@davesque @charles-cooper thanks for the elaboration/conversation here, it's helped me understand the underlying issue a lot more\r\n\r\nGiven the above, I agree with your approach @charles-cooper that the faster path to implementation is likely just removing uninitialized variables + making them explicit.",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/507445375/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 1,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/527249726",
    "html_url": "https://github.com/vyperlang/vyper/issues/1493#issuecomment-527249726",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/1493",
    "id": 527249726,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUyNzI0OTcyNg==",
    "user": {
      "login": "dHonerkamp",
      "id": 31133390,
      "node_id": "MDQ6VXNlcjMxMTMzMzkw",
      "avatar_url": "https://avatars.githubusercontent.com/u/31133390?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dHonerkamp",
      "html_url": "https://github.com/dHonerkamp",
      "followers_url": "https://api.github.com/users/dHonerkamp/followers",
      "following_url": "https://api.github.com/users/dHonerkamp/following{/other_user}",
      "gists_url": "https://api.github.com/users/dHonerkamp/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dHonerkamp/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dHonerkamp/subscriptions",
      "organizations_url": "https://api.github.com/users/dHonerkamp/orgs",
      "repos_url": "https://api.github.com/users/dHonerkamp/repos",
      "events_url": "https://api.github.com/users/dHonerkamp/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dHonerkamp/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-09-02T22:03:24Z",
    "updated_at": "2019-09-02T22:03:24Z",
    "author_association": "NONE",
    "body": "Given how unexpected & potentially critical this behaviour is, I'd like to just add a reminder that it is still not reflected in the documentation (https://vyper.readthedocs.io/en/latest/types.html#initial-values). I think a short note would already help a lot",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/527249726/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
