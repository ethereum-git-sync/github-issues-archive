{
  "url": "https://api.github.com/repos/vyperlang/vyper/issues/3722",
  "repository_url": "https://api.github.com/repos/vyperlang/vyper",
  "labels_url": "https://api.github.com/repos/vyperlang/vyper/issues/3722/labels{/name}",
  "comments_url": "https://api.github.com/repos/vyperlang/vyper/issues/3722/comments",
  "events_url": "https://api.github.com/repos/vyperlang/vyper/issues/3722/events",
  "html_url": "https://github.com/vyperlang/vyper/issues/3722",
  "id": 2073285614,
  "node_id": "I_kwDOBGDvrM57k9Pu",
  "number": 3722,
  "title": "VIP: stateful singleton modules with ownership hierarchy",
  "user": {
    "login": "charles-cooper",
    "id": 3867501,
    "node_id": "MDQ6VXNlcjM4Njc1MDE=",
    "avatar_url": "https://avatars.githubusercontent.com/u/3867501?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/charles-cooper",
    "html_url": "https://github.com/charles-cooper",
    "followers_url": "https://api.github.com/users/charles-cooper/followers",
    "following_url": "https://api.github.com/users/charles-cooper/following{/other_user}",
    "gists_url": "https://api.github.com/users/charles-cooper/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/charles-cooper/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/charles-cooper/subscriptions",
    "organizations_url": "https://api.github.com/users/charles-cooper/orgs",
    "repos_url": "https://api.github.com/users/charles-cooper/repos",
    "events_url": "https://api.github.com/users/charles-cooper/events{/privacy}",
    "received_events_url": "https://api.github.com/users/charles-cooper/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 8,
  "created_at": "2024-01-09T22:39:35Z",
  "updated_at": "2024-01-22T09:51:12Z",
  "closed_at": null,
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "## Simple Summary\r\nextend the import system by allowing \"stateful modules\" (that is, modules with top-level state variables). introduce a constraint system on the import system which maximizes safety + usability.\r\n\r\nthis is one of two proposals exploring the stateful module design space; the other is https://github.com/vyperlang/vyper/issues/3723.\r\n\r\n## Motivation\r\nre-using code which encapsulates state is in general a useful feature to have for a language! however, in a contract-oriented programming context, this is a double edged sword because reasoning about storage is fundamentally difficult, especially when storage accesses are hidden behind a layer of abstraction. consider two basic approaches to the problem:\r\n\r\n1) each module gets a singleton instantiation in the storage allocator. this follows the [One-Def Rule](https://en.wikipedia.org/wiki/One_Definition_Rule) for modules and is probably the most intuitive for programmers. however, this hurts reasonability because a module's storage could be changed anywhere inside the import graph, as in the following example:\r\n```vyper\r\nimport dep1  # has a storage variable, counter\r\nimport dep2  # imports dep1. dep2.bar() modifies counter\r\n\r\n@external\r\ndef foo():\r\n    dep1.counter += 1\r\n    dep2.bar()  # tramples dep1.counter!\r\n```\r\nthis has a further issue which we will discuss in a bit, which is that access to `dep1`'s `__init__()` function is uncontrolled. that is, it could be called multiple times in the import graph. this is a correctness problem, because programmers expect constructors to be called at most one time.\r\n\r\n2) the user controls instantiations by explicitly instantiating instances of a module. each of these is a fresh instantiation in the storage allocater. this has multiple benefits. if you instantiate a module, you are guaranteed that nobody else in the import graph can modify it. however, it hurts sharing of global state, which is a design consideration for some use cases. the simplest example of this would be a library which encapsulates re-entrancy protection (note this is a straw-man, because vyper already has a builtin for reentrancy protection).\r\n```vyper\r\nimport Lock  # Lock.acquire() and Lock.release() modify Lock._key\r\nimport Foo  # Foo.foo() uses Lock by calling Lock.acquire()/Lock.release()\r\n\r\n_lock: Lock  # fresh instance of Lock\r\n_foo: Foo  # fresh instance of Foo\r\n\r\nexport _foo.foo  # hypothetical syntax, cf. https://github.com/vyperlang/vyper/pull/3698\r\n\r\n@external\r\ndef bar():\r\n    self._lock.acquire()\r\n    ...\r\n    call SomeContract  # !! can re-enter to Foo.foo, because Foo.Lock._key and Lock._key are separate\r\n    self._lock.release()\r\n```\r\nthe other benefit here would be clear access to imported `__init__()` functions. since each instantiation is local, it is straightforward to enforce that `__init__()` is called one time for each instantiation. (in the above example, `self._lock.__init__(...)` and `self._foo.__init__(...)` would have to be called in the main `__init__()` function.\r\n\r\nenumerated, the issues brought up above are:\r\n- state trampling\r\n- constraints on `__init__()`\r\n- state sharing\r\n\r\nthis proposal proposes a third option, which draws inspiration from [linear type systems](https://en.wikipedia.org/wiki/Substructural_type_system#Different_substructural_type_systems) and the [rust borrow checker](https://doc.rust-lang.org/1.8.0/book/references-and-borrowing.html).\r\n\r\nthe design proposed here is to enforce the one-def rule, but to address the issues above, additionally introduce an ownership system which allows the compiler to enforce constraints on how module state is written and initialized.\r\n\r\nnote on a design choice:\r\n- the new top-level statement type `owns: some_module` is a design requirement which allows the programmer to control where the module is laid out in storage.\r\n\r\n## Useful Definitions/Terminology\r\n- an _affine_ type is one that can be used _at most_ once\r\n- a _linear_ type is one that must be used _exactly_ once\r\n- the import graph is a directed acyclic graph which is traversed during import resolution\r\n- declaring variables produces a compile-time side effect in the storage allocator\r\n- a \"nested import\" is an import within an import\r\n- a \"region\" is an area of storage which can be touched by an effect\r\n- a module is a bundle of code-and-storage-layout functionality. there is currently a 1-to-1 correspondence in vyper between files and modules.\r\n- a compilation target is the module which is passed to the compiler as the \"main\" module.\r\n\r\n## Specification\r\n\r\nthis proposal introduces an effects hierarchy for interacting with modules: `owns` and `seals`. an alternative name for `owns` could be `initializes`. `owns` is used here since it is the terminology used in linear type systems.\r\n\r\nthe basic rules here are:\r\n1. ownership is modeled as an affine constraint, which is promoted to a linear constraint if any other effects are used from the module. that is,\r\n  - a module might be imported but no stateful functions are accessed, so initialization is allowed but not required.\r\n  - if a stateful function is reachable from the compilation target, then it must be `own`ed *exactly* one time in the import graph.\r\n2. there is a one-to-one correspondence between ownership and initialization. that is, if `module` owns `module2`, then `module2.__init__()` must be called in `module.__init__()` . declaring ownership \"seals off\" access to `module2.__init__()`. it is envisioned that it will probably be used sparingly or near the top of the import graph.\r\n3. you cannot touch modules from an `__init__()` function unless they are already owned.\r\n4. if a module seals `module2`, no other modules can write to it (or directly call mutating functions on `module2`).\r\n5. a module can only be `own`ed once. `seals:` implies ownership.\r\n\r\nnote that `seals:` can be considered as an extension to the ownership system. in other words, the `seals:` semantics is not required to be implemented.\r\n\r\nsome examples, with a tentative syntax:\r\n\r\n```vyper\r\nimport dep1  # has a storage variable, counter\r\nimport dep2  # imports dep1. dep2.bar() modifies counter\r\n\r\nseals: dep1\r\n\r\ndef __init__():\r\n    dep1.__init__(...)\r\n\r\n@external\r\ndef foo():\r\n    dep1.counter += 1\r\n\r\n@external\r\ndef foo1():\r\n    dep1.update_counter()\r\n\r\n# counterfactual example, this does not compile:\r\n@external\r\ndef foo2():\r\n    dep1.counter += 1\r\n    dep2.bar()  # not allowed! dep2.bar() modifies dep1\r\n```\r\n\r\n```vyper\r\n# Bar.vy\r\n\r\nimport Lock\r\nimport Foo\r\n\r\nx: uint256\r\n\r\n# declare ownership of Lock!\r\n# this would be an error if Foo declared ownership of Lock\r\n# this statement also controls the location of Lock in the storage layout -- it comes after `x`.\r\nowns: Lock  # own, but do not seal lock\r\n\r\nexports: Foo.foo\r\n\r\ndef __init__():\r\n    Lock.__init__(...)  # omitting this would be an error!\r\n\r\n@external\r\ndef bar():\r\n    Lock.acquire()\r\n    ...  # do stuff, maybe call an external contract\r\n    Lock.release()\r\n```\r\n\r\nan obligatory token example:\r\n```vyper\r\n###\r\n# Owned.vy\r\nowner: address\r\n\r\ndef __init__():\r\n    self.owner = msg.sender\r\n\r\ndef check_owner():\r\n    assert msg.sender == self.owner\r\n###\r\n\r\n###\r\n# BaseToken.vy\r\ntotalSupply: uint256\r\nbalances: HashMap[address, uint256]\r\n\r\ndef __init__(initial_supply: uint256):\r\n    self.totalSupply += initial_supply\r\n    self.balances[msg.sender] += initial_supply\r\n\r\n@external\r\ndef transfer(recipient: address, amount: uint256):\r\n    self.balances[msg.sender] -= amount  # safesub\r\n    self.balances[recipient] += amount\r\n###\r\n\r\n###\r\n# Mint.vy\r\nimport BaseToken\r\nimport Owned\r\n\r\n@external\r\ndef mint(recipient: address, amount: uint256):\r\n    Owned.check_owner()\r\n    self._mint_to(recipient, amount)\r\n\r\n@internal\r\ndef _mint_to(recipient: address, amount: uint256):\r\n    BaseToken.totalSupply += amount\r\n    BaseToken.balances[recipient] += amount\r\n###\r\n\r\n###\r\n# Contract.vy\r\nimport Owned\r\nimport Mint\r\nimport BaseToken\r\n\r\nowns: Owned\r\nowns: BaseToken\r\nseals: Mint  # hygiene - seal Mint\r\n\r\ndef __init__():\r\n    BaseToken.__init__(100)  # required by `owns: BaseToken`\r\n    Owned.__init__()  # required by `owns: Owned`\r\n    Mint.__init__()  # required by `seals: Mint`\r\n\r\nexport: Mint.mint\r\nexport: BaseToken.transfer\r\n```\r\nnote an alternative design for this hypothetical project could be for `Mint` to `own: Owned` and be responsible for calling its constructor. then `Contract.vy` would not be able to `own: Owned`. this is left as a design choice to library writers, when to \"seal\" ownership of modules and when to leave them open. for illustration, this is what that design would look like:\r\n```vyper\r\n# Owned and BaseToken look the same.\r\n###\r\n# Mint.vy\r\nimport Owned\r\nimport BaseToken\r\n\r\nown: Owned\r\nown: BaseToken\r\n\r\ndef __init__(initial_supply: uint256):\r\n    Owned.__init__()\r\n    BaseToken.__init__(initial_supply)\r\n\r\n\r\n@external\r\ndef mint(recipient: address, amount: uint256):\r\n    Owned.check_owner()\r\n    self._mint_to(recipient, amount)\r\n\r\n@internal\r\ndef _mint_to(recipient: address, amount: uint256):\r\n    BaseToken.totalSupply += amount\r\n    BaseToken.balances[recipient] += amount\r\n###\r\n\r\n###\r\n# Contract.vy\r\nimport Mint\r\nimport BaseToken\r\n\r\nowns: Mint\r\n\r\nowns: BaseToken  # this line will raise an error!\r\n\r\ndef __init__():\r\n    BaseToken.__init__()  # error! Mint already initializes BaseToken\r\n    Owned.__init__()  # error! Mint already initializes Owned\r\n\r\n    Mint.__init__(100)  # that's better\r\n```\r\n\r\n## Backwards Compatibility\r\ndoes not change any existing language features, fully backwards compatible\r\n\r\n## Dependencies\r\n- https://github.com/vyperlang/vyper/issues/2431 \r\n\r\n## References\r\n- https://en.wikipedia.org/wiki/One_Definition_Rule\r\n- https://en.wikipedia.org/wiki/Substructural_type_system\r\n- https://doc.rust-lang.org/1.8.0/book/references-and-borrowing.html\r\n- https://en.wikipedia.org/wiki/Effect_system\r\n- https://github.com/vyperlang/vyper/pull/3698\r\n- https://github.com/vyperlang/vyper/issues/3723\r\n\r\n## Copyright\r\nCopyright and related rights waived via [CC0](https://creativecommons.org/publicdomain/zero/1.0/)",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/3722/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/vyperlang/vyper/issues/3722/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/1885164164",
    "html_url": "https://github.com/vyperlang/vyper/issues/3722#issuecomment-1885164164",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/3722",
    "id": 1885164164,
    "node_id": "IC_kwDOBGDvrM5wXVKE",
    "user": {
      "login": "pcaversaccio",
      "id": 25297591,
      "node_id": "MDQ6VXNlcjI1Mjk3NTkx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25297591?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pcaversaccio",
      "html_url": "https://github.com/pcaversaccio",
      "followers_url": "https://api.github.com/users/pcaversaccio/followers",
      "following_url": "https://api.github.com/users/pcaversaccio/following{/other_user}",
      "gists_url": "https://api.github.com/users/pcaversaccio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pcaversaccio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pcaversaccio/subscriptions",
      "organizations_url": "https://api.github.com/users/pcaversaccio/orgs",
      "repos_url": "https://api.github.com/users/pcaversaccio/repos",
      "events_url": "https://api.github.com/users/pcaversaccio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pcaversaccio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2024-01-10T16:15:41Z",
    "updated_at": "2024-01-22T09:51:12Z",
    "author_association": "COLLABORATOR",
    "body": "Having intensively discussed the different tradeoffs with @charles-cooper over the last months I think this proposal is the \"better\" one of the two (https://github.com/vyperlang/vyper/issues/3723). The \"ownership hierarchy\" concept is pretty common in languages that deal with memory management and resource allocation (e.g. C, C++, or Rust) and has shown its virtues. I think this can be carried over to contract-oriented programming.\r\n\r\nSome open questions:\r\n- Python doesn't allow for `private` instance variables. I think the module design could benefit a lot from such a feature. Using a `private` variable allows encapsulating a module contract in a way that an importing contract can't change a variable in a bad way and the imported contract can expose a getter, or an internal setter if it's ok to modify.\r\n- Proxies are completely oblivious to the storage trie changes that are performed by the constructor. Upgradability might be a desirable feature (unfortunately) for some use cases, and the `__init__` logic using `owns` or `seals` can be circumvented since dedicated initialiser functions are usually called. What are your thoughts on this?\r\n- Should it be possible to remove `seals` mode for certain specific functions? I.e. a more granular control access structure than completely switching off any writes from other modules.",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/1885164164/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/1885247692",
    "html_url": "https://github.com/vyperlang/vyper/issues/3722#issuecomment-1885247692",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/3722",
    "id": 1885247692,
    "node_id": "IC_kwDOBGDvrM5wXpjM",
    "user": {
      "login": "charles-cooper",
      "id": 3867501,
      "node_id": "MDQ6VXNlcjM4Njc1MDE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3867501?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/charles-cooper",
      "html_url": "https://github.com/charles-cooper",
      "followers_url": "https://api.github.com/users/charles-cooper/followers",
      "following_url": "https://api.github.com/users/charles-cooper/following{/other_user}",
      "gists_url": "https://api.github.com/users/charles-cooper/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/charles-cooper/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/charles-cooper/subscriptions",
      "organizations_url": "https://api.github.com/users/charles-cooper/orgs",
      "repos_url": "https://api.github.com/users/charles-cooper/repos",
      "events_url": "https://api.github.com/users/charles-cooper/events{/privacy}",
      "received_events_url": "https://api.github.com/users/charles-cooper/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2024-01-10T17:03:30Z",
    "updated_at": "2024-01-10T17:03:30Z",
    "author_association": "MEMBER",
    "body": "@DanielSchiavini suggests that ownership should be the default, whereas borrowing needs to be marked",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/1885247692/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/1885251286",
    "html_url": "https://github.com/vyperlang/vyper/issues/3722#issuecomment-1885251286",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/3722",
    "id": 1885251286,
    "node_id": "IC_kwDOBGDvrM5wXqbW",
    "user": {
      "login": "charles-cooper",
      "id": 3867501,
      "node_id": "MDQ6VXNlcjM4Njc1MDE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3867501?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/charles-cooper",
      "html_url": "https://github.com/charles-cooper",
      "followers_url": "https://api.github.com/users/charles-cooper/followers",
      "following_url": "https://api.github.com/users/charles-cooper/following{/other_user}",
      "gists_url": "https://api.github.com/users/charles-cooper/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/charles-cooper/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/charles-cooper/subscriptions",
      "organizations_url": "https://api.github.com/users/charles-cooper/orgs",
      "repos_url": "https://api.github.com/users/charles-cooper/repos",
      "events_url": "https://api.github.com/users/charles-cooper/events{/privacy}",
      "received_events_url": "https://api.github.com/users/charles-cooper/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2024-01-10T17:05:39Z",
    "updated_at": "2024-01-10T17:05:39Z",
    "author_association": "MEMBER",
    "body": "> @DanielSchiavini suggests that ownership should be the default, whereas borrowing needs to be marked\r\n\r\nas an example:\r\n```vyper\r\n# library1.vy\r\nimport Library2\r\n\r\nlibrary2: borrows(Library2)\r\n\r\ndef __init__(self):\r\n    pass\r\n\r\n# contract\r\nimport Library1\r\nimport Library2\r\n\r\nlibrary1: Library1[library2]\r\nlibrary2: Library2\r\n\r\ndef __init__():\r\n    self.library2.__init__()\r\n    self.library1.__init__()\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/1885251286/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/1885261113",
    "html_url": "https://github.com/vyperlang/vyper/issues/3722#issuecomment-1885261113",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/3722",
    "id": 1885261113,
    "node_id": "IC_kwDOBGDvrM5wXs05",
    "user": {
      "login": "charles-cooper",
      "id": 3867501,
      "node_id": "MDQ6VXNlcjM4Njc1MDE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3867501?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/charles-cooper",
      "html_url": "https://github.com/charles-cooper",
      "followers_url": "https://api.github.com/users/charles-cooper/followers",
      "following_url": "https://api.github.com/users/charles-cooper/following{/other_user}",
      "gists_url": "https://api.github.com/users/charles-cooper/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/charles-cooper/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/charles-cooper/subscriptions",
      "organizations_url": "https://api.github.com/users/charles-cooper/orgs",
      "repos_url": "https://api.github.com/users/charles-cooper/repos",
      "events_url": "https://api.github.com/users/charles-cooper/events{/privacy}",
      "received_events_url": "https://api.github.com/users/charles-cooper/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2024-01-10T17:11:30Z",
    "updated_at": "2024-01-10T20:32:26Z",
    "author_association": "MEMBER",
    "body": "> Having intensively discussed the different tradeoffs with @charles-cooper over the last months I think this proposal is the \"better\" one of the two (#3723). The \"ownership hierarchy\" concept is pretty common in languages that deal with memory management and resource allocation (e.g. C, C++, or Rust) and has shown its virtues. I think this can be carried over to contract-oriented programming.\r\n\r\ni kind of agree (at least at this moment in time -- the two approaches both have their merits and i have gone back and forth on them many times). typically when people put state in a module, they intend for it to be global. this is especially familiar for people coming from a python background.\r\n\r\nput another way, the multiple instantiation paradigm is more elegant, but actually more error prone if you consider the global lock use case. it's too easy to forget to tie two instances together when the library designer intended for a piece of state to be global (which is the default design attitude for somebody who is writing a module).\r\n\r\n> Some open questions:\r\n> \r\n> * Python doesn't allow for `private` instance variables. I think the module design could benefit a lot from such a feature. Using a `private` variable allows encapsulating a module contract in a way that an importing contract can't change a variable in a bad way and the imported contract can expose a getter, or an internal setter if it's ok to modify.\r\n\r\ni think private variable declarations hurt composability. more generally, my current design philosophy is that importers should set constraints, not the importees. this design philosophy maximizes composability.\r\n\r\n> * Proxies are completely oblivious to the existence of constructors. Upgradability might be a desirable feature (unfortunately) for some use cases, and the `__init__` logic using `owns` or `seals` can be circumvented since dedicated initialiser functions are usually called. What are your thoughts on this?\r\n\r\ni will need to think about this more, but i think that delegatecall use cases are kind of orthogonal to this proposal.\r\n\r\n> * Should it be possible to remove `seals` mode for certain specific functions? I.e. a more granular control access structure than completely switching off any writes from other modules.\r\n\r\n~~i don't think so. if a library designer or (probably more commonly) a contract author seals another module, i would assume they mean it.~~\r\nEDIT: i misread this -- i don't think it's particularly useful to seal only specific parts of a module.",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/1885261113/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/1886988826",
    "html_url": "https://github.com/vyperlang/vyper/issues/3722#issuecomment-1886988826",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/3722",
    "id": 1886988826,
    "node_id": "IC_kwDOBGDvrM5weSoa",
    "user": {
      "login": "pcaversaccio",
      "id": 25297591,
      "node_id": "MDQ6VXNlcjI1Mjk3NTkx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25297591?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pcaversaccio",
      "html_url": "https://github.com/pcaversaccio",
      "followers_url": "https://api.github.com/users/pcaversaccio/followers",
      "following_url": "https://api.github.com/users/pcaversaccio/following{/other_user}",
      "gists_url": "https://api.github.com/users/pcaversaccio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pcaversaccio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pcaversaccio/subscriptions",
      "organizations_url": "https://api.github.com/users/pcaversaccio/orgs",
      "repos_url": "https://api.github.com/users/pcaversaccio/repos",
      "events_url": "https://api.github.com/users/pcaversaccio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pcaversaccio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2024-01-11T11:51:15Z",
    "updated_at": "2024-01-11T11:51:15Z",
    "author_association": "COLLABORATOR",
    "body": "> put another way, the multiple instantiation paradigm is more elegant, but actually more error prone if you consider the global lock use case. it's too easy to forget to tie two instances together when the library designer intended for a piece of state to be global (which is the default design attitude for somebody who is writing a module).\r\n\r\nExactly - generally, it's not a straightforward exercise to immediately understand the implications of multiple instances and stateful actions. Singletons optimise better IMHO for safety & reasonability, which again, is an important design principle for any Vyper feature.\r\n\r\n> i think private variable declarations hurt composability. more generally, my current design philosophy is that importers should set constraints, not the importees. this design philosophy maximizes composability.\r\n\r\nHmm, I don't think `private` variables hurt composability. On the contrary, applied correctly it can even be an enabler for better composability without shooting yourself. But I don't wanna abuse this issue for that discussion 😄; so let's stick with the as-is situation for the moment.",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/1886988826/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/1890483617",
    "html_url": "https://github.com/vyperlang/vyper/issues/3722#issuecomment-1890483617",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/3722",
    "id": 1890483617,
    "node_id": "IC_kwDOBGDvrM5wrn2h",
    "user": {
      "login": "charles-cooper",
      "id": 3867501,
      "node_id": "MDQ6VXNlcjM4Njc1MDE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3867501?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/charles-cooper",
      "html_url": "https://github.com/charles-cooper",
      "followers_url": "https://api.github.com/users/charles-cooper/followers",
      "following_url": "https://api.github.com/users/charles-cooper/following{/other_user}",
      "gists_url": "https://api.github.com/users/charles-cooper/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/charles-cooper/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/charles-cooper/subscriptions",
      "organizations_url": "https://api.github.com/users/charles-cooper/orgs",
      "repos_url": "https://api.github.com/users/charles-cooper/repos",
      "events_url": "https://api.github.com/users/charles-cooper/events{/privacy}",
      "received_events_url": "https://api.github.com/users/charles-cooper/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2024-01-13T15:11:36Z",
    "updated_at": "2024-01-14T19:24:33Z",
    "author_association": "MEMBER",
    "body": "> @DanielSchiavini suggests that ownership should be the default, whereas borrowing needs to be marked\r\n\r\nafter ruminating on this for a few days, i favor a system which marks ownership and additionally requires annotation of write dependencies as is proposed in #3723. borrowship may also be marked, although it this is a relatively small detail and can be added or removed in the future. in the following examples, i renamed the keywords `owns:` and `borrows` to `initializes:` and `uses:`, respectively. so the above example would look like\r\n\r\n```vyper\r\n# Library1.vy\r\nimport Library2 as library2\r\n\r\nuses: library2\r\n\r\ndef __init__():\r\n    pass\r\n\r\n# contract\r\nimport Library1 as lib1\r\nimport Library2 as lib2\r\n\r\ninitializes: lib2\r\ninitializes: lib1[library2 := lib2]\r\n\r\ndef __init__():\r\n    lib2.__init__()\r\n    lib1.__init__()\r\n```\r\n\r\nmore formally, the ownership hierarchy as exposed to the user is therefore:\r\n```\r\n- NO_OWNERSHIP\r\n- WRITES\r\n- INITIALIZES\r\n```\r\n\r\nas an implementation detail, i settled on using the walrus operator (`:=`) for dependency annotation, since the assignment operator (`=`) is not allowed inside of brackets.\r\n\r\nas a larger example, i wrote up the token example using this syntax here: https://gist.github.com/charles-cooper/fb5caff4eee8bbf92ed86cefaa39a855",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/1890483617/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/1890773450",
    "html_url": "https://github.com/vyperlang/vyper/issues/3722#issuecomment-1890773450",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/3722",
    "id": 1890773450,
    "node_id": "IC_kwDOBGDvrM5wsunK",
    "user": {
      "login": "fubuloubu",
      "id": 3859395,
      "node_id": "MDQ6VXNlcjM4NTkzOTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3859395?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fubuloubu",
      "html_url": "https://github.com/fubuloubu",
      "followers_url": "https://api.github.com/users/fubuloubu/followers",
      "following_url": "https://api.github.com/users/fubuloubu/following{/other_user}",
      "gists_url": "https://api.github.com/users/fubuloubu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fubuloubu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fubuloubu/subscriptions",
      "organizations_url": "https://api.github.com/users/fubuloubu/orgs",
      "repos_url": "https://api.github.com/users/fubuloubu/repos",
      "events_url": "https://api.github.com/users/fubuloubu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fubuloubu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2024-01-13T21:29:18Z",
    "updated_at": "2024-01-13T21:32:40Z",
    "author_association": "MEMBER",
    "body": "How about `require` instead of `uses` (which is a weaker verb and a protected keyword in solidity, ensuring less of a need for it as a state variable name)?\n\nAlso, is `initializes` required when you end up initializing the module anyways?\n\nYour example could look like:\n```vyper\nimport Library1\nimport Library2\n\ndef __init__():\n    Library2()\n    Library1(library2=Library2)\n```\n\n`extends` may also be a nicer word for `initializes` too",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/1890773450/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/1890965589",
    "html_url": "https://github.com/vyperlang/vyper/issues/3722#issuecomment-1890965589",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/3722",
    "id": 1890965589,
    "node_id": "IC_kwDOBGDvrM5wtdhV",
    "user": {
      "login": "charles-cooper",
      "id": 3867501,
      "node_id": "MDQ6VXNlcjM4Njc1MDE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3867501?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/charles-cooper",
      "html_url": "https://github.com/charles-cooper",
      "followers_url": "https://api.github.com/users/charles-cooper/followers",
      "following_url": "https://api.github.com/users/charles-cooper/following{/other_user}",
      "gists_url": "https://api.github.com/users/charles-cooper/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/charles-cooper/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/charles-cooper/subscriptions",
      "organizations_url": "https://api.github.com/users/charles-cooper/orgs",
      "repos_url": "https://api.github.com/users/charles-cooper/repos",
      "events_url": "https://api.github.com/users/charles-cooper/events{/privacy}",
      "received_events_url": "https://api.github.com/users/charles-cooper/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2024-01-14T14:17:57Z",
    "updated_at": "2024-01-14T14:19:37Z",
    "author_association": "MEMBER",
    "body": "> How about `require` instead of `uses` (which is a weaker verb and a protected keyword in solidity, ensuring less of a need for it as a state variable name)?\r\n\r\ni don't think we need to restrict ourselves to solidity protected keywords, we should rather choose the word which best represents the semantics. the biggest \"dent\" to UX (if you can call it that) here is that programmers won't be able to have state variables named `uses`. that said, just to have them all in one place -- the current possibilities/suggestions for the keyword names are:\r\n\r\n- ownership:\r\n  - `owns`\r\n  - `initializes`\r\n  - `controls`\r\n  - `extends`\r\n\r\n- borrowship:\r\n  - `borrows`\r\n  - `uses`\r\n  - `requires`\r\n  - `writes`\r\n\r\n> Also, is `initializes` required when you end up initializing the module anyways?\r\n> \r\n> Your example could look like:\r\n> \r\n> ```vyper\r\n> import Library1\r\n> import Library2\r\n> \r\n> def __init__():\r\n>     Library2()\r\n>     Library1(library2=Library2)\r\n> ```\r\n\r\ni considered not requiring the `initializes:` statement. however, the `initializes:` statement serves two important benefits.\r\n\r\none, it lets the programmer control where the library goes in the storage layout. i think this is important, since the other options are to (somewhat arbitrarily) either choose storage layout order depending on import order, or where the initializations occur in the source code. this way the storage layout is clear from the order in which storage variable declarations and `initializes:` statements are laid out in the source code.\r\n\r\nsecond, it allows compile-time resolution of `Library1`'s dependencies at the ownership declaration site. that's one reason why i chose the bracket notation -- it looks like a compile-time type- parametrization.\r\n\r\nthe dependency resolution *could* be done in source code, but it starts to get weird once source code is not just straight-line, e.g.:\r\n```vyper\r\ndef __init__():\r\n    if block.number % 2 == 0:\r\n        Library2()\r\n        Library1(param1, param2, library2=Library2)\r\n    else:\r\n        Library1(param2, param1, library2=Libraryyy2)  # probably a user typo, need to throw an error even though the first call to Library() is well-formed.\r\n        Library2()  # how does this affect storage layout?\r\n```\r\n\r\n> `extends` may also be a nicer word for `initializes` too\r\n\r\nadded to the list above, although i am not really a fan of `extends` as it has connotations for people coming from OOP (especially Java/C#) background.",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/1890965589/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
