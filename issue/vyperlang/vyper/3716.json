{
  "url": "https://api.github.com/repos/vyperlang/vyper/issues/3716",
  "repository_url": "https://api.github.com/repos/vyperlang/vyper",
  "labels_url": "https://api.github.com/repos/vyperlang/vyper/issues/3716/labels{/name}",
  "comments_url": "https://api.github.com/repos/vyperlang/vyper/issues/3716/comments",
  "events_url": "https://api.github.com/repos/vyperlang/vyper/issues/3716/events",
  "html_url": "https://github.com/vyperlang/vyper/issues/3716",
  "id": 2060315521,
  "node_id": "I_kwDOBGDvrM56zeuB",
  "number": 3716,
  "title": "VIP [draft]: native asset types",
  "user": {
    "login": "charles-cooper",
    "id": 3867501,
    "node_id": "MDQ6VXNlcjM4Njc1MDE=",
    "avatar_url": "https://avatars.githubusercontent.com/u/3867501?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/charles-cooper",
    "html_url": "https://github.com/charles-cooper",
    "followers_url": "https://api.github.com/users/charles-cooper/followers",
    "following_url": "https://api.github.com/users/charles-cooper/following{/other_user}",
    "gists_url": "https://api.github.com/users/charles-cooper/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/charles-cooper/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/charles-cooper/subscriptions",
    "organizations_url": "https://api.github.com/users/charles-cooper/orgs",
    "repos_url": "https://api.github.com/users/charles-cooper/repos",
    "events_url": "https://api.github.com/users/charles-cooper/events{/privacy}",
    "received_events_url": "https://api.github.com/users/charles-cooper/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 3,
  "created_at": "2023-12-29T18:30:30Z",
  "updated_at": "2023-12-30T14:22:04Z",
  "closed_at": null,
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "## Simple Summary\r\nbring new types to vyper which safely model assets, natively\r\n\r\n## Motivation\r\naccounting is hard. instead of assets being represented by raw numbers as they currently are, add a special kind of asset type which is more constrained. this removes the possibility for rounding errors and will increase clarity of user code.\r\n\r\nthis new type enforces the invariant that each action to the ledger has an equal and opposite reaction. in code- terms, it un-denormalizes code, increases DRYness and reduces the potential for accounting bugs (ex. rounding errors, missed actions).\r\n```vyper\r\n# example buggy code\r\ndef mint10():\r\n    self.balances[addr] += 10\r\n    self.totalSupply += 19  # typo\r\n```\r\n\r\n```vyper\r\n# with assets\r\ndef mint10():\r\n    self.balances[addr] += 10   # error! can't assign directly\r\n    self.balances[addr] = 10   # error! can't assign directly\r\n\r\n    self.balances.move_from(self.totalSupply, 10)\r\n```\r\n\r\nnotes:\r\n- I previously proposed a language feature in https://github.com/vyperlang/vyper/issues/1277 to solve this problem, but the form was somewhat clunky and depended on an SMT solver to work.\r\n- @jacqueswww proposed a similar function in https://github.com/vyperlang/vyper/issues/1277#issuecomment-476289291, this proposal improves on it by adding a native type with appropriate constraints for the user\r\n- other languages including flintlang and move propose mechanisms involving linear types, but i don't think applying the borrow checker model to assets really models it correctly. the purpose of linear / affine types is to ensure resources are used exactly / at most once. this is useful for RAII use cases. but the fundamental point here is that assets are never created or destroyed, only transferred between ledger tables. so applying the linear type model is a bit like trying to fit a round peg in a square hole.\r\n\r\n\r\n## Specification\r\nadd a new parametrizable type, `Asset` to vyper. `Asset` takes two type parameters, the subtype and an \"intrinsic sign\", which basically just corresponds to whether the account is debit- or credit- normal.\r\n\r\n`Asset` cannot be assigned to directly, but can only be modified through the builtin `move_from` method.\r\n\r\nexample:\r\n```vyper\r\ntotalSupply: Asset[uint256, -]  # move_from totalSupply *increases* totalSupply\r\nbalances: HashMap[address, Asset[uint256, +]  # move_from a balance *decreases* the balance\r\n\r\ndef transfer(recipient: addr, amount: uint256):\r\n    self.balances[recipient].move_from(self.balances[msg.sender], amount)\r\n\r\ndef mint(recipient: addr, amount: uint256):\r\n    self.balances[recipient].move_from(self.totalSupply, amount)\r\n```\r\n\r\ntbd:\r\n- open to other names for `Asset`\r\n- the `+/-` syntax might look a little funky to programmers, maybe `Asset` vs `NegativeAsset` are more intuitive\r\n- `move_from` could be unintuitive when the source and destination accounts have opposite intrinsic signs. if this is the case, maybe additional methods like `mint_to(src: Asset, dst: NegativeAsset)` and `burn_from(src: Asset, dst: NegativeAsset)` could potentially be considered. the usage of `move_from` in the above `mint()` function would not be allowed and it would instead be written as\r\n    ```vyper\r\n    def mint(...):\r\n        self.balances[recipient].mint_from(self.totalSupply, amount)\r\n    ```\r\n\r\n## Backwards Compatibility\r\nno breaking changes\r\n\r\n## References\r\nhttps://github.com/vyperlang/vyper/issues/1277\r\nhttps://en.wikipedia.org/wiki/Debits_and_credits\r\n\r\n## Copyright\r\nCopyright and related rights waived via [CC0](https://creativecommons.org/publicdomain/zero/1.0/)\r\n",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/3716/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/vyperlang/vyper/issues/3716/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/1872510530",
    "html_url": "https://github.com/vyperlang/vyper/issues/3716#issuecomment-1872510530",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/3716",
    "id": 1872510530,
    "node_id": "IC_kwDOBGDvrM5vnD5C",
    "user": {
      "login": "pcaversaccio",
      "id": 25297591,
      "node_id": "MDQ6VXNlcjI1Mjk3NTkx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25297591?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pcaversaccio",
      "html_url": "https://github.com/pcaversaccio",
      "followers_url": "https://api.github.com/users/pcaversaccio/followers",
      "following_url": "https://api.github.com/users/pcaversaccio/following{/other_user}",
      "gists_url": "https://api.github.com/users/pcaversaccio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pcaversaccio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pcaversaccio/subscriptions",
      "organizations_url": "https://api.github.com/users/pcaversaccio/orgs",
      "repos_url": "https://api.github.com/users/pcaversaccio/repos",
      "events_url": "https://api.github.com/users/pcaversaccio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pcaversaccio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-12-30T11:36:18Z",
    "updated_at": "2023-12-30T11:36:18Z",
    "author_association": "COLLABORATOR",
    "body": "Overall I like this idea very much. But I have to admit that I had to read the specs multiple times to understand the semantics of the \"intrinsic sign\" correctly. I think the word `move` can also be debated. Like asset creations (i.e. what you refer to minting above) could be called `create_resource(...)` and destroying/removing assets could be simply called `destroy_resource(...)` (see below my naming suggestion). For moving the asset, it could be simply `transfer_resource(...)`. This wording is much faster to comprehend. Also, what do you think about this syntax instead (I implicitly want to kick off the convo around generics):\r\n\r\n```vyper\r\nT = vyper.TypeVar(\"uint256\")\r\ntotalSupply: public(Resource[T])\r\nbalanceOf: public(HashMap[address, Resource[vyper.type(self.totalSupply)])\r\n\r\ndef transfer(to: address, amount: uint256):\r\n    transfer_resource(self.totalSupply, self.balanceOf[msg.sender], self.balanceOf[to], amount)\r\n\r\ndef mint(owner: address, amount: uint256):\r\n    create_resource(self.totalSupply, empty(address), self.balanceOf[owner], amount)\r\n\r\ndef burn(owner: address, amount: uint256):\r\n    destroy_resource(self.totalSupply, self.balanceOf[owner], empty(address), amount)\r\n```\r\n\r\nSo the functions would be like:\r\n\r\n```vyper\r\ntransfer_resource(resource: Resource[T], resource_origin: HashMap[address, Resource[vyper.type(resource)]], resource_destination: HashMap[address, Resource[vyper.type(resource)]], resource_amount: uint256)\r\ncreate_resource(resource: Resource[T], resource_origin: address=empty(address), resource_destination: HashMap[address, Resource[vyper.type(resource)]], resource_amount: uint256)\r\ndestroy_resource(resource: Resource[T], resource_origin: HashMap[address, Resource[vyper.type(resource)]], resource_destination: address=empty(address), resource_amount: uint256)\r\n```\r\n\r\nWe might want to have an `unsafe` version of it for people who wanna skip the compiler invariant checks to save gas and assume they know what they do :). Maybe this can be implemented via a `kwarg`...\r\n\r\nI personally like `Resource` as a name since it's somehow more general. `Asset` is very finger-pointing to DeFi somehow, which is fine, but we should consider a name that is more generic IMO.",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/1872510530/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/1872536748",
    "html_url": "https://github.com/vyperlang/vyper/issues/3716#issuecomment-1872536748",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/3716",
    "id": 1872536748,
    "node_id": "IC_kwDOBGDvrM5vnKSs",
    "user": {
      "login": "charles-cooper",
      "id": 3867501,
      "node_id": "MDQ6VXNlcjM4Njc1MDE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3867501?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/charles-cooper",
      "html_url": "https://github.com/charles-cooper",
      "followers_url": "https://api.github.com/users/charles-cooper/followers",
      "following_url": "https://api.github.com/users/charles-cooper/following{/other_user}",
      "gists_url": "https://api.github.com/users/charles-cooper/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/charles-cooper/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/charles-cooper/subscriptions",
      "organizations_url": "https://api.github.com/users/charles-cooper/orgs",
      "repos_url": "https://api.github.com/users/charles-cooper/repos",
      "events_url": "https://api.github.com/users/charles-cooper/events{/privacy}",
      "received_events_url": "https://api.github.com/users/charles-cooper/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-12-30T14:20:29Z",
    "updated_at": "2023-12-30T14:20:29Z",
    "author_association": "MEMBER",
    "body": "i have a slight preference for \"asset\"- related terminology. \"resource\" sounds more like filehandles or linear types.\r\n\r\ni think maybe the key insight from the \"theory\" of double-entry accounting being applied here is that assets are never created or destroyed, only moved -- and the way it is able to work is because some accounts have opposite intrinsic sign than others. so `balances[addr].move_from(totalSupply)` is a debit to totalSupply and a credit to balances, but that increases the value of both accounts. it enforces the invariant `totalSupply - sum(balances) == 0` by construction!",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/1872536748/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/1872536937",
    "html_url": "https://github.com/vyperlang/vyper/issues/3716#issuecomment-1872536937",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/3716",
    "id": 1872536937,
    "node_id": "IC_kwDOBGDvrM5vnKVp",
    "user": {
      "login": "charles-cooper",
      "id": 3867501,
      "node_id": "MDQ6VXNlcjM4Njc1MDE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3867501?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/charles-cooper",
      "html_url": "https://github.com/charles-cooper",
      "followers_url": "https://api.github.com/users/charles-cooper/followers",
      "following_url": "https://api.github.com/users/charles-cooper/following{/other_user}",
      "gists_url": "https://api.github.com/users/charles-cooper/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/charles-cooper/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/charles-cooper/subscriptions",
      "organizations_url": "https://api.github.com/users/charles-cooper/orgs",
      "repos_url": "https://api.github.com/users/charles-cooper/repos",
      "events_url": "https://api.github.com/users/charles-cooper/events{/privacy}",
      "received_events_url": "https://api.github.com/users/charles-cooper/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-12-30T14:21:40Z",
    "updated_at": "2023-12-30T14:21:40Z",
    "author_association": "MEMBER",
    "body": "recommended reading for those unfamiliar with the debits/credits terminology: https://en.wikipedia.org/wiki/Debits_and_credits",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/1872536937/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
