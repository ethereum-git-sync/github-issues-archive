{
  "url": "https://api.github.com/repos/vyperlang/vyper/issues/3716",
  "repository_url": "https://api.github.com/repos/vyperlang/vyper",
  "labels_url": "https://api.github.com/repos/vyperlang/vyper/issues/3716/labels{/name}",
  "comments_url": "https://api.github.com/repos/vyperlang/vyper/issues/3716/comments",
  "events_url": "https://api.github.com/repos/vyperlang/vyper/issues/3716/events",
  "html_url": "https://github.com/vyperlang/vyper/issues/3716",
  "id": 2060315521,
  "node_id": "I_kwDOBGDvrM56zeuB",
  "number": 3716,
  "title": "VIP [draft]: native asset types",
  "user": {
    "login": "charles-cooper",
    "id": 3867501,
    "node_id": "MDQ6VXNlcjM4Njc1MDE=",
    "avatar_url": "https://avatars.githubusercontent.com/u/3867501?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/charles-cooper",
    "html_url": "https://github.com/charles-cooper",
    "followers_url": "https://api.github.com/users/charles-cooper/followers",
    "following_url": "https://api.github.com/users/charles-cooper/following{/other_user}",
    "gists_url": "https://api.github.com/users/charles-cooper/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/charles-cooper/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/charles-cooper/subscriptions",
    "organizations_url": "https://api.github.com/users/charles-cooper/orgs",
    "repos_url": "https://api.github.com/users/charles-cooper/repos",
    "events_url": "https://api.github.com/users/charles-cooper/events{/privacy}",
    "received_events_url": "https://api.github.com/users/charles-cooper/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 0,
  "created_at": "2023-12-29T18:30:30Z",
  "updated_at": "2023-12-29T18:34:19Z",
  "closed_at": null,
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "## Simple Summary\r\nbring new types to vyper which safely model assets, natively\r\n\r\n## Motivation\r\naccounting is hard. instead of assets being represented by raw numbers as they currently are, add a special kind of asset type which is more constrained. this removes the possibility for rounding errors and will increase clarity of user code.\r\n\r\nthis new type enforces the invariant that each action to the ledger has an equal and opposite reaction. in code- terms, it un-denormalizes code, increases DRYness and reduces the potential for accounting bugs (ex. rounding errors, missed actions).\r\n```vyper\r\n# example buggy code\r\ndef mint10():\r\n    self.balances[addr] += 10\r\n    self.totalSupply += 19  # typo\r\n```\r\n\r\n```vyper\r\n# with assets\r\ndef mint10():\r\n    self.balances[addr] += 10   # error! can't assign directly\r\n    self.balances[addr] = 10   # error! can't assign directly\r\n\r\n    self.balances.move_from(self.totalSupply, 10)\r\n```\r\n\r\nnotes:\r\n- I previously proposed a language feature in https://github.com/vyperlang/vyper/issues/1277 to solve this problem, but the form was somewhat clunky and depended on an SMT solver to work.\r\n- @jacqueswww proposed a similar function in https://github.com/vyperlang/vyper/issues/1277#issuecomment-476289291, this proposal improves on it by adding a native type with appropriate constraints for the user\r\n- other languages including flintlang and move propose mechanisms involving linear types, but i don't think applying the borrow checker model to assets really gets to the heart of the problem.\r\n\r\n\r\n## Specification\r\nadd a new parametrizable type, `Asset` to vyper. `Asset` takes two type parameters, the subtype and an \"intrinsic sign\", which basically just corresponds to whether the account is debit- or credit- normal.\r\n\r\n`Asset` cannot be assigned to directly, but can only be modified through the builtin `move_from` method.\r\n\r\nexample:\r\n```vyper\r\ntotalSupply: Asset[uint256, -]  # move_from totalSupply *increases* totalSupply\r\nbalances: HashMap[address, Asset[uint256, +]  # move_from a balance *decreases* the balance\r\n\r\ndef transfer(recipient: addr, amount: uint256):\r\n    self.balances[recipient].move_from(self.balances[msg.sender], amount)\r\n\r\ndef mint(recipient: addr, amount: uint256):\r\n    self.balances[recipient].move_from(self.totalSupply, amount)\r\n```\r\n\r\ntbd:\r\n- open to other names for `Asset`\r\n- the `+/-` syntax might look a little funky to programmers, maybe `Asset` vs `NegativeAsset` are more intuitive\r\n- `move_from` could be unintuitive when the source and destination accounts have opposite intrinsic signs. if this is the case, maybe additional methods like `mint_to(src: Asset, dst: NegativeAsset)` and `burn_from(src: Asset, dst: NegativeAsset)` could potentially be considered. the usage of `move_from` in the above `mint()` function would not be allowed and it would instead be written as\r\n    ```vyper\r\n    def mint(...):\r\n        self.balances[recipient].mint_from(self.totalSupply, amount)\r\n    ```\r\n\r\n## Backwards Compatibility\r\nno breaking changes\r\n\r\n## References\r\n\r\n## Copyright\r\nCopyright and related rights waived via [CC0](https://creativecommons.org/publicdomain/zero/1.0/)\r\n",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/3716/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/vyperlang/vyper/issues/3716/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[

]
