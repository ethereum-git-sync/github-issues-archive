{
  "url": "https://api.github.com/repos/vyperlang/vyper/issues/1954",
  "repository_url": "https://api.github.com/repos/vyperlang/vyper",
  "labels_url": "https://api.github.com/repos/vyperlang/vyper/issues/1954/labels{/name}",
  "comments_url": "https://api.github.com/repos/vyperlang/vyper/issues/1954/comments",
  "events_url": "https://api.github.com/repos/vyperlang/vyper/issues/1954/events",
  "html_url": "https://github.com/vyperlang/vyper/issues/1954",
  "id": 614119252,
  "node_id": "MDU6SXNzdWU2MTQxMTkyNTI=",
  "number": 1954,
  "title": "VIP: Custom Storage Types",
  "user": {
    "login": "fubuloubu",
    "id": 3859395,
    "node_id": "MDQ6VXNlcjM4NTkzOTU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/3859395?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/fubuloubu",
    "html_url": "https://github.com/fubuloubu",
    "followers_url": "https://api.github.com/users/fubuloubu/followers",
    "following_url": "https://api.github.com/users/fubuloubu/following{/other_user}",
    "gists_url": "https://api.github.com/users/fubuloubu/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/fubuloubu/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/fubuloubu/subscriptions",
    "organizations_url": "https://api.github.com/users/fubuloubu/orgs",
    "repos_url": "https://api.github.com/users/fubuloubu/repos",
    "events_url": "https://api.github.com/users/fubuloubu/events{/privacy}",
    "received_events_url": "https://api.github.com/users/fubuloubu/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 751622094,
      "node_id": "MDU6TGFiZWw3NTE2MjIwOTQ=",
      "url": "https://api.github.com/repos/vyperlang/vyper/labels/VIP:%20Discussion",
      "name": "VIP: Discussion",
      "color": "000000",
      "default": false,
      "description": "Used to denote VIPs and more complex issues that are waiting discussion in a meeting"
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 5,
  "created_at": "2020-05-07T14:50:50Z",
  "updated_at": "2022-05-20T13:10:57Z",
  "closed_at": null,
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "## Simple Summary\r\nAllow logical components of a program to be specified separately from a main contract file\r\n\r\n## Motivation\r\nIt is very important to larger contracts to be able to break apart functionality from the main file for logical separation. This means we have to find an appropriate way to allow to break out logical functionality that has a high degree of separation. This could also simplify the implementation of several proposed features such as #484 and #1020 by making them internal library components.\r\n\r\n## Specification\r\nA Component is defined very similarly to a contract, with certain features disallowed:\r\n1. Interface imports (importing other components allowed)\r\n2. Function decorators (full access by default)\r\n3. Event logging\r\n4. Struct definitions\r\n5. External calls\r\n6. Environment variables disallowed for internal methods\r\n\r\n### Examples\r\n\r\nConstructor methods are defined using `__init__(self, *args)`:\r\n```python\r\ncomponent MyComponent:\r\n    def __init__(self, _a: uint256):\r\n        ... # do something with _a\r\n```\r\n\r\nComponents can have internal storage:\r\n```python\r\ncomponent MyComponent:\r\n    ...\r\n\r\n    bar: uint256  # internal state\r\n\r\n    def foo(self):\r\n        self.bar += 1\r\n```\r\n\r\nComponents can use environment variables:\r\n```python\r\ncomponent MyComponent:\r\n    ...\r\n\r\n    def baz() -> uint256:\r\n        return msg.timestamp\r\n```\r\n\r\n### Usage\r\n\r\nA Component can be imported into a contract file similar to an interface:\r\n```python\r\nfrom my_component import MyComponent\r\n```\r\n\r\nIt is defined similar to Python objects, and must be instantiated:\r\n```python\r\n...\r\nc: MyComponent = MyComponent(...)\r\n...\r\n```\r\n\r\nTheir implementation would be similar to structs, but with the addition of methods as struct members. They can be used in the same way as structs:\r\n```python\r\nc: MyComponent\r\n\r\ndef bar() -> uint256:\r\n    self.c.foo()  # self.c.bar += 1\r\n    return self.c.bar\r\n```\r\n\r\n## Backwards Compatibility\r\nNo backwards incompatibilities.\r\n\r\n## Dependencies\r\nNo dependencies.\r\n\r\n## References\r\nhttps://diligence.consensys.net/blog/2020/05/an-experiment-in-designing-a-new-smart-contract-language/\r\n\r\n## Copyright\r\nCopyright and related rights waived via [CC0](https://creativecommons.org/publicdomain/zero/1.0/)",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/1954/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/vyperlang/vyper/issues/1954/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/626890234",
    "html_url": "https://github.com/vyperlang/vyper/issues/1954#issuecomment-626890234",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/1954",
    "id": 626890234,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYyNjg5MDIzNA==",
    "user": {
      "login": "fubuloubu",
      "id": 3859395,
      "node_id": "MDQ6VXNlcjM4NTkzOTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3859395?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fubuloubu",
      "html_url": "https://github.com/fubuloubu",
      "followers_url": "https://api.github.com/users/fubuloubu/followers",
      "following_url": "https://api.github.com/users/fubuloubu/following{/other_user}",
      "gists_url": "https://api.github.com/users/fubuloubu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fubuloubu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fubuloubu/subscriptions",
      "organizations_url": "https://api.github.com/users/fubuloubu/orgs",
      "repos_url": "https://api.github.com/users/fubuloubu/repos",
      "events_url": "https://api.github.com/users/fubuloubu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fubuloubu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-05-11T18:53:13Z",
    "updated_at": "2020-05-11T18:53:13Z",
    "author_association": "MEMBER",
    "body": "Meeting notes: Come back to this when it's more concrete.",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/626890234/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/946153874",
    "html_url": "https://github.com/vyperlang/vyper/issues/1954#issuecomment-946153874",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/1954",
    "id": 946153874,
    "node_id": "IC_kwDOBGDvrM44ZSmS",
    "user": {
      "login": "charles-cooper",
      "id": 3867501,
      "node_id": "MDQ6VXNlcjM4Njc1MDE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3867501?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/charles-cooper",
      "html_url": "https://github.com/charles-cooper",
      "followers_url": "https://api.github.com/users/charles-cooper/followers",
      "following_url": "https://api.github.com/users/charles-cooper/following{/other_user}",
      "gists_url": "https://api.github.com/users/charles-cooper/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/charles-cooper/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/charles-cooper/subscriptions",
      "organizations_url": "https://api.github.com/users/charles-cooper/orgs",
      "repos_url": "https://api.github.com/users/charles-cooper/repos",
      "events_url": "https://api.github.com/users/charles-cooper/events{/privacy}",
      "received_events_url": "https://api.github.com/users/charles-cooper/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-10-18T20:49:41Z",
    "updated_at": "2021-10-18T20:57:57Z",
    "author_association": "COLLABORATOR",
    "body": "Right now the thinking is if a contract has storage variables in it, then it's one of these (storage variables + methods on them), otherwise it's a stateless \"library\" as in #2431. Unclear if there should be syntactic difference from a regular contract.",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/946153874/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/946183374",
    "html_url": "https://github.com/vyperlang/vyper/issues/1954#issuecomment-946183374",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/1954",
    "id": 946183374,
    "node_id": "IC_kwDOBGDvrM44ZZzO",
    "user": {
      "login": "charles-cooper",
      "id": 3867501,
      "node_id": "MDQ6VXNlcjM4Njc1MDE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3867501?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/charles-cooper",
      "html_url": "https://github.com/charles-cooper",
      "followers_url": "https://api.github.com/users/charles-cooper/followers",
      "following_url": "https://api.github.com/users/charles-cooper/following{/other_user}",
      "gists_url": "https://api.github.com/users/charles-cooper/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/charles-cooper/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/charles-cooper/subscriptions",
      "organizations_url": "https://api.github.com/users/charles-cooper/orgs",
      "repos_url": "https://api.github.com/users/charles-cooper/repos",
      "events_url": "https://api.github.com/users/charles-cooper/events{/privacy}",
      "received_events_url": "https://api.github.com/users/charles-cooper/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-10-18T21:31:27Z",
    "updated_at": "2021-10-18T21:31:27Z",
    "author_association": "COLLABORATOR",
    "body": "One question is: should components be instantiable in memory? Or can they have HashMaps as members.",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/946183374/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/946188132",
    "html_url": "https://github.com/vyperlang/vyper/issues/1954#issuecomment-946188132",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/1954",
    "id": 946188132,
    "node_id": "IC_kwDOBGDvrM44Za9k",
    "user": {
      "login": "fubuloubu",
      "id": 3859395,
      "node_id": "MDQ6VXNlcjM4NTkzOTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3859395?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fubuloubu",
      "html_url": "https://github.com/fubuloubu",
      "followers_url": "https://api.github.com/users/fubuloubu/followers",
      "following_url": "https://api.github.com/users/fubuloubu/following{/other_user}",
      "gists_url": "https://api.github.com/users/fubuloubu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fubuloubu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fubuloubu/subscriptions",
      "organizations_url": "https://api.github.com/users/fubuloubu/orgs",
      "repos_url": "https://api.github.com/users/fubuloubu/repos",
      "events_url": "https://api.github.com/users/fubuloubu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fubuloubu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-10-18T21:38:31Z",
    "updated_at": "2021-10-18T21:38:31Z",
    "author_association": "MEMBER",
    "body": "> One question is: should components be instantiable in memory? Or can they have HashMaps as members.\r\n\r\nIn Solidity, it is possible to define a struct with a mapping as a member, however it implicitly precludes it from being used as a memory variable, which is weird.",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/946188132/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/1132883881",
    "html_url": "https://github.com/vyperlang/vyper/issues/1954#issuecomment-1132883881",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/1954",
    "id": 1132883881,
    "node_id": "IC_kwDOBGDvrM5Dhm-p",
    "user": {
      "login": "charles-cooper",
      "id": 3867501,
      "node_id": "MDQ6VXNlcjM4Njc1MDE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3867501?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/charles-cooper",
      "html_url": "https://github.com/charles-cooper",
      "followers_url": "https://api.github.com/users/charles-cooper/followers",
      "following_url": "https://api.github.com/users/charles-cooper/following{/other_user}",
      "gists_url": "https://api.github.com/users/charles-cooper/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/charles-cooper/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/charles-cooper/subscriptions",
      "organizations_url": "https://api.github.com/users/charles-cooper/orgs",
      "repos_url": "https://api.github.com/users/charles-cooper/repos",
      "events_url": "https://api.github.com/users/charles-cooper/events{/privacy}",
      "received_events_url": "https://api.github.com/users/charles-cooper/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-05-20T13:10:57Z",
    "updated_at": "2022-05-20T13:10:57Z",
    "author_association": "COLLABORATOR",
    "body": "i ported an example solidity contract (https://github.com/tellor-io/TellorPlayground/blob/575cfc565c9526df1320d3389fcb015bc86d1107/contracts/TellorPlayground.sol#L224-L279) to play around with this idea. so far, the encapsulation looks good, but it might be more natural if the \"component\" could access the parent contract's methods.\r\n\r\ncompare methods `depositStake(), requestStakingWithdraw(), withdrawStake()` at https://gist.github.com/charles-cooper/c40d8ea66b8afc0d552dc8776d0fc952#file-tellor_playground-vy. the fact that storage variables are not needed is nice. however, there is a bit of awkardness, because `withdrawStake()` and `depositStake()` require a call to `self._transfer()` in the parent contract. it might be better if it were possible to add the transfer logic inside of `StakeInfo.mark_stake_withdrawn()` and `StakeInfo.deposit_stake()`, because it would be easier to verify the invariants.",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/1132883881/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
