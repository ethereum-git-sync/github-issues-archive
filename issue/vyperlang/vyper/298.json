{
  "url": "https://api.github.com/repos/vyperlang/vyper/issues/298",
  "repository_url": "https://api.github.com/repos/vyperlang/vyper",
  "labels_url": "https://api.github.com/repos/vyperlang/vyper/issues/298/labels{/name}",
  "comments_url": "https://api.github.com/repos/vyperlang/vyper/issues/298/comments",
  "events_url": "https://api.github.com/repos/vyperlang/vyper/issues/298/events",
  "html_url": "https://github.com/vyperlang/vyper/issues/298",
  "id": 246520201,
  "node_id": "MDU6SXNzdWUyNDY1MjAyMDE=",
  "number": 298,
  "title": "Payable semantics and abstract transferable goods.",
  "user": {
    "login": "Dexaran",
    "id": 26142412,
    "node_id": "MDQ6VXNlcjI2MTQyNDEy",
    "avatar_url": "https://avatars.githubusercontent.com/u/26142412?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/Dexaran",
    "html_url": "https://github.com/Dexaran",
    "followers_url": "https://api.github.com/users/Dexaran/followers",
    "following_url": "https://api.github.com/users/Dexaran/following{/other_user}",
    "gists_url": "https://api.github.com/users/Dexaran/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/Dexaran/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/Dexaran/subscriptions",
    "organizations_url": "https://api.github.com/users/Dexaran/orgs",
    "repos_url": "https://api.github.com/users/Dexaran/repos",
    "events_url": "https://api.github.com/users/Dexaran/events{/privacy}",
    "received_events_url": "https://api.github.com/users/Dexaran/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 4,
  "created_at": "2017-07-29T12:58:31Z",
  "updated_at": "2019-02-11T15:25:09Z",
  "closed_at": "2019-02-11T15:25:09Z",
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "## Abstract\r\n\r\nEther, other cryptocurrencies and contract-based digital assets are about money. I think that tokens, subcurrencies and other abstract calculable goods are very important part of Ethereum ecosystem.\r\n\r\nI'd like to suggest some modifications that , I think, would help to avoid **accidentally monetary losses** in future.\r\n\r\n## Motivation\r\n\r\nThere are numbers of abstract digital goods on Ethereum: different tokens, unicorns etc. etc.\r\n\r\nThese abstract digital goods are transferable. This means that a transaction for the purpose of transferring goods from one account to another can be performed.\r\n\r\nIt's obvious that transaction of digital goods must be properly handled (doesn't matter Ether or any abstract asset).\r\n\r\nEther transactions could only be handled by `@payable` functions. I think that it is important to introduce an opportunity to require `payable` modifier for callable function.\r\n\r\n**Main idea:** when you call a function with the `@abstract_payment` modifier in contract *A*, which calls another contract *B*, then inside *B* only the `@payable` function can be called. Each execution of the function of the contract *B*, which is not `@ payable`, must fail.\r\n\r\n## Example\r\n\r\n#### Ether transfer\r\nWe are calling `@payable` function and attaching Ether to the transaction.\r\nIf there is no function with matching signature implemented in the receiver contract, then the fallback function of the receiver will be executed.\r\n\r\nIf the fallback function is not `@payable` then the transaction will fail and nothing bad will happen.\r\n\r\n#### Abstract asset transfer\r\nThe `transferAndCall` function of the ERC20 token is calling `receiveTransfer` function at the receiver contract.\r\nIf there is no `receiveTransfer` function implemented in the receiver contract, then the fallback function of the receiver will be executed.\r\n\r\nIf the fallback function is implemented then it will result in *accidentally lost* (stuck) tokens, unlike Ether that will be thrown in this case.\r\n\r\n## Resolution\r\n\r\nI suggest to add an `@abstract_payment` modifier (decorator).\r\n\r\nA function with the modifier `@abstract_payment` can be handled only by `@payable` functions. This allows contract developers to artificially require their function calls to be handled only by properly designed functions. This will reduce possibilities of mistakes and allow to avoid accidentally lost money in future.\r\n\r\n### Example\r\n\r\nAbstract digital asset contract:\r\n\r\n```python\r\n@abstract_payment\r\ndef transfer_and_call(_to : address, _value : num256) -> bool:\r\n    # this must call `on_transfer` at the receiver.\r\n    return true\r\n```\r\n\r\nProper receiver contract implementation:\r\n\r\n```python\r\n@payable\r\ndef on_transfer():\r\n    # This function will be properly called.\r\n\r\n# I'm not familiar with the syntax yet and I didn't found\r\n# any examples of fallback function definition\r\ndef fallback():\r\n    # Do something.\r\n```\r\n\r\nIn this case `fallback` function is not `@payable`. This means that it **must throw** whenever it received Ether or any abstract goods.\r\n\r\n`@abstract_payment` requires this function call to be handled by `@payable` functions only.\r\n\r\n## Optional\r\nI think that it can be a good idea to leave `@payable` functions for handling of Ether payments and introduce a new `@abstract_payable` for abstract payments but it seems superfluous.\r\nPayments can be recognized by the variable `msg.value`.\r\nIf `msg.value` > 0 then it is Ether payment.\r\nIf `msg.value` = 0 then it is abstract payment.\r\n\r\nAt the other hand this will allow `@payable` functions to receive both abstract goods payments and Ether payments.\r\n\r\n@vbuterin what do you think about it?",
  "closed_by": {
    "login": "jacqueswww",
    "id": 6917456,
    "node_id": "MDQ6VXNlcjY5MTc0NTY=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6917456?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jacqueswww",
    "html_url": "https://github.com/jacqueswww",
    "followers_url": "https://api.github.com/users/jacqueswww/followers",
    "following_url": "https://api.github.com/users/jacqueswww/following{/other_user}",
    "gists_url": "https://api.github.com/users/jacqueswww/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jacqueswww/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jacqueswww/subscriptions",
    "organizations_url": "https://api.github.com/users/jacqueswww/orgs",
    "repos_url": "https://api.github.com/users/jacqueswww/repos",
    "events_url": "https://api.github.com/users/jacqueswww/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jacqueswww/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/298/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/vyperlang/vyper/issues/298/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/326704712",
    "html_url": "https://github.com/vyperlang/vyper/issues/298#issuecomment-326704712",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/298",
    "id": 326704712,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMyNjcwNDcxMg==",
    "user": {
      "login": "DavidKnott",
      "id": 17552858,
      "node_id": "MDQ6VXNlcjE3NTUyODU4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17552858?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/DavidKnott",
      "html_url": "https://github.com/DavidKnott",
      "followers_url": "https://api.github.com/users/DavidKnott/followers",
      "following_url": "https://api.github.com/users/DavidKnott/following{/other_user}",
      "gists_url": "https://api.github.com/users/DavidKnott/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/DavidKnott/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/DavidKnott/subscriptions",
      "organizations_url": "https://api.github.com/users/DavidKnott/orgs",
      "repos_url": "https://api.github.com/users/DavidKnott/repos",
      "events_url": "https://api.github.com/users/DavidKnott/events{/privacy}",
      "received_events_url": "https://api.github.com/users/DavidKnott/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-09-01T23:36:06Z",
    "updated_at": "2017-09-01T23:36:25Z",
    "author_association": "CONTRIBUTOR",
    "body": "@Dexaran This is an interesting idea.  Though I think if it's implemented the optional version with both `@abstract_payable` and `@abstract_payment` would be best as having only `@payable` seems like a decrease in safety (being able to send Ether to a function that should only be able to accept tokens seems like a bad thing).   Would you be willing to take a crack at coding this functionality?",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/326704712/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/326722262",
    "html_url": "https://github.com/vyperlang/vyper/issues/298#issuecomment-326722262",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/298",
    "id": 326722262,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMyNjcyMjI2Mg==",
    "user": {
      "login": "Dexaran",
      "id": 26142412,
      "node_id": "MDQ6VXNlcjI2MTQyNDEy",
      "avatar_url": "https://avatars.githubusercontent.com/u/26142412?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Dexaran",
      "html_url": "https://github.com/Dexaran",
      "followers_url": "https://api.github.com/users/Dexaran/followers",
      "following_url": "https://api.github.com/users/Dexaran/following{/other_user}",
      "gists_url": "https://api.github.com/users/Dexaran/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Dexaran/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Dexaran/subscriptions",
      "organizations_url": "https://api.github.com/users/Dexaran/orgs",
      "repos_url": "https://api.github.com/users/Dexaran/repos",
      "events_url": "https://api.github.com/users/Dexaran/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Dexaran/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-09-02T04:59:58Z",
    "updated_at": "2017-09-02T05:00:26Z",
    "author_association": "NONE",
    "body": "@DavidKnott \r\n\r\n>Though I think if it's implemented the optional version with both @abstract_payable and @abstract_payment would be best as having only `@payable` seems like a decrease in safety\r\n\r\nAgreed. I've thought about it and I came into conclusion that it will be better to have a separate `@abstract_payment` functionality instead of mixing it with `@payable` functionality.\r\n\r\n>Would you be willing to take a crack at coding this functionality?\r\n\r\nUnfortunately, I do not have enough time in the near future to implement it myself. Maybe I'll do it later.",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/326722262/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/326755320",
    "html_url": "https://github.com/vyperlang/vyper/issues/298#issuecomment-326755320",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/298",
    "id": 326755320,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMyNjc1NTMyMA==",
    "user": {
      "login": "DavidKnott",
      "id": 17552858,
      "node_id": "MDQ6VXNlcjE3NTUyODU4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17552858?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/DavidKnott",
      "html_url": "https://github.com/DavidKnott",
      "followers_url": "https://api.github.com/users/DavidKnott/followers",
      "following_url": "https://api.github.com/users/DavidKnott/following{/other_user}",
      "gists_url": "https://api.github.com/users/DavidKnott/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/DavidKnott/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/DavidKnott/subscriptions",
      "organizations_url": "https://api.github.com/users/DavidKnott/orgs",
      "repos_url": "https://api.github.com/users/DavidKnott/repos",
      "events_url": "https://api.github.com/users/DavidKnott/events{/privacy}",
      "received_events_url": "https://api.github.com/users/DavidKnott/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-09-02T16:41:19Z",
    "updated_at": "2017-09-02T16:41:19Z",
    "author_association": "CONTRIBUTOR",
    "body": "Thanks for the quick response, as of right now this issue seems non-essential (in terms of making Viper usable), so it'll be a while, but I'd definitely like to see it implemented down the road.",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/326755320/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/397839590",
    "html_url": "https://github.com/vyperlang/vyper/issues/298#issuecomment-397839590",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/298",
    "id": 397839590,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5NzgzOTU5MA==",
    "user": {
      "login": "fulldecent",
      "id": 382183,
      "node_id": "MDQ6VXNlcjM4MjE4Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/382183?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fulldecent",
      "html_url": "https://github.com/fulldecent",
      "followers_url": "https://api.github.com/users/fulldecent/followers",
      "following_url": "https://api.github.com/users/fulldecent/following{/other_user}",
      "gists_url": "https://api.github.com/users/fulldecent/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fulldecent/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fulldecent/subscriptions",
      "organizations_url": "https://api.github.com/users/fulldecent/orgs",
      "repos_url": "https://api.github.com/users/fulldecent/repos",
      "events_url": "https://api.github.com/users/fulldecent/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fulldecent/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-06-16T21:23:19Z",
    "updated_at": "2018-06-16T21:23:19Z",
    "author_association": "CONTRIBUTOR",
    "body": "This proposal is not scalable, will we update the language to add modifiers for other token standards? What about other valuable-things standards? What about adding a modifier and a callback for anything that could ever possibly go wrong?\r\n\r\nIt is too limiting to only consider ERC-20 and similar concepts. At some point you have to trust the programmers to do the programming.",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/397839590/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
