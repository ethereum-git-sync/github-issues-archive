{
  "url": "https://api.github.com/repos/vyperlang/vyper/issues/3175",
  "repository_url": "https://api.github.com/repos/vyperlang/vyper",
  "labels_url": "https://api.github.com/repos/vyperlang/vyper/issues/3175/labels{/name}",
  "comments_url": "https://api.github.com/repos/vyperlang/vyper/issues/3175/comments",
  "events_url": "https://api.github.com/repos/vyperlang/vyper/issues/3175/events",
  "html_url": "https://github.com/vyperlang/vyper/issues/3175",
  "id": 1481320415,
  "node_id": "I_kwDOBGDvrM5YSyff",
  "number": 3175,
  "title": "Array can be modified while it is being iterated",
  "user": {
    "login": "trocher",
    "id": 43437004,
    "node_id": "MDQ6VXNlcjQzNDM3MDA0",
    "avatar_url": "https://avatars.githubusercontent.com/u/43437004?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/trocher",
    "html_url": "https://github.com/trocher",
    "followers_url": "https://api.github.com/users/trocher/followers",
    "following_url": "https://api.github.com/users/trocher/following{/other_user}",
    "gists_url": "https://api.github.com/users/trocher/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/trocher/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/trocher/subscriptions",
    "organizations_url": "https://api.github.com/users/trocher/orgs",
    "repos_url": "https://api.github.com/users/trocher/repos",
    "events_url": "https://api.github.com/users/trocher/events{/privacy}",
    "received_events_url": "https://api.github.com/users/trocher/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 4038639649,
      "node_id": "LA_kwDOBGDvrM7wuMAh",
      "url": "https://api.github.com/repos/vyperlang/vyper/labels/bug%20-%20typechecker",
      "name": "bug - typechecker",
      "color": "51B431",
      "default": false,
      "description": "issue with typechecker"
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 4,
  "created_at": "2022-12-07T08:25:04Z",
  "updated_at": "2022-12-08T14:55:09Z",
  "closed_at": null,
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "### Version Information\r\n\r\n* vyper Version (output of `vyper --version`): 0.3.8+commit.046ea166\r\n* OS: OSX\r\n* Python Version (output of `python --version`): 3.8.0\r\n\r\n### What's your issue about?\r\n\r\nThe documentation states that `You cannot modify a value in an array while it is being iterated`. By iterating on a field of a `Struct` that happen to be an array and modifying the `Struct` itself in the body of the loop, it is possible to trick the compiler so that the array modification is not detected.\r\n\r\nFor example, the following code compiles and a call to `test` returns `[0,9]` meaning that `st.my_array` changed during iteration.\r\n\r\n```Vyper\r\nstruct A:\r\n    my_array: uint256[2]\r\n    \r\n@external\r\ndef test() -> DynArray[uint256,15]:\r\n    lst: DynArray[uint256,15] = []\r\n    st:A = A({my_array:[0,1]})\r\n\r\n    for i in st.my_array:\r\n        st = A({my_array:[9,9]})\r\n        lst.append(i)\r\n\r\n    return lst # returns [0,9]\r\n```\r\n\r\nNote that a similar behaviour is possible for arrays stored in storage if the body of the loop contains an external call that would modify the array during the iteration. As the only way to prevent this kind of modification would probably to have some sort of locks on arrays, I guess this one is much more subtle.\r\n\r\n[EDIT] This second case has now its own issue #3185 ",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/3175/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/vyperlang/vyper/issues/3175/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/1340925328",
    "html_url": "https://github.com/vyperlang/vyper/issues/3175#issuecomment-1340925328",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/3175",
    "id": 1340925328,
    "node_id": "IC_kwDOBGDvrM5P7OWQ",
    "user": {
      "login": "fubuloubu",
      "id": 3859395,
      "node_id": "MDQ6VXNlcjM4NTkzOTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3859395?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fubuloubu",
      "html_url": "https://github.com/fubuloubu",
      "followers_url": "https://api.github.com/users/fubuloubu/followers",
      "following_url": "https://api.github.com/users/fubuloubu/following{/other_user}",
      "gists_url": "https://api.github.com/users/fubuloubu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fubuloubu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fubuloubu/subscriptions",
      "organizations_url": "https://api.github.com/users/fubuloubu/orgs",
      "repos_url": "https://api.github.com/users/fubuloubu/repos",
      "events_url": "https://api.github.com/users/fubuloubu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fubuloubu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-12-07T12:54:50Z",
    "updated_at": "2022-12-07T12:54:58Z",
    "author_association": "MEMBER",
    "body": "In both scenarios, it should be possible to do a type of taint analysis to see if the iterable (the type being iterated over) is touched at all by any means (structs, mappings, internal calls, etc.)\r\n\r\nThis would occur at compiler time as an analysis step, I do agree that actually injecting a lock on the array at runtime would be a poor use of gas",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/1340925328/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/1341291919",
    "html_url": "https://github.com/vyperlang/vyper/issues/3175#issuecomment-1341291919",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/3175",
    "id": 1341291919,
    "node_id": "IC_kwDOBGDvrM5P8n2P",
    "user": {
      "login": "charles-cooper",
      "id": 3867501,
      "node_id": "MDQ6VXNlcjM4Njc1MDE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3867501?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/charles-cooper",
      "html_url": "https://github.com/charles-cooper",
      "followers_url": "https://api.github.com/users/charles-cooper/followers",
      "following_url": "https://api.github.com/users/charles-cooper/following{/other_user}",
      "gists_url": "https://api.github.com/users/charles-cooper/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/charles-cooper/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/charles-cooper/subscriptions",
      "organizations_url": "https://api.github.com/users/charles-cooper/orgs",
      "repos_url": "https://api.github.com/users/charles-cooper/repos",
      "events_url": "https://api.github.com/users/charles-cooper/events{/privacy}",
      "received_events_url": "https://api.github.com/users/charles-cooper/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-12-07T17:08:34Z",
    "updated_at": "2022-12-07T17:08:34Z",
    "author_association": "COLLABORATOR",
    "body": "i think this should be split in two issues.\r\n\r\nthe second one is, like you said, more subtle -- it's a re-entrancy issue, not a language issue per se. the compiler could issue a warning for instance that re-entrancy is possible inside a loop, but i'd consider it overreach for the compiler to pre-emptively lock the data structure on behalf of the user.",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/1341291919/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/1342460557",
    "html_url": "https://github.com/vyperlang/vyper/issues/3175#issuecomment-1342460557",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/3175",
    "id": 1342460557,
    "node_id": "IC_kwDOBGDvrM5QBFKN",
    "user": {
      "login": "trocher",
      "id": 43437004,
      "node_id": "MDQ6VXNlcjQzNDM3MDA0",
      "avatar_url": "https://avatars.githubusercontent.com/u/43437004?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/trocher",
      "html_url": "https://github.com/trocher",
      "followers_url": "https://api.github.com/users/trocher/followers",
      "following_url": "https://api.github.com/users/trocher/following{/other_user}",
      "gists_url": "https://api.github.com/users/trocher/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/trocher/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/trocher/subscriptions",
      "organizations_url": "https://api.github.com/users/trocher/orgs",
      "repos_url": "https://api.github.com/users/trocher/repos",
      "events_url": "https://api.github.com/users/trocher/events{/privacy}",
      "received_events_url": "https://api.github.com/users/trocher/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-12-08T10:18:41Z",
    "updated_at": "2022-12-08T10:18:41Z",
    "author_association": "CONTRIBUTOR",
    "body": "Extracted the second case to a new issue, the behaviours with `pop` and `append` seems quite weird",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/1342460557/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/1342857229",
    "html_url": "https://github.com/vyperlang/vyper/issues/3175#issuecomment-1342857229",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/3175",
    "id": 1342857229,
    "node_id": "IC_kwDOBGDvrM5QCmAN",
    "user": {
      "login": "trocher",
      "id": 43437004,
      "node_id": "MDQ6VXNlcjQzNDM3MDA0",
      "avatar_url": "https://avatars.githubusercontent.com/u/43437004?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/trocher",
      "html_url": "https://github.com/trocher",
      "followers_url": "https://api.github.com/users/trocher/followers",
      "following_url": "https://api.github.com/users/trocher/following{/other_user}",
      "gists_url": "https://api.github.com/users/trocher/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/trocher/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/trocher/subscriptions",
      "organizations_url": "https://api.github.com/users/trocher/orgs",
      "repos_url": "https://api.github.com/users/trocher/repos",
      "events_url": "https://api.github.com/users/trocher/events{/privacy}",
      "received_events_url": "https://api.github.com/users/trocher/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-12-08T14:55:09Z",
    "updated_at": "2022-12-08T14:55:09Z",
    "author_association": "CONTRIBUTOR",
    "body": "> In both scenarios, it should be possible to do a type of taint analysis to see if the iterable (the type being iterated over) is touched at all by any means (structs, mappings, internal calls, etc.)\r\n\r\nHaving such taint analysis could have the benefit to allow `for` loops to iterate over arrays that are nested in other arrays/HashMaps (`for i in arr1[arr2]`) which is currently prevented probably to avoid the same issue as the one with arrays inside of `Struct`.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/1342857229/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
