{
  "url": "https://api.github.com/repos/vyperlang/vyper/issues/3380",
  "repository_url": "https://api.github.com/repos/vyperlang/vyper",
  "labels_url": "https://api.github.com/repos/vyperlang/vyper/issues/3380/labels{/name}",
  "comments_url": "https://api.github.com/repos/vyperlang/vyper/issues/3380/comments",
  "events_url": "https://api.github.com/repos/vyperlang/vyper/issues/3380/events",
  "html_url": "https://github.com/vyperlang/vyper/issues/3380",
  "id": 1689640036,
  "node_id": "I_kwDOBGDvrM5ktdxk",
  "number": 3380,
  "title": "VIP: disable re-entrancy by default",
  "user": {
    "login": "charles-cooper",
    "id": 3867501,
    "node_id": "MDQ6VXNlcjM4Njc1MDE=",
    "avatar_url": "https://avatars.githubusercontent.com/u/3867501?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/charles-cooper",
    "html_url": "https://github.com/charles-cooper",
    "followers_url": "https://api.github.com/users/charles-cooper/followers",
    "following_url": "https://api.github.com/users/charles-cooper/following{/other_user}",
    "gists_url": "https://api.github.com/users/charles-cooper/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/charles-cooper/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/charles-cooper/subscriptions",
    "organizations_url": "https://api.github.com/users/charles-cooper/orgs",
    "repos_url": "https://api.github.com/users/charles-cooper/repos",
    "events_url": "https://api.github.com/users/charles-cooper/events{/privacy}",
    "received_events_url": "https://api.github.com/users/charles-cooper/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 18,
  "created_at": "2023-04-29T18:00:37Z",
  "updated_at": "2023-06-29T14:29:33Z",
  "closed_at": null,
  "author_association": "COLLABORATOR",
  "active_lock_reason": null,
  "body": "## Simple Summary\r\nper title\r\n\r\n## Motivation\r\nonce [EIP-1153](https://eips.ethereum.org/EIPS/eip-1153) is enabled, the cost of disabling re-entrancy into a contract before the selector table is even traversed comes down to two TSTOREs and one TLOAD, so approximately 300 gas, which is a small overhead compared to even the cost of a warm CALL, 200 gas. re-entrancy attacks are one of the biggest sources of vulnerabilities in smart contracts (todo: gather some hard stats on this), and it makes sense from a safety perspective to disable them by default. in the future, i also expect a future EIP will bring the cost of TLOAD/TSTORE down in the general case.\r\n\r\n## Specification\r\nthere are multiple possibilities here:\r\n1. introduce a `LOCK` keyword, which creates critical section/non-reentrant blocks. ex.\r\n    ```vyper\r\n    LOCK:\r\n        some_contract.foo() # re-entrancy back into this contract unavailable here\r\n    ```\r\n2. disallow re-entrancy entirely (allow re-entrancy at call site by a new syntax), ex.\r\n    ```vyper\r\n    some_contract.foo() # re-entrancy back into this contract unavailable here\r\n    some_contract.foo(..., reeentrant_functions=(func1, func2)) # func1 and func2 can be re-entered into\r\n    some_contract.foo(..., reentrant_functions=*) # all functions can be re-entered into\r\n    ```\r\n\r\n## Backwards Compatibility\r\nthis fundamentally changes the behavior of existing vyper contracts. to discuss.\r\n\r\n## Dependencies\r\nwill be cleaner to implement syntax-wise with the addition of https://github.com/vyperlang/vyper/issues/2856.\r\n\r\n## References\r\n\r\n## Copyright\r\nCopyright and related rights waived via [CC0](https://creativecommons.org/publicdomain/zero/1.0/)\r\n",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/3380/reactions",
    "total_count": 6,
    "+1": 4,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 2,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/vyperlang/vyper/issues/3380/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/1529768051",
    "html_url": "https://github.com/vyperlang/vyper/issues/3380#issuecomment-1529768051",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/3380",
    "id": 1529768051,
    "node_id": "IC_kwDOBGDvrM5bLmhz",
    "user": {
      "login": "fubuloubu",
      "id": 3859395,
      "node_id": "MDQ6VXNlcjM4NTkzOTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3859395?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fubuloubu",
      "html_url": "https://github.com/fubuloubu",
      "followers_url": "https://api.github.com/users/fubuloubu/followers",
      "following_url": "https://api.github.com/users/fubuloubu/following{/other_user}",
      "gists_url": "https://api.github.com/users/fubuloubu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fubuloubu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fubuloubu/subscriptions",
      "organizations_url": "https://api.github.com/users/fubuloubu/orgs",
      "repos_url": "https://api.github.com/users/fubuloubu/repos",
      "events_url": "https://api.github.com/users/fubuloubu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fubuloubu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-05-01T14:19:38Z",
    "updated_at": "2023-05-01T14:21:53Z",
    "author_association": "MEMBER",
    "body": "1. Is too magical, not personally for this\n2. Looks pretty good! Seems like it would need function pointer types\n\nAlso let's add another option\n3. Invert `@nonreentrant` decorator and have it optionally white-list certain functions\n```vyper\n@public\n@reentrant # can be called again no matter what call out is made\ndef all_calls_allowed()\n\n@public # no calls to this allowed after call out\ndef call_A() \n\n@public\n@reentrant(call_A,...) # can only call this if call out from inside `call_A`\ndef only_A_reentrancy_allowed()\n```\n\nBut in general, 2 seems most flexible since it's at the call site",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/1529768051/reactions",
      "total_count": 4,
      "+1": 4,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/1530067970",
    "html_url": "https://github.com/vyperlang/vyper/issues/3380#issuecomment-1530067970",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/3380",
    "id": 1530067970,
    "node_id": "IC_kwDOBGDvrM5bMvwC",
    "user": {
      "login": "jtriley-eth",
      "id": 41972979,
      "node_id": "MDQ6VXNlcjQxOTcyOTc5",
      "avatar_url": "https://avatars.githubusercontent.com/u/41972979?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtriley-eth",
      "html_url": "https://github.com/jtriley-eth",
      "followers_url": "https://api.github.com/users/jtriley-eth/followers",
      "following_url": "https://api.github.com/users/jtriley-eth/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtriley-eth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtriley-eth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtriley-eth/subscriptions",
      "organizations_url": "https://api.github.com/users/jtriley-eth/orgs",
      "repos_url": "https://api.github.com/users/jtriley-eth/repos",
      "events_url": "https://api.github.com/users/jtriley-eth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtriley-eth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-05-01T18:50:11Z",
    "updated_at": "2023-05-01T18:50:11Z",
    "author_association": "NONE",
    "body": "Agree with @fubuloubu here, the `@reentrant` decorator with optional functions that may be reentered seems sufficient. In either case, I am on board with non-reentrant by default.",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/1530067970/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/1530083277",
    "html_url": "https://github.com/vyperlang/vyper/issues/3380#issuecomment-1530083277",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/3380",
    "id": 1530083277,
    "node_id": "IC_kwDOBGDvrM5bMzfN",
    "user": {
      "login": "pcaversaccio",
      "id": 25297591,
      "node_id": "MDQ6VXNlcjI1Mjk3NTkx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25297591?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pcaversaccio",
      "html_url": "https://github.com/pcaversaccio",
      "followers_url": "https://api.github.com/users/pcaversaccio/followers",
      "following_url": "https://api.github.com/users/pcaversaccio/following{/other_user}",
      "gists_url": "https://api.github.com/users/pcaversaccio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pcaversaccio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pcaversaccio/subscriptions",
      "organizations_url": "https://api.github.com/users/pcaversaccio/orgs",
      "repos_url": "https://api.github.com/users/pcaversaccio/repos",
      "events_url": "https://api.github.com/users/pcaversaccio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pcaversaccio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-05-01T19:03:24Z",
    "updated_at": "2023-05-01T19:03:24Z",
    "author_association": "CONTRIBUTOR",
    "body": "Fully support disabling reentrancy by default. @charles-cooper if you need hard stats, you can simply link to my reentrancy attacks list: https://github.com/pcaversaccio/reentrancy-attacks. Also, for the sake of completeness, I cross-reference my similar initiative in Solidity here: https://github.com/ethereum/solidity/issues/12996. I think the `reentrant` decorator with the customisability of who can reenter feels the most ergonomic to me.",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/1530083277/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/1530094221",
    "html_url": "https://github.com/vyperlang/vyper/issues/3380#issuecomment-1530094221",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/3380",
    "id": 1530094221,
    "node_id": "IC_kwDOBGDvrM5bM2KN",
    "user": {
      "login": "charles-cooper",
      "id": 3867501,
      "node_id": "MDQ6VXNlcjM4Njc1MDE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3867501?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/charles-cooper",
      "html_url": "https://github.com/charles-cooper",
      "followers_url": "https://api.github.com/users/charles-cooper/followers",
      "following_url": "https://api.github.com/users/charles-cooper/following{/other_user}",
      "gists_url": "https://api.github.com/users/charles-cooper/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/charles-cooper/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/charles-cooper/subscriptions",
      "organizations_url": "https://api.github.com/users/charles-cooper/orgs",
      "repos_url": "https://api.github.com/users/charles-cooper/repos",
      "events_url": "https://api.github.com/users/charles-cooper/events{/privacy}",
      "received_events_url": "https://api.github.com/users/charles-cooper/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-05-01T19:11:27Z",
    "updated_at": "2023-05-01T19:11:27Z",
    "author_association": "COLLABORATOR",
    "body": "inverting the nonreentrant decorator has the benefit of not incurring a performance hit for every function, but it doesn't carry the same level of safety. two thoughts,\r\n\r\n1) it could be potentially an \"intermediate\" stage where we can see how users respond to the change without committing to the full change of only enabling re-entrancy at call site, and\r\n2) these two options are not necessarily mutually exclusive, we could have both reentrancy at call site and also inverted `reentrant` decorator.",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/1530094221/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/1530108042",
    "html_url": "https://github.com/vyperlang/vyper/issues/3380#issuecomment-1530108042",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/3380",
    "id": 1530108042,
    "node_id": "IC_kwDOBGDvrM5bM5iK",
    "user": {
      "login": "pcaversaccio",
      "id": 25297591,
      "node_id": "MDQ6VXNlcjI1Mjk3NTkx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25297591?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pcaversaccio",
      "html_url": "https://github.com/pcaversaccio",
      "followers_url": "https://api.github.com/users/pcaversaccio/followers",
      "following_url": "https://api.github.com/users/pcaversaccio/following{/other_user}",
      "gists_url": "https://api.github.com/users/pcaversaccio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pcaversaccio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pcaversaccio/subscriptions",
      "organizations_url": "https://api.github.com/users/pcaversaccio/orgs",
      "repos_url": "https://api.github.com/users/pcaversaccio/repos",
      "events_url": "https://api.github.com/users/pcaversaccio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pcaversaccio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-05-01T19:25:47Z",
    "updated_at": "2023-05-01T19:25:47Z",
    "author_association": "CONTRIBUTOR",
    "body": "One comment regarding `view` functions. You can't disable reentrancy by default for `view` functions since it would require a state changing operation as part of the tx. Thus, question is whether the decorator `reentrant` should be allowed or whether there is a better solution to this.",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/1530108042/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/1530109150",
    "html_url": "https://github.com/vyperlang/vyper/issues/3380#issuecomment-1530109150",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/3380",
    "id": 1530109150,
    "node_id": "IC_kwDOBGDvrM5bM5ze",
    "user": {
      "login": "charles-cooper",
      "id": 3867501,
      "node_id": "MDQ6VXNlcjM4Njc1MDE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3867501?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/charles-cooper",
      "html_url": "https://github.com/charles-cooper",
      "followers_url": "https://api.github.com/users/charles-cooper/followers",
      "following_url": "https://api.github.com/users/charles-cooper/following{/other_user}",
      "gists_url": "https://api.github.com/users/charles-cooper/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/charles-cooper/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/charles-cooper/subscriptions",
      "organizations_url": "https://api.github.com/users/charles-cooper/orgs",
      "repos_url": "https://api.github.com/users/charles-cooper/repos",
      "events_url": "https://api.github.com/users/charles-cooper/events{/privacy}",
      "received_events_url": "https://api.github.com/users/charles-cooper/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-05-01T19:27:08Z",
    "updated_at": "2023-05-01T19:27:08Z",
    "author_association": "COLLABORATOR",
    "body": "> One comment regarding `view` functions. You can't disable reentrancy by default for `view` functions since it would require a state changing operation as part of the tx. Thus, question is whether the decorator `reentrant` should be allowed or whether there is a better solution to this.\r\n\r\nthe `nonreentrant` modifier can be used on `view` functions, see #2921 ",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/1530109150/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/1530112087",
    "html_url": "https://github.com/vyperlang/vyper/issues/3380#issuecomment-1530112087",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/3380",
    "id": 1530112087,
    "node_id": "IC_kwDOBGDvrM5bM6hX",
    "user": {
      "login": "pcaversaccio",
      "id": 25297591,
      "node_id": "MDQ6VXNlcjI1Mjk3NTkx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25297591?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pcaversaccio",
      "html_url": "https://github.com/pcaversaccio",
      "followers_url": "https://api.github.com/users/pcaversaccio/followers",
      "following_url": "https://api.github.com/users/pcaversaccio/following{/other_user}",
      "gists_url": "https://api.github.com/users/pcaversaccio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pcaversaccio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pcaversaccio/subscriptions",
      "organizations_url": "https://api.github.com/users/pcaversaccio/orgs",
      "repos_url": "https://api.github.com/users/pcaversaccio/repos",
      "events_url": "https://api.github.com/users/pcaversaccio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pcaversaccio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-05-01T19:30:33Z",
    "updated_at": "2023-05-01T19:30:33Z",
    "author_association": "CONTRIBUTOR",
    "body": "> the `nonreentrant` modifier can be used on `view` functions, see #2921 \n\nSo you want to keep this decorator as well? \n",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/1530112087/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/1530114477",
    "html_url": "https://github.com/vyperlang/vyper/issues/3380#issuecomment-1530114477",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/3380",
    "id": 1530114477,
    "node_id": "IC_kwDOBGDvrM5bM7Gt",
    "user": {
      "login": "charles-cooper",
      "id": 3867501,
      "node_id": "MDQ6VXNlcjM4Njc1MDE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3867501?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/charles-cooper",
      "html_url": "https://github.com/charles-cooper",
      "followers_url": "https://api.github.com/users/charles-cooper/followers",
      "following_url": "https://api.github.com/users/charles-cooper/following{/other_user}",
      "gists_url": "https://api.github.com/users/charles-cooper/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/charles-cooper/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/charles-cooper/subscriptions",
      "organizations_url": "https://api.github.com/users/charles-cooper/orgs",
      "repos_url": "https://api.github.com/users/charles-cooper/repos",
      "events_url": "https://api.github.com/users/charles-cooper/events{/privacy}",
      "received_events_url": "https://api.github.com/users/charles-cooper/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-05-01T19:33:31Z",
    "updated_at": "2023-05-01T19:33:31Z",
    "author_association": "COLLABORATOR",
    "body": "> So you want to keep this decorator as well?\r\n\r\nthat's not what i meant, i'm just saying in the context of view functions, there are still reasonable semantics for nonreentrancy, they are just slightly modified -- the function cannot be \"re-entered\" into, i.e. it checks the flag even if it does not set it.",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/1530114477/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/1530891759",
    "html_url": "https://github.com/vyperlang/vyper/issues/3380#issuecomment-1530891759",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/3380",
    "id": 1530891759,
    "node_id": "IC_kwDOBGDvrM5bP43v",
    "user": {
      "login": "charles-cooper",
      "id": 3867501,
      "node_id": "MDQ6VXNlcjM4Njc1MDE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3867501?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/charles-cooper",
      "html_url": "https://github.com/charles-cooper",
      "followers_url": "https://api.github.com/users/charles-cooper/followers",
      "following_url": "https://api.github.com/users/charles-cooper/following{/other_user}",
      "gists_url": "https://api.github.com/users/charles-cooper/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/charles-cooper/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/charles-cooper/subscriptions",
      "organizations_url": "https://api.github.com/users/charles-cooper/orgs",
      "repos_url": "https://api.github.com/users/charles-cooper/repos",
      "events_url": "https://api.github.com/users/charles-cooper/events{/privacy}",
      "received_events_url": "https://api.github.com/users/charles-cooper/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-05-02T05:14:10Z",
    "updated_at": "2023-05-02T05:14:10Z",
    "author_association": "COLLABORATOR",
    "body": "> 2. Looks pretty good! Seems like it would need function pointer types\r\n\r\nBtw, no function pointers needed! It would just be the name of the function, it's not really like it's callable or you could pass it to other functions like an object.",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/1530891759/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/1530988988",
    "html_url": "https://github.com/vyperlang/vyper/issues/3380#issuecomment-1530988988",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/3380",
    "id": 1530988988,
    "node_id": "IC_kwDOBGDvrM5bQQm8",
    "user": {
      "login": "scherrey",
      "id": 878591,
      "node_id": "MDQ6VXNlcjg3ODU5MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/878591?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/scherrey",
      "html_url": "https://github.com/scherrey",
      "followers_url": "https://api.github.com/users/scherrey/followers",
      "following_url": "https://api.github.com/users/scherrey/following{/other_user}",
      "gists_url": "https://api.github.com/users/scherrey/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/scherrey/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/scherrey/subscriptions",
      "organizations_url": "https://api.github.com/users/scherrey/orgs",
      "repos_url": "https://api.github.com/users/scherrey/repos",
      "events_url": "https://api.github.com/users/scherrey/events{/privacy}",
      "received_events_url": "https://api.github.com/users/scherrey/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-05-02T07:07:30Z",
    "updated_at": "2023-05-02T07:07:30Z",
    "author_association": "NONE",
    "body": "Disabling re-entrancy by default fits with the 'default safe' policies of Vyper. Definitely lets do this. How to deal with the change in backwards compatibility is a bigger question. Maybe a contract level declaration `REENTRANT_DEFAULT=True` that you'd add to old contracts to get the original semantics? (I suspect a better symbol can be discovered but that's the idea.)\r\n\r\nOtherwise - I like `@reentrant` decorator as being the most pythonic syntax as it addresses meta or non-functional aspects of the function rather than being a runtime expression. \r\n\r\n`await` as a keyword doesn't fit right with me per my comments in #2856.",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/1530988988/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/1533247342",
    "html_url": "https://github.com/vyperlang/vyper/issues/3380#issuecomment-1533247342",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/3380",
    "id": 1533247342,
    "node_id": "IC_kwDOBGDvrM5bY39u",
    "user": {
      "login": "pcaversaccio",
      "id": 25297591,
      "node_id": "MDQ6VXNlcjI1Mjk3NTkx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25297591?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pcaversaccio",
      "html_url": "https://github.com/pcaversaccio",
      "followers_url": "https://api.github.com/users/pcaversaccio/followers",
      "following_url": "https://api.github.com/users/pcaversaccio/following{/other_user}",
      "gists_url": "https://api.github.com/users/pcaversaccio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pcaversaccio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pcaversaccio/subscriptions",
      "organizations_url": "https://api.github.com/users/pcaversaccio/orgs",
      "repos_url": "https://api.github.com/users/pcaversaccio/repos",
      "events_url": "https://api.github.com/users/pcaversaccio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pcaversaccio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-05-03T15:27:00Z",
    "updated_at": "2023-05-03T15:27:00Z",
    "author_association": "CONTRIBUTOR",
    "body": "For the sake of documentation, linking a very interesting write-up by @0xalpharush on the discussed matter: https://gist.github.com/0xalpharush/15d903ec43334b081caece21a0bd7a20. Also, @jtriley-eth provided interesting thoughts (in Solidity tho) for reflection.",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/1533247342/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/1533391036",
    "html_url": "https://github.com/vyperlang/vyper/issues/3380#issuecomment-1533391036",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/3380",
    "id": 1533391036,
    "node_id": "IC_kwDOBGDvrM5bZbC8",
    "user": {
      "login": "ControlCplusControlV",
      "id": 44706811,
      "node_id": "MDQ6VXNlcjQ0NzA2ODEx",
      "avatar_url": "https://avatars.githubusercontent.com/u/44706811?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ControlCplusControlV",
      "html_url": "https://github.com/ControlCplusControlV",
      "followers_url": "https://api.github.com/users/ControlCplusControlV/followers",
      "following_url": "https://api.github.com/users/ControlCplusControlV/following{/other_user}",
      "gists_url": "https://api.github.com/users/ControlCplusControlV/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ControlCplusControlV/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ControlCplusControlV/subscriptions",
      "organizations_url": "https://api.github.com/users/ControlCplusControlV/orgs",
      "repos_url": "https://api.github.com/users/ControlCplusControlV/repos",
      "events_url": "https://api.github.com/users/ControlCplusControlV/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ControlCplusControlV/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-05-03T16:59:22Z",
    "updated_at": "2023-05-03T16:59:22Z",
    "author_association": "CONTRIBUTOR",
    "body": "I support this a lot, but I have a couple ideas/questions, I am not sure how useful this one would be but having `@reentrant(5)` to allow a specific number of re-entrant calls at compile time could allow adjustable safety, although under the surface it might require a different implementation compared to unlimited re-entrancy ",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/1533391036/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 1
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/1533441109",
    "html_url": "https://github.com/vyperlang/vyper/issues/3380#issuecomment-1533441109",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/3380",
    "id": 1533441109,
    "node_id": "IC_kwDOBGDvrM5bZnRV",
    "user": {
      "login": "pcaversaccio",
      "id": 25297591,
      "node_id": "MDQ6VXNlcjI1Mjk3NTkx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25297591?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pcaversaccio",
      "html_url": "https://github.com/pcaversaccio",
      "followers_url": "https://api.github.com/users/pcaversaccio/followers",
      "following_url": "https://api.github.com/users/pcaversaccio/following{/other_user}",
      "gists_url": "https://api.github.com/users/pcaversaccio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pcaversaccio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pcaversaccio/subscriptions",
      "organizations_url": "https://api.github.com/users/pcaversaccio/orgs",
      "repos_url": "https://api.github.com/users/pcaversaccio/repos",
      "events_url": "https://api.github.com/users/pcaversaccio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pcaversaccio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-05-03T17:35:24Z",
    "updated_at": "2023-05-03T17:35:24Z",
    "author_association": "CONTRIBUTOR",
    "body": "> I support this a lot, but I have a couple ideas/questions, I am not sure how useful this one would be but having @reentrant(5) to allow a specific number of re-entrant calls at compile time could allow adjustable safety, although under the surface it might require a different implementation compared to unlimited re-entrancy\r\n\r\nDo you have a specific use case in mind where this would be useful?",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/1533441109/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/1533534527",
    "html_url": "https://github.com/vyperlang/vyper/issues/3380#issuecomment-1533534527",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/3380",
    "id": 1533534527,
    "node_id": "IC_kwDOBGDvrM5bZ-E_",
    "user": {
      "login": "ControlCplusControlV",
      "id": 44706811,
      "node_id": "MDQ6VXNlcjQ0NzA2ODEx",
      "avatar_url": "https://avatars.githubusercontent.com/u/44706811?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ControlCplusControlV",
      "html_url": "https://github.com/ControlCplusControlV",
      "followers_url": "https://api.github.com/users/ControlCplusControlV/followers",
      "following_url": "https://api.github.com/users/ControlCplusControlV/following{/other_user}",
      "gists_url": "https://api.github.com/users/ControlCplusControlV/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ControlCplusControlV/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ControlCplusControlV/subscriptions",
      "organizations_url": "https://api.github.com/users/ControlCplusControlV/orgs",
      "repos_url": "https://api.github.com/users/ControlCplusControlV/repos",
      "events_url": "https://api.github.com/users/ControlCplusControlV/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ControlCplusControlV/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-05-03T18:48:01Z",
    "updated_at": "2023-05-03T18:48:01Z",
    "author_association": "CONTRIBUTOR",
    "body": "> Do you have a specific use case in mind where this would be useful?\r\n\r\nTo be honest I doubt this actually sees much if any use, but think it would be good to have in edge cases. Like for example in the code for a DAO, it may be fine if an `execute_proposal` function calls itself (maybe executing a bunch of sub-proposals), but to prevent spam a proposal can only execute so many sub proposals. I'm just think building in optionality now could be useful in the future",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/1533534527/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/1533778128",
    "html_url": "https://github.com/vyperlang/vyper/issues/3380#issuecomment-1533778128",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/3380",
    "id": 1533778128,
    "node_id": "IC_kwDOBGDvrM5ba5jQ",
    "user": {
      "login": "pcaversaccio",
      "id": 25297591,
      "node_id": "MDQ6VXNlcjI1Mjk3NTkx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25297591?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pcaversaccio",
      "html_url": "https://github.com/pcaversaccio",
      "followers_url": "https://api.github.com/users/pcaversaccio/followers",
      "following_url": "https://api.github.com/users/pcaversaccio/following{/other_user}",
      "gists_url": "https://api.github.com/users/pcaversaccio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pcaversaccio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pcaversaccio/subscriptions",
      "organizations_url": "https://api.github.com/users/pcaversaccio/orgs",
      "repos_url": "https://api.github.com/users/pcaversaccio/repos",
      "events_url": "https://api.github.com/users/pcaversaccio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pcaversaccio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-05-03T21:29:42Z",
    "updated_at": "2023-05-03T21:29:42Z",
    "author_association": "CONTRIBUTOR",
    "body": "> To be honest I doubt this actually sees much if any use, but think it would be good to have in edge cases. Like for example in the code for a DAO, it may be fine if an execute_proposal function calls itself (maybe executing a bunch of sub-proposals), but to prevent spam a proposal can only execute so many sub proposals. I'm just think building in optionality now could be useful in the future\r\n\r\nIf I had to code such a solution I would probably use Solidity with inline assembly to optimise it. I don't think we need to cover the 0.0001%, but rather the 99.999% with the above proposal. But, one way to incorporate your idea could be by using an additional kwarg `max_calls` in the `reentrant` decorator, such as:\r\n\r\n```vyper\r\n@external\r\ndef call_A():\r\n    \"\"\"\r\n    @dev No calls to this function are allowed after call-out.\r\n    \"\"\"\r\n   ... \r\n\r\n@external\r\ndef call_B():\r\n    \"\"\"\r\n    @dev No calls to this function are allowed after call-out.\r\n    \"\"\"\r\n   ... \r\n\r\n@external\r\n@reentrant(call_A, call_B, max_calls=5)\r\ndef only_A_and_B_reentrancy_allowed():\r\n    \"\"\"\r\n    @dev Can only call this function if call-out from inside `call_A` or `call_B`.\r\n         Overall maximum of 5 reentering calls allowed.\r\n    \"\"\"\r\n   ...\r\n```\r\n\r\nBut again, complexity is the enemy of security. So I don't know whether this additional feature can be justified.",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/1533778128/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/1533805831",
    "html_url": "https://github.com/vyperlang/vyper/issues/3380#issuecomment-1533805831",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/3380",
    "id": 1533805831,
    "node_id": "IC_kwDOBGDvrM5bbAUH",
    "user": {
      "login": "ControlCplusControlV",
      "id": 44706811,
      "node_id": "MDQ6VXNlcjQ0NzA2ODEx",
      "avatar_url": "https://avatars.githubusercontent.com/u/44706811?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ControlCplusControlV",
      "html_url": "https://github.com/ControlCplusControlV",
      "followers_url": "https://api.github.com/users/ControlCplusControlV/followers",
      "following_url": "https://api.github.com/users/ControlCplusControlV/following{/other_user}",
      "gists_url": "https://api.github.com/users/ControlCplusControlV/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ControlCplusControlV/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ControlCplusControlV/subscriptions",
      "organizations_url": "https://api.github.com/users/ControlCplusControlV/orgs",
      "repos_url": "https://api.github.com/users/ControlCplusControlV/repos",
      "events_url": "https://api.github.com/users/ControlCplusControlV/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ControlCplusControlV/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-05-03T21:57:57Z",
    "updated_at": "2023-05-03T21:57:57Z",
    "author_association": "CONTRIBUTOR",
    "body": "I really like the syntax for that, would support implementing it like that",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/1533805831/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/1535036827",
    "html_url": "https://github.com/vyperlang/vyper/issues/3380#issuecomment-1535036827",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/3380",
    "id": 1535036827,
    "node_id": "IC_kwDOBGDvrM5bfs2b",
    "user": {
      "login": "scherrey",
      "id": 878591,
      "node_id": "MDQ6VXNlcjg3ODU5MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/878591?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/scherrey",
      "html_url": "https://github.com/scherrey",
      "followers_url": "https://api.github.com/users/scherrey/followers",
      "following_url": "https://api.github.com/users/scherrey/following{/other_user}",
      "gists_url": "https://api.github.com/users/scherrey/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/scherrey/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/scherrey/subscriptions",
      "organizations_url": "https://api.github.com/users/scherrey/orgs",
      "repos_url": "https://api.github.com/users/scherrey/repos",
      "events_url": "https://api.github.com/users/scherrey/events{/privacy}",
      "received_events_url": "https://api.github.com/users/scherrey/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-05-04T16:22:56Z",
    "updated_at": "2023-05-04T16:22:56Z",
    "author_association": "NONE",
    "body": "> @external\r\n> @reentrant(call_A, call_B, max_calls=5)\r\n> def only_A_and_B_reentrancy_allowed():\r\n>     \"\"\"\r\n>     @dev Can only call this function if call-out from inside `call_A` or `call_B`.\r\n>          Overall maximum of 5 reentering calls allowed.\r\n>     \"\"\"\r\n>    ...\r\n> ```\r\n> \r\n> But again, complexity is the enemy of security. So I don't know whether this additional feature can be justified.\r\n\r\nI like the idea of declarative syntax, especially for meta-data concepts like reentrancy. However they must have the highest semantic expressiveness possible because of the consequences of getting such things wrong. You clearly have already considered this with your warning about complexity and security. Very true.\r\n\r\nLooking at this from a contract auditor's or exploiter's perspective, specifying some arbitrary counts of the number of times a reentrant call may come through this path without clear semantics of the relevance of that number scares/excites me respectively. But your idea of specifying reentrancy options via certain code paths is actually quite interesting and, if taken correctly, eliminates any need to specify an arbitrary number.\r\n\r\n`@reentrant(call_A, call_B, any_one_once)` expresses that either call_A or call_B may come through this code path once but not both.\r\n\r\n`@reentrant(call_A, call_B, in_order)` says that this code path may be traversed via call_A once initially, and only ever again if call_B is called afterwards but may not come via call_B unless first via call_A. \r\n\r\nYou can imagine several policy enumerations that might be found practical. But note that if you ever need a new call path to be allowed through, all that's necessary is to create another function inside the contract to route it through. This eliminates the need for any numeric declaration as you'll instead have an explicit named code path that can source the reentrancy under limited conditions. This makes reentrancy attacks incredibly difficult to create and auditing of the contract far easier than arbitrary numbers that don't express the semantics of how and why that number was arrived at nor how it could possibly be enforced.\r\n\r\nIt's the code paths that are critical - not the number of times it's passed though.\r\n\r\nUltimately, this is some pretty esoteric stuff that may be useful for composition of advanced DAO contracts but I think we should first do something simple and make sure we have optimum code efficiency for that model before extending the language this far. However, doing it as decorators does make it easier to do \"take backs\" if we want to consider some options as \"experimental\".\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/1535036827/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/1535229569",
    "html_url": "https://github.com/vyperlang/vyper/issues/3380#issuecomment-1535229569",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/3380",
    "id": 1535229569,
    "node_id": "IC_kwDOBGDvrM5bgb6B",
    "user": {
      "login": "charles-cooper",
      "id": 3867501,
      "node_id": "MDQ6VXNlcjM4Njc1MDE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3867501?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/charles-cooper",
      "html_url": "https://github.com/charles-cooper",
      "followers_url": "https://api.github.com/users/charles-cooper/followers",
      "following_url": "https://api.github.com/users/charles-cooper/following{/other_user}",
      "gists_url": "https://api.github.com/users/charles-cooper/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/charles-cooper/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/charles-cooper/subscriptions",
      "organizations_url": "https://api.github.com/users/charles-cooper/orgs",
      "repos_url": "https://api.github.com/users/charles-cooper/repos",
      "events_url": "https://api.github.com/users/charles-cooper/events{/privacy}",
      "received_events_url": "https://api.github.com/users/charles-cooper/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-05-04T18:34:27Z",
    "updated_at": "2023-05-04T18:34:27Z",
    "author_association": "COLLABORATOR",
    "body": "For the sake of keeping this issue as clean as possible, I'm going to nip discussion of the enumerated reentrancy protection feature in the bud. It is a neat idea, but @ControlCplusControlV as you suspected it would require a different implementation that what I am envisioning, and there just doesn't seem to be a use case (besides theoretical ones) for it. It is such an odd use case that it can and should be implemented in user code. If that changes (i.e. it starts appearing as a common pattern in the wild), we can revisit, but at this time we should not be considering it further. @ControlCplusControlV if you want to continue brainstorming, please use https://github.com/vyperlang/vyper/discussions or the discord until the idea matures further.",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/1535229569/reactions",
      "total_count": 3,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
