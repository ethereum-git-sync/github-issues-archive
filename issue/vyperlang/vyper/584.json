{
  "url": "https://api.github.com/repos/vyperlang/vyper/issues/584",
  "repository_url": "https://api.github.com/repos/vyperlang/vyper",
  "labels_url": "https://api.github.com/repos/vyperlang/vyper/issues/584/labels{/name}",
  "comments_url": "https://api.github.com/repos/vyperlang/vyper/issues/584/comments",
  "events_url": "https://api.github.com/repos/vyperlang/vyper/issues/584/events",
  "html_url": "https://github.com/vyperlang/vyper/issues/584",
  "id": 281424624,
  "node_id": "MDU6SXNzdWUyODE0MjQ2MjQ=",
  "number": 584,
  "title": "VIP: Separating code reuse concerns from Viper core",
  "user": {
    "login": "dani-jozsef",
    "id": 6108136,
    "node_id": "MDQ6VXNlcjYxMDgxMzY=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6108136?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/dani-jozsef",
    "html_url": "https://github.com/dani-jozsef",
    "followers_url": "https://api.github.com/users/dani-jozsef/followers",
    "following_url": "https://api.github.com/users/dani-jozsef/following{/other_user}",
    "gists_url": "https://api.github.com/users/dani-jozsef/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/dani-jozsef/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/dani-jozsef/subscriptions",
    "organizations_url": "https://api.github.com/users/dani-jozsef/orgs",
    "repos_url": "https://api.github.com/users/dani-jozsef/repos",
    "events_url": "https://api.github.com/users/dani-jozsef/events{/privacy}",
    "received_events_url": "https://api.github.com/users/dani-jozsef/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 11,
  "created_at": "2017-12-12T15:26:09Z",
  "updated_at": "2019-08-08T16:08:19Z",
  "closed_at": null,
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "## Preamble\r\n\r\n    VIP: <to be assigned>\r\n    Title: Separating code reuse concerns from Viper core\r\n    Author: @daniel-jozsef\r\n    Type: Meta(?)\r\n    Status: Draft\r\n    Created: 2017-12-12\r\n\r\n## Simple Summary\r\nA templating tool separate and distinct from the Viper compiler should be created, that allows assembling Viper contracts from a number of reusable contract aspects, potentially published as packages or libraries. (Eg. \"ownable\", \"StandardERC20\", etc.)\r\n\r\nThis would allow Viper to strictly defy calls for code composition features. We could have our cake and eat it too.\r\n\r\n## Abstract\r\nA tool for composing fragment files could add code reusability, while at the same time freeing the Viper compiler of all user pressure on the topic.\r\n\r\nIn essence, this would mean that large-scale Viper projects, _if, and only if the developers so decide_, could follow a two-level build model.\r\n\r\nA \"programmer view\" of the code could be composed of \"fragment files\", that define reusable contract aspects (state variables and functions that use them). Fragments could even have hierarchical dependency (eg. ERC20 depends on ERC20Basic, etc.)\r\n\r\nThe programmer view is converted into an \"auditor view\", ie. the Viper smart contracts, a single contract per file, no composition at all, by running a composer tool. This would be a simple copy-paste operation with text replace to ensure that name collisions don't happen.\r\n\r\nThen, the \"auditor view\" is compiled into EVM bytecode via the Viper compiler.\r\n\r\n## Motivation\r\nViper should stick close to Vitalik's original vision, and strictly disallow _all_ forms of composition, modifiers and similar syntactic sugar focused on code reuse. This is of the utmost importance if we want a secure and safe language for Ethereum smart contracts.\r\n\r\nHowever, the abundance of VIPs (I personally violently disagree with) on adding code composition features is understandable, given the deep-seated desire for code reuse and dislike of duplication in developer circles.\r\n\r\nMy solution was motivated by observing the way lawyers work. Legal contracts, similar to Viper ones, have no concept of composition. Yet, a lawyer doesn't write contracts from scratch. They have a number of starting templates for various use cases, and also \"aspects\", ie. conditions that can be copy-pasted into a template at will, if it is required or appropriate.\r\n\r\nI have no illusions, and am pretty sure we can't expect programmers to adopt the modus operandi of lawyers, given the deep hate for manual copy-pasting. So why not give them a tool to do the dirty work for them?\r\n\r\nNote that an important part of my proposal is that the build process is two-step. The auditor view (the full, actual Viper contract) should be present in the source tree, and be the actual input of the Viper compiler, to ensure that anyone interested in the contract logic can read and audit it right there.\r\n\r\n## Specification\r\nThe syntax below is completely arbitrary, and should be replaced with one that has been agreed upon by the community.\r\n\r\nFragment files define contract fragments. They are not valid Viper files themselves, but contain Viper code. My suggestion for file extension is _.vfrag.py_. A fragment file can contain an aspect (something to be inserted into a contract) or a root (a partial definition of a contract that will become a Viper contract with aspects inserted).\r\n\r\nownable.vfrag.py:\r\n```\r\n@aspect(Ownable)\r\n\r\n_owner: public(address)\r\n\r\n@private\r\ndef _setOwner():\r\n  self._owner = msg.sender\r\n\r\n@private\r\ndef _requireOwner():\r\n  assert self._owner == msg.sender\r\n```\r\n\r\nhelloworld.vfrag.py:\r\n```\r\n@root\r\n@hasAspect('./ownable.vfrag.py')\r\n\r\nmessage: public(bytes)\r\n\r\n@public\r\ndef __init__(message: bytes):\r\n  self.Ownable_setOwner()\r\n  self.message = message\r\n\r\n@public\r\ndef changeMessage(message: bytes):\r\n  self.Ownable_requireOwner()\r\n  self.message = message\r\n```\r\n\r\n...all this should, in the end, be composed into:\r\n\r\nhelloworld.v.py:\r\n```\r\nOwnable_owner: public(address)\r\n\r\n@private\r\ndef Ownable_setOwner():\r\n  self.Ownable_owner = msg.sender\r\n\r\n@private\r\ndef Ownable_requireOwner():\r\n  assert self.Ownable_owner == msg.sender\r\n\r\nmessage: public(bytes)\r\n\r\n@public\r\ndef __init__(message: bytes):\r\n  self.Ownable_setOwner()\r\n  self.message = message\r\n\r\n@public\r\ndef changeMessage(message: bytes):\r\n  self.Ownable_requireOwner()\r\n  self.message = message\r\n```\r\n\r\n## Backwards Compatibility\r\nGiven that this VIP should include no change to the core Viper language itself, there are no backwards compatibility issues to speak of.\r\n\r\n## Copyright\r\nCopyright and related rights waived via [CC0](https://creativecommons.org/publicdomain/zero/1.0/)",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/584/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/vyperlang/vyper/issues/584/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/351244475",
    "html_url": "https://github.com/vyperlang/vyper/issues/584#issuecomment-351244475",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/584",
    "id": 351244475,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1MTI0NDQ3NQ==",
    "user": {
      "login": "fubuloubu",
      "id": 3859395,
      "node_id": "MDQ6VXNlcjM4NTkzOTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3859395?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fubuloubu",
      "html_url": "https://github.com/fubuloubu",
      "followers_url": "https://api.github.com/users/fubuloubu/followers",
      "following_url": "https://api.github.com/users/fubuloubu/following{/other_user}",
      "gists_url": "https://api.github.com/users/fubuloubu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fubuloubu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fubuloubu/subscriptions",
      "organizations_url": "https://api.github.com/users/fubuloubu/orgs",
      "repos_url": "https://api.github.com/users/fubuloubu/repos",
      "events_url": "https://api.github.com/users/fubuloubu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fubuloubu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-13T00:48:23Z",
    "updated_at": "2017-12-13T00:48:23Z",
    "author_association": "MEMBER",
    "body": "I don't think this belongs in the core Viper spec by itself, but it could be a useful external tool for managing and creating large projects. It would probably be best to attack this a little later on when the syntax is more locked down.",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/351244475/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/351244604",
    "html_url": "https://github.com/vyperlang/vyper/issues/584#issuecomment-351244604",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/584",
    "id": 351244604,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1MTI0NDYwNA==",
    "user": {
      "login": "fubuloubu",
      "id": 3859395,
      "node_id": "MDQ6VXNlcjM4NTkzOTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3859395?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fubuloubu",
      "html_url": "https://github.com/fubuloubu",
      "followers_url": "https://api.github.com/users/fubuloubu/followers",
      "following_url": "https://api.github.com/users/fubuloubu/following{/other_user}",
      "gists_url": "https://api.github.com/users/fubuloubu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fubuloubu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fubuloubu/subscriptions",
      "organizations_url": "https://api.github.com/users/fubuloubu/orgs",
      "repos_url": "https://api.github.com/users/fubuloubu/repos",
      "events_url": "https://api.github.com/users/fubuloubu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fubuloubu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-13T00:49:06Z",
    "updated_at": "2017-12-13T00:49:06Z",
    "author_association": "MEMBER",
    "body": "Also, another idiosyncrasy is that all globals must go at the top of the file.",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/351244604/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/351248317",
    "html_url": "https://github.com/vyperlang/vyper/issues/584#issuecomment-351248317",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/584",
    "id": 351248317,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1MTI0ODMxNw==",
    "user": {
      "login": "fubuloubu",
      "id": 3859395,
      "node_id": "MDQ6VXNlcjM4NTkzOTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3859395?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fubuloubu",
      "html_url": "https://github.com/fubuloubu",
      "followers_url": "https://api.github.com/users/fubuloubu/followers",
      "following_url": "https://api.github.com/users/fubuloubu/following{/other_user}",
      "gists_url": "https://api.github.com/users/fubuloubu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fubuloubu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fubuloubu/subscriptions",
      "organizations_url": "https://api.github.com/users/fubuloubu/orgs",
      "repos_url": "https://api.github.com/users/fubuloubu/repos",
      "events_url": "https://api.github.com/users/fubuloubu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fubuloubu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-13T01:10:23Z",
    "updated_at": "2017-12-13T01:11:08Z",
    "author_association": "MEMBER",
    "body": "Interesting thought: what if macros were managed in a macro package-index, people could add their macros to the store (if developers find it useful and want to leverage it). You can download and use whatever macros, it all creates the source code that actually compiles to bytecode, making developer's jobs easier while maintaining auditability.\r\n\r\nSimilar to your suggestion, but slightly smaller code fragments and you \"register\" the macros with the compiler so you don't have to have a whole separate import flow",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/351248317/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/351738173",
    "html_url": "https://github.com/vyperlang/vyper/issues/584#issuecomment-351738173",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/584",
    "id": 351738173,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1MTczODE3Mw==",
    "user": {
      "login": "dani-jozsef",
      "id": 6108136,
      "node_id": "MDQ6VXNlcjYxMDgxMzY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6108136?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dani-jozsef",
      "html_url": "https://github.com/dani-jozsef",
      "followers_url": "https://api.github.com/users/dani-jozsef/followers",
      "following_url": "https://api.github.com/users/dani-jozsef/following{/other_user}",
      "gists_url": "https://api.github.com/users/dani-jozsef/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dani-jozsef/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dani-jozsef/subscriptions",
      "organizations_url": "https://api.github.com/users/dani-jozsef/orgs",
      "repos_url": "https://api.github.com/users/dani-jozsef/repos",
      "events_url": "https://api.github.com/users/dani-jozsef/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dani-jozsef/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-14T15:10:51Z",
    "updated_at": "2017-12-14T15:10:51Z",
    "author_association": "NONE",
    "body": "Sounds like a watering hole for predators to focus their attention on... I don't think the Ethereum Foundation could possibly guarantee a level of code review that will ensure safety without doubt. Also, there's a whole can of worms around \"why this was approved and that not\", \"why is that name taken\" (see the npm kik debacle, lol)... So I don't think it's a good idea.",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/351738173/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/351761415",
    "html_url": "https://github.com/vyperlang/vyper/issues/584#issuecomment-351761415",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/584",
    "id": 351761415,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1MTc2MTQxNQ==",
    "user": {
      "login": "fubuloubu",
      "id": 3859395,
      "node_id": "MDQ6VXNlcjM4NTkzOTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3859395?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fubuloubu",
      "html_url": "https://github.com/fubuloubu",
      "followers_url": "https://api.github.com/users/fubuloubu/followers",
      "following_url": "https://api.github.com/users/fubuloubu/following{/other_user}",
      "gists_url": "https://api.github.com/users/fubuloubu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fubuloubu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fubuloubu/subscriptions",
      "organizations_url": "https://api.github.com/users/fubuloubu/orgs",
      "repos_url": "https://api.github.com/users/fubuloubu/repos",
      "events_url": "https://api.github.com/users/fubuloubu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fubuloubu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-14T16:26:54Z",
    "updated_at": "2017-12-14T16:26:54Z",
    "author_association": "MEMBER",
    "body": "Sure, all package management needs strong governance to avoid those concerns. I think there's a use case, and it needs to be a well thought out one",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/351761415/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/351761865",
    "html_url": "https://github.com/vyperlang/vyper/issues/584#issuecomment-351761865",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/584",
    "id": 351761865,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1MTc2MTg2NQ==",
    "user": {
      "login": "fubuloubu",
      "id": 3859395,
      "node_id": "MDQ6VXNlcjM4NTkzOTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3859395?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fubuloubu",
      "html_url": "https://github.com/fubuloubu",
      "followers_url": "https://api.github.com/users/fubuloubu/followers",
      "following_url": "https://api.github.com/users/fubuloubu/following{/other_user}",
      "gists_url": "https://api.github.com/users/fubuloubu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fubuloubu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fubuloubu/subscriptions",
      "organizations_url": "https://api.github.com/users/fubuloubu/orgs",
      "repos_url": "https://api.github.com/users/fubuloubu/repos",
      "events_url": "https://api.github.com/users/fubuloubu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fubuloubu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-14T16:28:14Z",
    "updated_at": "2017-12-14T16:28:14Z",
    "author_association": "MEMBER",
    "body": "But like, how many times do I have to write an access-controlled setter for a specific variable before I make a costly mistake?",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/351761865/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/352472406",
    "html_url": "https://github.com/vyperlang/vyper/issues/584#issuecomment-352472406",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/584",
    "id": 352472406,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1MjQ3MjQwNg==",
    "user": {
      "login": "fubuloubu",
      "id": 3859395,
      "node_id": "MDQ6VXNlcjM4NTkzOTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3859395?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fubuloubu",
      "html_url": "https://github.com/fubuloubu",
      "followers_url": "https://api.github.com/users/fubuloubu/followers",
      "following_url": "https://api.github.com/users/fubuloubu/following{/other_user}",
      "gists_url": "https://api.github.com/users/fubuloubu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fubuloubu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fubuloubu/subscriptions",
      "organizations_url": "https://api.github.com/users/fubuloubu/orgs",
      "repos_url": "https://api.github.com/users/fubuloubu/repos",
      "events_url": "https://api.github.com/users/fubuloubu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fubuloubu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-18T16:07:14Z",
    "updated_at": "2017-12-18T16:07:14Z",
    "author_association": "MEMBER",
    "body": "Meeting minutes:\r\n\r\nNeed to talk about this WAY more, but interesting idea.\r\n\r\nWould probably implement as a pre-processor, with hooks that allow custom syntax and a project-wide means of adding to \"batteries included\" standard library of fragments",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/352472406/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/352474558",
    "html_url": "https://github.com/vyperlang/vyper/issues/584#issuecomment-352474558",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/584",
    "id": 352474558,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1MjQ3NDU1OA==",
    "user": {
      "login": "fubuloubu",
      "id": 3859395,
      "node_id": "MDQ6VXNlcjM4NTkzOTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3859395?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fubuloubu",
      "html_url": "https://github.com/fubuloubu",
      "followers_url": "https://api.github.com/users/fubuloubu/followers",
      "following_url": "https://api.github.com/users/fubuloubu/following{/other_user}",
      "gists_url": "https://api.github.com/users/fubuloubu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fubuloubu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fubuloubu/subscriptions",
      "organizations_url": "https://api.github.com/users/fubuloubu/orgs",
      "repos_url": "https://api.github.com/users/fubuloubu/repos",
      "events_url": "https://api.github.com/users/fubuloubu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fubuloubu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-18T16:14:23Z",
    "updated_at": "2017-12-18T17:25:17Z",
    "author_association": "MEMBER",
    "body": "Interesting suggestion from @vbuterin (summarized):\r\n\r\nSnippets add \"Internal Contract\" interfaces for the specific functions e.g.\r\n```python\r\nfrom std import Owner\r\ndef __init__():\r\n    self.owner = Owner()\r\n    # OR\r\n    self.owner is Owner\r\n```\r\nThen the transaction would call (using the ABI) `owner.changeOwner(newOwner)`",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/352474558/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/352515064",
    "html_url": "https://github.com/vyperlang/vyper/issues/584#issuecomment-352515064",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/584",
    "id": 352515064,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1MjUxNTA2NA==",
    "user": {
      "login": "fubuloubu",
      "id": 3859395,
      "node_id": "MDQ6VXNlcjM4NTkzOTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3859395?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fubuloubu",
      "html_url": "https://github.com/fubuloubu",
      "followers_url": "https://api.github.com/users/fubuloubu/followers",
      "following_url": "https://api.github.com/users/fubuloubu/following{/other_user}",
      "gists_url": "https://api.github.com/users/fubuloubu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fubuloubu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fubuloubu/subscriptions",
      "organizations_url": "https://api.github.com/users/fubuloubu/orgs",
      "repos_url": "https://api.github.com/users/fubuloubu/repos",
      "events_url": "https://api.github.com/users/fubuloubu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fubuloubu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-18T18:23:21Z",
    "updated_at": "2017-12-18T18:32:48Z",
    "author_association": "MEMBER",
    "body": "I think the above suggestion touches on a key point: the two key uses of these \"snippets\" is providing certain addresses with standardized abilities e.g. Owner, Maintainer and giving variables certain characteristics or abilities e.g. access-restricted updating, external contract calling. This is actually fairly similar to Python's own \"every type is an object\" ethos.\r\n\r\nConsider the following viper snippets\r\n\r\n1. External address variable with ability to call ERC20-compatible methods from address:\r\n```python\r\ntoken: ERC20(address)\r\n# Allows external calls:\r\nself.token.transfer(addr, amt)\r\n```\r\n2. Variable with a getter:\r\n```python\r\nmy_var: Public(num) = 0\r\n# Creates method:\r\ndef get_my_var() -> num: return self.my_var\r\n```\r\n3. Time-limiting contract methods via a timer:\r\n```python\r\nowner: Public(address)\r\nstarttime: timestamp\r\ndeadline: Public(timedelta) = 2000 # Blocks\r\nis_passed: Public(bool) = False # Set when deadline is passed and contract is locked\r\n\r\ndef __init__():\r\n    self.owner = msg.sender\r\n    self.starttime = blk.timestamp\r\ndef set_deadline_passed():\r\n    assert msg.sender is self.owner\r\n    assert blk.timestamp >= self.deadline + self.starttime\r\n    self.is_passed = True\r\ndef only_when_active():\r\n    assert self.is_passed is False\r\n    ... # Do something\r\n```\r\n\r\n1 and 2 is currently implemented and simplifies the creation of these additional abilities, however 3 is something that I think is fairly standardized conceptually but difficult to write in the current way of doing things. What if instead for number 3 this concept was implemented as variable that had standard methods from a `Timer` class e.g.:\r\n```python\r\nfrom std import Timer\r\nowner: Public(address)\r\ntimer: Timer(controller=owner, interval=2000)\r\n# 'controller=' creates a symbolic link to self.owner for access rights\r\n# Not specifying a controller lets anyone access it\r\n# 'interval=' is the timer interval required before 'set_complete()' could be called\r\n\r\ndef __init__():\r\n    self.owner = msg.sender\r\n    # implicitly sets 'timer.starttime = blk.timestamp' and 'timer.active = False'\r\n    # Could also set interval or controller here\r\n    # If controller set to 'msg.sender' here, it would be locked to that address not 'self.owner'\r\n    self.timer.start()\r\n# Adds a timer.set_complete() method to ABI\r\n# Checks for access rights, checks that interval + starttime meets or exceeds block timestamp\r\ndef only_when_active():\r\n    assert self.timer.active\r\n    ... # Do something\r\n```\r\nThis is different from Solidity (and I think avoids lots of problems) because the contract itself doesn't have any inheritance, only the variables it has which leads to something much simpler conceptually. Additionally, these \"classes\" can be implemented as a pre-processor function in the compiler, so the class would translate into a more traditional set of variables and methods that Viper would allow. In order to accomplish the pre-processor implementation, some modifications would be required of the underlying syntax to allow '.' chars in names. The Timer \"class\" would produce as output of this pre-processor stage:\r\n```python\r\nowner: Public(address)\r\n# Might need some syntactic magic for timer e.g. 'timer: struct' and the following as members\r\ntimer.interval: timedelta = 2000\r\ntimer.starttime = timestamp\r\ntimer.active = Public(bool)\r\n\r\ndef __init__():\r\n    self.owner = msg.sender\r\n    self.timer.starttime = blk.timestamp\r\n    self.timer.active = True\r\ndef timer.set_complete(): # Added method\r\n    assert self.owner == msg.sender # self.owner implicitly substituted for timer.controller\r\n    assert self.timer.interval + self.timer.starttime <= blk.timestamp\r\n    self.timer.active = False\r\ndef only_when_active():\r\n    assert self.timer.active\r\n    ... # Do something\r\n```\r\n\r\nWe could also change over some of the existing usages like `Public()` and `ERC20()` to be these types of classes. `var: Public()` would simply create a `var.get()` method in the underlying contract, and `token: ERC20()` would safely delegate calls to the external contract and additionally allow a setter syntax e.g. `self.token = token_address` and perhaps a method `token.updateAddress(token_address)` (with access restrictions) that allows someone to change the token address (if access restrictions not provided, this method isn't generated).",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/352515064/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/352528839",
    "html_url": "https://github.com/vyperlang/vyper/issues/584#issuecomment-352528839",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/584",
    "id": 352528839,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1MjUyODgzOQ==",
    "user": {
      "login": "fubuloubu",
      "id": 3859395,
      "node_id": "MDQ6VXNlcjM4NTkzOTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3859395?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fubuloubu",
      "html_url": "https://github.com/fubuloubu",
      "followers_url": "https://api.github.com/users/fubuloubu/followers",
      "following_url": "https://api.github.com/users/fubuloubu/following{/other_user}",
      "gists_url": "https://api.github.com/users/fubuloubu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fubuloubu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fubuloubu/subscriptions",
      "organizations_url": "https://api.github.com/users/fubuloubu/orgs",
      "repos_url": "https://api.github.com/users/fubuloubu/repos",
      "events_url": "https://api.github.com/users/fubuloubu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fubuloubu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-18T19:13:51Z",
    "updated_at": "2017-12-18T19:19:24Z",
    "author_association": "MEMBER",
    "body": "Another interesting thing this could enable is other kinds of uses like:\r\n```python\r\nfrom std import Role # General case of Owner\r\nowner: Role() # Set to an address that has specific rights in the code, can change itself\r\nboard: Role()[5] # 5 Board members, who all have Role abilities\r\ncandidate: address\r\nvotes: Public(num) = 0\r\nvoted: map(address => bool)\r\n\r\ndef change_owner(_candidate: address):\r\n    assert msg.sender in self.board\r\n    if self.candidate == _candidate:\r\n        self.votes += 1\r\n        self.voted[msg.sender] = True\r\n    else:\r\n        self.candidate = _candidate\r\n        self.votes = 1\r\n        for member in self.board: # member is an 'address' local var\r\n            self.voted[member] = False\r\n        self.voted[msg.sender] = True\r\n\r\ndef accept_ownership():\r\n    assert msg.sender is self.owner_candidate\r\n    assert self.votes == self.board.len() # now we don't need to carry around lengths!\r\n    self.owner = self.candidate # owner is an 'address' global when assigned directly\r\n```\r\nThe owner can change themselves at any time by calling `owner.changeAddress(addr)`, where `changeAddress()` is a method provided by the `Role()` built-in class. The method checks that `self.owner is msg.sender` before allowing the update.\r\nAny one of the board members can also change their address at any time by calling `board[i].changeAddress(addr)` which asserts that address `self.board[i]` is the caller.",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/352528839/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/352805260",
    "html_url": "https://github.com/vyperlang/vyper/issues/584#issuecomment-352805260",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/584",
    "id": 352805260,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1MjgwNTI2MA==",
    "user": {
      "login": "DavidKnott",
      "id": 17552858,
      "node_id": "MDQ6VXNlcjE3NTUyODU4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17552858?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/DavidKnott",
      "html_url": "https://github.com/DavidKnott",
      "followers_url": "https://api.github.com/users/DavidKnott/followers",
      "following_url": "https://api.github.com/users/DavidKnott/following{/other_user}",
      "gists_url": "https://api.github.com/users/DavidKnott/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/DavidKnott/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/DavidKnott/subscriptions",
      "organizations_url": "https://api.github.com/users/DavidKnott/orgs",
      "repos_url": "https://api.github.com/users/DavidKnott/repos",
      "events_url": "https://api.github.com/users/DavidKnott/events{/privacy}",
      "received_events_url": "https://api.github.com/users/DavidKnott/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-19T16:09:55Z",
    "updated_at": "2017-12-19T16:09:55Z",
    "author_association": "CONTRIBUTOR",
    "body": "I prefer the `self.owner` syntax to `self.x.owner` syntax as I think it's clearer (it also translates easier to the abi). ",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/352805260/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
