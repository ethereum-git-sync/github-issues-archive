{
  "url": "https://api.github.com/repos/vyperlang/vyper/issues/1267",
  "repository_url": "https://api.github.com/repos/vyperlang/vyper",
  "labels_url": "https://api.github.com/repos/vyperlang/vyper/issues/1267/labels{/name}",
  "comments_url": "https://api.github.com/repos/vyperlang/vyper/issues/1267/comments",
  "events_url": "https://api.github.com/repos/vyperlang/vyper/issues/1267/events",
  "html_url": "https://github.com/vyperlang/vyper/issues/1267",
  "id": 412639537,
  "node_id": "MDU6SXNzdWU0MTI2Mzk1Mzc=",
  "number": 1267,
  "title": "functional LLL code builder utility",
  "user": {
    "login": "pipermerriam",
    "id": 824194,
    "node_id": "MDQ6VXNlcjgyNDE5NA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/824194?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/pipermerriam",
    "html_url": "https://github.com/pipermerriam",
    "followers_url": "https://api.github.com/users/pipermerriam/followers",
    "following_url": "https://api.github.com/users/pipermerriam/following{/other_user}",
    "gists_url": "https://api.github.com/users/pipermerriam/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/pipermerriam/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/pipermerriam/subscriptions",
    "organizations_url": "https://api.github.com/users/pipermerriam/orgs",
    "repos_url": "https://api.github.com/users/pipermerriam/repos",
    "events_url": "https://api.github.com/users/pipermerriam/events{/privacy}",
    "received_events_url": "https://api.github.com/users/pipermerriam/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 479554964,
      "node_id": "MDU6TGFiZWw0Nzk1NTQ5NjQ=",
      "url": "https://api.github.com/repos/vyperlang/vyper/labels/enhancement",
      "name": "enhancement",
      "color": "84b6eb",
      "default": true,
      "description": null
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 3,
  "created_at": "2019-02-20T21:35:29Z",
  "updated_at": "2020-01-24T02:57:30Z",
  "closed_at": null,
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "### What is wrong?\r\n\r\nEmbedded LLL code in python doesn't always play nice with linting rules.  This seems to be a tug-of-war between:\r\n\r\n- LLL code wants to be logically structured in format X\r\n- Format X is often **not** compliant with the standard linting rules.\r\n\r\n### How can it be fixed.\r\n\r\nThere's not happy path that gets us both so, maybe there's a third option.\r\n\r\nA functional utility for building LLL code in a way the preserves readability with respect to both LLL semantics and python semantics.  Here's an example of the idea.\r\n\r\n```python\r\n# as LLL\r\nLLL = [\"add\", 1, 2]\r\n\r\n# using builder\r\nLLL = LLLBuilder.add(1, 2).generate()\r\n```\r\n\r\nA more complex example with some nesting:\r\n\r\n```python\r\n# as LLL\r\nLLL = ['sload', ['add', '_pos', ['mload', MemoryPositions.FREE_LOOP_INDEX]]]\r\n\r\n# using builder\r\nb = LLLBuilder\r\nLLL = b.sload(\r\n    b.add('_pos', b.mload(MemoryPositions.FREE_LOOP_INDEX))\r\n)\r\n```\r\n\r\nEverything above is just off the top of my head, but it is meant to demonstrate an API that allows us to generate LLL code in a manner that preserves easy readability of what the LLL code does while complying with python linting standards.",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/1267/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/vyperlang/vyper/issues/1267/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/465822228",
    "html_url": "https://github.com/vyperlang/vyper/issues/1267#issuecomment-465822228",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/1267",
    "id": 465822228,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ2NTgyMjIyOA==",
    "user": {
      "login": "charles-cooper",
      "id": 3867501,
      "node_id": "MDQ6VXNlcjM4Njc1MDE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3867501?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/charles-cooper",
      "html_url": "https://github.com/charles-cooper",
      "followers_url": "https://api.github.com/users/charles-cooper/followers",
      "following_url": "https://api.github.com/users/charles-cooper/following{/other_user}",
      "gists_url": "https://api.github.com/users/charles-cooper/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/charles-cooper/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/charles-cooper/subscriptions",
      "organizations_url": "https://api.github.com/users/charles-cooper/orgs",
      "repos_url": "https://api.github.com/users/charles-cooper/repos",
      "events_url": "https://api.github.com/users/charles-cooper/events{/privacy}",
      "received_events_url": "https://api.github.com/users/charles-cooper/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-02-21T01:18:40Z",
    "updated_at": "2019-02-21T01:18:40Z",
    "author_association": "COLLABORATOR",
    "body": "You could also leave out the state-hiding object and do a pure DSL, e.g.\r\n```python\r\ndef add(a, b) : \r\n  return LLLnode.from_list(['add', a, b])\r\n```\r\nFWIW, I did try generating LLL this way once and, although for small expressions it initially looked cleaner, I felt it was actually less easy to read than the string-based approach because the syntax highlighting applied to strings actually made the LLL stand out more. Also it was not consistent with the rest of the codebase so I just gave up. I'm not sure what the net effect of converting the entire codebase to this style would be.",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/465822228/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/465963254",
    "html_url": "https://github.com/vyperlang/vyper/issues/1267#issuecomment-465963254",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/1267",
    "id": 465963254,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ2NTk2MzI1NA==",
    "user": {
      "login": "jacqueswww",
      "id": 6917456,
      "node_id": "MDQ6VXNlcjY5MTc0NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6917456?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jacqueswww",
      "html_url": "https://github.com/jacqueswww",
      "followers_url": "https://api.github.com/users/jacqueswww/followers",
      "following_url": "https://api.github.com/users/jacqueswww/following{/other_user}",
      "gists_url": "https://api.github.com/users/jacqueswww/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jacqueswww/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jacqueswww/subscriptions",
      "organizations_url": "https://api.github.com/users/jacqueswww/orgs",
      "repos_url": "https://api.github.com/users/jacqueswww/repos",
      "events_url": "https://api.github.com/users/jacqueswww/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jacqueswww/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-02-21T11:21:01Z",
    "updated_at": "2019-02-21T11:22:32Z",
    "author_association": "CONTRIBUTOR",
    "body": "Hmm I have to agree with @charles-cooper converting all the code at this point would seem like a ton of work, with zero gain except making a single linter rule happy. It has  occured to me in the past that we could use tuples instead, this would solve the linting problem, but then we loose the mutability of building up lists - which actually proves useful, being able to `.append()` & `a += []`.",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/465963254/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/466072553",
    "html_url": "https://github.com/vyperlang/vyper/issues/1267#issuecomment-466072553",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/1267",
    "id": 466072553,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ2NjA3MjU1Mw==",
    "user": {
      "login": "pipermerriam",
      "id": 824194,
      "node_id": "MDQ6VXNlcjgyNDE5NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/824194?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pipermerriam",
      "html_url": "https://github.com/pipermerriam",
      "followers_url": "https://api.github.com/users/pipermerriam/followers",
      "following_url": "https://api.github.com/users/pipermerriam/following{/other_user}",
      "gists_url": "https://api.github.com/users/pipermerriam/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pipermerriam/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pipermerriam/subscriptions",
      "organizations_url": "https://api.github.com/users/pipermerriam/orgs",
      "repos_url": "https://api.github.com/users/pipermerriam/repos",
      "events_url": "https://api.github.com/users/pipermerriam/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pipermerriam/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-02-21T16:43:25Z",
    "updated_at": "2019-02-21T16:43:25Z",
    "author_association": "CONTRIBUTOR",
    "body": "Another positive thing about the DSL approach is that once we have type checking in place we get some added type safety guarantees for LLL statements.",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/466072553/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
