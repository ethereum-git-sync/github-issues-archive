{
  "url": "https://api.github.com/repos/vyperlang/vyper/issues/2276",
  "repository_url": "https://api.github.com/repos/vyperlang/vyper",
  "labels_url": "https://api.github.com/repos/vyperlang/vyper/issues/2276/labels{/name}",
  "comments_url": "https://api.github.com/repos/vyperlang/vyper/issues/2276/comments",
  "events_url": "https://api.github.com/repos/vyperlang/vyper/issues/2276/events",
  "html_url": "https://github.com/vyperlang/vyper/issues/2276",
  "id": 781778623,
  "node_id": "MDU6SXNzdWU3ODE3Nzg2MjM=",
  "number": 2276,
  "title": "VIP: Structured AST Output",
  "user": {
    "login": "haltman-at",
    "id": 35589221,
    "node_id": "MDQ6VXNlcjM1NTg5MjIx",
    "avatar_url": "https://avatars.githubusercontent.com/u/35589221?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/haltman-at",
    "html_url": "https://github.com/haltman-at",
    "followers_url": "https://api.github.com/users/haltman-at/followers",
    "following_url": "https://api.github.com/users/haltman-at/following{/other_user}",
    "gists_url": "https://api.github.com/users/haltman-at/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/haltman-at/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/haltman-at/subscriptions",
    "organizations_url": "https://api.github.com/users/haltman-at/orgs",
    "repos_url": "https://api.github.com/users/haltman-at/repos",
    "events_url": "https://api.github.com/users/haltman-at/events{/privacy}",
    "received_events_url": "https://api.github.com/users/haltman-at/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 757250644,
      "node_id": "MDU6TGFiZWw3NTcyNTA2NDQ=",
      "url": "https://api.github.com/repos/vyperlang/vyper/labels/VIP:%20Approved",
      "name": "VIP: Approved",
      "color": "98f765",
      "default": false,
      "description": "VIP Approved"
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 30,
  "created_at": "2021-01-08T01:45:50Z",
  "updated_at": "2021-11-02T20:51:50Z",
  "closed_at": null,
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "## Simple Summary\r\n\r\nSo, I work on the Truffle Debugger, and I recently added rudimentary Vyper support for it (with more hopefully to come).  However, further Vyper support -- especially decoding of variables -- is made difficult by the fact that Vyper's AST format (as emitted by the compiler) is difficult to work with.  I was hoping maybe that a future version of Vyper could introduce a new or improved AST format that would be more usable, which would go a long way towards allowing fuller Vyper support in Truffle Debugger.\r\n\r\n## Motivation\r\n\r\nSo first I should be clear here that I'm only talking about the AST emitted by the compiler.  I have no interest in any intermediate AST format that is used internally, so if the existing format needs to continue to be used internally at some point, that is fine.  My interest is in the AST emitted by the compiler so that Truffle Debugger can make use of it.\r\n\r\nWith that out of the way, why is the existing AST format unsatisfactory, and how would I like to see it improved?\r\n\r\nFundamentally, the problem with the existing AST format is that it's not so much of an abstract syntax tree as a concrete syntax tree; it doesn't so much describe what things are, as how they are written.  For instance, if I write\r\n\r\n```\r\na: String[64] = \"hello\"\r\nb: uint256 = c[1]\r\n```\r\n\r\nthen the nodes corresponding to `String[64]` and `c[1]` both have the same `ast_type`, `\"Index\"`, despite meaning entirely different things -- one being a special sort of type name, and one being an expression indicating an access into an array.\r\n\r\nWhile I would consider this the most fundamental problem, I should note that a carefully-written program meant to process the AST can still likely work with this.  However, there are some key points where it is outright missing needed information.\r\n\r\nThe worst case of this, I would say, is the declaration of a loop variable.  Most variable declarations are of the `AnnAssign` ast_type and as such include type information in the `annotation` field.  However, loop variable declarations are of the `Name` ast_type and do not include any type information.  That's because this reflects the syntax, where most variables are declared with a specified type, but loop variables are not.  However the result is that determining the type of a loop variable is, while perhaps technically possible, not realistically feasible for an external tool.\r\n\r\nBut I want to be clear that while the lack of type information for loop variables is the immediate problem, I don't think the correct solution is to simply add that type information in somehow.  Doing so wouldn't be very compatible with the current format, after all, since then the tree would no longer reflect the concrete syntax.  What I'd really like to see is not a minor modification to cover this case, but rather something like Solidity has -- where every node that has a type (variable, expression, whatever) has type information attached to it.  For instance, with the current format, it *might* be possible to find a way to decode mapping keys, but it would be difficult.\r\n\r\nWhile I'm not suggesting you copy the Solidity AST -- Vyper is a different language, after all, and so many things in the Solidity AST would likely make no sense in this new context -- I think studying it could be instructive.  Here are some features of it that I think are useful and that you would likely want to implement:\r\n\r\n1. As mentioned above, the Solidity AST attaches type information, in a machine-readable format, to every node that has a type; for user-defined types, this should likely include an ID (see below for more about IDs).\r\n2. Nodes in the Solidity AST can refer to other nodes by ID.  For instance, each variable declaration has a `scope` field, giving the node ID of that variable's scope.  Any use of something that has been previously declared by the user has a `referencedDeclaration` field, giving the node ID of its declaration.  Etc.\r\n3. In order to make the above work, node IDs in Solidity are unique per-compilation, rather than per-source.  While Vyper does less with imports than Solidity does, I think it still does enough with them to make this appropriate.  Of course, you might find some other alternative rather than doing this, e.g. doing something like having `referencedDeclarationSource` (with the source index) and `referencedDeclaration` (with the ID).  I don't know what the best way is; I'm just tossing ideas out here.\r\n4. As mentioned above, `ast_type`s should be more about the node's meaning, rather than how it's written, and nodes should generally have more useful information attached to them rather than being a simple parse of the syntax (this is really the fundamental problem, as mentioned above).  As I said, I think studying the Solidity AST format could be instructive regarding what sorts of useful information could be added or what `ast_type`s could potentially exist.\r\n\r\nSo, those are examples of the sort of thing I'd like to see.  Reworking the emitted AST format along these lines would make it much easier for Truffle Debugger (or other tools) to make use of it, both for variable decoding and for other purposes.\r\n\r\nThank you!\r\n\r\n## Backwards Compatibility\r\n\r\nDepending on how this VIP is implemented, it could easily change the emitted AST format to something entirely incompatible with what already exists.  That said, this would only be relevant to tools that make use of the emitted AST, and I'm not sure how prevalent those are.\r\n\r\n## Copyright\r\nCopyright and related rights waived via [CC0](https://creativecommons.org/publicdomain/zero/1.0/)",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/2276/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/vyperlang/vyper/issues/2276/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/757082154",
    "html_url": "https://github.com/vyperlang/vyper/issues/2276#issuecomment-757082154",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/2276",
    "id": 757082154,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc1NzA4MjE1NA==",
    "user": {
      "login": "haltman-at",
      "id": 35589221,
      "node_id": "MDQ6VXNlcjM1NTg5MjIx",
      "avatar_url": "https://avatars.githubusercontent.com/u/35589221?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/haltman-at",
      "html_url": "https://github.com/haltman-at",
      "followers_url": "https://api.github.com/users/haltman-at/followers",
      "following_url": "https://api.github.com/users/haltman-at/following{/other_user}",
      "gists_url": "https://api.github.com/users/haltman-at/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/haltman-at/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/haltman-at/subscriptions",
      "organizations_url": "https://api.github.com/users/haltman-at/orgs",
      "repos_url": "https://api.github.com/users/haltman-at/repos",
      "events_url": "https://api.github.com/users/haltman-at/events{/privacy}",
      "received_events_url": "https://api.github.com/users/haltman-at/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-01-09T02:39:09Z",
    "updated_at": "2021-01-09T02:39:09Z",
    "author_association": "NONE",
    "body": "Oh, one other note, if you do do this, ideally this new format should be readily distinguishable from the old one via something that's detectable at the top-level node.  I'm not saying you need to put an explicit flag or anything, but ideally there should be something different there that will give it away. :)  Thanks again!",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/757082154/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/758230583",
    "html_url": "https://github.com/vyperlang/vyper/issues/2276#issuecomment-758230583",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/2276",
    "id": 758230583,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc1ODIzMDU4Mw==",
    "user": {
      "login": "haltman-at",
      "id": 35589221,
      "node_id": "MDQ6VXNlcjM1NTg5MjIx",
      "avatar_url": "https://avatars.githubusercontent.com/u/35589221?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/haltman-at",
      "html_url": "https://github.com/haltman-at",
      "followers_url": "https://api.github.com/users/haltman-at/followers",
      "following_url": "https://api.github.com/users/haltman-at/following{/other_user}",
      "gists_url": "https://api.github.com/users/haltman-at/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/haltman-at/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/haltman-at/subscriptions",
      "organizations_url": "https://api.github.com/users/haltman-at/orgs",
      "repos_url": "https://api.github.com/users/haltman-at/repos",
      "events_url": "https://api.github.com/users/haltman-at/events{/privacy}",
      "received_events_url": "https://api.github.com/users/haltman-at/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-01-11T21:17:44Z",
    "updated_at": "2021-01-11T21:17:44Z",
    "author_association": "NONE",
    "body": "Sorry, one more note -- I wanted to give a better example of what's wrong.  (Other than iterator variables, I mean.)  I don't feel like my `Index` example above did a great job illustrating the problem, because, maybe it's not too unreasonable that those are the same, right?\r\n\r\nWell, I remembered a better example.  And this will illustrate both things being the same that shouldn't be, but also the worse problem of things being *different* that shouldn't be.  (Although iterator variables are already an example there, since, most variable declarations are `AnnAssign`s but those ones are instead `Name`s!)\r\n\r\nConsider the following declarations:\r\n```\r\na: uint256\r\nb: public(uint256)\r\n```\r\n\r\nThe first one, like most variable declarations, is an `AnnAssign` node, with the name info in `target` and the type info (in this case, a `Name`) in `annotation`.\r\n\r\nHowever, the second one, under `annotation`, instead has a `Call`!  The `Call` has as its `func` a `Name` with `id` `\"public\"`, and as its `args` an array containing just the node with the type info.\r\n\r\nSo, these two things are nearly the same, but in one under `annotation` you have the type info, and in the other you have it wrapped in a `Call`.  (And of course the use of the `Call` type isn't great since nothing at all like a function call is in any way happening here!)  Ideally, the fact that `b` is public would be a property of the variable declaration node, not some intermediate layer that wraps around the type where you expect the type to be!\r\n\r\nAnyway, hoping that's a better example.  Thank you again!",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/758230583/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/758272745",
    "html_url": "https://github.com/vyperlang/vyper/issues/2276#issuecomment-758272745",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/2276",
    "id": 758272745,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc1ODI3Mjc0NQ==",
    "user": {
      "login": "fubuloubu",
      "id": 3859395,
      "node_id": "MDQ6VXNlcjM4NTkzOTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3859395?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fubuloubu",
      "html_url": "https://github.com/fubuloubu",
      "followers_url": "https://api.github.com/users/fubuloubu/followers",
      "following_url": "https://api.github.com/users/fubuloubu/following{/other_user}",
      "gists_url": "https://api.github.com/users/fubuloubu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fubuloubu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fubuloubu/subscriptions",
      "organizations_url": "https://api.github.com/users/fubuloubu/orgs",
      "repos_url": "https://api.github.com/users/fubuloubu/repos",
      "events_url": "https://api.github.com/users/fubuloubu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fubuloubu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-01-11T22:46:30Z",
    "updated_at": "2021-01-11T22:46:56Z",
    "author_association": "MEMBER",
    "body": "I see the issue, yes we will be implementing a custom parser and updating our AST nodes to be specific to Vyper, intead of the strange PyAST/VyAST hybrid we have now. This should help :smile: \r\n\r\n---\r\n\r\nStructuring the output is definitely something we'd like to discuss with you more.",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/758272745/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/767071955",
    "html_url": "https://github.com/vyperlang/vyper/issues/2276#issuecomment-767071955",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/2276",
    "id": 767071955,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc2NzA3MTk1NQ==",
    "user": {
      "login": "fubuloubu",
      "id": 3859395,
      "node_id": "MDQ6VXNlcjM4NTkzOTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3859395?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fubuloubu",
      "html_url": "https://github.com/fubuloubu",
      "followers_url": "https://api.github.com/users/fubuloubu/followers",
      "following_url": "https://api.github.com/users/fubuloubu/following{/other_user}",
      "gists_url": "https://api.github.com/users/fubuloubu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fubuloubu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fubuloubu/subscriptions",
      "organizations_url": "https://api.github.com/users/fubuloubu/orgs",
      "repos_url": "https://api.github.com/users/fubuloubu/repos",
      "events_url": "https://api.github.com/users/fubuloubu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fubuloubu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-01-25T19:51:40Z",
    "updated_at": "2021-01-25T19:51:40Z",
    "author_association": "MEMBER",
    "body": "Meeting notes: will explore refactoring our AST information so it is easier to work with.",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/767071955/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/770735741",
    "html_url": "https://github.com/vyperlang/vyper/issues/2276#issuecomment-770735741",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/2276",
    "id": 770735741,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc3MDczNTc0MQ==",
    "user": {
      "login": "sambacha",
      "id": 32783916,
      "node_id": "MDQ6VXNlcjMyNzgzOTE2",
      "avatar_url": "https://avatars.githubusercontent.com/u/32783916?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sambacha",
      "html_url": "https://github.com/sambacha",
      "followers_url": "https://api.github.com/users/sambacha/followers",
      "following_url": "https://api.github.com/users/sambacha/following{/other_user}",
      "gists_url": "https://api.github.com/users/sambacha/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sambacha/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sambacha/subscriptions",
      "organizations_url": "https://api.github.com/users/sambacha/orgs",
      "repos_url": "https://api.github.com/users/sambacha/repos",
      "events_url": "https://api.github.com/users/sambacha/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sambacha/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-02-01T10:05:03Z",
    "updated_at": "2021-02-01T10:05:03Z",
    "author_association": "CONTRIBUTOR",
    "body": "> I see the issue, yes we will be implementing a custom parser and updating our AST nodes to be specific to Vyper, intead of the strange PyAST/VyAST hybrid we have now. This should help 😄\r\n> \r\n> Structuring the output is definitely something we'd like to discuss with you more.\r\n\r\nNew parser? Any details on this? \r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/770735741/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/771154683",
    "html_url": "https://github.com/vyperlang/vyper/issues/2276#issuecomment-771154683",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/2276",
    "id": 771154683,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc3MTE1NDY4Mw==",
    "user": {
      "login": "fubuloubu",
      "id": 3859395,
      "node_id": "MDQ6VXNlcjM4NTkzOTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3859395?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fubuloubu",
      "html_url": "https://github.com/fubuloubu",
      "followers_url": "https://api.github.com/users/fubuloubu/followers",
      "following_url": "https://api.github.com/users/fubuloubu/following{/other_user}",
      "gists_url": "https://api.github.com/users/fubuloubu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fubuloubu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fubuloubu/subscriptions",
      "organizations_url": "https://api.github.com/users/fubuloubu/orgs",
      "repos_url": "https://api.github.com/users/fubuloubu/repos",
      "events_url": "https://api.github.com/users/fubuloubu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fubuloubu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-02-01T21:00:44Z",
    "updated_at": "2021-02-01T21:00:44Z",
    "author_association": "MEMBER",
    "body": "> > I see the issue, yes we will be implementing a custom parser and updating our AST nodes to be specific to Vyper, intead of the strange PyAST/VyAST hybrid we have now. This should help smile\r\n> > Structuring the output is definitely something we'd like to discuss with you more.\r\n> \r\n> New parser? Any details on this?\r\n\r\nquite old, but basically:\r\nhttps://github.com/vyperlang/vyper/issues/1363\r\n\r\nRelevant work:\r\nhttps://github.com/fubuloubu/vyper-grammar\r\nhttps://github.com/fubuloubu/lll-compiler\r\nhttps://github.com/apeworx/node-utils",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/771154683/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/947688612",
    "html_url": "https://github.com/vyperlang/vyper/issues/2276#issuecomment-947688612",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/2276",
    "id": 947688612,
    "node_id": "IC_kwDOBGDvrM44fJSk",
    "user": {
      "login": "charles-cooper",
      "id": 3867501,
      "node_id": "MDQ6VXNlcjM4Njc1MDE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3867501?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/charles-cooper",
      "html_url": "https://github.com/charles-cooper",
      "followers_url": "https://api.github.com/users/charles-cooper/followers",
      "following_url": "https://api.github.com/users/charles-cooper/following{/other_user}",
      "gists_url": "https://api.github.com/users/charles-cooper/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/charles-cooper/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/charles-cooper/subscriptions",
      "organizations_url": "https://api.github.com/users/charles-cooper/orgs",
      "repos_url": "https://api.github.com/users/charles-cooper/repos",
      "events_url": "https://api.github.com/users/charles-cooper/events{/privacy}",
      "received_events_url": "https://api.github.com/users/charles-cooper/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-10-20T13:51:35Z",
    "updated_at": "2021-10-20T13:51:35Z",
    "author_association": "COLLABORATOR",
    "body": "@haltman-at is there a specific ask here? Or is this a more general \"AST could be better\"?",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/947688612/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/948093431",
    "html_url": "https://github.com/vyperlang/vyper/issues/2276#issuecomment-948093431",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/2276",
    "id": 948093431,
    "node_id": "IC_kwDOBGDvrM44gsH3",
    "user": {
      "login": "haltman-at",
      "id": 35589221,
      "node_id": "MDQ6VXNlcjM1NTg5MjIx",
      "avatar_url": "https://avatars.githubusercontent.com/u/35589221?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/haltman-at",
      "html_url": "https://github.com/haltman-at",
      "followers_url": "https://api.github.com/users/haltman-at/followers",
      "following_url": "https://api.github.com/users/haltman-at/following{/other_user}",
      "gists_url": "https://api.github.com/users/haltman-at/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/haltman-at/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/haltman-at/subscriptions",
      "organizations_url": "https://api.github.com/users/haltman-at/orgs",
      "repos_url": "https://api.github.com/users/haltman-at/repos",
      "events_url": "https://api.github.com/users/haltman-at/events{/privacy}",
      "received_events_url": "https://api.github.com/users/haltman-at/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-10-20T22:48:18Z",
    "updated_at": "2021-10-20T22:48:18Z",
    "author_association": "NONE",
    "body": "It's both.  It's both a general \"AST should be better\", and examples of a few particular ways I would like it to be better.  Note that making these improvements would probably require an entirely new AST format, rather than just tweaks to the existing one, as I suspect the existing one just isn't really suitable for these changes.\r\n\r\nAs for what these specific improvements would be, well, I was going to put them into a numbered list here, only to realize that I basically already did that in the original issue writeup.   (Although some of them may rely on context in the paragraphs preceding said list.)  So, um, just go reread that list, and also the issue more generally, for even more information?  Not sure what else to add here that I didn't already say.",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/948093431/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/948108860",
    "html_url": "https://github.com/vyperlang/vyper/issues/2276#issuecomment-948108860",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/2276",
    "id": 948108860,
    "node_id": "IC_kwDOBGDvrM44gv48",
    "user": {
      "login": "charles-cooper",
      "id": 3867501,
      "node_id": "MDQ6VXNlcjM4Njc1MDE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3867501?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/charles-cooper",
      "html_url": "https://github.com/charles-cooper",
      "followers_url": "https://api.github.com/users/charles-cooper/followers",
      "following_url": "https://api.github.com/users/charles-cooper/following{/other_user}",
      "gists_url": "https://api.github.com/users/charles-cooper/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/charles-cooper/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/charles-cooper/subscriptions",
      "organizations_url": "https://api.github.com/users/charles-cooper/orgs",
      "repos_url": "https://api.github.com/users/charles-cooper/repos",
      "events_url": "https://api.github.com/users/charles-cooper/events{/privacy}",
      "received_events_url": "https://api.github.com/users/charles-cooper/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-10-20T23:23:40Z",
    "updated_at": "2021-10-20T23:23:40Z",
    "author_association": "COLLABORATOR",
    "body": "@haltman-at I agree that most of the things you are asking for aren't really tweaks to the existing AST, they are kind of the result of using the Python AST parser instead of having a custom Vyper parser (see #1363). So I'm not sure if what you're asking for are specific changes to the AST or if this issue is putting on paper several issues that would be solved by #1363 (but effectively is a sub-issue of #1363).\r\n\r\nI want to add that in general, it is much less confusing, and contributors are much more likely to want to help by working on an issue or VIP if it has one \"main thing to do\". The umbrella \"AST should be better\" issue is a pretty abstract issue. Meanwhile, there are several distantly related suggestions in this issue and it's hard for me to figure out which ones are important and which ones are just thoughts that happened to make their way into the VIP. So it would make it a lot easier for Vyper contributors to prioritize and take on the work - and it would be much appreciated! - if it were parceled out into separate, relatively self-contained issues.",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/948108860/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/948111599",
    "html_url": "https://github.com/vyperlang/vyper/issues/2276#issuecomment-948111599",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/2276",
    "id": 948111599,
    "node_id": "IC_kwDOBGDvrM44gwjv",
    "user": {
      "login": "haltman-at",
      "id": 35589221,
      "node_id": "MDQ6VXNlcjM1NTg5MjIx",
      "avatar_url": "https://avatars.githubusercontent.com/u/35589221?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/haltman-at",
      "html_url": "https://github.com/haltman-at",
      "followers_url": "https://api.github.com/users/haltman-at/followers",
      "following_url": "https://api.github.com/users/haltman-at/following{/other_user}",
      "gists_url": "https://api.github.com/users/haltman-at/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/haltman-at/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/haltman-at/subscriptions",
      "organizations_url": "https://api.github.com/users/haltman-at/orgs",
      "repos_url": "https://api.github.com/users/haltman-at/repos",
      "events_url": "https://api.github.com/users/haltman-at/events{/privacy}",
      "received_events_url": "https://api.github.com/users/haltman-at/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-10-20T23:30:35Z",
    "updated_at": "2021-10-20T23:30:35Z",
    "author_association": "NONE",
    "body": "Ah, yes, I would say that this is a sub-issue of #1363.  I would say that (1)-(3) are pretty essential for my purposes; (4) maybe not so much.",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/948111599/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/948119550",
    "html_url": "https://github.com/vyperlang/vyper/issues/2276#issuecomment-948119550",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/2276",
    "id": 948119550,
    "node_id": "IC_kwDOBGDvrM44gyf-",
    "user": {
      "login": "charles-cooper",
      "id": 3867501,
      "node_id": "MDQ6VXNlcjM4Njc1MDE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3867501?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/charles-cooper",
      "html_url": "https://github.com/charles-cooper",
      "followers_url": "https://api.github.com/users/charles-cooper/followers",
      "following_url": "https://api.github.com/users/charles-cooper/following{/other_user}",
      "gists_url": "https://api.github.com/users/charles-cooper/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/charles-cooper/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/charles-cooper/subscriptions",
      "organizations_url": "https://api.github.com/users/charles-cooper/orgs",
      "repos_url": "https://api.github.com/users/charles-cooper/repos",
      "events_url": "https://api.github.com/users/charles-cooper/events{/privacy}",
      "received_events_url": "https://api.github.com/users/charles-cooper/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-10-20T23:53:17Z",
    "updated_at": "2021-10-21T00:08:25Z",
    "author_association": "COLLABORATOR",
    "body": "@haltman-at can you check out https://github.com/charles-cooper/vyper/tree/ast_output and https://github.com/charles-cooper/vyper/tree/ast_output2? The first one returns the AST after analysis (type checking, \"expansion\" and \"folding\" stages) instead of before. The second one is similar but it also exposes internal type information. (Obviously this is a proof of concept, not a stable format)",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/948119550/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/948159304",
    "html_url": "https://github.com/vyperlang/vyper/issues/2276#issuecomment-948159304",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/2276",
    "id": 948159304,
    "node_id": "IC_kwDOBGDvrM44g8NI",
    "user": {
      "login": "haltman-at",
      "id": 35589221,
      "node_id": "MDQ6VXNlcjM1NTg5MjIx",
      "avatar_url": "https://avatars.githubusercontent.com/u/35589221?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/haltman-at",
      "html_url": "https://github.com/haltman-at",
      "followers_url": "https://api.github.com/users/haltman-at/followers",
      "following_url": "https://api.github.com/users/haltman-at/following{/other_user}",
      "gists_url": "https://api.github.com/users/haltman-at/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/haltman-at/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/haltman-at/subscriptions",
      "organizations_url": "https://api.github.com/users/haltman-at/orgs",
      "repos_url": "https://api.github.com/users/haltman-at/repos",
      "events_url": "https://api.github.com/users/haltman-at/events{/privacy}",
      "received_events_url": "https://api.github.com/users/haltman-at/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-10-21T01:12:37Z",
    "updated_at": "2021-10-21T01:15:54Z",
    "author_association": "NONE",
    "body": "Are there any instructions for how I would use Vyper from source?  If not, could you maybe just attach examples of the output?  (Ideally in all three formats for comparison?)  I can specify what specific features I'd like to see compared if you want, although it's basically just the stuff above -- do `public` declarations no longer look totally different from non-public ones, do loop variables have type info, do references to structs, constants, or events include the ID of what they're referencing... (I talked about the ID thing in general, because it should be a general thing, but I think it's structs, constants, and events that I care most about.)",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/948159304/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/948173199",
    "html_url": "https://github.com/vyperlang/vyper/issues/2276#issuecomment-948173199",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/2276",
    "id": 948173199,
    "node_id": "IC_kwDOBGDvrM44g_mP",
    "user": {
      "login": "charles-cooper",
      "id": 3867501,
      "node_id": "MDQ6VXNlcjM4Njc1MDE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3867501?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/charles-cooper",
      "html_url": "https://github.com/charles-cooper",
      "followers_url": "https://api.github.com/users/charles-cooper/followers",
      "following_url": "https://api.github.com/users/charles-cooper/following{/other_user}",
      "gists_url": "https://api.github.com/users/charles-cooper/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/charles-cooper/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/charles-cooper/subscriptions",
      "organizations_url": "https://api.github.com/users/charles-cooper/orgs",
      "repos_url": "https://api.github.com/users/charles-cooper/repos",
      "events_url": "https://api.github.com/users/charles-cooper/events{/privacy}",
      "received_events_url": "https://api.github.com/users/charles-cooper/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-10-21T01:20:34Z",
    "updated_at": "2021-10-21T01:20:34Z",
    "author_association": "COLLABORATOR",
    "body": "@haltman-at not sure how you're using vyper but you can usually `pip install` directly from a URL.\r\n\r\nHere's an example contract, with output from 3 different branches - current master, and the two others I linked to before. https://gist.github.com/charles-cooper/b35dc96c4f952b586f9ec654ba252c6b",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/948173199/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/948223824",
    "html_url": "https://github.com/vyperlang/vyper/issues/2276#issuecomment-948223824",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/2276",
    "id": 948223824,
    "node_id": "IC_kwDOBGDvrM44hL9Q",
    "user": {
      "login": "haltman-at",
      "id": 35589221,
      "node_id": "MDQ6VXNlcjM1NTg5MjIx",
      "avatar_url": "https://avatars.githubusercontent.com/u/35589221?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/haltman-at",
      "html_url": "https://github.com/haltman-at",
      "followers_url": "https://api.github.com/users/haltman-at/followers",
      "following_url": "https://api.github.com/users/haltman-at/following{/other_user}",
      "gists_url": "https://api.github.com/users/haltman-at/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/haltman-at/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/haltman-at/subscriptions",
      "organizations_url": "https://api.github.com/users/haltman-at/orgs",
      "repos_url": "https://api.github.com/users/haltman-at/repos",
      "events_url": "https://api.github.com/users/haltman-at/events{/privacy}",
      "received_events_url": "https://api.github.com/users/haltman-at/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-10-21T03:20:03Z",
    "updated_at": "2021-10-21T03:20:03Z",
    "author_association": "NONE",
    "body": "> @haltman-at not sure how you're using vyper but you can usually pip install directly from a URL.\r\n\r\nOh, cool!  I wasn't aware; I'll have to give these a whirl then (and also look at your example but I expect I'll want to try more myself :) ).",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/948223824/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/948233789",
    "html_url": "https://github.com/vyperlang/vyper/issues/2276#issuecomment-948233789",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/2276",
    "id": 948233789,
    "node_id": "IC_kwDOBGDvrM44hOY9",
    "user": {
      "login": "haltman-at",
      "id": 35589221,
      "node_id": "MDQ6VXNlcjM1NTg5MjIx",
      "avatar_url": "https://avatars.githubusercontent.com/u/35589221?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/haltman-at",
      "html_url": "https://github.com/haltman-at",
      "followers_url": "https://api.github.com/users/haltman-at/followers",
      "following_url": "https://api.github.com/users/haltman-at/following{/other_user}",
      "gists_url": "https://api.github.com/users/haltman-at/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/haltman-at/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/haltman-at/subscriptions",
      "organizations_url": "https://api.github.com/users/haltman-at/orgs",
      "repos_url": "https://api.github.com/users/haltman-at/repos",
      "events_url": "https://api.github.com/users/haltman-at/events{/privacy}",
      "received_events_url": "https://api.github.com/users/haltman-at/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-10-21T03:50:51Z",
    "updated_at": "2021-10-21T04:28:13Z",
    "author_association": "NONE",
    "body": "OK, quick impressions: The output from `ast_output` is not a big improvement from what currently exists.  As for `ast_output2`... that one's more interesting, but it's hard to judge quickly.  I don't think it meets all my criteria -- I don't see anything that looks like nodes referring to other nodes, for instance -- but it might at least meet some of them.  There's clearly *some* sort of type information here.  (It doesn't meet the \"public state variables look essentially the same as non-public ones\" criterion, but, given sufficient type information elsewhere, that criterion isn't truly a necessity, I suppose; it's something you'd want to do in a new AST format, but not something you can do by modifying the existing one, obviously.)  My suspicion is that it won't quite be enough, but it does seem to be an improvement; I'll have to try it out more and comment more with what I find.  Anyway, thanks a bunch for putting this up, this is quite interesting indeed.",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/948233789/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/949256358",
    "html_url": "https://github.com/vyperlang/vyper/issues/2276#issuecomment-949256358",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/2276",
    "id": 949256358,
    "node_id": "IC_kwDOBGDvrM44lICm",
    "user": {
      "login": "haltman-at",
      "id": 35589221,
      "node_id": "MDQ6VXNlcjM1NTg5MjIx",
      "avatar_url": "https://avatars.githubusercontent.com/u/35589221?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/haltman-at",
      "html_url": "https://github.com/haltman-at",
      "followers_url": "https://api.github.com/users/haltman-at/followers",
      "following_url": "https://api.github.com/users/haltman-at/following{/other_user}",
      "gists_url": "https://api.github.com/users/haltman-at/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/haltman-at/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/haltman-at/subscriptions",
      "organizations_url": "https://api.github.com/users/haltman-at/orgs",
      "repos_url": "https://api.github.com/users/haltman-at/repos",
      "events_url": "https://api.github.com/users/haltman-at/events{/privacy}",
      "received_events_url": "https://api.github.com/users/haltman-at/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-10-22T03:26:05Z",
    "updated_at": "2021-10-22T03:30:59Z",
    "author_association": "NONE",
    "body": "> @haltman-at not sure how you're using vyper but you can usually pip install directly from a URL.\r\n\r\nSorry, how does one actually do this?  I'm trying to test this out right now and `pip install https://github.com/charles-cooper/vyper/tree/ast_output2` doesn't seem to do it (I get a \"cannot detect archive format\" error).\r\n\r\nEdit: Sorry, nevermind, got this working, the command is\r\n```\r\npip install git+https://github.com/charles-cooper/vyper.git@ast_output2\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/949256358/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/949282548",
    "html_url": "https://github.com/vyperlang/vyper/issues/2276#issuecomment-949282548",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/2276",
    "id": 949282548,
    "node_id": "IC_kwDOBGDvrM44lOb0",
    "user": {
      "login": "haltman-at",
      "id": 35589221,
      "node_id": "MDQ6VXNlcjM1NTg5MjIx",
      "avatar_url": "https://avatars.githubusercontent.com/u/35589221?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/haltman-at",
      "html_url": "https://github.com/haltman-at",
      "followers_url": "https://api.github.com/users/haltman-at/followers",
      "following_url": "https://api.github.com/users/haltman-at/following{/other_user}",
      "gists_url": "https://api.github.com/users/haltman-at/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/haltman-at/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/haltman-at/subscriptions",
      "organizations_url": "https://api.github.com/users/haltman-at/orgs",
      "repos_url": "https://api.github.com/users/haltman-at/repos",
      "events_url": "https://api.github.com/users/haltman-at/events{/privacy}",
      "received_events_url": "https://api.github.com/users/haltman-at/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-10-22T04:43:05Z",
    "updated_at": "2021-10-22T17:12:52Z",
    "author_association": "NONE",
    "body": "OK, so, having tried this out, here's my quick assessment.  So, we're trying to do two things here: Track variables and track mapping keys.  I'm going to ignore the latter for now as I *think* if we can do the former we can basically do the latter, although it will probably require some special handling at some points, but like I said I want to ignore all this for now.  Tracking variables means tracking their location (we can do that) and tracking their types; the former we can do, the latter is the problem we're trying to solve.\r\n\r\nSo, first question: Does this do everything that I would want from an AST format?\r\n\r\n...well, obviously, no.  It's still basically the same AST format, just with some transformations made and some information added.  So that's obviously not happening until the whole AST is reworked.\r\n\r\nBut, OK -- let's work with what we have.  Is this good enough to easily or mostly-uniformly handle the type-tracking problem?\r\n\r\nUnfortunately, I'd say this is still a no.  To qualify as a \"yes\", I'd say we ought to be able to rely primarily on the added type info, and only occasionally having to get type info via processing the AST itself (especially because the AST format, while handleable, is not great).  This works fine for value types; but for strings, bytestrings, arrays, structs, and mappings, the added type info just tells you which one of those that it is, not the more detailed type information.  Moreover, not all variables seem to get the type metadata at all; it seems to be missing on function arguments.\r\n\r\nBut, OK -- so we can't do things in a more uniform manner as we'd like, but... if this is what we had to go with, using whatever means feasible... could we do it?  If we absolutely had to, is this good enough?\r\n\r\nThe answer there is... *maybe*.  Or rather, it's yes, *conditionally*.  The condition is that I think this is good enough, if we absolutely had to, for *this* version of Vyper; we could write mechanisms ot handle this that would work with the current version of Vyper.  However, such mechanisms would rely on assumptions about what's currently possible in Vyper, assumptions that may be invalidated by future versions could add support for features that could easily render such mechanisms untenable, and possibly truly require a new AST format.  As such, I would be reluctant to write support for this intermediate format.\r\n\r\nSo why do I say it would be enough for the current version?  Well, because we could mostly ignore the type metadata and just process the AST, like I had initially planned.  Doing so, while a pain, would be doable, *except*, of course, for the case of loop variables.  But, with this added type metadata, we would now have a way to handle loop variables... in this version of Vyper.  Currently, as best I can tell, only value types are permitted for loop variables; and value types are precisely the types for which the type metadata tells us everything.  But if a future version of Vyper ever expanded the allowed types on loop variables, well, we'd be stuck.  The type metadata simply isn't good enough for those cases.\r\n\r\n(Another example of this, relevant not to variables but rather to mapping keys, is the assumption that Vyper doesn't permit pointers to mappings like Solidity does.  When I said above that mapping keys seem handleable, it was conditional on this assumption.  If Vyper added that, we'd have to rely on the type metadata, and for mappings it wouldn't be good enough.)\r\n\r\nAlso, the fact that this AST output is emitted after various other transformations has some unrelated downsides.  Like, constants completely vanish!  We'd like to be able to report on the values of constants when possible, but we can't do that if their AST entries go away.\r\n\r\nSo overall I'd call this a substantial improvement over the existing format, but it's not a strict improvement, and it still has enough missing that, while it's technically enough for current versions, I'd be quite wary of attempting to support it due to the possibility that future versions would invalidate our assumptions.",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/949282548/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/949723566",
    "html_url": "https://github.com/vyperlang/vyper/issues/2276#issuecomment-949723566",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/2276",
    "id": 949723566,
    "node_id": "IC_kwDOBGDvrM44m6Gu",
    "user": {
      "login": "charles-cooper",
      "id": 3867501,
      "node_id": "MDQ6VXNlcjM4Njc1MDE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3867501?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/charles-cooper",
      "html_url": "https://github.com/charles-cooper",
      "followers_url": "https://api.github.com/users/charles-cooper/followers",
      "following_url": "https://api.github.com/users/charles-cooper/following{/other_user}",
      "gists_url": "https://api.github.com/users/charles-cooper/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/charles-cooper/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/charles-cooper/subscriptions",
      "organizations_url": "https://api.github.com/users/charles-cooper/orgs",
      "repos_url": "https://api.github.com/users/charles-cooper/repos",
      "events_url": "https://api.github.com/users/charles-cooper/events{/privacy}",
      "received_events_url": "https://api.github.com/users/charles-cooper/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-10-22T15:14:38Z",
    "updated_at": "2021-10-22T15:14:38Z",
    "author_association": "COLLABORATOR",
    "body": "@haltman-at I think this conversation would be a lot more focused with some examples. Could you maybe write up some sample contracts + the ideal AST output in a gist?",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/949723566/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/950063937",
    "html_url": "https://github.com/vyperlang/vyper/issues/2276#issuecomment-950063937",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/2276",
    "id": 950063937,
    "node_id": "IC_kwDOBGDvrM44oNNB",
    "user": {
      "login": "haltman-at",
      "id": 35589221,
      "node_id": "MDQ6VXNlcjM1NTg5MjIx",
      "avatar_url": "https://avatars.githubusercontent.com/u/35589221?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/haltman-at",
      "html_url": "https://github.com/haltman-at",
      "followers_url": "https://api.github.com/users/haltman-at/followers",
      "following_url": "https://api.github.com/users/haltman-at/following{/other_user}",
      "gists_url": "https://api.github.com/users/haltman-at/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/haltman-at/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/haltman-at/subscriptions",
      "organizations_url": "https://api.github.com/users/haltman-at/orgs",
      "repos_url": "https://api.github.com/users/haltman-at/repos",
      "events_url": "https://api.github.com/users/haltman-at/events{/privacy}",
      "received_events_url": "https://api.github.com/users/haltman-at/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-10-23T04:53:28Z",
    "updated_at": "2021-10-23T04:53:28Z",
    "author_association": "NONE",
    "body": "Well, there's no such thing as \"the ideal AST output\"; AST output necessarily involves arbitrary choices.  And of course there's the question of whether we're talking about something close to what you already have, or wholly reinventing it as I imagine might happen in #1363.  But I can certainly provide written-out examples illustrating the sorts of features I've described above.\r\n\r\nI'll often illustrate with bits of Solidity ASTs, since it has a lot of these things, but obviously this isn't a suggestion that you should adopt their format whole cloth!  Vyper is a different language -- and one with a different type system, which will certainly affect things.  But I'm going to use it for reference.\r\n\r\nSo, let's compare some pairs of analogous declarations in both languages, and what we get for each.\r\n\r\nComparison 1: Declaring a fixed-length, nested array as a state variable.\r\n```vyper\r\nx: uint256[2][2]\r\n```\r\nvs\r\n```solidity\r\ncontract C {\r\n  uint256[2][2] x;\r\n}\r\n```\r\n\r\nHere's the relevant part of the Vyper AST output, using the `ast_output2` branch.  (To keep things shorter, I'm going to remove keys that seem irrelevant.)\r\n```\r\n      {\r\n        \"_metadata\": {\r\n          \"type\": \"ArrayDefinition\"\r\n        },\r\n        \"annotation\": {\r\n          \"_metadata\": {},\r\n          \"ast_type\": \"Subscript\",\r\n          \"node_id\": 4,\r\n          \"slice\": {\r\n            \"_metadata\": {},\r\n            \"ast_type\": \"Index\",\r\n            \"node_id\": 11,\r\n            \"src\": \"14:1:0\",\r\n            \"value\": {\r\n              \"_metadata\": {},\r\n              \"ast_type\": \"Int\",\r\n              \"node_id\": 12,\r\n              \"src\": \"14:1:0\",\r\n              \"value\": 2\r\n            }\r\n          },\r\n          \"src\": \"3:13:0\",\r\n          \"value\": {\r\n            \"_metadata\": {},\r\n            \"ast_type\": \"Subscript\",\r\n            \"node_id\": 5,\r\n            \"slice\": {\r\n              \"_metadata\": {},\r\n              \"ast_type\": \"Index\",\r\n              \"node_id\": 8,\r\n              \"src\": \"11:1:0\",\r\n              \"value\": {\r\n                \"_metadata\": {},\r\n                \"ast_type\": \"Int\",\r\n                \"node_id\": 9,\r\n                \"src\": \"11:1:0\",\r\n                \"value\": 2\r\n              }\r\n            },\r\n            \"src\": \"3:10:0\",\r\n            \"value\": {\r\n              \"_metadata\": {},\r\n              \"ast_type\": \"Name\",\r\n              \"id\": \"uint256\",\r\n              \"node_id\": 6,\r\n              \"src\": \"3:7:0\"\r\n            }\r\n          }\r\n        },\r\n        \"ast_type\": \"AnnAssign\",\r\n        \"node_id\": 1,\r\n        \"simple\": 1,\r\n        \"src\": \"0:16:0\",\r\n        \"target\": {\r\n          \"_metadata\": {\r\n            \"type\": \"ArrayDefinition\"\r\n          },\r\n          \"ast_type\": \"Name\",\r\n          \"id\": \"x\",\r\n          \"node_id\": 2,\r\n          \"src\": \"0:1:0\"\r\n        },\r\n        \"value\": null\r\n      }\r\n```\r\n\r\nHere's the relevant part of the Solidity AST output: (Again, to keep things shorter, I'm going to remove keys that seem irrelevant.)\r\n```\r\n          {\r\n            \"constant\": false,\r\n            \"id\": 6,\r\n            \"mutability\": \"mutable\",\r\n            \"name\": \"x\",\r\n            \"nodeType\": \"VariableDeclaration\",\r\n            \"scope\": 7,\r\n            \"src\": \"15:15:0\",\r\n            \"typeDescriptions\": {\r\n              \"typeIdentifier\": \"t_array$_t_array$_t_uint256_$2_storage_$2_storage\",\r\n              \"typeString\": \"uint256[2][2]\"\r\n            },\r\n            \"typeName\": {\r\n              \"baseType\": {\r\n                \"baseType\": {\r\n                  \"id\": 1,\r\n                  \"name\": \"uint256\",\r\n                  \"nodeType\": \"ElementaryTypeName\",\r\n                  \"src\": \"15:7:0\",\r\n                  \"typeDescriptions\": {\r\n                    \"typeIdentifier\": \"t_uint256\",\r\n                    \"typeString\": \"uint256\"\r\n                  }\r\n                },\r\n                \"id\": 3,\r\n                \"length\": {\r\n                  \"hexValue\": \"32\",\r\n                  \"id\": 2,\r\n                  \"kind\": \"number\",\r\n                  \"nodeType\": \"Literal\",\r\n                  \"src\": \"23:1:0\",\r\n                  \"typeDescriptions\": {\r\n                    \"typeIdentifier\": \"t_rational_2_by_1\",\r\n                    \"typeString\": \"int_const 2\"\r\n                  },\r\n                  \"value\": \"2\"\r\n                },\r\n                \"nodeType\": \"ArrayTypeName\",\r\n                \"src\": \"15:10:0\",\r\n                \"typeDescriptions\": {\r\n                  \"typeIdentifier\": \"t_array$_t_uint256_$2_storage_ptr\",\r\n                  \"typeString\": \"uint256[2]\"\r\n                }\r\n              },\r\n              \"id\": 5,\r\n              \"length\": {\r\n                \"hexValue\": \"32\",\r\n                \"id\": 4,\r\n                \"kind\": \"number\",\r\n                \"nodeType\": \"Literal\",\r\n                \"src\": \"26:1:0\",\r\n                \"typeDescriptions\": {\r\n                  \"typeIdentifier\": \"t_rational_2_by_1\",\r\n                  \"typeString\": \"int_const 2\"\r\n                },\r\n                \"value\": \"2\"\r\n              },\r\n              \"nodeType\": \"ArrayTypeName\",\r\n              \"src\": \"15:13:0\",\r\n              \"typeDescriptions\": {\r\n                \"typeIdentifier\": \"t_array$_t_array$_t_uint256_$2_storage_$2_storage_ptr\",\r\n                \"typeString\": \"uint256[2][2]\"\r\n              }\r\n            },\r\n            \"visibility\": \"internal\"\r\n          }\r\n```\r\n\r\nSo, let's compare.  I think the Solidity tree does things several things better (although it's still not ideal; I'll get to that).\r\n\r\nFirstly, it puts type information on *everything* with a type.  The Vyper example has nonempty `_metadata` only on the `AnnAssign` (i.e., variable declaration) node itself; the other nodes have empty `_metadata`.  The Solidity example has `typeDescriptors` not only on the `VariableDeclaration` node itself, but also on both `ArrayTypeName` nodes and the `ElementaryTypeName` node.  (And the `Literal` nodes, though obviously we don't need that here.)  Is this redundant?  Yes!  But redundancy is helpful.\r\n\r\nI'm not going to show a contrasting example to illustrate this, but Solidity really does put `typeDescriptors` on everything with a type -- not just variable declarations and the types in those declarations, but every expression, too.  The `ast_output2` branch of Vyper does a lot of this too... but not consistently.  For example, as mentioned earlier, function parameters (and outputs) seem to have empty `_metadata`.\r\n\r\nSecondly, the strings used to describe the type truly do describe the complete type.  Not the `typeString`s, mind you; in this case those are good enough, but in other cases they're not.  However, the `typeIdentifier` strings really are one-to-one with the types they describe (modulo some business about some of them ending in `ptr` or not but that's a small enough wart to be handleable; I expect there's a good reason for the difference internally but we ignore it).  Their format is a bit hairy, but they're made to be machine-readable, and (as long as you don't have to deal with function types, those ones are nasty) you barely even have to write a proper parser for them.\r\n\r\nBy contrast, in the Vyper example, the only real type string we get is `ArrayDefinition`.  This tells us that the variable is an array... but not how long, nor of what.  The type information is incomplete.\r\n\r\nNow in this case, where the variable is being declared, we don't necessarily need a whole type string, because we have the AST for the declaration (although that's not great either because it's made up of `Subscript` and `Index` nodes, which are not really appropriate here; contrast with the Solidity example which is made up of `ArrayTypeName` nodes).  However, when the variable is being used, or when we're looking at a more general expression rather than a variable, we won't have that.  (In Solidity, a use of a variable would have a `referencedDeclaration` key with the node ID of where it was declared; so you could look up the declaration node and extract the type info from that.  However obviously such a mechanism can't be applied to more general expressions.)\r\n\r\nThis brings me to the one point where I think the Solidity example has a noticeable flaw -- having these string type identifiers is nice, yes, but they're still strings that need to be parsed.  So what would be really nice would be if the type information was simply in the form of a tree itself so we didn't need to do any parsing! :)  Although, having it in string form is *also* really convenient, for other reasons... we exploit the string form as part of how we handle mapping keys... so why not both? :)  Sure, technically it's redundant -- we could stringify the tree in our own way, but that risks getting things wrong, or including irrelevant keys that make is so that strings aren't truly one-to-one with types. :)  Maybe just have both, redundancy is good. :)\r\n\r\nBy the way, let me point out one more thing the Solidity example does.  Notice that the `VariableDeclaration` node has a `scope` property, which gives the node ID for that portion of the AST for which the variable is in-scope.  This is really helpful information to have!  It is something I'd like to see included as part of the more general allowing-nodes-to-refer-to-other-nodes concept.  (Which, again, likely requires node IDs to be unique per-compilation rather than per-source.)\r\n\r\nThis is getting pretty long, so I'm just going to do one more example.\r\n\r\nCase 2: Declaring public and constant state variables\r\n```vyper\r\np: public(uint256)\r\nc: constant(uint256) = 3\r\n```\r\nvs\r\n```solidity\r\ncontract C {\r\n  uint266 public p;\r\n  uint256 constant c = 3;\r\n}\r\n```\r\n\r\nHere's the relevant part of the Vyper AST output; I'm switching back to the released 0.3.0 for this, since `ast_output2` transforms the AST too much and in particular skips constants. (Again, to keep things shorter, I'm going to remove keys that seem irrelevant.)\r\n```\r\n    \"body\": [\r\n      {\r\n        \"annotation\": {\r\n          \"args\": [\r\n            {\r\n              \"ast_type\": \"Name\",\r\n              \"id\": \"uint256\",\r\n              \"node_id\": 7,\r\n              \"src\": \"10:7:0\"\r\n            }\r\n          ],\r\n          \"ast_type\": \"Call\",\r\n          \"func\": {\r\n            \"ast_type\": \"Name\",\r\n            \"id\": \"public\",\r\n            \"node_id\": 5,\r\n            \"src\": \"3:6:0\"\r\n          },\r\n          \"keyword\": null,\r\n          \"keywords\": [],\r\n          \"node_id\": 4,\r\n          \"src\": \"3:15:0\"\r\n        },\r\n        \"ast_type\": \"AnnAssign\",\r\n        \"node_id\": 1,\r\n        \"simple\": 1,\r\n        \"src\": \"0:18:0\",\r\n        \"target\": {\r\n          \"ast_type\": \"Name\",\r\n          \"id\": \"p\",\r\n          \"node_id\": 2,\r\n          \"src\": \"0:1:0\"\r\n        },\r\n        \"value\": null\r\n      },\r\n      {\r\n        \"annotation\": {\r\n          \"args\": [\r\n            {\r\n              \"ast_type\": \"Name\",\r\n              \"id\": \"uint256\",\r\n              \"node_id\": 15,\r\n              \"src\": \"31:7:0\"\r\n            }\r\n          ],\r\n          \"ast_type\": \"Call\",\r\n          \"func\": {\r\n            \"ast_type\": \"Name\",\r\n            \"id\": \"constant\",\r\n            \"node_id\": 13,\r\n            \"src\": \"22:8:0\"\r\n          },\r\n          \"keyword\": null,\r\n          \"keywords\": [],\r\n          \"node_id\": 12,\r\n          \"src\": \"22:17:0\"\r\n        },\r\n        \"ast_type\": \"AnnAssign\",\r\n        \"node_id\": 9,\r\n        \"simple\": 1,\r\n        \"src\": \"19:24:0\",\r\n        \"target\": {\r\n          \"ast_type\": \"Name\",\r\n          \"id\": \"c\",\r\n          \"node_id\": 10,\r\n          \"src\": \"19:1:0\"\r\n        },\r\n        \"value\": {\r\n          \"ast_type\": \"Int\",\r\n          \"node_id\": 17,\r\n          \"src\": \"42:1:0\",\r\n          \"value\": 3\r\n        }\r\n      }\r\n    ],\r\n```\r\n\r\nHere's the relevant part of the Solidity AST output: (Again, to keep things shorter, I'm going to remove keys that seem irrelevant.)\r\n```\r\n        \"nodes\": [\r\n          {\r\n            \"constant\": false,\r\n            \"functionSelector\": \"9ae8886a\",\r\n            \"id\": 2,\r\n            \"mutability\": \"mutable\",\r\n            \"name\": \"p\",\r\n            \"nodeType\": \"VariableDeclaration\",\r\n            \"scope\": 6,\r\n            \"src\": \"15:16:0\",\r\n            \"typeDescriptions\": {\r\n              \"typeIdentifier\": \"t_uint256\",\r\n              \"typeString\": \"uint256\"\r\n            },\r\n            \"typeName\": {\r\n              \"id\": 1,\r\n              \"name\": \"uint256\",\r\n              \"nodeType\": \"ElementaryTypeName\",\r\n              \"src\": \"15:7:0\",\r\n              \"typeDescriptions\": {\r\n                \"typeIdentifier\": \"t_uint256\",\r\n                \"typeString\": \"uint256\"\r\n              }\r\n            },\r\n            \"visibility\": \"public\"\r\n          },\r\n          {\r\n            \"constant\": true,\r\n            \"id\": 5,\r\n            \"mutability\": \"constant\",\r\n            \"name\": \"c\",\r\n            \"nodeType\": \"VariableDeclaration\",\r\n            \"scope\": 6,\r\n            \"src\": \"35:22:0\",\r\n            \"typeDescriptions\": {\r\n              \"typeIdentifier\": \"t_uint256\",\r\n              \"typeString\": \"uint256\"\r\n            },\r\n            \"typeName\": {\r\n              \"id\": 3,\r\n              \"name\": \"uint256\",\r\n              \"nodeType\": \"ElementaryTypeName\",\r\n              \"src\": \"35:7:0\",\r\n              \"typeDescriptions\": {\r\n                \"typeIdentifier\": \"t_uint256\",\r\n                \"typeString\": \"uint256\"\r\n              }\r\n            },\r\n            \"value\": {\r\n              \"hexValue\": \"33\",\r\n              \"id\": 4,\r\n              \"kind\": \"number\",\r\n              \"nodeType\": \"Literal\",\r\n              \"src\": \"56:1:0\",\r\n              \"typeDescriptions\": {\r\n                \"typeIdentifier\": \"t_rational_3_by_1\",\r\n                \"typeString\": \"int_const 3\"\r\n              },\r\n              \"value\": \"3\"\r\n            },\r\n            \"visibility\": \"internal\"\r\n          }\r\n        ],\r\n```\r\n\r\nSo, what I want to point out here is how consistent the Solidity AST is, and how semantically meaningful the nodes are.  (I mean, in this case; it's not always so nice as this, but it's generally pretty decent about this.)  For each `VariableDeclaration` node, the AST node of the type is *always* under `typeName`.  The `public` and `constant` modifiers are reflected in *fields* in the `VariableDeclaration` nodes; `public` causes `visibility` to be set to `\"public\"` rather than `\"internal\"`, and `constant` causes `mutability` to be set to `\"constant\"` rather than `\"mutable\"`.  (There's also the old `constant` flag that's still present, but, uh, I want to stick to the current main way it outputs information.)\r\n\r\nBy contrast, if we look at the Vyper example, we see that for an `AnnAssign`, the `annotation` property does *not* always contain the AST for the variable's type.  In our first example it did, but here it instead contains a `Call` AST node (another meaningless node type, that reflects only the syntax!), and *that* tells us that the variable is public or constant -- there's no fields for this on the variable declarations itself -- and then the AST node for the actual type is under the `args[0]` of that call.\r\n\r\nSo, I'm hoping those examples make concrete enough what I'm talking about?  Again, I can't design a format for you, because that would require both making arbitrary choices that it's not my place to make, and probably also a good knowledge of Vyper internals that I certainly don't have.  But I hope these examples demonstrate concretely where the Vyper AST falls down, how Solidity handles these situations better, and where I think the Solidity AST could itself be improved.\r\n\r\nI think these are the highlights in terms of features, although it's possible there's something I've still forgotten.  I realize not all of this can be adopted into the current AST format.  But I'm hoping they can all make it into a new one that is redesigned around better principles -- one that works to be more semantically meaningful rather than matching the syntax one-for-one.  I hope this is helpful.",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/950063937/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/950138738",
    "html_url": "https://github.com/vyperlang/vyper/issues/2276#issuecomment-950138738",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/2276",
    "id": 950138738,
    "node_id": "IC_kwDOBGDvrM44ofdy",
    "user": {
      "login": "charles-cooper",
      "id": 3867501,
      "node_id": "MDQ6VXNlcjM4Njc1MDE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3867501?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/charles-cooper",
      "html_url": "https://github.com/charles-cooper",
      "followers_url": "https://api.github.com/users/charles-cooper/followers",
      "following_url": "https://api.github.com/users/charles-cooper/following{/other_user}",
      "gists_url": "https://api.github.com/users/charles-cooper/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/charles-cooper/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/charles-cooper/subscriptions",
      "organizations_url": "https://api.github.com/users/charles-cooper/orgs",
      "repos_url": "https://api.github.com/users/charles-cooper/repos",
      "events_url": "https://api.github.com/users/charles-cooper/events{/privacy}",
      "received_events_url": "https://api.github.com/users/charles-cooper/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-10-23T11:31:48Z",
    "updated_at": "2021-10-23T11:31:48Z",
    "author_association": "COLLABORATOR",
    "body": "Great, we'll look these over. Thanks!",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/950138738/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/950189935",
    "html_url": "https://github.com/vyperlang/vyper/issues/2276#issuecomment-950189935",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/2276",
    "id": 950189935,
    "node_id": "IC_kwDOBGDvrM44or9v",
    "user": {
      "login": "haltman-at",
      "id": 35589221,
      "node_id": "MDQ6VXNlcjM1NTg5MjIx",
      "avatar_url": "https://avatars.githubusercontent.com/u/35589221?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/haltman-at",
      "html_url": "https://github.com/haltman-at",
      "followers_url": "https://api.github.com/users/haltman-at/followers",
      "following_url": "https://api.github.com/users/haltman-at/following{/other_user}",
      "gists_url": "https://api.github.com/users/haltman-at/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/haltman-at/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/haltman-at/subscriptions",
      "organizations_url": "https://api.github.com/users/haltman-at/orgs",
      "repos_url": "https://api.github.com/users/haltman-at/repos",
      "events_url": "https://api.github.com/users/haltman-at/events{/privacy}",
      "received_events_url": "https://api.github.com/users/haltman-at/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-10-23T18:01:14Z",
    "updated_at": "2021-10-23T18:01:14Z",
    "author_association": "NONE",
    "body": "OK, I'm glad that's finally concrete enough!  I'll probably come back later and add an example with structs too because I think I could probably also stand to illustrate better what I've said about those.",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/950189935/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/951389486",
    "html_url": "https://github.com/vyperlang/vyper/issues/2276#issuecomment-951389486",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/2276",
    "id": 951389486,
    "node_id": "IC_kwDOBGDvrM44tQ0u",
    "user": {
      "login": "haltman-at",
      "id": 35589221,
      "node_id": "MDQ6VXNlcjM1NTg5MjIx",
      "avatar_url": "https://avatars.githubusercontent.com/u/35589221?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/haltman-at",
      "html_url": "https://github.com/haltman-at",
      "followers_url": "https://api.github.com/users/haltman-at/followers",
      "following_url": "https://api.github.com/users/haltman-at/following{/other_user}",
      "gists_url": "https://api.github.com/users/haltman-at/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/haltman-at/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/haltman-at/subscriptions",
      "organizations_url": "https://api.github.com/users/haltman-at/orgs",
      "repos_url": "https://api.github.com/users/haltman-at/repos",
      "events_url": "https://api.github.com/users/haltman-at/events{/privacy}",
      "received_events_url": "https://api.github.com/users/haltman-at/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-10-25T22:42:55Z",
    "updated_at": "2021-10-25T22:43:13Z",
    "author_association": "NONE",
    "body": "OK, so, the structs example I was talking about.\r\n\r\nWe'll look at the following Vyper code:\r\n```vyper\r\nstruct S:\r\n    x: uint256\r\ns: S\r\n```\r\nand the following Solidity code:\r\n```solidity\r\ncontract C {\r\n  struct S {\r\n    uint256 x;\r\n  }\r\n  S s;\r\n}\r\n```\r\n\r\nSo, again, let's look at the relevant parts of the ASTs.\r\n\r\nFirst Vyper, with irrelevant keys removed as usual.  I switched back to the `ast_output2` branch for this to get additional type information.\r\n```\r\n    \"body\": [\r\n      {\r\n        \"_metadata\": {},\r\n        \"ast_type\": \"StructDef\",\r\n        \"body\": [\r\n          {\r\n            \"_metadata\": {},\r\n            \"annotation\": {\r\n              \"_metadata\": {},\r\n              \"ast_type\": \"Name\",\r\n              \"id\": \"uint256\",\r\n              \"node_id\": 5,\r\n              \"src\": \"17:7:0\"\r\n            },\r\n            \"ast_type\": \"AnnAssign\",\r\n            \"node_id\": 2,\r\n            \"simple\": 1,\r\n            \"src\": \"14:10:0\",\r\n            \"target\": {\r\n              \"_metadata\": {},\r\n              \"ast_type\": \"Name\",\r\n              \"id\": \"x\",\r\n              \"node_id\": 3,\r\n              \"src\": \"14:1:0\"\r\n            },\r\n            \"value\": null\r\n          }\r\n        ],\r\n        \"name\": \"S\",\r\n        \"node_id\": 1,\r\n        \"src\": \"0:24:0\"\r\n      },\r\n      {\r\n        \"_metadata\": {\r\n          \"type\": \"StructDefinition\"\r\n        },\r\n        \"annotation\": {\r\n          \"_metadata\": {},\r\n          \"ast_type\": \"Name\",\r\n          \"id\": \"S\",\r\n          \"node_id\": 10,\r\n          \"src\": \"28:1:0\"\r\n        },\r\n        \"ast_type\": \"AnnAssign\",\r\n        \"node_id\": 7,\r\n        \"simple\": 1,\r\n        \"src\": \"25:4:0\",\r\n        \"target\": {\r\n          \"_metadata\": {\r\n            \"type\": \"StructDefinition\"\r\n          },\r\n          \"ast_type\": \"Name\",\r\n          \"id\": \"s\",\r\n          \"node_id\": 8,\r\n          \"src\": \"25:1:0\"\r\n        },\r\n        \"value\": null\r\n      }\r\n    ],\r\n```\r\n\r\nVersus the Solidity, again with the usual caveats:\r\n```\r\n        \"nodes\": [\r\n          {\r\n            \"canonicalName\": \"C.S\",\r\n            \"id\": 3,\r\n            \"members\": [\r\n              {\r\n                \"constant\": false,\r\n                \"id\": 2,\r\n                \"mutability\": \"mutable\",\r\n                \"name\": \"x\",\r\n                \"nodeType\": \"VariableDeclaration\",\r\n                \"scope\": 3,\r\n                \"src\": \"30:9:0\",\r\n                \"typeDescriptions\": {\r\n                  \"typeIdentifier\": \"t_uint256\",\r\n                  \"typeString\": \"uint256\"\r\n                },\r\n                \"typeName\": {\r\n                  \"id\": 1,\r\n                  \"name\": \"uint256\",\r\n                  \"nodeType\": \"ElementaryTypeName\",\r\n                  \"src\": \"30:7:0\",\r\n                  \"typeDescriptions\": {\r\n                    \"typeIdentifier\": \"t_uint256\",\r\n                    \"typeString\": \"uint256\"\r\n                  }\r\n                },\r\n                \"visibility\": \"internal\"\r\n              }\r\n            ],\r\n            \"name\": \"S\",\r\n            \"nodeType\": \"StructDefinition\",\r\n            \"scope\": 7,\r\n            \"src\": \"15:29:0\",\r\n            \"visibility\": \"public\"\r\n          },\r\n          {\r\n            \"constant\": false,\r\n            \"id\": 6,\r\n            \"mutability\": \"mutable\",\r\n            \"name\": \"s\",\r\n            \"nodeType\": \"VariableDeclaration\",\r\n            \"scope\": 7,\r\n            \"src\": \"47:3:0\",\r\n            \"typeDescriptions\": {\r\n              \"typeIdentifier\": \"t_struct$_S_$3_storage\",\r\n              \"typeString\": \"struct C.S\"\r\n            },\r\n            \"typeName\": {\r\n              \"id\": 5,\r\n              \"nodeType\": \"UserDefinedTypeName\",\r\n              \"pathNode\": {\r\n                \"id\": 4,\r\n                \"name\": \"S\",\r\n                \"nodeType\": \"IdentifierPath\",\r\n                \"referencedDeclaration\": 3,\r\n                \"src\": \"47:1:0\"\r\n              },\r\n              \"referencedDeclaration\": 3,\r\n              \"src\": \"47:1:0\",\r\n              \"typeDescriptions\": {\r\n                \"typeIdentifier\": \"t_struct$_S_$3_storage_ptr\",\r\n                \"typeString\": \"struct C.S\"\r\n              }\r\n            },\r\n            \"visibility\": \"internal\"\r\n          }\r\n        ],\r\n```\r\n\r\nNow, some of the features here I've already commented on -- the presence of type information on *everything*; the constant use of `referencedDeclaration` fields to refer back to other nodes where things were declared; etc.  (Although actually, I believe I previously *commented* on that, but hand't *illustrated* it.  So here's an actual example -- when the struct `S` is referred to, there's a reference back to where it was declared!)\r\n\r\nBut what I want to focus on here is the `typeIdentifier` for the variable `s`, of type `S`.  In my earlier comment, I used as an example the type identifier for the type `uint256[2][2]`, which was `\"t_array$_t_array$_t_uint256_$2_storage_$2_storage\"`.  I didn't go on about it in detail, but you can see its recursive structure -- how it indicates that it's an array, of length 2, in storage; and that what it's an array of is an array, of length 2, in storage; and what *that* is an array of is `uint256`.\r\n\r\n(Arguably, the way that Solidity includes locations (memory vs storage vs calldata) in type identifiers for reference types is also something of a wart; we have to do some massaging of that in certain cases.  But then again, in other cases it's absolutely necessary, so I guess it's actually a good thing on the whole.  But then again, if they had done all this as a tree instead of a string, then they could have left it out of the string, perhaps...?)\r\n\r\nBut what about for the variable `s`?  Its type identifier is `\"t_struct$_S_$3_storage\"`.  Notice that number 3 in there... what is that?\r\n\r\nIt's the struct's ID!  Type identifiers are one-to-one with types (again, modulo the location and pointer warts I've mentioned), but there could be multiple structs named `S`; there could even be multiple structs named `C.S` because there could be multiple contracts named `C`. So, each user-defined type (structs, enums, contracts, whatever) are all given an ID, which is unambiguous, and goes in the type identifier.  So it's possible to disambiguate between different structs (or enums or whatever) with the same name.\r\n\r\nThe *way* it gives them an ID is, you may notice, to simply use the ID of the delcaring node. :)  But the important part is that it gets *some* ID, that is unique and unambiguous, and that lets us find the declaring node somehow.\r\n\r\nOK, I think that should be enough examples now, unless you really think more are necessary!",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/951389486/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/951395099",
    "html_url": "https://github.com/vyperlang/vyper/issues/2276#issuecomment-951395099",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/2276",
    "id": 951395099,
    "node_id": "IC_kwDOBGDvrM44tSMb",
    "user": {
      "login": "sambacha",
      "id": 32783916,
      "node_id": "MDQ6VXNlcjMyNzgzOTE2",
      "avatar_url": "https://avatars.githubusercontent.com/u/32783916?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sambacha",
      "html_url": "https://github.com/sambacha",
      "followers_url": "https://api.github.com/users/sambacha/followers",
      "following_url": "https://api.github.com/users/sambacha/following{/other_user}",
      "gists_url": "https://api.github.com/users/sambacha/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sambacha/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sambacha/subscriptions",
      "organizations_url": "https://api.github.com/users/sambacha/orgs",
      "repos_url": "https://api.github.com/users/sambacha/repos",
      "events_url": "https://api.github.com/users/sambacha/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sambacha/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-10-25T22:54:47Z",
    "updated_at": "2021-10-25T22:54:47Z",
    "author_association": "CONTRIBUTOR",
    "body": "just input code here https://sambacha.github.io/solidity-parser-explorer/\r\nand click on portions of the generated AST it will illustrate what @haltman-at is describing.\r\n \r\nso like xPath for source code AST is what you want right @haltman-at ?",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/951395099/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/951478045",
    "html_url": "https://github.com/vyperlang/vyper/issues/2276#issuecomment-951478045",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/2276",
    "id": 951478045,
    "node_id": "IC_kwDOBGDvrM44tmcd",
    "user": {
      "login": "haltman-at",
      "id": 35589221,
      "node_id": "MDQ6VXNlcjM1NTg5MjIx",
      "avatar_url": "https://avatars.githubusercontent.com/u/35589221?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/haltman-at",
      "html_url": "https://github.com/haltman-at",
      "followers_url": "https://api.github.com/users/haltman-at/followers",
      "following_url": "https://api.github.com/users/haltman-at/following{/other_user}",
      "gists_url": "https://api.github.com/users/haltman-at/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/haltman-at/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/haltman-at/subscriptions",
      "organizations_url": "https://api.github.com/users/haltman-at/orgs",
      "repos_url": "https://api.github.com/users/haltman-at/repos",
      "events_url": "https://api.github.com/users/haltman-at/events{/privacy}",
      "received_events_url": "https://api.github.com/users/haltman-at/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-10-26T01:43:49Z",
    "updated_at": "2021-10-26T01:43:49Z",
    "author_association": "NONE",
    "body": "@sambacha, I don't understand your comment.  What I'm asking for has nothing to do with syntax used to access the AST, it has to do with the format of the actual AST itself.\r\n\r\nI don't think that I would recommend that Solidity parser explorer that you link for illustrating what I'm talking about; it seems to lack a lot of the information that's actually in the full Solidity AST.  (It also oddly seems to include other things that Solidity doesn't put in its ASTs, such as comments...)",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/951478045/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/957824476",
    "html_url": "https://github.com/vyperlang/vyper/issues/2276#issuecomment-957824476",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/2276",
    "id": 957824476,
    "node_id": "IC_kwDOBGDvrM45Fz3c",
    "user": {
      "login": "charles-cooper",
      "id": 3867501,
      "node_id": "MDQ6VXNlcjM4Njc1MDE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3867501?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/charles-cooper",
      "html_url": "https://github.com/charles-cooper",
      "followers_url": "https://api.github.com/users/charles-cooper/followers",
      "following_url": "https://api.github.com/users/charles-cooper/following{/other_user}",
      "gists_url": "https://api.github.com/users/charles-cooper/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/charles-cooper/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/charles-cooper/subscriptions",
      "organizations_url": "https://api.github.com/users/charles-cooper/orgs",
      "repos_url": "https://api.github.com/users/charles-cooper/repos",
      "events_url": "https://api.github.com/users/charles-cooper/events{/privacy}",
      "received_events_url": "https://api.github.com/users/charles-cooper/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-11-02T15:28:24Z",
    "updated_at": "2021-11-02T15:28:24Z",
    "author_association": "COLLABORATOR",
    "body": "@haltman-at would it help if we exported something like a \"memory layout\" which maps variables to their locations in memory?\r\n\r\nAlso, I think it might be more efficient to chat about this offline, what is the best way to do that? Are you able to join our discord?",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/957824476/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/957912934",
    "html_url": "https://github.com/vyperlang/vyper/issues/2276#issuecomment-957912934",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/2276",
    "id": 957912934,
    "node_id": "IC_kwDOBGDvrM45GJdm",
    "user": {
      "login": "fubuloubu",
      "id": 3859395,
      "node_id": "MDQ6VXNlcjM4NTkzOTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3859395?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fubuloubu",
      "html_url": "https://github.com/fubuloubu",
      "followers_url": "https://api.github.com/users/fubuloubu/followers",
      "following_url": "https://api.github.com/users/fubuloubu/following{/other_user}",
      "gists_url": "https://api.github.com/users/fubuloubu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fubuloubu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fubuloubu/subscriptions",
      "organizations_url": "https://api.github.com/users/fubuloubu/orgs",
      "repos_url": "https://api.github.com/users/fubuloubu/repos",
      "events_url": "https://api.github.com/users/fubuloubu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fubuloubu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-11-02T16:21:32Z",
    "updated_at": "2021-11-02T16:21:32Z",
    "author_association": "MEMBER",
    "body": "> @haltman-at would it help if we exported something like a \"memory layout\" which maps variables to their locations in memory?\r\n\r\nKeep in mind that unlike Solidity, all of our user-facing local variables are in memory and not on the stack",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/957912934/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/957914223",
    "html_url": "https://github.com/vyperlang/vyper/issues/2276#issuecomment-957914223",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/2276",
    "id": 957914223,
    "node_id": "IC_kwDOBGDvrM45GJxv",
    "user": {
      "login": "sambacha",
      "id": 32783916,
      "node_id": "MDQ6VXNlcjMyNzgzOTE2",
      "avatar_url": "https://avatars.githubusercontent.com/u/32783916?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sambacha",
      "html_url": "https://github.com/sambacha",
      "followers_url": "https://api.github.com/users/sambacha/followers",
      "following_url": "https://api.github.com/users/sambacha/following{/other_user}",
      "gists_url": "https://api.github.com/users/sambacha/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sambacha/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sambacha/subscriptions",
      "organizations_url": "https://api.github.com/users/sambacha/orgs",
      "repos_url": "https://api.github.com/users/sambacha/repos",
      "events_url": "https://api.github.com/users/sambacha/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sambacha/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-11-02T16:22:27Z",
    "updated_at": "2021-11-02T16:27:05Z",
    "author_association": "CONTRIBUTOR",
    "body": "> > @haltman-at would it help if we exported something like a \"memory layout\" which maps variables to their locations in memory?\r\n> >\r\n> Keep in mind that unlike Solidity, all of our user-facing local variables are in memory and not on the stack\r\n\r\nYes it would",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/957914223/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/958137750",
    "html_url": "https://github.com/vyperlang/vyper/issues/2276#issuecomment-958137750",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/2276",
    "id": 958137750,
    "node_id": "IC_kwDOBGDvrM45HAWW",
    "user": {
      "login": "haltman-at",
      "id": 35589221,
      "node_id": "MDQ6VXNlcjM1NTg5MjIx",
      "avatar_url": "https://avatars.githubusercontent.com/u/35589221?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/haltman-at",
      "html_url": "https://github.com/haltman-at",
      "followers_url": "https://api.github.com/users/haltman-at/followers",
      "following_url": "https://api.github.com/users/haltman-at/following{/other_user}",
      "gists_url": "https://api.github.com/users/haltman-at/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/haltman-at/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/haltman-at/subscriptions",
      "organizations_url": "https://api.github.com/users/haltman-at/orgs",
      "repos_url": "https://api.github.com/users/haltman-at/repos",
      "events_url": "https://api.github.com/users/haltman-at/events{/privacy}",
      "received_events_url": "https://api.github.com/users/haltman-at/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-11-02T20:21:53Z",
    "updated_at": "2021-11-02T20:25:40Z",
    "author_association": "NONE",
    "body": "@charles-cooper Well, that depends on what you mean by \"would it help\".\r\n\r\nIf you mean, \"would the extra information potentially be useful\", sure!  More information is always useful.\r\n\r\nIf you mean, \"would it resolve the essential problems\", no.  I'm pretty sure we can figure out where in memory variables are stored without needing it put explicitly in the AST.  Obviously it's different from in Solidity, what with them going in memory rather than the stack, but I've looked into this and I think only a slight tweak on our Solidity-handling mechanism is necessary. The key remaining problem is the type information, not the location information.  If I thought we truly needed memory location information in the AST, I would have made a point of mentioning it. :)\r\n\r\nThat said, as mentioned, more information is always useful, and would certainly be appreciated!  Every piece of information we can get from the compiler, and which will presumably be maintained in future compiler versions, is one less piece of information we have to figure out ourselves and potentially maintain if they change in future compiler versions.\r\n\r\n(Although some variables, from what I've seen, live in calldata, right, rather than memory?  And then of course there's state variables in storage, and (sort of) constants...)",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/958137750/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/958138538",
    "html_url": "https://github.com/vyperlang/vyper/issues/2276#issuecomment-958138538",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/2276",
    "id": 958138538,
    "node_id": "IC_kwDOBGDvrM45HAiq",
    "user": {
      "login": "haltman-at",
      "id": 35589221,
      "node_id": "MDQ6VXNlcjM1NTg5MjIx",
      "avatar_url": "https://avatars.githubusercontent.com/u/35589221?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/haltman-at",
      "html_url": "https://github.com/haltman-at",
      "followers_url": "https://api.github.com/users/haltman-at/followers",
      "following_url": "https://api.github.com/users/haltman-at/following{/other_user}",
      "gists_url": "https://api.github.com/users/haltman-at/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/haltman-at/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/haltman-at/subscriptions",
      "organizations_url": "https://api.github.com/users/haltman-at/orgs",
      "repos_url": "https://api.github.com/users/haltman-at/repos",
      "events_url": "https://api.github.com/users/haltman-at/events{/privacy}",
      "received_events_url": "https://api.github.com/users/haltman-at/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-11-02T20:23:06Z",
    "updated_at": "2021-11-02T20:23:06Z",
    "author_association": "NONE",
    "body": "> Also, I think it might be more efficient to chat about this offline, what is the best way to do that? Are you able to join our discord?\r\n\r\nWell, you can always email me at harry@trufflesuite.com, but I could potentially also join your Discord if you give me the information?",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/958138538/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/958156984",
    "html_url": "https://github.com/vyperlang/vyper/issues/2276#issuecomment-958156984",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/2276",
    "id": 958156984,
    "node_id": "IC_kwDOBGDvrM45HFC4",
    "user": {
      "login": "fubuloubu",
      "id": 3859395,
      "node_id": "MDQ6VXNlcjM4NTkzOTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3859395?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fubuloubu",
      "html_url": "https://github.com/fubuloubu",
      "followers_url": "https://api.github.com/users/fubuloubu/followers",
      "following_url": "https://api.github.com/users/fubuloubu/following{/other_user}",
      "gists_url": "https://api.github.com/users/fubuloubu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fubuloubu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fubuloubu/subscriptions",
      "organizations_url": "https://api.github.com/users/fubuloubu/orgs",
      "repos_url": "https://api.github.com/users/fubuloubu/repos",
      "events_url": "https://api.github.com/users/fubuloubu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fubuloubu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-11-02T20:51:50Z",
    "updated_at": "2021-11-02T20:51:50Z",
    "author_association": "MEMBER",
    "body": "> > Also, I think it might be more efficient to chat about this offline, what is the best way to do that? Are you able to join our discord?\r\n> \r\n> Well, you can always email me at [harry@trufflesuite.com](mailto:harry@trufflesuite.com), but I could potentially also join your Discord if you give me the information?\r\n\r\nPlease join the Ethereum Python Devs discord (which has a `#vyper` channel) via this link:\r\nhttps://discord.gg/VXjZUnSj",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/958156984/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
