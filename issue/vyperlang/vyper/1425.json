{
  "url": "https://api.github.com/repos/vyperlang/vyper/issues/1425",
  "repository_url": "https://api.github.com/repos/vyperlang/vyper",
  "labels_url": "https://api.github.com/repos/vyperlang/vyper/issues/1425/labels{/name}",
  "comments_url": "https://api.github.com/repos/vyperlang/vyper/issues/1425/comments",
  "events_url": "https://api.github.com/repos/vyperlang/vyper/issues/1425/events",
  "html_url": "https://github.com/vyperlang/vyper/issues/1425",
  "id": 441877090,
  "node_id": "MDU6SXNzdWU0NDE4NzcwOTA=",
  "number": 1425,
  "title": "Vyper not capable of performing an array copy to a log",
  "user": {
    "login": "dangerousfood",
    "id": 4099038,
    "node_id": "MDQ6VXNlcjQwOTkwMzg=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4099038?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/dangerousfood",
    "html_url": "https://github.com/dangerousfood",
    "followers_url": "https://api.github.com/users/dangerousfood/followers",
    "following_url": "https://api.github.com/users/dangerousfood/following{/other_user}",
    "gists_url": "https://api.github.com/users/dangerousfood/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/dangerousfood/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/dangerousfood/subscriptions",
    "organizations_url": "https://api.github.com/users/dangerousfood/orgs",
    "repos_url": "https://api.github.com/users/dangerousfood/repos",
    "events_url": "https://api.github.com/users/dangerousfood/events{/privacy}",
    "received_events_url": "https://api.github.com/users/dangerousfood/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 684449300,
      "node_id": "MDU6TGFiZWw2ODQ0NDkzMDA=",
      "url": "https://api.github.com/repos/vyperlang/vyper/labels/Easy%20Pickings",
      "name": "Easy Pickings",
      "color": "0e8a16",
      "default": false,
      "description": "Used to denote issues that should be easy to implement"
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 2,
  "created_at": "2019-05-08T18:46:27Z",
  "updated_at": "2021-10-06T07:20:04Z",
  "closed_at": "2021-10-06T07:20:04Z",
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "In the following code:\r\n```\r\nMIN_DEPOSIT_AMOUNT: constant(uint256) = 1000000000  # Gwei\r\nMAX_DEPOSIT_AMOUNT: constant(uint256) = 32000000000  # Gwei\r\nCHAIN_START_FULL_DEPOSIT_THRESHOLD: constant(uint256) = 65536  # 2**16\r\nDEPOSIT_CONTRACT_TREE_DEPTH: constant(uint256) = 32\r\nSECONDS_PER_DAY: constant(uint256) = 86400\r\nMAX_64_BIT_VALUE: constant(uint256) = 18446744073709551615  # 2**64 - 1\r\n\r\nDeposit: event({data: bytes[184], merkle_tree_index: bytes[8]})\r\nMerkle: event({_branch: bytes32[DEPOSIT_CONTRACT_TREE_DEPTH], _zerohashes: bytes32[DEPOSIT_CONTRACT_TREE_DEPTH], _subindex: bytes[8], _deposit_root: bytes32})\r\nEth2Genesis: event({deposit_root: bytes32, deposit_count: int128, time: bytes[8]})\r\n\r\nzerohashes: bytes32[DEPOSIT_CONTRACT_TREE_DEPTH]\r\nbranch: bytes32[DEPOSIT_CONTRACT_TREE_DEPTH]\r\ndeposit_count: uint256\r\nfull_deposit_count: uint256\r\nchainStarted: public(bool)\r\n\r\n\r\n@public\r\ndef __init__():\r\n    for i in range(DEPOSIT_CONTRACT_TREE_DEPTH - 1):\r\n        self.zerohashes[i+1] = sha256(concat(self.zerohashes[i], self.zerohashes[i]))\r\n        self.branch[i+1] = self.zerohashes[i + 1]\r\n\r\n\r\n@public\r\n@constant\r\ndef to_little_endian_64(value: uint256) -> bytes[8]:\r\n    assert value <= MAX_64_BIT_VALUE\r\n\r\n    # array access for bytes[] not currently supported in vyper so\r\n    # reversing bytes using bitwise uint256 manipulations\r\n    y: uint256 = 0\r\n    x: uint256 = value\r\n    for i in range(8):\r\n        y = shift(y, 8)\r\n        y = y + bitwise_and(x, 255)\r\n        x = shift(x, -8)\r\n\r\n    return slice(convert(y, bytes32), start=24, len=8)\r\n\r\n\r\n@public\r\n@constant\r\ndef from_little_endian_64(value: bytes[8]) -> uint256:\r\n    y: uint256 = 0\r\n    x: uint256 = convert(value, uint256)\r\n    for i in range(8):\r\n        y = y + shift(bitwise_and(x, 255), 8 * (7-i))\r\n        x = shift(x, -8)\r\n\r\n    return y\r\n\r\n\r\n@public\r\n@constant\r\ndef get_deposit_root() -> bytes32:\r\n    root: bytes32 = 0x0000000000000000000000000000000000000000000000000000000000000000\r\n    size: uint256 = self.deposit_count\r\n    for h in range(DEPOSIT_CONTRACT_TREE_DEPTH):\r\n        if bitwise_and(size, 1) == 1:\r\n            root = sha256(concat(self.branch[h], root))\r\n        else:\r\n            root = sha256(concat(root, self.zerohashes[h]))\r\n        size /= 2\r\n    return root\r\n\r\n@private\r\n@constant\r\ndef get_deposit_count() -> bytes[8]:\r\n    return self.to_little_endian_64(self.deposit_count)\r\n\r\n@payable\r\n@public\r\n# `deposit_data` includes:\r\n# 48 bytes `pubkey`, 32 bytes `withdrawal_credentials`, 8 bytes `amount`\r\n# and 96 bytes `proof_of_possession`.\r\ndef deposit(deposit_data: bytes[184]):\r\n    deposit_amount: uint256 = self.from_little_endian_64(slice(deposit_data, start=80, len=8))\r\n\r\n    assert deposit_amount == msg.value / as_wei_value(1, \"gwei\")\r\n    assert deposit_amount >= MIN_DEPOSIT_AMOUNT\r\n    assert deposit_amount <= MAX_DEPOSIT_AMOUNT\r\n\r\n    index: uint256 = self.deposit_count\r\n\r\n    # add deposit to merkle tree\r\n    i: int128 = 0\r\n    power_of_two: uint256 = 2\r\n    for _ in range(DEPOSIT_CONTRACT_TREE_DEPTH):\r\n        if (index+1) % power_of_two != 0:\r\n            break\r\n        i += 1\r\n        power_of_two *= 2\r\n\r\n    value: bytes32 = sha256(deposit_data)\r\n    for j in range(DEPOSIT_CONTRACT_TREE_DEPTH):\r\n        if j < i:\r\n            value = sha256(concat(self.branch[j], value))\r\n        else:\r\n            break\r\n    self.branch[i] = value\r\n    \r\n    self.deposit_count += 1\r\n    new_deposit_root: bytes32 = self.get_deposit_root()\r\n    log.Deposit(deposit_data, self.to_little_endian_64(index))\r\n    log.Merkle(self.branch, self.zerohashes, i, new_deposit_root)\r\n\r\n    if deposit_amount == MAX_DEPOSIT_AMOUNT:\r\n        self.full_deposit_count += 1\r\n        if self.full_deposit_count == CHAIN_START_FULL_DEPOSIT_THRESHOLD:\r\n            timestamp_day_boundary: uint256 = (\r\n                as_unitless_number(block.timestamp) -\r\n                as_unitless_number(block.timestamp) % SECONDS_PER_DAY +\r\n                2 * SECONDS_PER_DAY\r\n            )\r\n            log.Eth2Genesis(new_deposit_root,\r\n                            self.to_little_endian_64(self.deposit_count),\r\n                            self.to_little_endian_64(timestamp_day_boundary))\r\n            self.chainStarted = True\r\n```\r\n\r\nVyper highlights parameters 0 and 1 in line 117 `log.Merkle(self.branch, self.zerohashes, i, new_deposit_root)` with the following error message:\r\n`(vyper-env) dangerousfood@Josephs-MacBook-Pro contracts $ vyper validator_registration.v.py\r\nError compiling:  validator_registration.v.py\r\nvyper.exceptions.TypeMismatchException: line 107:4 Can only set a byte array to another byte array`\r\n\r\nThis in correct behavior because it is a bytes32 array copy of length 32 to a byte32 array of length 32.\r\n\r\nVersion:\r\n`(vyper-env) dangerousfood@Josephs-MacBook-Pro contracts $ vyper --version\r\n0.1.0b9`\r\n",
  "closed_by": {
    "login": "charles-cooper",
    "id": 3867501,
    "node_id": "MDQ6VXNlcjM4Njc1MDE=",
    "avatar_url": "https://avatars.githubusercontent.com/u/3867501?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/charles-cooper",
    "html_url": "https://github.com/charles-cooper",
    "followers_url": "https://api.github.com/users/charles-cooper/followers",
    "following_url": "https://api.github.com/users/charles-cooper/following{/other_user}",
    "gists_url": "https://api.github.com/users/charles-cooper/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/charles-cooper/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/charles-cooper/subscriptions",
    "organizations_url": "https://api.github.com/users/charles-cooper/orgs",
    "repos_url": "https://api.github.com/users/charles-cooper/repos",
    "events_url": "https://api.github.com/users/charles-cooper/events{/privacy}",
    "received_events_url": "https://api.github.com/users/charles-cooper/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/1425/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/vyperlang/vyper/issues/1425/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/490715766",
    "html_url": "https://github.com/vyperlang/vyper/issues/1425#issuecomment-490715766",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/1425",
    "id": 490715766,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ5MDcxNTc2Ng==",
    "user": {
      "login": "fubuloubu",
      "id": 3859395,
      "node_id": "MDQ6VXNlcjM4NTkzOTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3859395?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fubuloubu",
      "html_url": "https://github.com/fubuloubu",
      "followers_url": "https://api.github.com/users/fubuloubu/followers",
      "following_url": "https://api.github.com/users/fubuloubu/following{/other_user}",
      "gists_url": "https://api.github.com/users/fubuloubu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fubuloubu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fubuloubu/subscriptions",
      "organizations_url": "https://api.github.com/users/fubuloubu/orgs",
      "repos_url": "https://api.github.com/users/fubuloubu/repos",
      "events_url": "https://api.github.com/users/fubuloubu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fubuloubu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-05-09T02:10:23Z",
    "updated_at": "2019-05-09T02:11:17Z",
    "author_association": "MEMBER",
    "body": "You are setting the log argument `_subindex: bytes[8]` in `log.Merkle()` with `i: int128`\r\n\r\nPerhaps the error message could be improved by naming the variable with the mismatched type?",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/490715766/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/935637403",
    "html_url": "https://github.com/vyperlang/vyper/issues/1425#issuecomment-935637403",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/1425",
    "id": 935637403,
    "node_id": "IC_kwDOBGDvrM43xLGb",
    "user": {
      "login": "charles-cooper",
      "id": 3867501,
      "node_id": "MDQ6VXNlcjM4Njc1MDE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3867501?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/charles-cooper",
      "html_url": "https://github.com/charles-cooper",
      "followers_url": "https://api.github.com/users/charles-cooper/followers",
      "following_url": "https://api.github.com/users/charles-cooper/following{/other_user}",
      "gists_url": "https://api.github.com/users/charles-cooper/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/charles-cooper/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/charles-cooper/subscriptions",
      "organizations_url": "https://api.github.com/users/charles-cooper/orgs",
      "repos_url": "https://api.github.com/users/charles-cooper/repos",
      "events_url": "https://api.github.com/users/charles-cooper/events{/privacy}",
      "received_events_url": "https://api.github.com/users/charles-cooper/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-10-06T07:20:04Z",
    "updated_at": "2021-10-06T07:20:04Z",
    "author_association": "COLLABORATOR",
    "body": "I feel like this is fixed.\r\n\r\n```\r\nevent Merkle:\r\n  xs: bytes32[2]\r\n  x: bytes32\r\n\r\n@external\r\ndef foo():\r\n    log Merkle([convert(1, bytes32), convert(2, bytes32)], 3)\r\n```\r\nproduces the error\r\n```\r\nError compiling: tmp/logs.vy\r\nvyper.exceptions.InvalidType: Expected bytes32 but literal can only be cast as int128 or uint256\r\n  contract \"tmp/logs.vy\", function \"foo\", line 7:61 \r\n       6 def foo():\r\n  ---> 7     log Merkle([convert(1, bytes32), convert(2, bytes32)], 3)\r\n  --------------------------------------------------------------------^\r\n       8\r\n```\r\n\r\nAlso in v0.3.0 logging the array works fine, as in this example:\r\n```\r\nevent Merkle:\r\n  xs: bytes32[2]\r\n\r\n@external\r\ndef foo():\r\n    log Merkle([convert(1, bytes32), convert(2, bytes32)])\r\n\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/935637403/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
