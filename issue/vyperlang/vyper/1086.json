{
  "url": "https://api.github.com/repos/vyperlang/vyper/issues/1086",
  "repository_url": "https://api.github.com/repos/vyperlang/vyper",
  "labels_url": "https://api.github.com/repos/vyperlang/vyper/issues/1086/labels{/name}",
  "comments_url": "https://api.github.com/repos/vyperlang/vyper/issues/1086/comments",
  "events_url": "https://api.github.com/repos/vyperlang/vyper/issues/1086/events",
  "html_url": "https://github.com/vyperlang/vyper/issues/1086",
  "id": 381748031,
  "node_id": "MDU6SXNzdWUzODE3NDgwMzE=",
  "number": 1086,
  "title": "VIP: 'Bigmath' functions",
  "user": {
    "login": "charles-cooper",
    "id": 3867501,
    "node_id": "MDQ6VXNlcjM4Njc1MDE=",
    "avatar_url": "https://avatars.githubusercontent.com/u/3867501?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/charles-cooper",
    "html_url": "https://github.com/charles-cooper",
    "followers_url": "https://api.github.com/users/charles-cooper/followers",
    "following_url": "https://api.github.com/users/charles-cooper/following{/other_user}",
    "gists_url": "https://api.github.com/users/charles-cooper/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/charles-cooper/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/charles-cooper/subscriptions",
    "organizations_url": "https://api.github.com/users/charles-cooper/orgs",
    "repos_url": "https://api.github.com/users/charles-cooper/repos",
    "events_url": "https://api.github.com/users/charles-cooper/events{/privacy}",
    "received_events_url": "https://api.github.com/users/charles-cooper/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 1723982050,
      "node_id": "MDU6TGFiZWwxNzIzOTgyMDUw",
      "url": "https://api.github.com/repos/vyperlang/vyper/labels/VIP:%20Deferred",
      "name": "VIP: Deferred",
      "color": "c5def5",
      "default": false,
      "description": "VIP is not scheduled to move forward at this time"
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 11,
  "created_at": "2018-11-16T20:26:10Z",
  "updated_at": "2022-04-13T15:30:49Z",
  "closed_at": null,
  "author_association": "COLLABORATOR",
  "active_lock_reason": null,
  "body": "## Simple Summary\r\nAdd 'bigmath' functions which make it easier for contract authors to do more precise arithmetic.\r\n\r\n## Abstract\r\nAdd functions for dealing more precisely with overflow and underflow, especially where the implementations are not obvious. Specifically, a `bigmul` function which returns the result of multiplying two 256-bit uints as a pair of 256-bit uints (emulating a 512-bit uint), and a `bigdiv` function which returns the underflow portion of dividing the high word of a 512-bit uint into a 256-bit uint.\r\n\r\nNotes\r\n- I'm open to a `bigadd` and `bigsub`, but these are much more obvious for a contract author to implement.\r\n- I'm torn as to whether bigdiv should be 'minimal' and only return the underflow portion as stated, or whether it should perform the full division, taking a pair of uint256 and returning a pair of uint256.\r\n- Perhaps `divmod` and/or `bigmod` should be added to the mix.\r\n\r\n## Motivation\r\nPrecise arithmetic is hard. For instance, the naive method to calculate multiplication by a fraction is subject to overflow attacks (consider 10 * 254/255 using 8-bit uints returns 0, instead of 9). Contract authors need a way to keep track of over and underflow without necessarily reaching for a full-fledged bignum implementation. Furthermore, efficient implementations (which take O(1) operations) are not obvious (the naive method being long multiplication or division). The two proposed functions provide a safe, efficient way to keep track of over and underflow, and in theory also provide enough machinery that higher-level abstractions like floating point arithmetic or bignum implementations could be built on top of them.\r\n\r\nAs an example, multiplying by a rational number could be implemented using these functions as follows:\r\n```python\r\n# Sample implementation\r\ndef mul_frac(a: uint256, numerator: uint256, denominator: uint256) -> uint256:\r\n  (r1, r0) = bigmul(a,numerator)\r\n  assert r1 / denominator == 0 # overflow protection\r\n  return bigdiv(r1, denominator) + r0 / denominator # Could be one bit of rounding error here\r\n```\r\n\r\n## Specification\r\nImplement the following interface, either as builtin functions or as part of a 'standard library'.\r\n```python\r\n# Returns the result of multiplying two uint256s as an unsigned 512-bit integer, represented as a pair of uint256s.\r\n# The high word should be the first value of the returned pair, and the low word should be the second value of the returned pair.\r\ndef bigmul(a: uint256, b: uint256) -> (uint256, uint256):\r\n\r\n# Returns the result of ((a << 256) / b) % (2**256). If 512-arithmetic were represented using pairs of uint256, this would be the low word of the quotient of dividing the high word of a by b.\r\ndef bigdiv(a: uint256, b: uint256) -> uint256:\r\n```\r\n\r\nThe following C code can be taken as a suggestion of how to implement this efficiently.\r\n```c\r\n#include <stdio.h>\r\n#include <stdint.h>\r\n\r\nuint16_t bigmul1(uint8_t a, uint8_t b) {\r\n  uint16_t a1 = a;\r\n  return a1 * b;\r\n}\r\n\r\n// Return the result of multiplying two uint8_t as uint16_t.\r\nuint8_t mulmod(uint8_t a, uint8_t b, uint8_t k) {\r\n  uint16_t a1 = a;\r\n  uint16_t c = a1*b;\r\n  return (uint8_t)(c % k);\r\n}\r\n\r\n// Same thing but without depending on native uint16 multiplication\r\n// Credits: https://medium.com/wicketh/mathemagic-full-multiply-27650fec525d\r\n// Interestingly, the author claims that using this function, and checking the high-word for overflow supposedly takes less gas than a standard safeMul\r\nuint16_t bigmul2(uint8_t a, uint8_t b) {\r\n  uint8_t r0 = a * b; // i.e. mulmod(a,b, 256)\r\n  uint8_t r1 = mulmod(a,b, UINT8_MAX);\r\n  r1 = (r1 - r0) - (r1 < r0 ? 1 : 0); // chinese remainder\r\n\r\n  uint16_t r = r1; // r1 is the high word, r0 is the low word.\r\n  return (r << 8) + r0;\r\n}\r\n\r\n// Calculate ((a << 8) / b) mod 256, using native words\r\nuint8_t bigdiv1(uint8_t a, uint8_t b) {\r\n  uint16_t a1 = a;\r\n  return (a << 8) / b;\r\n}\r\n\r\n// Same thing but without depending on native uint16_t division\r\nuint8_t bigdiv2(uint8_t a, uint8_t b) {\r\n  uint8_t m = UINT8_MAX % b;\r\n  uint8_t r = UINT8_MAX / b;\r\n  return r * a + (m + 1) * a / b;\r\n}\r\n\r\n// Run some sample cases, test bigdiv2 against bigdiv1\r\nint main() {\r\n  printf(\"%d\\n\", bigmul1(100,5));\r\n  //printf(\"%d\\n\", mulmod(100,5, 7));\r\n  printf(\"%d\\n\", bigmul2(100,5));\r\n  printf(\"%d\\n\", bigdiv1(1,251));\r\n  printf(\"%d\\n\", bigdiv2(1,251));\r\n  printf(\"%d\\n\", bigdiv1(1,255));\r\n  printf(\"%d\\n\", bigdiv2(1,255));\r\n  printf(\"%d\\n\", bigdiv1(1,1));\r\n  printf(\"%d\\n\", bigdiv2(1,1));\r\n  printf(\"%d\\n\", bigdiv1(1,2));\r\n  printf(\"%d\\n\", bigdiv2(1,2));\r\n  printf(\"%d\\n\", bigdiv1(1,3));\r\n  printf(\"%d\\n\", bigdiv2(1,3));\r\n  for (int i = 0; i < 256; i++) {\r\n    for (int j = 1; j < 256; j++) {\r\n      int r1 = bigdiv1(i,j);\r\n      int r2 = bigdiv2(i,j);\r\n      if (r1 != r2) {\r\n          printf(\"Bad pair (%d,%d) -> %d vs %d \\n\", i,j, r1,r2);\r\n      }\r\n    }\r\n  }\r\n  printf(\"end\\n\");\r\n}\r\n```\r\n\r\n## Backwards Compatibility\r\nExisting code may have collisions with the function names.\r\n\r\n## Copyright\r\nCopyright and related rights waived via [CC0](https://creativecommons.org/publicdomain/zero/1.0/)\r\n",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/1086/reactions",
    "total_count": 3,
    "+1": 3,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/vyperlang/vyper/issues/1086/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/439568075",
    "html_url": "https://github.com/vyperlang/vyper/issues/1086#issuecomment-439568075",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/1086",
    "id": 439568075,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzOTU2ODA3NQ==",
    "user": {
      "login": "fubuloubu",
      "id": 3859395,
      "node_id": "MDQ6VXNlcjM4NTkzOTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3859395?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fubuloubu",
      "html_url": "https://github.com/fubuloubu",
      "followers_url": "https://api.github.com/users/fubuloubu/followers",
      "following_url": "https://api.github.com/users/fubuloubu/following{/other_user}",
      "gists_url": "https://api.github.com/users/fubuloubu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fubuloubu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fubuloubu/subscriptions",
      "organizations_url": "https://api.github.com/users/fubuloubu/orgs",
      "repos_url": "https://api.github.com/users/fubuloubu/repos",
      "events_url": "https://api.github.com/users/fubuloubu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fubuloubu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-17T00:24:39Z",
    "updated_at": "2018-11-17T00:25:21Z",
    "author_association": "MEMBER",
    "body": "2**512 is astronomically big. It is much harder to make safety guarantees once you go down this path of multiple-register arthimitic. Do you have a use case you can point to that requires doing math that large?\r\n\r\nP.S. we have a decimals type.",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/439568075/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/439571527",
    "html_url": "https://github.com/vyperlang/vyper/issues/1086#issuecomment-439571527",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/1086",
    "id": 439571527,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzOTU3MTUyNw==",
    "user": {
      "login": "charles-cooper",
      "id": 3867501,
      "node_id": "MDQ6VXNlcjM4Njc1MDE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3867501?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/charles-cooper",
      "html_url": "https://github.com/charles-cooper",
      "followers_url": "https://api.github.com/users/charles-cooper/followers",
      "following_url": "https://api.github.com/users/charles-cooper/following{/other_user}",
      "gists_url": "https://api.github.com/users/charles-cooper/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/charles-cooper/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/charles-cooper/subscriptions",
      "organizations_url": "https://api.github.com/users/charles-cooper/orgs",
      "repos_url": "https://api.github.com/users/charles-cooper/repos",
      "events_url": "https://api.github.com/users/charles-cooper/events{/privacy}",
      "received_events_url": "https://api.github.com/users/charles-cooper/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-17T00:49:57Z",
    "updated_at": "2018-11-17T00:49:57Z",
    "author_association": "COLLABORATOR",
    "body": "Sure, any time you want to do accounting precisely. Consider that ERC20 tokens typically have 18 decimal places (roughly 60 bits). Once you start wanting to trade at different prices, make partial fills, do ring trades, the issue of bit truncation starts to become important.\r\n\r\nKeep in mind, 2**256 is really big but we still check for overflow because not accounting for overflow results in bugs, and is an attack vector. This is just a generalization for more complex operations.",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/439571527/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/439575170",
    "html_url": "https://github.com/vyperlang/vyper/issues/1086#issuecomment-439575170",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/1086",
    "id": 439575170,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzOTU3NTE3MA==",
    "user": {
      "login": "fubuloubu",
      "id": 3859395,
      "node_id": "MDQ6VXNlcjM4NTkzOTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3859395?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fubuloubu",
      "html_url": "https://github.com/fubuloubu",
      "followers_url": "https://api.github.com/users/fubuloubu/followers",
      "following_url": "https://api.github.com/users/fubuloubu/following{/other_user}",
      "gists_url": "https://api.github.com/users/fubuloubu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fubuloubu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fubuloubu/subscriptions",
      "organizations_url": "https://api.github.com/users/fubuloubu/orgs",
      "repos_url": "https://api.github.com/users/fubuloubu/repos",
      "events_url": "https://api.github.com/users/fubuloubu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fubuloubu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-17T01:23:25Z",
    "updated_at": "2018-11-17T01:23:48Z",
    "author_association": "MEMBER",
    "body": "Every arthimetic operation performed in Vyper is done by first validating it cannot overflow/underflow (reverting if it does), similar to the SafeMath library in common use on Solidity contracts. So that is not a concern.\r\n\r\nYou are indeed correct that most ERC20 tokens use 18 decimal places as their default, mostly by convention. That leaves over 60 decimal places for the whole number portion, which is much larger than any reasonable project I've encountered. These numbers are large enough to be very, very precise for most reasonable use cases, but if you have a specific example for me to examine, I would like to see it.\r\n\r\nThese data types are much larger than even what IEEE 64-bit floats can account for, and are much more precise because they are tracked as hard integers.",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/439575170/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/441898640",
    "html_url": "https://github.com/vyperlang/vyper/issues/1086#issuecomment-441898640",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/1086",
    "id": 441898640,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0MTg5ODY0MA==",
    "user": {
      "login": "fulldecent",
      "id": 382183,
      "node_id": "MDQ6VXNlcjM4MjE4Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/382183?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fulldecent",
      "html_url": "https://github.com/fulldecent",
      "followers_url": "https://api.github.com/users/fulldecent/followers",
      "following_url": "https://api.github.com/users/fulldecent/following{/other_user}",
      "gists_url": "https://api.github.com/users/fulldecent/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fulldecent/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fulldecent/subscriptions",
      "organizations_url": "https://api.github.com/users/fulldecent/orgs",
      "repos_url": "https://api.github.com/users/fulldecent/repos",
      "events_url": "https://api.github.com/users/fulldecent/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fulldecent/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-27T04:06:29Z",
    "updated_at": "2018-11-27T04:06:29Z",
    "author_association": "CONTRIBUTOR",
    "body": "Here is a use case we can study:\r\n\r\nhttps://github.com/compound-finance/compound-money-market\r\n\r\nYou can deposit funds, maybe a few Ether, and you earn interest PER BLOCK. This might be closer to quantization errors than other projects.\r\n\r\n---\r\n\r\nI believe adding functions to the standard library is always a huge deal. Instead, there should be a \"contribs\" package with all kinds of stuff like this. No need to justify adding something to contribs, just put it in. Then after the market clearly shows this is useful it gets added to the standard library.",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/441898640/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/443724479",
    "html_url": "https://github.com/vyperlang/vyper/issues/1086#issuecomment-443724479",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/1086",
    "id": 443724479,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0MzcyNDQ3OQ==",
    "user": {
      "login": "jacqueswww",
      "id": 6917456,
      "node_id": "MDQ6VXNlcjY5MTc0NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6917456?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jacqueswww",
      "html_url": "https://github.com/jacqueswww",
      "followers_url": "https://api.github.com/users/jacqueswww/followers",
      "following_url": "https://api.github.com/users/jacqueswww/following{/other_user}",
      "gists_url": "https://api.github.com/users/jacqueswww/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jacqueswww/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jacqueswww/subscriptions",
      "organizations_url": "https://api.github.com/users/jacqueswww/orgs",
      "repos_url": "https://api.github.com/users/jacqueswww/repos",
      "events_url": "https://api.github.com/users/jacqueswww/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jacqueswww/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-12-03T14:16:42Z",
    "updated_at": "2018-12-03T14:16:42Z",
    "author_association": "CONTRIBUTOR",
    "body": "As discussed in call, we will leave this ticket open and marked as 'invalid' until we have a library interface we can use. See #885 #483 and #584 for details.",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/443724479/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/451638006",
    "html_url": "https://github.com/vyperlang/vyper/issues/1086#issuecomment-451638006",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/1086",
    "id": 451638006,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1MTYzODAwNg==",
    "user": {
      "login": "nrryuya",
      "id": 22876645,
      "node_id": "MDQ6VXNlcjIyODc2NjQ1",
      "avatar_url": "https://avatars.githubusercontent.com/u/22876645?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nrryuya",
      "html_url": "https://github.com/nrryuya",
      "followers_url": "https://api.github.com/users/nrryuya/followers",
      "following_url": "https://api.github.com/users/nrryuya/following{/other_user}",
      "gists_url": "https://api.github.com/users/nrryuya/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nrryuya/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nrryuya/subscriptions",
      "organizations_url": "https://api.github.com/users/nrryuya/orgs",
      "repos_url": "https://api.github.com/users/nrryuya/repos",
      "events_url": "https://api.github.com/users/nrryuya/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nrryuya/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-05T08:34:02Z",
    "updated_at": "2019-01-05T08:34:02Z",
    "author_association": "CONTRIBUTOR",
    "body": "One use-case of big integer arithmetic is RSA Accumulator. \r\nhttps://github.com/LayerXcom/verified-vyper-contracts/pull/70",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/451638006/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/453221413",
    "html_url": "https://github.com/vyperlang/vyper/issues/1086#issuecomment-453221413",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/1086",
    "id": 453221413,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1MzIyMTQxMw==",
    "user": {
      "login": "vbuterin",
      "id": 2230894,
      "node_id": "MDQ6VXNlcjIyMzA4OTQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2230894?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vbuterin",
      "html_url": "https://github.com/vbuterin",
      "followers_url": "https://api.github.com/users/vbuterin/followers",
      "following_url": "https://api.github.com/users/vbuterin/following{/other_user}",
      "gists_url": "https://api.github.com/users/vbuterin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vbuterin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vbuterin/subscriptions",
      "organizations_url": "https://api.github.com/users/vbuterin/orgs",
      "repos_url": "https://api.github.com/users/vbuterin/repos",
      "events_url": "https://api.github.com/users/vbuterin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vbuterin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-10T19:24:28Z",
    "updated_at": "2019-01-10T19:24:28Z",
    "author_association": "CONTRIBUTOR",
    "body": "IMO if Vyper is going to go down this path, you should consider instead just adding bigmath functions that use `bytes[n]` variables and the MODEXP precompile. So possibly:\r\n\r\n* `bigadd(x, y)`: does a loop that walks through `x` and `y` 32 bytes at a time, using ADD and carry\r\n* `bigsub(x, y)`: similar to `bigadd` but does subtraction; returns an error if the result is less than zero\r\n* `bigmul(x, y)`: uses `MODEXP` to compute `x * y = ((x+y)^2 - (x-y)^2) / 4`\r\n* `bigmodadd(x, y, m)`: like bigadd but with a modulus\r\n* `bigmodmul(x, y, m)`: like bigmul but with a modulus\r\n* `bigmod(x, y)`: uses `MODEXP(x, 1, y)`\r\n* `bigdiv(x, y)`: does `x//y`\r\n\r\nYou'd probably want to implement this via a library, similar to the in-Vyper RLP decoding feature.\r\n\r\nBTW if you want an efficient way to get the high order bits of 512-bit multiplication, one possible EVM-specific trick is something like `(x*y) // 2**256 = mulmod(x, y, 2**256 - 1) - (x*y)` (but I haven't verified this, there may be edge cases where it doesn't work so you might need a couple extra clauses).",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/453221413/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/453237797",
    "html_url": "https://github.com/vyperlang/vyper/issues/1086#issuecomment-453237797",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/1086",
    "id": 453237797,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1MzIzNzc5Nw==",
    "user": {
      "login": "charles-cooper",
      "id": 3867501,
      "node_id": "MDQ6VXNlcjM4Njc1MDE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3867501?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/charles-cooper",
      "html_url": "https://github.com/charles-cooper",
      "followers_url": "https://api.github.com/users/charles-cooper/followers",
      "following_url": "https://api.github.com/users/charles-cooper/following{/other_user}",
      "gists_url": "https://api.github.com/users/charles-cooper/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/charles-cooper/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/charles-cooper/subscriptions",
      "organizations_url": "https://api.github.com/users/charles-cooper/orgs",
      "repos_url": "https://api.github.com/users/charles-cooper/repos",
      "events_url": "https://api.github.com/users/charles-cooper/events{/privacy}",
      "received_events_url": "https://api.github.com/users/charles-cooper/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-10T20:15:18Z",
    "updated_at": "2019-01-10T20:15:18Z",
    "author_association": "COLLABORATOR",
    "body": "@vbuterin Thanks for the feedback! I was unaware of the MODEXP precompile and it would probably be a better fit for RSA accumulation. In fact, exposing MODEXP as a library function could be a good thing to expose generally although we would need to think about the API to expose for such arbitrary-width integer types.\r\n\r\nBTW, the edge case you are looking for in the 512-bit multiplication is the Chinese remainder expression in the C code I added above - I tried to write it in a way which 'looks' like EVM code.\r\n```\r\n...\r\nuint8_t r0 = a * b; // i.e. mulmod(a,b, 256)\r\nuint8_t r1 = mulmod(a,b, UINT8_MAX);\r\nr1 = (r1 - r0) - (r1 < r0 ? 1 : 0);\r\n...\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/453237797/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/465706982",
    "html_url": "https://github.com/vyperlang/vyper/issues/1086#issuecomment-465706982",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/1086",
    "id": 465706982,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ2NTcwNjk4Mg==",
    "user": {
      "login": "charles-cooper",
      "id": 3867501,
      "node_id": "MDQ6VXNlcjM4Njc1MDE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3867501?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/charles-cooper",
      "html_url": "https://github.com/charles-cooper",
      "followers_url": "https://api.github.com/users/charles-cooper/followers",
      "following_url": "https://api.github.com/users/charles-cooper/following{/other_user}",
      "gists_url": "https://api.github.com/users/charles-cooper/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/charles-cooper/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/charles-cooper/subscriptions",
      "organizations_url": "https://api.github.com/users/charles-cooper/orgs",
      "repos_url": "https://api.github.com/users/charles-cooper/repos",
      "events_url": "https://api.github.com/users/charles-cooper/events{/privacy}",
      "received_events_url": "https://api.github.com/users/charles-cooper/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-02-20T18:51:35Z",
    "updated_at": "2019-02-20T18:51:35Z",
    "author_association": "COLLABORATOR",
    "body": "Another use case for `bigdiv` - calculating `1/x`.",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/465706982/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/509824663",
    "html_url": "https://github.com/vyperlang/vyper/issues/1086#issuecomment-509824663",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/1086",
    "id": 509824663,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUwOTgyNDY2Mw==",
    "user": {
      "login": "thibauld",
      "id": 197119,
      "node_id": "MDQ6VXNlcjE5NzExOQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/197119?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/thibauld",
      "html_url": "https://github.com/thibauld",
      "followers_url": "https://api.github.com/users/thibauld/followers",
      "following_url": "https://api.github.com/users/thibauld/following{/other_user}",
      "gists_url": "https://api.github.com/users/thibauld/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/thibauld/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/thibauld/subscriptions",
      "organizations_url": "https://api.github.com/users/thibauld/orgs",
      "repos_url": "https://api.github.com/users/thibauld/repos",
      "events_url": "https://api.github.com/users/thibauld/events{/privacy}",
      "received_events_url": "https://api.github.com/users/thibauld/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-07-09T21:55:40Z",
    "updated_at": "2019-07-09T21:55:40Z",
    "author_association": "NONE",
    "body": "Bigmath would be very useful for projects implementing bonding curves (linear and non-linear). In bonding curves, if the buy slope is very small, the token supply and the reserve can quickly become very large and the calculus required often involve to power 2 or power 3 these numbers. We are currently  having the issue while implementing the continuous organization reference smart-contract.",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/509824663/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/509842738",
    "html_url": "https://github.com/vyperlang/vyper/issues/1086#issuecomment-509842738",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/1086",
    "id": 509842738,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUwOTg0MjczOA==",
    "user": {
      "login": "jacqueswww",
      "id": 6917456,
      "node_id": "MDQ6VXNlcjY5MTc0NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6917456?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jacqueswww",
      "html_url": "https://github.com/jacqueswww",
      "followers_url": "https://api.github.com/users/jacqueswww/followers",
      "following_url": "https://api.github.com/users/jacqueswww/following{/other_user}",
      "gists_url": "https://api.github.com/users/jacqueswww/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jacqueswww/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jacqueswww/subscriptions",
      "organizations_url": "https://api.github.com/users/jacqueswww/orgs",
      "repos_url": "https://api.github.com/users/jacqueswww/repos",
      "events_url": "https://api.github.com/users/jacqueswww/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jacqueswww/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-07-09T23:08:25Z",
    "updated_at": "2019-07-09T23:10:28Z",
    "author_association": "CONTRIBUTOR",
    "body": "@thibaild checkout this file https://github.com/andytudhope/Recollections/blob/master/vyper/math/math.vy for a potential power function in vyper.",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/509842738/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
