{
  "url": "https://api.github.com/repos/vyperlang/vyper/issues/1733",
  "repository_url": "https://api.github.com/repos/vyperlang/vyper",
  "labels_url": "https://api.github.com/repos/vyperlang/vyper/issues/1733/labels{/name}",
  "comments_url": "https://api.github.com/repos/vyperlang/vyper/issues/1733/comments",
  "events_url": "https://api.github.com/repos/vyperlang/vyper/issues/1733/events",
  "html_url": "https://github.com/vyperlang/vyper/issues/1733",
  "id": 525114732,
  "node_id": "MDU6SXNzdWU1MjUxMTQ3MzI=",
  "number": 1733,
  "title": "VIP: Hash-based storage slots",
  "user": {
    "login": "fubuloubu",
    "id": 3859395,
    "node_id": "MDQ6VXNlcjM4NTkzOTU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/3859395?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/fubuloubu",
    "html_url": "https://github.com/fubuloubu",
    "followers_url": "https://api.github.com/users/fubuloubu/followers",
    "following_url": "https://api.github.com/users/fubuloubu/following{/other_user}",
    "gists_url": "https://api.github.com/users/fubuloubu/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/fubuloubu/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/fubuloubu/subscriptions",
    "organizations_url": "https://api.github.com/users/fubuloubu/orgs",
    "repos_url": "https://api.github.com/users/fubuloubu/repos",
    "events_url": "https://api.github.com/users/fubuloubu/events{/privacy}",
    "received_events_url": "https://api.github.com/users/fubuloubu/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 751622094,
      "node_id": "MDU6TGFiZWw3NTE2MjIwOTQ=",
      "url": "https://api.github.com/repos/vyperlang/vyper/labels/VIP:%20Discussion",
      "name": "VIP: Discussion",
      "color": "000000",
      "default": false,
      "description": "Used to denote VIPs and more complex issues that are waiting discussion in a meeting"
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 23,
  "created_at": "2019-11-19T16:19:51Z",
  "updated_at": "2019-12-09T16:18:49Z",
  "closed_at": null,
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "## Simple Summary\r\nChange the initial storage slot index of a variable from a compilation-specific ordering to a hash-based index based on variable name.\r\n\r\n## Motivation\r\nWe currently do not do any sort of tightly packing of storage slots in Vyper contracts. The original specification of Vyper's ordering-based indexing of variable storage slots is [adapted from Solidity](https://solidity.readthedocs.io/en/v0.5.13/miscellaneous.html#layout-of-state-variables-in-storage). Unfortunately, due to the compiler making decisions about the ordering of storage slots, there is [chaotic behavior](https://blog.trailofbits.com/2018/09/05/contract-upgrade-anti-patterns/) of storage slot indexes between versions of different contracts, leading to issues when using the Proxy pattern of upgradeable contracts between multiple versions of a Solidity contract.\r\n\r\nBy creating a predictable storage slot index strategy (based on a collision-resistant, cryptographic hash function such as `keccak256`), external tools can regenerate the entire symbol table of a Vyper contract from nothing else than analyzing source code directly. More importantly, the Proxy pattern would be more resilient with hash-based indexes because the variable name now determines it's location, and not it's ordering within a contract (or inherited system of contracts, a la Solidity)\r\n\r\n## Specification\r\nThe change asked for here is to change the storage slot index function `index(v+1) := prev_slot + sizeof(v.type) + 1` from a stateful function which auto-increments the storage slot based on variable size of the variables laid out before it, to a stateless function that computes it via the hash of the variables name e.g. `index(v) := keccak(v.name)`. This does not change how structs or arrays are currently laid out (as specified in #769), only the base index for storage of a particular type.\r\n\r\n## Backwards Compatibility\r\nThis VIP will change how storage slots are calculated, and will break any existing tools that rely on the assumption that storage slots are auto-incremented based on the contract's definitions. However, tools should appreciate that storage slots are now predictably obtained from their names only, without relying on internal compiler information such as how the compiler makes a determination of storage slots based on complex inheritance and compression rules.\r\n\r\n## Dependencies\r\nNo dependencies. Related to #769.\r\n\r\n## Copyright\r\nCopyright and related rights waived via [CC0](https://creativecommons.org/publicdomain/zero/1.0/)\r\n",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/1733/reactions",
    "total_count": 2,
    "+1": 2,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/vyperlang/vyper/issues/1733/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/555588531",
    "html_url": "https://github.com/vyperlang/vyper/issues/1733#issuecomment-555588531",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/1733",
    "id": 555588531,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1NTU4ODUzMQ==",
    "user": {
      "login": "fubuloubu",
      "id": 3859395,
      "node_id": "MDQ6VXNlcjM4NTkzOTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3859395?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fubuloubu",
      "html_url": "https://github.com/fubuloubu",
      "followers_url": "https://api.github.com/users/fubuloubu/followers",
      "following_url": "https://api.github.com/users/fubuloubu/following{/other_user}",
      "gists_url": "https://api.github.com/users/fubuloubu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fubuloubu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fubuloubu/subscriptions",
      "organizations_url": "https://api.github.com/users/fubuloubu/orgs",
      "repos_url": "https://api.github.com/users/fubuloubu/repos",
      "events_url": "https://api.github.com/users/fubuloubu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fubuloubu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-11-19T16:25:39Z",
    "updated_at": "2019-11-19T16:25:39Z",
    "author_association": "MEMBER",
    "body": "As a side note, with this VIP implemented it would be possible to implement the Proxy pattern by leveraging Vyper contracts as a template via `DELEGATECALL` and delegating to the specific deployed version you intend, which could be managed on-chain via ethPM registration (or similar). The Proxy itself may or may not be developed with Solidity, that is up to the implementer of the specific framework which decides to implement this pattern for users using the dependable storage slot index provided by this VIP.",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/555588531/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 1,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/555610609",
    "html_url": "https://github.com/vyperlang/vyper/issues/1733#issuecomment-555610609",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/1733",
    "id": 555610609,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1NTYxMDYwOQ==",
    "user": {
      "login": "Pet3ris",
      "id": 224585,
      "node_id": "MDQ6VXNlcjIyNDU4NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/224585?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Pet3ris",
      "html_url": "https://github.com/Pet3ris",
      "followers_url": "https://api.github.com/users/Pet3ris/followers",
      "following_url": "https://api.github.com/users/Pet3ris/following{/other_user}",
      "gists_url": "https://api.github.com/users/Pet3ris/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Pet3ris/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Pet3ris/subscriptions",
      "organizations_url": "https://api.github.com/users/Pet3ris/orgs",
      "repos_url": "https://api.github.com/users/Pet3ris/repos",
      "events_url": "https://api.github.com/users/Pet3ris/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Pet3ris/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-11-19T17:13:04Z",
    "updated_at": "2019-11-19T17:13:17Z",
    "author_association": "NONE",
    "body": "@fubuloubu this is great! Another benefit is that it helps with implementing tools like debuggers - they wouldn't have to be coupled to a compiler version re: https://github.com/ethereum/vyper/issues/1629.",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/555610609/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/555611332",
    "html_url": "https://github.com/vyperlang/vyper/issues/1733#issuecomment-555611332",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/1733",
    "id": 555611332,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1NTYxMTMzMg==",
    "user": {
      "login": "fubuloubu",
      "id": 3859395,
      "node_id": "MDQ6VXNlcjM4NTkzOTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3859395?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fubuloubu",
      "html_url": "https://github.com/fubuloubu",
      "followers_url": "https://api.github.com/users/fubuloubu/followers",
      "following_url": "https://api.github.com/users/fubuloubu/following{/other_user}",
      "gists_url": "https://api.github.com/users/fubuloubu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fubuloubu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fubuloubu/subscriptions",
      "organizations_url": "https://api.github.com/users/fubuloubu/orgs",
      "repos_url": "https://api.github.com/users/fubuloubu/repos",
      "events_url": "https://api.github.com/users/fubuloubu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fubuloubu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-11-19T17:14:35Z",
    "updated_at": "2019-11-19T17:19:03Z",
    "author_association": "MEMBER",
    "body": "One potential issue is that someone could maliciously define a variable name such that there is a collision:\r\n```python\r\nbaz: map(bytes32, Baz)\r\nf2d05....9447: map(bytes32, Baz)\r\n```\r\n\r\nThe solution to this could be to throw on variables that look like a hash (because no one should be doing that), or any variables that have the same hash as another previously defined (which should be unlikely given second preimage resistance of keccak)",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/555611332/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/555615658",
    "html_url": "https://github.com/vyperlang/vyper/issues/1733#issuecomment-555615658",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/1733",
    "id": 555615658,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1NTYxNTY1OA==",
    "user": {
      "login": "fubuloubu",
      "id": 3859395,
      "node_id": "MDQ6VXNlcjM4NTkzOTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3859395?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fubuloubu",
      "html_url": "https://github.com/fubuloubu",
      "followers_url": "https://api.github.com/users/fubuloubu/followers",
      "following_url": "https://api.github.com/users/fubuloubu/following{/other_user}",
      "gists_url": "https://api.github.com/users/fubuloubu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fubuloubu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fubuloubu/subscriptions",
      "organizations_url": "https://api.github.com/users/fubuloubu/orgs",
      "repos_url": "https://api.github.com/users/fubuloubu/repos",
      "events_url": "https://api.github.com/users/fubuloubu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fubuloubu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-11-19T17:23:47Z",
    "updated_at": "2019-11-19T17:23:47Z",
    "author_association": "MEMBER",
    "body": "Another assumption is that string types are disallowed as keys. If that assumption were relaxed, the following would be possible:\r\n```python\r\nbaz: map(string, Baz)\r\nf2d05ec5c5729fb559780c70a93ca7b4ee2ca37f64e62fa31046b324f60d9447baz: Baz\r\n```\r\n\r\nAs the two would have the same hash preimage e.g. `keccak(keccak(\"baz\") . \"baz\") == keccak(f2d0....9447baz)`.\r\n\r\nThe solution to this would be a domain separator to ensure that such variable names are not possible to construct e.g. `index(v) := keccak(\"#\" . v.name)`\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/555615658/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/555616869",
    "html_url": "https://github.com/vyperlang/vyper/issues/1733#issuecomment-555616869",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/1733",
    "id": 555616869,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1NTYxNjg2OQ==",
    "user": {
      "login": "fubuloubu",
      "id": 3859395,
      "node_id": "MDQ6VXNlcjM4NTkzOTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3859395?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fubuloubu",
      "html_url": "https://github.com/fubuloubu",
      "followers_url": "https://api.github.com/users/fubuloubu/followers",
      "following_url": "https://api.github.com/users/fubuloubu/following{/other_user}",
      "gists_url": "https://api.github.com/users/fubuloubu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fubuloubu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fubuloubu/subscriptions",
      "organizations_url": "https://api.github.com/users/fubuloubu/orgs",
      "repos_url": "https://api.github.com/users/fubuloubu/repos",
      "events_url": "https://api.github.com/users/fubuloubu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fubuloubu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-11-19T17:26:23Z",
    "updated_at": "2019-11-19T17:26:23Z",
    "author_association": "MEMBER",
    "body": "Related: https://en.wikipedia.org/wiki/De_Bruijn_index",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/555616869/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/555619144",
    "html_url": "https://github.com/vyperlang/vyper/issues/1733#issuecomment-555619144",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/1733",
    "id": 555619144,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1NTYxOTE0NA==",
    "user": {
      "login": "fubuloubu",
      "id": 3859395,
      "node_id": "MDQ6VXNlcjM4NTkzOTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3859395?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fubuloubu",
      "html_url": "https://github.com/fubuloubu",
      "followers_url": "https://api.github.com/users/fubuloubu/followers",
      "following_url": "https://api.github.com/users/fubuloubu/following{/other_user}",
      "gists_url": "https://api.github.com/users/fubuloubu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fubuloubu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fubuloubu/subscriptions",
      "organizations_url": "https://api.github.com/users/fubuloubu/orgs",
      "repos_url": "https://api.github.com/users/fubuloubu/repos",
      "events_url": "https://api.github.com/users/fubuloubu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fubuloubu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-11-19T17:31:29Z",
    "updated_at": "2019-11-19T17:39:28Z",
    "author_association": "MEMBER",
    "body": "Note: This would increase deployment costs because you would have to do a full `PUSH32` to load the hash index onto the stack for normal variables (same gas cost as `PUSH1`, but more data to push... hence more data in deployment transaction)\r\n\r\nA potential solution to this would to be to have a \"storage alias\" section of the bytecode, such that reads become a little more complex, but the slot identifier only has to be referenced once in the bytecode. Unsure of the tradeoffs here.\r\n\r\nAnother solution would be to reduce the number of bytes we are taking from the hash a la `method_id`, but that would harm the 2nd preimage resistance assumption.",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/555619144/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/555731796",
    "html_url": "https://github.com/vyperlang/vyper/issues/1733#issuecomment-555731796",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/1733",
    "id": 555731796,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1NTczMTc5Ng==",
    "user": {
      "login": "fubuloubu",
      "id": 3859395,
      "node_id": "MDQ6VXNlcjM4NTkzOTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3859395?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fubuloubu",
      "html_url": "https://github.com/fubuloubu",
      "followers_url": "https://api.github.com/users/fubuloubu/followers",
      "following_url": "https://api.github.com/users/fubuloubu/following{/other_user}",
      "gists_url": "https://api.github.com/users/fubuloubu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fubuloubu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fubuloubu/subscriptions",
      "organizations_url": "https://api.github.com/users/fubuloubu/orgs",
      "repos_url": "https://api.github.com/users/fubuloubu/repos",
      "events_url": "https://api.github.com/users/fubuloubu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fubuloubu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-11-19T21:50:25Z",
    "updated_at": "2019-11-19T21:50:25Z",
    "author_association": "MEMBER",
    "body": "Note to potential implementers of proxying via this method:\r\n\r\nIt is wise to protect the parent contract's private storage variables from being overwrite-able by the children's logic by utilizing a seed or domain separator on the parent's storage to ensure it is not possible.",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/555731796/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/558846899",
    "html_url": "https://github.com/vyperlang/vyper/issues/1733#issuecomment-558846899",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/1733",
    "id": 558846899,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1ODg0Njg5OQ==",
    "user": {
      "login": "thegostep",
      "id": 15959632,
      "node_id": "MDQ6VXNlcjE1OTU5NjMy",
      "avatar_url": "https://avatars.githubusercontent.com/u/15959632?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/thegostep",
      "html_url": "https://github.com/thegostep",
      "followers_url": "https://api.github.com/users/thegostep/followers",
      "following_url": "https://api.github.com/users/thegostep/following{/other_user}",
      "gists_url": "https://api.github.com/users/thegostep/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/thegostep/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/thegostep/subscriptions",
      "organizations_url": "https://api.github.com/users/thegostep/orgs",
      "repos_url": "https://api.github.com/users/thegostep/repos",
      "events_url": "https://api.github.com/users/thegostep/events{/privacy}",
      "received_events_url": "https://api.github.com/users/thegostep/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-11-26T22:34:51Z",
    "updated_at": "2019-11-26T22:34:51Z",
    "author_association": "NONE",
    "body": "Would love to see this implemented. This makes upgradeability significantly safer. It also makes developing against mainnet so much easier because it becomes trivial to pull a snapshot of the state of a smart contract into a local environment like ganache / buidler.",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/558846899/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/558849765",
    "html_url": "https://github.com/vyperlang/vyper/issues/1733#issuecomment-558849765",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/1733",
    "id": 558849765,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1ODg0OTc2NQ==",
    "user": {
      "login": "fubuloubu",
      "id": 3859395,
      "node_id": "MDQ6VXNlcjM4NTkzOTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3859395?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fubuloubu",
      "html_url": "https://github.com/fubuloubu",
      "followers_url": "https://api.github.com/users/fubuloubu/followers",
      "following_url": "https://api.github.com/users/fubuloubu/following{/other_user}",
      "gists_url": "https://api.github.com/users/fubuloubu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fubuloubu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fubuloubu/subscriptions",
      "organizations_url": "https://api.github.com/users/fubuloubu/orgs",
      "repos_url": "https://api.github.com/users/fubuloubu/repos",
      "events_url": "https://api.github.com/users/fubuloubu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fubuloubu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-11-26T22:45:05Z",
    "updated_at": "2019-11-26T22:45:05Z",
    "author_association": "MEMBER",
    "body": "@thegostep Excellent point about pulling state changes!",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/558849765/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/559043779",
    "html_url": "https://github.com/vyperlang/vyper/issues/1733#issuecomment-559043779",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/1733",
    "id": 559043779,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1OTA0Mzc3OQ==",
    "user": {
      "login": "charles-cooper",
      "id": 3867501,
      "node_id": "MDQ6VXNlcjM4Njc1MDE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3867501?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/charles-cooper",
      "html_url": "https://github.com/charles-cooper",
      "followers_url": "https://api.github.com/users/charles-cooper/followers",
      "following_url": "https://api.github.com/users/charles-cooper/following{/other_user}",
      "gists_url": "https://api.github.com/users/charles-cooper/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/charles-cooper/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/charles-cooper/subscriptions",
      "organizations_url": "https://api.github.com/users/charles-cooper/orgs",
      "repos_url": "https://api.github.com/users/charles-cooper/repos",
      "events_url": "https://api.github.com/users/charles-cooper/events{/privacy}",
      "received_events_url": "https://api.github.com/users/charles-cooper/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-11-27T11:13:30Z",
    "updated_at": "2019-11-27T11:13:30Z",
    "author_association": "COLLABORATOR",
    "body": "> One potential issue is that someone could maliciously define a variable name such that there is a collision:\r\n> \r\n> ```python\r\n> baz: map(bytes32, Baz)\r\n> f2d05....9447: map(bytes32, Baz)\r\n> ```\r\n> \r\n> The solution to this could be to throw on variables that look like a hash (because no one should be doing that), or any variables that have the same hash as another previously defined (which should be unlikely given second preimage resistance of keccak)\r\n\r\nwouldn't somebody have to find a keccak collision (which is currently not known to be possible)?",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/559043779/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/559051814",
    "html_url": "https://github.com/vyperlang/vyper/issues/1733#issuecomment-559051814",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/1733",
    "id": 559051814,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1OTA1MTgxNA==",
    "user": {
      "login": "charles-cooper",
      "id": 3867501,
      "node_id": "MDQ6VXNlcjM4Njc1MDE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3867501?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/charles-cooper",
      "html_url": "https://github.com/charles-cooper",
      "followers_url": "https://api.github.com/users/charles-cooper/followers",
      "following_url": "https://api.github.com/users/charles-cooper/following{/other_user}",
      "gists_url": "https://api.github.com/users/charles-cooper/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/charles-cooper/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/charles-cooper/subscriptions",
      "organizations_url": "https://api.github.com/users/charles-cooper/orgs",
      "repos_url": "https://api.github.com/users/charles-cooper/repos",
      "events_url": "https://api.github.com/users/charles-cooper/events{/privacy}",
      "received_events_url": "https://api.github.com/users/charles-cooper/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-11-27T11:38:08Z",
    "updated_at": "2019-11-27T11:38:08Z",
    "author_association": "COLLABORATOR",
    "body": "My biggest concern about this is that locations become compiler-dependent when we implement https://github.com/vyperlang/vyper/issues/1556. So with something like\r\n```\r\nbools: bool[128]\r\n```\r\n`bools` is presumably always going to start in the same place, but depending on how the compiler packs arrays `bools[1]` could be in a different place.\r\n\r\nOne way of dealing with this is to mangle the packing strategy and type into the variable name (which is a kind of version namespacing). So, a regular (i.e. unpacked) bool array `bools: bool[128]` might be stored at `keccak('bools: bool[128]')`, whereas say we pack every bool into a single bit, then `bools: bool[128]` might be stored at `keccak('bools: bool#BIT_PACKED[128]')`. If we decide to pack every bool into a byte, then `bools: bool[128]` might be stored at `keccak('bools: bool#BYTE_PACKED[128])`. This kind of makes sense, because even though they might represent the same thing semantically, a packed bool array is literally represented differently in storage than an unpacked bool array. And this is visible to clients as well - if you call `eth_getStorage` (which returns an entire word) at the array location, you will get a different answer depending on the packing strategy.\r\n\r\nSo maybe this just seems like a good idea because I'm up in the middle of the night but it seems putting the type in the preimage is also kind of neat because it provides some kind of type safety to variable slots (e.g. `xs: uint256` and `xs: int128` are stored in different locations). It prevents contract writers from ex post facto unsafely coercing a storage slot to another type (although this might be considered a shortcoming, if that is something that the contract writer really, really wants to do).",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/559051814/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/559117714",
    "html_url": "https://github.com/vyperlang/vyper/issues/1733#issuecomment-559117714",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/1733",
    "id": 559117714,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1OTExNzcxNA==",
    "user": {
      "login": "fubuloubu",
      "id": 3859395,
      "node_id": "MDQ6VXNlcjM4NTkzOTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3859395?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fubuloubu",
      "html_url": "https://github.com/fubuloubu",
      "followers_url": "https://api.github.com/users/fubuloubu/followers",
      "following_url": "https://api.github.com/users/fubuloubu/following{/other_user}",
      "gists_url": "https://api.github.com/users/fubuloubu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fubuloubu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fubuloubu/subscriptions",
      "organizations_url": "https://api.github.com/users/fubuloubu/orgs",
      "repos_url": "https://api.github.com/users/fubuloubu/repos",
      "events_url": "https://api.github.com/users/fubuloubu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fubuloubu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-11-27T14:47:44Z",
    "updated_at": "2019-11-27T14:47:44Z",
    "author_association": "MEMBER",
    "body": "> wouldn't somebody have to find a keccak collision (which is currently not known to be possible)?\r\n\r\nNo, you could literally just call the map by it's preimage, and it would have the same slot index by definition... although, thinking about it now... that wouldn't really be practical given we encode to bytes first because you'd have to make up a garbage name that wouldn't be valid. I think @smarx was thinking mostly if it was string-encoded it would be easy to do this.",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/559117714/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/559119063",
    "html_url": "https://github.com/vyperlang/vyper/issues/1733#issuecomment-559119063",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/1733",
    "id": 559119063,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1OTExOTA2Mw==",
    "user": {
      "login": "fubuloubu",
      "id": 3859395,
      "node_id": "MDQ6VXNlcjM4NTkzOTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3859395?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fubuloubu",
      "html_url": "https://github.com/fubuloubu",
      "followers_url": "https://api.github.com/users/fubuloubu/followers",
      "following_url": "https://api.github.com/users/fubuloubu/following{/other_user}",
      "gists_url": "https://api.github.com/users/fubuloubu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fubuloubu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fubuloubu/subscriptions",
      "organizations_url": "https://api.github.com/users/fubuloubu/orgs",
      "repos_url": "https://api.github.com/users/fubuloubu/repos",
      "events_url": "https://api.github.com/users/fubuloubu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fubuloubu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-11-27T14:51:01Z",
    "updated_at": "2019-11-27T14:51:01Z",
    "author_association": "MEMBER",
    "body": "> My biggest concern about this is that locations become compiler-dependent when we implement #1556.\r\n\r\nYes, but that would only be a difference between versions (i.e. once you upgraded to that version of vyper, it should always do the same thing)\r\n\r\nI think it's a really good idea though to separate the domain a bit here via version of this proposal, so we have space to say \"okay, we need to change what `v1` said this encoding was, use `v2`\". At that point, we would also need to introduce a syntax for inter-operating with older versions in code, but it could be done (somehow, maybe decorators?)",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/559119063/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/559119731",
    "html_url": "https://github.com/vyperlang/vyper/issues/1733#issuecomment-559119731",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/1733",
    "id": 559119731,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1OTExOTczMQ==",
    "user": {
      "login": "fubuloubu",
      "id": 3859395,
      "node_id": "MDQ6VXNlcjM4NTkzOTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3859395?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fubuloubu",
      "html_url": "https://github.com/fubuloubu",
      "followers_url": "https://api.github.com/users/fubuloubu/followers",
      "following_url": "https://api.github.com/users/fubuloubu/following{/other_user}",
      "gists_url": "https://api.github.com/users/fubuloubu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fubuloubu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fubuloubu/subscriptions",
      "organizations_url": "https://api.github.com/users/fubuloubu/orgs",
      "repos_url": "https://api.github.com/users/fubuloubu/repos",
      "events_url": "https://api.github.com/users/fubuloubu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fubuloubu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-11-27T14:52:35Z",
    "updated_at": "2019-11-27T14:52:35Z",
    "author_association": "MEMBER",
    "body": "> (although this might be considered a shortcoming, if that is something that the contract writer really, really wants to do)\r\n\r\nWanting to add another member to a struct is a prime example of where this would have adverse effects",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/559119731/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/559120118",
    "html_url": "https://github.com/vyperlang/vyper/issues/1733#issuecomment-559120118",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/1733",
    "id": 559120118,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1OTEyMDExOA==",
    "user": {
      "login": "smarx",
      "id": 35551,
      "node_id": "MDQ6VXNlcjM1NTUx",
      "avatar_url": "https://avatars.githubusercontent.com/u/35551?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/smarx",
      "html_url": "https://github.com/smarx",
      "followers_url": "https://api.github.com/users/smarx/followers",
      "following_url": "https://api.github.com/users/smarx/following{/other_user}",
      "gists_url": "https://api.github.com/users/smarx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/smarx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/smarx/subscriptions",
      "organizations_url": "https://api.github.com/users/smarx/orgs",
      "repos_url": "https://api.github.com/users/smarx/repos",
      "events_url": "https://api.github.com/users/smarx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/smarx/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-11-27T14:53:28Z",
    "updated_at": "2019-11-27T14:53:28Z",
    "author_association": "CONTRIBUTOR",
    "body": "No, I wasn't thinking about hexadecimal encoding (but I did use that shorthand as a way to explain the issue). But rather than worry about the odds a hash will consist solely of valid characters for a variable identifier, it's probably better to just avoid the possibility of an _input_ collision altogether. It's easy to do via a prefix or separator that can't occur in identifiers, like \"#\" or \"\\0\".",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/559120118/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/559120471",
    "html_url": "https://github.com/vyperlang/vyper/issues/1733#issuecomment-559120471",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/1733",
    "id": 559120471,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1OTEyMDQ3MQ==",
    "user": {
      "login": "fubuloubu",
      "id": 3859395,
      "node_id": "MDQ6VXNlcjM4NTkzOTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3859395?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fubuloubu",
      "html_url": "https://github.com/fubuloubu",
      "followers_url": "https://api.github.com/users/fubuloubu/followers",
      "following_url": "https://api.github.com/users/fubuloubu/following{/other_user}",
      "gists_url": "https://api.github.com/users/fubuloubu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fubuloubu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fubuloubu/subscriptions",
      "organizations_url": "https://api.github.com/users/fubuloubu/orgs",
      "repos_url": "https://api.github.com/users/fubuloubu/repos",
      "events_url": "https://api.github.com/users/fubuloubu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fubuloubu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-11-27T14:54:19Z",
    "updated_at": "2019-11-27T15:10:53Z",
    "author_association": "MEMBER",
    "body": "> One way of dealing with this is to mangle the packing strategy\r\n\r\nThis is a good idea, we could define a decorator e.g. `bits: packed(bool[128])` that does this same thing, AND makes it more clear in code that you are packing i.e. it becomes an opt-in strategy.\r\n\r\n---\r\n\r\nEDIT: We could also define packing versioning e.g. `bits: packed(bool[128], version=1)`",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/559120471/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/559121280",
    "html_url": "https://github.com/vyperlang/vyper/issues/1733#issuecomment-559121280",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/1733",
    "id": 559121280,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1OTEyMTI4MA==",
    "user": {
      "login": "fubuloubu",
      "id": 3859395,
      "node_id": "MDQ6VXNlcjM4NTkzOTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3859395?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fubuloubu",
      "html_url": "https://github.com/fubuloubu",
      "followers_url": "https://api.github.com/users/fubuloubu/followers",
      "following_url": "https://api.github.com/users/fubuloubu/following{/other_user}",
      "gists_url": "https://api.github.com/users/fubuloubu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fubuloubu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fubuloubu/subscriptions",
      "organizations_url": "https://api.github.com/users/fubuloubu/orgs",
      "repos_url": "https://api.github.com/users/fubuloubu/repos",
      "events_url": "https://api.github.com/users/fubuloubu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fubuloubu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-11-27T14:56:10Z",
    "updated_at": "2019-11-27T14:56:10Z",
    "author_association": "MEMBER",
    "body": "> No, I wasn't thinking about hexadecimal encoding (but I did use that shorthand as a way to explain the issue). But rather than worry about the odds a hash will consist solely of valid characters for a variable identifier, it's probably better to just avoid the possibility of an _input_ collision altogether. It's easy to do via a prefix or separator that can't occur in identifiers, like \"#\" or \"\\0\".\r\n\r\nYes but the string version of the hash would not be `abc123...`, it would be `Iz@n;1yBzc&KnvY?D[F/...` which would not be a valid Vyper identifier",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/559121280/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/559121940",
    "html_url": "https://github.com/vyperlang/vyper/issues/1733#issuecomment-559121940",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/1733",
    "id": 559121940,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1OTEyMTk0MA==",
    "user": {
      "login": "fubuloubu",
      "id": 3859395,
      "node_id": "MDQ6VXNlcjM4NTkzOTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3859395?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fubuloubu",
      "html_url": "https://github.com/fubuloubu",
      "followers_url": "https://api.github.com/users/fubuloubu/followers",
      "following_url": "https://api.github.com/users/fubuloubu/following{/other_user}",
      "gists_url": "https://api.github.com/users/fubuloubu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fubuloubu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fubuloubu/subscriptions",
      "organizations_url": "https://api.github.com/users/fubuloubu/orgs",
      "repos_url": "https://api.github.com/users/fubuloubu/repos",
      "events_url": "https://api.github.com/users/fubuloubu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fubuloubu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-11-27T14:57:41Z",
    "updated_at": "2019-11-27T14:57:41Z",
    "author_association": "MEMBER",
    "body": "Finding an _actual_ pre-image collision would be difficult because of keccak's 2nd preimage collision resistance, and it would most likely not be a valid version identifier anyways, so I don't think it's really a practical concern.",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/559121940/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/559129457",
    "html_url": "https://github.com/vyperlang/vyper/issues/1733#issuecomment-559129457",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/1733",
    "id": 559129457,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1OTEyOTQ1Nw==",
    "user": {
      "login": "smarx",
      "id": 35551,
      "node_id": "MDQ6VXNlcjM1NTUx",
      "avatar_url": "https://avatars.githubusercontent.com/u/35551?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/smarx",
      "html_url": "https://github.com/smarx",
      "followers_url": "https://api.github.com/users/smarx/followers",
      "following_url": "https://api.github.com/users/smarx/following{/other_user}",
      "gists_url": "https://api.github.com/users/smarx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/smarx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/smarx/subscriptions",
      "organizations_url": "https://api.github.com/users/smarx/orgs",
      "repos_url": "https://api.github.com/users/smarx/repos",
      "events_url": "https://api.github.com/users/smarx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/smarx/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-11-27T15:16:03Z",
    "updated_at": "2019-11-27T15:16:03Z",
    "author_association": "CONTRIBUTOR",
    "body": "> Yes but the string version of the hash would not be abc123..., it would be Iz@n;1yBzc&KnvY?D[F/... which would not be a valid Vyper identifier\r\n\r\n_Most_ hashes would not be valid Vyper identifiers. Some would. I don't really care to figure out how many because this problem is trivial to solve.",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/559129457/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/559140697",
    "html_url": "https://github.com/vyperlang/vyper/issues/1733#issuecomment-559140697",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/1733",
    "id": 559140697,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1OTE0MDY5Nw==",
    "user": {
      "login": "fubuloubu",
      "id": 3859395,
      "node_id": "MDQ6VXNlcjM4NTkzOTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3859395?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fubuloubu",
      "html_url": "https://github.com/fubuloubu",
      "followers_url": "https://api.github.com/users/fubuloubu/followers",
      "following_url": "https://api.github.com/users/fubuloubu/following{/other_user}",
      "gists_url": "https://api.github.com/users/fubuloubu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fubuloubu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fubuloubu/subscriptions",
      "organizations_url": "https://api.github.com/users/fubuloubu/orgs",
      "repos_url": "https://api.github.com/users/fubuloubu/repos",
      "events_url": "https://api.github.com/users/fubuloubu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fubuloubu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-11-27T15:42:32Z",
    "updated_at": "2019-11-27T15:45:05Z",
    "author_association": "MEMBER",
    "body": "I still think the likelihood is astronomically small, but regardless it's definitely a good idea to have a domain separator anyways, and I think @charles-cooper's suggestion of versioning of this mechanism being incorporated into the domain separation is what we need.\r\n\r\nThe revised suggestion would be something like:\r\n```\r\nindex(v) := keccak('{index-version}#' ++ v.name [++ '#{packing-version}'])\r\n```\r\nwhere `index-version` is the version of this proposal in use, and `packing-version` is the version of the tight packing proposal in use (if used at all, e.g. opt-in)",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/559140697/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/563298174",
    "html_url": "https://github.com/vyperlang/vyper/issues/1733#issuecomment-563298174",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/1733",
    "id": 563298174,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU2MzI5ODE3NA==",
    "user": {
      "login": "jacqueswww",
      "id": 6917456,
      "node_id": "MDQ6VXNlcjY5MTc0NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6917456?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jacqueswww",
      "html_url": "https://github.com/jacqueswww",
      "followers_url": "https://api.github.com/users/jacqueswww/followers",
      "following_url": "https://api.github.com/users/jacqueswww/following{/other_user}",
      "gists_url": "https://api.github.com/users/jacqueswww/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jacqueswww/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jacqueswww/subscriptions",
      "organizations_url": "https://api.github.com/users/jacqueswww/orgs",
      "repos_url": "https://api.github.com/users/jacqueswww/repos",
      "events_url": "https://api.github.com/users/jacqueswww/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jacqueswww/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-12-09T15:42:30Z",
    "updated_at": "2019-12-09T15:42:30Z",
    "author_association": "CONTRIBUTOR",
    "body": "Meeting notes:\r\n- Provisionally approved; \r\n- The recommended approach would be to implement something similar to memoryallocator class that would allow easy retrieval of a storage slot first.\r\n- Then we can implement alternate strategies like this one.",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/563298174/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/563304337",
    "html_url": "https://github.com/vyperlang/vyper/issues/1733#issuecomment-563304337",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/1733",
    "id": 563304337,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU2MzMwNDMzNw==",
    "user": {
      "login": "fubuloubu",
      "id": 3859395,
      "node_id": "MDQ6VXNlcjM4NTkzOTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3859395?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fubuloubu",
      "html_url": "https://github.com/fubuloubu",
      "followers_url": "https://api.github.com/users/fubuloubu/followers",
      "following_url": "https://api.github.com/users/fubuloubu/following{/other_user}",
      "gists_url": "https://api.github.com/users/fubuloubu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fubuloubu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fubuloubu/subscriptions",
      "organizations_url": "https://api.github.com/users/fubuloubu/orgs",
      "repos_url": "https://api.github.com/users/fubuloubu/repos",
      "events_url": "https://api.github.com/users/fubuloubu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fubuloubu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-12-09T15:56:21Z",
    "updated_at": "2019-12-09T15:56:21Z",
    "author_association": "MEMBER",
    "body": "Other ideas: have the storage allocation strategy be configurable via compiler flag or external API",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/563304337/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/563314533",
    "html_url": "https://github.com/vyperlang/vyper/issues/1733#issuecomment-563314533",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/1733",
    "id": 563314533,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU2MzMxNDUzMw==",
    "user": {
      "login": "fubuloubu",
      "id": 3859395,
      "node_id": "MDQ6VXNlcjM4NTkzOTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3859395?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fubuloubu",
      "html_url": "https://github.com/fubuloubu",
      "followers_url": "https://api.github.com/users/fubuloubu/followers",
      "following_url": "https://api.github.com/users/fubuloubu/following{/other_user}",
      "gists_url": "https://api.github.com/users/fubuloubu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fubuloubu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fubuloubu/subscriptions",
      "organizations_url": "https://api.github.com/users/fubuloubu/orgs",
      "repos_url": "https://api.github.com/users/fubuloubu/repos",
      "events_url": "https://api.github.com/users/fubuloubu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fubuloubu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-12-09T16:18:48Z",
    "updated_at": "2019-12-09T16:18:48Z",
    "author_association": "MEMBER",
    "body": "Note: Internal variables must have their own namespace",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/563314533/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
