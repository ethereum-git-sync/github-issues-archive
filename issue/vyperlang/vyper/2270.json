{
  "url": "https://api.github.com/repos/vyperlang/vyper/issues/2270",
  "repository_url": "https://api.github.com/repos/vyperlang/vyper",
  "labels_url": "https://api.github.com/repos/vyperlang/vyper/issues/2270/labels{/name}",
  "comments_url": "https://api.github.com/repos/vyperlang/vyper/issues/2270/comments",
  "events_url": "https://api.github.com/repos/vyperlang/vyper/issues/2270/events",
  "html_url": "https://github.com/vyperlang/vyper/issues/2270",
  "id": 777500603,
  "node_id": "MDU6SXNzdWU3Nzc1MDA2MDM=",
  "number": 2270,
  "title": "Vyper bool doesn't match the SolidityProxy bool variable",
  "user": {
    "login": "lebed2045",
    "id": 1270800,
    "node_id": "MDQ6VXNlcjEyNzA4MDA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1270800?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/lebed2045",
    "html_url": "https://github.com/lebed2045",
    "followers_url": "https://api.github.com/users/lebed2045/followers",
    "following_url": "https://api.github.com/users/lebed2045/following{/other_user}",
    "gists_url": "https://api.github.com/users/lebed2045/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/lebed2045/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/lebed2045/subscriptions",
    "organizations_url": "https://api.github.com/users/lebed2045/orgs",
    "repos_url": "https://api.github.com/users/lebed2045/repos",
    "events_url": "https://api.github.com/users/lebed2045/events{/privacy}",
    "received_events_url": "https://api.github.com/users/lebed2045/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 1,
  "created_at": "2021-01-02T18:01:03Z",
  "updated_at": "2021-01-02T18:50:36Z",
  "closed_at": "2021-01-02T18:50:36Z",
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "I'm not sure whether it's a bug or my lack of experience with Vyper\r\n\r\n### What's your issue about?\r\n*  ([min reproducible code](https://github.com/lebed2045/vyperSolidityProxy) I could make)\r\n\r\nI have very simple Vyper contract\r\n```\r\na: public(address)\r\nb: public(bool)\r\nc: public(uint256)\r\n\r\n@external\r\ndef __init__(_a: address):\r\n    self.a = _a\r\n    self.c = block.timestamp + 2\r\n\r\n@external\r\ndef set_b_true():\r\n    self.b = True\r\n```\r\nand Solidity delegator with OZ proxy [full code](https://github.com/lebed2045/vyperSolidityProxy/blob/main/contracts/SolidityProxy.sol)\r\n```\r\ncontract SolidityProxy {\r\n    address public a;\r\n    bool public b;\r\n    uint256 public c;\r\n\r\n    constructor(address _a) public {\r\n        a = _a;\r\n        c = block.timestamp + 2;\r\n    }\r\n // The proxy code is from https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/proxy/Proxy.sol\r\n...\r\n\r\n```\r\n\r\nnow, if you call `set_b_true` via Proxy - your `c` variable would 1, but `b` won't be affected. \r\nYou might think the the proxy code is wrong, but I tried two different impl and both worked with everything except bool variable, including arrays (but array with constant size in Vyper somehow only work with array with dynamic size in Solidity proxy so I assume it's my lack of understanding of laguages?)\r\n\r\n```\r\nconst VyperContract = artifacts.require('VyperContract');\r\nconst SolidityProxy = artifacts.require('SolidityProxy');\r\n\r\ncontract('test', (accounts) => {\r\n\r\n    beforeEach(async () => {\r\n        const [a] =  accounts;\r\n        this.vyperContract = await VyperContract.new(a);\r\n        this.solidityProxy = await SolidityProxy.new(a, this.vyperContract.address);\r\n        this.solidityProxy = await VyperContract.at(this.solidityProxy.address);\r\n    });\r\n\r\n    const getState = async (myContract) =>  {\r\n        const a = ((await myContract.a()).toString());\r\n        const b = ((await myContract.b()).toString());\r\n        const c = ((await myContract.c()).toString());\r\n        return {a, b, c};\r\n    }\r\n\r\n    it(\"compareStates\", async() => {\r\n        // since it's the contracts the same - you would expect the variables are the same as well\r\n        console.log(await getState(this.vyperContract));\r\n        // {\r\n        //     a: '0xA51043a9afD5e8Fd2869b2cb6d83b568650CB4A4',\r\n        //     b: 'false',\r\n        //     c: '1609608804'\r\n        // }\r\n        console.log(await getState(this.solidityProxy));\r\n        // {\r\n        //     a: '0xA51043a9afD5e8Fd2869b2cb6d83b568650CB4A4',\r\n        //     b: 'false',\r\n        //     c: '1609608805'\r\n        // }\r\n\r\n        await this.solidityProxy.set_b_true();\r\n        console.log(await getState(this.solidityProxy));\r\n        // { a: '0xA51043a9afD5e8Fd2869b2cb6d83b568650CB4A4', b: 'false', c: '1' }\r\n        // different result is expected!!!\r\n    });\r\n});\r\n```\r\n\r\n\r\n\r\n### Version Information\r\n\r\n* vyper Version (output of `vyper --version`): x.x.x\r\nvyper: 0.2.8+commit.069936f\r\nsolc:  0.6.12+commit.27d51765.Emscripten.clang\r\n* OS: osx/linux/win\r\nmacOS 10.13.6 MacBook Pro (Retina, 13-inch, Late 2012) \r\n* Python Version (output of `python --version`):\r\nPython 3.9.1\r\n* Environment (output of `pip freeze`):\r\n`\r\napipkg==1.5\r\nappdirs==1.4.4\r\nasttokens==2.0.4\r\nattrs==20.2.0\r\nbase58==2.0.1\r\nbitarray==1.2.2\r\nblack==19.10b0\r\ncertifi==2020.6.20\r\nchardet==3.0.4\r\nclick==7.1.2\r\ncytoolz==0.11.0\r\neth-abi==2.1.1\r\neth-account==0.5.2\r\neth-brownie==1.11.10\r\neth-event==1.2.0\r\neth-hash==0.2.0\r\neth-keyfile==0.5.1\r\neth-keys==0.3.3\r\neth-rlp==0.2.1\r\neth-typing==2.2.2\r\neth-utils==1.9.5\r\nexecnet==1.7.1\r\nhexbytes==0.2.1\r\nhypothesis==5.35.0\r\nidna==2.10\r\ninflection==0.5.0\r\niniconfig==1.1.1\r\nipfshttpclient==0.6.1\r\njsonschema==3.2.0\r\nlru-dict==1.1.6\r\nmore-itertools==8.5.0\r\nmultiaddr==0.0.9\r\nmythx-models==1.9.1\r\nnetaddr==0.8.0\r\npackaging==20.4\r\nparsimonious==0.8.1\r\npathspec==0.8.0\r\npluggy==0.13.1\r\nprompt-toolkit==3.0.7\r\nprotobuf==3.13.0\r\npsutil==5.7.3\r\npy==1.9.0\r\npy-solc-ast==1.2.5\r\npy-solc-x==1.0.0\r\npycryptodome==3.9.8\r\nPygments==2.6.1\r\npygments-lexer-solidity==0.5.1\r\nPyJWT==1.7.1\r\npyparsing==2.4.7\r\npyrsistent==0.17.3\r\npytest==6.0.1\r\npytest-forked==1.3.0\r\npytest-xdist==1.34.0\r\npython-dateutil==2.8.1\r\npython-dotenv==0.15.0\r\npythx==1.6.1\r\nPyYAML==5.3.1\r\nregex==2020.10.28\r\nrequests==2.24.0\r\nrlp==1.2.0\r\nsemantic-version==2.8.5\r\nsix==1.15.0\r\nsortedcontainers==2.2.2\r\ntoml==0.10.1\r\ntoolz==0.11.1\r\ntqdm==4.48.2\r\ntyped-ast==1.4.1\r\nurllib3==1.25.11\r\nvarint==1.0.2\r\nvvm==0.1.0\r\nvyper==0.2.8\r\nwcwidth==0.2.5\r\nweb3==5.11.1\r\nwebsockets==8.1\r\n`\r\n\r\n\r\n### How can it be fixed?\r\n\r\nI think the example of working proxy would be great? I don't know\r\n",
  "closed_by": {
    "login": "fubuloubu",
    "id": 3859395,
    "node_id": "MDQ6VXNlcjM4NTkzOTU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/3859395?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/fubuloubu",
    "html_url": "https://github.com/fubuloubu",
    "followers_url": "https://api.github.com/users/fubuloubu/followers",
    "following_url": "https://api.github.com/users/fubuloubu/following{/other_user}",
    "gists_url": "https://api.github.com/users/fubuloubu/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/fubuloubu/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/fubuloubu/subscriptions",
    "organizations_url": "https://api.github.com/users/fubuloubu/orgs",
    "repos_url": "https://api.github.com/users/fubuloubu/repos",
    "events_url": "https://api.github.com/users/fubuloubu/events{/privacy}",
    "received_events_url": "https://api.github.com/users/fubuloubu/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/2270/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/vyperlang/vyper/issues/2270/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/753514898",
    "html_url": "https://github.com/vyperlang/vyper/issues/2270#issuecomment-753514898",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/2270",
    "id": 753514898,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc1MzUxNDg5OA==",
    "user": {
      "login": "fubuloubu",
      "id": 3859395,
      "node_id": "MDQ6VXNlcjM4NTkzOTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3859395?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fubuloubu",
      "html_url": "https://github.com/fubuloubu",
      "followers_url": "https://api.github.com/users/fubuloubu/followers",
      "following_url": "https://api.github.com/users/fubuloubu/following{/other_user}",
      "gists_url": "https://api.github.com/users/fubuloubu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fubuloubu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fubuloubu/subscriptions",
      "organizations_url": "https://api.github.com/users/fubuloubu/orgs",
      "repos_url": "https://api.github.com/users/fubuloubu/repos",
      "events_url": "https://api.github.com/users/fubuloubu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fubuloubu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-01-02T18:50:36Z",
    "updated_at": "2021-01-02T18:50:36Z",
    "author_association": "MEMBER",
    "body": "The fundamental problem here is that Vyper's and Solidity's storage allocation algorithms are deeply incompatible, and there exists no standard for how storage allocation should work or be cross-language compatible.\r\n\r\nWe have some ideas for a robust standardization (see VIP #1733), but none of them are practical yet, and even if they were, Solidity would have to adopt the same standard for them to be interoperable.\r\n\r\nHere is a great blog post to understand the dangers of upgradeability patterns, which is some of the reasoning behind why Vyper does not support what you are doing, and probably will never support, as it is a brittle pattern.\r\nhttps://blog.trailofbits.com/2018/09/05/contract-upgrade-anti-patterns/\r\n\r\nClosing this for now, I'm sorry we could not resolve your issue in the way you expected, but that is by design",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/753514898/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
