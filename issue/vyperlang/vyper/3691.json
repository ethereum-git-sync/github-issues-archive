{
  "url": "https://api.github.com/repos/vyperlang/vyper/issues/3691",
  "repository_url": "https://api.github.com/repos/vyperlang/vyper",
  "labels_url": "https://api.github.com/repos/vyperlang/vyper/issues/3691/labels{/name}",
  "comments_url": "https://api.github.com/repos/vyperlang/vyper/issues/3691/comments",
  "events_url": "https://api.github.com/repos/vyperlang/vyper/issues/3691/events",
  "html_url": "https://github.com/vyperlang/vyper/issues/3691",
  "id": 2041948180,
  "node_id": "I_kwDOBGDvrM55tagU",
  "number": 3691,
  "title": "Internal Compiler Error When Compiling Oracle",
  "user": {
    "login": "ControlCplusControlV",
    "id": 44706811,
    "node_id": "MDQ6VXNlcjQ0NzA2ODEx",
    "avatar_url": "https://avatars.githubusercontent.com/u/44706811?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/ControlCplusControlV",
    "html_url": "https://github.com/ControlCplusControlV",
    "followers_url": "https://api.github.com/users/ControlCplusControlV/followers",
    "following_url": "https://api.github.com/users/ControlCplusControlV/following{/other_user}",
    "gists_url": "https://api.github.com/users/ControlCplusControlV/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/ControlCplusControlV/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/ControlCplusControlV/subscriptions",
    "organizations_url": "https://api.github.com/users/ControlCplusControlV/orgs",
    "repos_url": "https://api.github.com/users/ControlCplusControlV/repos",
    "events_url": "https://api.github.com/users/ControlCplusControlV/events{/privacy}",
    "received_events_url": "https://api.github.com/users/ControlCplusControlV/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 1,
  "created_at": "2023-12-14T15:33:48Z",
  "updated_at": "2024-01-02T21:34:00Z",
  "closed_at": "2024-01-02T21:34:00Z",
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "### Version Information\r\n\r\n* vyper Version (output of `vyper --version`): 0.3.10+commit.9136169\r\n* OS: osx\r\n* Python Version (output of `python --version`): Python 3.11.6\r\n\r\n### What's your issue about?\r\n\r\n```\r\n# @version 0.3.10\r\n\r\ninterface IOracle:\r\n  def get() -> (bool, uint256): nonpayable\r\n  def peek() -> (bool, uint256): view\r\n  def peekSpot() -> uint256: view\r\n\r\ninterface AmbientOracle:\r\n  def queryPrice(base: address, quote: address, poolIdx: uint256) -> uint128: nonpayable\r\n\r\nlens: public(immutable(address))\r\ntoken0: public(immutable(address))\r\ntoken1: public(immutable(address))\r\npriceToken: public(immutable(address))\r\n\r\nwad: constant(uint256) = 10 ** 18\r\n\r\nlast_price: public(uint256)\r\n\r\n@external\r\ndef __init__(_lens: address, tokenA: address, tokenB: address, _priceToken: address):\r\n  lens = _lens\r\n  priceToken = _priceToken\r\n\r\n  _token0: address = empty(address)\r\n  _token1: address = empty(address)\r\n  if convert(convert(tokenA, bytes32), uint256) > convert(convert(tokenB, bytes32), uint256):\r\n    _token0 = tokenA\r\n    _token1 = tokenB\r\n  else:\r\n    _token0 = tokenB\r\n    _token1 = tokenA\r\n  token0 = _token0\r\n  token1 = _token1\r\n\r\n@view\r\n@internal\r\ndef calculate_price() -> uint256:\r\n  average_price: uint256 = convert(AmbientOracle(lens).queryPrice(token0, token1, 420), uint256)\r\n  full_price: uint256 = self.mul_div(average_price, average_price, 2**64, False)\r\n  normalized_price: uint256 = self.mul_div(full_price, wad, 2**64, False)\r\n\r\n  if token1 == priceToken:\r\n    return (1 * normalized_price) * wad\r\n  else:\r\n    return ((wad * wad) / normalized_price) / wad\r\n\r\n@external\r\ndef get() -> (bool, uint256):\r\n  new_price: uint256 = self.calculate_price()\r\n  if new_price != self.last_price:\r\n    self.last_price = new_price\r\n    return (True, new_price)\r\n  else:\r\n    # Out of caution return new_price anyway, and save an SLOAD\r\n    # We did check they are equal implicitly as well\r\n    return (False, new_price)\r\n\r\n@view\r\n@external\r\ndef peek() -> (bool, uint256):\r\n  new_price: uint256 = self.calculate_price()\r\n  if new_price != self.last_price:\r\n    return (True, new_price)\r\n  else:\r\n    # Out of caution return new_price anyway, and save an SLOAD\r\n    # We did check they are equal implicitly as well\r\n    return (False, new_price)\r\n\r\n@view\r\n@external\r\ndef peekSpot() -> uint256:\r\n  return self.calculate_price()\r\n\r\n\r\n@internal\r\n@pure\r\ndef mul_div(x: uint256, y: uint256, denominator: uint256, roundup: bool) -> uint256:\r\n    \"\"\"\r\n    @dev Calculates \"(x * y) / denominator\" in 512-bit precision,\r\n         following the selected rounding direction.\r\n    @notice The implementation is inspired by Remco Bloemen's\r\n            implementation under the MIT license here:\r\n            https://xn--2-umb.com/21/muldiv.\r\n            Furthermore, the rounding direction design pattern is\r\n            inspired by OpenZeppelin's implementation here:\r\n            https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/math/Math.sol.\r\n    @param x The 32-byte multiplicand.\r\n    @param y The 32-byte multiplier.\r\n    @param denominator The 32-byte divisor.\r\n    @param roundup The Boolean variable that specifies whether\r\n           to round up or not. The default `False` is round down.\r\n    @return uint256 The 32-byte calculation result.\r\n    \"\"\"\r\n    # Handle division by zero.\r\n    assert denominator != empty(uint256), \"Math: mul_div division by zero\"\r\n\r\n    # 512-bit multiplication \"[prod1 prod0] = x * y\".\r\n    # Compute the product \"mod 2**256\" and \"mod 2**256 - 1\".\r\n    # Then use the Chinese Remainder theorem to reconstruct\r\n    # the 512-bit result. The result is stored in two 256-bit\r\n    # variables, where: \"product = prod1 * 2**256 + prod0\".\r\n    mm: uint256 = uint256_mulmod(x, y, max_value(uint256))\r\n    # The least significant 256 bits of the product.\r\n    prod0: uint256 = unsafe_mul(x, y)\r\n    # The most significant 256 bits of the product.\r\n    prod1: uint256 = empty(uint256)\r\n\r\n    if (mm < prod0):\r\n        prod1 = unsafe_sub(unsafe_sub(mm, prod0), 1)\r\n    else:\r\n        prod1 = unsafe_sub(mm, prod0)\r\n\r\n    # Handling of non-overflow cases, 256 by 256 division.\r\n    if (prod1 == empty(uint256)):\r\n        if (roundup and uint256_mulmod(x, y, denominator) != empty(uint256)):\r\n            # Calculate \"ceil((x * y) / denominator)\". The following\r\n            # line cannot overflow because we have the previous check\r\n            # \"(x * y) % denominator != 0\", which accordingly rules out\r\n            # the possibility of \"x * y = 2**256 - 1\" and `denominator == 1`.\r\n            return unsafe_add(unsafe_div(prod0, denominator), 1)\r\n        else:\r\n            return unsafe_div(prod0, denominator)\r\n\r\n    # Ensure that the result is less than 2**256. Also,\r\n    # prevents that `denominator == 0`.\r\n    assert denominator > prod1, \"Math: mul_div overflow\"\r\n\r\n    #######################\r\n    # 512 by 256 Division #\r\n    #######################\r\n\r\n    # Make division exact by subtracting the remainder\r\n    # from \"[prod1 prod0]\". First, compute remainder using\r\n    # the `uint256_mulmod` operation.\r\n    remainder: uint256 = uint256_mulmod(x, y, denominator)\r\n\r\n    # Second, subtract the 256-bit number from the 512-bit\r\n    # number.\r\n    if (remainder > prod0):\r\n        prod1 = unsafe_sub(prod1, 1)\r\n    prod0 = unsafe_sub(prod0, remainder)\r\n\r\n    # Factor powers of two out of the denominator and calculate\r\n    # the largest power of two divisor of denominator. Always `>= 1`,\r\n    # unless the denominator is zero (which is prevented above),\r\n    # in which case `twos` is zero. For more details, please refer to:\r\n    # https://cs.stackexchange.com/q/138556.\r\n    twos: uint256 = unsafe_sub(0, denominator) & denominator\r\n    # Divide denominator by `twos`.\r\n    denominator_div: uint256 = unsafe_div(denominator, twos)\r\n    # Divide \"[prod1 prod0]\" by `twos`.\r\n    prod0 = unsafe_div(prod0, twos)\r\n    # Flip `twos` such that it is \"2**256 / twos\". If `twos` is zero,\r\n    # it becomes one.\r\n    twos = unsafe_add(unsafe_div(unsafe_sub(empty(uint256), twos), twos), 1)\r\n\r\n    # Shift bits from `prod1` to `prod0`.\r\n    prod0 |= unsafe_mul(prod1, twos)\r\n\r\n    # Invert the denominator \"mod 2**256\". Since the denominator is\r\n    # now an odd number, it has an inverse modulo 2**256, so we have:\r\n    # \"denominator * inverse = 1 mod 2**256\". Calculate the inverse by\r\n    # starting with a seed that is correct for four bits. That is,\r\n    # \"denominator * inverse = 1 mod 2**4\".\r\n    inverse: uint256 = unsafe_mul(3, denominator_div) ^ 2\r\n\r\n    # Use Newton-Raphson iteration to improve accuracy. Thanks to Hensel's\r\n    # lifting lemma, this also works in modular arithmetic by doubling the\r\n    # correct bits in each step.\r\n    inverse = unsafe_mul(inverse, unsafe_sub(2, unsafe_mul(denominator_div, inverse))) # Inverse \"mod 2**8\".\r\n    inverse = unsafe_mul(inverse, unsafe_sub(2, unsafe_mul(denominator_div, inverse))) # Inverse \"mod 2**16\".\r\n    inverse = unsafe_mul(inverse, unsafe_sub(2, unsafe_mul(denominator_div, inverse))) # Inverse \"mod 2**32\".\r\n    inverse = unsafe_mul(inverse, unsafe_sub(2, unsafe_mul(denominator_div, inverse))) # Inverse \"mod 2**64\".\r\n    inverse = unsafe_mul(inverse, unsafe_sub(2, unsafe_mul(denominator_div, inverse))) # Inverse \"mod 2**128\".\r\n    inverse = unsafe_mul(inverse, unsafe_sub(2, unsafe_mul(denominator_div, inverse))) # Inverse \"mod 2**256\".\r\n\r\n    # Since the division is now exact, we can divide by multiplying\r\n    # with the modular inverse of the denominator. This returns the\r\n    # correct result modulo 2**256. Since the preconditions guarantee\r\n    # that the result is less than 2**256, this is the final result.\r\n    # We do not need to calculate the high bits of the result and\r\n    # `prod1` is no longer necessary.\r\n    result: uint256 = unsafe_mul(prod0, inverse)\r\n\r\n    if (roundup and uint256_mulmod(x, y, denominator) != empty(uint256)):\r\n        # Calculate \"ceil((x * y) / denominator)\". The following\r\n        # line uses intentionally checked arithmetic to prevent\r\n        # a theoretically possible overflow.\r\n        result += 1\r\n\r\n    return result\r\n```\r\n\r\nPlease include information like:\r\n\r\n```\r\ncli specified: `Settings(compiler_version=None, optimize=None, evm_version=None)`\r\nError compiling: src/oracles/AmbientOracle.vy\r\nTraceback (most recent call last):\r\n  File \"/opt/homebrew/bin/vyper\", line 8, in <module>\r\n    sys.exit(_parse_cli_args())\r\n             ^^^^^^^^^^^^^^^^^\r\n  File \"/opt/homebrew/lib/python3.11/site-packages/vyper/cli/vyper_compile.py\", line 63, in _parse_cli_args\r\n    return _parse_args(sys.argv[1:])\r\n           ^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"/opt/homebrew/lib/python3.11/site-packages/vyper/cli/vyper_compile.py\", line 185, in _parse_args\r\n    compiled = compile_files(\r\n               ^^^^^^^^^^^^^^\r\n  File \"/opt/homebrew/lib/python3.11/site-packages/vyper/cli/vyper_compile.py\", line 321, in compile_files\r\n    compiler_data = vyper.compile_codes(\r\n                    ^^^^^^^^^^^^^^^^^^^^\r\n  File \"/opt/homebrew/lib/python3.11/site-packages/vyper/compiler/__init__.py\", line 143, in compile_codes\r\n    exc_handler(contract_name, exc)\r\n  File \"/opt/homebrew/lib/python3.11/site-packages/vyper/cli/vyper_compile.py\", line 219, in exc_handler\r\n    raise exception\r\n  File \"/opt/homebrew/lib/python3.11/site-packages/vyper/compiler/__init__.py\", line 140, in compile_codes\r\n    out[contract_name][output_format] = formatter(compiler_data)\r\n                                        ^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"/opt/homebrew/lib/python3.11/site-packages/vyper/compiler/output.py\", line 262, in build_bytecode_output\r\n    return f\"0x{compiler_data.bytecode.hex()}\"\r\n                ^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"/opt/homebrew/Cellar/python@3.11/3.11.6/Frameworks/Python.framework/Versions/3.11/lib/python3.11/functools.py\", line 1001, in __get__\r\n    val = self.func(instance)\r\n          ^^^^^^^^^^^^^^^^^^^\r\n  File \"/opt/homebrew/lib/python3.11/site-packages/vyper/compiler/phases.py\", line 193, in bytecode\r\n    return generate_bytecode(self.assembly, insert_compiler_metadata=insert_compiler_metadata)\r\n                             ^^^^^^^^^^^^^\r\n  File \"/opt/homebrew/Cellar/python@3.11/3.11.6/Frameworks/Python.framework/Versions/3.11/lib/python3.11/functools.py\", line 1001, in __get__\r\n    val = self.func(instance)\r\n          ^^^^^^^^^^^^^^^^^^^\r\n  File \"/opt/homebrew/lib/python3.11/site-packages/vyper/compiler/phases.py\", line 184, in assembly\r\n    return generate_assembly(self.ir_nodes, self.settings.optimize)\r\n                             ^^^^^^^^^^^^^\r\n  File \"/opt/homebrew/lib/python3.11/site-packages/vyper/compiler/phases.py\", line 165, in ir_nodes\r\n    ir, ir_runtime = self._ir_output\r\n                     ^^^^^^^^^^^^^^^\r\n  File \"/opt/homebrew/Cellar/python@3.11/3.11.6/Frameworks/Python.framework/Versions/3.11/lib/python3.11/functools.py\", line 1001, in __get__\r\n    val = self.func(instance)\r\n          ^^^^^^^^^^^^^^^^^^^\r\n  File \"/opt/homebrew/lib/python3.11/site-packages/vyper/compiler/phases.py\", line 161, in _ir_output\r\n    return generate_ir_nodes(self.global_ctx, self.settings.optimize)\r\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"/opt/homebrew/lib/python3.11/site-packages/vyper/compiler/phases.py\", line 299, in generate_ir_nodes\r\n    ir_nodes, ir_runtime = module.generate_ir_for_module(global_ctx)\r\n                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"/opt/homebrew/lib/python3.11/site-packages/vyper/codegen/module.py\", line 424, in generate_ir_for_module\r\n    func_ir = _ir_for_internal_function(func_ast, global_ctx, False)\r\n              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"/opt/homebrew/lib/python3.11/site-packages/vyper/codegen/module.py\", line 86, in _ir_for_internal_function\r\n    return generate_ir_for_function(func_ast, *args, **kwargs).func_ir\r\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"/opt/homebrew/lib/python3.11/site-packages/vyper/codegen/function_definitions/common.py\", line 137, in generate_ir_for_function\r\n    ret: FuncIR = InternalFuncIR(generate_ir_for_internal_function(code, func_t, context))\r\n                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"/opt/homebrew/lib/python3.11/site-packages/vyper/codegen/function_definitions/internal_function.py\", line 61, in generate_ir_for_internal_function\r\n    [\"seq\"] + nonreentrant_pre + [parse_body(code.body, context, ensure_terminated=True)],\r\n                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"/opt/homebrew/lib/python3.11/site-packages/vyper/codegen/stmt.py\", line 446, in parse_body\r\n    ir = parse_stmt(stmt, context)\r\n         ^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"/opt/homebrew/lib/python3.11/site-packages/vyper/codegen/stmt.py\", line 420, in parse_stmt\r\n    return Stmt(stmt, context).ir_node\r\n           ^^^^^^^^^^^^^^^^^^^\r\n  File \"/opt/homebrew/lib/python3.11/site-packages/vyper/codegen/stmt.py\", line 41, in __init__\r\n    self.ir_node = fn()\r\n                   ^^^^\r\n  File \"/opt/homebrew/lib/python3.11/site-packages/vyper/codegen/stmt.py\", line 68, in parse_AnnAssign\r\n    rhs = Expr(self.stmt.value, self.context).ir_node\r\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"/opt/homebrew/lib/python3.11/site-packages/vyper/codegen/expr.py\", line 80, in __init__\r\n    self.ir_node = fn()\r\n                   ^^^^\r\n  File \"/opt/homebrew/lib/python3.11/site-packages/vyper/codegen/expr.py\", line 663, in parse_Call\r\n    return DISPATCH_TABLE[function_name].build_IR(self.expr, self.context)\r\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"/opt/homebrew/lib/python3.11/site-packages/vyper/builtins/functions.py\", line 232, in build_IR\r\n    return convert(expr, context)\r\n           ^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"/opt/homebrew/lib/python3.11/site-packages/vyper/builtins/_convert.py\", line 459, in convert\r\n    arg = Expr(arg_ast, context).ir_node\r\n          ^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"/opt/homebrew/lib/python3.11/site-packages/vyper/codegen/expr.py\", line 80, in __init__\r\n    self.ir_node = fn()\r\n                   ^^^^\r\n  File \"/opt/homebrew/lib/python3.11/site-packages/vyper/codegen/expr.py\", line 697, in parse_Call\r\n    return external_call.ir_for_external_call(self.expr, self.context)\r\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"/opt/homebrew/lib/python3.11/site-packages/vyper/codegen/external_call.py\", line 233, in ir_for_external_call\r\n    _external_call_helper(contract_address, args_ir, call_kwargs, call_expr, context)\r\n  File \"/opt/homebrew/lib/python3.11/site-packages/vyper/codegen/external_call.py\", line 207, in _external_call_helper\r\n    assert use_staticcall, \"typechecker missed this\"\r\nAssertionError: typechecker missed this\r\n```\r\n\r\n",
  "closed_by": {
    "login": "charles-cooper",
    "id": 3867501,
    "node_id": "MDQ6VXNlcjM4Njc1MDE=",
    "avatar_url": "https://avatars.githubusercontent.com/u/3867501?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/charles-cooper",
    "html_url": "https://github.com/charles-cooper",
    "followers_url": "https://api.github.com/users/charles-cooper/followers",
    "following_url": "https://api.github.com/users/charles-cooper/following{/other_user}",
    "gists_url": "https://api.github.com/users/charles-cooper/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/charles-cooper/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/charles-cooper/subscriptions",
    "organizations_url": "https://api.github.com/users/charles-cooper/orgs",
    "repos_url": "https://api.github.com/users/charles-cooper/repos",
    "events_url": "https://api.github.com/users/charles-cooper/events{/privacy}",
    "received_events_url": "https://api.github.com/users/charles-cooper/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/3691/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/vyperlang/vyper/issues/3691/timeline",
  "performed_via_github_app": null,
  "state_reason": "not_planned"
}
[
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/1874594487",
    "html_url": "https://github.com/vyperlang/vyper/issues/3691#issuecomment-1874594487",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/3691",
    "id": 1874594487,
    "node_id": "IC_kwDOBGDvrM5vvAq3",
    "user": {
      "login": "charles-cooper",
      "id": 3867501,
      "node_id": "MDQ6VXNlcjM4Njc1MDE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3867501?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/charles-cooper",
      "html_url": "https://github.com/charles-cooper",
      "followers_url": "https://api.github.com/users/charles-cooper/followers",
      "following_url": "https://api.github.com/users/charles-cooper/following{/other_user}",
      "gists_url": "https://api.github.com/users/charles-cooper/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/charles-cooper/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/charles-cooper/subscriptions",
      "organizations_url": "https://api.github.com/users/charles-cooper/orgs",
      "repos_url": "https://api.github.com/users/charles-cooper/repos",
      "events_url": "https://api.github.com/users/charles-cooper/events{/privacy}",
      "received_events_url": "https://api.github.com/users/charles-cooper/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2024-01-02T21:34:00Z",
    "updated_at": "2024-01-02T21:34:00Z",
    "author_association": "MEMBER",
    "body": "dup of https://github.com/vyperlang/vyper/issues/3554",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/1874594487/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
