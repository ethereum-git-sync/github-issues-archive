{
  "url": "https://api.github.com/repos/vyperlang/vyper/issues/764",
  "repository_url": "https://api.github.com/repos/vyperlang/vyper",
  "labels_url": "https://api.github.com/repos/vyperlang/vyper/issues/764/labels{/name}",
  "comments_url": "https://api.github.com/repos/vyperlang/vyper/issues/764/comments",
  "events_url": "https://api.github.com/repos/vyperlang/vyper/issues/764/events",
  "html_url": "https://github.com/vyperlang/vyper/issues/764",
  "id": 312055572,
  "node_id": "MDU6SXNzdWUzMTIwNTU1NzI=",
  "number": 764,
  "title": "VIP: uint256 as a first class citizen",
  "user": {
    "login": "jacqueswww",
    "id": 6917456,
    "node_id": "MDQ6VXNlcjY5MTc0NTY=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6917456?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jacqueswww",
    "html_url": "https://github.com/jacqueswww",
    "followers_url": "https://api.github.com/users/jacqueswww/followers",
    "following_url": "https://api.github.com/users/jacqueswww/following{/other_user}",
    "gists_url": "https://api.github.com/users/jacqueswww/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jacqueswww/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jacqueswww/subscriptions",
    "organizations_url": "https://api.github.com/users/jacqueswww/orgs",
    "repos_url": "https://api.github.com/users/jacqueswww/repos",
    "events_url": "https://api.github.com/users/jacqueswww/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jacqueswww/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 751622094,
      "node_id": "MDU6TGFiZWw3NTE2MjIwOTQ=",
      "url": "https://api.github.com/repos/vyperlang/vyper/labels/VIP:%20Discussion",
      "name": "VIP: Discussion",
      "color": "000000",
      "default": false,
      "description": "Used to denote VIPs and more complex issues that are waiting discussion in a meeting"
    },
    {
      "id": 757250644,
      "node_id": "MDU6TGFiZWw3NTcyNTA2NDQ=",
      "url": "https://api.github.com/repos/vyperlang/vyper/labels/VIP:%20Approved",
      "name": "VIP: Approved",
      "color": "98f765",
      "default": false,
      "description": "VIP Approved"
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 21,
  "created_at": "2018-04-06T17:27:17Z",
  "updated_at": "2018-08-01T14:41:10Z",
  "closed_at": "2018-08-01T14:41:10Z",
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "## Preamble\r\n\r\n    VIP: #764\r\n    Title: Uint256 as a first class citizen.\r\n    Author: Jacques Wagener\r\n    Type: Standard Track \r\n    Status: Draft\r\n    Created: 2018-04-06\r\n    Requires (*optional): <VIP number(s)>\r\n    Replaces (*optional): <VIP number(s)>\r\n\r\n\r\n## Simple Summary\r\nAllow generic arithmetic operations to work instead of using specific functions.\r\n\r\n## Abstract\r\nCurrently using uint256 can be very tedious and difficult because all arithmetic has to occur with \r\n\r\n## Motivation\r\n\r\nInitially it was thought that working with unsigned integer are needed and the very large signed integer types could be used and converted. However time, and time again the need for `uint256` to exist as arisen. Using `uint256_*` functions do do any arbitrary calculation becomes a serious issue for readability.\r\n\r\n## Specification\r\n\r\n| function | operator|\r\n| ---------- | ----------- |\r\n| bitwise_and | remains |\r\n| bitwise_or | remains |\r\n| bitwise_xor | remains |\r\n| bitwise_not | remains |\r\n| uint256_add | + |\r\n| uint256_sub | - |\r\n| uint256_mul | * |\r\n| uint256_div | / |\r\n| uint256_exp | ** |\r\n| uint256_mod | % |\r\n| uint256_addmod | remains |\r\n| uint256_mulmod | remains |\r\n| uint256_gt | > |\r\n| uint256_ge | >= |\r\n| uint256_lt | < |\r\n| uint256_le | <= |\r\n| shift | remains |\r\n\r\n*NB* comparison between uint256 and other types should not be implicit. \r\n\r\nIt is important  double check SafeMath is inserted, however working of the functions templates should insert the existing SafeMath behaviour, as seen in:\r\nhttps://github.com/ethereum/vyper/blob/master/vyper/functions/functions.py#L559\r\n\r\nLiteral integer assignment cases to handled on assignment (as discussed below):\r\n\r\n```\r\nCase 1. L < -2**127. Reject (preferably compile-time).\r\nCase 2. -2**127 <= L < 0. L must be of int128. No conversion.\r\nCase 3. 0 <= L < 2**127. The type of L will be identified based on its context.\r\nCase 4. 2**127 <= L < 2**256. L must be of uint256. No conversion.\r\nCase 5. L >= 2**256. Reject (preferably compile-time).\r\n\r\nNow, in Case 3, the type of the literal can be identified as follows.\r\n\r\nFirst, we reject an integer expression (arithmetic, comparison, etc.) whose sub-expressions are all integer literals. (This restriction should be acceptable by users, as @fubuloubu pointed out.)\r\n```\r\n\r\n## Backwards Compatibility\r\n\r\nWe can consider keeping `uint256_` functions. But I think removing those functions is best to avoid confusion for new comers.\r\n\r\n## Copyright\r\nCopyright and related rights waived via [CC0](https:s//creativecommons.org/publicdomain/zero/1.0/)",
  "closed_by": {
    "login": "jacqueswww",
    "id": 6917456,
    "node_id": "MDQ6VXNlcjY5MTc0NTY=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6917456?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jacqueswww",
    "html_url": "https://github.com/jacqueswww",
    "followers_url": "https://api.github.com/users/jacqueswww/followers",
    "following_url": "https://api.github.com/users/jacqueswww/following{/other_user}",
    "gists_url": "https://api.github.com/users/jacqueswww/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jacqueswww/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jacqueswww/subscriptions",
    "organizations_url": "https://api.github.com/users/jacqueswww/orgs",
    "repos_url": "https://api.github.com/users/jacqueswww/repos",
    "events_url": "https://api.github.com/users/jacqueswww/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jacqueswww/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/764/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/vyperlang/vyper/issues/764/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/379399627",
    "html_url": "https://github.com/vyperlang/vyper/issues/764#issuecomment-379399627",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/764",
    "id": 379399627,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3OTM5OTYyNw==",
    "user": {
      "login": "fubuloubu",
      "id": 3859395,
      "node_id": "MDQ6VXNlcjM4NTkzOTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3859395?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fubuloubu",
      "html_url": "https://github.com/fubuloubu",
      "followers_url": "https://api.github.com/users/fubuloubu/followers",
      "following_url": "https://api.github.com/users/fubuloubu/following{/other_user}",
      "gists_url": "https://api.github.com/users/fubuloubu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fubuloubu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fubuloubu/subscriptions",
      "organizations_url": "https://api.github.com/users/fubuloubu/orgs",
      "repos_url": "https://api.github.com/users/fubuloubu/repos",
      "events_url": "https://api.github.com/users/fubuloubu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fubuloubu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-06T22:17:52Z",
    "updated_at": "2018-04-06T22:17:52Z",
    "author_association": "MEMBER",
    "body": "Agree with remove functions.\r\n\r\nAll type comparisons and assignments will no longer perform any implict conversions under this suggestion, therefore conversions will have to be explicitly provided.\r\n\r\nThis should round out our type system upgrade for the beta release.",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/379399627/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/379788803",
    "html_url": "https://github.com/vyperlang/vyper/issues/764#issuecomment-379788803",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/764",
    "id": 379788803,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3OTc4ODgwMw==",
    "user": {
      "login": "jacqueswww",
      "id": 6917456,
      "node_id": "MDQ6VXNlcjY5MTc0NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6917456?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jacqueswww",
      "html_url": "https://github.com/jacqueswww",
      "followers_url": "https://api.github.com/users/jacqueswww/followers",
      "following_url": "https://api.github.com/users/jacqueswww/following{/other_user}",
      "gists_url": "https://api.github.com/users/jacqueswww/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jacqueswww/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jacqueswww/subscriptions",
      "organizations_url": "https://api.github.com/users/jacqueswww/orgs",
      "repos_url": "https://api.github.com/users/jacqueswww/repos",
      "events_url": "https://api.github.com/users/jacqueswww/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jacqueswww/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-09T15:17:14Z",
    "updated_at": "2018-04-09T15:17:38Z",
    "author_association": "CONTRIBUTOR",
    "body": "From the meeting it become clear this is some syntax to consider:\r\n\r\n```\r\nx: uint256\r\nx += 1\r\n```\r\nshould not be allowed.\r\n\r\n```\r\nx: uint256\r\nx += convert(1, 'uint256')\r\nx += uint256(1) ??\r\n```\r\nshould be allowed.\r\n\r\n\r\nThoughts?",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/379788803/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/379789468",
    "html_url": "https://github.com/vyperlang/vyper/issues/764#issuecomment-379789468",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/764",
    "id": 379789468,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3OTc4OTQ2OA==",
    "user": {
      "login": "fubuloubu",
      "id": 3859395,
      "node_id": "MDQ6VXNlcjM4NTkzOTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3859395?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fubuloubu",
      "html_url": "https://github.com/fubuloubu",
      "followers_url": "https://api.github.com/users/fubuloubu/followers",
      "following_url": "https://api.github.com/users/fubuloubu/following{/other_user}",
      "gists_url": "https://api.github.com/users/fubuloubu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fubuloubu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fubuloubu/subscriptions",
      "organizations_url": "https://api.github.com/users/fubuloubu/orgs",
      "repos_url": "https://api.github.com/users/fubuloubu/repos",
      "events_url": "https://api.github.com/users/fubuloubu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fubuloubu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-09T15:19:06Z",
    "updated_at": "2018-04-09T15:19:06Z",
    "author_association": "MEMBER",
    "body": "I disagree.\r\n\r\nI think `x += 1` we could figure out the implicit casting and do a compilation range check against that type.\r\n\r\n`x += convert(1, 'uint256')` is much more opaque from a readability standpoint, affecting auditibility.",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/379789468/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/379793818",
    "html_url": "https://github.com/vyperlang/vyper/issues/764#issuecomment-379793818",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/764",
    "id": 379793818,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3OTc5MzgxOA==",
    "user": {
      "login": "yzhang90",
      "id": 5641590,
      "node_id": "MDQ6VXNlcjU2NDE1OTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5641590?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/yzhang90",
      "html_url": "https://github.com/yzhang90",
      "followers_url": "https://api.github.com/users/yzhang90/followers",
      "following_url": "https://api.github.com/users/yzhang90/following{/other_user}",
      "gists_url": "https://api.github.com/users/yzhang90/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/yzhang90/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/yzhang90/subscriptions",
      "organizations_url": "https://api.github.com/users/yzhang90/orgs",
      "repos_url": "https://api.github.com/users/yzhang90/repos",
      "events_url": "https://api.github.com/users/yzhang90/events{/privacy}",
      "received_events_url": "https://api.github.com/users/yzhang90/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-09T15:32:06Z",
    "updated_at": "2018-04-09T15:32:06Z",
    "author_association": "NONE",
    "body": "Implicit casting may introduce some complexity in the compiler because you need to check different range for number literal under different context. For example,\r\n`x:unit256\r\nx+= 2^127\r\n`\r\nshould be allowed because 2^127 is within the range of `uint256`.\r\nHowever,\r\n`x:int128\r\nx+= 2^127\r\n`\r\nshould be rejected because 2^127 is not within the range of `int128`.\r\nThis implies that parsing a integer literal depends on the context it is in. ",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/379793818/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/379881640",
    "html_url": "https://github.com/vyperlang/vyper/issues/764#issuecomment-379881640",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/764",
    "id": 379881640,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3OTg4MTY0MA==",
    "user": {
      "login": "daejunpark",
      "id": 5491770,
      "node_id": "MDQ6VXNlcjU0OTE3NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5491770?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/daejunpark",
      "html_url": "https://github.com/daejunpark",
      "followers_url": "https://api.github.com/users/daejunpark/followers",
      "following_url": "https://api.github.com/users/daejunpark/following{/other_user}",
      "gists_url": "https://api.github.com/users/daejunpark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/daejunpark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/daejunpark/subscriptions",
      "organizations_url": "https://api.github.com/users/daejunpark/orgs",
      "repos_url": "https://api.github.com/users/daejunpark/repos",
      "events_url": "https://api.github.com/users/daejunpark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/daejunpark/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-09T20:21:39Z",
    "updated_at": "2018-04-10T00:03:10Z",
    "author_association": "CONTRIBUTOR",
    "body": "There are cases where it is not trivial to identify (or define a semantics of) the \"context\". \r\n\r\nFor example, is the following inequality `true` or rejected?\r\n```\r\n-1 < 170141183460469231731687303715884105728 - 170141183460469231731687303715884105728 + 1\r\n```\r\n\r\nThere are two possible interpretations of the type of the expression:\r\n```\r\n170141183460469231731687303715884105728 - 170141183460469231731687303715884105728\r\n```\r\n * `uint256`: Since `170141183460469231731687303715884105728` is of `uint256`, their arithmetic expression can be seen as `uint256`. But in this interpretation, the above should be rejected since the RHS is of `uint256` while the LHS is of `int128`.\r\n * `int128`: Since the computation result is 0, the type of expression can be seen as `int128`. In this case, the above will be `true`. But this interpretation requires additional reasoning (e.g., considering computation results), which could be not easily implemented (or error-prone).\r\n\r\n\r\nOne more cute example. The following would probably be rejected, although it seems trivially `true`:\r\n```\r\n-1 < 170141183460469231731687303715884105728    # -1 < 2**127\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/379881640/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/379915264",
    "html_url": "https://github.com/vyperlang/vyper/issues/764#issuecomment-379915264",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/764",
    "id": 379915264,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3OTkxNTI2NA==",
    "user": {
      "login": "fubuloubu",
      "id": 3859395,
      "node_id": "MDQ6VXNlcjM4NTkzOTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3859395?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fubuloubu",
      "html_url": "https://github.com/fubuloubu",
      "followers_url": "https://api.github.com/users/fubuloubu/followers",
      "following_url": "https://api.github.com/users/fubuloubu/following{/other_user}",
      "gists_url": "https://api.github.com/users/fubuloubu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fubuloubu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fubuloubu/subscriptions",
      "organizations_url": "https://api.github.com/users/fubuloubu/orgs",
      "repos_url": "https://api.github.com/users/fubuloubu/repos",
      "events_url": "https://api.github.com/users/fubuloubu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fubuloubu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-09T22:37:27Z",
    "updated_at": "2018-04-09T22:37:27Z",
    "author_association": "MEMBER",
    "body": "I think these corner cases could throw \"undetermined type\" by an implict literal type checking algorithm I hesitate to call it an implict conversion, because you use contextual information from the other types to determine what the type is of the literal conversion. I think at first it should even reject mathematical operations, preferring instead to explicitly write the literal value out. Together with the decimal demarcation differentiating decimal literals from integer literals, we should have enough information to determine type in a vast majority of cases without confusion on the reader's behalf.",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/379915264/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/379929901",
    "html_url": "https://github.com/vyperlang/vyper/issues/764#issuecomment-379929901",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/764",
    "id": 379929901,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3OTkyOTkwMQ==",
    "user": {
      "login": "daejunpark",
      "id": 5491770,
      "node_id": "MDQ6VXNlcjU0OTE3NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5491770?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/daejunpark",
      "html_url": "https://github.com/daejunpark",
      "followers_url": "https://api.github.com/users/daejunpark/followers",
      "following_url": "https://api.github.com/users/daejunpark/following{/other_user}",
      "gists_url": "https://api.github.com/users/daejunpark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/daejunpark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/daejunpark/subscriptions",
      "organizations_url": "https://api.github.com/users/daejunpark/orgs",
      "repos_url": "https://api.github.com/users/daejunpark/repos",
      "events_url": "https://api.github.com/users/daejunpark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/daejunpark/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-10T00:01:19Z",
    "updated_at": "2018-04-10T00:01:19Z",
    "author_association": "CONTRIBUTOR",
    "body": "@fubuloubu I agree with the fact that my example is not common, and no sane developer will write this kind of programs. :)\r\n\r\nOK. Then, just to make sure, let me spell out your type checking algorithm a bit.\r\n\r\n----\r\nLet's consider only the two types: `int128` and `uint256`.\r\nLet `L` be an integer literal.\r\n\r\nCase 1. `L < -2**127`. Reject (preferably compile-time).\r\nCase 2. `-2**127 <= L < 0`. `L` must be of `int128`. No conversion.\r\nCase 3. `0 <= L < 2**127`. The type of `L` will be identified based on its context.\r\nCase 4. `2**127 <= L < 2**256`. `L` must be of `uint256`. No conversion.\r\nCase 5. `L >= 2**256`. Reject (preferably compile-time).\r\n\r\nNow, in Case 3, the type of the literal can be identified as follows.\r\n\r\nFirst, we *reject* an integer expression (arithmetic, comparison, etc.) whose sub-expressions are all integer literals. (This restriction should be acceptable by users, as @fubuloubu pointed out.)\r\n\r\nThen, for any integer expression, there is a non-literal sub-expression whose type can be deterministically identified, and we can infer the type of a literal based on the type of its non-literal sibling.\r\n\r\n(TODO: prove/check that any non-literal expression's type can be deterministically identified.)\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/379929901/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/379963885",
    "html_url": "https://github.com/vyperlang/vyper/issues/764#issuecomment-379963885",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/764",
    "id": 379963885,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3OTk2Mzg4NQ==",
    "user": {
      "login": "fubuloubu",
      "id": 3859395,
      "node_id": "MDQ6VXNlcjM4NTkzOTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3859395?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fubuloubu",
      "html_url": "https://github.com/fubuloubu",
      "followers_url": "https://api.github.com/users/fubuloubu/followers",
      "following_url": "https://api.github.com/users/fubuloubu/following{/other_user}",
      "gists_url": "https://api.github.com/users/fubuloubu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fubuloubu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fubuloubu/subscriptions",
      "organizations_url": "https://api.github.com/users/fubuloubu/orgs",
      "repos_url": "https://api.github.com/users/fubuloubu/repos",
      "events_url": "https://api.github.com/users/fubuloubu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fubuloubu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-10T03:38:20Z",
    "updated_at": "2018-04-10T03:38:20Z",
    "author_association": "MEMBER",
    "body": "I was picturing it more like this: a statement is a collection of literal and non literal members, connected through expressions and operators. On an assignment or assertion expression, there is a clearly identified type on the LHS. The RHS must therefore clearly evaluate it's type to match the LHS. Evaluation of the expression through it's operators must match down to the literal and non literal values that make it up. Since non literals have explicit types, that means it should be clearly defined through the operators what type the matching literal should have. This may become more complex if arbitrary combinations of literals are allowed to take place, but it should still be possible to figure it out if even one node of the AST is a statically typed non-literal value. Corner cases occur when an operator accepts more than one type and implicitly casts, but since we are removing that more generally we shouldn't have to worry as much.",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/379963885/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/379983691",
    "html_url": "https://github.com/vyperlang/vyper/issues/764#issuecomment-379983691",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/764",
    "id": 379983691,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3OTk4MzY5MQ==",
    "user": {
      "login": "daejunpark",
      "id": 5491770,
      "node_id": "MDQ6VXNlcjU0OTE3NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5491770?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/daejunpark",
      "html_url": "https://github.com/daejunpark",
      "followers_url": "https://api.github.com/users/daejunpark/followers",
      "following_url": "https://api.github.com/users/daejunpark/following{/other_user}",
      "gists_url": "https://api.github.com/users/daejunpark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/daejunpark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/daejunpark/subscriptions",
      "organizations_url": "https://api.github.com/users/daejunpark/orgs",
      "repos_url": "https://api.github.com/users/daejunpark/repos",
      "events_url": "https://api.github.com/users/daejunpark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/daejunpark/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-10T06:01:45Z",
    "updated_at": "2018-04-10T06:01:45Z",
    "author_association": "CONTRIBUTOR",
    "body": "I think we are on the same page. I can take a look again once it is implemented.",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/379983691/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/384584628",
    "html_url": "https://github.com/vyperlang/vyper/issues/764#issuecomment-384584628",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/764",
    "id": 384584628,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4NDU4NDYyOA==",
    "user": {
      "login": "dani-jozsef",
      "id": 6108136,
      "node_id": "MDQ6VXNlcjYxMDgxMzY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6108136?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dani-jozsef",
      "html_url": "https://github.com/dani-jozsef",
      "followers_url": "https://api.github.com/users/dani-jozsef/followers",
      "following_url": "https://api.github.com/users/dani-jozsef/following{/other_user}",
      "gists_url": "https://api.github.com/users/dani-jozsef/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dani-jozsef/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dani-jozsef/subscriptions",
      "organizations_url": "https://api.github.com/users/dani-jozsef/orgs",
      "repos_url": "https://api.github.com/users/dani-jozsef/repos",
      "events_url": "https://api.github.com/users/dani-jozsef/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dani-jozsef/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-26T10:02:05Z",
    "updated_at": "2018-04-26T10:02:05Z",
    "author_association": "NONE",
    "body": "I think the way Go handles literals should be followed post-beta.\r\n\r\n(Ie. numeric literals have no type, they have arbitrary precision, operators between literals are executed at compile time with unlimited precision math. On assignment or comparison between a variable and a literal, it is checked if the literal cleanly converts to the variable's type (eg. is integer if the variable is integer, fits in variable range, etc.), and if yes, it's treated as that type, if not, a compile time error is thrown.)",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/384584628/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/384786481",
    "html_url": "https://github.com/vyperlang/vyper/issues/764#issuecomment-384786481",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/764",
    "id": 384786481,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4NDc4NjQ4MQ==",
    "user": {
      "login": "daejunpark",
      "id": 5491770,
      "node_id": "MDQ6VXNlcjU0OTE3NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5491770?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/daejunpark",
      "html_url": "https://github.com/daejunpark",
      "followers_url": "https://api.github.com/users/daejunpark/followers",
      "following_url": "https://api.github.com/users/daejunpark/following{/other_user}",
      "gists_url": "https://api.github.com/users/daejunpark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/daejunpark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/daejunpark/subscriptions",
      "organizations_url": "https://api.github.com/users/daejunpark/orgs",
      "repos_url": "https://api.github.com/users/daejunpark/repos",
      "events_url": "https://api.github.com/users/daejunpark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/daejunpark/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-26T20:57:06Z",
    "updated_at": "2018-04-26T20:57:06Z",
    "author_association": "CONTRIBUTOR",
    "body": "@daniel-jozsef that makes sense to me.",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/384786481/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/388708503",
    "html_url": "https://github.com/vyperlang/vyper/issues/764#issuecomment-388708503",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/764",
    "id": 388708503,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4ODcwODUwMw==",
    "user": {
      "login": "tpmccallum",
      "id": 9831342,
      "node_id": "MDQ6VXNlcjk4MzEzNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9831342?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tpmccallum",
      "html_url": "https://github.com/tpmccallum",
      "followers_url": "https://api.github.com/users/tpmccallum/followers",
      "following_url": "https://api.github.com/users/tpmccallum/following{/other_user}",
      "gists_url": "https://api.github.com/users/tpmccallum/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tpmccallum/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tpmccallum/subscriptions",
      "organizations_url": "https://api.github.com/users/tpmccallum/orgs",
      "repos_url": "https://api.github.com/users/tpmccallum/repos",
      "events_url": "https://api.github.com/users/tpmccallum/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tpmccallum/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-14T06:18:30Z",
    "updated_at": "2018-05-14T06:27:10Z",
    "author_association": "NONE",
    "body": "Hi @jacqueswww , @daniel-jozsef , @DavidKnott  could I please get some advice on a Vyper equivalent to Solidity’s SafeMath functionality. I would like to add a paragraph to this Vyper chapter < https://github.com/ethereumbook/ethereumbook/blob/develop/vyper.asciidoc > but need your help answering the following questions for the readers:\r\n1) Do Vyper developers have access to a SafeMath equivalent?\r\n2) Do Vyper developers have access to documentation on how to implement SafeMath syntax?\r\n\r\nAlternatively to the above, perhaps the following is more accurate \r\n\r\n3) Does Vyper compilation deal with the nuances of SafeMath implementation on behalf of the developer?\r\n\r\nI write about this in light of the recent overflow issue in a Solidity smart contract < https://medium.com/@peckshield/alert-new-batchoverflow-bug-in-multiple-erc20-smart-contracts-cve-2018-10299-511067db6536 > where a mistake was made even though SafeMath was available. \r\n\r\nIt would be great to make this crystal clear for future Vyper developers seeing’s how Vyper is so safety focussed. \r\n\r\nAny advice (big or small) and links to code would be greatly appreciated. \r\nThanks so much guys\r\nKind regards \r\nTim",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/388708503/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/388709903",
    "html_url": "https://github.com/vyperlang/vyper/issues/764#issuecomment-388709903",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/764",
    "id": 388709903,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4ODcwOTkwMw==",
    "user": {
      "login": "ben-kaufman",
      "id": 10667901,
      "node_id": "MDQ6VXNlcjEwNjY3OTAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/10667901?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ben-kaufman",
      "html_url": "https://github.com/ben-kaufman",
      "followers_url": "https://api.github.com/users/ben-kaufman/followers",
      "following_url": "https://api.github.com/users/ben-kaufman/following{/other_user}",
      "gists_url": "https://api.github.com/users/ben-kaufman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ben-kaufman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ben-kaufman/subscriptions",
      "organizations_url": "https://api.github.com/users/ben-kaufman/orgs",
      "repos_url": "https://api.github.com/users/ben-kaufman/repos",
      "events_url": "https://api.github.com/users/ben-kaufman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ben-kaufman/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-14T06:27:09Z",
    "updated_at": "2018-05-14T06:27:09Z",
    "author_association": "CONTRIBUTOR",
    "body": "@tpmccallum Vyper has implemented SafeMath at the compiler level so there is no need to worry about that.\r\nI don't remember the exact part of the code for it but I can try to find it out later.",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/388709903/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/388715306",
    "html_url": "https://github.com/vyperlang/vyper/issues/764#issuecomment-388715306",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/764",
    "id": 388715306,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4ODcxNTMwNg==",
    "user": {
      "login": "tpmccallum",
      "id": 9831342,
      "node_id": "MDQ6VXNlcjk4MzEzNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9831342?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tpmccallum",
      "html_url": "https://github.com/tpmccallum",
      "followers_url": "https://api.github.com/users/tpmccallum/followers",
      "following_url": "https://api.github.com/users/tpmccallum/following{/other_user}",
      "gists_url": "https://api.github.com/users/tpmccallum/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tpmccallum/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tpmccallum/subscriptions",
      "organizations_url": "https://api.github.com/users/tpmccallum/orgs",
      "repos_url": "https://api.github.com/users/tpmccallum/repos",
      "events_url": "https://api.github.com/users/tpmccallum/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tpmccallum/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-14T06:56:52Z",
    "updated_at": "2018-05-14T07:30:57Z",
    "author_association": "NONE",
    "body": "Hi @ben-kaufman \r\nThank you so much!\r\nHey, I see that the Vyper functions\r\n < https://github.com/ethereum/vyper/blob/master/vyper/functions/functions.py >\r\nare able to enforce safety (SafeMath equivalent). Is this the area of code which I should be referencing? For example should developers be using these functions instead of writing their own functions? If these Vyper functions file are as deep as the safety implementation goes, what is stopping developers from by passing the functions with their own code?\r\n Is the compiler really able to ensure safety if developers write bad code?\r\nSorry about the overload of questions, I am really interested in maximum safety of Vyper.\r\nKind regards \r\nTim",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/388715306/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/388793811",
    "html_url": "https://github.com/vyperlang/vyper/issues/764#issuecomment-388793811",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/764",
    "id": 388793811,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4ODc5MzgxMQ==",
    "user": {
      "login": "jacqueswww",
      "id": 6917456,
      "node_id": "MDQ6VXNlcjY5MTc0NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6917456?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jacqueswww",
      "html_url": "https://github.com/jacqueswww",
      "followers_url": "https://api.github.com/users/jacqueswww/followers",
      "following_url": "https://api.github.com/users/jacqueswww/following{/other_user}",
      "gists_url": "https://api.github.com/users/jacqueswww/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jacqueswww/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jacqueswww/subscriptions",
      "organizations_url": "https://api.github.com/users/jacqueswww/orgs",
      "repos_url": "https://api.github.com/users/jacqueswww/repos",
      "events_url": "https://api.github.com/users/jacqueswww/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jacqueswww/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-14T12:06:22Z",
    "updated_at": "2018-05-14T12:06:22Z",
    "author_association": "CONTRIBUTOR",
    "body": "@tpmccallum \r\n\r\nYes SafeMath is built into vyper: https://github.com/ethereum/vyper/blob/master/vyper/parser/expr.py#L275\r\n\r\nSo any airithmetic with a `uint256` will already include the necessary exception cases.\r\n\r\n`int128` will also be supported soon #475  (it's on the roadmap for the beta release).",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/388793811/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/388795254",
    "html_url": "https://github.com/vyperlang/vyper/issues/764#issuecomment-388795254",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/764",
    "id": 388795254,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4ODc5NTI1NA==",
    "user": {
      "login": "jacqueswww",
      "id": 6917456,
      "node_id": "MDQ6VXNlcjY5MTc0NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6917456?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jacqueswww",
      "html_url": "https://github.com/jacqueswww",
      "followers_url": "https://api.github.com/users/jacqueswww/followers",
      "following_url": "https://api.github.com/users/jacqueswww/following{/other_user}",
      "gists_url": "https://api.github.com/users/jacqueswww/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jacqueswww/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jacqueswww/subscriptions",
      "organizations_url": "https://api.github.com/users/jacqueswww/orgs",
      "repos_url": "https://api.github.com/users/jacqueswww/repos",
      "events_url": "https://api.github.com/users/jacqueswww/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jacqueswww/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-14T12:12:31Z",
    "updated_at": "2018-05-14T12:12:31Z",
    "author_association": "CONTRIBUTOR",
    "body": "To answer the question on safety, vyper has 2 methods of protecting against overflows.\r\n\r\n1.) safemath on ints (as indicated above).\r\n2.) clamps\r\n\r\nClamps are enforced whenever a literal constant is loaded, a value is passed into a function or a variable is assigned.\r\nWe have custom functions in LLL for this. So if you write a sample program and use the `-f ir` function you'll see the IR has statements such as `uclamplt` etc. in them.\r\n\r\nHope that answers your questions - I am on the gitter channel as well if you need further explanations :smile:  ",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/388795254/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/390062031",
    "html_url": "https://github.com/vyperlang/vyper/issues/764#issuecomment-390062031",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/764",
    "id": 390062031,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5MDA2MjAzMQ==",
    "user": {
      "login": "tpmccallum",
      "id": 9831342,
      "node_id": "MDQ6VXNlcjk4MzEzNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9831342?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tpmccallum",
      "html_url": "https://github.com/tpmccallum",
      "followers_url": "https://api.github.com/users/tpmccallum/followers",
      "following_url": "https://api.github.com/users/tpmccallum/following{/other_user}",
      "gists_url": "https://api.github.com/users/tpmccallum/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tpmccallum/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tpmccallum/subscriptions",
      "organizations_url": "https://api.github.com/users/tpmccallum/orgs",
      "repos_url": "https://api.github.com/users/tpmccallum/repos",
      "events_url": "https://api.github.com/users/tpmccallum/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tpmccallum/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-18T01:04:15Z",
    "updated_at": "2018-05-18T01:04:15Z",
    "author_association": "NONE",
    "body": "Hi @jacqueswww \r\nSorry to bother you, does this mean that only code compiled into LLL will be safe in relation to integer overflow/underflow?\r\nFor example can a smart contract be compiled into only bytecode (not LLL) and then be successfully executed on the network? \r\nIf so, does this still leave opportunities for Vyper code (not compiled to LLL) to have integer overflow problems?\r\nMany thanks\r\nTim",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/390062031/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/390063299",
    "html_url": "https://github.com/vyperlang/vyper/issues/764#issuecomment-390063299",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/764",
    "id": 390063299,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5MDA2MzI5OQ==",
    "user": {
      "login": "jacqueswww",
      "id": 6917456,
      "node_id": "MDQ6VXNlcjY5MTc0NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6917456?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jacqueswww",
      "html_url": "https://github.com/jacqueswww",
      "followers_url": "https://api.github.com/users/jacqueswww/followers",
      "following_url": "https://api.github.com/users/jacqueswww/following{/other_user}",
      "gists_url": "https://api.github.com/users/jacqueswww/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jacqueswww/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jacqueswww/subscriptions",
      "organizations_url": "https://api.github.com/users/jacqueswww/orgs",
      "repos_url": "https://api.github.com/users/jacqueswww/repos",
      "events_url": "https://api.github.com/users/jacqueswww/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jacqueswww/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-18T01:11:42Z",
    "updated_at": "2018-05-18T01:12:50Z",
    "author_association": "CONTRIBUTOR",
    "body": "Hey Tim!\r\n\r\nLLL is the IR (https://en.m.wikipedia.org/wiki/Intermediate_representation) we use for vyper.\r\nThe stages of compilation are roughly AST -> LLL -> bytcode.\r\n\r\nSo that means these safety measures will always be included and can not be switched off if you use vyper (at beta release since int128 safemath work will be done soon, uint256 has already been done).\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/390063299/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/390079463",
    "html_url": "https://github.com/vyperlang/vyper/issues/764#issuecomment-390079463",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/764",
    "id": 390079463,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5MDA3OTQ2Mw==",
    "user": {
      "login": "tpmccallum",
      "id": 9831342,
      "node_id": "MDQ6VXNlcjk4MzEzNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9831342?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tpmccallum",
      "html_url": "https://github.com/tpmccallum",
      "followers_url": "https://api.github.com/users/tpmccallum/followers",
      "following_url": "https://api.github.com/users/tpmccallum/following{/other_user}",
      "gists_url": "https://api.github.com/users/tpmccallum/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tpmccallum/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tpmccallum/subscriptions",
      "organizations_url": "https://api.github.com/users/tpmccallum/orgs",
      "repos_url": "https://api.github.com/users/tpmccallum/repos",
      "events_url": "https://api.github.com/users/tpmccallum/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tpmccallum/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-18T02:56:21Z",
    "updated_at": "2018-05-18T02:56:21Z",
    "author_association": "NONE",
    "body": "Hi @jacqueswww \r\nThank you so much, that was a great response. I understand.",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/390079463/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/390214294",
    "html_url": "https://github.com/vyperlang/vyper/issues/764#issuecomment-390214294",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/764",
    "id": 390214294,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5MDIxNDI5NA==",
    "user": {
      "login": "tpmccallum",
      "id": 9831342,
      "node_id": "MDQ6VXNlcjk4MzEzNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9831342?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tpmccallum",
      "html_url": "https://github.com/tpmccallum",
      "followers_url": "https://api.github.com/users/tpmccallum/followers",
      "following_url": "https://api.github.com/users/tpmccallum/following{/other_user}",
      "gists_url": "https://api.github.com/users/tpmccallum/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tpmccallum/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tpmccallum/subscriptions",
      "organizations_url": "https://api.github.com/users/tpmccallum/orgs",
      "repos_url": "https://api.github.com/users/tpmccallum/repos",
      "events_url": "https://api.github.com/users/tpmccallum/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tpmccallum/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-18T13:53:02Z",
    "updated_at": "2018-05-18T13:53:02Z",
    "author_association": "NONE",
    "body": "Hi again @jacqueswww \r\nJust a quick additional question. I see that the very early version of the parser.py file entertained variable typecasting. I see that the most recent version of that file (and any other files for that matter) do not entertain implicit or explicit variable typecasting. \r\n\r\nIs it safe to say that Vyper does not support variable typecasting? \r\n\r\nI would be pleased if this is the case, seeings how typecasting can cause odd behaviour and confusion (truncating etc). Just fact checking as I tick off the final TODO in the Vyper book chapter.\r\nThanks so much for your help.\r\nKind regards\r\nTim",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/390214294/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/390225028",
    "html_url": "https://github.com/vyperlang/vyper/issues/764#issuecomment-390225028",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/764",
    "id": 390225028,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5MDIyNTAyOA==",
    "user": {
      "login": "jacqueswww",
      "id": 6917456,
      "node_id": "MDQ6VXNlcjY5MTc0NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6917456?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jacqueswww",
      "html_url": "https://github.com/jacqueswww",
      "followers_url": "https://api.github.com/users/jacqueswww/followers",
      "following_url": "https://api.github.com/users/jacqueswww/following{/other_user}",
      "gists_url": "https://api.github.com/users/jacqueswww/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jacqueswww/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jacqueswww/subscriptions",
      "organizations_url": "https://api.github.com/users/jacqueswww/orgs",
      "repos_url": "https://api.github.com/users/jacqueswww/repos",
      "events_url": "https://api.github.com/users/jacqueswww/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jacqueswww/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-18T14:28:22Z",
    "updated_at": "2018-05-18T14:32:34Z",
    "author_association": "CONTRIBUTOR",
    "body": "Hi @tpmccallum ,\r\n\r\nWe do allow type casting (using the convert function), however if you are trying to convert a too big `uint256` to `uint128` for example the casting will cause a transaction error. So truncating will never occur, instead an error will be thrown (transaction error / runtime error).\r\n\r\nAdditionally we do precompilation of literals, and disallow assigning a too large `uint256` to `int128` at compile time (see the special cases in this VIP above).\r\n\r\nUp until recently we did allow implicit conversions in arithmetic ie. between uint256/int128/decimal, but this is partly (and soon fully) removed.\r\n\r\nPlease checkout the discussions on the below VIPs, the comments are useful to the reasoning behind this removal ;)\r\n#775 \r\n#716 \r\n#737",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/390225028/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
