{
  "url": "https://api.github.com/repos/vyperlang/vyper/issues/3465",
  "repository_url": "https://api.github.com/repos/vyperlang/vyper",
  "labels_url": "https://api.github.com/repos/vyperlang/vyper/issues/3465/labels{/name}",
  "comments_url": "https://api.github.com/repos/vyperlang/vyper/issues/3465/comments",
  "events_url": "https://api.github.com/repos/vyperlang/vyper/issues/3465/events",
  "html_url": "https://github.com/vyperlang/vyper/issues/3465",
  "id": 1727772405,
  "node_id": "I_kwDOBGDvrM5m-7b1",
  "number": 3465,
  "title": "typecheck failure for assignment of `empty(DynArray[..., N]` with mismatched length",
  "user": {
    "login": "pcaversaccio",
    "id": 25297591,
    "node_id": "MDQ6VXNlcjI1Mjk3NTkx",
    "avatar_url": "https://avatars.githubusercontent.com/u/25297591?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/pcaversaccio",
    "html_url": "https://github.com/pcaversaccio",
    "followers_url": "https://api.github.com/users/pcaversaccio/followers",
    "following_url": "https://api.github.com/users/pcaversaccio/following{/other_user}",
    "gists_url": "https://api.github.com/users/pcaversaccio/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/pcaversaccio/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/pcaversaccio/subscriptions",
    "organizations_url": "https://api.github.com/users/pcaversaccio/orgs",
    "repos_url": "https://api.github.com/users/pcaversaccio/repos",
    "events_url": "https://api.github.com/users/pcaversaccio/events{/privacy}",
    "received_events_url": "https://api.github.com/users/pcaversaccio/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 479554965,
      "node_id": "MDU6TGFiZWw0Nzk1NTQ5NjU=",
      "url": "https://api.github.com/repos/vyperlang/vyper/labels/help%20wanted",
      "name": "help wanted",
      "color": "128A0C",
      "default": true,
      "description": null
    },
    {
      "id": 4038686785,
      "node_id": "LA_kwDOBGDvrM7wuXhB",
      "url": "https://api.github.com/repos/vyperlang/vyper/labels/bug%20-%20type%200",
      "name": "bug - type 0",
      "color": "f9d0c4",
      "default": false,
      "description": "compiler halts or panics instead of generating code"
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 5,
  "created_at": "2023-05-26T14:49:53Z",
  "updated_at": "2023-07-25T18:52:02Z",
  "closed_at": null,
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "### Version Information\r\n\r\n* vyper Version (output of `vyper --version`): `0.3.8+commit.036f153`\r\n* OS: `linux`\r\n* Python Version (output of `python --version`): `3.11.3`\r\n\r\n### What's your issue about?\r\n\r\nThis behaviour has been introduced in Vyper `0.3.8`. So TL;DR: Vyper `0.3.8` throws if returned type of `DynArray` is only a subset wrt to length of allocated return type:\r\n\r\n```bash\r\nvyper.exceptions.TypeCheckFailure: Bad type for clearing bytes: expected DynArray[String[4], 1368] but got DynArray[String[4], 1]\r\n```\r\n\r\nExample ([`encode`](https://github.com/pcaversaccio/snekmate/blob/main/src/utils/Base64.vy#L44)):\r\n\r\n```vyper\r\n# @dev Sets the maximum input and output length\r\n# allowed. For an n-byte input to be encoded, the\r\n# space required for the Base64-encoded content\r\n# (without line breaks) is \"4 * ceil(n/3)\" characters.\r\n_DATA_INPUT_BOUND: constant(uint256) = 1024\r\n_DATA_OUTPUT_BOUND: constant(uint256) = 1368\r\n\r\n\r\n# @dev Defines the Base64 encoding tables. For encoding\r\n# with a URL and filename-safe alphabet, please refer to:\r\n# https://www.rfc-editor.org/rfc/rfc4648#section-5.\r\n_TABLE_STD_CHARS: constant(String[65]) = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\"\r\n_TABLE_URL_CHARS: constant(String[65]) = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_=\"\r\n\r\n\r\n@external\r\n@pure\r\ndef encode(data: Bytes[_DATA_INPUT_BOUND], base64_url: bool) -> DynArray[String[4], _DATA_OUTPUT_BOUND]:\r\n    \"\"\"\r\n    @dev Encodes a `Bytes` array using the Base64\r\n         binary-to-text encoding scheme.\r\n    @notice Due to the Vyper design with fixed-size\r\n            string parameters, string concatenations\r\n            with itself in a loop can lead to length\r\n            mismatches (the underlying issue is that\r\n            Vyper does not support a mutable `Bytes`\r\n            type). To circumvent this issue, we choose\r\n            a dynamic array as the return type.\r\n    @param data The maximum 1024-byte data to be\r\n           Base64-encoded.\r\n    @param base64_url The Boolean variable that specifies\r\n           whether to use a URL and filename-safe alphabet\r\n           or not.\r\n    @return DynArray The maximum 4-character user-readable\r\n            string array that combined results in the Base64\r\n            encoding of `data`.\r\n    \"\"\"\r\n    data_length: uint256 = len(data)\r\n    if (data_length == empty(uint256)):\r\n        return empty(DynArray[String[4], 1])\r\n\r\n    # If the length of the unencoded input is not\r\n    # a multiple of three, the encoded output must\r\n    # have padding added so that its length is a\r\n    # multiple of four.\r\n    padding: uint256 = data_length % 3\r\n    data_padded: Bytes[_DATA_INPUT_BOUND + 2] = b\"\"\r\n    if (padding == 1):\r\n        data_padded = concat(data, b\"\\x00\\x00\")\r\n    elif (padding == 2):\r\n        data_padded = concat(data, b\"\\x00\")\r\n    else:\r\n        data_padded = data\r\n\r\n    char_chunks: DynArray[String[4], _DATA_OUTPUT_BOUND] = []\r\n    idx: uint256 = 0\r\n    for _ in range(_DATA_INPUT_BOUND):\r\n        # For the Base64 encoding, three bytes (= chunk)\r\n        # of the bytestream (= 24 bits) are divided into\r\n        # four 6-bit blocks.\r\n        chunk: uint256 = convert(slice(data_padded, idx, 3), uint256)\r\n\r\n        # To write each character, we right shift the 3-byte\r\n        # chunk (= 24 bits) four times in blocks of six bits\r\n        # for each character (18, 12, 6, 0). Note that masking\r\n        # is not required for the first part of the block, as\r\n        # 6 bits are already extracted when the chunk is shifted\r\n        # to the right by 18 bits (out of 24 bits). To illustrate\r\n        # why, here is an example:\r\n        # Example case for `c1`:\r\n        #   6bit   6bit   6bit   6bit\r\n        # │------│------│------│------│\r\n        #  011100 000111 100101 110100\r\n        #\r\n        # `>> 18` (right shift `c1` by 18 bits)\r\n        #   6bit   6bit   6bit   6bit\r\n        # │------│------│------│------│\r\n        #  000000 000000 000000 011100\r\n        #\r\n        # 63 (or `0x3F`) is `000000000000000000111111` in binary.\r\n        # Thus, the bitwise `AND` operation is redundant.\r\n        c1: uint256 = shift(chunk, -18)\r\n        c2: uint256 = shift(chunk, -12) & 63\r\n        c3: uint256 = shift(chunk, -6) & 63\r\n        c4: uint256 = chunk & 63\r\n\r\n        # Base64 encoding with an URL and filename-safe\r\n        # alphabet.\r\n        if (base64_url):\r\n            char_chunks.append(concat(slice(_TABLE_URL_CHARS, c1, 1), slice(_TABLE_URL_CHARS, c2, 1), slice(_TABLE_URL_CHARS, c3, 1),\\\r\n                                      slice(_TABLE_URL_CHARS, c4, 1)))\r\n        # Base64 encoding using the standard characters.\r\n        else:\r\n            char_chunks.append(concat(slice(_TABLE_STD_CHARS, c1, 1), slice(_TABLE_STD_CHARS, c2, 1), slice(_TABLE_STD_CHARS, c3, 1),\\\r\n                                      slice(_TABLE_STD_CHARS, c4, 1)))\r\n\r\n        # The following line cannot overflow because we have\r\n        # limited the for loop by the `constant` parameter\r\n        # `_DATA_INPUT_BOUND`, which is bounded by the\r\n        # maximum value of `1024`.\r\n        idx = unsafe_add(idx, 3)\r\n\r\n        # We break the loop once we reach the end of `data`\r\n        # (including padding).\r\n        if (idx == len(data_padded)):\r\n            break\r\n\r\n    # Case 1: padding of \"==\" added.\r\n    if (padding == 1):\r\n        last_chunk: String[2] = slice(char_chunks.pop(), 0, 2)\r\n        char_chunks.append(concat(last_chunk, \"==\"))\r\n    # Case 2: padding of \"=\" added.\r\n    elif (padding == 2):\r\n        last_chunk: String[3] = slice(char_chunks.pop(), 0, 3)\r\n        char_chunks.append(concat(last_chunk, \"=\"))\r\n\r\n    return char_chunks\r\n```\r\n\r\nThe line that throws is `return empty(DynArray[String[4], 1])`. Using `return []` or `return empty(DynArray[String[4], _DATA_OUTPUT_BOUND])` would fix this but am wondering why this behavior was introduced?\r\n\r\n### How can it be fixed?\r\n\r\nAllow returning subset `DynArray` using `empty`.",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/3465/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/vyperlang/vyper/issues/3465/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/1565338731",
    "html_url": "https://github.com/vyperlang/vyper/issues/3465#issuecomment-1565338731",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/3465",
    "id": 1565338731,
    "node_id": "IC_kwDOBGDvrM5dTSxr",
    "user": {
      "login": "tserg",
      "id": 8017125,
      "node_id": "MDQ6VXNlcjgwMTcxMjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8017125?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tserg",
      "html_url": "https://github.com/tserg",
      "followers_url": "https://api.github.com/users/tserg/followers",
      "following_url": "https://api.github.com/users/tserg/following{/other_user}",
      "gists_url": "https://api.github.com/users/tserg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tserg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tserg/subscriptions",
      "organizations_url": "https://api.github.com/users/tserg/orgs",
      "repos_url": "https://api.github.com/users/tserg/repos",
      "events_url": "https://api.github.com/users/tserg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tserg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-05-27T10:35:40Z",
    "updated_at": "2023-05-27T10:35:40Z",
    "author_association": "CONTRIBUTOR",
    "body": "This issue was introduced in 3abe588e05be6f6cbfac283739d797ef6c485756. \r\n\r\nArguably, this appears that it should have been invalid syntax and therefore a bug with v0.3.7 rather than v0.3.8 - see this failing test for the bytes equivalent https://github.com/vyperlang/vyper/blob/64733b9d15935ecd2bfcfdfbb9606d5ab500d70c/tests/parser/functions/test_empty.py#L609-L613\r\n\r\nHowever, `_check_assign_list` in v0.3.7 did not catch this situation because the condition in this [line](https://github.com/vyperlang/vyper/blob/8b8cff233d766f2fda55d82cbf9a8d3160ab4e7a/vyper/codegen/core.py#L646) was not met - in the case of this contract below, `left` would be an `IRnode` instance of `fake_node` instead of a codegen type. Therefore, this was not caught as an exception.\r\n\r\n```\r\n@external\r\ndef bar() -> DynArray[uint256, 3]:\r\n    return empty(DynArray[uint256, 1])\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/1565338731/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/1565340888",
    "html_url": "https://github.com/vyperlang/vyper/issues/3465#issuecomment-1565340888",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/3465",
    "id": 1565340888,
    "node_id": "IC_kwDOBGDvrM5dTTTY",
    "user": {
      "login": "pcaversaccio",
      "id": 25297591,
      "node_id": "MDQ6VXNlcjI1Mjk3NTkx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25297591?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pcaversaccio",
      "html_url": "https://github.com/pcaversaccio",
      "followers_url": "https://api.github.com/users/pcaversaccio/followers",
      "following_url": "https://api.github.com/users/pcaversaccio/following{/other_user}",
      "gists_url": "https://api.github.com/users/pcaversaccio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pcaversaccio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pcaversaccio/subscriptions",
      "organizations_url": "https://api.github.com/users/pcaversaccio/orgs",
      "repos_url": "https://api.github.com/users/pcaversaccio/repos",
      "events_url": "https://api.github.com/users/pcaversaccio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pcaversaccio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-05-27T10:44:21Z",
    "updated_at": "2023-05-27T10:44:21Z",
    "author_association": "CONTRIBUTOR",
    "body": "@tserg thanks for the details. However, I still don't understand why this should be invalid syntax tbh. Since it's a subset wrt the lenght, the compiler should be implicitly be able to convert this. I mean if I do return simply `[]` the compiler also converts it to the correct return type. So why does `empty` have another behaviour?",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/1565340888/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/1565351937",
    "html_url": "https://github.com/vyperlang/vyper/issues/3465#issuecomment-1565351937",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/3465",
    "id": 1565351937,
    "node_id": "IC_kwDOBGDvrM5dTWAB",
    "user": {
      "login": "tserg",
      "id": 8017125,
      "node_id": "MDQ6VXNlcjgwMTcxMjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8017125?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tserg",
      "html_url": "https://github.com/tserg",
      "followers_url": "https://api.github.com/users/tserg/followers",
      "following_url": "https://api.github.com/users/tserg/following{/other_user}",
      "gists_url": "https://api.github.com/users/tserg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tserg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tserg/subscriptions",
      "organizations_url": "https://api.github.com/users/tserg/orgs",
      "repos_url": "https://api.github.com/users/tserg/repos",
      "events_url": "https://api.github.com/users/tserg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tserg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-05-27T11:03:06Z",
    "updated_at": "2023-05-27T11:03:06Z",
    "author_association": "CONTRIBUTOR",
    "body": "I think it makes sense to support a direct return in this case since the concern with zeroing an existing value does not apply in a return statement, will wait for @charles-cooper to comment on this.",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/1565351937/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/1566183423",
    "html_url": "https://github.com/vyperlang/vyper/issues/3465#issuecomment-1566183423",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/3465",
    "id": 1566183423,
    "node_id": "IC_kwDOBGDvrM5dWg__",
    "user": {
      "login": "charles-cooper",
      "id": 3867501,
      "node_id": "MDQ6VXNlcjM4Njc1MDE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3867501?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/charles-cooper",
      "html_url": "https://github.com/charles-cooper",
      "followers_url": "https://api.github.com/users/charles-cooper/followers",
      "following_url": "https://api.github.com/users/charles-cooper/following{/other_user}",
      "gists_url": "https://api.github.com/users/charles-cooper/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/charles-cooper/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/charles-cooper/subscriptions",
      "organizations_url": "https://api.github.com/users/charles-cooper/orgs",
      "repos_url": "https://api.github.com/users/charles-cooper/repos",
      "events_url": "https://api.github.com/users/charles-cooper/events{/privacy}",
      "received_events_url": "https://api.github.com/users/charles-cooper/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-05-28T15:58:40Z",
    "updated_at": "2023-05-28T15:58:40Z",
    "author_association": "COLLABORATOR",
    "body": "I think the assertion is there for historical implementation reasons. There used to be a `clear()` function which performed what assigning to empty does now. The type was generated internally and so there was a sanity check assertion to make sure the internally generated type matched exactly. Since now we have removed clear and use `empty()` which has a user assigned type, we can probably safely remove the internal assertion.\r\n\r\nAll that being said, I think returning the empty list literal `[]` is probably stylistically best.",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/1566183423/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/1573447709",
    "html_url": "https://github.com/vyperlang/vyper/issues/3465#issuecomment-1573447709",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/3465",
    "id": 1573447709,
    "node_id": "IC_kwDOBGDvrM5dyOgd",
    "user": {
      "login": "trocher",
      "id": 43437004,
      "node_id": "MDQ6VXNlcjQzNDM3MDA0",
      "avatar_url": "https://avatars.githubusercontent.com/u/43437004?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/trocher",
      "html_url": "https://github.com/trocher",
      "followers_url": "https://api.github.com/users/trocher/followers",
      "following_url": "https://api.github.com/users/trocher/following{/other_user}",
      "gists_url": "https://api.github.com/users/trocher/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/trocher/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/trocher/subscriptions",
      "organizations_url": "https://api.github.com/users/trocher/orgs",
      "repos_url": "https://api.github.com/users/trocher/repos",
      "events_url": "https://api.github.com/users/trocher/events{/privacy}",
      "received_events_url": "https://api.github.com/users/trocher/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-06-02T09:39:37Z",
    "updated_at": "2023-06-02T09:42:18Z",
    "author_association": "CONTRIBUTOR",
    "body": "Might be a dup of #3274",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/1573447709/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
