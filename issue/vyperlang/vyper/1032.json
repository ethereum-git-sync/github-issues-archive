{
  "url": "https://api.github.com/repos/vyperlang/vyper/issues/1032",
  "repository_url": "https://api.github.com/repos/vyperlang/vyper",
  "labels_url": "https://api.github.com/repos/vyperlang/vyper/issues/1032/labels{/name}",
  "comments_url": "https://api.github.com/repos/vyperlang/vyper/issues/1032/comments",
  "events_url": "https://api.github.com/repos/vyperlang/vyper/issues/1032/events",
  "html_url": "https://github.com/vyperlang/vyper/issues/1032",
  "id": 363325451,
  "node_id": "MDU6SXNzdWUzNjMzMjU0NTE=",
  "number": 1032,
  "title": "Opportunity to leverage class inheritance in Vyper codebase?",
  "user": {
    "login": "davesque",
    "id": 791437,
    "node_id": "MDQ6VXNlcjc5MTQzNw==",
    "avatar_url": "https://avatars.githubusercontent.com/u/791437?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/davesque",
    "html_url": "https://github.com/davesque",
    "followers_url": "https://api.github.com/users/davesque/followers",
    "following_url": "https://api.github.com/users/davesque/following{/other_user}",
    "gists_url": "https://api.github.com/users/davesque/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/davesque/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/davesque/subscriptions",
    "organizations_url": "https://api.github.com/users/davesque/orgs",
    "repos_url": "https://api.github.com/users/davesque/repos",
    "events_url": "https://api.github.com/users/davesque/events{/privacy}",
    "received_events_url": "https://api.github.com/users/davesque/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 479554964,
      "node_id": "MDU6TGFiZWw0Nzk1NTQ5NjQ=",
      "url": "https://api.github.com/repos/vyperlang/vyper/labels/enhancement",
      "name": "enhancement",
      "color": "84b6eb",
      "default": true,
      "description": null
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": {
    "url": "https://api.github.com/repos/vyperlang/vyper/milestones/1",
    "html_url": "https://github.com/vyperlang/vyper/milestone/1",
    "labels_url": "https://api.github.com/repos/vyperlang/vyper/milestones/1/labels",
    "id": 5566144,
    "node_id": "MDk6TWlsZXN0b25lNTU2NjE0NA==",
    "number": 1,
    "title": "v0.2.0 Release",
    "description": "",
    "creator": {
      "login": "fubuloubu",
      "id": 3859395,
      "node_id": "MDQ6VXNlcjM4NTkzOTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3859395?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fubuloubu",
      "html_url": "https://github.com/fubuloubu",
      "followers_url": "https://api.github.com/users/fubuloubu/followers",
      "following_url": "https://api.github.com/users/fubuloubu/following{/other_user}",
      "gists_url": "https://api.github.com/users/fubuloubu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fubuloubu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fubuloubu/subscriptions",
      "organizations_url": "https://api.github.com/users/fubuloubu/orgs",
      "repos_url": "https://api.github.com/users/fubuloubu/repos",
      "events_url": "https://api.github.com/users/fubuloubu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fubuloubu/received_events",
      "type": "User",
      "site_admin": false
    },
    "open_issues": 0,
    "closed_issues": 39,
    "state": "closed",
    "created_at": "2020-06-21T23:16:54Z",
    "updated_at": "2020-07-06T18:38:03Z",
    "due_on": "2020-07-05T07:00:00Z",
    "closed_at": "2020-07-06T18:38:03Z"
  },
  "comments": 4,
  "created_at": "2018-09-24T21:21:36Z",
  "updated_at": "2020-06-22T18:49:58Z",
  "closed_at": "2020-06-22T18:49:58Z",
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "### What's your issue about?\r\n\r\nI noticed a place where it seems like we might be able to re-structure some Vyper code to be a bit more object oriented and to use some more natural Python idioms.  Specifically, here's what seems like a problem section of code:\r\n\r\nhttps://github.com/ethereum/vyper/blob/master/vyper/parser/stmt.py#L51-L77\r\n\r\nIn the `Stmt.__init__` method, we're doing a dynamic dispatch to a method on the `Stmt` class based on the type of the Python AST node that is used to construct the `Stmt` instance.  This seems a bit weird since the `Stmt` class then ends up representing *all* of the different kinds of statements.  Furthermore, the method names (`parse_...`) don't really represent the action that is taking place which is that the Python AST node is being converted to its intermediate representation in LLL.\r\n\r\n### How can it be fixed?\r\n\r\nOne possible alternative to the dynamic dispatch in the `__init__` method is to define a base `Stmt.from_ast` class method.  This method could choose which one of a number of subclasses of `Stmt` to instantiate and use for the conversion to LLL.  Each `Stmt` subclass could be named something like `If`, `For`, `Return`, etc. and they could all implement a `to_lll` method.\r\n\r\nHere are some advantages of this approach:\r\n\r\n* It's common in Python and other OO langs for there to be a class hierarchy with a subclass for each kind of object or task that you're working with.  New programmers coming to the project could have an easier time applying general OO principles to Vyper.\r\n* The implementations of `to_lll` for each subclass could call out to other methods present on the subclasses.  Subclasses could override or inherit these other methods in various ways.  That could make it easier to re-use and/or slightly modify different common pieces of code that are used in converting similar kinds of statements.\r\n\r\n#### Cute Animal Picture\r\n\r\n![Cute Animal Picture](http://2.bp.blogspot.com/-bBCuRrUXpK4/UFb2_pkm6uI/AAAAAAAAArI/rYYCM2BmENs/s1600/Red+Panda+Walking.jpg)\r\n",
  "closed_by": {
    "login": "fubuloubu",
    "id": 3859395,
    "node_id": "MDQ6VXNlcjM4NTkzOTU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/3859395?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/fubuloubu",
    "html_url": "https://github.com/fubuloubu",
    "followers_url": "https://api.github.com/users/fubuloubu/followers",
    "following_url": "https://api.github.com/users/fubuloubu/following{/other_user}",
    "gists_url": "https://api.github.com/users/fubuloubu/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/fubuloubu/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/fubuloubu/subscriptions",
    "organizations_url": "https://api.github.com/users/fubuloubu/orgs",
    "repos_url": "https://api.github.com/users/fubuloubu/repos",
    "events_url": "https://api.github.com/users/fubuloubu/events{/privacy}",
    "received_events_url": "https://api.github.com/users/fubuloubu/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/1032/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/vyperlang/vyper/issues/1032/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/424140474",
    "html_url": "https://github.com/vyperlang/vyper/issues/1032#issuecomment-424140474",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/1032",
    "id": 424140474,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyNDE0MDQ3NA==",
    "user": {
      "login": "fubuloubu",
      "id": 3859395,
      "node_id": "MDQ6VXNlcjM4NTkzOTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3859395?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fubuloubu",
      "html_url": "https://github.com/fubuloubu",
      "followers_url": "https://api.github.com/users/fubuloubu/followers",
      "following_url": "https://api.github.com/users/fubuloubu/following{/other_user}",
      "gists_url": "https://api.github.com/users/fubuloubu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fubuloubu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fubuloubu/subscriptions",
      "organizations_url": "https://api.github.com/users/fubuloubu/orgs",
      "repos_url": "https://api.github.com/users/fubuloubu/repos",
      "events_url": "https://api.github.com/users/fubuloubu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fubuloubu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-09-24T22:02:25Z",
    "updated_at": "2018-09-24T22:02:25Z",
    "author_association": "MEMBER",
    "body": "I like it! Can you make a toy example of how this might look in practice? I believe I understand the concept (create a Vyper-specific set of objects for it's own internal AST) and see the utility in modularizing the codebase, making it easier to work on.\r\n\r\n---\r\n\r\nIn my mind, this looks like:\r\n```python\r\npy_ast = ast.parse(code)  # Returns root of tree from python's ast module\r\n\r\nvy_ast = Stmt.from_ast(py_ast)  # Returns root of tree from Vyper's AST classes\r\n# NOTE: Perhaps rename `Stmt` to `vyAST` or `vyNode` as a base class,\r\n#       and using the `vy*` prefix so as not to conflict with some of Python's AST classes\r\n\r\nlll = vy_ast.to_lll()  # Convert to LLL list form (opcodes and integers)\r\n\r\nbin = compile_lll(lll)  # Convert LLL nodes to binary opcodes\r\n```\r\n\r\nI think there is also the added burden of calculating storage slots, but this can be done by having `vyContract.to_lll()` method compute the base storage slot for each `vyVariable` it contains using an incrementing slot counter (something I never had the chance to add to blocktract). Any other `vyAST` objects that references a specific `vyVariable` would have to use it's rules to calculate the storage slot in-process. For mappings, this might look like a `vyMappingAccessor` that references a mapping `vyVariable` sub-type, performing the hash-based key lookup to find the location of the corresponding storage slot relative to it's parent slot. Something similar for arrays.\r\n\r\nStill thinking this out in my head, hopefully this is useful... haha.",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/424140474/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/424142588",
    "html_url": "https://github.com/vyperlang/vyper/issues/1032#issuecomment-424142588",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/1032",
    "id": 424142588,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyNDE0MjU4OA==",
    "user": {
      "login": "davesque",
      "id": 791437,
      "node_id": "MDQ6VXNlcjc5MTQzNw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/791437?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/davesque",
      "html_url": "https://github.com/davesque",
      "followers_url": "https://api.github.com/users/davesque/followers",
      "following_url": "https://api.github.com/users/davesque/following{/other_user}",
      "gists_url": "https://api.github.com/users/davesque/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/davesque/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/davesque/subscriptions",
      "organizations_url": "https://api.github.com/users/davesque/orgs",
      "repos_url": "https://api.github.com/users/davesque/repos",
      "events_url": "https://api.github.com/users/davesque/events{/privacy}",
      "received_events_url": "https://api.github.com/users/davesque/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-09-24T22:11:18Z",
    "updated_at": "2018-09-24T22:11:18Z",
    "author_association": "CONTRIBUTOR",
    "body": "Nice, glad you like it.  What you have in mind might be a bit more far-reaching.  What I imagined was more specifically meant to address the oddness of the dynamic dispatch via the dictionary in the `__init__` method and the lack of congruence between specific actions being performed by the code and the existence (or non-existence as it were) of subclasses which correspond with those actions.  I'll try and cook up an example in the next day.  I bet what I'm thinking about could eventually be adapted to be more powerful and suitable for what you had imagined.\r\n\r\nAnother thing I might add is that, if we do have a hierarchy of classes for internal AST tasks, my opinion is that they should probably begin with `Vy` or maybe with no prefix at all.  Either way, they should start with an uppercase letter.  Otherwise, a lot of Python IDEs or code linters will probably complain that classes shouldn't begin with a lowercase letter :).",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/424142588/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/424143560",
    "html_url": "https://github.com/vyperlang/vyper/issues/1032#issuecomment-424143560",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/1032",
    "id": 424143560,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyNDE0MzU2MA==",
    "user": {
      "login": "fubuloubu",
      "id": 3859395,
      "node_id": "MDQ6VXNlcjM4NTkzOTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3859395?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fubuloubu",
      "html_url": "https://github.com/fubuloubu",
      "followers_url": "https://api.github.com/users/fubuloubu/followers",
      "following_url": "https://api.github.com/users/fubuloubu/following{/other_user}",
      "gists_url": "https://api.github.com/users/fubuloubu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fubuloubu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fubuloubu/subscriptions",
      "organizations_url": "https://api.github.com/users/fubuloubu/orgs",
      "repos_url": "https://api.github.com/users/fubuloubu/repos",
      "events_url": "https://api.github.com/users/fubuloubu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fubuloubu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-09-24T22:15:24Z",
    "updated_at": "2018-09-24T22:15:24Z",
    "author_association": "MEMBER",
    "body": "Fair enough lol",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/424143560/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/424689980",
    "html_url": "https://github.com/vyperlang/vyper/issues/1032#issuecomment-424689980",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/1032",
    "id": 424689980,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyNDY4OTk4MA==",
    "user": {
      "login": "jacqueswww",
      "id": 6917456,
      "node_id": "MDQ6VXNlcjY5MTc0NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6917456?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jacqueswww",
      "html_url": "https://github.com/jacqueswww",
      "followers_url": "https://api.github.com/users/jacqueswww/followers",
      "following_url": "https://api.github.com/users/jacqueswww/following{/other_user}",
      "gists_url": "https://api.github.com/users/jacqueswww/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jacqueswww/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jacqueswww/subscriptions",
      "organizations_url": "https://api.github.com/users/jacqueswww/orgs",
      "repos_url": "https://api.github.com/users/jacqueswww/repos",
      "events_url": "https://api.github.com/users/jacqueswww/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jacqueswww/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-09-26T12:02:49Z",
    "updated_at": "2018-09-26T12:02:49Z",
    "author_association": "CONTRIBUTOR",
    "body": "I do think there is scope for this, I think we should go this route after we take care of the type checking and constant folding cycles (it would make the most sense to do it after this has been done).\r\n\r\nI have added this item our refactor ticket #1024 :)",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/424689980/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
