{
  "url": "https://api.github.com/repos/vyperlang/vyper/issues/653",
  "repository_url": "https://api.github.com/repos/vyperlang/vyper",
  "labels_url": "https://api.github.com/repos/vyperlang/vyper/issues/653/labels{/name}",
  "comments_url": "https://api.github.com/repos/vyperlang/vyper/issues/653/comments",
  "events_url": "https://api.github.com/repos/vyperlang/vyper/issues/653/events",
  "html_url": "https://github.com/vyperlang/vyper/issues/653",
  "id": 292885183,
  "node_id": "MDU6SXNzdWUyOTI4ODUxODM=",
  "number": 653,
  "title": "VIP: Support full range of allowable Wei values",
  "user": {
    "login": "pdaian",
    "id": 565776,
    "node_id": "MDQ6VXNlcjU2NTc3Ng==",
    "avatar_url": "https://avatars.githubusercontent.com/u/565776?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/pdaian",
    "html_url": "https://github.com/pdaian",
    "followers_url": "https://api.github.com/users/pdaian/followers",
    "following_url": "https://api.github.com/users/pdaian/following{/other_user}",
    "gists_url": "https://api.github.com/users/pdaian/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/pdaian/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/pdaian/subscriptions",
    "organizations_url": "https://api.github.com/users/pdaian/orgs",
    "repos_url": "https://api.github.com/users/pdaian/repos",
    "events_url": "https://api.github.com/users/pdaian/events{/privacy}",
    "received_events_url": "https://api.github.com/users/pdaian/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 751622094,
      "node_id": "MDU6TGFiZWw3NTE2MjIwOTQ=",
      "url": "https://api.github.com/repos/vyperlang/vyper/labels/VIP:%20Discussion",
      "name": "VIP: Discussion",
      "color": "000000",
      "default": false,
      "description": "Used to denote VIPs and more complex issues that are waiting discussion in a meeting"
    },
    {
      "id": 757250644,
      "node_id": "MDU6TGFiZWw3NTcyNTA2NDQ=",
      "url": "https://api.github.com/repos/vyperlang/vyper/labels/VIP:%20Approved",
      "name": "VIP: Approved",
      "color": "98f765",
      "default": false,
      "description": "VIP Approved"
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 1,
  "created_at": "2018-01-30T18:15:02Z",
  "updated_at": "2018-05-26T11:49:29Z",
  "closed_at": "2018-05-26T11:49:29Z",
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "## Preamble\r\n\r\n    VIP: 653\r\n    Title: Support full range of allowable Wei values\r\n    Author: Philip Daian, phil@linux.com\r\n    Type: Standard Track\r\n    Status: Draft\r\n    Created: 2018-01-30\r\n\r\n\r\n## Simple Summary\r\n\r\nCurrently, Vyper's `wei_value` type is defined in the compiler as of base type `num`.  This occurs in `viper/viper/types.py`:\r\n\r\n``    'wei_value': BaseType('num', {'wei': 1}, False),``\r\n\r\nThis proposal aims to replace the `num` type with `num256`, supporting the full allowable range of wei values defined in the EVM semantics.\r\n\r\n## Abstract\r\n\r\nI will present an example of several behaviors of the current wei_value type and its related conversions that I believe to be unintuitive, and which may have the potential to introduce errors, and propose a potential solution.\r\n\r\n## Motivation\r\n\r\nConsider the following highly confusing test:\r\n\r\n```\r\nfrom viper import compiler\r\nfrom ethereum.tools import tester as t\r\nfrom ethereum.slogging import configure_logging\r\n\r\nMAX_UINT256 = (2 ** 256) - 1\r\n\r\n#configure_logging(':trace')\r\ns = t.Chain()\r\ns.head_state.set_balance(t.a1, MAX_UINT256 * 3)\r\n\r\n\r\ncode = \"\"\"\r\n@payable\r\n@public\r\ndef f() -> num256: return (as_num256(msg.value))\r\n@payable\r\n@public\r\ndef g() -> wei_value: return (msg.value)\r\n\"\"\"\r\n\r\nsol_code = \"\"\"\r\ncontract A{\r\n    function f() payable returns(uint256) {\r\n        return msg.value;\r\n    }\r\n}\r\n\"\"\"\r\n\r\nt.languages['viper'] = compiler.Compiler()\r\n\r\nc = s.contract(code, language='viper')\r\nc_solidity = s.contract(sol_code, language='solidity')\r\n\r\nassert(c_solidity.f(value=MAX_UINT256, sender=t.k1) == MAX_UINT256) # this works\r\ntry:\r\n    assert(c.f(value=MAX_UINT256, sender=t.k1) == MAX_UINT256)          # this doesn't :(\r\n    exit(1)\r\nexcept:\r\n    print(\"failed as expected :(\")\r\nassert(c.f(value=int(MAX_UINT256 / 3), sender=t.k1) == int(MAX_UINT256/3))          # but this does, even though it's out of num range :O\r\nassert(c.g(value=int(MAX_UINT256 / 3), sender=t.k1) == 0)                           # but, this returns 0 :O\r\n```\r\n\r\nThis tests shows several issues prompting this proposal:\r\n\r\n- Incompatibility with Solidity: Solidity can for now process higher values than Vyper, as demonstrated by the first two assertions.\r\n- Clamp inconsistency/lack of appropriate clamp: When converting wei_value to num_256, clamp_ge is used; this clamp however only checks the sign bit of the input, and does not validate the remainder of the integer, accepting values that would otherwise raise a `ethereum.abi.ValueOutOfBounds` if encoded as the alleged base-type num through the ABI.  This violates programmer expectation.\r\n- Unintuitive behavior in conversions: wei_values can be input as any value in the allowable 256-bit range.  When converted, wei_values can be converted to num256 if they are unsigned.  If not converted, wei_values that would otherwise fail conversion can be used, and when used as call values, will send the corresponding *positive* values; this doesn't make much sense if interpreting wei_value as signed.\r\n- Changes break tests: The Solidity-compatible ERC20 token tests were silently broken by 827c7c5c44934511d630703ed3b8a0af11299301 .  One example affected line was here: https://github.com/ethereum/vyper/blob/master/tests/examples/tokens/ERC20_solidity_compatible/test/erc20_tests_1.py#L357 Again, this breaking change likely did not even enter the mind of reviewers/integrators due to confusion from the above.\r\n- Semantic incompatibility: There is nothing I am aware of in the EVM semantics itself that precludes the values in question here.  If not on Ethereum, such values are certainly possible on private test networks or non-mainnet blockchain deployments.  Ideally, Vyper should behave as expected on all such blockchains.  Furthermore, such large values are useful in testing for overflow conditions, even on codebases that may never expect to encounter these conditions in practice.\r\n\r\n## Specification\r\n\r\nRedefine ``'wei_value': BaseType('num', {'wei': 1}, False),`` as ``'wei_value': BaseType('num256', {'wei': 1}, False),``, propagating all related clamp changes.\r\n\r\n## Backwards Compatibility\r\n\r\nAny normal use of wei_value on mainnet is unaffected, as the allowed balance ranges are not possible with current ETH supply.\r\n\r\nAny values with leading bit 0 are also unaffected by this change.\r\n\r\nAny use of wei_value not using conversion to another type is also unaffected, as wei_values are passed in directly as values in calls.\r\n\r\n## Copyright\r\n\r\nCopyright and related rights waived via [CC0](https://creativecommons.org/publicdomain/zero/1.0/)",
  "closed_by": {
    "login": "jacqueswww",
    "id": 6917456,
    "node_id": "MDQ6VXNlcjY5MTc0NTY=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6917456?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jacqueswww",
    "html_url": "https://github.com/jacqueswww",
    "followers_url": "https://api.github.com/users/jacqueswww/followers",
    "following_url": "https://api.github.com/users/jacqueswww/following{/other_user}",
    "gists_url": "https://api.github.com/users/jacqueswww/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jacqueswww/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jacqueswww/subscriptions",
    "organizations_url": "https://api.github.com/users/jacqueswww/orgs",
    "repos_url": "https://api.github.com/users/jacqueswww/repos",
    "events_url": "https://api.github.com/users/jacqueswww/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jacqueswww/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/653/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/vyperlang/vyper/issues/653/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/382532089",
    "html_url": "https://github.com/vyperlang/vyper/issues/653#issuecomment-382532089",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/653",
    "id": 382532089,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4MjUzMjA4OQ==",
    "user": {
      "login": "haydenadams",
      "id": 9343483,
      "node_id": "MDQ6VXNlcjkzNDM0ODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9343483?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/haydenadams",
      "html_url": "https://github.com/haydenadams",
      "followers_url": "https://api.github.com/users/haydenadams/followers",
      "following_url": "https://api.github.com/users/haydenadams/following{/other_user}",
      "gists_url": "https://api.github.com/users/haydenadams/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/haydenadams/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/haydenadams/subscriptions",
      "organizations_url": "https://api.github.com/users/haydenadams/orgs",
      "repos_url": "https://api.github.com/users/haydenadams/repos",
      "events_url": "https://api.github.com/users/haydenadams/events{/privacy}",
      "received_events_url": "https://api.github.com/users/haydenadams/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-18T21:16:17Z",
    "updated_at": "2018-05-21T04:28:17Z",
    "author_association": "NONE",
    "body": "This should apply to currency_value and custom unit types as well.\r\n\r\n**EDIT:** As mentioned in https://github.com/ethereum/vyper/issues/823, currency value can be totally removed. \r\n",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/382532089/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
