{
  "url": "https://api.github.com/repos/vyperlang/vyper/issues/2385",
  "repository_url": "https://api.github.com/repos/vyperlang/vyper",
  "labels_url": "https://api.github.com/repos/vyperlang/vyper/issues/2385/labels{/name}",
  "comments_url": "https://api.github.com/repos/vyperlang/vyper/issues/2385/comments",
  "events_url": "https://api.github.com/repos/vyperlang/vyper/issues/2385/events",
  "html_url": "https://github.com/vyperlang/vyper/issues/2385",
  "id": 941282328,
  "node_id": "MDU6SXNzdWU5NDEyODIzMjg=",
  "number": 2385,
  "title": "VIP: Change slot layout",
  "user": {
    "login": "fubuloubu",
    "id": 3859395,
    "node_id": "MDQ6VXNlcjM4NTkzOTU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/3859395?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/fubuloubu",
    "html_url": "https://github.com/fubuloubu",
    "followers_url": "https://api.github.com/users/fubuloubu/followers",
    "following_url": "https://api.github.com/users/fubuloubu/following{/other_user}",
    "gists_url": "https://api.github.com/users/fubuloubu/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/fubuloubu/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/fubuloubu/subscriptions",
    "organizations_url": "https://api.github.com/users/fubuloubu/orgs",
    "repos_url": "https://api.github.com/users/fubuloubu/repos",
    "events_url": "https://api.github.com/users/fubuloubu/events{/privacy}",
    "received_events_url": "https://api.github.com/users/fubuloubu/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 1723982050,
      "node_id": "MDU6TGFiZWwxNzIzOTgyMDUw",
      "url": "https://api.github.com/repos/vyperlang/vyper/labels/VIP:%20Deferred",
      "name": "VIP: Deferred",
      "color": "c5def5",
      "default": false,
      "description": "VIP is not scheduled to move forward at this time"
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 0,
  "created_at": "2021-07-10T16:28:57Z",
  "updated_at": "2021-07-19T19:34:06Z",
  "closed_at": null,
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "## Simple Summary\r\nMake storage variables public-by-default, and make the slot addresses predictable\r\n\r\n## Motivation\r\nTypically when people write smart contracts, they make heavy use of the `public` decorator around storage variables, which generates a getter method for them that returns their value. In our experience, it is almost always preferred to create a storage getter via `public` than to provide a custom method to return the value, or not provide a method at all (which makes debugging difficult).\r\n\r\nFurther, for debugging purposes, it's often confusing to tools to have to work with Vyper's version-specific storage allocation algorithm to obtain what numbered slots each storage variable is located at. By standardizing this around an existing mechanism (e.g. ABI method ID) to calculate the storage slots, we can improve this interoperability and take advantage of further optimization using the assumption that the method ID of the public getter is the same as the storage slot.\r\n\r\nSee: https://github.com/vyperlang/vyper/issues/1733#issuecomment-555610609, https://github.com/vyperlang/vyper/issues/1733#issuecomment-558846899\r\n\r\n## Specification\r\nThe \"base\" storage slot is defined as the storage slot location that a variable uses it's the primary lookup. For basic 32-byte types, the storage slot will also contain the data. For larger, fixed-size types, the storage slot starts at that location and extends for N 32-byte entries, up to it's full allocated size. For mappings, this slot is unused, and serves as the anchor to calculate the location in storage via further key hashing.\r\n\r\nThe computed \"base\" storage slot for a variable with a name `var` would be defined as it's bytes4 method ID using the ABI v2 encoding standard, e.g.:\r\n```\r\nvar_base_slot := keccak256( \"var()\" )[:4]\r\n```\r\n\r\nIf collisions are detected between storage variable names and/or method names, then the compiler should raise an error about naming collisions and require the user to change the name of their variables.\r\n\r\nFor optimization purposes, we can rely on the fact that the storage slot is the same as the method ID to make a streamlined \"global getter\" method which uses overall less code for handling storage slots e.g. `(return (SLOAD calldata[:4]) )`. This is left up to the implementation to see if the tradeoff of the increase in bytecode because of `bytes4` slot IDs and the decrease due to this optimization balance well for larger contracts where bytecode size is likely to be an issue.\r\n\r\n## Backwards Compatibility\r\nThis VIP should be backwards compatible to end users, although there might be method ID collision errors\r\nThis VIP would be backwards incompatible with any tooling that relied on storage slot positioning.\r\n\r\n## Dependencies\r\nNo dependencies\r\n\r\n## References\r\nThis proposal is a variation of #1733\r\nThere is a lose connection to #1950 as well\r\n\r\n## Copyright\r\nCopyright and related rights waived via [CC0](https://creativecommons.org/publicdomain/zero/1.0/)\r\n",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/2385/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/vyperlang/vyper/issues/2385/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[

]
