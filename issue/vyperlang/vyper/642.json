{
  "url": "https://api.github.com/repos/vyperlang/vyper/issues/642",
  "repository_url": "https://api.github.com/repos/vyperlang/vyper",
  "labels_url": "https://api.github.com/repos/vyperlang/vyper/issues/642/labels{/name}",
  "comments_url": "https://api.github.com/repos/vyperlang/vyper/issues/642/comments",
  "events_url": "https://api.github.com/repos/vyperlang/vyper/issues/642/events",
  "html_url": "https://github.com/vyperlang/vyper/issues/642",
  "id": 290709991,
  "node_id": "MDU6SXNzdWUyOTA3MDk5OTE=",
  "number": 642,
  "title": "VIP: Standardize compiler output artifacts",
  "user": {
    "login": "fubuloubu",
    "id": 3859395,
    "node_id": "MDQ6VXNlcjM4NTkzOTU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/3859395?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/fubuloubu",
    "html_url": "https://github.com/fubuloubu",
    "followers_url": "https://api.github.com/users/fubuloubu/followers",
    "following_url": "https://api.github.com/users/fubuloubu/following{/other_user}",
    "gists_url": "https://api.github.com/users/fubuloubu/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/fubuloubu/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/fubuloubu/subscriptions",
    "organizations_url": "https://api.github.com/users/fubuloubu/orgs",
    "repos_url": "https://api.github.com/users/fubuloubu/repos",
    "events_url": "https://api.github.com/users/fubuloubu/events{/privacy}",
    "received_events_url": "https://api.github.com/users/fubuloubu/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 6,
  "created_at": "2018-01-23T05:01:29Z",
  "updated_at": "2018-11-29T00:28:56Z",
  "closed_at": "2018-11-29T00:28:56Z",
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "## Preamble\r\n\r\nVIP: #642\r\nTitle: Standardize compiler output artifacts\r\nAuthor: @fubuloubu\r\nType: Standard\r\nStatus: Draft\r\nCreated: 2018-01-22\r\n\r\n## Simple Summary\r\nChange default compiler output to match solc for compatibility with existing/future tools\r\n\r\n## Abstract\r\nThe solidity compiler outputs a JSON-formatted string containing the compilation artifacts for all compiled contracts. The format is:\r\n```python\r\n{\r\n  \"contracts\" : {\r\n    \"path/to/file1.ext:ContractA\" : {\r\n      \"abi\" : \"[\\\" ... \\\"]\", # Not sure why this is in quotes actually...\r\n      \"bin\" : \"0x...\",\r\n      \"bin-runtime\" : \"0x...\",\r\n      ... # Additional stuff\r\n    },\r\n    \"path/to/file2.ext:ContractB\" : { ... },  # Multiple contracts in file\r\n    \"path/to/file2.ext:ContractC\" : { ... },  # NOTE This is allowed in solidity only\r\n    ...\r\n  },\r\n  \"version\" : \"some-compiler-version-string\"\r\n}\r\n```\r\nIt would be great if Vyper matched this output, at least as a default, so that it would enable easier integration with existing (and future) tools\r\n\r\n## Motivation\r\nMy personal motivation is that I want to write a set of tools for Ethereum's Python ecosystem that make it easy to test, deploy, and interact with contracts. Some of the existing tools already leverage Solidity's output for this purpose (or otherwise hardcode themselves to solidity's style). Vyper, being the new kid on the block, should integrate with these tools, and I believe the best way of doing that is by using the same output (`--combined-json` in solidity) so that these tools can be useful.\r\n\r\nMy particular vision for a project written in this ecosystem would have the following folder structure:\r\n```bash\r\nproject/\r\n  contracts/\r\n    contracts.json  # Combined compiler output, used as input for tools below\r\n    # arbitrarily nested contract files: .sol, .vy, etc.\r\n  tests/  # pytest-ethereum: py.test plugin for contract testing\r\n    config.yml  # References ../contracts.json, auto-generates pytest fixtures with given args\r\n    # arbitrarily nested tests: test_*.py\r\n  deployments/  # eth-deployer: enables easy deployment management\r\n    config.yml  # References ../contracts.json, contains deployment args\r\n    addresses.yml  # Deployment address tracking file\r\n    # eth-deployer would have a console for interactions\r\n    # Simulation and deployment files, etc.\r\n  ...\r\n  # Formal requirement verification, simulations, coverage testing, etc...\r\n```\r\nIt doesn't have to look like this in the long run, my point is that it all builds off this common artifact output, and JSON is a good format to store these artifacts in. Later down the road, we can validate the compiler version present in the artifact output file and check some checksum hashes of the input files (stored in the compiler artifacts) and enable fast rebuilds when only certain files were changed in the `contracts/` directory (updating alongside similar output from solc). But I digress...\r\n\r\nAdopting this as a standard (and this might require writing an explicit standard with the solidity team) would go to great lengths to have a compiler-neutral output format that any existing or new tools can be built around, where compiler artifacts (e.g. ABI, bytecode, etc.) can be inputs that are used easily and safely.\r\n\r\n## Specification\r\nIf I had my way, I would change the syntax of the JSON file slightly, to something like this:\r\n```python\r\n{\r\n  \"contracts\" : {\r\n    \"ContractA\" : { # Use contract name directly, file name can be a parameter below\r\n      \"abi\" : [ \r\n            ...  # No quotes necessary\r\n       ],\r\n      \"bytecode\" : \"0x...\",  # Changed name to 'bytecode', maybe use Base64 encoding to save space\r\n      \"runtime\" : \"0x...\",  # Changed name to 'runtime', necessary for deployer to check contracts\r\n      ... # Additional stuff gets filtered out by tools\r\n      \"filepath\" : \"path/to/file.ext\",  # Keep the file path here instead\r\n      # Suggestions:\r\n      #      bytecode -> source code mapping (necessary for coverage frameworks)\r\n      #      bytecode -> gas (may be necessary for gas profiling tools)\r\n    },\r\n    \"ContractB\" : { ... },\r\n    \"ContractC\" : { ... },\r\n    ...\r\n  },\r\n  \"version\" : \"some-compiler-version-string\"\r\n}\r\n```\r\n\r\nThe inner compiler modular would return this information in a dict for a given input, and the `bin/viper` script would be updated so that it would return a collation of these dicts for all the input files if no alternative output format was specified.\r\n\r\n## Backwards Compatibility\r\nI would say this is backward compatible, but would probably require a slight re-write of the docs:\r\n\r\n## Copyright\r\nCopyright and related rights waived via [CC0](https://creativecommons.org/publicdomain/zero/1.0/)\r\n",
  "closed_by": {
    "login": "jacqueswww",
    "id": 6917456,
    "node_id": "MDQ6VXNlcjY5MTc0NTY=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6917456?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jacqueswww",
    "html_url": "https://github.com/jacqueswww",
    "followers_url": "https://api.github.com/users/jacqueswww/followers",
    "following_url": "https://api.github.com/users/jacqueswww/following{/other_user}",
    "gists_url": "https://api.github.com/users/jacqueswww/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jacqueswww/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jacqueswww/subscriptions",
    "organizations_url": "https://api.github.com/users/jacqueswww/orgs",
    "repos_url": "https://api.github.com/users/jacqueswww/repos",
    "events_url": "https://api.github.com/users/jacqueswww/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jacqueswww/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/642/reactions",
    "total_count": 1,
    "+1": 1,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/vyperlang/vyper/issues/642/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/359794202",
    "html_url": "https://github.com/vyperlang/vyper/issues/642#issuecomment-359794202",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/642",
    "id": 359794202,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1OTc5NDIwMg==",
    "user": {
      "login": "jacqueswww",
      "id": 6917456,
      "node_id": "MDQ6VXNlcjY5MTc0NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6917456?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jacqueswww",
      "html_url": "https://github.com/jacqueswww",
      "followers_url": "https://api.github.com/users/jacqueswww/followers",
      "following_url": "https://api.github.com/users/jacqueswww/following{/other_user}",
      "gists_url": "https://api.github.com/users/jacqueswww/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jacqueswww/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jacqueswww/subscriptions",
      "organizations_url": "https://api.github.com/users/jacqueswww/orgs",
      "repos_url": "https://api.github.com/users/jacqueswww/repos",
      "events_url": "https://api.github.com/users/jacqueswww/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jacqueswww/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-23T13:43:14Z",
    "updated_at": "2018-01-23T13:54:04Z",
    "author_association": "CONTRIBUTOR",
    "body": "@fubuloubu How would we generate the contract name, if not from the filename? :stuck_out_tongue: \r\n\r\nI suggest we use exactly the format that solidity does, \"path/to/file1.v.py:File1\" - Even though I agree file path would be nice to have as a param, like you mention we should rather just follow solidity. If we later wanted our own format we just do an extra output type ;)",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/359794202/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/359819155",
    "html_url": "https://github.com/vyperlang/vyper/issues/642#issuecomment-359819155",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/642",
    "id": 359819155,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1OTgxOTE1NQ==",
    "user": {
      "login": "fubuloubu",
      "id": 3859395,
      "node_id": "MDQ6VXNlcjM4NTkzOTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3859395?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fubuloubu",
      "html_url": "https://github.com/fubuloubu",
      "followers_url": "https://api.github.com/users/fubuloubu/followers",
      "following_url": "https://api.github.com/users/fubuloubu/following{/other_user}",
      "gists_url": "https://api.github.com/users/fubuloubu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fubuloubu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fubuloubu/subscriptions",
      "organizations_url": "https://api.github.com/users/fubuloubu/orgs",
      "repos_url": "https://api.github.com/users/fubuloubu/repos",
      "events_url": "https://api.github.com/users/fubuloubu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fubuloubu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-23T15:07:19Z",
    "updated_at": "2018-01-23T15:10:03Z",
    "author_association": "MEMBER",
    "body": "Yeah, Vyper contract names would have to be the base of the filename.\r\n\r\nThat's just my wish list, I sort of wish it used the Contract Name directly instead of the Filename:Contract combo because it makes it easier to do the lookup. Solidity complains when there's overshadowing of the contract names anyways, so there's no reason to have the filename combos be the unique key.\r\n\r\nThis simplifies the syntax of some of the things I'm working on: `contract_tester('path/to/File.v.py:File')` becomes `contract_tester('File')`, that's my personal goal.",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/359819155/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/360052935",
    "html_url": "https://github.com/vyperlang/vyper/issues/642#issuecomment-360052935",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/642",
    "id": 360052935,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2MDA1MjkzNQ==",
    "user": {
      "login": "yann300",
      "id": 6940742,
      "node_id": "MDQ6VXNlcjY5NDA3NDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6940742?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/yann300",
      "html_url": "https://github.com/yann300",
      "followers_url": "https://api.github.com/users/yann300/followers",
      "following_url": "https://api.github.com/users/yann300/following{/other_user}",
      "gists_url": "https://api.github.com/users/yann300/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/yann300/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/yann300/subscriptions",
      "organizations_url": "https://api.github.com/users/yann300/orgs",
      "repos_url": "https://api.github.com/users/yann300/repos",
      "events_url": "https://api.github.com/users/yann300/events{/privacy}",
      "received_events_url": "https://api.github.com/users/yann300/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-24T08:12:31Z",
    "updated_at": "2018-01-24T08:12:31Z",
    "author_association": "NONE",
    "body": ":+1:  for this, also the compiler input could be compliant with the standard used by solidity:\r\nhttps://solidity.readthedocs.io/en/develop/using-the-compiler.html#input-description\r\nAnd that would allow an easier integration to remix",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/360052935/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/360193097",
    "html_url": "https://github.com/vyperlang/vyper/issues/642#issuecomment-360193097",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/642",
    "id": 360193097,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2MDE5MzA5Nw==",
    "user": {
      "login": "fubuloubu",
      "id": 3859395,
      "node_id": "MDQ6VXNlcjM4NTkzOTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3859395?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fubuloubu",
      "html_url": "https://github.com/fubuloubu",
      "followers_url": "https://api.github.com/users/fubuloubu/followers",
      "following_url": "https://api.github.com/users/fubuloubu/following{/other_user}",
      "gists_url": "https://api.github.com/users/fubuloubu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fubuloubu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fubuloubu/subscriptions",
      "organizations_url": "https://api.github.com/users/fubuloubu/orgs",
      "repos_url": "https://api.github.com/users/fubuloubu/repos",
      "events_url": "https://api.github.com/users/fubuloubu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fubuloubu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-24T16:34:42Z",
    "updated_at": "2018-01-24T16:34:42Z",
    "author_association": "MEMBER",
    "body": "@yann300 Can you expand on the remix integration?",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/360193097/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/360504067",
    "html_url": "https://github.com/vyperlang/vyper/issues/642#issuecomment-360504067",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/642",
    "id": 360504067,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2MDUwNDA2Nw==",
    "user": {
      "login": "yann300",
      "id": 6940742,
      "node_id": "MDQ6VXNlcjY5NDA3NDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6940742?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/yann300",
      "html_url": "https://github.com/yann300",
      "followers_url": "https://api.github.com/users/yann300/followers",
      "following_url": "https://api.github.com/users/yann300/following{/other_user}",
      "gists_url": "https://api.github.com/users/yann300/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/yann300/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/yann300/subscriptions",
      "organizations_url": "https://api.github.com/users/yann300/orgs",
      "repos_url": "https://api.github.com/users/yann300/repos",
      "events_url": "https://api.github.com/users/yann300/events{/privacy}",
      "received_events_url": "https://api.github.com/users/yann300/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-25T15:39:24Z",
    "updated_at": "2018-01-25T15:39:24Z",
    "author_association": "NONE",
    "body": "remix uses standard json i/o described in the link above, so that would not be so much of a problem to integrate a vyper compiler in it (well considering vyper compiler can be emscripted).",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/360504067/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/360539189",
    "html_url": "https://github.com/vyperlang/vyper/issues/642#issuecomment-360539189",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/642",
    "id": 360539189,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2MDUzOTE4OQ==",
    "user": {
      "login": "fubuloubu",
      "id": 3859395,
      "node_id": "MDQ6VXNlcjM4NTkzOTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3859395?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fubuloubu",
      "html_url": "https://github.com/fubuloubu",
      "followers_url": "https://api.github.com/users/fubuloubu/followers",
      "following_url": "https://api.github.com/users/fubuloubu/following{/other_user}",
      "gists_url": "https://api.github.com/users/fubuloubu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fubuloubu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fubuloubu/subscriptions",
      "organizations_url": "https://api.github.com/users/fubuloubu/orgs",
      "repos_url": "https://api.github.com/users/fubuloubu/repos",
      "events_url": "https://api.github.com/users/fubuloubu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fubuloubu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-25T17:28:57Z",
    "updated_at": "2018-01-25T17:30:29Z",
    "author_association": "MEMBER",
    "body": "Hmm. Very interesting. I found this: http://pypyjs.org/\r\n\r\nMaybe there is a way to cross-compiler our language to JS\r\n\r\nWe'd probably have to re-write a large subsection of our tests to be language agnostic so we could test this out though...",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/360539189/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
