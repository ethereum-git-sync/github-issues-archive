{
  "url": "https://api.github.com/repos/vyperlang/vyper/issues/3481",
  "repository_url": "https://api.github.com/repos/vyperlang/vyper",
  "labels_url": "https://api.github.com/repos/vyperlang/vyper/issues/3481/labels{/name}",
  "comments_url": "https://api.github.com/repos/vyperlang/vyper/issues/3481/comments",
  "events_url": "https://api.github.com/repos/vyperlang/vyper/issues/3481/events",
  "html_url": "https://github.com/vyperlang/vyper/issues/3481",
  "id": 1742087585,
  "node_id": "I_kwDOBGDvrM5n1iWh",
  "number": 3481,
  "title": "Request for Comment: `safe` and `unsafe` math operations",
  "user": {
    "login": "bout3fiddy",
    "id": 11488427,
    "node_id": "MDQ6VXNlcjExNDg4NDI3",
    "avatar_url": "https://avatars.githubusercontent.com/u/11488427?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/bout3fiddy",
    "html_url": "https://github.com/bout3fiddy",
    "followers_url": "https://api.github.com/users/bout3fiddy/followers",
    "following_url": "https://api.github.com/users/bout3fiddy/following{/other_user}",
    "gists_url": "https://api.github.com/users/bout3fiddy/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/bout3fiddy/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/bout3fiddy/subscriptions",
    "organizations_url": "https://api.github.com/users/bout3fiddy/orgs",
    "repos_url": "https://api.github.com/users/bout3fiddy/repos",
    "events_url": "https://api.github.com/users/bout3fiddy/events{/privacy}",
    "received_events_url": "https://api.github.com/users/bout3fiddy/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 3,
  "created_at": "2023-06-05T16:01:43Z",
  "updated_at": "2023-06-28T20:09:37Z",
  "closed_at": null,
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "## Simple Summary\r\nThis VIP introduces an alternative syntax for unsafe math operations. The goal is to improve the readability of complex mathematical expressions without compromising auditability. To that extent we propose `safe` and `unsafe` builtin methods for safe as well as unsafe operations.\r\n\r\n## Motivation\r\nSimple expressions like `a: uint256 = unsafe_add(b, c)` are straightforward in Vyper. However, readability decreases when complex expressions involve multiple unsafe operations (code snippet taken from [CurveCryptoMathOptimized3.vy](https://github.com/curvefi/tricrypto-ng/blob/d98ecfd58891cb447ab7eeb202df68783835b862/contracts/main/CurveCryptoMathOptimized3.vy#L406)):\r\n\r\n```vyper\r\nK0 = unsafe_div(\r\n    unsafe_mul(\r\n        unsafe_mul(\r\n            unsafe_div(\r\n                unsafe_mul(\r\n                    unsafe_mul(\r\n                        unsafe_div(\r\n                            unsafe_mul(\r\n                                unsafe_mul(10**18, x[0]), N_COINS\r\n                            ),\r\n                            D,\r\n                        ),\r\n                        x[1],\r\n                    ),\r\n                    N_COINS,\r\n                ),\r\n                D,\r\n            ),\r\n            x[2],\r\n        ),\r\n        N_COINS,\r\n    ),\r\n    D,\r\n)\r\n```\r\nIn such situations, Solidity's inline assembly blocks can be more readable than Vyper's unsafe_ops(...). \r\n\r\nFinally, expressions with a mix of safe and unsafe operations are particularly challenging to read (code snippet from [CurveCryptoMathOptimized3.vy](https://github.com/curvefi/tricrypto-ng/blob/d98ecfd58891cb447ab7eeb202df68783835b862/contracts/main/CurveCryptoMathOptimized3.vy#L564)):\r\n\r\n```vyper\r\nGK0: uint256 = (\r\n    unsafe_div(unsafe_div(2 * K0 * K0, 10**36) * K0, 10**36)\r\n    + pow_mod256(unsafe_add(_A_gamma[1], 10**18), 2)\r\n    - unsafe_div(\r\n        unsafe_div(pow_mod256(K0, 2), 10**36) * unsafe_add(unsafe_mul(2, _A_gamma[1]), 3 * 10**18),\r\n        10**18\r\n    )\r\n)\r\n```\r\nWhile long-term compiler optimizations can eventually address these readability issues, we propose a short-term solution here.\r\n\r\n## Specification\r\n\r\n### Readable Expressions with Unsafe Operations\r\n\r\nFor straightforward expressions involving unsafe operations, we retain the existing `unsafe_ops` syntax for its readability:\r\n\r\n```vyper\r\na: uint256 = unsafe_add(b, c)\r\n```\r\n\r\nbut `unsafe` can also be used here:\r\n\r\n```vyper\r\na: uint256 = unsafe(b + c)\r\n```\r\n\r\n### Entirely Unsafe Expression\r\n\r\nWhen an entire expression is unsafe, we suggest borrowing Solidity's approach:\r\n\r\n```vyper\r\nK0 = unsafe(10**18 * x[0] * N_COINS / D * x[1] * N_COINS / D * x[2] * N_COINS / D)\r\n```\r\nsuch that it is clear the entire expression is evaluated using unsafe math operations.\r\n\r\nThis would then introduce `unsafe` builtin that does only unsafe operations with the expression inside it.\r\n\r\n### Expressions Combining Safe and Unsafe Operations\r\n\r\nWe propose a `safe` builtin method that can be used inside unsafe expressions.\r\n\r\n```vyper\r\nGK0: uint256 = (\r\n    unsafe(\r\n        safe(unsafe(safe(2 * K0 * K0) / 10**36) * K0) / 10**36\r\n    )\r\n    + unsafe((_A_gamma[1] + 10**18) ** 2)\r\n    - unsafe(\r\n        unsafe(K0 ** 2 / 10**36) * unsafe(2 * _A_gamma[1] + safe(3 * 10**18)) / 10**18\r\n    )\r\n)\r\n```\r\n\r\n## Backwards Compatibility\r\n\r\nSyntactically, this would not be a breaking change since it does not change how `unsafe_mul` etc. are handled, and only introduces `unsafe(...expression * safe (...expression))`.\r\n",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/3481/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/vyperlang/vyper/issues/3481/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/1577128347",
    "html_url": "https://github.com/vyperlang/vyper/issues/3481#issuecomment-1577128347",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/3481",
    "id": 1577128347,
    "node_id": "IC_kwDOBGDvrM5eARGb",
    "user": {
      "login": "michwill",
      "id": 740600,
      "node_id": "MDQ6VXNlcjc0MDYwMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/740600?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/michwill",
      "html_url": "https://github.com/michwill",
      "followers_url": "https://api.github.com/users/michwill/followers",
      "following_url": "https://api.github.com/users/michwill/following{/other_user}",
      "gists_url": "https://api.github.com/users/michwill/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/michwill/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/michwill/subscriptions",
      "organizations_url": "https://api.github.com/users/michwill/orgs",
      "repos_url": "https://api.github.com/users/michwill/repos",
      "events_url": "https://api.github.com/users/michwill/events{/privacy}",
      "received_events_url": "https://api.github.com/users/michwill/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-06-05T16:40:59Z",
    "updated_at": "2023-06-05T16:40:59Z",
    "author_association": "NONE",
    "body": "Yes ser, bring it!",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/1577128347/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/1577262660",
    "html_url": "https://github.com/vyperlang/vyper/issues/3481#issuecomment-1577262660",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/3481",
    "id": 1577262660,
    "node_id": "IC_kwDOBGDvrM5eAx5E",
    "user": {
      "login": "Vectorized",
      "id": 5889274,
      "node_id": "MDQ6VXNlcjU4ODkyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5889274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Vectorized",
      "html_url": "https://github.com/Vectorized",
      "followers_url": "https://api.github.com/users/Vectorized/followers",
      "following_url": "https://api.github.com/users/Vectorized/following{/other_user}",
      "gists_url": "https://api.github.com/users/Vectorized/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Vectorized/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Vectorized/subscriptions",
      "organizations_url": "https://api.github.com/users/Vectorized/orgs",
      "repos_url": "https://api.github.com/users/Vectorized/repos",
      "events_url": "https://api.github.com/users/Vectorized/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Vectorized/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-06-05T18:21:42Z",
    "updated_at": "2023-06-05T18:25:16Z",
    "author_association": "NONE",
    "body": "Not sure how it will translate to Python syntax.\r\n\r\nAlternatively:\r\n\r\n```python\r\nwith unsafe_math():\r\n    K0 = 10**18 * x[0] * N_COINS / D * x[1] * N_COINS / D * x[2] * N_COINS / D\r\n```\r\n\r\nThe `__enter__()` and `__exit__()` method for the `unsafe_math()` object may be used to turn off the safe math checks for the operator overloads.\r\n\r\nIt can also allow for optional arguments:\r\n```python\r\nwith unsafe_math(allow_zero_denominator=True):\r\n    K0 = 10**18 * x[0] * N_COINS / D * x[1] * N_COINS / D * x[2] * N_COINS / D\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/1577262660/reactions",
      "total_count": 3,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 1,
      "rocket": 0,
      "eyes": 1
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/1612023413",
    "html_url": "https://github.com/vyperlang/vyper/issues/3481#issuecomment-1612023413",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/3481",
    "id": 1612023413,
    "node_id": "IC_kwDOBGDvrM5gFYZ1",
    "user": {
      "login": "z80dev",
      "id": 83730246,
      "node_id": "MDQ6VXNlcjgzNzMwMjQ2",
      "avatar_url": "https://avatars.githubusercontent.com/u/83730246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/z80dev",
      "html_url": "https://github.com/z80dev",
      "followers_url": "https://api.github.com/users/z80dev/followers",
      "following_url": "https://api.github.com/users/z80dev/following{/other_user}",
      "gists_url": "https://api.github.com/users/z80dev/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/z80dev/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/z80dev/subscriptions",
      "organizations_url": "https://api.github.com/users/z80dev/orgs",
      "repos_url": "https://api.github.com/users/z80dev/repos",
      "events_url": "https://api.github.com/users/z80dev/events{/privacy}",
      "received_events_url": "https://api.github.com/users/z80dev/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-06-28T19:59:54Z",
    "updated_at": "2023-06-28T20:09:37Z",
    "author_association": "CONTRIBUTOR",
    "body": "what about `+!`, `-!`, `/!`, and `*!` as aliases for the unsafe version of each of these operators\r\n\r\nso that \r\n\r\n```python\r\nGK0: uint256 = (\r\n    unsafe(\r\n        safe(unsafe(safe(2 * K0 * K0) / 10**36) * K0) / 10**36\r\n    )\r\n    + unsafe((_A_gamma[1] + 10**18) ** 2)\r\n    - unsafe(\r\n        unsafe(K0 ** 2 / 10**36) * unsafe(2 * _A_gamma[1] + safe(3 * 10**18)) / 10**18\r\n    )\r\n)\r\n```\r\n\r\nbecomes \r\n\r\n```python\r\nGK0: uint256 = (((2 * K0 * K0) /! 10**36) * K0) /! 10**36) \r\n    + ((_A_gamma[1] +! 10**18) ** 2) \r\n    - ((K0 ** 2 /! 10 ** 36) * (2 *! _A_gamma[1] +! (3 * 10**18) /! 10**18)\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/1612023413/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
