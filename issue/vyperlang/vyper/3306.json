{
  "url": "https://api.github.com/repos/vyperlang/vyper/issues/3306",
  "repository_url": "https://api.github.com/repos/vyperlang/vyper",
  "labels_url": "https://api.github.com/repos/vyperlang/vyper/issues/3306/labels{/name}",
  "comments_url": "https://api.github.com/repos/vyperlang/vyper/issues/3306/comments",
  "events_url": "https://api.github.com/repos/vyperlang/vyper/issues/3306/events",
  "html_url": "https://github.com/vyperlang/vyper/issues/3306",
  "id": 1609108977,
  "node_id": "I_kwDOBGDvrM5f6Q3x",
  "number": 3306,
  "title": "VIP: Import as Delegate",
  "user": {
    "login": "xrchz",
    "id": 181254,
    "node_id": "MDQ6VXNlcjE4MTI1NA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/181254?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/xrchz",
    "html_url": "https://github.com/xrchz",
    "followers_url": "https://api.github.com/users/xrchz/followers",
    "following_url": "https://api.github.com/users/xrchz/following{/other_user}",
    "gists_url": "https://api.github.com/users/xrchz/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/xrchz/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/xrchz/subscriptions",
    "organizations_url": "https://api.github.com/users/xrchz/orgs",
    "repos_url": "https://api.github.com/users/xrchz/repos",
    "events_url": "https://api.github.com/users/xrchz/events{/privacy}",
    "received_events_url": "https://api.github.com/users/xrchz/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 4,
  "created_at": "2023-03-03T18:56:05Z",
  "updated_at": "2023-12-27T17:12:23Z",
  "closed_at": null,
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "## Simple Summary\r\nAdd support for `DELEGATECALL`ing Vyper code, including type-checking.\r\n\r\n## Motivation\r\nSometimes it is useful to put part of the code of a module into other contracts. For example, library code that will be deployed once and used in many contracts; or modules that are [too big](https://eips.ethereum.org/EIPS/eip-170) and need to be implemented across multiple contracts. (One elaboration of this idea is the [diamond pattern](https://eips.ethereum.org/EIPS/eip-2535).) Contracts containing this extra code are typically only used for code, not storage: state access and transfers are applied to the calling contract. This is achieved with the `DELEGATECALL` opcode, and is a major reason why this opcode exists.\r\n\r\nIn Vyper there are two drawbacks to using `DELEGATECALL`:\r\n* There is no easy syntactic support for making a call. One must use `raw_call` with `is_delegate_call=True`, which is more cumbersome than normal calls.\r\n* There is no type checking of these raw calls, even when the code being called is written in Vyper.\r\n\r\nThis VIP is to address both drawbacks, making it more safe and more readable to use `DELEGATECALL` in Vyper.\r\n\r\n## Specification\r\nWe add one additional piece of syntax, importing delegates, and one new compiler option `--caller <file>` for compiling delegates.\r\n\r\n```\r\nimport FooLib as delegate(FooLibInterface)\r\n```\r\nis similar to\r\n```\r\nimport FooLib as FooLibInterface\r\n```\r\nexcept that calls of functions in `FooLibInterface` will be treated as delegate calls. (Calls to `@pure` visibility functions may continue to be static calls instead of delegate calls. But `@view` needs to be delegated so that the correct contract's storage is read.)\r\n\r\nFor type-checking, the storage variables (storage layout + code layout) and constants of the calling contract are implicitly added to the code in `FooLib.vy`, to avoid unnecessary code duplication.\r\n\r\nWhen compiling `FooLib.vy`, the option `--caller Foo.vy` can be added to add the storage variables etc. of `Foo.vy` when compiling `FooLib.vy`. This enables compilation of the library so that it can be deployed ahead of the main contract.\r\n\r\nFull example:\r\n`Foo.vy`:\r\n```\r\n# version ^0.3.8\r\n\r\nimport FooLib as delegate(FooLibInterface)\r\n\r\nnum: uint256\r\naddrs: HashMap[uint256, address]\r\nlib: immutable(FooLibInterface)\r\n\r\n@external\r\ndef __init__(l: address, i: uint256, a: address):\r\n  self.num = i\r\n  self.addrs[i] = a\r\n  lib = FooLibInterface(l)\r\n\r\n@external\r\n@view\r\ndef foo() -> address:\r\n  return lib.GetAddr()\r\n\r\n@external\r\ndef bar(k: uint256, v: address) -> address:\r\n  lib.Add(k, v)\r\n  return self.addrs[k]\r\n```\r\n\r\n`FooLib.vy`:\r\n```\r\n# version ^0.3.8\r\n\r\n@external\r\n@view\r\ndef GetAddr() -> address:\r\n  return self.addrs[self.num]\r\n\r\n@external\r\ndef Add(key: uint256, val: address):\r\n  self.addrs[key] = val\r\n```\r\n\r\nExample deployment and use:\r\nCompile `vyper --caller Foo.vy FooLib.vy -o FooLib.code`\r\nDeploy `FooLib.code` at address `0xabc`, with no init args\r\nCompile `vyper Foo.vy -o Foo.code`\r\nDeploy `Foo.code` at `0xdef`, with init args `0xabc`, `5`, and `0x39`\r\nCall `foo()` on `0xdef`, returns `0x39`\r\nCall `GetAddr()` on `0xabc` returns `0x0`\r\nCall `bar(7, 0x1)` on `0xdef`, returns `0x1`\r\n\r\n## Backwards Compatibility\r\nNo incompatibilities - only additional features and syntax are proposed.\r\n\r\n## Dependencies\r\nNone.\r\n\r\n## References\r\nTBD\r\n\r\n## Copyright\r\nCopyright and related rights waived via [CC0](https://creativecommons.org/publicdomain/zero/1.0/)\r\n",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/3306/reactions",
    "total_count": 1,
    "+1": 1,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/vyperlang/vyper/issues/3306/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/1454661514",
    "html_url": "https://github.com/vyperlang/vyper/issues/3306#issuecomment-1454661514",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/3306",
    "id": 1454661514,
    "node_id": "IC_kwDOBGDvrM5WtF-K",
    "user": {
      "login": "xrchz",
      "id": 181254,
      "node_id": "MDQ6VXNlcjE4MTI1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/181254?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/xrchz",
      "html_url": "https://github.com/xrchz",
      "followers_url": "https://api.github.com/users/xrchz/followers",
      "following_url": "https://api.github.com/users/xrchz/following{/other_user}",
      "gists_url": "https://api.github.com/users/xrchz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/xrchz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/xrchz/subscriptions",
      "organizations_url": "https://api.github.com/users/xrchz/orgs",
      "repos_url": "https://api.github.com/users/xrchz/repos",
      "events_url": "https://api.github.com/users/xrchz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/xrchz/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-03-04T08:15:04Z",
    "updated_at": "2023-03-04T08:15:04Z",
    "author_association": "NONE",
    "body": "The implicit code inclusion and the need for the `--caller` option could both be avoided with a general purpose code inclusion feature, to inline the contents of a file. (This preprocessing does not technically have to be part of Vyper itself.) In that case import as delegate should check that the imported code has the same storage layout etc as the importing code.",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/1454661514/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/1454665022",
    "html_url": "https://github.com/vyperlang/vyper/issues/3306#issuecomment-1454665022",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/3306",
    "id": 1454665022,
    "node_id": "IC_kwDOBGDvrM5WtG0-",
    "user": {
      "login": "scherrey",
      "id": 878591,
      "node_id": "MDQ6VXNlcjg3ODU5MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/878591?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/scherrey",
      "html_url": "https://github.com/scherrey",
      "followers_url": "https://api.github.com/users/scherrey/followers",
      "following_url": "https://api.github.com/users/scherrey/following{/other_user}",
      "gists_url": "https://api.github.com/users/scherrey/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/scherrey/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/scherrey/subscriptions",
      "organizations_url": "https://api.github.com/users/scherrey/orgs",
      "repos_url": "https://api.github.com/users/scherrey/repos",
      "events_url": "https://api.github.com/users/scherrey/events{/privacy}",
      "received_events_url": "https://api.github.com/users/scherrey/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-03-04T08:35:03Z",
    "updated_at": "2023-03-04T08:35:03Z",
    "author_association": "NONE",
    "body": "Typically when I do a delegate call it's because I want to catch a revert and maybe do something about it rather than just let it throw. (I guess this sort of munges raw_call with the delegate_call option.) Anyway - there's more semantics typically in a delegate call than a straight contract call in the general case for me. If that's true of others then perhaps this proposal needs to somehow anticipate & support these optional semantics. Do others find that to be the case when they use delegate_call?",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/1454665022/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/1454667811",
    "html_url": "https://github.com/vyperlang/vyper/issues/3306#issuecomment-1454667811",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/3306",
    "id": 1454667811,
    "node_id": "IC_kwDOBGDvrM5WtHgj",
    "user": {
      "login": "xrchz",
      "id": 181254,
      "node_id": "MDQ6VXNlcjE4MTI1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/181254?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/xrchz",
      "html_url": "https://github.com/xrchz",
      "followers_url": "https://api.github.com/users/xrchz/followers",
      "following_url": "https://api.github.com/users/xrchz/following{/other_user}",
      "gists_url": "https://api.github.com/users/xrchz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/xrchz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/xrchz/subscriptions",
      "organizations_url": "https://api.github.com/users/xrchz/orgs",
      "repos_url": "https://api.github.com/users/xrchz/repos",
      "events_url": "https://api.github.com/users/xrchz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/xrchz/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-03-04T08:51:03Z",
    "updated_at": "2023-03-04T08:51:03Z",
    "author_association": "NONE",
    "body": "Could extra semantics be left for future improvements while keeping in mind a viable extension path? E.g. try catch blocks for catching reverts. Because it would be nice to get the core call functionality in to support the code size motivation without needing to solve all uses at once. I agree it's worth thinking about to avoid a design that makes other features harder later.",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/1454667811/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/1870485362",
    "html_url": "https://github.com/vyperlang/vyper/issues/3306#issuecomment-1870485362",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/3306",
    "id": 1870485362,
    "node_id": "IC_kwDOBGDvrM5vfVdy",
    "user": {
      "login": "charles-cooper",
      "id": 3867501,
      "node_id": "MDQ6VXNlcjM4Njc1MDE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3867501?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/charles-cooper",
      "html_url": "https://github.com/charles-cooper",
      "followers_url": "https://api.github.com/users/charles-cooper/followers",
      "following_url": "https://api.github.com/users/charles-cooper/following{/other_user}",
      "gists_url": "https://api.github.com/users/charles-cooper/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/charles-cooper/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/charles-cooper/subscriptions",
      "organizations_url": "https://api.github.com/users/charles-cooper/orgs",
      "repos_url": "https://api.github.com/users/charles-cooper/repos",
      "events_url": "https://api.github.com/users/charles-cooper/events{/privacy}",
      "received_events_url": "https://api.github.com/users/charles-cooper/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-12-27T17:12:22Z",
    "updated_at": "2023-12-27T17:12:22Z",
    "author_association": "COLLABORATOR",
    "body": "cf. #3699 ",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/1870485362/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
