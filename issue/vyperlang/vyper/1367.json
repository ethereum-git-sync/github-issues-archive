{
  "url": "https://api.github.com/repos/vyperlang/vyper/issues/1367",
  "repository_url": "https://api.github.com/repos/vyperlang/vyper",
  "labels_url": "https://api.github.com/repos/vyperlang/vyper/issues/1367/labels{/name}",
  "comments_url": "https://api.github.com/repos/vyperlang/vyper/issues/1367/comments",
  "events_url": "https://api.github.com/repos/vyperlang/vyper/issues/1367/events",
  "html_url": "https://github.com/vyperlang/vyper/issues/1367",
  "id": 425055376,
  "node_id": "MDU6SXNzdWU0MjUwNTUzNzY=",
  "number": 1367,
  "title": "VIP: Add support for relative imports.",
  "user": {
    "login": "jacqueswww",
    "id": 6917456,
    "node_id": "MDQ6VXNlcjY5MTc0NTY=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6917456?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jacqueswww",
    "html_url": "https://github.com/jacqueswww",
    "followers_url": "https://api.github.com/users/jacqueswww/followers",
    "following_url": "https://api.github.com/users/jacqueswww/following{/other_user}",
    "gists_url": "https://api.github.com/users/jacqueswww/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jacqueswww/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jacqueswww/subscriptions",
    "organizations_url": "https://api.github.com/users/jacqueswww/orgs",
    "repos_url": "https://api.github.com/users/jacqueswww/repos",
    "events_url": "https://api.github.com/users/jacqueswww/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jacqueswww/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 684449300,
      "node_id": "MDU6TGFiZWw2ODQ0NDkzMDA=",
      "url": "https://api.github.com/repos/vyperlang/vyper/labels/Easy%20Pickings",
      "name": "Easy Pickings",
      "color": "0e8a16",
      "default": false,
      "description": "Used to denote issues that should be easy to implement"
    },
    {
      "id": 757250644,
      "node_id": "MDU6TGFiZWw3NTcyNTA2NDQ=",
      "url": "https://api.github.com/repos/vyperlang/vyper/labels/VIP:%20Approved",
      "name": "VIP: Approved",
      "color": "98f765",
      "default": false,
      "description": "VIP Approved"
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 16,
  "created_at": "2019-03-25T18:34:44Z",
  "updated_at": "2019-08-24T20:18:06Z",
  "closed_at": "2019-08-24T20:18:06Z",
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "## Simple Summary\r\nAllow using `.` and `..` to specify relative imports of interfaces.\r\n\r\n## Abstract\r\nFollowing a long discussion on https://github.com/ethereum/vyper/pull/1361. It came to light that frameworks and programmers need more felxibility in terms of importing interfaces. \r\n\r\n## Motivation\r\nThe motivation is critical for VIPs that add or change Vyper's functionality. It should clearly explain why the existing Vyper functionality is inadequate to address the problem that the VIP solves as well as how the VIP is in line with Vyper's goals and design philosophy.\r\n\r\n## Specification\r\n\r\n`..` will specify parent directory of the current `.vy`  being parsed.\r\n`.` will specify current directory of the `.vy` being parsed.\r\n\r\ne.g.\r\n\r\n```python\r\nfrom .token_interface import TokenInterface\r\n```\r\nWill create an interface names `TokenInterface` from a file currently located at the same directory as the `.vy` file that is currently being parsed. \r\n\r\nEnvironment variable:\r\nVyper shold be allowed to change it's lookup directory from CWD to one set in `VYPER_PATHS`.\r\n\r\n## Backwards Compatibility\r\nIs forward compatible.\r\n\r\n## Dependencies\r\nNone.\r\n\r\n## Copyright\r\nCopyright and related rights waived via [CC0](https://creativecommons.org/publicdomain/zero/1.0/)\r\n",
  "closed_by": {
    "login": "fubuloubu",
    "id": 3859395,
    "node_id": "MDQ6VXNlcjM4NTkzOTU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/3859395?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/fubuloubu",
    "html_url": "https://github.com/fubuloubu",
    "followers_url": "https://api.github.com/users/fubuloubu/followers",
    "following_url": "https://api.github.com/users/fubuloubu/following{/other_user}",
    "gists_url": "https://api.github.com/users/fubuloubu/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/fubuloubu/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/fubuloubu/subscriptions",
    "organizations_url": "https://api.github.com/users/fubuloubu/orgs",
    "repos_url": "https://api.github.com/users/fubuloubu/repos",
    "events_url": "https://api.github.com/users/fubuloubu/events{/privacy}",
    "received_events_url": "https://api.github.com/users/fubuloubu/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/1367/reactions",
    "total_count": 4,
    "+1": 3,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 1,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/vyperlang/vyper/issues/1367/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/476350551",
    "html_url": "https://github.com/vyperlang/vyper/issues/1367#issuecomment-476350551",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/1367",
    "id": 476350551,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3NjM1MDU1MQ==",
    "user": {
      "login": "fubuloubu",
      "id": 3859395,
      "node_id": "MDQ6VXNlcjM4NTkzOTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3859395?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fubuloubu",
      "html_url": "https://github.com/fubuloubu",
      "followers_url": "https://api.github.com/users/fubuloubu/followers",
      "following_url": "https://api.github.com/users/fubuloubu/following{/other_user}",
      "gists_url": "https://api.github.com/users/fubuloubu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fubuloubu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fubuloubu/subscriptions",
      "organizations_url": "https://api.github.com/users/fubuloubu/orgs",
      "repos_url": "https://api.github.com/users/fubuloubu/repos",
      "events_url": "https://api.github.com/users/fubuloubu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fubuloubu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-03-25T19:48:18Z",
    "updated_at": "2019-03-25T19:48:18Z",
    "author_association": "MEMBER",
    "body": "@mikeshultz We decided to take a different tactic to do what you were doing in #1361. We hope you might comment on it here :)",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/476350551/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/476356796",
    "html_url": "https://github.com/vyperlang/vyper/issues/1367#issuecomment-476356796",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/1367",
    "id": 476356796,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3NjM1Njc5Ng==",
    "user": {
      "login": "mikeshultz",
      "id": 1048089,
      "node_id": "MDQ6VXNlcjEwNDgwODk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1048089?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mikeshultz",
      "html_url": "https://github.com/mikeshultz",
      "followers_url": "https://api.github.com/users/mikeshultz/followers",
      "following_url": "https://api.github.com/users/mikeshultz/following{/other_user}",
      "gists_url": "https://api.github.com/users/mikeshultz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mikeshultz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mikeshultz/subscriptions",
      "organizations_url": "https://api.github.com/users/mikeshultz/orgs",
      "repos_url": "https://api.github.com/users/mikeshultz/repos",
      "events_url": "https://api.github.com/users/mikeshultz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mikeshultz/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-03-25T20:06:50Z",
    "updated_at": "2019-03-25T20:06:50Z",
    "author_association": "NONE",
    "body": "For what it's worth, the toolkit I'm working on now invokes the `vyper` module directly and does import resolution itself instead of relying on invoking the CLI script.\r\n\r\nThat said, I still think this is a good idea. And if this resolution is not implemented in the compiler(but the CLI script with the package), this is the kind of thing that should be documented for other tools utilizing Vyper.\r\n\r\nGenerally, maybe this is the kind of thing that would be good to get some documented rules/best practices for how to resolve absolute paths as well. *If* you all think the current working directory is the best place to resolve from, that should be documented.  Maybe absolute paths and the possibility of having a library `PATH` is a different discussion, however.",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/476356796/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/476363219",
    "html_url": "https://github.com/vyperlang/vyper/issues/1367#issuecomment-476363219",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/1367",
    "id": 476363219,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3NjM2MzIxOQ==",
    "user": {
      "login": "fubuloubu",
      "id": 3859395,
      "node_id": "MDQ6VXNlcjM4NTkzOTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3859395?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fubuloubu",
      "html_url": "https://github.com/fubuloubu",
      "followers_url": "https://api.github.com/users/fubuloubu/followers",
      "following_url": "https://api.github.com/users/fubuloubu/following{/other_user}",
      "gists_url": "https://api.github.com/users/fubuloubu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fubuloubu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fubuloubu/subscriptions",
      "organizations_url": "https://api.github.com/users/fubuloubu/orgs",
      "repos_url": "https://api.github.com/users/fubuloubu/repos",
      "events_url": "https://api.github.com/users/fubuloubu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fubuloubu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-03-25T20:25:42Z",
    "updated_at": "2019-03-25T20:25:42Z",
    "author_association": "MEMBER",
    "body": "Maybe the compiler API can be written such that if the compiler encounters any import statements, it references a \"lookup\" mapping of those packages to the specific source files they reference, which must be provided by the CLI script (and any other tools). This keeps the compiler functionally pure, and mitigates introducing the concept of the filesystem into the compiler.",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/476363219/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/476368000",
    "html_url": "https://github.com/vyperlang/vyper/issues/1367#issuecomment-476368000",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/1367",
    "id": 476368000,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3NjM2ODAwMA==",
    "user": {
      "login": "mikeshultz",
      "id": 1048089,
      "node_id": "MDQ6VXNlcjEwNDgwODk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1048089?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mikeshultz",
      "html_url": "https://github.com/mikeshultz",
      "followers_url": "https://api.github.com/users/mikeshultz/followers",
      "following_url": "https://api.github.com/users/mikeshultz/following{/other_user}",
      "gists_url": "https://api.github.com/users/mikeshultz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mikeshultz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mikeshultz/subscriptions",
      "organizations_url": "https://api.github.com/users/mikeshultz/orgs",
      "repos_url": "https://api.github.com/users/mikeshultz/repos",
      "events_url": "https://api.github.com/users/mikeshultz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mikeshultz/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-03-25T20:39:25Z",
    "updated_at": "2019-03-25T20:39:25Z",
    "author_association": "NONE",
    "body": "Isn't that what it does now?  Well, except the file contents are provided instead of a path.  The downside of that would be that whatever invokes the compiler will still need to know the location of the contract/package names to provide the compiler.  In that case, may as well leave it the same.\r\n\r\nMaybe a list in which each provided path is checked in order?  That would be more inline with traditional `PATH`-like imports.\r\n\r\nAn example might be:\r\n\r\n    paths = [\r\n        '~/my-project/contracts',\r\n        '~/.local/lib/vyper/site-packages',\r\n        '/usr/lib/vyper/site-packages',\r\n    ]\r\n    vyper.compile_code(\r\n        source_text,\r\n        ['bytecode', 'abi'],\r\n        import_paths=paths,\r\n    )\r\n\r\nI guess for both relative and absolute imports it should be figured out if you want to keep the compiler filesystem agnostic, and leave that up CLI scripts.  If so, some standards would still be good to keep everything inline so the user isn't guessing how it might work.",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/476368000/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/476374761",
    "html_url": "https://github.com/vyperlang/vyper/issues/1367#issuecomment-476374761",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/1367",
    "id": 476374761,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3NjM3NDc2MQ==",
    "user": {
      "login": "fubuloubu",
      "id": 3859395,
      "node_id": "MDQ6VXNlcjM4NTkzOTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3859395?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fubuloubu",
      "html_url": "https://github.com/fubuloubu",
      "followers_url": "https://api.github.com/users/fubuloubu/followers",
      "following_url": "https://api.github.com/users/fubuloubu/following{/other_user}",
      "gists_url": "https://api.github.com/users/fubuloubu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fubuloubu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fubuloubu/subscriptions",
      "organizations_url": "https://api.github.com/users/fubuloubu/orgs",
      "repos_url": "https://api.github.com/users/fubuloubu/repos",
      "events_url": "https://api.github.com/users/fubuloubu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fubuloubu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-03-25T20:58:17Z",
    "updated_at": "2019-03-25T20:58:17Z",
    "author_association": "MEMBER",
    "body": "It might need some sort of \"project root\" object for it to check against.\r\n\r\nFile directory:\r\n```\r\nroot/\r\n    contractA.vy\r\n    more/\r\n        contractB.vy\r\n```\r\n\r\ncontractA.vy:\r\n```python\r\nfrom more.contractB import InterfaceB\r\n# ... stuff\r\n```\r\n\r\ncontractB.vy:\r\n```python\r\nfrom ..contractA import InterfaceA\r\n# ... stuff\r\n```\r\n\r\ncompiler:\r\n```python\r\npaths = {\r\n    'contractA': contractA_source,\r\n    'more': {\r\n        'contractB': contractB_source,\r\n    }\r\n}\r\nvyper.compile_code(\r\n    source_text,\r\n    ['bytecode', 'abi'],\r\n    import_paths=paths,\r\n)\r\n```\r\n\r\nThe thought is that the compiler would have `paths` to look at when determining what to map to when it encounters an `import` statement.\r\n\r\nProbably a lot wrong with this approach though.",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/476374761/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/477208926",
    "html_url": "https://github.com/vyperlang/vyper/issues/1367#issuecomment-477208926",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/1367",
    "id": 477208926,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3NzIwODkyNg==",
    "user": {
      "login": "pipermerriam",
      "id": 824194,
      "node_id": "MDQ6VXNlcjgyNDE5NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/824194?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pipermerriam",
      "html_url": "https://github.com/pipermerriam",
      "followers_url": "https://api.github.com/users/pipermerriam/followers",
      "following_url": "https://api.github.com/users/pipermerriam/following{/other_user}",
      "gists_url": "https://api.github.com/users/pipermerriam/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pipermerriam/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pipermerriam/subscriptions",
      "organizations_url": "https://api.github.com/users/pipermerriam/orgs",
      "repos_url": "https://api.github.com/users/pipermerriam/repos",
      "events_url": "https://api.github.com/users/pipermerriam/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pipermerriam/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-03-27T15:27:13Z",
    "updated_at": "2019-03-27T15:27:13Z",
    "author_association": "CONTRIBUTOR",
    "body": "I'd like to toss something out that may or may not be relevant which is about how we deal with namespacing of imports.  This design will have long lasting influence on the language.\r\n\r\nPython has dependency issues.  It is really difficult to juggle dependencies since version conflicts are so easy to run into and the runtime uses a single namespace for dependency imports.  Another way to say this is that you can only ever have one version of something installed and `import web3` will import the same `web3` module across all python files in a given runtime environment.\r\n\r\nMy understanding is that Node took a different approach, giving every package it's own namespace, thus allowing each package to install their own versions of each dependency and not sharing these dependencies across different packages.  This fundamentally solves an entire class of dependency issues at the cost of a heavier runtime environment.\r\n\r\nMy inclination is to say that the Node approach is *better* in most/many of the ways that I think matter to Vyper.  I'm curious to hear people's thoughts on this.",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/477208926/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/477236548",
    "html_url": "https://github.com/vyperlang/vyper/issues/1367#issuecomment-477236548",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/1367",
    "id": 477236548,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3NzIzNjU0OA==",
    "user": {
      "login": "mikeshultz",
      "id": 1048089,
      "node_id": "MDQ6VXNlcjEwNDgwODk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1048089?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mikeshultz",
      "html_url": "https://github.com/mikeshultz",
      "followers_url": "https://api.github.com/users/mikeshultz/followers",
      "following_url": "https://api.github.com/users/mikeshultz/following{/other_user}",
      "gists_url": "https://api.github.com/users/mikeshultz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mikeshultz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mikeshultz/subscriptions",
      "organizations_url": "https://api.github.com/users/mikeshultz/orgs",
      "repos_url": "https://api.github.com/users/mikeshultz/repos",
      "events_url": "https://api.github.com/users/mikeshultz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mikeshultz/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-03-27T16:22:42Z",
    "updated_at": "2019-03-27T16:22:42Z",
    "author_association": "NONE",
    "body": "> This fundamentally solves an entire class of dependency issues at the cost of a heavier runtime environment.\r\n\r\nFor what it's worth, that cost can be pretty high.  The worst part about dealing with node projects is dealing with dependencies.  That's why there's a handful of competing package managers, and a ton of tools built up around just dealing with dependencies, and why the first solution to things \"not working\" is to `rm -rf node_modules && npm i`.  Worked on a JS project recently that took about 30 minutes to install all the dependencies for their monorepo and it was a constant source of jokes and frustration.\r\n\r\nThat's not to say that Python is so much better when you have a project with mutual dependencies with your dependencies and projects that change their API like they change their underwear...\r\n\r\nFigure I'd also mention that I've seen some projects that have taken to including version names in their contracts.  For example, `V01_MyContract`.  That allows them to not only keep a reference around for deployed contracts, but allow multiple versions to run side by side, and make it absolutely clear to the devs that versions of interfaces are different.\r\n\r\nNot sure if that's the greatest solution, but thought I'd mention it since I've seen it in the wild.",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/477236548/reactions",
      "total_count": 3,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/477307804",
    "html_url": "https://github.com/vyperlang/vyper/issues/1367#issuecomment-477307804",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/1367",
    "id": 477307804,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3NzMwNzgwNA==",
    "user": {
      "login": "fubuloubu",
      "id": 3859395,
      "node_id": "MDQ6VXNlcjM4NTkzOTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3859395?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fubuloubu",
      "html_url": "https://github.com/fubuloubu",
      "followers_url": "https://api.github.com/users/fubuloubu/followers",
      "following_url": "https://api.github.com/users/fubuloubu/following{/other_user}",
      "gists_url": "https://api.github.com/users/fubuloubu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fubuloubu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fubuloubu/subscriptions",
      "organizations_url": "https://api.github.com/users/fubuloubu/orgs",
      "repos_url": "https://api.github.com/users/fubuloubu/repos",
      "events_url": "https://api.github.com/users/fubuloubu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fubuloubu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-03-27T19:08:50Z",
    "updated_at": "2019-03-27T19:09:38Z",
    "author_association": "MEMBER",
    "body": "> My inclination is to say that the Node approach is _better_ in most/many of the ways that I think matter to Vyper.\r\n\r\nNot to say the Node approach is at all _better_ than the Python approach, but the fact of the matter is that this approach makes a lot of sense for smart contracts. It's also how ethPM works. Dependencies for smart contract _should_ be *orders of magnitude* less than Javascript or Python (at least they are now), so I think this approach is reasonable and scaleable. We at least won't be constructing a \"ethpm packages\" directory denser than a neutron star.\r\n\r\n---\r\n\r\nThat being said, I still think there is a requirement for a \"local\" context. Perhaps `.` can serve as that. For a flat `contracts/` directory, that would be `import .Contract` for a file at `Contract.{vy|json}`. For things with multiple levels, this sort of limits it to only one level of depth in the relative import statement (e.g. `import ..Contract`) which I also believe is reasonable and scaleable.\r\n\r\nThe most complex smart contract systems I have seen have been on the order of 50 files, which fits fine in a 1-level deep folder structure. Vyper contract systems will be less file-heavy, due to the structure that Vyper contracts must fit within a single file (except for interfaces). I would argue anything that's larger than this level of complexity deserves to be composed into separate projects and handled through multiple deployed contract systems.",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/477307804/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/519484066",
    "html_url": "https://github.com/vyperlang/vyper/issues/1367#issuecomment-519484066",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/1367",
    "id": 519484066,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUxOTQ4NDA2Ng==",
    "user": {
      "login": "iamdefinitelyahuman",
      "id": 35276322,
      "node_id": "MDQ6VXNlcjM1Mjc2MzIy",
      "avatar_url": "https://avatars.githubusercontent.com/u/35276322?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/iamdefinitelyahuman",
      "html_url": "https://github.com/iamdefinitelyahuman",
      "followers_url": "https://api.github.com/users/iamdefinitelyahuman/followers",
      "following_url": "https://api.github.com/users/iamdefinitelyahuman/following{/other_user}",
      "gists_url": "https://api.github.com/users/iamdefinitelyahuman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/iamdefinitelyahuman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/iamdefinitelyahuman/subscriptions",
      "organizations_url": "https://api.github.com/users/iamdefinitelyahuman/orgs",
      "repos_url": "https://api.github.com/users/iamdefinitelyahuman/repos",
      "events_url": "https://api.github.com/users/iamdefinitelyahuman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/iamdefinitelyahuman/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-08-08T11:44:25Z",
    "updated_at": "2019-08-08T11:44:25Z",
    "author_association": "CONTRIBUTOR",
    "body": "I've been working on this issue as a lead-in to #1520, as the json input will require source paths.  Came across an interesting edge case bug:\r\n\r\nBefore compiling, a mapping is generated that associates each interface import name with it's file path:\r\n\r\nhttps://github.com/ethereum/vyper/blob/e9f3d566782c88f6fa8735136723c3506d2a6cf2/bin/vyper#L115-L120\r\n\r\nIn `interface.extract_file_interface_imports` there is a check to prevent duplicate imports using the same name **within the same contract**:\r\n\r\nhttps://github.com/ethereum/vyper/blob/e9f3d566782c88f6fa8735136723c3506d2a6cf2/vyper/signatures/interface.py#L217-L221\r\n\r\nHowever - lacking a collision check in `get_interface_codes`, if multiple contracts import different interfaces but assign them to the same name, the last parsed contract's interface is the one the compiler will use for all contracts. If this happens, the compile ultimately fails by raising a `FunctionDeclarationException`.\r\n\r\nWhat would be a better solution to this?\r\n\r\n1. Check for collisions within `get_interface_codes` and enforce that a user cannot compile two contracts that assign different interfaces to the same name\r\n2. Call `get_interface_codes` separately for each contract\r\n\r\nTo me, 1 feels more aligned with Vyper's ethos, but it would be trivial for a user to just compile the contracts separately and so adding a check isn't really enforcing much - just ensuring the exception raised is less confusing to the user.",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/519484066/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/519510158",
    "html_url": "https://github.com/vyperlang/vyper/issues/1367#issuecomment-519510158",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/1367",
    "id": 519510158,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUxOTUxMDE1OA==",
    "user": {
      "login": "fubuloubu",
      "id": 3859395,
      "node_id": "MDQ6VXNlcjM4NTkzOTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3859395?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fubuloubu",
      "html_url": "https://github.com/fubuloubu",
      "followers_url": "https://api.github.com/users/fubuloubu/followers",
      "following_url": "https://api.github.com/users/fubuloubu/following{/other_user}",
      "gists_url": "https://api.github.com/users/fubuloubu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fubuloubu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fubuloubu/subscriptions",
      "organizations_url": "https://api.github.com/users/fubuloubu/orgs",
      "repos_url": "https://api.github.com/users/fubuloubu/repos",
      "events_url": "https://api.github.com/users/fubuloubu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fubuloubu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-08-08T13:07:30Z",
    "updated_at": "2019-08-08T13:07:30Z",
    "author_association": "MEMBER",
    "body": "I think 1 is the way to go. Yes, you can just compile them separately if you're being sneaky, but we don't design for sneaky users, just regular ones.",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/519510158/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/519669866",
    "html_url": "https://github.com/vyperlang/vyper/issues/1367#issuecomment-519669866",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/1367",
    "id": 519669866,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUxOTY2OTg2Ng==",
    "user": {
      "login": "davesque",
      "id": 791437,
      "node_id": "MDQ6VXNlcjc5MTQzNw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/791437?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/davesque",
      "html_url": "https://github.com/davesque",
      "followers_url": "https://api.github.com/users/davesque/followers",
      "following_url": "https://api.github.com/users/davesque/following{/other_user}",
      "gists_url": "https://api.github.com/users/davesque/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/davesque/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/davesque/subscriptions",
      "organizations_url": "https://api.github.com/users/davesque/orgs",
      "repos_url": "https://api.github.com/users/davesque/repos",
      "events_url": "https://api.github.com/users/davesque/events{/privacy}",
      "received_events_url": "https://api.github.com/users/davesque/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-08-08T20:11:53Z",
    "updated_at": "2019-08-08T20:15:18Z",
    "author_association": "CONTRIBUTOR",
    "body": "@fubuloubu @iamdefinitelyahuman I actually think 2 is the way to go here.  Imagine the case that we start adding package support to vyper.  Then, we may have a situation where you'd like to import some interface that you didn't write.  It would be pretty annoying if you were planning to use a name that's already in use in the library.  IMHO it also seems likely that you'd run into naming conflicts pretty quickly within a single project.  I can imagine users coming up with their own \"namespacing\" techniques to avoid compilation errors by prefixing the import names of things with the name of the contract into which an interface is being imported.  Then you have an ad hoc system that is prone to error (via typos and such).",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/519669866/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/519670374",
    "html_url": "https://github.com/vyperlang/vyper/issues/1367#issuecomment-519670374",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/1367",
    "id": 519670374,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUxOTY3MDM3NA==",
    "user": {
      "login": "davesque",
      "id": 791437,
      "node_id": "MDQ6VXNlcjc5MTQzNw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/791437?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/davesque",
      "html_url": "https://github.com/davesque",
      "followers_url": "https://api.github.com/users/davesque/followers",
      "following_url": "https://api.github.com/users/davesque/following{/other_user}",
      "gists_url": "https://api.github.com/users/davesque/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/davesque/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/davesque/subscriptions",
      "organizations_url": "https://api.github.com/users/davesque/orgs",
      "repos_url": "https://api.github.com/users/davesque/repos",
      "events_url": "https://api.github.com/users/davesque/events{/privacy}",
      "received_events_url": "https://api.github.com/users/davesque/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-08-08T20:13:28Z",
    "updated_at": "2019-08-08T20:13:28Z",
    "author_association": "CONTRIBUTOR",
    "body": "I suppose, for now, we can just go with the global namespace, but I'd like to revisit this.  I'm pretty sure this will become a stumbling block for users.",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/519670374/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/519673310",
    "html_url": "https://github.com/vyperlang/vyper/issues/1367#issuecomment-519673310",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/1367",
    "id": 519673310,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUxOTY3MzMxMA==",
    "user": {
      "login": "fubuloubu",
      "id": 3859395,
      "node_id": "MDQ6VXNlcjM4NTkzOTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3859395?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fubuloubu",
      "html_url": "https://github.com/fubuloubu",
      "followers_url": "https://api.github.com/users/fubuloubu/followers",
      "following_url": "https://api.github.com/users/fubuloubu/following{/other_user}",
      "gists_url": "https://api.github.com/users/fubuloubu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fubuloubu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fubuloubu/subscriptions",
      "organizations_url": "https://api.github.com/users/fubuloubu/orgs",
      "repos_url": "https://api.github.com/users/fubuloubu/repos",
      "events_url": "https://api.github.com/users/fubuloubu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fubuloubu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-08-08T20:21:59Z",
    "updated_at": "2019-08-08T20:21:59Z",
    "author_association": "MEMBER",
    "body": "Great points, yeah I agree with that. (2) might be more difficult for (1), but avoids issues later.",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/519673310/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/520305364",
    "html_url": "https://github.com/vyperlang/vyper/issues/1367#issuecomment-520305364",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/1367",
    "id": 520305364,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUyMDMwNTM2NA==",
    "user": {
      "login": "iamdefinitelyahuman",
      "id": 35276322,
      "node_id": "MDQ6VXNlcjM1Mjc2MzIy",
      "avatar_url": "https://avatars.githubusercontent.com/u/35276322?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/iamdefinitelyahuman",
      "html_url": "https://github.com/iamdefinitelyahuman",
      "followers_url": "https://api.github.com/users/iamdefinitelyahuman/followers",
      "following_url": "https://api.github.com/users/iamdefinitelyahuman/following{/other_user}",
      "gists_url": "https://api.github.com/users/iamdefinitelyahuman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/iamdefinitelyahuman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/iamdefinitelyahuman/subscriptions",
      "organizations_url": "https://api.github.com/users/iamdefinitelyahuman/orgs",
      "repos_url": "https://api.github.com/users/iamdefinitelyahuman/repos",
      "events_url": "https://api.github.com/users/iamdefinitelyahuman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/iamdefinitelyahuman/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-08-12T05:52:22Z",
    "updated_at": "2019-08-12T05:52:22Z",
    "author_association": "CONTRIBUTOR",
    "body": "Re: `from` imports, the current syntax for built-in interfaces is:\r\n\r\n`from <folder> import <filename>` (as filename)\r\n\r\nthe alias is assumed, if a contract specifies one it is ignored by the compiler.  For example, this contract fails to compile with `Contract \"Foo\" not declared yet`:\r\n\r\n```python\r\nfrom vyper.interfaces import ERC20 as Foo\r\n\r\n@public\r\ndef bar() -> uint256:\r\n    return ERC20(0).balanceOf(msg.sender)\r\n\r\n@public\r\ndef baz() -> uint256:\r\n    return Foo(0).balanceOf(msg.sender)\r\n```\r\n\r\nThe proposed change for this VIP follows a pattern of:\r\n\r\n`from <.folder.filename> import <alias>`\r\n\r\nThis creates ambiguity in the `from` import syntax.  Because this syntax was already established for built-in interfaces, I think relative imports should instead use `from <.folder> import <filename>` to maintain consistency. Attempting to alias a `from` import should either fail loudly, or be supported.  Supporting it keeps Vyper more in-line with how Python works, disallowing it arguably makes for more readable code... and possibly I'm not considering something here.\r\n\r\n@davesque @fubuloubu thoughts?",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/520305364/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/521511604",
    "html_url": "https://github.com/vyperlang/vyper/issues/1367#issuecomment-521511604",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/1367",
    "id": 521511604,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUyMTUxMTYwNA==",
    "user": {
      "login": "fubuloubu",
      "id": 3859395,
      "node_id": "MDQ6VXNlcjM4NTkzOTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3859395?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fubuloubu",
      "html_url": "https://github.com/fubuloubu",
      "followers_url": "https://api.github.com/users/fubuloubu/followers",
      "following_url": "https://api.github.com/users/fubuloubu/following{/other_user}",
      "gists_url": "https://api.github.com/users/fubuloubu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fubuloubu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fubuloubu/subscriptions",
      "organizations_url": "https://api.github.com/users/fubuloubu/orgs",
      "repos_url": "https://api.github.com/users/fubuloubu/repos",
      "events_url": "https://api.github.com/users/fubuloubu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fubuloubu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-08-15T04:43:53Z",
    "updated_at": "2019-08-19T15:42:07Z",
    "author_association": "MEMBER",
    "body": "Proposed amended rule set:\r\n```python\r\n# file heirarchy:\r\n# contracts/\r\n#     contractA.vy\r\n#     interfaceB.json\r\n#     folder/\r\n#         contractC.vy\r\n#         interfaceD.json\r\n\r\n# contractA.vy:\r\nfrom .. import fail  # Fails if `contracts/` is used as root folder (outside access)\r\nimport ..fail  # Fails same as above\r\n\r\nimport interfaceB  # `interfaceB` interface made available\r\nimport .interfaceB  # `interfaceB` interface made available (same as above)\r\n\r\nimport folder.contractC  # `contractC` interface made available\r\nimport folder.interfaceD as MyInterface  # `MyInterface` interface made available (alias)\r\n\r\n# json files can't reference other interfaces (by design)\r\n\r\n# contractC.vy:\r\nfrom .. import contractA  # `contractA` interface made available\r\nimport ..interfaceB  # `interfaceB` interface made available\r\n\r\nimport .interfaceD as MyInterface  # `MyInterface` interface made available (alias)\r\nfrom . import contractC as Self  # `Self` interface made available\r\n# Should this be allowed? Why not? There's no technical reason not to\r\n```\r\n\r\n---\r\n\r\nEdit: This makes the assumption of \"derived interfaces\", which I'm not sure is a reality in the current codebase, but could/should definitely be able to be implemented.\r\n\r\n---\r\n\r\nEdit: to be clear, `Self` is not any sort of \"special sauce\", it would just be a convention for calling with your own interface as the external interface",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/521511604/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/521512320",
    "html_url": "https://github.com/vyperlang/vyper/issues/1367#issuecomment-521512320",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/1367",
    "id": 521512320,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUyMTUxMjMyMA==",
    "user": {
      "login": "fubuloubu",
      "id": 3859395,
      "node_id": "MDQ6VXNlcjM4NTkzOTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3859395?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fubuloubu",
      "html_url": "https://github.com/fubuloubu",
      "followers_url": "https://api.github.com/users/fubuloubu/followers",
      "following_url": "https://api.github.com/users/fubuloubu/following{/other_user}",
      "gists_url": "https://api.github.com/users/fubuloubu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fubuloubu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fubuloubu/subscriptions",
      "organizations_url": "https://api.github.com/users/fubuloubu/orgs",
      "repos_url": "https://api.github.com/users/fubuloubu/repos",
      "events_url": "https://api.github.com/users/fubuloubu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fubuloubu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-08-15T04:48:09Z",
    "updated_at": "2019-08-15T04:48:09Z",
    "author_association": "MEMBER",
    "body": "A good example of self-referencing would be something like Uniswap exchanges, when a Token to Token swap is desired. Basically, you have one function that wishes to make a call to another function using the same interface (but different deployed addresses).\r\n\r\nI mean, we try to avoid mutual recursion as a rule, but we can't stop people from doing it if they're clever, so might as well make it easy to be clear.",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/521512320/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
