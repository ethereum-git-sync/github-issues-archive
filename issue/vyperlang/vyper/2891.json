{
  "url": "https://api.github.com/repos/vyperlang/vyper/issues/2891",
  "repository_url": "https://api.github.com/repos/vyperlang/vyper",
  "labels_url": "https://api.github.com/repos/vyperlang/vyper/issues/2891/labels{/name}",
  "comments_url": "https://api.github.com/repos/vyperlang/vyper/issues/2891/comments",
  "events_url": "https://api.github.com/repos/vyperlang/vyper/issues/2891/events",
  "html_url": "https://github.com/vyperlang/vyper/issues/2891",
  "id": 1260458460,
  "node_id": "I_kwDOBGDvrM5LIRHc",
  "number": 2891,
  "title": "VIP: Factory contracts",
  "user": {
    "login": "charles-cooper",
    "id": 3867501,
    "node_id": "MDQ6VXNlcjM4Njc1MDE=",
    "avatar_url": "https://avatars.githubusercontent.com/u/3867501?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/charles-cooper",
    "html_url": "https://github.com/charles-cooper",
    "followers_url": "https://api.github.com/users/charles-cooper/followers",
    "following_url": "https://api.github.com/users/charles-cooper/following{/other_user}",
    "gists_url": "https://api.github.com/users/charles-cooper/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/charles-cooper/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/charles-cooper/subscriptions",
    "organizations_url": "https://api.github.com/users/charles-cooper/orgs",
    "repos_url": "https://api.github.com/users/charles-cooper/repos",
    "events_url": "https://api.github.com/users/charles-cooper/events{/privacy}",
    "received_events_url": "https://api.github.com/users/charles-cooper/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 751622094,
      "node_id": "MDU6TGFiZWw3NTE2MjIwOTQ=",
      "url": "https://api.github.com/repos/vyperlang/vyper/labels/VIP:%20Discussion",
      "name": "VIP: Discussion",
      "color": "000000",
      "default": false,
      "description": "Used to denote VIPs and more complex issues that are waiting discussion in a meeting"
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 4,
  "created_at": "2022-06-03T22:38:54Z",
  "updated_at": "2022-06-10T23:20:21Z",
  "closed_at": null,
  "author_association": "COLLABORATOR",
  "active_lock_reason": null,
  "body": "## Simple Summary\r\nCreate a first class factory contract, which stores initcode instead of runtime code.\r\n\r\n## Motivation\r\nhttps://github.com/vyperlang/vyper/pull/2895 introduces the `create_with_code_of()` factory function. It is a good mechanism for calling arbitrary initcode (e.g., factory contracts that are created in solidity). However, it is untyped; it's cumbersome to assemble the constructor args to forward to the factory contract, the constructor arguments are not typechecked, and the type of the returned contract is unknown. Constructing the deploy code for the factory is also slightly tedious (although this can be solved at the tooling level). For Vyper-generated factories, we can do better. https://github.com/vyperlang/vyper/issues/2326 would be a way of implementing init code for proxies and also contracts created using the existing `create*()` functions, but it uses a non-EVM-native mechanism and can't handle immutables.\r\n\r\n## Specification\r\nAdd a `@factory` decorator which is only allowed on the `__init__()` function. If the factory decorator is there, the regular deploy code for the factory deploys the initcode instead of the runtime code. Users of the factory will need to import the interface to the factory contract, and then call `SomeFactory.create(*args)` (where `*args` are the arguments specified in `SomeFactory.__init__()`) which loads the initcode into memory along with `*args`, and then executes the initcode with CREATE/CREATE2.\r\n\r\nNote that `SomeFactory.create(*args)` would be equivalent to `create_with_code_of(some_factory.address, *args)`, with the added compile-time check that the arguments line up with the signature of `SomeFactory.__init__()`, and with the resulting address already casted to the target type of `SomeFactory`. Example usage:\r\n\r\n```vyper\r\n# foo_wizard.vy\r\n# some contract which is a magician when it comes to `foo`\r\n\r\nFOO: immutable(uint256)\r\n\r\n@factory\r\n@external\r\ndef __init__(foo: uint256):\r\n    FOO = foo\r\n\r\n@external\r\ndef what_is_foo() -> uint256:\r\n    return FOO\r\n```\r\n```vyper\r\n# factory.vy\r\nimport foo_wizard as foo_wizard\r\n\r\n@external\r\ndef create_foo_wizard(factory: foo_wizard.Factory, arg1: uint256) -> foo_wizard.Interface:\r\n    # factory.what_is_foo()   # not allowed! raises: factory is a factory contract, not a runtime contract\r\n\r\n    # t: foo_wizard.Interface = factory.create(arg1, arg1)  # not allowed! does not typecheck.\r\n\r\n    t: foo_wizard.Interface = factory.create(arg1)\r\n    assert t.what_is_foo() == arg1\r\n    \r\n    # does the same thing; although signature is not type checked.\r\n    v: foo_wizard.Interface = foo_wizard.Interface(create_with_code_of(factory.address, arg1))\r\n\r\n    return t\r\n```\r\n\r\n## Backwards Compatibility\r\nNo breaking changes\r\n\r\n## Dependencies\r\nDepends on syntactic changes to import system in https://github.com/vyperlang/vyper/issues/2431\r\n\r\n## References\r\nhttps://github.com/vyperlang/vyper/issues/2326\r\n\r\n## Copyright\r\nCopyright and related rights waived via [CC0](https://creativecommons.org/publicdomain/zero/1.0/)\r\n",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/2891/reactions",
    "total_count": 2,
    "+1": 2,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/vyperlang/vyper/issues/2891/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/1146494555",
    "html_url": "https://github.com/vyperlang/vyper/issues/2891#issuecomment-1146494555",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/2891",
    "id": 1146494555,
    "node_id": "IC_kwDOBGDvrM5EVh5b",
    "user": {
      "login": "fubuloubu",
      "id": 3859395,
      "node_id": "MDQ6VXNlcjM4NTkzOTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3859395?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fubuloubu",
      "html_url": "https://github.com/fubuloubu",
      "followers_url": "https://api.github.com/users/fubuloubu/followers",
      "following_url": "https://api.github.com/users/fubuloubu/following{/other_user}",
      "gists_url": "https://api.github.com/users/fubuloubu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fubuloubu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fubuloubu/subscriptions",
      "organizations_url": "https://api.github.com/users/fubuloubu/orgs",
      "repos_url": "https://api.github.com/users/fubuloubu/repos",
      "events_url": "https://api.github.com/users/fubuloubu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fubuloubu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-06-04T01:55:44Z",
    "updated_at": "2022-06-04T01:55:44Z",
    "author_association": "MEMBER",
    "body": "A few comments:\r\n1. I think the fields should be properties and not types e.g. `foo_wizard.factory` and `foo_wizard.interface`\r\n2. `foo_wizard.factory` sounds a bit domain specific. Wonder if something like `foo_wizard.create(*args)` or `foo_wizard.__init__(*args)` might make more sense semantically (same with `@factory` although I could be more convinced)\r\n3. Why does `create_foo_wizard` return a tuple with the second item being an integer?",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/1146494555/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/1146631928",
    "html_url": "https://github.com/vyperlang/vyper/issues/2891#issuecomment-1146631928",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/2891",
    "id": 1146631928,
    "node_id": "IC_kwDOBGDvrM5EWDb4",
    "user": {
      "login": "charles-cooper",
      "id": 3867501,
      "node_id": "MDQ6VXNlcjM4Njc1MDE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3867501?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/charles-cooper",
      "html_url": "https://github.com/charles-cooper",
      "followers_url": "https://api.github.com/users/charles-cooper/followers",
      "following_url": "https://api.github.com/users/charles-cooper/following{/other_user}",
      "gists_url": "https://api.github.com/users/charles-cooper/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/charles-cooper/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/charles-cooper/subscriptions",
      "organizations_url": "https://api.github.com/users/charles-cooper/orgs",
      "repos_url": "https://api.github.com/users/charles-cooper/repos",
      "events_url": "https://api.github.com/users/charles-cooper/events{/privacy}",
      "received_events_url": "https://api.github.com/users/charles-cooper/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-06-04T15:15:27Z",
    "updated_at": "2022-06-04T15:16:58Z",
    "author_association": "COLLABORATOR",
    "body": "> 1. I think the fields should be properties and not types e.g. `foo_wizard.factory` and `foo_wizard.interface`\r\nnoted.\r\n\r\n> 2. `foo_wizard.factory` sounds a bit domain specific. Wonder if something like `foo_wizard.create(*args)` or `foo_wizard.__init__(*args)` might make more sense semantically (same with `@factory` although I could be more convinced)\r\n\r\ni kind of like `.create()`. but we do need to let the type checker know whether we are dealing with a factory contract or a regular contract.\r\n\r\nre. the `@factory` decorator -- i think it's actually not necessary for the type checker. ~we do need~ maybe instead we can just introduce a new mode for the compiler, `-f factory_bytecode` (which returns the deploy code for the factory instead of deploy code for the regular contract)\r\n\r\n> 3. Why does `create_foo_wizard` return a tuple with the second item being an integer?\r\n\r\nmistake, fixed",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/1146631928/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/1146640559",
    "html_url": "https://github.com/vyperlang/vyper/issues/2891#issuecomment-1146640559",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/2891",
    "id": 1146640559,
    "node_id": "IC_kwDOBGDvrM5EWFiv",
    "user": {
      "login": "fubuloubu",
      "id": 3859395,
      "node_id": "MDQ6VXNlcjM4NTkzOTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3859395?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fubuloubu",
      "html_url": "https://github.com/fubuloubu",
      "followers_url": "https://api.github.com/users/fubuloubu/followers",
      "following_url": "https://api.github.com/users/fubuloubu/following{/other_user}",
      "gists_url": "https://api.github.com/users/fubuloubu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fubuloubu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fubuloubu/subscriptions",
      "organizations_url": "https://api.github.com/users/fubuloubu/orgs",
      "repos_url": "https://api.github.com/users/fubuloubu/repos",
      "events_url": "https://api.github.com/users/fubuloubu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fubuloubu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-06-04T16:00:07Z",
    "updated_at": "2022-06-04T16:00:07Z",
    "author_association": "MEMBER",
    "body": "> re. the `@factory` decorator -- i think it's actually not necessary for the type checker. ~we do need~ maybe instead we can just introduce a new mode for the compiler, `-f factory_bytecode` (which returns the deploy code for the factory instead of deploy code for the regular contract)\r\n\r\nRather not have another compiler mode. If it materially impacts the bytecode that gets generated, would rather have to have something in the source code that mirrors it. I think `@factory` makes sense then.",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/1146640559/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/1147650579",
    "html_url": "https://github.com/vyperlang/vyper/issues/2891#issuecomment-1147650579",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/2891",
    "id": 1147650579,
    "node_id": "IC_kwDOBGDvrM5EZ8IT",
    "user": {
      "login": "charles-cooper",
      "id": 3867501,
      "node_id": "MDQ6VXNlcjM4Njc1MDE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3867501?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/charles-cooper",
      "html_url": "https://github.com/charles-cooper",
      "followers_url": "https://api.github.com/users/charles-cooper/followers",
      "following_url": "https://api.github.com/users/charles-cooper/following{/other_user}",
      "gists_url": "https://api.github.com/users/charles-cooper/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/charles-cooper/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/charles-cooper/subscriptions",
      "organizations_url": "https://api.github.com/users/charles-cooper/orgs",
      "repos_url": "https://api.github.com/users/charles-cooper/repos",
      "events_url": "https://api.github.com/users/charles-cooper/events{/privacy}",
      "received_events_url": "https://api.github.com/users/charles-cooper/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-06-06T16:37:38Z",
    "updated_at": "2022-06-06T16:37:48Z",
    "author_association": "COLLABORATOR",
    "body": "meeting notes: punt until new module system is done, and then the spec can be more concrete",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/1147650579/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
