{
  "url": "https://api.github.com/repos/vyperlang/vyper/issues/1277",
  "repository_url": "https://api.github.com/repos/vyperlang/vyper",
  "labels_url": "https://api.github.com/repos/vyperlang/vyper/issues/1277/labels{/name}",
  "comments_url": "https://api.github.com/repos/vyperlang/vyper/issues/1277/comments",
  "events_url": "https://api.github.com/repos/vyperlang/vyper/issues/1277/events",
  "html_url": "https://github.com/vyperlang/vyper/issues/1277",
  "id": 414907698,
  "node_id": "MDU6SXNzdWU0MTQ5MDc2OTg=",
  "number": 1277,
  "title": "VIP: [research] Static balance sheet analysis for Vyper contracts",
  "user": {
    "login": "charles-cooper",
    "id": 3867501,
    "node_id": "MDQ6VXNlcjM4Njc1MDE=",
    "avatar_url": "https://avatars.githubusercontent.com/u/3867501?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/charles-cooper",
    "html_url": "https://github.com/charles-cooper",
    "followers_url": "https://api.github.com/users/charles-cooper/followers",
    "following_url": "https://api.github.com/users/charles-cooper/following{/other_user}",
    "gists_url": "https://api.github.com/users/charles-cooper/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/charles-cooper/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/charles-cooper/subscriptions",
    "organizations_url": "https://api.github.com/users/charles-cooper/orgs",
    "repos_url": "https://api.github.com/users/charles-cooper/repos",
    "events_url": "https://api.github.com/users/charles-cooper/events{/privacy}",
    "received_events_url": "https://api.github.com/users/charles-cooper/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 751622094,
      "node_id": "MDU6TGFiZWw3NTE2MjIwOTQ=",
      "url": "https://api.github.com/repos/vyperlang/vyper/labels/VIP:%20Discussion",
      "name": "VIP: Discussion",
      "color": "000000",
      "default": false,
      "description": "Used to denote VIPs and more complex issues that are waiting discussion in a meeting"
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 6,
  "created_at": "2019-02-27T01:57:27Z",
  "updated_at": "2020-05-07T14:21:35Z",
  "closed_at": null,
  "author_association": "COLLABORATOR",
  "active_lock_reason": null,
  "body": "## Simple Summary\r\nCreate a way for contract developers to ensure that balance sheet invariants (e.g., the total amount a user can withdraw is equal to to the total amount that user has deposited) are preserved.\r\n\r\n## Abstract\r\nBalance sheet analysis of smart contracts is prone to error. Rather than have developers prove ad-hoc invariants about cash flows using constraint-based checkers (cf. https://github.com/Zilliqa/scilla/issues/18 for one approach to this), this VIP proposes a DSL for handling funds based on double-entry accounting principles which maintains balance-sheet invariants by construction. This DSL aims to be easy to read, write and reason about, and familiar to non-programmer accountants. (It is unclear whether this is within the scope of Vyper core or should be an external tool which is why this VIP is marked as [research], but because it requires syntactic support, I believe it is more appropriate as a core Vyper feature).\r\n\r\n## Motivation\r\nOne of Vyper's goals is to create readable, auditable code which is difficult to be misleading. One tricky area for contract developers is accounting! Fortunately, accountants have developed techniques over the years to help with doing accounting precisely.\r\n\r\nThis proposal centers around two concepts: the journal entry and the chart of accounts. A journal entry is a collection of debits and credits. Here is an example journal entry:\r\n\r\n| Account | Debit | Credit |\r\n| -- | -- | -- |\r\n| Equity | 1.5 | - |\r\n| Assets | - | 1.5 |\r\n| -- | -- | -- |\r\n| Total | 1.5 | 1.5 |\r\n\r\nThis journal entry *balances*, that is, the debits and credits sum to the same amount. A journal entry MUST balance in order to be valid. This preserves the *balance sheet invariant*, which is (in this case) that Equity == Assets. In fact, the chart of accounts defines multiple balance sheet invariants.\r\n\r\nBut first, a digression into some definitions around accounts relevant to this proposal. The chart of accounts is a hierarchical list of accounts. The basic chart of accounts has three top-level accounts: Equity, Liabilities and Assets. Equity and Liability accounts are credit-normal, while Asset accounts are debit-normal. This means that debits *increase* and credits *decrease* the balance of an Asset account, while debits *decrease* and credits *increase* the balance of an Equity or Liability account. The reason for this (cue sweeping statements) stems from how corporate accounting developed in the West; accounting entities do not have value. They may hold property (Asset accounts) but it is always canceled by claims by first lienholders (Liability accounts) and second lienholders (Equity accounts). This is represented by the accounting equation, Assets = Equity + Liabilities. So, when assets increase (are debited), liabilities or equity must increase (get credited) and vice versa.\r\n\r\nHere is an example chart of accounts:\r\n\r\n```\r\nEquity:\r\n  - Fees accrued\r\nAssets:\r\n  - Total ether\r\nLiabilities:\r\n  - User deposits:\r\n    - User 1 deposits\r\n    - User 2 deposits\r\n```\r\n\r\nHere is an example journal entry involving such accounts. A user deposits 1.1 ether into the contract, and the contract deducts 0.1 as a fee:\r\n\r\n| Account | Debit | Credit |\r\n| -- | -- | -- |\r\n| Total ether | 1.1 | - |\r\n| User 1 deposits | - | 1 |\r\n| Fees accrued | - | 0.1 |\r\n| -- | -- | -- |\r\n| Total | 1.1 | 1.1 |\r\n\r\nClearly, the top-level balance sheet invariant is preserved:\r\n```\r\nEquity + Liabilities = Assets\r\n0.1 eth + 1 eth = 1.1 eth\r\n```\r\n\r\nBut there is another, 'phantom' balance sheet invariant implied by the chart of accounts which is equally important: User deposits = User 1 deposits + User 2 deposits. To show how journal entries maintain both invariants at the same time, suppose User 1 transfers ownership of their deposit to User 2 (and just for fun, charge a fee of 0.1 ether).\r\n\r\n| Account | Debit | Credit |\r\n| -- | -- | -- |\r\n| User 1 deposits | 1 | - |\r\n| User 2 deposits | - | 0.9 |\r\n| Fees accrued | - | 0.1 |\r\n| -- | -- | -- |\r\n| Total | 1 | 1 |\r\n\r\nThe balance sheet invariants are now:\r\n```\r\nUser 1 deposits + User 2 deposits = User deposits\r\n0 eth + 0.9 eth = 0.9 eth\r\n\r\nEquity + Liabilities = Assets\r\n0.2 eth + 0.9 eth = 1.1 eth\r\n```\r\n\r\nIn normal accounting, the intermediate invariants are implied (and also easily checked by simply summing the account balances). As a smart contract programmer, it can be useful to know that all of these invariants are maintained every step of the way (and since summing the account balances could have unbounded gas cost, to have the ability to store the balances of the intermediate accounts).\r\n\r\n## Specification (tentative)\r\n\r\nA couple common use cases shape the syntax in this VIP. One is the use case of mapping identifiers to balances, and the other is the need to define custom debit and credit functions to interact with the outside world.\r\n\r\nA data structure which handles funds is marked using the `@funds` decorator. In order so that the compiler knows what statements to generate for debits and credits, it must also be marked either `@debitnormal` or `@creditnormal`. In order to define a nested account, arguments can be provided to the `@funds` decorator. For example, the nested account\r\n```\r\nUser deposits:\r\n  [list of Token (TOKEN_ARG)]\r\n    [list of User deposit by (USER_IDENTIFIER)]\r\n```\r\ncan be defined like\r\n```\r\n@funds('TOKEN_ARG', 'USER_IDENTIFIER')\r\nuser_deposits: map(ERC20, map(address, uint256))\r\n```\r\n\r\nDefining a custom debit/credit can be done by defining a special function which is then decorated with `@debit/@credit` and its scope. For example, to debit and credit a phantom token balance, it could be defined as follows:\r\n```\r\n@debit('erc20_balance')\r\ndef _erc20_balance_debit(tok: ERC20, amt: uint256):\r\n  tok.transferFrom(msg.sender, self, amt)\r\n@credit('erc20_balance')\r\ndef _erc20_balance_credit(tok: ERC20, amt: uint256):\r\n  tok.transfer(msg.sender, amt)\r\n```\r\n\r\nFinally, funds can only be touched with the special `journal` control structure. A journal entry can be created as follows:\r\n```\r\njournal:\r\n  debits:\r\n    - account: <account>\r\n      amount: <amount>\r\n    ...\r\n  credits:\r\n    - account: <account>\r\n      amount: <amount>\r\n    ...\r\n```\r\nThe compiler should throw unless it can verify that the sum of the debits is equal to the sum of the credits (or the journal entry does not have at least one debit and at least one credit). Also, any function which has a journal entry should have a non-reentrant lock associated with it (cf. #1204).\r\n\r\n### Examples\r\n\r\nHere is a sample token, with just `mint`, `burn` and `transfer` functions defined:\r\n```python\r\n@funds('user')\r\n@creditnormal\r\nbalances: public(map(address, uint256))\r\n\r\n@funds\r\n@debitnormal\r\nsupply: public(uint256)\r\n\r\n# Default implementations generated by compiler\r\n##@debit('user')\r\n##def _debit_user(user: address, amt: uint256):\r\n##  self.balances[user] -= amt\r\n##@credit('user')\r\n##def _credit_user(user: address, amt: uint256):\r\n##  self.balances[user] += amt\r\n##@debit('supply')\r\n##def _debit_supply(amt: uint256):\r\n##  supply += amt\r\n##@credit('supply')\r\n##def _credit_supply(amt: uint256):\r\n##  supply -= amt\r\n\r\nowner: address\r\n\r\ndef __init__():\r\n  self.owner = msg.sender\r\n\r\ndef mint(amt: uint256):\r\n  assert msg.sender == self.owner\r\n  journal:\r\n    debits:\r\n    - account: supply\r\n      amount: amt\r\n    credits:\r\n    - account: user(msg.sender)\r\n      amount: amt\r\n\r\ndef burn(amt: uint256):\r\n  journal:\r\n    debits:\r\n    - account: user(msg.sender)\r\n      amount: amt\r\n    credits:\r\n    - account: supply\r\n      amount: amt\r\n\r\ndef transfer(to: address, amt: uint256):\r\n  journal:\r\n    debits:\r\n    - account: user(msg.sender)\r\n      amount: amt\r\n    credits:\r\n    - account: user(to)\r\n      amount: amt\r\n```\r\n\r\nHere is an example smart contract which illustrates some current error-prone techniques and how this proposal improves the situation, defined once using current Vyper, and once using this VIP. It is a payment splitter where a user can define multiple recipients for a single payment, held in escrow until the recipient withdraws the funds. The first implementation contains three accounting bugs which are easily caught by the journal entry format, and one bug which is prevented by the re-entrancy lock.\r\n\r\n```python\r\n# Current Vyper\r\n\r\nbalances: map(ERC20, map(address, uint256))\r\n\r\ndef split_payment(tok: ERC20, amt: uint256, recipient1: address, recipient2: address):\r\n  require(tok.transferFrom(recipient1, self, amt))\r\n  if recipient1 != 0x00 and recipient2 != 0x00:\r\n    self.balances[recipient1] += amt/2 # rounding error, 1 wei might be lost\r\n    self.balances[recipient2] = amt/2 # typo! (should be `+=`)\r\n  elif recipient1 != 0x00:\r\n    self.balances[recipient1] += amt\r\n  # missing case, funds are now irretrievable\r\n\r\ndef withdraw(tok: ERC20, amt: uint256):\r\n  require(tok.transfer(msg.sender, amt)) # re-entrant\r\n  self.balances[msg.sender] -= amt\r\n```\r\n\r\n```python\r\n# Vyper with this VIP\r\n\r\n@funds('erc20', 'user')\r\n@creditnormal\r\nbalances: map(ERC20, map(address, uint256))\r\n\r\n# define single-entry debits and credits\r\n# must be defined since there is no @funds('erc20_balance') defined.\r\n# implied: @nonreentrant('balances')\r\n@debit('erc20_balance')\r\ndef _debit_erc20(tok: ERC20, amt: uint256):\r\n  require(tok.transferFrom(msg.sender, self, amt))\r\n  # Perhaps the compiler should generate a data structure\r\n  # for the intermediate balance and modify it here:\r\n  # self.erc20_balances[tok] += amt\r\n\r\n# implied: @nonreentrant('balances')\r\n@credit('erc20_balance')\r\ndef _credit_erc20(tok: ERC20, amt: uint256):\r\n  require(tok.transfer(msg.sender, amt))\r\n  # Perhaps the compiler should generate a data structure\r\n  # for the intermediate balance and modify it here:\r\n  # self.erc20_balances[tok] -= amt\r\n\r\n# Default implementation generated by the compiler.\r\n##@nonreentrant('balances')\r\n##@debit('erc20.user')\r\n##def _debit_erc20_user(tok: ERC20, user: address, amt: uint256):\r\n##  self.balances[tok][user] -= amt # implicit underflow check\r\n\r\n# Default implementation generated by the compiler.\r\n##@nonreentrant('balances')\r\n##@credit('erc20.user')\r\n##def _credit_erc20_user(tok: ERC20, user: address, amt: uint256):\r\n##  self.balances[tok][user] += amt\r\n\r\ndef split_payment_fail(tok: ERC20, amt: uint256, recipient1: address, recipient2: address): \r\n  if recipient1 != 0x00 and recipient2 != 0x00:\r\n    journal:\r\n      debits:\r\n      - account: erc20_balance(tok)\r\n        amount: amt\r\n      credits: # fail. compiler cannot prove that amt/2 + amt/2 == amt\r\n      - account: erc20.user(tok)(recipient1)\r\n        amount: amt/2\r\n      - account: erc20.user(tok)(recipient2)\r\n        amount: amt/2\r\n  elif recipient1 != 0x00:\r\n    journal:\r\n      debits:\r\n      - account: erc20_balance(tok)\r\n        amount: amt\r\n      credits:\r\n      - account: erc20.user(tok)(recipient1)\r\n        amount: amt\r\n  # no lost funds because no transfer is made.\r\n\r\ndef split_payment_better(tok: ERC20, amt: uint256, recipient1: address, recipient2: address):\r\n  if recipient1 != 0x00 and recipient2 != 0x00:\r\n    journal:\r\n      debits:\r\n      - account: erc20_balance(tok)\r\n        # OK because compiler can find matching amounts on\r\n        # both sides of the entry.\r\n        amount: amt/2\r\n      - account: erc20_balance(tok)\r\n        amount: amt/2\r\n      credits:\r\n      - account: erc20.user(tok)(recipient1)\r\n        amount: amt/2\r\n      - account: erc20.user(tok)(recipient2)\r\n        amount: amt/2\r\n  elif recipient1 != 0x00:\r\n    journal:\r\n      debits:\r\n      - account: erc20_balance(tok)\r\n        amount: amt\r\n      credits:\r\n      - account: erc20.user(tok)(recipient1)\r\n        amount: amt\r\n  # else: no lost funds because no transfer is made\r\n\r\ndef withdraw(tok: ERC20, amt: uint256):\r\n  # implicit lock\r\n  journal:\r\n    debits:\r\n    - account: erc20.user(tok)(msg.sender)\r\n      amount: amt\r\n    credits:\r\n    - account: erc20_balance(tok)\r\n      amount: amt\r\n```\r\n\r\n## Unresolved design issues / design weaknesses\r\n- Without an SMT solver, verifying that the journal entry balances is very primitive (look for literally the same expressions on both sides). Even so, this check should cover most use cases.\r\n- Unclear whether intermediate accounts (e.g., `'balances_by_erc20'`) should actually be stored. This seems useful though if the contract has multiple account subgroups (because the smart contract developer can easily access the aggregated balance of each subgroup), e.g.\r\n```\r\n- Liabilities:\r\n  - User deposits:\r\n    ...\r\n  - Payables:\r\n    ...\r\n```\r\n- Unclear what is a good syntax which makes it easy to reify the representation of `@funds` with `map`. (Should arrays be supported?)\r\n- Unclear what is a good syntax which makes it easy to reify the representation of `@debit/@credit` decorators with their function arguments.\r\n- Unclear whether there should be any constraints on the type of `funds` (e.g. only `wei_value` allowed).\r\n- This is a big feature to implement, maintain, support and document.\r\n- Nonreentrancy in private functions might not percolate up to public functions.\r\n- Unclear what the scope of non-reentrant locks should be (easiest is just a global, or 'funds' lock).\r\n\r\n## Backwards Compatibility\r\nPossibly add a feature to nonreentrancy in private functions such that their reentrancy properties percolate up to all calling functions.\r\n\r\n## Dependencies\r\n#563\r\n#1204 \r\n\r\n## Copyright\r\nCopyright and related rights waived via [CC0](https://creativecommons.org/publicdomain/zero/1.0/)",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/1277/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/vyperlang/vyper/issues/1277/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/471583294",
    "html_url": "https://github.com/vyperlang/vyper/issues/1277#issuecomment-471583294",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/1277",
    "id": 471583294,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3MTU4MzI5NA==",
    "user": {
      "login": "jacqueswww",
      "id": 6917456,
      "node_id": "MDQ6VXNlcjY5MTc0NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6917456?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jacqueswww",
      "html_url": "https://github.com/jacqueswww",
      "followers_url": "https://api.github.com/users/jacqueswww/followers",
      "following_url": "https://api.github.com/users/jacqueswww/following{/other_user}",
      "gists_url": "https://api.github.com/users/jacqueswww/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jacqueswww/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jacqueswww/subscriptions",
      "organizations_url": "https://api.github.com/users/jacqueswww/orgs",
      "repos_url": "https://api.github.com/users/jacqueswww/repos",
      "events_url": "https://api.github.com/users/jacqueswww/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jacqueswww/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-03-11T15:19:15Z",
    "updated_at": "2019-03-11T15:19:15Z",
    "author_association": "CONTRIBUTOR",
    "body": "From Meeting: we will investigate this properly post RC1.",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/471583294/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/471583997",
    "html_url": "https://github.com/vyperlang/vyper/issues/1277#issuecomment-471583997",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/1277",
    "id": 471583997,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3MTU4Mzk5Nw==",
    "user": {
      "login": "charles-cooper",
      "id": 3867501,
      "node_id": "MDQ6VXNlcjM4Njc1MDE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3867501?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/charles-cooper",
      "html_url": "https://github.com/charles-cooper",
      "followers_url": "https://api.github.com/users/charles-cooper/followers",
      "following_url": "https://api.github.com/users/charles-cooper/following{/other_user}",
      "gists_url": "https://api.github.com/users/charles-cooper/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/charles-cooper/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/charles-cooper/subscriptions",
      "organizations_url": "https://api.github.com/users/charles-cooper/orgs",
      "repos_url": "https://api.github.com/users/charles-cooper/repos",
      "events_url": "https://api.github.com/users/charles-cooper/events{/privacy}",
      "received_events_url": "https://api.github.com/users/charles-cooper/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-03-11T15:20:56Z",
    "updated_at": "2019-03-11T15:20:56Z",
    "author_association": "COLLABORATOR",
    "body": "Also: investigate more concise syntax",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/471583997/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/471730967",
    "html_url": "https://github.com/vyperlang/vyper/issues/1277#issuecomment-471730967",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/1277",
    "id": 471730967,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3MTczMDk2Nw==",
    "user": {
      "login": "charles-cooper",
      "id": 3867501,
      "node_id": "MDQ6VXNlcjM4Njc1MDE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3867501?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/charles-cooper",
      "html_url": "https://github.com/charles-cooper",
      "followers_url": "https://api.github.com/users/charles-cooper/followers",
      "following_url": "https://api.github.com/users/charles-cooper/following{/other_user}",
      "gists_url": "https://api.github.com/users/charles-cooper/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/charles-cooper/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/charles-cooper/subscriptions",
      "organizations_url": "https://api.github.com/users/charles-cooper/orgs",
      "repos_url": "https://api.github.com/users/charles-cooper/repos",
      "events_url": "https://api.github.com/users/charles-cooper/events{/privacy}",
      "received_events_url": "https://api.github.com/users/charles-cooper/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-03-11T21:09:39Z",
    "updated_at": "2019-03-11T21:09:39Z",
    "author_association": "COLLABORATOR",
    "body": "A couple syntactic alternatives for the journal control structure:\r\nUse function call syntax for debits/credits\r\n```\r\njournal:\r\n  debit(...)\r\n  [more debits]\r\n  credit(...)\r\n  [more credits]\r\n```\r\nThrow out the journal keyword and use debits and credits sections\r\n```\r\ndebits:\r\n  debit(...)\r\ncredits:\r\n  credit(...)\r\n```\r\nThrow out the journal keyword and use indentation to mark the debits and credits section\r\n```\r\ndebit(...)\r\n[more debits]\r\n  credit(...)\r\n  [more credits]\r\n```\r\nSo far I like the first one best. Here is `split_payment_better` using this syntax, it's much more concise:\r\n```syntax\r\ndef split_payment_better(tok: ERC20, amt: uint256, recipient1: address, recipient2: address):\r\n  if recipient1 != 0x00 and recipient2 != 0x00:\r\n    journal:\r\n      debit(erc20_balance(tok), amt/2)\r\n      debit(erc20_balance(tok), amt/2)\r\n      credit(erc20.user(tok)(recipient1), amt/2)\r\n      credit(erc20.user(tok)(recipient2), amt/2)\r\n  elif recipient1 != 0x00:\r\n    journal:\r\n      debit(erc20_balance(tok), amt)\r\n      credit(erc20.user(tok)(recipient1), amt) \r\n```\r\n\r\nFinally, we could get rid of the control structure entirely and just have a sequence of debits and credits\r\n```\r\ndebit(...)\r\ndebit(...)\r\ncredit(...)\r\ncredit(...)\r\n```\r\nBut it would make error messages more opaque if a user accidentally orphans one of the statements.",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/471730967/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/476289291",
    "html_url": "https://github.com/vyperlang/vyper/issues/1277#issuecomment-476289291",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/1277",
    "id": 476289291,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3NjI4OTI5MQ==",
    "user": {
      "login": "charles-cooper",
      "id": 3867501,
      "node_id": "MDQ6VXNlcjM4Njc1MDE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3867501?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/charles-cooper",
      "html_url": "https://github.com/charles-cooper",
      "followers_url": "https://api.github.com/users/charles-cooper/followers",
      "following_url": "https://api.github.com/users/charles-cooper/following{/other_user}",
      "gists_url": "https://api.github.com/users/charles-cooper/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/charles-cooper/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/charles-cooper/subscriptions",
      "organizations_url": "https://api.github.com/users/charles-cooper/orgs",
      "repos_url": "https://api.github.com/users/charles-cooper/repos",
      "events_url": "https://api.github.com/users/charles-cooper/events{/privacy}",
      "received_events_url": "https://api.github.com/users/charles-cooper/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-03-25T17:00:42Z",
    "updated_at": "2019-03-25T22:06:29Z",
    "author_association": "COLLABORATOR",
    "body": "Suggestion from @jacqueswww since the debits and credits must correspond (at least until we do an SMT checker), we can coalesce each pair into a transfer function. That shortens our function to\r\n```python\r\ndef split_payment_better(tok: ERC20, amt: uint256, recipient1: address, recipient2: address):\r\n  if recipient1 != 0x00 and recipient2 != 0x00:\r\n    journal:\r\n      transfer(erc20_balance(tok), erc20.user(tok)(recipient1), amt/2)\r\n      transfer(erc20_balance(tok), erc20.user(tok)(recipient2), amt/2)\r\n  elif recipient1 != 0x00:\r\n    journal:\r\n      transfer(erc20_balance(tok), erc20.user(tok)(recipient1), amt) \r\n```\r\nOr without the `journal` keyword\r\n```python\r\ndef split_payment_better(tok: ERC20, amt: uint256, recipient1: address, recipient2: address):\r\n  if recipient1 != 0x00 and recipient2 != 0x00:\r\n    transfer(erc20_balance(tok), recipient1, amt/2)\r\n    transfer(erc20_balance(tok), recipient2, amt/2)\r\n  elif recipient1 != 0x00:\r\n    transfer(erc20_balance(tok), erc20.user(tok)(recipient1), amt) \r\n```\r\nI kind of like the special control structure for clarity but it seems it's not necessary.",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/476289291/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/548079870",
    "html_url": "https://github.com/vyperlang/vyper/issues/1277#issuecomment-548079870",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/1277",
    "id": 548079870,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU0ODA3OTg3MA==",
    "user": {
      "login": "charles-cooper",
      "id": 3867501,
      "node_id": "MDQ6VXNlcjM4Njc1MDE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3867501?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/charles-cooper",
      "html_url": "https://github.com/charles-cooper",
      "followers_url": "https://api.github.com/users/charles-cooper/followers",
      "following_url": "https://api.github.com/users/charles-cooper/following{/other_user}",
      "gists_url": "https://api.github.com/users/charles-cooper/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/charles-cooper/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/charles-cooper/subscriptions",
      "organizations_url": "https://api.github.com/users/charles-cooper/orgs",
      "repos_url": "https://api.github.com/users/charles-cooper/repos",
      "events_url": "https://api.github.com/users/charles-cooper/events{/privacy}",
      "received_events_url": "https://api.github.com/users/charles-cooper/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-10-30T19:40:52Z",
    "updated_at": "2019-10-30T19:40:52Z",
    "author_association": "COLLABORATOR",
    "body": "Cf. https://github.com/flintlang/flint/pull/383 for a related approach with linear types",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/548079870/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/625285531",
    "html_url": "https://github.com/vyperlang/vyper/issues/1277#issuecomment-625285531",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/1277",
    "id": 625285531,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYyNTI4NTUzMQ==",
    "user": {
      "login": "fubuloubu",
      "id": 3859395,
      "node_id": "MDQ6VXNlcjM4NTkzOTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3859395?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fubuloubu",
      "html_url": "https://github.com/fubuloubu",
      "followers_url": "https://api.github.com/users/fubuloubu/followers",
      "following_url": "https://api.github.com/users/fubuloubu/following{/other_user}",
      "gists_url": "https://api.github.com/users/fubuloubu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fubuloubu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fubuloubu/subscriptions",
      "organizations_url": "https://api.github.com/users/fubuloubu/orgs",
      "repos_url": "https://api.github.com/users/fubuloubu/repos",
      "events_url": "https://api.github.com/users/fubuloubu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fubuloubu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-05-07T14:21:35Z",
    "updated_at": "2020-05-07T14:21:35Z",
    "author_association": "MEMBER",
    "body": "Interesting implementation here vis a vis pooled values: https://diligence.consensys.net/blog/2020/05/an-experiment-in-designing-a-new-smart-contract-language/",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/625285531/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
