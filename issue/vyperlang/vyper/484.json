{
  "url": "https://api.github.com/repos/vyperlang/vyper/issues/484",
  "repository_url": "https://api.github.com/repos/vyperlang/vyper",
  "labels_url": "https://api.github.com/repos/vyperlang/vyper/issues/484/labels{/name}",
  "comments_url": "https://api.github.com/repos/vyperlang/vyper/issues/484/comments",
  "events_url": "https://api.github.com/repos/vyperlang/vyper/issues/484/events",
  "html_url": "https://github.com/vyperlang/vyper/issues/484",
  "id": 275211221,
  "node_id": "MDU6SXNzdWUyNzUyMTEyMjE=",
  "number": 484,
  "title": "VIP: Stack/Queue Support",
  "user": {
    "login": "fubuloubu",
    "id": 3859395,
    "node_id": "MDQ6VXNlcjM4NTkzOTU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/3859395?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/fubuloubu",
    "html_url": "https://github.com/fubuloubu",
    "followers_url": "https://api.github.com/users/fubuloubu/followers",
    "following_url": "https://api.github.com/users/fubuloubu/following{/other_user}",
    "gists_url": "https://api.github.com/users/fubuloubu/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/fubuloubu/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/fubuloubu/subscriptions",
    "organizations_url": "https://api.github.com/users/fubuloubu/orgs",
    "repos_url": "https://api.github.com/users/fubuloubu/repos",
    "events_url": "https://api.github.com/users/fubuloubu/events{/privacy}",
    "received_events_url": "https://api.github.com/users/fubuloubu/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 705423715,
      "node_id": "MDU6TGFiZWw3MDU0MjM3MTU=",
      "url": "https://api.github.com/repos/vyperlang/vyper/labels/Feature",
      "name": "Feature",
      "color": "0052cc",
      "default": false,
      "description": null
    },
    {
      "id": 757250644,
      "node_id": "MDU6TGFiZWw3NTcyNTA2NDQ=",
      "url": "https://api.github.com/repos/vyperlang/vyper/labels/VIP:%20Approved",
      "name": "VIP: Approved",
      "color": "98f765",
      "default": false,
      "description": "VIP Approved"
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 7,
  "created_at": "2017-11-20T01:07:38Z",
  "updated_at": "2020-01-06T16:33:51Z",
  "closed_at": null,
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "## Preamble\r\nVIP: 484\r\nTitle: Stack/Queue Support\r\nAuthor: @fubuloubu\r\nType: Standard Track\r\nStatus: Draft\r\nCreated: 2017-11-19\r\n\r\n## Simple Summary\r\nAllow stacks and queues, which are infinite size lists with constant gas interaction methods (Create, Retrieve, Append, and Pop methods)\r\n\r\n## Abstract\r\nOne of Viper's core concepts is to avoid unpredictable gas costs per transaction by limiting the usage of potentially exploitable data structures such as non-fixed lists. However, there are use cases for a variable-sized list that would have methods to interact with that data structure in order to prevent variable gas costs (e.g. `push()`, `pop()`, etc.) I know @vbuterin, @DavidKnott, and I discussed one potential implementation (basically using a mapping under the hood), but I couldn't find that in the issues and wanted to formally record it before tomorrow's call.\r\n\r\n## Motivation\r\nBy allowing these limited type of data structures, we will enable more potential use cases without violating this major precept of the language. This will help adoption and encourage thoughtful programming patterns.\r\n\r\n## Specification\r\nThe crowd-funding example [here](https://github.com/ethereum/viper/blob/master/examples/crowdfund.v.py) is a great use case for a queue-type data structure. When a user participates in the crowdfunding campaign, they are added via the following code:\r\n```python\r\ndef participate():\r\n    assert block.timestamp < self.deadline\r\n    nfi = self.nextFunderIndex\r\n    self.funders[nfi] = {address: msg.sender, value: msg.value}\r\n    self.nextFunderIndex = nfi + 1\r\n```\r\nThis could be reduced to the following:\r\n```python\r\ndef participate():\r\n    assert block.timestamp < self.deadline\r\n    self.funders.push({address: msg.sender, value: msg.value})\r\n```\r\nThis method would have constant and more optimal gas cost due to optimizations that can happen behind the scene for the `self.funders` datatype, instead of managing the funder index for the funder mapping.\r\n\r\nWhen the crowd-funding campaign does NOT succeed, typically there is a method to refund all participants. Because the `self.funders` list is variable-length, we want to avoid exceeding the gas limit by refunding a defined number of participants at a time. The code to do this in the example contract is:\r\n```python\r\ndef refund():\r\n    assert block.timestamp >= self.deadline and self.balance < self.goal\r\n    ind = self.refundIndex\r\n    for i in range(ind, ind + 30):\r\n        if i >= self.nextFunderIndex:\r\n            self.refundIndex = self.nextFunderIndex\r\n            return\r\n        send(self.funders[i].sender, self.funders[i].value)\r\n        self.funders[i] = None\r\n    self.refundIndex = ind + 30\r\n```\r\n\r\nWe can reduce this to:\r\n```python\r\ndef refund():\r\n    assert block.timestamp >= self.deadline and self.balance < self.goal\r\n    for funder in self.funders.popFirst(30):\r\n        send(funder.address, funder.value)\r\n    # To do this one at a time, we would do:\r\n    #funder = self.funders.pop()\r\n    #send(funder.address, funder.value)\r\n    \r\n    # Also perhaps at this point we could do\r\n    if self.funder.length == 0:\r\n        selfdestruct(self.owner) # Remove campaign contract\r\n```\r\nThe `popFirst()` method of the variable list would take the up to the first 30 items in the list, remove them from the list, and perform the given operation over the iteration. This works because the method removes the associated members from the list meaning those members would no longer be returned if the `popFirst()` method were to be called again. The user(s) of this method would need to\r\nmake sure that they called this method enough times to completely exhaust the list, and perhaps `popFirst()` would `throw` if the method is called when there are zero members of the returned list to prevent calling a method relying on the operation of this key method over and over again.\r\n\r\nAs a more complete example, imagine there was a method to undo your contribution to a crowd-funding campaign while it was still in process. That might look like:\r\n```python\r\ndef undo(index): # index could possible be a hash instead\r\n    assert block.timestamp < self.deadline\r\n    funder = self.funders.popAt(index)\r\n    assert msg.sender == funder.address\r\n    send(funder.address, funder.value)\r\n```\r\n\r\nIn this example, the `popAt()` needs the specific index that you are looking to use to remove the entry from the list. In order to find this entry, you might get the index from a receipt from when you were added to the list. This might be problematic if `num` is used for indexing these types of lists, so I propose a method more similar to NoSQL-style databases (e.g. [Firebase]()) where a hash is used for the index (and the members are kept as a singly-linked list) so that you directly reference entries instead of needing to keep a running count of the index as the queue is added to or popped from. This might look like:\r\n```\r\nvar_list = {length: num, list: [hash, item, nextHash] -> [hash, item, nextHash] -> ... [hash, item, 0]}\r\n```\r\n\r\nI'm not sure if this would be implemented as an update to the existing list type (usages of `range(0, N)` would instead use either `i in list` syntax if the length of the list is known/within gas limits, or be limited to popping chunks in order to operate over the entire list). This type would only be allowed as global, and would also need a length member to know the length of the list (`@public` globals would have `get_[list]_length()` and `get_[list]_item_at(index)` getter methods).\r\n\r\nI hope this fully describes the feature I am proposing, and have adequately shown that this feature is:\r\n1. Useful\r\n2. Clearer than current solutions\r\n3. Does not violate Viper precepts such as variable gas\r\n\r\n## Backwards Compatibility\r\nDepending on implementation, this may or may not affect the operation of the fixed-length list data structures we already have in place. It is still early, so we should consider this change now\r\n\r\n## Copyright\r\nCopyright and related rights waived via [CC0](https://creativecommons.org/publicdomain/zero/1.0/)\r\n",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/484/reactions",
    "total_count": 2,
    "+1": 2,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/vyperlang/vyper/issues/484/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/345567715",
    "html_url": "https://github.com/vyperlang/vyper/issues/484#issuecomment-345567715",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/484",
    "id": 345567715,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0NTU2NzcxNQ==",
    "user": {
      "login": "fubuloubu",
      "id": 3859395,
      "node_id": "MDQ6VXNlcjM4NTkzOTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3859395?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fubuloubu",
      "html_url": "https://github.com/fubuloubu",
      "followers_url": "https://api.github.com/users/fubuloubu/followers",
      "following_url": "https://api.github.com/users/fubuloubu/following{/other_user}",
      "gists_url": "https://api.github.com/users/fubuloubu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fubuloubu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fubuloubu/subscriptions",
      "organizations_url": "https://api.github.com/users/fubuloubu/orgs",
      "repos_url": "https://api.github.com/users/fubuloubu/repos",
      "events_url": "https://api.github.com/users/fubuloubu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fubuloubu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-11-20T01:18:55Z",
    "updated_at": "2017-11-20T01:18:55Z",
    "author_association": "MEMBER",
    "body": "Alternatively, more of a functional syntax for `pop()`/`popAt(idx)`:\r\n```python\r\nwith self.funders.pop() as funder:\r\n    send(funder.address, funder.value)\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/345567715/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/345568018",
    "html_url": "https://github.com/vyperlang/vyper/issues/484#issuecomment-345568018",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/484",
    "id": 345568018,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0NTU2ODAxOA==",
    "user": {
      "login": "fubuloubu",
      "id": 3859395,
      "node_id": "MDQ6VXNlcjM4NTkzOTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3859395?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fubuloubu",
      "html_url": "https://github.com/fubuloubu",
      "followers_url": "https://api.github.com/users/fubuloubu/followers",
      "following_url": "https://api.github.com/users/fubuloubu/following{/other_user}",
      "gists_url": "https://api.github.com/users/fubuloubu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fubuloubu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fubuloubu/subscriptions",
      "organizations_url": "https://api.github.com/users/fubuloubu/orgs",
      "repos_url": "https://api.github.com/users/fubuloubu/repos",
      "events_url": "https://api.github.com/users/fubuloubu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fubuloubu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-11-20T01:22:04Z",
    "updated_at": "2017-11-20T01:22:04Z",
    "author_association": "MEMBER",
    "body": "And if you wanted to get the information about your donation:\r\n```python\r\n@constant\r\ndef get_record(index):\r\n    return self.funder.retrieveAt(index)\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/345568018/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/345586605",
    "html_url": "https://github.com/vyperlang/vyper/issues/484#issuecomment-345586605",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/484",
    "id": 345586605,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0NTU4NjYwNQ==",
    "user": {
      "login": "fubuloubu",
      "id": 3859395,
      "node_id": "MDQ6VXNlcjM4NTkzOTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3859395?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fubuloubu",
      "html_url": "https://github.com/fubuloubu",
      "followers_url": "https://api.github.com/users/fubuloubu/followers",
      "following_url": "https://api.github.com/users/fubuloubu/following{/other_user}",
      "gists_url": "https://api.github.com/users/fubuloubu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fubuloubu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fubuloubu/subscriptions",
      "organizations_url": "https://api.github.com/users/fubuloubu/orgs",
      "repos_url": "https://api.github.com/users/fubuloubu/repos",
      "events_url": "https://api.github.com/users/fubuloubu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fubuloubu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-11-20T04:07:45Z",
    "updated_at": "2017-11-20T04:07:45Z",
    "author_association": "MEMBER",
    "body": "Made a mistake, would have to be a doubly linked list to support `popAt()` and `retrieveAt()`.\r\n\r\nI actually think we can do a trivial POC in Viper as is. I'll look into this tomorrow.",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/345586605/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/426036652",
    "html_url": "https://github.com/vyperlang/vyper/issues/484#issuecomment-426036652",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/484",
    "id": 426036652,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyNjAzNjY1Mg==",
    "user": {
      "login": "fubuloubu",
      "id": 3859395,
      "node_id": "MDQ6VXNlcjM4NTkzOTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3859395?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fubuloubu",
      "html_url": "https://github.com/fubuloubu",
      "followers_url": "https://api.github.com/users/fubuloubu/followers",
      "following_url": "https://api.github.com/users/fubuloubu/following{/other_user}",
      "gists_url": "https://api.github.com/users/fubuloubu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fubuloubu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fubuloubu/subscriptions",
      "organizations_url": "https://api.github.com/users/fubuloubu/orgs",
      "repos_url": "https://api.github.com/users/fubuloubu/repos",
      "events_url": "https://api.github.com/users/fubuloubu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fubuloubu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-01T19:41:10Z",
    "updated_at": "2018-10-01T20:01:45Z",
    "author_association": "MEMBER",
    "body": "@jacqueswww What do you think about revisiting this data type as a new feature?\r\n\r\n---\r\n\r\nStacks/Queues are a very useful datatype for Plasma frameworks, which seek to manage a potentially unlimited length list (of root hashes), but only need constant-time access via a restricted API. We could design such a datatype under the hood to maintain Vyper's restrictions on constant gas computatability, but add the ability to iterate over them via:\r\n```python\r\nrecipient: address\r\n\r\nContributor = struct({\r\n    acct: address,\r\n    amt: uint256\r\n})\r\ncontributors: List(Contributor)\r\n\r\n@public\r\ndef __init__():\r\n    self.recipient = msg.sender\r\n\r\n@public\r\n@payable\r\ndef contribute():\r\n    contributors.append({acct: msg.sender, amt: msg.value})\r\n    # NOTE: compiler error if appending mismatched datatype\r\n\r\n@public\r\ndef getRefund(idx: uint256):\r\n    c: Contributor = contributors[idx]  # Can access via an index, throws if not in [0, len)\r\n    assert c.acct == msg.sender\r\n    contributors.remove(idx)  # Can delete entry in list (protects against re-entrancy here)\r\n    # NOTE: This is probably the hardest function to provide...\r\n    msg.sender.send(c.amt)\r\n\r\n@public\r\ndef refundAll():\r\n    assert msg.sender == self.recipient\r\n    # Refund up to 30 funders\r\n    for idx in range(30):\r\n        if contributors.length == 0:  # could also be `len(contributors)`\r\n            break  # Stop iteration if stack is empty\r\n        c = contributors.pop(0)  # throws if length is 0, hence the check above\r\n        c.acct.send(c.amt)\r\n```\r\n\r\nThe last function could also have a special API for iteration like:\r\n```python\r\n@public\r\ndef refundAll():\r\n    assert msg.sender == self.recipient\r\n    # Refund up to 30 funders\r\n    for c in contributors.popFirst(30):  # Obtains <= 30 members of the array\r\n        c.acct.send(c.amt)\r\n    # NOTE: `for x in List.popFirst(N)` is a macro substitute for the above loop\r\n    #       `for x in List.popLast(N)` is the same macro using `List.pop()` instead\r\n```\r\n\r\nThis could serve as a basis for the API of such a type: https://docs.python.org/3/tutorial/datastructures.html",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/426036652/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/426044538",
    "html_url": "https://github.com/vyperlang/vyper/issues/484#issuecomment-426044538",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/484",
    "id": 426044538,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyNjA0NDUzOA==",
    "user": {
      "login": "fubuloubu",
      "id": 3859395,
      "node_id": "MDQ6VXNlcjM4NTkzOTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3859395?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fubuloubu",
      "html_url": "https://github.com/fubuloubu",
      "followers_url": "https://api.github.com/users/fubuloubu/followers",
      "following_url": "https://api.github.com/users/fubuloubu/following{/other_user}",
      "gists_url": "https://api.github.com/users/fubuloubu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fubuloubu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fubuloubu/subscriptions",
      "organizations_url": "https://api.github.com/users/fubuloubu/orgs",
      "repos_url": "https://api.github.com/users/fubuloubu/repos",
      "events_url": "https://api.github.com/users/fubuloubu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fubuloubu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-01T20:06:26Z",
    "updated_at": "2018-10-01T20:08:55Z",
    "author_association": "MEMBER",
    "body": "The `List.remove(idx)` functionality would be really hard..., but a pure stack/queue could definitely be supported as a minimal PoC. If we disallowed removals, you could still access in constant time (by using a mapping behind the scenes).\r\n\r\nAdding removals would make that very difficult to contain without a lot of overhead.\r\n\r\n---\r\n\r\nPerhaps NOT calling it a list, and using `.push(item)` and `.pop() -> item` API would make it clearer that it doesn't support Python's List APIs",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/426044538/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/454525960",
    "html_url": "https://github.com/vyperlang/vyper/issues/484#issuecomment-454525960",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/484",
    "id": 454525960,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1NDUyNTk2MA==",
    "user": {
      "login": "charles-cooper",
      "id": 3867501,
      "node_id": "MDQ6VXNlcjM4Njc1MDE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3867501?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/charles-cooper",
      "html_url": "https://github.com/charles-cooper",
      "followers_url": "https://api.github.com/users/charles-cooper/followers",
      "following_url": "https://api.github.com/users/charles-cooper/following{/other_user}",
      "gists_url": "https://api.github.com/users/charles-cooper/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/charles-cooper/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/charles-cooper/subscriptions",
      "organizations_url": "https://api.github.com/users/charles-cooper/orgs",
      "repos_url": "https://api.github.com/users/charles-cooper/repos",
      "events_url": "https://api.github.com/users/charles-cooper/events{/privacy}",
      "received_events_url": "https://api.github.com/users/charles-cooper/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-15T19:47:07Z",
    "updated_at": "2019-01-15T20:00:42Z",
    "author_association": "COLLABORATOR",
    "body": "I really like this idea of somehow supporting iterators/generators at the language level.\r\n\r\nBTW, `remove(idx)` is doable in constant time/gas with a doubly-linked list.\r\n```python\r\nstruct Node : \r\n  val: int128\r\n  next: uint256\r\n  prev: uint256\r\nnodes: map(uint256, Node)\r\nhead: uint256\r\ntail: uint256\r\ndef remove(ix: uint256) : \r\n  assert head <= ix\r\n  assert ix <= tail\r\n  node = nodes[ix]\r\n  prev = node.prev\r\n  next = node.next\r\n  next.prev = prev\r\n  prev.next = next\r\n  del nodes[ix]\r\n  # handle edge cases for head/tail/empty list/singleton list\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/454525960/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/454528341",
    "html_url": "https://github.com/vyperlang/vyper/issues/484#issuecomment-454528341",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/484",
    "id": 454528341,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1NDUyODM0MQ==",
    "user": {
      "login": "fubuloubu",
      "id": 3859395,
      "node_id": "MDQ6VXNlcjM4NTkzOTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3859395?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fubuloubu",
      "html_url": "https://github.com/fubuloubu",
      "followers_url": "https://api.github.com/users/fubuloubu/followers",
      "following_url": "https://api.github.com/users/fubuloubu/following{/other_user}",
      "gists_url": "https://api.github.com/users/fubuloubu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fubuloubu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fubuloubu/subscriptions",
      "organizations_url": "https://api.github.com/users/fubuloubu/orgs",
      "repos_url": "https://api.github.com/users/fubuloubu/repos",
      "events_url": "https://api.github.com/users/fubuloubu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fubuloubu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-15T19:54:10Z",
    "updated_at": "2019-01-15T19:54:10Z",
    "author_association": "MEMBER",
    "body": "Nice! Yeah, that seems obvious it is \"O(1)\" in retrospect haha.\r\n\r\nYeah, I would think this would probably be very valuable if `Node.val` was another struct like a `Block`, `Exit` or `Deposit` (as in Plasma)",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/454528341/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
