{
  "url": "https://api.github.com/repos/vyperlang/vyper/issues/2386",
  "repository_url": "https://api.github.com/repos/vyperlang/vyper",
  "labels_url": "https://api.github.com/repos/vyperlang/vyper/issues/2386/labels{/name}",
  "comments_url": "https://api.github.com/repos/vyperlang/vyper/issues/2386/comments",
  "events_url": "https://api.github.com/repos/vyperlang/vyper/issues/2386/events",
  "html_url": "https://github.com/vyperlang/vyper/issues/2386",
  "id": 944749898,
  "node_id": "MDU6SXNzdWU5NDQ3NDk4OTg=",
  "number": 2386,
  "title": "VIP: Jump table optimization",
  "user": {
    "login": "charles-cooper",
    "id": 3867501,
    "node_id": "MDQ6VXNlcjM4Njc1MDE=",
    "avatar_url": "https://avatars.githubusercontent.com/u/3867501?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/charles-cooper",
    "html_url": "https://github.com/charles-cooper",
    "followers_url": "https://api.github.com/users/charles-cooper/followers",
    "following_url": "https://api.github.com/users/charles-cooper/following{/other_user}",
    "gists_url": "https://api.github.com/users/charles-cooper/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/charles-cooper/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/charles-cooper/subscriptions",
    "organizations_url": "https://api.github.com/users/charles-cooper/orgs",
    "repos_url": "https://api.github.com/users/charles-cooper/repos",
    "events_url": "https://api.github.com/users/charles-cooper/events{/privacy}",
    "received_events_url": "https://api.github.com/users/charles-cooper/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 1723982050,
      "node_id": "MDU6TGFiZWwxNzIzOTgyMDUw",
      "url": "https://api.github.com/repos/vyperlang/vyper/labels/VIP:%20Deferred",
      "name": "VIP: Deferred",
      "color": "c5def5",
      "default": false,
      "description": "VIP is not scheduled to move forward at this time"
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 14,
  "created_at": "2021-07-14T19:57:36Z",
  "updated_at": "2022-02-10T00:22:16Z",
  "closed_at": null,
  "author_association": "COLLABORATOR",
  "active_lock_reason": null,
  "body": "## Simple Summary\r\nReduce code size and gas usage for jump tables. Introduce a JUMPTABLE macro in LLL which can be optimized for any backend. This is a non-user facing optimization.\r\n\r\n## Motivation\r\nVyper currently uses a jump table at the contract entry point to determine which function to call into. The format of the jump table looks something like\r\n```lisp\r\n(if caller_supplied_method_id == method_identifier(A())\r\n  (... A() body...)\r\n)\r\n(if caller_supplied_method_id == method_identifier(B())\r\n  (... B() body...)\r\n)\r\n; and so on\r\n```\r\nIn assembly this translates to\r\n```assembly\r\n# \"jump table fragment\"\r\n# pretend caller_supplied_method_id is already on the stack\r\nPUSH4 0x12345678 # method_identifier(A())\r\nEQ # == x\r\nISZERO # not\r\nPUSH2 __next__\r\nJUMPI # skip\r\n# ... A() body...\r\n__next__ JUMPDEST\r\n# repeat for B and so on\r\n```\r\n\r\nThere are a couple issues with this. First of all the search is linear. If a contract has 80 methods and the most commonly called method happens to be the last method compiled into the contract code, that \"jump table fragment\" needs to be executed 80 times. On average, it would need to be executed 40 times, for an average overhead of 23 gas per fragment, which would translate into 920 gas overhead *just to find the correct entry point* for a function.\r\n\r\nSecond of all, there is some code size overhead. The assembly costs 12 bytes per signature, and while it looks fairly efficient, I'll show below that the code size can be reduced to overhead of 3 bytes per signature - only the jumptable locations need to be stored in the code.\r\n\r\n## Specification\r\n\r\nOur basic goal is to minimize the lookup cost and space for determining the entry point of a function.\r\n\r\nOn x86, jump tables are a common optimization strategy for switch/case statements. When the variable being \"switched\" has relatively dense values, the jumptable will have a layout like the following:\r\n```c\r\nswitch(x) {\r\n  case '1': ...; break;\r\n  case '2': ...; break;\r\n  case '4': ...; break;\r\n  ...\r\n}\r\n```\r\nThe code would first jump into a lookup table of jump destinations, and then jumps from there into the correct code, something like\r\n```c\r\n__jumptable = {\r\n  0x1234, // case 1\r\n  0x5678, // case 2\r\n  0x0000, // fail/invalid\r\n  0xabcd, // case 4\r\n}\r\ngoto __jumptable[x - '1'] // glossing over the detail of handling the \"fail/invalid\" case\r\n```\r\n\r\nThis gives us a constant lookup time for the code location of any given method. The problem with using this approach directly for our use case is that a) code size is at a high premium on the EVM so\r\nwe would like to avoid as much wasted space as possible, b) we can't use the dense lookup table representation anyways because our method identifiers are 4 bytes; we would need contracts that are 2**32 bytes long mostly filled with zeros to implement a jump table.\r\n\r\nIf we use a so-called \"perfect\" hash function, we can have our cake and eat it. We need to construct a hash function which is dense and has unique location in the lookup table for every input. The simplest hash function we could use would be `mulmod(method_id, MAGIC_NUMBER, num_methods)`, where `MAGIC_NUMBER` is computed at compile time (yes, this could be very expensive unless we find a good algorithm). Then, our entry point computation would look like this:\r\n\r\n```python\r\n# Copy jump table into memory\r\ncodecopy(0, __jumptable, 2 * NUM_METHODS)\r\n\r\n# Grab the method id from calldata\r\nmethod_id = shr(calldataload(0), 28)\r\n\r\n# Index into our jumptable\r\nidx = mulmod(method_id, MAGIC_NUMBER, NUM_METHODS)\r\n\r\n# Get the 2-byte jumpdest\r\n_dst = mload(idx) & 0xFFFF\r\njump(_dst)\r\n\r\n__jumptable\r\n0x1234\r\n0x5678\r\n0xabcd\r\n\r\n... # rest of contract\r\n```\r\n\r\nThis reduces the per-method overhead to 3 bytes (2 bytes for each entry in the jump table and 1 byte to mark the entry points as valid with `JUMPDEST`s) / 0.1875 gas (`CODECOPY` requires 3 gas per word, and we can load 16 jump locations per word), while introducing global overhead of roughly 24 bytes / 40 gas.\r\n\r\n## Drawbacks\r\n\r\n- It's difficult to detect invalid method identifiers since the identifiers are no longer stored in the code. The fallback function would have to be a special case. For the same reason, it wouldn't work well for common switch/case statements which have a `default` clause.\r\n\r\n- It's hard to disassemble code since identifiers are no longer in the code. All that's left of them is the MAGIC_NUMBER that is calculated at compile-time.\r\n\r\n- Code may take arbitrarily long time to compile unless we have a good algorithm for calculating MAGIC_NUMBER, however there is a lot of literature on perfect hash functions and we should be able to find an algorithm to calculate a perfect hash function in polynomial time (even if it is not quite as efficient as mulmod/magic number).\r\n\r\n## Alternatives\r\n\r\nIf the drawbacks are too great, we can look into alternative strategies which would still return most of the benefits (i.e. O(1) or O(log(n)) entry point calculation but maybe less space / gas efficient)\r\n\r\n- Cuckoo hash for the lookup table\r\n- Binary search for the lookup table\r\n\r\n## Helpful Links\r\nhttps://en.wikipedia.org/wiki/Branch_table#Jump_table_example_in_C\r\nhttps://en.wikipedia.org/wiki/Perfect_hash_function\r\nhttps://en.wikipedia.org/wiki/Cuckoo_hashing\r\n\r\n## Copyright\r\nCopyright and related rights waived via [CC0](https://creativecommons.org/publicdomain/zero/1.0/)\r\n",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/2386/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/vyperlang/vyper/issues/2386/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/880178979",
    "html_url": "https://github.com/vyperlang/vyper/issues/2386#issuecomment-880178979",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/2386",
    "id": 880178979,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg4MDE3ODk3OQ==",
    "user": {
      "login": "fubuloubu",
      "id": 3859395,
      "node_id": "MDQ6VXNlcjM4NTkzOTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3859395?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fubuloubu",
      "html_url": "https://github.com/fubuloubu",
      "followers_url": "https://api.github.com/users/fubuloubu/followers",
      "following_url": "https://api.github.com/users/fubuloubu/following{/other_user}",
      "gists_url": "https://api.github.com/users/fubuloubu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fubuloubu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fubuloubu/subscriptions",
      "organizations_url": "https://api.github.com/users/fubuloubu/orgs",
      "repos_url": "https://api.github.com/users/fubuloubu/repos",
      "events_url": "https://api.github.com/users/fubuloubu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fubuloubu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-07-14T20:15:08Z",
    "updated_at": "2021-07-14T20:15:08Z",
    "author_association": "MEMBER",
    "body": "> * It's difficult to detect invalid method identifiers since the identifiers are no longer stored in the code. The fallback function would have to be a special case. For the same reason, it wouldn't work well for common switch/case statements which have a `default` clause.\r\n\r\nDoes this matter? As long as it's a guarantee that any _other_ method ID triggers the fallback, I think this is okay\r\n\r\n> * It's hard to disassemble code since identifiers are no longer in the code. All that's left of them is the MAGIC_NUMBER that is calculated at compile-time.\r\n\r\nCan you backsolve to obtain the set of method IDs that work based on `MAGIC_NUMBER`?",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/880178979/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/880193385",
    "html_url": "https://github.com/vyperlang/vyper/issues/2386#issuecomment-880193385",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/2386",
    "id": 880193385,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg4MDE5MzM4NQ==",
    "user": {
      "login": "charles-cooper",
      "id": 3867501,
      "node_id": "MDQ6VXNlcjM4Njc1MDE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3867501?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/charles-cooper",
      "html_url": "https://github.com/charles-cooper",
      "followers_url": "https://api.github.com/users/charles-cooper/followers",
      "following_url": "https://api.github.com/users/charles-cooper/following{/other_user}",
      "gists_url": "https://api.github.com/users/charles-cooper/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/charles-cooper/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/charles-cooper/subscriptions",
      "organizations_url": "https://api.github.com/users/charles-cooper/orgs",
      "repos_url": "https://api.github.com/users/charles-cooper/repos",
      "events_url": "https://api.github.com/users/charles-cooper/events{/privacy}",
      "received_events_url": "https://api.github.com/users/charles-cooper/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-07-14T20:39:36Z",
    "updated_at": "2021-07-14T20:39:36Z",
    "author_association": "COLLABORATOR",
    "body": "> Does this matter? As long as it's a guarantee that any _other_ method ID triggers the fallback, I think this is okay\r\n\r\nWe wouldn't have a guarantee that other method IDs trigger the fallback. (Unless we found an amazing hash function that somehow magically sends our N method IDs to valid lookup table locations and every other possible method ID to the fallback location). Instead, if method IDs are invalid they would more likely just jump to some random method and the behavior is undefined.\r\n\r\nBut realistically speaking, if a caller wants to trigger the fallback they should send no message data. So we can handle that with a simple `if (iszero (calldatalength)) goto fallback` at the beginning of the contract. On the other hand if the method ID is just garbage, I don't really have a problem with \"not playing nice\" in that case.\r\n\r\n> Can you backsolve to obtain the set of method IDs that work based on `MAGIC_NUMBER`?\r\n\r\nNot really, I mean the problem is you would be reverse mapping our N method IDs to the entire space of possible method IDs. So there could be practically infinitely many sets of method IDs which work with `MAGIC_NUMBER`. It's like reversing a hash function: it's computationally difficult to find a single match, and even if you do, there are infinitely many strings which could map to a given output.",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/880193385/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/880201279",
    "html_url": "https://github.com/vyperlang/vyper/issues/2386#issuecomment-880201279",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/2386",
    "id": 880201279,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg4MDIwMTI3OQ==",
    "user": {
      "login": "fubuloubu",
      "id": 3859395,
      "node_id": "MDQ6VXNlcjM4NTkzOTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3859395?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fubuloubu",
      "html_url": "https://github.com/fubuloubu",
      "followers_url": "https://api.github.com/users/fubuloubu/followers",
      "following_url": "https://api.github.com/users/fubuloubu/following{/other_user}",
      "gists_url": "https://api.github.com/users/fubuloubu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fubuloubu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fubuloubu/subscriptions",
      "organizations_url": "https://api.github.com/users/fubuloubu/orgs",
      "repos_url": "https://api.github.com/users/fubuloubu/repos",
      "events_url": "https://api.github.com/users/fubuloubu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fubuloubu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-07-14T20:52:09Z",
    "updated_at": "2021-07-14T20:52:09Z",
    "author_association": "MEMBER",
    "body": "> On the other hand if the method ID is just garbage, I don't really have a problem with \"not playing nice\" in that case.\r\n\r\nIs there a way to exploit this behavior to start execution at a random section of code you prefer?\r\n\r\n> \r\n> Not really, I mean the problem is you would be reverse mapping our N method IDs to the entire space of possible method IDs. So there could be practically infinitely many sets of method IDs which work with `MAGIC_NUMBER`. It's like reversing a hash function: it's computationally difficult to find a single match, and even if you do, there are infinitely many strings which could map to a given output.\r\n\r\nThis is an interesting property, not sure how I feel about it.",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/880201279/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/880219438",
    "html_url": "https://github.com/vyperlang/vyper/issues/2386#issuecomment-880219438",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/2386",
    "id": 880219438,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg4MDIxOTQzOA==",
    "user": {
      "login": "charles-cooper",
      "id": 3867501,
      "node_id": "MDQ6VXNlcjM4Njc1MDE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3867501?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/charles-cooper",
      "html_url": "https://github.com/charles-cooper",
      "followers_url": "https://api.github.com/users/charles-cooper/followers",
      "following_url": "https://api.github.com/users/charles-cooper/following{/other_user}",
      "gists_url": "https://api.github.com/users/charles-cooper/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/charles-cooper/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/charles-cooper/subscriptions",
      "organizations_url": "https://api.github.com/users/charles-cooper/orgs",
      "repos_url": "https://api.github.com/users/charles-cooper/repos",
      "events_url": "https://api.github.com/users/charles-cooper/events{/privacy}",
      "received_events_url": "https://api.github.com/users/charles-cooper/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-07-14T21:22:40Z",
    "updated_at": "2021-07-14T21:22:40Z",
    "author_association": "COLLABORATOR",
    "body": "> Is there a way to exploit this behavior to start execution at a random section of code you prefer?\r\n\r\nI don't really see an exploit, but I could just be naive. Thing is, the only JUMPDESTs you could access would be the existing method starts since those are the only ones in the jumptable. So .. you couldn't trigger anything that you wouldn't have been able to trigger by passing a valid method ID to begin with.",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/880219438/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/880226769",
    "html_url": "https://github.com/vyperlang/vyper/issues/2386#issuecomment-880226769",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/2386",
    "id": 880226769,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg4MDIyNjc2OQ==",
    "user": {
      "login": "fubuloubu",
      "id": 3859395,
      "node_id": "MDQ6VXNlcjM4NTkzOTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3859395?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fubuloubu",
      "html_url": "https://github.com/fubuloubu",
      "followers_url": "https://api.github.com/users/fubuloubu/followers",
      "following_url": "https://api.github.com/users/fubuloubu/following{/other_user}",
      "gists_url": "https://api.github.com/users/fubuloubu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fubuloubu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fubuloubu/subscriptions",
      "organizations_url": "https://api.github.com/users/fubuloubu/orgs",
      "repos_url": "https://api.github.com/users/fubuloubu/repos",
      "events_url": "https://api.github.com/users/fubuloubu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fubuloubu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-07-14T21:36:41Z",
    "updated_at": "2021-07-14T21:36:41Z",
    "author_association": "MEMBER",
    "body": "but could you jumpdest to an internal method? or some other equally contrived but serious outcome?",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/880226769/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/880704669",
    "html_url": "https://github.com/vyperlang/vyper/issues/2386#issuecomment-880704669",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/2386",
    "id": 880704669,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg4MDcwNDY2OQ==",
    "user": {
      "login": "charles-cooper",
      "id": 3867501,
      "node_id": "MDQ6VXNlcjM4Njc1MDE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3867501?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/charles-cooper",
      "html_url": "https://github.com/charles-cooper",
      "followers_url": "https://api.github.com/users/charles-cooper/followers",
      "following_url": "https://api.github.com/users/charles-cooper/following{/other_user}",
      "gists_url": "https://api.github.com/users/charles-cooper/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/charles-cooper/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/charles-cooper/subscriptions",
      "organizations_url": "https://api.github.com/users/charles-cooper/orgs",
      "repos_url": "https://api.github.com/users/charles-cooper/repos",
      "events_url": "https://api.github.com/users/charles-cooper/events{/privacy}",
      "received_events_url": "https://api.github.com/users/charles-cooper/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-07-15T13:41:50Z",
    "updated_at": "2021-07-15T13:41:50Z",
    "author_association": "COLLABORATOR",
    "body": "> but could you jumpdest to an internal method? or some other equally contrived but serious outcome?\r\n\r\nYou could only jump to locations which are hardcoded in the jump table so I'm not too concerned about this",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/880704669/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/883027018",
    "html_url": "https://github.com/vyperlang/vyper/issues/2386#issuecomment-883027018",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/2386",
    "id": 883027018,
    "node_id": "IC_kwDOBGDvrM40oexK",
    "user": {
      "login": "charles-cooper",
      "id": 3867501,
      "node_id": "MDQ6VXNlcjM4Njc1MDE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3867501?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/charles-cooper",
      "html_url": "https://github.com/charles-cooper",
      "followers_url": "https://api.github.com/users/charles-cooper/followers",
      "following_url": "https://api.github.com/users/charles-cooper/following{/other_user}",
      "gists_url": "https://api.github.com/users/charles-cooper/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/charles-cooper/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/charles-cooper/subscriptions",
      "organizations_url": "https://api.github.com/users/charles-cooper/orgs",
      "repos_url": "https://api.github.com/users/charles-cooper/repos",
      "events_url": "https://api.github.com/users/charles-cooper/events{/privacy}",
      "received_events_url": "https://api.github.com/users/charles-cooper/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-07-20T03:41:11Z",
    "updated_at": "2021-07-20T03:41:11Z",
    "author_association": "COLLABORATOR",
    "body": "Notes from meeting: We can't erase the inputs from the code because sometimes folks will provide non-null calldata to the fallback function",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/883027018/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/965879001",
    "html_url": "https://github.com/vyperlang/vyper/issues/2386#issuecomment-965879001",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/2386",
    "id": 965879001,
    "node_id": "IC_kwDOBGDvrM45kiTZ",
    "user": {
      "login": "charles-cooper",
      "id": 3867501,
      "node_id": "MDQ6VXNlcjM4Njc1MDE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3867501?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/charles-cooper",
      "html_url": "https://github.com/charles-cooper",
      "followers_url": "https://api.github.com/users/charles-cooper/followers",
      "following_url": "https://api.github.com/users/charles-cooper/following{/other_user}",
      "gists_url": "https://api.github.com/users/charles-cooper/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/charles-cooper/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/charles-cooper/subscriptions",
      "organizations_url": "https://api.github.com/users/charles-cooper/orgs",
      "repos_url": "https://api.github.com/users/charles-cooper/repos",
      "events_url": "https://api.github.com/users/charles-cooper/events{/privacy}",
      "received_events_url": "https://api.github.com/users/charles-cooper/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-11-11T00:16:59Z",
    "updated_at": "2022-01-17T03:05:16Z",
    "author_association": "COLLABORATOR",
    "body": "So we can implement this using a hash table with probing. Instead of the jumptable only being `jumpdest1 jumpdest2 ...`, we include the inputs in the jumptable\r\n```\r\nval1 jumpdest1 val2 jumpdest2\r\n```\r\nFor a total of 6 bytes overhead per case.\r\n\r\nTo handle collisions, we check if `input == val1`. The entries in the jumptable which collide form a linked list of sorts. To reach the next element of the list, we rehash the input. Since a jumpdest must be smaller than 24576 (that is, it fits in 15 bits), we can use the top bit to encode whether we have reached the end of the linked list.\r\n\r\nThe pseudocode (C-esque; I will rewrite this in LLL at some point) to resolve the jumptable then is\r\n```c\r\nSCRATCH_SPACE = 128; // FREE_VAR_SPACE\r\nJUMPTABLE_ENTRY_SIZE = 6; // number of bytes a single entry takes\r\njumptable_offset = <some offset in the data section>;\r\nmethod_id = calldataload(0) >> 224;\r\njumptable_entry = 0; // seed value for hash\r\nwhile (true) {\r\n    jumptable_entry = HASH(method_id, jumptable_entry) * JUMPTABLE_ENTRY_SIZE + jumptable_offset;\r\n    codecopy(jumptable_ofst, SCRATCH_SPACE, 6);\r\n    val = mload(SCRATCH_SPACE) >> 16;\r\n    if (val == method_id) {\r\n        jumpdest = mload(SCRATCH_SPACE) & 0x7FFF/*1<<15 - 1*/;\r\n        goto jumpdest; // we are done, we found the right jumpdest\r\n    }\r\n    has_more_entries = mload(SCRATCH_SPACE) >> 15 & 1;\r\n    if (!has_more_entries) {\r\n        goto fallback; // we are done, unrecognized method_id\r\n    }\r\n}\r\n```\r\nA good HASH function could be `hash(val, seed) = mulmod(val * (seed + 1), <a good prime>)`. Note that finding `<a good prime>` is a lot easier than the magic prime originally proposed. It could be any prime larger than all the inputs, which should be trivial for 4-byte method ids.",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/965879001/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/1033117651",
    "html_url": "https://github.com/vyperlang/vyper/issues/2386#issuecomment-1033117651",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/2386",
    "id": 1033117651,
    "node_id": "IC_kwDOBGDvrM49lB_T",
    "user": {
      "login": "k06a",
      "id": 702124,
      "node_id": "MDQ6VXNlcjcwMjEyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/702124?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/k06a",
      "html_url": "https://github.com/k06a",
      "followers_url": "https://api.github.com/users/k06a/followers",
      "following_url": "https://api.github.com/users/k06a/following{/other_user}",
      "gists_url": "https://api.github.com/users/k06a/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/k06a/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/k06a/subscriptions",
      "organizations_url": "https://api.github.com/users/k06a/orgs",
      "repos_url": "https://api.github.com/users/k06a/repos",
      "events_url": "https://api.github.com/users/k06a/events{/privacy}",
      "received_events_url": "https://api.github.com/users/k06a/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-02-08T22:15:44Z",
    "updated_at": "2022-02-08T23:07:42Z",
    "author_association": "NONE",
    "body": "If we would assume hash function result random is good enough than it seems brute-forcing complexity will be: `n^n/n!` because there are `n^n` hash function results for `n` inputs and `n!` non-colliding results (basically number all permutations).\r\n\r\nYou will need to brute-force:\r\n- 26 combinations for 5 methods\r\n- 3.6m combinations for 10 methods\r\n- 2.4bb combinations for 20 methods\r\n\r\nSplitting on 2-3 functions to process sequentially could help: compute h1(selector) to get 0..3 and then use h2(selector) to get 0..4, this could be assembled back in different 20 numbers by brute-forcing only 50 (= 24 + 26) combinations: h1(selector)*5 + h2(selector).\r\n\r\nSo we can split a number of selectors by factorizing it. Having a prime number of selectors is not good for us. Not sure what we can do except add extra empty slots with jumps to something like `revert(\"selector not found\")`. But from the other side prime numbers better work for modulus.\r\n\r\n⚠️ **Following calculations are not fully correct, because this two-functions search is not independent events, but dependent. Results of these two hash functions should never clusterise any pair of selectors into the groups in both hashes, this would make them indistinguishable. Need to find a way to recompute probabilities for this case.**\r\n\r\nWe could try to extend the number of selectors up to some percentage (like up to 5%) to find the best factorization numbers. By best factorization numbers I would define having 2 numbers close to `sqrt(n)`, this would minimize a total number of combinations brute-forced. For example, you have 23 selectors, we can increase it by 1 and split 24 on two different factors `2*12` and `4*6`:\r\n```\r\nbrute(2) + brute(12) > brute(4) + brute(6)\r\n2 + 479m > 24 + 720\r\n```\r\n\r\nHaving 2 extra selectors would make 25=5*5, which can be computed with 120+120 combinations only, much lower even than 24+720.",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/1033117651/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/1033166697",
    "html_url": "https://github.com/vyperlang/vyper/issues/2386#issuecomment-1033166697",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/2386",
    "id": 1033166697,
    "node_id": "IC_kwDOBGDvrM49lN9p",
    "user": {
      "login": "k06a",
      "id": 702124,
      "node_id": "MDQ6VXNlcjcwMjEyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/702124?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/k06a",
      "html_url": "https://github.com/k06a",
      "followers_url": "https://api.github.com/users/k06a/followers",
      "following_url": "https://api.github.com/users/k06a/following{/other_user}",
      "gists_url": "https://api.github.com/users/k06a/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/k06a/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/k06a/subscriptions",
      "organizations_url": "https://api.github.com/users/k06a/orgs",
      "repos_url": "https://api.github.com/users/k06a/repos",
      "events_url": "https://api.github.com/users/k06a/events{/privacy}",
      "received_events_url": "https://api.github.com/users/k06a/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-02-08T23:30:39Z",
    "updated_at": "2022-02-08T23:30:39Z",
    "author_association": "NONE",
    "body": "Looks like the function `mulmod(selector, magic, length)` will never work properly for selectors `a`, `b` which have the same remainder `a%len` and `b%len`. Under modulus these selectors became indistinguishable. Maybe we could try to use `keccak256` for this purpose, it will work for any lengths:\r\n```solidity\r\nkeccak256(abi.encodePacked(selector + (magic << 32))) % length\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/1033166697/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/1033173974",
    "html_url": "https://github.com/vyperlang/vyper/issues/2386#issuecomment-1033173974",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/2386",
    "id": 1033173974,
    "node_id": "IC_kwDOBGDvrM49lPvW",
    "user": {
      "login": "k06a",
      "id": 702124,
      "node_id": "MDQ6VXNlcjcwMjEyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/702124?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/k06a",
      "html_url": "https://github.com/k06a",
      "followers_url": "https://api.github.com/users/k06a/followers",
      "following_url": "https://api.github.com/users/k06a/following{/other_user}",
      "gists_url": "https://api.github.com/users/k06a/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/k06a/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/k06a/subscriptions",
      "organizations_url": "https://api.github.com/users/k06a/orgs",
      "repos_url": "https://api.github.com/users/k06a/repos",
      "events_url": "https://api.github.com/users/k06a/events{/privacy}",
      "received_events_url": "https://api.github.com/users/k06a/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-02-08T23:43:56Z",
    "updated_at": "2022-02-08T23:44:44Z",
    "author_association": "NONE",
    "body": "Works like a charm, spent 4486 combinations for 10 selectors: https://gist.github.com/k06a/737fd1f389bb6f2e66f0ef76ea73729b",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/1033173974/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 1
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/1033262786",
    "html_url": "https://github.com/vyperlang/vyper/issues/2386#issuecomment-1033262786",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/2386",
    "id": 1033262786,
    "node_id": "IC_kwDOBGDvrM49llbC",
    "user": {
      "login": "fubuloubu",
      "id": 3859395,
      "node_id": "MDQ6VXNlcjM4NTkzOTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3859395?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fubuloubu",
      "html_url": "https://github.com/fubuloubu",
      "followers_url": "https://api.github.com/users/fubuloubu/followers",
      "following_url": "https://api.github.com/users/fubuloubu/following{/other_user}",
      "gists_url": "https://api.github.com/users/fubuloubu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fubuloubu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fubuloubu/subscriptions",
      "organizations_url": "https://api.github.com/users/fubuloubu/orgs",
      "repos_url": "https://api.github.com/users/fubuloubu/repos",
      "events_url": "https://api.github.com/users/fubuloubu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fubuloubu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-02-09T02:09:45Z",
    "updated_at": "2022-02-09T02:09:45Z",
    "author_association": "MEMBER",
    "body": "> ```solidity\r\n> keccak256(abi.encodePacked(selector + (magic << 32))) % length\r\n> ```\r\n\r\nWhat's the estimated gas usage for this vs. current O(n) dispatch methods? (say for ~80 method IDs e.g. Yearn Vaults v2)",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/1033262786/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/1033451284",
    "html_url": "https://github.com/vyperlang/vyper/issues/2386#issuecomment-1033451284",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/2386",
    "id": 1033451284,
    "node_id": "IC_kwDOBGDvrM49mTcU",
    "user": {
      "login": "k06a",
      "id": 702124,
      "node_id": "MDQ6VXNlcjcwMjEyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/702124?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/k06a",
      "html_url": "https://github.com/k06a",
      "followers_url": "https://api.github.com/users/k06a/followers",
      "following_url": "https://api.github.com/users/k06a/following{/other_user}",
      "gists_url": "https://api.github.com/users/k06a/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/k06a/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/k06a/subscriptions",
      "organizations_url": "https://api.github.com/users/k06a/orgs",
      "repos_url": "https://api.github.com/users/k06a/repos",
      "events_url": "https://api.github.com/users/k06a/events{/privacy}",
      "received_events_url": "https://api.github.com/users/k06a/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-02-09T07:52:14Z",
    "updated_at": "2022-02-09T07:52:47Z",
    "author_association": "NONE",
    "body": "@fubuloubu we can find 1 magic number to split 80 selectors on 9 groups, then find 9 magic number to split each group. Gas cost will be 36+36 for two sequential hashing, I would assume in practice with all the necessary checks it will cost around 100 gas for every method.",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/1033451284/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/1034348177",
    "html_url": "https://github.com/vyperlang/vyper/issues/2386#issuecomment-1034348177",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/2386",
    "id": 1034348177,
    "node_id": "IC_kwDOBGDvrM49puaR",
    "user": {
      "login": "k06a",
      "id": 702124,
      "node_id": "MDQ6VXNlcjcwMjEyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/702124?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/k06a",
      "html_url": "https://github.com/k06a",
      "followers_url": "https://api.github.com/users/k06a/followers",
      "following_url": "https://api.github.com/users/k06a/following{/other_user}",
      "gists_url": "https://api.github.com/users/k06a/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/k06a/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/k06a/subscriptions",
      "organizations_url": "https://api.github.com/users/k06a/orgs",
      "repos_url": "https://api.github.com/users/k06a/repos",
      "events_url": "https://api.github.com/users/k06a/events{/privacy}",
      "received_events_url": "https://api.github.com/users/k06a/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-02-10T00:22:16Z",
    "updated_at": "2022-02-10T00:22:16Z",
    "author_association": "NONE",
    "body": "Using mulmod directly is not possible, if `selectorA % selectors.length == selectorB % selectors.length` then using mulmod will give a collision.",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/1034348177/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
