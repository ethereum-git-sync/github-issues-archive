{
  "url": "https://api.github.com/repos/vyperlang/vyper/issues/901",
  "repository_url": "https://api.github.com/repos/vyperlang/vyper",
  "labels_url": "https://api.github.com/repos/vyperlang/vyper/issues/901/labels{/name}",
  "comments_url": "https://api.github.com/repos/vyperlang/vyper/issues/901/comments",
  "events_url": "https://api.github.com/repos/vyperlang/vyper/issues/901/events",
  "html_url": "https://github.com/vyperlang/vyper/issues/901",
  "id": 333010586,
  "node_id": "MDU6SXNzdWUzMzMwMTA1ODY=",
  "number": 901,
  "title": "VIP: Cost and usability Improvements to internal function calls",
  "user": {
    "login": "maurelian",
    "id": 23033765,
    "node_id": "MDQ6VXNlcjIzMDMzNzY1",
    "avatar_url": "https://avatars.githubusercontent.com/u/23033765?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/maurelian",
    "html_url": "https://github.com/maurelian",
    "followers_url": "https://api.github.com/users/maurelian/followers",
    "following_url": "https://api.github.com/users/maurelian/following{/other_user}",
    "gists_url": "https://api.github.com/users/maurelian/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/maurelian/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/maurelian/subscriptions",
    "organizations_url": "https://api.github.com/users/maurelian/orgs",
    "repos_url": "https://api.github.com/users/maurelian/repos",
    "events_url": "https://api.github.com/users/maurelian/events{/privacy}",
    "received_events_url": "https://api.github.com/users/maurelian/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 751622094,
      "node_id": "MDU6TGFiZWw3NTE2MjIwOTQ=",
      "url": "https://api.github.com/repos/vyperlang/vyper/labels/VIP:%20Discussion",
      "name": "VIP: Discussion",
      "color": "000000",
      "default": false,
      "description": "Used to denote VIPs and more complex issues that are waiting discussion in a meeting"
    },
    {
      "id": 757250644,
      "node_id": "MDU6TGFiZWw3NTcyNTA2NDQ=",
      "url": "https://api.github.com/repos/vyperlang/vyper/labels/VIP:%20Approved",
      "name": "VIP: Approved",
      "color": "98f765",
      "default": false,
      "description": "VIP Approved"
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 52,
  "created_at": "2018-06-16T19:45:22Z",
  "updated_at": "2018-09-27T12:23:46Z",
  "closed_at": "2018-09-27T12:23:46Z",
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "## Preamble\r\n\r\n    VIP: <to be assigned>\r\n    Title: reduce the cost and difficulty of code reuse in common situations\r\n    Author: maurelian\r\n    Status: Draft\r\n    Created: 2018-06-16\r\n    Requires (*optional): <VIP number(s)>\r\n    Replaces (*optional): <VIP number(s)>\r\n\r\n## Simple Summary\r\n\r\n1. I shouldn't need to copy and paste the same code snippets into 5 functions to valid authorization. \r\n2. I shouldn't feel like copying and pasting code is more efficient or cheaper. \r\n\r\n## Abstract\r\n\r\nIn order to call a within the same contract function, Vyper uses the `CALL` opcode, which send a new message to call functions within the same contract. This has some nice safety benefits. \r\n\r\nUnfortunately it will result in developers using anti-patterns to save on gas, or access `msg.sender` in a function call.\r\n\r\n## Motivation\r\n\r\nThe benefit of using `CALL` to access code in the same contract is to create a new execution context, with no risk of side effects from memory access. I admit that I find this to be quite an elegant use of the EVM for safety.\r\n\r\n### Problems with using `CALL`\r\n\r\nUnfortunately, there are two major issues with the use of the `CALL` opcode for calling functions within the contract:\r\n\r\n#### 1. Environment values change unexpectedly\r\n\r\nAt least two important environment opcodes will return different values: `CALLER` (ie. `msg.sender`) and `CALLVALUE` (ie. `msg.value`). This complicates the use of functions for permission checking. The following is a naive vyper translation of the common \"ownable\" pattern for a simple storage solidity contract. \r\n\r\n```python\r\nowner: address\r\nvalue: public(int128)\r\n\r\n@public\r\ndef __init__():\r\n    self.owner = msg.sender\r\n\r\n@private\r\ndef checkOwner():\r\n  assert msg.sender == self.owner # this will REVERT every time\r\n\r\n@public\r\ndef writeValue(_value: int128):\r\n    self.checkOwner()\r\n    self.value = _value\r\n```\r\n\r\n#### 2. Gas costs disincentivizes code reuse\r\n\r\nThe `CALL` opcode costs 700 gas (+ input data costs + function dispatching again). By contrast Solidity uses `JUMP` (2 gas) to call a function.\r\n\r\nThis imposes a large penalty on code reuse. Regardless Vyper's design philosophy favoring safety over gas efficiency, developers will respond to this incentive by simply copying and pasting boilerplate code. This is dangerous, and difficult to audit. \r\n\r\n\r\n\r\n## Specification: \r\n\r\nI'm sorry, I don't have one specification. Below are some options I see for mitigating these issues.\r\n\r\nFrom the *Motivation* section above, we have 3 parameters along which to analyze approaches to calling a function in the EVM. \r\n\r\n1. Gas cost \r\n2. Preservation of env variables\r\n3. Safety benefits\r\n\r\n### 1. Use `DELEGATECALL` instead of `CALL`\r\n\r\n1. Gas cost: NEUTRAL (same as using CALL)\r\n2. Env variables: GOOD (gives us back `CALLER` and `CALLVALUE`)\r\n3. Memory Safety: GOOD. It does indeed reset memory. \r\n\r\nSeems like a decent solution!\r\n\r\n~3. Memory Safety: BAD (executes the code in the same memory context, nullifying reasons for using `CALL` in the first place)~ ~I proposed this earlier, but I don't think this is a good solution. ~\r\n\r\n\r\n\r\n\r\n\r\n### 2. Just use `JUMP` like Solidity\r\n\r\n1. Gas cost: GOOD (Much lower gas cost)\r\n2. Env variables: GOOD (Preserves `CALLER` and `CALLVALUE`)\r\n3. Memory Safety: BAD (Greater risk of compiler bugs)\r\n\r\nThis is worth considering. \r\nSee also #330.\r\n\r\n### 3. Implement a safer analog to Solidity's modifiers\r\n\r\nThese could have significant restrictions on them, like no access to `MSTORE` or `SSTORE`, and not accepting arguments. I assume this would be done by with `JUMP`, or just inlining the same code each time it's needed. \r\n\r\n1. Gas cost: GOOD (Lower execution cost, but might increase size of contract if inlining is used)\r\n2. Env variables: GOOD (Preserves `CALLER` and `CALLVALUE`)\r\n3. Memory Safety: Depends on implementation\r\n\r\n### 4. Create special variables which persist across message calls\r\n\r\nBuilt-in vars like `caller` and `callvalue` can be created, which are magically passed to a function in a message call. \r\n\r\nMy code above would thus be:\r\n\r\n```python\r\n@private\r\ndef checkOwner():\r\n  assert _sender == self.owner # <- replaced msg.sender with a magical global variable `sender`\r\n\r\n@public\r\ndef writeValue(_value: int128):\r\n    self.checkOwner)\r\n    self.value = _value\r\n```\r\n\r\nThis feels a bit funky to me. Probably would be hard to implement safely, and obscures the true functioning of the EVM.\r\n\r\n### 5. Status Quo\r\n\r\nMy problem in the code sample above can be addressed by passing the values I need as arguments: \r\n\r\n```python\r\n@private\r\ndef checkOwner(_sender: address):\r\n  assert _sender == self.owner # <- replaced msg.sender with _sender\r\n\r\n@public\r\ndef writeValue(_value: int128):\r\n    self.checkOwner(msg.sender) # <- pass msg.sender as an argument \r\n    self.value = _value\r\n```\r\nMaybe that's OK? But it requires a deeper understanding of how both the EVM and Vyper work. \r\n\r\n\r\n## Backwards Compatibility\r\n\r\nDependent on approach. \r\n\r\n## Copyright\r\n\r\nCopyright and related rights waived via [CC0](https://creativecommons.org/publicdomain/zero/1.0/)\r\n",
  "closed_by": {
    "login": "jacqueswww",
    "id": 6917456,
    "node_id": "MDQ6VXNlcjY5MTc0NTY=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6917456?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jacqueswww",
    "html_url": "https://github.com/jacqueswww",
    "followers_url": "https://api.github.com/users/jacqueswww/followers",
    "following_url": "https://api.github.com/users/jacqueswww/following{/other_user}",
    "gists_url": "https://api.github.com/users/jacqueswww/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jacqueswww/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jacqueswww/subscriptions",
    "organizations_url": "https://api.github.com/users/jacqueswww/orgs",
    "repos_url": "https://api.github.com/users/jacqueswww/repos",
    "events_url": "https://api.github.com/users/jacqueswww/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jacqueswww/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/901/reactions",
    "total_count": 2,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 2,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/vyperlang/vyper/issues/901/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/397840142",
    "html_url": "https://github.com/vyperlang/vyper/issues/901#issuecomment-397840142",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/901",
    "id": 397840142,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5Nzg0MDE0Mg==",
    "user": {
      "login": "haydenadams",
      "id": 9343483,
      "node_id": "MDQ6VXNlcjkzNDM0ODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9343483?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/haydenadams",
      "html_url": "https://github.com/haydenadams",
      "followers_url": "https://api.github.com/users/haydenadams/followers",
      "following_url": "https://api.github.com/users/haydenadams/following{/other_user}",
      "gists_url": "https://api.github.com/users/haydenadams/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/haydenadams/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/haydenadams/subscriptions",
      "organizations_url": "https://api.github.com/users/haydenadams/orgs",
      "repos_url": "https://api.github.com/users/haydenadams/repos",
      "events_url": "https://api.github.com/users/haydenadams/events{/privacy}",
      "received_events_url": "https://api.github.com/users/haydenadams/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-06-16T21:36:51Z",
    "updated_at": "2018-06-16T21:36:51Z",
    "author_association": "NONE",
    "body": "I do find myself avoiding internal calls in favor of reusing the same code in multiple places to save gas, which is probably not ideal. I don't personally know the tradeoffs well but If this can be done safely I'm all for it.",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/397840142/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/397857541",
    "html_url": "https://github.com/vyperlang/vyper/issues/901#issuecomment-397857541",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/901",
    "id": 397857541,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5Nzg1NzU0MQ==",
    "user": {
      "login": "ben-kaufman",
      "id": 10667901,
      "node_id": "MDQ6VXNlcjEwNjY3OTAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/10667901?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ben-kaufman",
      "html_url": "https://github.com/ben-kaufman",
      "followers_url": "https://api.github.com/users/ben-kaufman/followers",
      "following_url": "https://api.github.com/users/ben-kaufman/following{/other_user}",
      "gists_url": "https://api.github.com/users/ben-kaufman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ben-kaufman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ben-kaufman/subscriptions",
      "organizations_url": "https://api.github.com/users/ben-kaufman/orgs",
      "repos_url": "https://api.github.com/users/ben-kaufman/repos",
      "events_url": "https://api.github.com/users/ben-kaufman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ben-kaufman/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-06-17T06:18:12Z",
    "updated_at": "2018-06-17T06:23:39Z",
    "author_association": "CONTRIBUTOR",
    "body": "I get your point but I don't fully agree with that. Unlike other software, smart contracts' code must be explicit and easily readable. In most other cases, it's more important to not repeat yourself in the code but in smart contracts, I think readability of the function should be more important.\r\nIn the example about you are trying to mitigate the behavior of modifiers which Vyper intentionally excluded. \r\n> Modifiers - e.g. in Solidity you can do function foo() mod1 { ... }, where mod1 can be defined \r\n> elsewhere in the code to include a check that is done before execution, a check that is done after \r\n> execution, some state changes, or possibly other things. Vyper does not have this, because it makes > it too easy to write misleading code. mod1 just looks too innocuous for something that could add \r\n> arbitrary pre-conditions, post-conditions or state changes. Also, it encourages people to write code > where the execution jumps around the file, harming auditability. The usual use case for a modifier is > something that performs a single check before execution of a program; our recommendation is to \r\n> simply inline these checks as asserts.\r\nThis is the reason Vyper don't have modifiers like Solidity in the first place.\r\n\r\nI am in favor of your fourth proposal of creating the ``caller`` and ``callvalue``.\r\n\r\nI would like to hear more opinions on that as code repetition is an insecure thing as well so I'm not completely sure what's more important yet, but I believe there's a room for improvement. ",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/397857541/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/397858547",
    "html_url": "https://github.com/vyperlang/vyper/issues/901#issuecomment-397858547",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/901",
    "id": 397858547,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5Nzg1ODU0Nw==",
    "user": {
      "login": "haydenadams",
      "id": 9343483,
      "node_id": "MDQ6VXNlcjkzNDM0ODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9343483?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/haydenadams",
      "html_url": "https://github.com/haydenadams",
      "followers_url": "https://api.github.com/users/haydenadams/followers",
      "following_url": "https://api.github.com/users/haydenadams/following{/other_user}",
      "gists_url": "https://api.github.com/users/haydenadams/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/haydenadams/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/haydenadams/subscriptions",
      "organizations_url": "https://api.github.com/users/haydenadams/orgs",
      "repos_url": "https://api.github.com/users/haydenadams/repos",
      "events_url": "https://api.github.com/users/haydenadams/events{/privacy}",
      "received_events_url": "https://api.github.com/users/haydenadams/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-06-17T06:46:24Z",
    "updated_at": "2018-06-17T06:46:59Z",
    "author_association": "NONE",
    "body": "Idk if I agree that internal function calls have the same readability issues as Solidity modifiers. Also code repetition can feel very verbose and reduce readability. If you need to do a square root in five different functions, its probably bad to have the sqrt() implemented five times.  But people will be tempted to do so if they save 1000 gas per function call. Discouragement through high gas cost makes sense on a protocol level (ie making sstore exepensive) but feels wrong for smart contract languages. \r\n\r\nTo be clear I don't think\r\n\r\n> 1. Environment values change unexpectedly\r\nAt least two important environment opcodes will return different values: CALLER (ie. msg.sender) and CALLVALUE (ie. msg.value). \r\n\r\nis a big problem. I do however think \r\n\r\n> 2. Gas costs disincentivizes code reuse\r\nThe CALL opcode costs 700 gas (+ input data costs + function dispatching again). By contrast Solidity uses JUMP (2 gas) to call a function.\r\n\r\nis bad. If using JUMP for internal calls can be done as safely as CALL, it should be used. I don't know the security tradeoffs at all, hopefully someone who does can chime in here!",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/397858547/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/397879855",
    "html_url": "https://github.com/vyperlang/vyper/issues/901#issuecomment-397879855",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/901",
    "id": 397879855,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5Nzg3OTg1NQ==",
    "user": {
      "login": "maurelian",
      "id": 23033765,
      "node_id": "MDQ6VXNlcjIzMDMzNzY1",
      "avatar_url": "https://avatars.githubusercontent.com/u/23033765?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/maurelian",
      "html_url": "https://github.com/maurelian",
      "followers_url": "https://api.github.com/users/maurelian/followers",
      "following_url": "https://api.github.com/users/maurelian/following{/other_user}",
      "gists_url": "https://api.github.com/users/maurelian/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/maurelian/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/maurelian/subscriptions",
      "organizations_url": "https://api.github.com/users/maurelian/orgs",
      "repos_url": "https://api.github.com/users/maurelian/repos",
      "events_url": "https://api.github.com/users/maurelian/events{/privacy}",
      "received_events_url": "https://api.github.com/users/maurelian/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-06-17T13:41:32Z",
    "updated_at": "2018-06-17T13:41:32Z",
    "author_association": "CONTRIBUTOR",
    "body": "It's not only about readability, but maintainability as well. More mistakes will be made if 5 pieces of code have to change. \r\n\r\nTake a look at these `@private` utilities I wrote for my ERC721 translation:\r\n\r\nhttps://github.com/maurelian/ethereum-erc721/blob/vyperTranslation/contracts/tokens/NFToken.v.py#L102-L120\r\n\r\nThere are a total of 12 lines of code in the bodies, which can be written once, then reused 3 times in the standard. If they were written 3 times over, it would be very hard (for my brain at least) to read carefully and catch any differences between them. \r\n",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/397879855/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/397892659",
    "html_url": "https://github.com/vyperlang/vyper/issues/901#issuecomment-397892659",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/901",
    "id": 397892659,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5Nzg5MjY1OQ==",
    "user": {
      "login": "fubuloubu",
      "id": 3859395,
      "node_id": "MDQ6VXNlcjM4NTkzOTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3859395?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fubuloubu",
      "html_url": "https://github.com/fubuloubu",
      "followers_url": "https://api.github.com/users/fubuloubu/followers",
      "following_url": "https://api.github.com/users/fubuloubu/following{/other_user}",
      "gists_url": "https://api.github.com/users/fubuloubu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fubuloubu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fubuloubu/subscriptions",
      "organizations_url": "https://api.github.com/users/fubuloubu/orgs",
      "repos_url": "https://api.github.com/users/fubuloubu/repos",
      "events_url": "https://api.github.com/users/fubuloubu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fubuloubu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-06-17T17:12:49Z",
    "updated_at": "2018-06-17T17:12:49Z",
    "author_association": "MEMBER",
    "body": "6th option?: an optimization function that will perform a JUMP instead of a CALL if it is able to be validated that the code jump cannot access anything outside of the called function. This would limit functions that make external calls from having advanced memory access while allowing safe internal calls to reduced their gas count. This will also incentivize isolation/reduction of external calls to improve gas costs.",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/397892659/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/397908963",
    "html_url": "https://github.com/vyperlang/vyper/issues/901#issuecomment-397908963",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/901",
    "id": 397908963,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5NzkwODk2Mw==",
    "user": {
      "login": "maurelian",
      "id": 23033765,
      "node_id": "MDQ6VXNlcjIzMDMzNzY1",
      "avatar_url": "https://avatars.githubusercontent.com/u/23033765?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/maurelian",
      "html_url": "https://github.com/maurelian",
      "followers_url": "https://api.github.com/users/maurelian/followers",
      "following_url": "https://api.github.com/users/maurelian/following{/other_user}",
      "gists_url": "https://api.github.com/users/maurelian/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/maurelian/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/maurelian/subscriptions",
      "organizations_url": "https://api.github.com/users/maurelian/orgs",
      "repos_url": "https://api.github.com/users/maurelian/repos",
      "events_url": "https://api.github.com/users/maurelian/events{/privacy}",
      "received_events_url": "https://api.github.com/users/maurelian/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-06-17T21:52:06Z",
    "updated_at": "2018-06-17T21:52:06Z",
    "author_association": "CONTRIBUTOR",
    "body": "> 6th option?: an optimization function that will perform a JUMP instead of a CALL if it is able to be validated that the code jump cannot access anything outside of the called function.\r\n\r\nThis optimization means that source code using `msg.sender` would behave differently based on a decision by the compiler. It might work if the developer could specify a flag (@memsafe, @pure ?), indicating they would like to use `JUMP` and the compiler makes a check to ensure it's safe.\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/397908963/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/397909382",
    "html_url": "https://github.com/vyperlang/vyper/issues/901#issuecomment-397909382",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/901",
    "id": 397909382,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5NzkwOTM4Mg==",
    "user": {
      "login": "maurelian",
      "id": 23033765,
      "node_id": "MDQ6VXNlcjIzMDMzNzY1",
      "avatar_url": "https://avatars.githubusercontent.com/u/23033765?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/maurelian",
      "html_url": "https://github.com/maurelian",
      "followers_url": "https://api.github.com/users/maurelian/followers",
      "following_url": "https://api.github.com/users/maurelian/following{/other_user}",
      "gists_url": "https://api.github.com/users/maurelian/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/maurelian/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/maurelian/subscriptions",
      "organizations_url": "https://api.github.com/users/maurelian/orgs",
      "repos_url": "https://api.github.com/users/maurelian/repos",
      "events_url": "https://api.github.com/users/maurelian/events{/privacy}",
      "received_events_url": "https://api.github.com/users/maurelian/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-06-17T22:00:19Z",
    "updated_at": "2018-06-17T22:01:00Z",
    "author_association": "CONTRIBUTOR",
    "body": "> To be clear I don't think \"Environment values change unexpectedly\" is a big problem. \r\n\r\n@haydenadams No? IMO, the current behaviour of this code is highly non-intuitive, and will make a lot of common operations much more difficult. \r\n\r\n```python\r\n@public\r\ndef getCaller() -> address:\r\n    return msg.sender\r\n    \r\n@public\r\ndef alsoGetCaller() -> address:\r\n    return self.getCaller() # always returns the contract's own address!\r\n ```",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/397909382/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/397919953",
    "html_url": "https://github.com/vyperlang/vyper/issues/901#issuecomment-397919953",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/901",
    "id": 397919953,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5NzkxOTk1Mw==",
    "user": {
      "login": "haydenadams",
      "id": 9343483,
      "node_id": "MDQ6VXNlcjkzNDM0ODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9343483?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/haydenadams",
      "html_url": "https://github.com/haydenadams",
      "followers_url": "https://api.github.com/users/haydenadams/followers",
      "following_url": "https://api.github.com/users/haydenadams/following{/other_user}",
      "gists_url": "https://api.github.com/users/haydenadams/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/haydenadams/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/haydenadams/subscriptions",
      "organizations_url": "https://api.github.com/users/haydenadams/orgs",
      "repos_url": "https://api.github.com/users/haydenadams/repos",
      "events_url": "https://api.github.com/users/haydenadams/events{/privacy}",
      "received_events_url": "https://api.github.com/users/haydenadams/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-06-18T01:12:08Z",
    "updated_at": "2018-06-18T01:12:08Z",
    "author_association": "NONE",
    "body": "@maurelian \r\n\r\n> IMO, the current behaviour of this code is highly non-intuitive, and will make a lot of common operations much more difficult.\r\n\r\n Whatever address calls a function is msg.sender within the scope of that function. That is the **only** rule right now. Its not a massive leap to realize that extends to `self` for internal calls. When a public function is called I don't think it should react differently if its being called by itself, another smart contract, or an external account. \r\n\r\n\"on the internet nobody knows you're a dog\" -> \"on Ethereum nobody knows you're  ̶a̶ ̶s̶m̶a̶r̶t̶ ̶c̶o̶n̶t̶r̶a̶c̶t̶ yourself\"\r\n\r\nWith [account abstraction](https://ethresear.ch/t/a-recap-of-where-we-are-at-on-account-abstraction/1721/4) the divide between contracts and accounts will go from negligible to nonexistent. Contracts will get more complicated but also more versatile. Its pretty important that smart contract devs understand Ethereum account structure. I would prioritize simplicity of logic over what feels immediately intuitive here. Totally understand where you're coming from though!\r\n\r\nThis seems  reasonable, and personally I like it: \r\n\r\n```python\r\n@private\r\ndef checkOwner(_sender: address):\r\n  assert _sender == self.owner # <- replaced msg.sender with _sender\r\n\r\n@public\r\ndef writeValue(_value: int128):\r\n    self.checkOwner(msg.sender) # <- pass msg.sender as an argument \r\n    self.value = _value\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/397919953/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/398366169",
    "html_url": "https://github.com/vyperlang/vyper/issues/901#issuecomment-398366169",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/901",
    "id": 398366169,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5ODM2NjE2OQ==",
    "user": {
      "login": "jacqueswww",
      "id": 6917456,
      "node_id": "MDQ6VXNlcjY5MTc0NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6917456?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jacqueswww",
      "html_url": "https://github.com/jacqueswww",
      "followers_url": "https://api.github.com/users/jacqueswww/followers",
      "following_url": "https://api.github.com/users/jacqueswww/following{/other_user}",
      "gists_url": "https://api.github.com/users/jacqueswww/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jacqueswww/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jacqueswww/subscriptions",
      "organizations_url": "https://api.github.com/users/jacqueswww/orgs",
      "repos_url": "https://api.github.com/users/jacqueswww/repos",
      "events_url": "https://api.github.com/users/jacqueswww/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jacqueswww/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-06-19T11:27:29Z",
    "updated_at": "2018-06-19T11:27:29Z",
    "author_association": "CONTRIBUTOR",
    "body": "We briefly discussed this in the bi-weekly meeting yesterday, but left it as unresolved. As it's quite a significant change, we have to study all the options carefully ;)",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/398366169/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/398402324",
    "html_url": "https://github.com/vyperlang/vyper/issues/901#issuecomment-398402324",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/901",
    "id": 398402324,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5ODQwMjMyNA==",
    "user": {
      "login": "maurelian",
      "id": 23033765,
      "node_id": "MDQ6VXNlcjIzMDMzNzY1",
      "avatar_url": "https://avatars.githubusercontent.com/u/23033765?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/maurelian",
      "html_url": "https://github.com/maurelian",
      "followers_url": "https://api.github.com/users/maurelian/followers",
      "following_url": "https://api.github.com/users/maurelian/following{/other_user}",
      "gists_url": "https://api.github.com/users/maurelian/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/maurelian/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/maurelian/subscriptions",
      "organizations_url": "https://api.github.com/users/maurelian/orgs",
      "repos_url": "https://api.github.com/users/maurelian/repos",
      "events_url": "https://api.github.com/users/maurelian/events{/privacy}",
      "received_events_url": "https://api.github.com/users/maurelian/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-06-19T13:40:00Z",
    "updated_at": "2018-06-19T13:40:00Z",
    "author_association": "CONTRIBUTOR",
    "body": "> As it's quite a significant change, we have to study all the options carefully ;)\r\n\r\n@jacqueswww I certainly agree. \r\n",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/398402324/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/398407074",
    "html_url": "https://github.com/vyperlang/vyper/issues/901#issuecomment-398407074",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/901",
    "id": 398407074,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5ODQwNzA3NA==",
    "user": {
      "login": "maurelian",
      "id": 23033765,
      "node_id": "MDQ6VXNlcjIzMDMzNzY1",
      "avatar_url": "https://avatars.githubusercontent.com/u/23033765?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/maurelian",
      "html_url": "https://github.com/maurelian",
      "followers_url": "https://api.github.com/users/maurelian/followers",
      "following_url": "https://api.github.com/users/maurelian/following{/other_user}",
      "gists_url": "https://api.github.com/users/maurelian/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/maurelian/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/maurelian/subscriptions",
      "organizations_url": "https://api.github.com/users/maurelian/orgs",
      "repos_url": "https://api.github.com/users/maurelian/repos",
      "events_url": "https://api.github.com/users/maurelian/events{/privacy}",
      "received_events_url": "https://api.github.com/users/maurelian/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-06-19T13:54:06Z",
    "updated_at": "2018-06-19T13:55:09Z",
    "author_association": "CONTRIBUTOR",
    "body": "@haydenadams it's straightforward to make small changes to my little example to make it work, but it's always going to be confusing.  \r\n\r\nHere's an other summation:\r\n\r\nIF: a contract can call its own `@public` functions;\r\nTHEN: `msg.sender` is pretty much useless as a builtin variable, because it means something entirely different when called externally vs. internally. It's only useful when passed as an argument. \r\n\r\nIf the Vyper team decides to move towards the `external` and `internal` visibilities as in solidity, this would be fine. (added to OP)\r\n\r\nFinally, from the [Auditability principle](https://vyper.readthedocs.io/en/latest/#principles-and-goals):\r\n\r\n> Simplicity for the reader is more important than simplicity for the writer, and simplicity for readers with low prior experience with Vyper (and low prior experience with programming in general) is particularly important.\r\n\r\nOutside of project contributors, requiring this level of nuance is far from simple for anyone reading code.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/398407074/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/398409104",
    "html_url": "https://github.com/vyperlang/vyper/issues/901#issuecomment-398409104",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/901",
    "id": 398409104,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5ODQwOTEwNA==",
    "user": {
      "login": "jacqueswww",
      "id": 6917456,
      "node_id": "MDQ6VXNlcjY5MTc0NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6917456?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jacqueswww",
      "html_url": "https://github.com/jacqueswww",
      "followers_url": "https://api.github.com/users/jacqueswww/followers",
      "following_url": "https://api.github.com/users/jacqueswww/following{/other_user}",
      "gists_url": "https://api.github.com/users/jacqueswww/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jacqueswww/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jacqueswww/subscriptions",
      "organizations_url": "https://api.github.com/users/jacqueswww/orgs",
      "repos_url": "https://api.github.com/users/jacqueswww/repos",
      "events_url": "https://api.github.com/users/jacqueswww/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jacqueswww/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-06-19T14:00:09Z",
    "updated_at": "2018-06-19T14:11:07Z",
    "author_association": "CONTRIBUTOR",
    "body": "I agree that it's confusing that `msg.sender` changes, and will be a major annoyance going forward.\r\nShort/little fixes I will investigate:\r\n1.) disable accessing `msg.sender` or `msg.value` in private functions.\r\n2.) Investigate using `DELETEGATECALL` -> I was under the impression that this also resets the VM. \r\n",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/398409104/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/398491329",
    "html_url": "https://github.com/vyperlang/vyper/issues/901#issuecomment-398491329",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/901",
    "id": 398491329,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5ODQ5MTMyOQ==",
    "user": {
      "login": "maurelian",
      "id": 23033765,
      "node_id": "MDQ6VXNlcjIzMDMzNzY1",
      "avatar_url": "https://avatars.githubusercontent.com/u/23033765?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/maurelian",
      "html_url": "https://github.com/maurelian",
      "followers_url": "https://api.github.com/users/maurelian/followers",
      "following_url": "https://api.github.com/users/maurelian/following{/other_user}",
      "gists_url": "https://api.github.com/users/maurelian/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/maurelian/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/maurelian/subscriptions",
      "organizations_url": "https://api.github.com/users/maurelian/orgs",
      "repos_url": "https://api.github.com/users/maurelian/repos",
      "events_url": "https://api.github.com/users/maurelian/events{/privacy}",
      "received_events_url": "https://api.github.com/users/maurelian/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-06-19T18:02:59Z",
    "updated_at": "2018-06-19T18:03:30Z",
    "author_association": "CONTRIBUTOR",
    "body": "2.) Investigate using DELETEGATECALL -> I was under the impression that this also resets the VM.\r\n\r\nActually, I think you are right! I tested with this code in remix: \r\n\r\n```solidity\r\nlibrary Lib {\r\n\tfunction foo(uint a) returns(uint) { }\r\n}\r\n\r\ncontract B {\r\n    using Lib for uint;\t\r\n    function bar() returns(uint){\r\n\t    uint a = 1;\r\n\t    return a.foo();\r\n\t}\r\n}\r\n```\r\n\r\nIf you call `B.bar()`, and look at the debugger, after the DELEGATECALL instruction memory is reset. \r\nMy bad. I'll update the VIP.",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/398491329/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/398620119",
    "html_url": "https://github.com/vyperlang/vyper/issues/901#issuecomment-398620119",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/901",
    "id": 398620119,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5ODYyMDExOQ==",
    "user": {
      "login": "haydenadams",
      "id": 9343483,
      "node_id": "MDQ6VXNlcjkzNDM0ODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9343483?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/haydenadams",
      "html_url": "https://github.com/haydenadams",
      "followers_url": "https://api.github.com/users/haydenadams/followers",
      "following_url": "https://api.github.com/users/haydenadams/following{/other_user}",
      "gists_url": "https://api.github.com/users/haydenadams/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/haydenadams/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/haydenadams/subscriptions",
      "organizations_url": "https://api.github.com/users/haydenadams/orgs",
      "repos_url": "https://api.github.com/users/haydenadams/repos",
      "events_url": "https://api.github.com/users/haydenadams/events{/privacy}",
      "received_events_url": "https://api.github.com/users/haydenadams/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-06-20T04:24:22Z",
    "updated_at": "2018-06-20T04:24:22Z",
    "author_association": "NONE",
    "body": "@jacqueswww \r\n\r\n> 1.) disable accessing `msg.sender` or `msg.value` in private functions.\r\n\r\nI like this. It gets rid of most of the confusion, and they're both useless in private functions anyway.",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/398620119/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/398621012",
    "html_url": "https://github.com/vyperlang/vyper/issues/901#issuecomment-398621012",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/901",
    "id": 398621012,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5ODYyMTAxMg==",
    "user": {
      "login": "fubuloubu",
      "id": 3859395,
      "node_id": "MDQ6VXNlcjM4NTkzOTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3859395?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fubuloubu",
      "html_url": "https://github.com/fubuloubu",
      "followers_url": "https://api.github.com/users/fubuloubu/followers",
      "following_url": "https://api.github.com/users/fubuloubu/following{/other_user}",
      "gists_url": "https://api.github.com/users/fubuloubu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fubuloubu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fubuloubu/subscriptions",
      "organizations_url": "https://api.github.com/users/fubuloubu/orgs",
      "repos_url": "https://api.github.com/users/fubuloubu/repos",
      "events_url": "https://api.github.com/users/fubuloubu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fubuloubu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-06-20T04:31:35Z",
    "updated_at": "2018-06-20T04:31:35Z",
    "author_association": "MEMBER",
    "body": "@haydenadams I think \"useless\" might be an oversimplification, but it forces a specific design behavior that ultimately is very practical in reducing your attack surface. Basically, private functions should do very specific internal behaviors, preferably dealing only with internal state.",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/398621012/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/398893167",
    "html_url": "https://github.com/vyperlang/vyper/issues/901#issuecomment-398893167",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/901",
    "id": 398893167,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5ODg5MzE2Nw==",
    "user": {
      "login": "maurelian",
      "id": 23033765,
      "node_id": "MDQ6VXNlcjIzMDMzNzY1",
      "avatar_url": "https://avatars.githubusercontent.com/u/23033765?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/maurelian",
      "html_url": "https://github.com/maurelian",
      "followers_url": "https://api.github.com/users/maurelian/followers",
      "following_url": "https://api.github.com/users/maurelian/following{/other_user}",
      "gists_url": "https://api.github.com/users/maurelian/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/maurelian/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/maurelian/subscriptions",
      "organizations_url": "https://api.github.com/users/maurelian/orgs",
      "repos_url": "https://api.github.com/users/maurelian/repos",
      "events_url": "https://api.github.com/users/maurelian/events{/privacy}",
      "received_events_url": "https://api.github.com/users/maurelian/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-06-20T20:53:47Z",
    "updated_at": "2018-06-20T20:53:47Z",
    "author_association": "CONTRIBUTOR",
    "body": "> 1.) disable accessing msg.sender or msg.value in private functions.\r\n> 2.) Investigate using DELETEGATECALL -> I was under the impression that this also resets the VM.\r\n\r\nTo be clear, I'm in favor of either but not both. Preference for #2. \r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/398893167/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/398897535",
    "html_url": "https://github.com/vyperlang/vyper/issues/901#issuecomment-398897535",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/901",
    "id": 398897535,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5ODg5NzUzNQ==",
    "user": {
      "login": "jacqueswww",
      "id": 6917456,
      "node_id": "MDQ6VXNlcjY5MTc0NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6917456?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jacqueswww",
      "html_url": "https://github.com/jacqueswww",
      "followers_url": "https://api.github.com/users/jacqueswww/followers",
      "following_url": "https://api.github.com/users/jacqueswww/following{/other_user}",
      "gists_url": "https://api.github.com/users/jacqueswww/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jacqueswww/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jacqueswww/subscriptions",
      "organizations_url": "https://api.github.com/users/jacqueswww/orgs",
      "repos_url": "https://api.github.com/users/jacqueswww/repos",
      "events_url": "https://api.github.com/users/jacqueswww/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jacqueswww/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-06-20T21:08:50Z",
    "updated_at": "2018-06-20T21:08:50Z",
    "author_association": "CONTRIBUTOR",
    "body": "I am also leaning towards delegate call.\r\n\r\nBut definitely feel we might need a more gas efficient dispatcher+memory stack post beta.",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/398897535/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/398898275",
    "html_url": "https://github.com/vyperlang/vyper/issues/901#issuecomment-398898275",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/901",
    "id": 398898275,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5ODg5ODI3NQ==",
    "user": {
      "login": "fubuloubu",
      "id": 3859395,
      "node_id": "MDQ6VXNlcjM4NTkzOTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3859395?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fubuloubu",
      "html_url": "https://github.com/fubuloubu",
      "followers_url": "https://api.github.com/users/fubuloubu/followers",
      "following_url": "https://api.github.com/users/fubuloubu/following{/other_user}",
      "gists_url": "https://api.github.com/users/fubuloubu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fubuloubu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fubuloubu/subscriptions",
      "organizations_url": "https://api.github.com/users/fubuloubu/orgs",
      "repos_url": "https://api.github.com/users/fubuloubu/repos",
      "events_url": "https://api.github.com/users/fubuloubu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fubuloubu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-06-20T21:11:10Z",
    "updated_at": "2018-06-20T21:11:10Z",
    "author_association": "MEMBER",
    "body": "1. Would be a user expectation breaking change\r\nSo is 2.\r\n\r\nMore gas efficient dispatcher can be done without breaking expectations if we make the right move now.\r\n\r\nWhich one makes it easier to implement gas optimization on the dispatcher?",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/398898275/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/398975010",
    "html_url": "https://github.com/vyperlang/vyper/issues/901#issuecomment-398975010",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/901",
    "id": 398975010,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5ODk3NTAxMA==",
    "user": {
      "login": "haydenadams",
      "id": 9343483,
      "node_id": "MDQ6VXNlcjkzNDM0ODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9343483?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/haydenadams",
      "html_url": "https://github.com/haydenadams",
      "followers_url": "https://api.github.com/users/haydenadams/followers",
      "following_url": "https://api.github.com/users/haydenadams/following{/other_user}",
      "gists_url": "https://api.github.com/users/haydenadams/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/haydenadams/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/haydenadams/subscriptions",
      "organizations_url": "https://api.github.com/users/haydenadams/orgs",
      "repos_url": "https://api.github.com/users/haydenadams/repos",
      "events_url": "https://api.github.com/users/haydenadams/events{/privacy}",
      "received_events_url": "https://api.github.com/users/haydenadams/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-06-21T04:48:07Z",
    "updated_at": "2018-06-21T04:48:07Z",
    "author_association": "NONE",
    "body": "If switching to delegatecall mean `msg.sender` in internal calls to public functions will no longer return the contracts own address I'm strongly against it.",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/398975010/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/399119355",
    "html_url": "https://github.com/vyperlang/vyper/issues/901#issuecomment-399119355",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/901",
    "id": 399119355,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5OTExOTM1NQ==",
    "user": {
      "login": "fulldecent",
      "id": 382183,
      "node_id": "MDQ6VXNlcjM4MjE4Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/382183?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fulldecent",
      "html_url": "https://github.com/fulldecent",
      "followers_url": "https://api.github.com/users/fulldecent/followers",
      "following_url": "https://api.github.com/users/fulldecent/following{/other_user}",
      "gists_url": "https://api.github.com/users/fulldecent/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fulldecent/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fulldecent/subscriptions",
      "organizations_url": "https://api.github.com/users/fulldecent/orgs",
      "repos_url": "https://api.github.com/users/fulldecent/repos",
      "events_url": "https://api.github.com/users/fulldecent/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fulldecent/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-06-21T14:17:08Z",
    "updated_at": "2018-06-21T14:17:08Z",
    "author_association": "CONTRIBUTOR",
    "body": "To better understand and make a decision here, it will be helpful if the VIP will include discussion of which stage of the compilation process we are changing. Also a discussion of use cases at that stage of compilation would help me.\r\n\r\nAlso, if you can give a brief overview of the compilation strategy for newcomers this would help them join the discussion.",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/399119355/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/399141830",
    "html_url": "https://github.com/vyperlang/vyper/issues/901#issuecomment-399141830",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/901",
    "id": 399141830,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5OTE0MTgzMA==",
    "user": {
      "login": "maurelian",
      "id": 23033765,
      "node_id": "MDQ6VXNlcjIzMDMzNzY1",
      "avatar_url": "https://avatars.githubusercontent.com/u/23033765?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/maurelian",
      "html_url": "https://github.com/maurelian",
      "followers_url": "https://api.github.com/users/maurelian/followers",
      "following_url": "https://api.github.com/users/maurelian/following{/other_user}",
      "gists_url": "https://api.github.com/users/maurelian/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/maurelian/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/maurelian/subscriptions",
      "organizations_url": "https://api.github.com/users/maurelian/orgs",
      "repos_url": "https://api.github.com/users/maurelian/repos",
      "events_url": "https://api.github.com/users/maurelian/events{/privacy}",
      "received_events_url": "https://api.github.com/users/maurelian/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-06-21T15:20:47Z",
    "updated_at": "2018-06-21T15:20:47Z",
    "author_association": "CONTRIBUTOR",
    "body": "@fulldecent and everyone: Looking again, I think it makes sense to reduce the scope of this VIP. A better title might be \"**Cost and usability Improvements to internal function calls**\".  👍/ 👎?\r\n\r\nCode reuse in general, (ie.  enabling imports and something like inheritance/composability) is probably another much needed VIP, or perhaps a few.  \r\n\r\n\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/399141830/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/399143908",
    "html_url": "https://github.com/vyperlang/vyper/issues/901#issuecomment-399143908",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/901",
    "id": 399143908,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5OTE0MzkwOA==",
    "user": {
      "login": "fulldecent",
      "id": 382183,
      "node_id": "MDQ6VXNlcjM4MjE4Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/382183?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fulldecent",
      "html_url": "https://github.com/fulldecent",
      "followers_url": "https://api.github.com/users/fulldecent/followers",
      "following_url": "https://api.github.com/users/fulldecent/following{/other_user}",
      "gists_url": "https://api.github.com/users/fulldecent/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fulldecent/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fulldecent/subscriptions",
      "organizations_url": "https://api.github.com/users/fulldecent/orgs",
      "repos_url": "https://api.github.com/users/fulldecent/repos",
      "events_url": "https://api.github.com/users/fulldecent/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fulldecent/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-06-21T15:26:45Z",
    "updated_at": "2018-06-21T15:26:52Z",
    "author_association": "CONTRIBUTOR",
    "body": "Or \"New feature: call a function without using EVM CALL\"",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/399143908/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/399148791",
    "html_url": "https://github.com/vyperlang/vyper/issues/901#issuecomment-399148791",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/901",
    "id": 399148791,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5OTE0ODc5MQ==",
    "user": {
      "login": "fubuloubu",
      "id": 3859395,
      "node_id": "MDQ6VXNlcjM4NTkzOTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3859395?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fubuloubu",
      "html_url": "https://github.com/fubuloubu",
      "followers_url": "https://api.github.com/users/fubuloubu/followers",
      "following_url": "https://api.github.com/users/fubuloubu/following{/other_user}",
      "gists_url": "https://api.github.com/users/fubuloubu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fubuloubu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fubuloubu/subscriptions",
      "organizations_url": "https://api.github.com/users/fubuloubu/orgs",
      "repos_url": "https://api.github.com/users/fubuloubu/repos",
      "events_url": "https://api.github.com/users/fubuloubu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fubuloubu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-06-21T15:41:25Z",
    "updated_at": "2018-06-21T15:41:25Z",
    "author_association": "MEMBER",
    "body": "I think this is modification to existing behavior, not a new feature proposal.\r\n\r\nWe already have a composibility VIP I believe, as well as one for importing interfaces",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/399148791/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/401641099",
    "html_url": "https://github.com/vyperlang/vyper/issues/901#issuecomment-401641099",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/901",
    "id": 401641099,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwMTY0MTA5OQ==",
    "user": {
      "login": "maurelian",
      "id": 23033765,
      "node_id": "MDQ6VXNlcjIzMDMzNzY1",
      "avatar_url": "https://avatars.githubusercontent.com/u/23033765?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/maurelian",
      "html_url": "https://github.com/maurelian",
      "followers_url": "https://api.github.com/users/maurelian/followers",
      "following_url": "https://api.github.com/users/maurelian/following{/other_user}",
      "gists_url": "https://api.github.com/users/maurelian/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/maurelian/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/maurelian/subscriptions",
      "organizations_url": "https://api.github.com/users/maurelian/orgs",
      "repos_url": "https://api.github.com/users/maurelian/repos",
      "events_url": "https://api.github.com/users/maurelian/events{/privacy}",
      "received_events_url": "https://api.github.com/users/maurelian/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-01T23:38:47Z",
    "updated_at": "2018-07-01T23:38:47Z",
    "author_association": "CONTRIBUTOR",
    "body": "In the mid to longer term, I can imagine an EIP to significantly reducing the cost of a contract to CALL or DELEGATECALL its own address might be well received. ",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/401641099/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/401641342",
    "html_url": "https://github.com/vyperlang/vyper/issues/901#issuecomment-401641342",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/901",
    "id": 401641342,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwMTY0MTM0Mg==",
    "user": {
      "login": "fulldecent",
      "id": 382183,
      "node_id": "MDQ6VXNlcjM4MjE4Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/382183?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fulldecent",
      "html_url": "https://github.com/fulldecent",
      "followers_url": "https://api.github.com/users/fulldecent/followers",
      "following_url": "https://api.github.com/users/fulldecent/following{/other_user}",
      "gists_url": "https://api.github.com/users/fulldecent/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fulldecent/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fulldecent/subscriptions",
      "organizations_url": "https://api.github.com/users/fulldecent/orgs",
      "repos_url": "https://api.github.com/users/fulldecent/repos",
      "events_url": "https://api.github.com/users/fulldecent/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fulldecent/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-01T23:44:03Z",
    "updated_at": "2018-07-01T23:44:03Z",
    "author_association": "CONTRIBUTOR",
    "body": "I would vote against such an EIP. Call-to-self has extremely limited utility.",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/401641342/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/401642026",
    "html_url": "https://github.com/vyperlang/vyper/issues/901#issuecomment-401642026",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/901",
    "id": 401642026,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwMTY0MjAyNg==",
    "user": {
      "login": "haydenadams",
      "id": 9343483,
      "node_id": "MDQ6VXNlcjkzNDM0ODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9343483?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/haydenadams",
      "html_url": "https://github.com/haydenadams",
      "followers_url": "https://api.github.com/users/haydenadams/followers",
      "following_url": "https://api.github.com/users/haydenadams/following{/other_user}",
      "gists_url": "https://api.github.com/users/haydenadams/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/haydenadams/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/haydenadams/subscriptions",
      "organizations_url": "https://api.github.com/users/haydenadams/orgs",
      "repos_url": "https://api.github.com/users/haydenadams/repos",
      "events_url": "https://api.github.com/users/haydenadams/events{/privacy}",
      "received_events_url": "https://api.github.com/users/haydenadams/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-01T23:58:01Z",
    "updated_at": "2018-07-01T23:58:15Z",
    "author_association": "NONE",
    "body": "I believe the issue is that even calls to `@private` functions use `CALL`, which is very gas heavy compared to Solidity using `JUMP`. I believe this is for safety reasons but unfortunately discourages the use of `@private` functions. \r\n\r\n@fubuloubu's response  earlier in the thread:\r\n> 6th option?: an optimization function that will perform a JUMP instead of a CALL if it is able to be validated that the code jump cannot access anything outside of the called function. This would limit functions that make external calls from having advanced memory access while allowing safe internal calls to reduced their gas count. This will also incentivize isolation/reduction of external calls to improve gas costs.\r\n\r\nseems like something worth pursuing. ",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/401642026/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/401642548",
    "html_url": "https://github.com/vyperlang/vyper/issues/901#issuecomment-401642548",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/901",
    "id": 401642548,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwMTY0MjU0OA==",
    "user": {
      "login": "fulldecent",
      "id": 382183,
      "node_id": "MDQ6VXNlcjM4MjE4Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/382183?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fulldecent",
      "html_url": "https://github.com/fulldecent",
      "followers_url": "https://api.github.com/users/fulldecent/followers",
      "following_url": "https://api.github.com/users/fulldecent/following{/other_user}",
      "gists_url": "https://api.github.com/users/fulldecent/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fulldecent/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fulldecent/subscriptions",
      "organizations_url": "https://api.github.com/users/fulldecent/orgs",
      "repos_url": "https://api.github.com/users/fulldecent/repos",
      "events_url": "https://api.github.com/users/fulldecent/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fulldecent/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-02T00:05:54Z",
    "updated_at": "2018-07-02T00:05:54Z",
    "author_association": "CONTRIBUTOR",
    "body": "Copying from Gitter.\r\n\r\nWill's code reuse proposal. This is a FOR NOW proposal, it is implementable and it solves nearly all problems for today. I even think it is good enough to get Vyper to production version 1.0. Further improvements are possible but I think they can safely be out of scope of 1.0:\r\n\r\n# WORK PLAN:\r\n\r\n1. Two types of files: interfaces (one interface per file) and contracts (one contract per file).\r\n2. You can define an interface like ERC721Metadata in an interface file and also in a contract file.\r\n3. The interface file is one-to-one fully compatible with the Ethereum ABI.\r\n4. Write a translator from Solidity to Vyper interfaces. It will be easy.\r\n5. Make a library of all the final ERC interfaces, even if you have to manually make them.\r\n6. Import interfaces from the interface files to contracts.\r\n7. An interface is a type which decorates an address.\r\n8. Interfaces can inherit other interfaces.\r\n9. Carefully study interface IDs from ERC-165 and reproduce the examples given in ERC-721 this relates to how interfaces inherit other interfaces.\r\n10. Interfaces may have optional functions. (A break from solidity.)\r\n11. Contracts can implement interfaces.\r\n12. A contract that implements an interface but does not implement a required function is an ERROR.\r\n13. A contract that implements an interface but does not implement an optional function is neither an ERROR nor a WARNING.\r\n14. The current behavior of using EVM CALL to call a contracts' own functions changes to to a new syntax. People will rarely want to use this.\r\n15. Rename @public to @external to match Solidity.\r\n16. Introduce a new function decorator @internal which allows a function to be called internally.\r\n17. Reintroduce the function call syntax currently used for external calls (removed in step 14) but have it apply to internal calls.\r\n18. Implement external calls like this: External jump call table -> LOADCALLDATA unpack -> add function parameters to stack -> call internal function -> do function stuff.\r\n19. Implement internal calls like this: add function parameters to stack -> call internal function -> do the function stuff.\r\n20. Remember that all of these steps are INCREASING SECURITY because: people won't use Vyper otherwise, code reuse is more secure, code is easier to audit; THEREFORE you should ignore the pleas of the formal verification people to slow down... it is THEIR job to keep up with our pace :-)\r\n\r\n# OUT OF SCOPE\r\n\r\n- Contracts inheriting from other contracts\r\n- Interface files that have built-it default implementations\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/401642548/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/401642584",
    "html_url": "https://github.com/vyperlang/vyper/issues/901#issuecomment-401642584",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/901",
    "id": 401642584,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwMTY0MjU4NA==",
    "user": {
      "login": "fulldecent",
      "id": 382183,
      "node_id": "MDQ6VXNlcjM4MjE4Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/382183?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fulldecent",
      "html_url": "https://github.com/fulldecent",
      "followers_url": "https://api.github.com/users/fulldecent/followers",
      "following_url": "https://api.github.com/users/fulldecent/following{/other_user}",
      "gists_url": "https://api.github.com/users/fulldecent/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fulldecent/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fulldecent/subscriptions",
      "organizations_url": "https://api.github.com/users/fulldecent/orgs",
      "repos_url": "https://api.github.com/users/fulldecent/repos",
      "events_url": "https://api.github.com/users/fulldecent/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fulldecent/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-02T00:06:24Z",
    "updated_at": "2018-07-02T00:06:24Z",
    "author_association": "CONTRIBUTOR",
    "body": "^^ This is a \"manifesto\" if you have followed along similar initiatives in Swift evolution.",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/401642584/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/401643941",
    "html_url": "https://github.com/vyperlang/vyper/issues/901#issuecomment-401643941",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/901",
    "id": 401643941,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwMTY0Mzk0MQ==",
    "user": {
      "login": "haydenadams",
      "id": 9343483,
      "node_id": "MDQ6VXNlcjkzNDM0ODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9343483?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/haydenadams",
      "html_url": "https://github.com/haydenadams",
      "followers_url": "https://api.github.com/users/haydenadams/followers",
      "following_url": "https://api.github.com/users/haydenadams/following{/other_user}",
      "gists_url": "https://api.github.com/users/haydenadams/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/haydenadams/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/haydenadams/subscriptions",
      "organizations_url": "https://api.github.com/users/haydenadams/orgs",
      "repos_url": "https://api.github.com/users/haydenadams/repos",
      "events_url": "https://api.github.com/users/haydenadams/events{/privacy}",
      "received_events_url": "https://api.github.com/users/haydenadams/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-02T00:27:46Z",
    "updated_at": "2018-07-02T00:27:46Z",
    "author_association": "NONE",
    "body": "@fulldecent mostly on board\r\n\r\nSolidity still has @public functions which can be called internally or externally. ",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/401643941/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/401654966",
    "html_url": "https://github.com/vyperlang/vyper/issues/901#issuecomment-401654966",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/901",
    "id": 401654966,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwMTY1NDk2Ng==",
    "user": {
      "login": "fulldecent",
      "id": 382183,
      "node_id": "MDQ6VXNlcjM4MjE4Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/382183?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fulldecent",
      "html_url": "https://github.com/fulldecent",
      "followers_url": "https://api.github.com/users/fulldecent/followers",
      "following_url": "https://api.github.com/users/fulldecent/following{/other_user}",
      "gists_url": "https://api.github.com/users/fulldecent/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fulldecent/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fulldecent/subscriptions",
      "organizations_url": "https://api.github.com/users/fulldecent/orgs",
      "repos_url": "https://api.github.com/users/fulldecent/repos",
      "events_url": "https://api.github.com/users/fulldecent/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fulldecent/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-02T02:27:40Z",
    "updated_at": "2018-07-02T02:27:40Z",
    "author_association": "CONTRIBUTOR",
    "body": "True. I am recommend a more explicit `@external` + `@internal` to be the Vypery equivalent of Solidity's `@public`.",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/401654966/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
