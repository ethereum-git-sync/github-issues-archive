{
  "url": "https://api.github.com/repos/vyperlang/vyper/issues/3475",
  "repository_url": "https://api.github.com/repos/vyperlang/vyper",
  "labels_url": "https://api.github.com/repos/vyperlang/vyper/issues/3475/labels{/name}",
  "comments_url": "https://api.github.com/repos/vyperlang/vyper/issues/3475/comments",
  "events_url": "https://api.github.com/repos/vyperlang/vyper/issues/3475/events",
  "html_url": "https://github.com/vyperlang/vyper/issues/3475",
  "id": 1734696919,
  "node_id": "I_kwDOBGDvrM5nZV_X",
  "number": 3475,
  "title": "VIP: require loop variable annotation",
  "user": {
    "login": "charles-cooper",
    "id": 3867501,
    "node_id": "MDQ6VXNlcjM4Njc1MDE=",
    "avatar_url": "https://avatars.githubusercontent.com/u/3867501?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/charles-cooper",
    "html_url": "https://github.com/charles-cooper",
    "followers_url": "https://api.github.com/users/charles-cooper/followers",
    "following_url": "https://api.github.com/users/charles-cooper/following{/other_user}",
    "gists_url": "https://api.github.com/users/charles-cooper/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/charles-cooper/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/charles-cooper/subscriptions",
    "organizations_url": "https://api.github.com/users/charles-cooper/orgs",
    "repos_url": "https://api.github.com/users/charles-cooper/repos",
    "events_url": "https://api.github.com/users/charles-cooper/events{/privacy}",
    "received_events_url": "https://api.github.com/users/charles-cooper/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 5,
  "created_at": "2023-05-31T17:43:14Z",
  "updated_at": "2024-01-07T18:37:03Z",
  "closed_at": "2024-01-07T18:37:03Z",
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "## Simple Summary\r\nas title. require for statements like `for i: uint256 in [1, 2, 3]:` instead of `for i in [1, 2, 3]`\r\n\r\n(h/t to @trocher for suggesting this change to the language!)\r\n\r\n## Motivation\r\nloop variable type inference is one of the most complicated areas of the vyper type checker, taking up 150 loc (that is, 30%) of vyper/semantics/analysis/local.py: https://github.com/vyperlang/vyper/blob/7f18aeee59abbf3f4657edc94a8b354731cce19b/vyper/semantics/analysis/local.py#L336-L493\r\n\r\nbecause the compiler currently has to loop over all possible types for the loop variable, it\r\n\r\n- creates a performance issue for nested loops since we get a nested loop in the typechecker\r\n- many fixed and outstanding bugs in the typechecker have to do with loops, for instance just cherry-picking some recent issues, cf. #2772, #3212, #3443, #3441, #3429, #3374\r\n- a state journal had to be implemented in the typechecker because the loop variable inference routine depends on raising exceptions, which can result in invalid state inside the typechecker(!) (see #3318, #3375)\r\n- iterator type inference is still not intuitive, for instance both of the following functions actually revert at runtime due to the loop variable being inferred as `uint256` (thanks to @trocher for these examples):\r\n```vyper\r\n@external\r\ndef loo():\r\n    for x in [1, 2, 3]:\r\n        v: bool = x - 10 == 1  # x is uint256, safesub reverts\r\n\r\n@external\r\ndef foo():\r\n    for x in [1, 2, 3]:\r\n        a: int256 = convert(x - 100,int256)  # x is uint256, checked conversion reverts\r\n```\r\nthese above two examples could be fixed by attempting to (at compile-time) unroll the loop and fold in the loop variable, and reject types which result in folding failures. this would \"correctly\" (i.e., match the user's intuition) infer the type of `x` as `int256` in both of the above two cases. however, this would result in more complexity in the loop variable type inference routine, and would result in more runtime complexity as well.\r\n\r\nlastly, the fact that loop variables are currently not annotated is actually a peculiar outcome of [PEP526 - \"In addition, one cannot annotate variables used in a for or with statement\"](https://peps.python.org/pep-0526/#where-annotations-aren-t-allowed). i consider this to be a flaw in PEP484+PEP526 itself, as loop variables cannot be annotated in python without commented type hints.\r\n\r\nalso, while it might seem unfamiliar to users at first, from the point of view of vyper, the fact that loop variables are not annotated is inconsistent with all other vyper variables, which do not run into the same type inference issues (because they are all required to be annotated in the first place).\r\n\r\n## Specification\r\nrequire loop variables to be annotated.\r\n\r\nan implementation note: the fact that type annotations are not allowed for loop variables causes some issues for us at the syntactic level, but they can be worked around (e.g. by adding a preprocessing rule which converts `for i: uint256 in ..:` to some currently unused syntactic expression, ex. `for *(i, uint256) in ..:`, which can then be converted into a type annotation during conversion from python to vyper ast.\r\n\r\n## Backwards Compatibility\r\nthis is a breaking change.\r\n\r\n## Dependencies\r\nIf this VIP depends on any other VIPs being implemented, please mention them.\r\n\r\n## References\r\nAdd any references that this VIP might reference (other VIPs/issues, links to blog posts, etc.)\r\n\r\n## Copyright\r\nCopyright and related rights waived via [CC0](https://creativecommons.org/publicdomain/zero/1.0/)\r\n",
  "closed_by": {
    "login": "charles-cooper",
    "id": 3867501,
    "node_id": "MDQ6VXNlcjM4Njc1MDE=",
    "avatar_url": "https://avatars.githubusercontent.com/u/3867501?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/charles-cooper",
    "html_url": "https://github.com/charles-cooper",
    "followers_url": "https://api.github.com/users/charles-cooper/followers",
    "following_url": "https://api.github.com/users/charles-cooper/following{/other_user}",
    "gists_url": "https://api.github.com/users/charles-cooper/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/charles-cooper/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/charles-cooper/subscriptions",
    "organizations_url": "https://api.github.com/users/charles-cooper/orgs",
    "repos_url": "https://api.github.com/users/charles-cooper/repos",
    "events_url": "https://api.github.com/users/charles-cooper/events{/privacy}",
    "received_events_url": "https://api.github.com/users/charles-cooper/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/3475/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/vyperlang/vyper/issues/3475/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/1571195299",
    "html_url": "https://github.com/vyperlang/vyper/issues/3475#issuecomment-1571195299",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/3475",
    "id": 1571195299,
    "node_id": "IC_kwDOBGDvrM5dpomj",
    "user": {
      "login": "tserg",
      "id": 8017125,
      "node_id": "MDQ6VXNlcjgwMTcxMjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8017125?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tserg",
      "html_url": "https://github.com/tserg",
      "followers_url": "https://api.github.com/users/tserg/followers",
      "following_url": "https://api.github.com/users/tserg/following{/other_user}",
      "gists_url": "https://api.github.com/users/tserg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tserg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tserg/subscriptions",
      "organizations_url": "https://api.github.com/users/tserg/orgs",
      "repos_url": "https://api.github.com/users/tserg/repos",
      "events_url": "https://api.github.com/users/tserg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tserg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-06-01T01:36:25Z",
    "updated_at": "2023-06-01T01:37:17Z",
    "author_association": "CONTRIBUTOR",
    "body": "Do we want to consider disallowing literal lists if there is more than one possible type? This seems like a reasonable restriction given that one of vyper's goals is strong typing.\r\n\r\nInstead of the first snippet, we require users to do the latter:\r\n```\r\nfor i in [1, 2, 3]:\r\n    ...\r\n```\r\n```\r\nx: uint256[3] = [1, 2, 3]\r\nfor i in x:\r\n    ...\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/1571195299/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/1571268367",
    "html_url": "https://github.com/vyperlang/vyper/issues/3475#issuecomment-1571268367",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/3475",
    "id": 1571268367,
    "node_id": "IC_kwDOBGDvrM5dp6cP",
    "user": {
      "login": "fubuloubu",
      "id": 3859395,
      "node_id": "MDQ6VXNlcjM4NTkzOTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3859395?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fubuloubu",
      "html_url": "https://github.com/fubuloubu",
      "followers_url": "https://api.github.com/users/fubuloubu/followers",
      "following_url": "https://api.github.com/users/fubuloubu/following{/other_user}",
      "gists_url": "https://api.github.com/users/fubuloubu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fubuloubu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fubuloubu/subscriptions",
      "organizations_url": "https://api.github.com/users/fubuloubu/orgs",
      "repos_url": "https://api.github.com/users/fubuloubu/repos",
      "events_url": "https://api.github.com/users/fubuloubu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fubuloubu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-06-01T03:19:36Z",
    "updated_at": "2023-06-01T03:19:36Z",
    "author_association": "MEMBER",
    "body": "> Do we want to consider disallowing literal lists if there is more than one possible type? This seems like a reasonable restriction given that one of vyper's goals is strong typing.\r\n> \r\n> Instead of the first snippet, we require users to do the latter:\r\n> \r\n> ```\r\n> for i in [1, 2, 3]:\r\n>     ...\r\n> ```\r\n> \r\n> ```\r\n> x: uint256[3] = [1, 2, 3]\r\n> for i in x:\r\n>     ...\r\n> ```\r\n\r\nI think with the iterator variable finally having typing, we can forward propagate the type to the list literal",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/1571268367/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/1571280087",
    "html_url": "https://github.com/vyperlang/vyper/issues/3475#issuecomment-1571280087",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/3475",
    "id": 1571280087,
    "node_id": "IC_kwDOBGDvrM5dp9TX",
    "user": {
      "login": "tserg",
      "id": 8017125,
      "node_id": "MDQ6VXNlcjgwMTcxMjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8017125?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tserg",
      "html_url": "https://github.com/tserg",
      "followers_url": "https://api.github.com/users/tserg/followers",
      "following_url": "https://api.github.com/users/tserg/following{/other_user}",
      "gists_url": "https://api.github.com/users/tserg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tserg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tserg/subscriptions",
      "organizations_url": "https://api.github.com/users/tserg/orgs",
      "repos_url": "https://api.github.com/users/tserg/repos",
      "events_url": "https://api.github.com/users/tserg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tserg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-06-01T03:35:42Z",
    "updated_at": "2023-06-01T03:35:42Z",
    "author_association": "CONTRIBUTOR",
    "body": "> > Do we want to consider disallowing literal lists if there is more than one possible type? This seems like a reasonable restriction given that one of vyper's goals is strong typing.\r\n> > Instead of the first snippet, we require users to do the latter:\r\n> > ```\r\n> > for i in [1, 2, 3]:\r\n> >     ...\r\n> > ```\r\n> > \r\n> > \r\n> >     \r\n> >       \r\n> >     \r\n> > \r\n> >       \r\n> >     \r\n> > \r\n> >     \r\n> >   \r\n> > ```\r\n> > x: uint256[3] = [1, 2, 3]\r\n> > for i in x:\r\n> >     ...\r\n> > ```\r\n> \r\n> I think with the iterator variable finally having typing, we can forward propagate the type to the list literal\r\n\r\nI was thinking that between the two un-pythonic choices of (1) type annotation for the iterator variable in `for` statements; or (2) disallowing literal lists with more than one possible type in `for` statements, option (2) would be the lesser of the two evils.",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/1571280087/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/1572058479",
    "html_url": "https://github.com/vyperlang/vyper/issues/3475#issuecomment-1572058479",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/3475",
    "id": 1572058479,
    "node_id": "IC_kwDOBGDvrM5ds7Vv",
    "user": {
      "login": "charles-cooper",
      "id": 3867501,
      "node_id": "MDQ6VXNlcjM4Njc1MDE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3867501?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/charles-cooper",
      "html_url": "https://github.com/charles-cooper",
      "followers_url": "https://api.github.com/users/charles-cooper/followers",
      "following_url": "https://api.github.com/users/charles-cooper/following{/other_user}",
      "gists_url": "https://api.github.com/users/charles-cooper/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/charles-cooper/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/charles-cooper/subscriptions",
      "organizations_url": "https://api.github.com/users/charles-cooper/orgs",
      "repos_url": "https://api.github.com/users/charles-cooper/repos",
      "events_url": "https://api.github.com/users/charles-cooper/events{/privacy}",
      "received_events_url": "https://api.github.com/users/charles-cooper/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-06-01T13:30:23Z",
    "updated_at": "2023-06-01T13:30:54Z",
    "author_association": "MEMBER",
    "body": "> I was thinking that between the two un-pythonic choices of (1) type annotation for the iterator variable in for statements; or (2) disallowing literal lists with more than one possible type in for statements, option (2) would be the lesser of the two evils.\r\n\r\ni disagree. annotating iterator variables is simpler from a UX perspective. it also increases consistency of vyper's variable system, since iterator variables are currently the only variables in vyper that are not annotated, whereas, requiring lists used as an iterator to not be literals decreases vyper's internal consistency since is inconsistent with .. most of the rest of vyper, untyped list literals are almost always allowed including when the type is unspecified, e.x. `[1, 2, 3][2]`.",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/1572058479/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/1662229288",
    "html_url": "https://github.com/vyperlang/vyper/issues/3475#issuecomment-1662229288",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/3475",
    "id": 1662229288,
    "node_id": "IC_kwDOBGDvrM5jE5so",
    "user": {
      "login": "tserg",
      "id": 8017125,
      "node_id": "MDQ6VXNlcjgwMTcxMjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8017125?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tserg",
      "html_url": "https://github.com/tserg",
      "followers_url": "https://api.github.com/users/tserg/followers",
      "following_url": "https://api.github.com/users/tserg/following{/other_user}",
      "gists_url": "https://api.github.com/users/tserg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tserg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tserg/subscriptions",
      "organizations_url": "https://api.github.com/users/tserg/orgs",
      "repos_url": "https://api.github.com/users/tserg/repos",
      "events_url": "https://api.github.com/users/tserg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tserg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-08-02T13:36:45Z",
    "updated_at": "2023-08-02T13:36:45Z",
    "author_association": "CONTRIBUTOR",
    "body": "I have a sketch at this [PR](https://github.com/vyperlang/vyper/pull/3544) - during pre-parsing, we transform `for i: uint256 in ...` to a tuple in `for i, uint256 in ...`.",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/1662229288/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
