{
  "url": "https://api.github.com/repos/vyperlang/vyper/issues/3345",
  "repository_url": "https://api.github.com/repos/vyperlang/vyper",
  "labels_url": "https://api.github.com/repos/vyperlang/vyper/issues/3345/labels{/name}",
  "comments_url": "https://api.github.com/repos/vyperlang/vyper/issues/3345/comments",
  "events_url": "https://api.github.com/repos/vyperlang/vyper/issues/3345/events",
  "html_url": "https://github.com/vyperlang/vyper/issues/3345",
  "id": 1659573214,
  "node_id": "I_kwDOBGDvrM5i6xPe",
  "number": 3345,
  "title": "VIP: `__system__()` access to bytecode",
  "user": {
    "login": "charles-cooper",
    "id": 3867501,
    "node_id": "MDQ6VXNlcjM4Njc1MDE=",
    "avatar_url": "https://avatars.githubusercontent.com/u/3867501?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/charles-cooper",
    "html_url": "https://github.com/charles-cooper",
    "followers_url": "https://api.github.com/users/charles-cooper/followers",
    "following_url": "https://api.github.com/users/charles-cooper/following{/other_user}",
    "gists_url": "https://api.github.com/users/charles-cooper/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/charles-cooper/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/charles-cooper/subscriptions",
    "organizations_url": "https://api.github.com/users/charles-cooper/orgs",
    "repos_url": "https://api.github.com/users/charles-cooper/repos",
    "events_url": "https://api.github.com/users/charles-cooper/events{/privacy}",
    "received_events_url": "https://api.github.com/users/charles-cooper/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 3,
  "created_at": "2023-04-08T16:28:39Z",
  "updated_at": "2023-04-09T21:08:28Z",
  "closed_at": null,
  "author_association": "COLLABORATOR",
  "active_lock_reason": null,
  "body": "## Simple Summary\r\nAdd a dunder function `__system__(b\"...\")` to allow injecting bytecode directly into a contract.\r\n\r\n## Motivation\r\nDisallowing access to assembly/IR has been one of the design goals of Vyper from its beginnings. However, this is at odds with developers who want to access EVM functionality not provided by the language, or insert code optimized in a way which the compiler currently is not able to do. To address, this VIP proposes a `__system__()` dunder method which allows the user to inject literal bytecode into a contract.\r\n\r\nThe reasons this VIP proposes injection of bytecode rather than IR are:\r\n1. It makes it harder to use. Vyper should make easy things easy, and hard things hard. Presumably, only users who can generate bytecode in the first place would be able to use the feature.\r\n2. Our IR is not currently stable or documented, while EVM is a common denominator for EVM developers\r\n3. The user might want to optimize code in a way that the IR optimizer currently does not\r\n\r\nOne of the drawbacks of this is that it might require knowledge of the memory and stack layout to use. However, this barrier is in line with the motivation of only allowing users who \"really know what they are doing\" to use the feature.\r\n\r\n## Specification\r\ntbd\r\n\r\n## Backwards Compatibility\r\nAll VIPs that introduce backwards incompatibilities must include a section describing these incompatibilities and their severity. The VIP must explain how the author proposes to deal with these incompatibilities.\r\n\r\n## Dependencies\r\nIf this VIP depends on any other VIPs being implemented, please mention them.\r\n\r\n## References\r\nAdd any references that this VIP might reference (other VIPs/issues, links to blog posts, etc.)\r\n\r\n## Copyright\r\nCopyright and related rights waived via [CC0](https://creativecommons.org/publicdomain/zero/1.0/)\r\n",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/3345/reactions",
    "total_count": 2,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 2,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/vyperlang/vyper/issues/3345/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/1501170820",
    "html_url": "https://github.com/vyperlang/vyper/issues/3345#issuecomment-1501170820",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/3345",
    "id": 1501170820,
    "node_id": "IC_kwDOBGDvrM5ZegyE",
    "user": {
      "login": "sambacha",
      "id": 32783916,
      "node_id": "MDQ6VXNlcjMyNzgzOTE2",
      "avatar_url": "https://avatars.githubusercontent.com/u/32783916?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sambacha",
      "html_url": "https://github.com/sambacha",
      "followers_url": "https://api.github.com/users/sambacha/followers",
      "following_url": "https://api.github.com/users/sambacha/following{/other_user}",
      "gists_url": "https://api.github.com/users/sambacha/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sambacha/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sambacha/subscriptions",
      "organizations_url": "https://api.github.com/users/sambacha/orgs",
      "repos_url": "https://api.github.com/users/sambacha/repos",
      "events_url": "https://api.github.com/users/sambacha/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sambacha/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-04-09T17:01:48Z",
    "updated_at": "2023-04-09T17:01:48Z",
    "author_association": "CONTRIBUTOR",
    "body": "Hell yes bossman is back",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/1501170820/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/1501174913",
    "html_url": "https://github.com/vyperlang/vyper/issues/3345#issuecomment-1501174913",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/3345",
    "id": 1501174913,
    "node_id": "IC_kwDOBGDvrM5ZehyB",
    "user": {
      "login": "scherrey",
      "id": 878591,
      "node_id": "MDQ6VXNlcjg3ODU5MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/878591?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/scherrey",
      "html_url": "https://github.com/scherrey",
      "followers_url": "https://api.github.com/users/scherrey/followers",
      "following_url": "https://api.github.com/users/scherrey/following{/other_user}",
      "gists_url": "https://api.github.com/users/scherrey/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/scherrey/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/scherrey/subscriptions",
      "organizations_url": "https://api.github.com/users/scherrey/orgs",
      "repos_url": "https://api.github.com/users/scherrey/repos",
      "events_url": "https://api.github.com/users/scherrey/events{/privacy}",
      "received_events_url": "https://api.github.com/users/scherrey/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-04-09T17:22:02Z",
    "updated_at": "2023-04-09T17:22:38Z",
    "author_association": "NONE",
    "body": "I like having this option. I would, however, like to be able to bring that bytecode in from somewhere else like an include file because I would likely generate any bytecode from an assembler so I would be more confident in its correctness. So my build process would be to compile my asm code, send the hex output into another file, include that hex file into my `__system__` invocation. ",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/1501174913/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/1501214344",
    "html_url": "https://github.com/vyperlang/vyper/issues/3345#issuecomment-1501214344",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/3345",
    "id": 1501214344,
    "node_id": "IC_kwDOBGDvrM5ZeraI",
    "user": {
      "login": "fubuloubu",
      "id": 3859395,
      "node_id": "MDQ6VXNlcjM4NTkzOTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3859395?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fubuloubu",
      "html_url": "https://github.com/fubuloubu",
      "followers_url": "https://api.github.com/users/fubuloubu/followers",
      "following_url": "https://api.github.com/users/fubuloubu/following{/other_user}",
      "gists_url": "https://api.github.com/users/fubuloubu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fubuloubu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fubuloubu/subscriptions",
      "organizations_url": "https://api.github.com/users/fubuloubu/orgs",
      "repos_url": "https://api.github.com/users/fubuloubu/repos",
      "events_url": "https://api.github.com/users/fubuloubu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fubuloubu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-04-09T21:08:28Z",
    "updated_at": "2023-04-09T21:08:28Z",
    "author_association": "MEMBER",
    "body": "> I like having this option. I would, however, like to be able to bring that bytecode in from somewhere else like an include file because I would likely generate any bytecode from an assembler so I would be more confident in its correctness. So my build process would be to compile my asm code, send the hex output into another file, include that hex file into my `__system__` invocation. \n\nYou could probably just use regexp replace",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/1501214344/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
