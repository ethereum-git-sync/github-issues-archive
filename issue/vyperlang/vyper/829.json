{
  "url": "https://api.github.com/repos/vyperlang/vyper/issues/829",
  "repository_url": "https://api.github.com/repos/vyperlang/vyper",
  "labels_url": "https://api.github.com/repos/vyperlang/vyper/issues/829/labels{/name}",
  "comments_url": "https://api.github.com/repos/vyperlang/vyper/issues/829/comments",
  "events_url": "https://api.github.com/repos/vyperlang/vyper/issues/829/events",
  "html_url": "https://github.com/vyperlang/vyper/issues/829",
  "id": 324716007,
  "node_id": "MDU6SXNzdWUzMjQ3MTYwMDc=",
  "number": 829,
  "title": "VIP: Disallow sending eth to 0x0",
  "user": {
    "login": "ben-kaufman",
    "id": 10667901,
    "node_id": "MDQ6VXNlcjEwNjY3OTAx",
    "avatar_url": "https://avatars.githubusercontent.com/u/10667901?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/ben-kaufman",
    "html_url": "https://github.com/ben-kaufman",
    "followers_url": "https://api.github.com/users/ben-kaufman/followers",
    "following_url": "https://api.github.com/users/ben-kaufman/following{/other_user}",
    "gists_url": "https://api.github.com/users/ben-kaufman/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/ben-kaufman/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/ben-kaufman/subscriptions",
    "organizations_url": "https://api.github.com/users/ben-kaufman/orgs",
    "repos_url": "https://api.github.com/users/ben-kaufman/repos",
    "events_url": "https://api.github.com/users/ben-kaufman/events{/privacy}",
    "received_events_url": "https://api.github.com/users/ben-kaufman/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 751622094,
      "node_id": "MDU6TGFiZWw3NTE2MjIwOTQ=",
      "url": "https://api.github.com/repos/vyperlang/vyper/labels/VIP:%20Discussion",
      "name": "VIP: Discussion",
      "color": "000000",
      "default": false,
      "description": "Used to denote VIPs and more complex issues that are waiting discussion in a meeting"
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 14,
  "created_at": "2018-05-20T15:03:39Z",
  "updated_at": "2019-08-08T16:08:20Z",
  "closed_at": null,
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "## Preamble\r\n\r\n    VIP: 829\r\n    Title: Disallow sending eth to 0x0\r\n    Author: Ben Kaufman\r\n    Type: Standard Track\r\n    Status: Draft\r\n    Created: 2018-05-20\r\n\r\n\r\n## Simple Summary\r\nDisallow sending eth to 0x0, either by default or with a new function.\r\n\r\n## Abstract\r\nDisallow sending eth to 0x0, either by default or with a new function.\r\n\r\n## Motivation\r\nIn order to minimize the risk for ETH to get stuck, we should consider blocking sends to the 0x0 address.\r\n\r\n## Specification\r\nWe can either do this by disabling it by default or by adding a ``safe_send`` function.\r\n\r\n## Backwards Compatibility\r\nThis might be incompatible with cases which explicitly want to send ETH to 0x0, but it also might be compatible, depends on the implementation.\r\n\r\n## Copyright\r\nCopyright and related rights waived via [CC0](https://creativecommons.org/publicdomain/zero/1.0/)\r\n\r\n#### Cute Animal Picture\r\n\r\n![image](https://user-images.githubusercontent.com/10667901/40280156-fdd25b4a-5c57-11e8-925b-3bc69f0fd955.png)\r\n\r\n",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/829/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/vyperlang/vyper/issues/829/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/390491383",
    "html_url": "https://github.com/vyperlang/vyper/issues/829#issuecomment-390491383",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/829",
    "id": 390491383,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5MDQ5MTM4Mw==",
    "user": {
      "login": "fubuloubu",
      "id": 3859395,
      "node_id": "MDQ6VXNlcjM4NTkzOTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3859395?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fubuloubu",
      "html_url": "https://github.com/fubuloubu",
      "followers_url": "https://api.github.com/users/fubuloubu/followers",
      "following_url": "https://api.github.com/users/fubuloubu/following{/other_user}",
      "gists_url": "https://api.github.com/users/fubuloubu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fubuloubu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fubuloubu/subscriptions",
      "organizations_url": "https://api.github.com/users/fubuloubu/orgs",
      "repos_url": "https://api.github.com/users/fubuloubu/repos",
      "events_url": "https://api.github.com/users/fubuloubu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fubuloubu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-20T15:43:42Z",
    "updated_at": "2018-05-20T18:47:36Z",
    "author_association": "MEMBER",
    "body": "I think in all scenarios this guard would operate against (as a compile time check), you would have to explicitly state the 0x0000....0000 as the recipient of the ether. If you are writing it out, I would think you might know why you're doing it and you should be allowed to burn your funds if you know you're doing it.\r\n\r\nWhat is probably the concern here is uninitialized storage variables, which is very likely to allow you to do that unintentionally. To solve for this, we could add a run-time check against a zero address setting for sending ether. My question is why stop there? Tokens are valuable too, so is ownership. I don't think we could include all patterns where you would get burned.\r\n\r\nMy counterproposal is that all loads and stores to an address storage variable cannot be `0x0000....0000`.  This sounds draconian but I think it could be considered reasonable if you think of that address as \"special\", which it is, since that is the contract creation address. One modification that would need to take place to enable this would be changing to a specific burn address, something that would could enable as a compiler macro to a standard burn address e.g. `BURN_ADDRESS = 0xFFFF....FFFF`.\r\n\r\nThoughts?",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/390491383/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/390593723",
    "html_url": "https://github.com/vyperlang/vyper/issues/829#issuecomment-390593723",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/829",
    "id": 390593723,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5MDU5MzcyMw==",
    "user": {
      "login": "ben-kaufman",
      "id": 10667901,
      "node_id": "MDQ6VXNlcjEwNjY3OTAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/10667901?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ben-kaufman",
      "html_url": "https://github.com/ben-kaufman",
      "followers_url": "https://api.github.com/users/ben-kaufman/followers",
      "following_url": "https://api.github.com/users/ben-kaufman/following{/other_user}",
      "gists_url": "https://api.github.com/users/ben-kaufman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ben-kaufman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ben-kaufman/subscriptions",
      "organizations_url": "https://api.github.com/users/ben-kaufman/orgs",
      "repos_url": "https://api.github.com/users/ben-kaufman/repos",
      "events_url": "https://api.github.com/users/ben-kaufman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ben-kaufman/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-21T08:51:27Z",
    "updated_at": "2018-05-21T08:51:27Z",
    "author_association": "CONTRIBUTOR",
    "body": "Sounds good, I think this can work pretty good.",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/390593723/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/391228109",
    "html_url": "https://github.com/vyperlang/vyper/issues/829#issuecomment-391228109",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/829",
    "id": 391228109,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5MTIyODEwOQ==",
    "user": {
      "login": "dani-jozsef",
      "id": 6108136,
      "node_id": "MDQ6VXNlcjYxMDgxMzY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6108136?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dani-jozsef",
      "html_url": "https://github.com/dani-jozsef",
      "followers_url": "https://api.github.com/users/dani-jozsef/followers",
      "following_url": "https://api.github.com/users/dani-jozsef/following{/other_user}",
      "gists_url": "https://api.github.com/users/dani-jozsef/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dani-jozsef/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dani-jozsef/subscriptions",
      "organizations_url": "https://api.github.com/users/dani-jozsef/orgs",
      "repos_url": "https://api.github.com/users/dani-jozsef/repos",
      "events_url": "https://api.github.com/users/dani-jozsef/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dani-jozsef/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-23T05:49:09Z",
    "updated_at": "2018-05-23T05:50:34Z",
    "author_association": "NONE",
    "body": "So... if I try to access an uninitialized address storage variable, eg. through a mapping, the transaction is reverted? Now that's okay for transactions I guess, but kinda painful for calls. Note how we don't really have try/catch... Also, calls and transactions behaving differently is bad and possibly impossible.\r\n\r\nReally trying to make sense of this... I mean, for the most part, when accessing a mapping, we already do a check whether it's set, and revert if it isn't. But without try/catch, it will be impossible to tell if a certain mapping is initialized or not. If it's not, the function call will fail.\r\n\r\nAdd to that that Ethereum error messages are, in general, good to wipe our asses with, this sounds like a developer's nightmare. Not sure, but it strikes me as a bad thing.",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/391228109/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/391315972",
    "html_url": "https://github.com/vyperlang/vyper/issues/829#issuecomment-391315972",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/829",
    "id": 391315972,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5MTMxNTk3Mg==",
    "user": {
      "login": "fubuloubu",
      "id": 3859395,
      "node_id": "MDQ6VXNlcjM4NTkzOTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3859395?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fubuloubu",
      "html_url": "https://github.com/fubuloubu",
      "followers_url": "https://api.github.com/users/fubuloubu/followers",
      "following_url": "https://api.github.com/users/fubuloubu/following{/other_user}",
      "gists_url": "https://api.github.com/users/fubuloubu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fubuloubu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fubuloubu/subscriptions",
      "organizations_url": "https://api.github.com/users/fubuloubu/orgs",
      "repos_url": "https://api.github.com/users/fubuloubu/repos",
      "events_url": "https://api.github.com/users/fubuloubu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fubuloubu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-23T11:38:55Z",
    "updated_at": "2018-05-23T11:38:55Z",
    "author_association": "MEMBER",
    "body": "@daniel-jozsef a call is the same thing as a transaction, except it is only executed locally and not broadcast to the network. If you execute a state-modifying call that relies on information in the modified state during the call, the call will still be executed exactly the same as if it were a transaction.\r\n\r\nThe point being this suggestion would not operate any differently on call vs. transaction, that would not be helpful just as you have summarized.",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/391315972/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/393511470",
    "html_url": "https://github.com/vyperlang/vyper/issues/829#issuecomment-393511470",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/829",
    "id": 393511470,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5MzUxMTQ3MA==",
    "user": {
      "login": "dani-jozsef",
      "id": 6108136,
      "node_id": "MDQ6VXNlcjYxMDgxMzY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6108136?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dani-jozsef",
      "html_url": "https://github.com/dani-jozsef",
      "followers_url": "https://api.github.com/users/dani-jozsef/followers",
      "following_url": "https://api.github.com/users/dani-jozsef/following{/other_user}",
      "gists_url": "https://api.github.com/users/dani-jozsef/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dani-jozsef/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dani-jozsef/subscriptions",
      "organizations_url": "https://api.github.com/users/dani-jozsef/orgs",
      "repos_url": "https://api.github.com/users/dani-jozsef/repos",
      "events_url": "https://api.github.com/users/dani-jozsef/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dani-jozsef/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-31T12:17:18Z",
    "updated_at": "2018-05-31T12:30:18Z",
    "author_association": "NONE",
    "body": "Yes, it's not even really about calls vs. transactions... It's about getting errors (opaque errors, due to horrible Ethereum error handling) from trying to access unset mappings. Which is horrible. Mappings to addresses would have to be changed to mappings to {address, bool} structs, doubling storage costs.\r\n\r\nI'm very much against this idea. The damage done by it would overshadow any potential gains by a huge margin. Instead we should focus on educating people about safe asset handling.",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/393511470/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/393539563",
    "html_url": "https://github.com/vyperlang/vyper/issues/829#issuecomment-393539563",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/829",
    "id": 393539563,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5MzUzOTU2Mw==",
    "user": {
      "login": "fubuloubu",
      "id": 3859395,
      "node_id": "MDQ6VXNlcjM4NTkzOTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3859395?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fubuloubu",
      "html_url": "https://github.com/fubuloubu",
      "followers_url": "https://api.github.com/users/fubuloubu/followers",
      "following_url": "https://api.github.com/users/fubuloubu/following{/other_user}",
      "gists_url": "https://api.github.com/users/fubuloubu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fubuloubu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fubuloubu/subscriptions",
      "organizations_url": "https://api.github.com/users/fubuloubu/orgs",
      "repos_url": "https://api.github.com/users/fubuloubu/repos",
      "events_url": "https://api.github.com/users/fubuloubu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fubuloubu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-31T13:59:51Z",
    "updated_at": "2018-05-31T13:59:51Z",
    "author_association": "MEMBER",
    "body": "I'm not sure I understand where you get \"mappings to addresses would have to be changed to mappings to {address, book} structs\". Could you explain further?\r\n\r\nAs far as I understand your concern, that is not the suggestion here. The suggestion is that attempting to read an address storage variable would throw an exception, so that any use in calls (either as the destination address or as an argument) would fail for uninitialized variables.\r\n\r\n\"Education\" is the lowest impact, highest resource solution to a problem like this. If you have to educate people to prevent them from constantly making a mistake, then you've failed to design robust software.",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/393539563/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/393561917",
    "html_url": "https://github.com/vyperlang/vyper/issues/829#issuecomment-393561917",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/829",
    "id": 393561917,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5MzU2MTkxNw==",
    "user": {
      "login": "dani-jozsef",
      "id": 6108136,
      "node_id": "MDQ6VXNlcjYxMDgxMzY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6108136?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dani-jozsef",
      "html_url": "https://github.com/dani-jozsef",
      "followers_url": "https://api.github.com/users/dani-jozsef/followers",
      "following_url": "https://api.github.com/users/dani-jozsef/following{/other_user}",
      "gists_url": "https://api.github.com/users/dani-jozsef/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dani-jozsef/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dani-jozsef/subscriptions",
      "organizations_url": "https://api.github.com/users/dani-jozsef/orgs",
      "repos_url": "https://api.github.com/users/dani-jozsef/repos",
      "events_url": "https://api.github.com/users/dani-jozsef/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dani-jozsef/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-31T15:07:33Z",
    "updated_at": "2018-05-31T15:09:50Z",
    "author_association": "NONE",
    "body": "> As far as I understand your concern, that is not the suggestion here. The suggestion is that attempting to read an address storage variable would throw an exception\r\n\r\nThat IS my concern.\r\n\r\n> I'm not sure I understand where you get \"mappings to addresses would have to be changed to mappings to {address, book} structs\". Could you explain further?\r\n\r\nOkay... So, for a very simple example, say you have a mapping from address to address, for an optional custodian address for each user address.\r\n\r\nCurrently, retrieving funds would look like this in pseudocode:\r\n\r\n1. Get custodian address from mapping for msg.sender.\r\n2. If set, forward Ether to custodian address.\r\n3. If not set (== 0), forward Ether to msg.sender.\r\n\r\nWith the modification, it would have to look like this:\r\n\r\n1. Get isSet boolean from mapping for msg.sender.\r\n2. If isSet == true:\r\n2.1. Get custodian address from mapping for msg.sender.\r\n2.2. Forward Ether to custodian address.\r\n2.3. Return\r\n3. If isSet == false, forward Ether to msg.sender.\r\n\r\nI guess I could live with it, but we should at least think about the implications. Especially since try/catch doesn't exist. We don't have \"exceptions\", we have reverts. And a revert is a final, unrecoverable, and opaque error.",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/393561917/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/393580125",
    "html_url": "https://github.com/vyperlang/vyper/issues/829#issuecomment-393580125",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/829",
    "id": 393580125,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5MzU4MDEyNQ==",
    "user": {
      "login": "fubuloubu",
      "id": 3859395,
      "node_id": "MDQ6VXNlcjM4NTkzOTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3859395?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fubuloubu",
      "html_url": "https://github.com/fubuloubu",
      "followers_url": "https://api.github.com/users/fubuloubu/followers",
      "following_url": "https://api.github.com/users/fubuloubu/following{/other_user}",
      "gists_url": "https://api.github.com/users/fubuloubu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fubuloubu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fubuloubu/subscriptions",
      "organizations_url": "https://api.github.com/users/fubuloubu/orgs",
      "repos_url": "https://api.github.com/users/fubuloubu/repos",
      "events_url": "https://api.github.com/users/fubuloubu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fubuloubu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-31T15:56:20Z",
    "updated_at": "2018-05-31T15:56:20Z",
    "author_association": "MEMBER",
    "body": "Oh, it would work like this:\r\n1. You try a call to forward Ether to the custodian, it fails. You wonder why...\r\n2. You remember you need to set a custodian, so you set a custodian\r\n3. You successfully make a call to forward Ether to the custodian, so you broadcast that as a transaction to the network.\r\n\r\nCurrently, 1. would succeed and all your money would be gone because you forgot to set the custodian. You would need a Boolean in the **current** use case to know it was set. In the suggestion, this would not occur, the worst case scenario is you loose your gas money for forgetting to set the address as well as broadcasting it to the network without checking first.\r\n\r\nThis is why many ERC20 implemetations check for non-zero address on `transfer`, which is another example of this behavior, although it doesn't use a storage variable.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/393580125/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/393833634",
    "html_url": "https://github.com/vyperlang/vyper/issues/829#issuecomment-393833634",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/829",
    "id": 393833634,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5MzgzMzYzNA==",
    "user": {
      "login": "dani-jozsef",
      "id": 6108136,
      "node_id": "MDQ6VXNlcjYxMDgxMzY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6108136?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dani-jozsef",
      "html_url": "https://github.com/dani-jozsef",
      "followers_url": "https://api.github.com/users/dani-jozsef/followers",
      "following_url": "https://api.github.com/users/dani-jozsef/following{/other_user}",
      "gists_url": "https://api.github.com/users/dani-jozsef/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dani-jozsef/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dani-jozsef/subscriptions",
      "organizations_url": "https://api.github.com/users/dani-jozsef/orgs",
      "repos_url": "https://api.github.com/users/dani-jozsef/repos",
      "events_url": "https://api.github.com/users/dani-jozsef/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dani-jozsef/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-06-01T09:56:58Z",
    "updated_at": "2018-06-01T10:07:30Z",
    "author_association": "NONE",
    "body": "> Currently, 1. would succeed and all your money would be gone because you forgot to set the custodian.\r\n\r\nNot if the smart contract was written by someone with more than two brain cells. :) (And you did read the code, right? RIGHT? :D)\r\n\r\n> the worst case scenario is you loose your gas money for forgetting to set the address as well as broadcasting it to the network without checking first.\r\n\r\nThat's a pretty bad scenario. Especially in a time-critical application such as an ICO sale.\r\n\r\n> This is why many ERC20 implemetations check for non-zero address on transfer\r\n\r\nThat's actually a pretty good practice. My problem is with storage access catastrophically failing based on the value of the storage. But as I said, I can live with it if it's justified... But it would be nice to hear more thoughts on it. How about airing the question on ethresear.ch?",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/393833634/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/393897255",
    "html_url": "https://github.com/vyperlang/vyper/issues/829#issuecomment-393897255",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/829",
    "id": 393897255,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5Mzg5NzI1NQ==",
    "user": {
      "login": "fubuloubu",
      "id": 3859395,
      "node_id": "MDQ6VXNlcjM4NTkzOTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3859395?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fubuloubu",
      "html_url": "https://github.com/fubuloubu",
      "followers_url": "https://api.github.com/users/fubuloubu/followers",
      "following_url": "https://api.github.com/users/fubuloubu/following{/other_user}",
      "gists_url": "https://api.github.com/users/fubuloubu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fubuloubu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fubuloubu/subscriptions",
      "organizations_url": "https://api.github.com/users/fubuloubu/orgs",
      "repos_url": "https://api.github.com/users/fubuloubu/repos",
      "events_url": "https://api.github.com/users/fubuloubu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fubuloubu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-06-01T14:26:26Z",
    "updated_at": "2018-06-01T14:48:02Z",
    "author_association": "MEMBER",
    "body": "Let me counter with a question: what use cases are there for reading a storage variable with a zero address setting other than 1) checking that it is not zero (which would revert anyways) or 2) sending to a burn address?\r\n\r\n\r\n\r\n>> Currently, 1. would succeed and all your money would be gone because you forgot to set the custodian.\r\n\r\n> Not if the smart contract was written by someone with more than two brain cells. :) (And you did read the code, right? RIGHT? :D)\r\n\r\nThis is basically having to manually code in `assert send_addr != 0x0` every time you do it (checking if non-zero)\r\n\r\n>> the worst case scenario is you loose your gas money for forgetting to set the address as well as broadcasting it to the network without checking first.\r\n\r\n> That's a pretty bad scenario. Especially in a time-critical application such as an ICO sale.\r\n\r\nIt's better than losing tons of money. An ICO contract should probably not be programmed this way in the first place.\r\n\r\n>> This is why many ERC20 implemetations check for non-zero address on transfer\r\n\r\n> That's actually a pretty good practice. My problem is with storage access catastrophically failing based on the value of the storage\r\n\r\nExactly, this falls under 1) check that it is not zero (again, so you don't lose your money)\r\n\r\n---\r\n\r\nThinking about this more, I think it is not correct to add this implicit functionality for precisely the opposite reason you suggest, the functionality should be forced to be coded into every contract by throwing a compiler error or warning. If you're not doing zero address checks (which revert \"catastrophically\" as you said), then you're not programming it correctly and we should tell you about that.\r\n\r\nFor auditability's sake, forcing to have this appear in the code is clearer than handling it implicitly.",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/393897255/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/394997388",
    "html_url": "https://github.com/vyperlang/vyper/issues/829#issuecomment-394997388",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/829",
    "id": 394997388,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5NDk5NzM4OA==",
    "user": {
      "login": "dani-jozsef",
      "id": 6108136,
      "node_id": "MDQ6VXNlcjYxMDgxMzY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6108136?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dani-jozsef",
      "html_url": "https://github.com/dani-jozsef",
      "followers_url": "https://api.github.com/users/dani-jozsef/followers",
      "following_url": "https://api.github.com/users/dani-jozsef/following{/other_user}",
      "gists_url": "https://api.github.com/users/dani-jozsef/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dani-jozsef/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dani-jozsef/subscriptions",
      "organizations_url": "https://api.github.com/users/dani-jozsef/orgs",
      "repos_url": "https://api.github.com/users/dani-jozsef/repos",
      "events_url": "https://api.github.com/users/dani-jozsef/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dani-jozsef/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-06-06T09:01:00Z",
    "updated_at": "2018-06-06T10:24:05Z",
    "author_association": "NONE",
    "body": "> checking that it is not zero (which would revert anyways)\r\n\r\nI gave a real-world example for a case when you check if it's zero, and DO NOT revert if it is (but instead do some arbitrary behavior as the contract logic demands).\r\n\r\nBut here's another use case, probably better than the previous one: conqueror game, you can conquer unowned parts of a map, or cryptokitties, or whatever. You check if an asset's owner is `0x0`, and if it _is_, then you don't revert, but rather allow `msg.sender` to become the owner. You revert if it's _not_ unset (ie. the asset is already owned).\r\n\r\nAnother one, say there's a contract with a number of roles defined (for purposes of authorization, event indexing, etc.) Each of these roles can be given to a signing address. Some might be optional. Logic might look like \"once the chancellor has created a new decree, if there is no ombudsman, the monarch can sign it at once, but if the ombudsman role is set (not `0x0`), they need to sign it first before it is passed on for royal review\".\r\n\r\nHow would you do that with your solution? You'd need two variables for each role (as I said a `bool` and an `address`), which only complicates the contract, reduces readability, and makes it more error prone.\r\n\r\n_ps. Your core fallacy in this debate is assuming that an address in a smart contract is primarily stored for reasons of sending assets to that address. In my opinion, that overlooks all but the most simplistic and primitive contract use cases._",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/394997388/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/395000052",
    "html_url": "https://github.com/vyperlang/vyper/issues/829#issuecomment-395000052",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/829",
    "id": 395000052,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5NTAwMDA1Mg==",
    "user": {
      "login": "ben-kaufman",
      "id": 10667901,
      "node_id": "MDQ6VXNlcjEwNjY3OTAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/10667901?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ben-kaufman",
      "html_url": "https://github.com/ben-kaufman",
      "followers_url": "https://api.github.com/users/ben-kaufman/followers",
      "following_url": "https://api.github.com/users/ben-kaufman/following{/other_user}",
      "gists_url": "https://api.github.com/users/ben-kaufman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ben-kaufman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ben-kaufman/subscriptions",
      "organizations_url": "https://api.github.com/users/ben-kaufman/orgs",
      "repos_url": "https://api.github.com/users/ben-kaufman/repos",
      "events_url": "https://api.github.com/users/ben-kaufman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ben-kaufman/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-06-06T09:08:40Z",
    "updated_at": "2018-06-06T09:08:40Z",
    "author_association": "CONTRIBUTOR",
    "body": "@daniel-jozsef I’m not sure about the rest of the conversation here but that’s not what the VIP is about.\n What I meant here was disallowing sending ETH to the 0x0 address. It’s just to make it harder to accidentally burn ETH.\nAccording to my suggestion your example will still be completely valid one. But if you try to send ETH to an unset (0x0) land owner this will fail.\nOf course there are lots of important use cases for the 0x0 address but very little ones which require sending it ETH.\n\n<sub>Sent with <a href=\"http://githawk.com\">GitHawk</a></sub>",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/395000052/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/395000783",
    "html_url": "https://github.com/vyperlang/vyper/issues/829#issuecomment-395000783",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/829",
    "id": 395000783,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5NTAwMDc4Mw==",
    "user": {
      "login": "dani-jozsef",
      "id": 6108136,
      "node_id": "MDQ6VXNlcjYxMDgxMzY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6108136?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dani-jozsef",
      "html_url": "https://github.com/dani-jozsef",
      "followers_url": "https://api.github.com/users/dani-jozsef/followers",
      "following_url": "https://api.github.com/users/dani-jozsef/following{/other_user}",
      "gists_url": "https://api.github.com/users/dani-jozsef/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dani-jozsef/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dani-jozsef/subscriptions",
      "organizations_url": "https://api.github.com/users/dani-jozsef/orgs",
      "repos_url": "https://api.github.com/users/dani-jozsef/repos",
      "events_url": "https://api.github.com/users/dani-jozsef/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dani-jozsef/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-06-06T09:10:52Z",
    "updated_at": "2018-06-06T09:10:52Z",
    "author_association": "NONE",
    "body": ">  I’m not sure about the rest of the conversation here but that’s not what the VIP is about.\r\n\r\nPlease read the rest of the conversation. @fubuloubu said that your VIP is kinda pointless as value can be lost to `0x0` in ways other than sending Ether, so instead we should _revert upon reading from_ address storage fields that have `0x0` as their value.\r\n\r\nYour VIP is quite inoffensive, though I'm not entirely sure if it's warranted in this implicit fashion.",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/395000783/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/395119183",
    "html_url": "https://github.com/vyperlang/vyper/issues/829#issuecomment-395119183",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/829",
    "id": 395119183,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5NTExOTE4Mw==",
    "user": {
      "login": "fubuloubu",
      "id": 3859395,
      "node_id": "MDQ6VXNlcjM4NTkzOTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3859395?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fubuloubu",
      "html_url": "https://github.com/fubuloubu",
      "followers_url": "https://api.github.com/users/fubuloubu/followers",
      "following_url": "https://api.github.com/users/fubuloubu/following{/other_user}",
      "gists_url": "https://api.github.com/users/fubuloubu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fubuloubu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fubuloubu/subscriptions",
      "organizations_url": "https://api.github.com/users/fubuloubu/orgs",
      "repos_url": "https://api.github.com/users/fubuloubu/repos",
      "events_url": "https://api.github.com/users/fubuloubu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fubuloubu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-06-06T15:52:28Z",
    "updated_at": "2018-06-06T15:54:15Z",
    "author_association": "MEMBER",
    "body": "@daniel-jozsef I wouldn't say pointless as Ether is the only protocol layer asset and is therefore much harder to recover as it requires a hard fork or a change in the process for handling ETH (e.g. EIP 867) to give other options for handling a loss. I think disallowing sends to 0x0 is good because someone could forget to populate a method input argument and if the designer didn't guard against that... bye bye ETH. This could arguably be handled as a Warning instead, asking the designer to design in a check for this if it is possible in their code design.\r\n\r\nThe implicitness of the approach of this VIP was something I was trying to build a more general case for, there are plenty of other assets where transferring to 0x0 may or may not be unintended behavior. I think the easiest solution to this is a Warning that an ETH `send()`, `raw_call`, or interface call to another account with `0x0` as an argument is potentially dangerous, and supply a compiler variable `BURN_ADDRESS` for designer use that is non-zero, so they can design in explicit burning flows that won't trigger the warning.\r\n\r\nI had some other way around the behavior you had suggested, but I think you're right in that it is needlessly complicated and probably error-prone at some point, hence the Warning suggestion is probably the best solution to protect developers from themselves. We should still probably revert if sending ETH to 0x0 in this case, especially since we'll have this `BURN_ADDRESS` variable to use instead.",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/395119183/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
