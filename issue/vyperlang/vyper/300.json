{
  "url": "https://api.github.com/repos/vyperlang/vyper/issues/300",
  "repository_url": "https://api.github.com/repos/vyperlang/vyper",
  "labels_url": "https://api.github.com/repos/vyperlang/vyper/issues/300/labels{/name}",
  "comments_url": "https://api.github.com/repos/vyperlang/vyper/issues/300/comments",
  "events_url": "https://api.github.com/repos/vyperlang/vyper/issues/300/events",
  "html_url": "https://github.com/vyperlang/vyper/issues/300",
  "id": 246553585,
  "node_id": "MDU6SXNzdWUyNDY1NTM1ODU=",
  "number": 300,
  "title": "VIP: Named Structs",
  "user": {
    "login": "fubuloubu",
    "id": 3859395,
    "node_id": "MDQ6VXNlcjM4NTkzOTU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/3859395?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/fubuloubu",
    "html_url": "https://github.com/fubuloubu",
    "followers_url": "https://api.github.com/users/fubuloubu/followers",
    "following_url": "https://api.github.com/users/fubuloubu/following{/other_user}",
    "gists_url": "https://api.github.com/users/fubuloubu/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/fubuloubu/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/fubuloubu/subscriptions",
    "organizations_url": "https://api.github.com/users/fubuloubu/orgs",
    "repos_url": "https://api.github.com/users/fubuloubu/repos",
    "events_url": "https://api.github.com/users/fubuloubu/events{/privacy}",
    "received_events_url": "https://api.github.com/users/fubuloubu/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 751622094,
      "node_id": "MDU6TGFiZWw3NTE2MjIwOTQ=",
      "url": "https://api.github.com/repos/vyperlang/vyper/labels/VIP:%20Discussion",
      "name": "VIP: Discussion",
      "color": "000000",
      "default": false,
      "description": "Used to denote VIPs and more complex issues that are waiting discussion in a meeting"
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 22,
  "created_at": "2017-07-30T00:24:26Z",
  "updated_at": "2019-02-06T15:57:03Z",
  "closed_at": "2019-01-03T16:04:03Z",
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "## Simple Summary\r\nAdd the ability to define custom structure types with a given alias\r\n\r\n## Motivation\r\nContract writers often work with structures very extensively. It is very helpful to be able to give commonly-used structure types a reference so that they can be used in many places. Without this functionality, it would not be possible to write clear, efficient contracts for things like Plasma.\r\n\r\n## Specification\r\nThe clearest specification we have come up with would be to adopt this syntax for defining structs (from: https://github.com/ethereum/vyper/issues/300#issuecomment-431570905):\r\n```python\r\nstruct MyStruct:\r\n    x: address\r\n    y: bytes32\r\n```\r\nThis new type would be available only at compile time for use in both defining globals and assigning to globals as follows:\r\n```python\r\ns: MyStruct\r\n\r\ndef set(x: address, y: bytes32):\r\n    self.s = MyStruct(x, y)\r\n```\r\nAdditionally, it should be possible to construct a structure in memory, and use it as a variable:\r\n```python\r\ns: MyStruct = MyStruct(x, y)  # or possibly allow {x: x, y: y}\r\nself.s = s  # Write storage from memory as an optimization?\r\n```\r\n\r\nThis VIP serves as a basis for #1019 and #1020 \r\n\r\n## Backwards Compatibility\r\nFully backwards compatible.\r\n\r\n## Copyright\r\nCopyright and related rights waived via [CC0](https://creativecommons.org/publicdomain/zero/1.0/)\r\n\r\n---\r\n# Original Proposal (for context):\r\n\r\nI was working on another example and was wondering if there is any planned support for creating or aliasing new types so that I wouldn't have to carry them around e.g.\r\n```\r\nnewtype data_t = {property1: basetype, property2: basetype, etc...}\r\ndata_lookup: data_t[address]\r\n\r\n...\r\n\r\n@constant\r\ndef get_property1(_addr: address) -> basetype:\r\n    return data_lookup[_addr].property1\r\n```",
  "closed_by": {
    "login": "fubuloubu",
    "id": 3859395,
    "node_id": "MDQ6VXNlcjM4NTkzOTU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/3859395?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/fubuloubu",
    "html_url": "https://github.com/fubuloubu",
    "followers_url": "https://api.github.com/users/fubuloubu/followers",
    "following_url": "https://api.github.com/users/fubuloubu/following{/other_user}",
    "gists_url": "https://api.github.com/users/fubuloubu/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/fubuloubu/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/fubuloubu/subscriptions",
    "organizations_url": "https://api.github.com/users/fubuloubu/orgs",
    "repos_url": "https://api.github.com/users/fubuloubu/repos",
    "events_url": "https://api.github.com/users/fubuloubu/events{/privacy}",
    "received_events_url": "https://api.github.com/users/fubuloubu/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/300/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/vyperlang/vyper/issues/300/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/319543574",
    "html_url": "https://github.com/vyperlang/vyper/issues/300#issuecomment-319543574",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/300",
    "id": 319543574,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxOTU0MzU3NA==",
    "user": {
      "login": "yograterol",
      "id": 3322886,
      "node_id": "MDQ6VXNlcjMzMjI4ODY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3322886?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/yograterol",
      "html_url": "https://github.com/yograterol",
      "followers_url": "https://api.github.com/users/yograterol/followers",
      "following_url": "https://api.github.com/users/yograterol/following{/other_user}",
      "gists_url": "https://api.github.com/users/yograterol/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/yograterol/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/yograterol/subscriptions",
      "organizations_url": "https://api.github.com/users/yograterol/orgs",
      "repos_url": "https://api.github.com/users/yograterol/repos",
      "events_url": "https://api.github.com/users/yograterol/events{/privacy}",
      "received_events_url": "https://api.github.com/users/yograterol/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-08-02T01:38:04Z",
    "updated_at": "2017-08-02T01:38:04Z",
    "author_association": "CONTRIBUTOR",
    "body": "@fubuloubu can you explain us a little more about the use cases?",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/319543574/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/319578230",
    "html_url": "https://github.com/vyperlang/vyper/issues/300#issuecomment-319578230",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/300",
    "id": 319578230,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxOTU3ODIzMA==",
    "user": {
      "login": "fubuloubu",
      "id": 3859395,
      "node_id": "MDQ6VXNlcjM4NTkzOTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3859395?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fubuloubu",
      "html_url": "https://github.com/fubuloubu",
      "followers_url": "https://api.github.com/users/fubuloubu/followers",
      "following_url": "https://api.github.com/users/fubuloubu/following{/other_user}",
      "gists_url": "https://api.github.com/users/fubuloubu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fubuloubu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fubuloubu/subscriptions",
      "organizations_url": "https://api.github.com/users/fubuloubu/orgs",
      "repos_url": "https://api.github.com/users/fubuloubu/repos",
      "events_url": "https://api.github.com/users/fubuloubu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fubuloubu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-08-02T06:15:47Z",
    "updated_at": "2017-08-02T06:15:47Z",
    "author_association": "MEMBER",
    "body": "1. So I've played around writing 2 viper contracts so far and both times I've had a main map construct that contains address -> record pairs for maintaining a record of data associated with an account (address) for that contract (e.g. number of shares owned, delegates, etc.). I was thinking originally that there is a need to be able to use that datatype as a return from a function or whatnot, but viper doesn't allow returning structs and I think that is by design and my misunderstanding. I was thinking from a more general usage standpoint where you might want to get all of the data from a record by account instead of specifying a getter for each property in that record. Also, not totally clear on this, but can you just read any data present in a contract at any time by externally reviewing the storage in the blockchain? (e.g. not in viper/solidity) Total newb here :hand:\r\n\r\n2. Sort of related, it would also be nice to define your own units. For example, `newtype shares_t = num( shares )` and latter use it like `holdings: shares_t[address]` and `def get_shares(_addr: address) -> shares_t:`, and I can use that everywhere I'm talking about shares in a stocks example, with the added benefit of the type system checking what I'm doing when combining units (e.g. `share_price: num( shares_t / wei )`, then later `self.holdings[_addr] = msg.value * self.share_price`).\r\n\r\n\r\nI think representing more complicated programs could benefit from being allowed to define more types (within reason), but then again I believe viper isn't going to be a language designed for creating larger programs and you can make due with what currently exists in writing a contract (with comments).",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/319578230/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/397239155",
    "html_url": "https://github.com/vyperlang/vyper/issues/300#issuecomment-397239155",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/300",
    "id": 397239155,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5NzIzOTE1NQ==",
    "user": {
      "login": "jacqueswww",
      "id": 6917456,
      "node_id": "MDQ6VXNlcjY5MTc0NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6917456?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jacqueswww",
      "html_url": "https://github.com/jacqueswww",
      "followers_url": "https://api.github.com/users/jacqueswww/followers",
      "following_url": "https://api.github.com/users/jacqueswww/following{/other_user}",
      "gists_url": "https://api.github.com/users/jacqueswww/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jacqueswww/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jacqueswww/subscriptions",
      "organizations_url": "https://api.github.com/users/jacqueswww/orgs",
      "repos_url": "https://api.github.com/users/jacqueswww/repos",
      "events_url": "https://api.github.com/users/jacqueswww/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jacqueswww/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-06-14T09:53:03Z",
    "updated_at": "2018-06-14T09:53:03Z",
    "author_association": "CONTRIBUTOR",
    "body": "Renamed to \"Named Structs\".",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/397239155/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/421204968",
    "html_url": "https://github.com/vyperlang/vyper/issues/300#issuecomment-421204968",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/300",
    "id": 421204968,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyMTIwNDk2OA==",
    "user": {
      "login": "fubuloubu",
      "id": 3859395,
      "node_id": "MDQ6VXNlcjM4NTkzOTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3859395?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fubuloubu",
      "html_url": "https://github.com/fubuloubu",
      "followers_url": "https://api.github.com/users/fubuloubu/followers",
      "following_url": "https://api.github.com/users/fubuloubu/following{/other_user}",
      "gists_url": "https://api.github.com/users/fubuloubu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fubuloubu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fubuloubu/subscriptions",
      "organizations_url": "https://api.github.com/users/fubuloubu/orgs",
      "repos_url": "https://api.github.com/users/fubuloubu/repos",
      "events_url": "https://api.github.com/users/fubuloubu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fubuloubu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-09-14T01:48:56Z",
    "updated_at": "2018-09-14T01:48:56Z",
    "author_association": "MEMBER",
    "body": "@jacqueswww should we explore this now?",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/421204968/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/431552873",
    "html_url": "https://github.com/vyperlang/vyper/issues/300#issuecomment-431552873",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/300",
    "id": 431552873,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzMTU1Mjg3Mw==",
    "user": {
      "login": "fubuloubu",
      "id": 3859395,
      "node_id": "MDQ6VXNlcjM4NTkzOTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3859395?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fubuloubu",
      "html_url": "https://github.com/fubuloubu",
      "followers_url": "https://api.github.com/users/fubuloubu/followers",
      "following_url": "https://api.github.com/users/fubuloubu/following{/other_user}",
      "gists_url": "https://api.github.com/users/fubuloubu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fubuloubu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fubuloubu/subscriptions",
      "organizations_url": "https://api.github.com/users/fubuloubu/orgs",
      "repos_url": "https://api.github.com/users/fubuloubu/repos",
      "events_url": "https://api.github.com/users/fubuloubu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fubuloubu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-20T06:05:22Z",
    "updated_at": "2018-10-20T06:05:22Z",
    "author_association": "MEMBER",
    "body": "Proposed syntax:\r\n```python\r\nMyStruct: struct = {\r\n    a: address,\r\n    b: bytes32,\r\n    ...\r\n}\r\n\r\nstructGlobal: MyStruct\r\n\r\ndef foo() -> MyStruct:  # as per #1019 \r\n    structLocal: MyStruct = MyStruct(msg.sender, b'', ...)\r\n    return structLocal\r\n\r\ndef bar(_myStruct: MyStruct):  # as per #1019\r\n    self.structGlobal = _myStruct\r\n```\r\nNote: This is valid Python AST syntax, so no problems.\r\n\r\nThe `StructName: struct = { define struct members here }` syntax is intuitive because it is similar to defining a constant. The context switch introduced by the `=` sign is enough to set it a part from specifying globals.\r\n\r\nWe could require all struct types be defined in the section above globals to ensure that they are disambiguated.",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/431552873/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/431552984",
    "html_url": "https://github.com/vyperlang/vyper/issues/300#issuecomment-431552984",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/300",
    "id": 431552984,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzMTU1Mjk4NA==",
    "user": {
      "login": "fubuloubu",
      "id": 3859395,
      "node_id": "MDQ6VXNlcjM4NTkzOTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3859395?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fubuloubu",
      "html_url": "https://github.com/fubuloubu",
      "followers_url": "https://api.github.com/users/fubuloubu/followers",
      "following_url": "https://api.github.com/users/fubuloubu/following{/other_user}",
      "gists_url": "https://api.github.com/users/fubuloubu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fubuloubu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fubuloubu/subscriptions",
      "organizations_url": "https://api.github.com/users/fubuloubu/orgs",
      "repos_url": "https://api.github.com/users/fubuloubu/repos",
      "events_url": "https://api.github.com/users/fubuloubu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fubuloubu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-20T06:07:31Z",
    "updated_at": "2018-10-20T06:08:06Z",
    "author_association": "MEMBER",
    "body": "Alternatively, this may be even clearer:\r\n```python\r\nMyStruct: struct is {\r\n    a: address,\r\n    b: bytes32,\r\n    ...\r\n}\r\n```\r\n\r\nusing the `is` keyword is even clearer as it is not in use for anything else currently.",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/431552984/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/431570905",
    "html_url": "https://github.com/vyperlang/vyper/issues/300#issuecomment-431570905",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/300",
    "id": 431570905,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzMTU3MDkwNQ==",
    "user": {
      "login": "cburgdorf",
      "id": 521109,
      "node_id": "MDQ6VXNlcjUyMTEwOQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/521109?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cburgdorf",
      "html_url": "https://github.com/cburgdorf",
      "followers_url": "https://api.github.com/users/cburgdorf/followers",
      "following_url": "https://api.github.com/users/cburgdorf/following{/other_user}",
      "gists_url": "https://api.github.com/users/cburgdorf/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cburgdorf/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cburgdorf/subscriptions",
      "organizations_url": "https://api.github.com/users/cburgdorf/orgs",
      "repos_url": "https://api.github.com/users/cburgdorf/repos",
      "events_url": "https://api.github.com/users/cburgdorf/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cburgdorf/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-20T11:08:03Z",
    "updated_at": "2018-10-20T11:08:42Z",
    "author_association": "CONTRIBUTOR",
    "body": "Forgive me jumping in here without having a deep understanding of Vyper but seeing the proximity in syntax to Python, why not follow the Python syntax for structs? \r\n\r\nSo that would be:\r\n\r\n```\r\nstruct MyStruct:\r\n    x: address\r\n    y: bytes32\r\n```\r\n\r\nOr if there is a specific reason for the curly braces syntax (that would make them essentially syntactical equivalent to structs in Rust):\r\n\r\n```\r\nstruct MyStruct {\r\n    x: address,\r\n    y: bytes32,\r\n}\r\n```\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/431570905/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/431590338",
    "html_url": "https://github.com/vyperlang/vyper/issues/300#issuecomment-431590338",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/300",
    "id": 431590338,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzMTU5MDMzOA==",
    "user": {
      "login": "fubuloubu",
      "id": 3859395,
      "node_id": "MDQ6VXNlcjM4NTkzOTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3859395?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fubuloubu",
      "html_url": "https://github.com/fubuloubu",
      "followers_url": "https://api.github.com/users/fubuloubu/followers",
      "following_url": "https://api.github.com/users/fubuloubu/following{/other_user}",
      "gists_url": "https://api.github.com/users/fubuloubu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fubuloubu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fubuloubu/subscriptions",
      "organizations_url": "https://api.github.com/users/fubuloubu/orgs",
      "repos_url": "https://api.github.com/users/fubuloubu/repos",
      "events_url": "https://api.github.com/users/fubuloubu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fubuloubu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-20T15:18:17Z",
    "updated_at": "2018-10-20T15:20:15Z",
    "author_association": "MEMBER",
    "body": "@cburgdorf Vyper uses Python AST to parse programs, so all Vyper has to be valid Python, or as close as possible where we can do some string regexing to get valid parsed Python (e.g. the `contract` keyword gets replaced with `class`).\r\n\r\nThat being said, I actually quite like your first approach with the class variable style, and we can do a similar thing to the `contract` keyword to get it to work so it looks like `class MyStruct...` under the hood and thus parses. However, this leaves a bit of a quandary... because now we'll have *two* replacements with the same result, and thus would be logically unable to tell the difference.\r\n\r\nMy proposal using your suggestion (which is my new favorite) is to under the hood replace `struct MyStruct: ...` with `class MyStruct(struct): ...`, and similarly `contract ExternalContract: ...` with `class ExternalContract(contract): ...`. We can now have one regex replace that works for both rules (and perhaps future ones!) with a style that is very Pythonic but is still clear to the needs of Vyper, and is quite readable!\r\n\r\nThanks for the suggestion!\r\n\r\n@jacqueswww what do you think?",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/431590338/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/431591423",
    "html_url": "https://github.com/vyperlang/vyper/issues/300#issuecomment-431591423",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/300",
    "id": 431591423,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzMTU5MTQyMw==",
    "user": {
      "login": "jacqueswww",
      "id": 6917456,
      "node_id": "MDQ6VXNlcjY5MTc0NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6917456?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jacqueswww",
      "html_url": "https://github.com/jacqueswww",
      "followers_url": "https://api.github.com/users/jacqueswww/followers",
      "following_url": "https://api.github.com/users/jacqueswww/following{/other_user}",
      "gists_url": "https://api.github.com/users/jacqueswww/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jacqueswww/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jacqueswww/subscriptions",
      "organizations_url": "https://api.github.com/users/jacqueswww/orgs",
      "repos_url": "https://api.github.com/users/jacqueswww/repos",
      "events_url": "https://api.github.com/users/jacqueswww/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jacqueswww/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-20T15:32:36Z",
    "updated_at": "2018-10-20T15:32:36Z",
    "author_association": "CONTRIBUTOR",
    "body": "Yes, I also quite like the readability of the example. Pretty sure we could figure something out ;)",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/431591423/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/431593110",
    "html_url": "https://github.com/vyperlang/vyper/issues/300#issuecomment-431593110",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/300",
    "id": 431593110,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzMTU5MzExMA==",
    "user": {
      "login": "fubuloubu",
      "id": 3859395,
      "node_id": "MDQ6VXNlcjM4NTkzOTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3859395?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fubuloubu",
      "html_url": "https://github.com/fubuloubu",
      "followers_url": "https://api.github.com/users/fubuloubu/followers",
      "following_url": "https://api.github.com/users/fubuloubu/following{/other_user}",
      "gists_url": "https://api.github.com/users/fubuloubu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fubuloubu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fubuloubu/subscriptions",
      "organizations_url": "https://api.github.com/users/fubuloubu/orgs",
      "repos_url": "https://api.github.com/users/fubuloubu/repos",
      "events_url": "https://api.github.com/users/fubuloubu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fubuloubu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-20T15:46:13Z",
    "updated_at": "2018-10-20T15:46:13Z",
    "author_association": "MEMBER",
    "body": "What do you think about the way we handle it being a regex from `(contract|struct) \\{varname}:` to `class \\{varname}(\\1):`?",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/431593110/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/431593901",
    "html_url": "https://github.com/vyperlang/vyper/issues/300#issuecomment-431593901",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/300",
    "id": 431593901,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzMTU5MzkwMQ==",
    "user": {
      "login": "cburgdorf",
      "id": 521109,
      "node_id": "MDQ6VXNlcjUyMTEwOQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/521109?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cburgdorf",
      "html_url": "https://github.com/cburgdorf",
      "followers_url": "https://api.github.com/users/cburgdorf/followers",
      "following_url": "https://api.github.com/users/cburgdorf/following{/other_user}",
      "gists_url": "https://api.github.com/users/cburgdorf/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cburgdorf/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cburgdorf/subscriptions",
      "organizations_url": "https://api.github.com/users/cburgdorf/orgs",
      "repos_url": "https://api.github.com/users/cburgdorf/repos",
      "events_url": "https://api.github.com/users/cburgdorf/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cburgdorf/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-20T15:56:41Z",
    "updated_at": "2018-10-20T15:56:41Z",
    "author_association": "CONTRIBUTOR",
    "body": "Ah sweet! That taught me quite a bit about how these things work internally. \r\n\r\n>My proposal using your suggestion (which is my new favorite) is to under the hood replace struct `MyStruct: ... with class MyStruct(struct): ...`\r\n\r\nMakes sense and seems to work out for a bunch of other things that may be considered in the long run e.g. enums.\r\n\r\n```\r\nenum Color:\r\n    black = 'black'\r\n    white = 'white'\r\n```\r\ncould be preprocessed to something like `class Color(VyperEnum):` (making `Vyper` enums actually sweeter than Python enums (which are just classes derived from a special `Enum` class) :sweat_smile: )\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/431593901/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/431594057",
    "html_url": "https://github.com/vyperlang/vyper/issues/300#issuecomment-431594057",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/300",
    "id": 431594057,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzMTU5NDA1Nw==",
    "user": {
      "login": "fubuloubu",
      "id": 3859395,
      "node_id": "MDQ6VXNlcjM4NTkzOTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3859395?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fubuloubu",
      "html_url": "https://github.com/fubuloubu",
      "followers_url": "https://api.github.com/users/fubuloubu/followers",
      "following_url": "https://api.github.com/users/fubuloubu/following{/other_user}",
      "gists_url": "https://api.github.com/users/fubuloubu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fubuloubu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fubuloubu/subscriptions",
      "organizations_url": "https://api.github.com/users/fubuloubu/orgs",
      "repos_url": "https://api.github.com/users/fubuloubu/repos",
      "events_url": "https://api.github.com/users/fubuloubu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fubuloubu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-20T15:58:39Z",
    "updated_at": "2018-10-20T16:12:21Z",
    "author_association": "MEMBER",
    "body": "Yes, I've been thinking lately we need enums!\r\n\r\nWe don't have to give them special names, because after Python AST parsing basically nothing is the same lol. But we don't have to write a compiler front end!\r\n\r\n---\r\n\r\nEDIT: enums might actually be a little trickier since we'd need to specify a type... Might need to do something like:\r\n```python\r\nenum Status:\r\n    type: uint256\r\n    UNKNOWN = 0  # Must always specify the default value as something\r\n    GOOD = 1\r\n    BAD = 3. # do we have to go in order?\r\n    ...\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/431594057/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/441905333",
    "html_url": "https://github.com/vyperlang/vyper/issues/300#issuecomment-441905333",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/300",
    "id": 441905333,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0MTkwNTMzMw==",
    "user": {
      "login": "charles-cooper",
      "id": 3867501,
      "node_id": "MDQ6VXNlcjM4Njc1MDE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3867501?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/charles-cooper",
      "html_url": "https://github.com/charles-cooper",
      "followers_url": "https://api.github.com/users/charles-cooper/followers",
      "following_url": "https://api.github.com/users/charles-cooper/following{/other_user}",
      "gists_url": "https://api.github.com/users/charles-cooper/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/charles-cooper/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/charles-cooper/subscriptions",
      "organizations_url": "https://api.github.com/users/charles-cooper/orgs",
      "repos_url": "https://api.github.com/users/charles-cooper/repos",
      "events_url": "https://api.github.com/users/charles-cooper/events{/privacy}",
      "received_events_url": "https://api.github.com/users/charles-cooper/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-27T04:30:11Z",
    "updated_at": "2018-11-27T04:30:11Z",
    "author_association": "COLLABORATOR",
    "body": "Seems nobody is working on this. Can I take a crack at this?",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/441905333/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/441959630",
    "html_url": "https://github.com/vyperlang/vyper/issues/300#issuecomment-441959630",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/300",
    "id": 441959630,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0MTk1OTYzMA==",
    "user": {
      "login": "fubuloubu",
      "id": 3859395,
      "node_id": "MDQ6VXNlcjM4NTkzOTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3859395?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fubuloubu",
      "html_url": "https://github.com/fubuloubu",
      "followers_url": "https://api.github.com/users/fubuloubu/followers",
      "following_url": "https://api.github.com/users/fubuloubu/following{/other_user}",
      "gists_url": "https://api.github.com/users/fubuloubu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fubuloubu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fubuloubu/subscriptions",
      "organizations_url": "https://api.github.com/users/fubuloubu/orgs",
      "repos_url": "https://api.github.com/users/fubuloubu/repos",
      "events_url": "https://api.github.com/users/fubuloubu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fubuloubu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-27T07:47:34Z",
    "updated_at": "2018-11-27T07:47:34Z",
    "author_association": "MEMBER",
    "body": "@charles-cooper sure! Do you understand what I mean here? https://github.com/ethereum/vyper/issues/300#issuecomment-431593110",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/441959630/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/441970057",
    "html_url": "https://github.com/vyperlang/vyper/issues/300#issuecomment-441970057",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/300",
    "id": 441970057,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0MTk3MDA1Nw==",
    "user": {
      "login": "charles-cooper",
      "id": 3867501,
      "node_id": "MDQ6VXNlcjM4Njc1MDE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3867501?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/charles-cooper",
      "html_url": "https://github.com/charles-cooper",
      "followers_url": "https://api.github.com/users/charles-cooper/followers",
      "following_url": "https://api.github.com/users/charles-cooper/following{/other_user}",
      "gists_url": "https://api.github.com/users/charles-cooper/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/charles-cooper/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/charles-cooper/subscriptions",
      "organizations_url": "https://api.github.com/users/charles-cooper/orgs",
      "repos_url": "https://api.github.com/users/charles-cooper/repos",
      "events_url": "https://api.github.com/users/charles-cooper/events{/privacy}",
      "received_events_url": "https://api.github.com/users/charles-cooper/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-27T08:29:44Z",
    "updated_at": "2018-11-27T08:29:44Z",
    "author_association": "COLLABORATOR",
    "body": "Yep. I opted to add decorators instead but it is essentially the same thing. I will push a WIP PR shortly with my approach.",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/441970057/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/442215809",
    "html_url": "https://github.com/vyperlang/vyper/issues/300#issuecomment-442215809",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/300",
    "id": 442215809,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0MjIxNTgwOQ==",
    "user": {
      "login": "charles-cooper",
      "id": 3867501,
      "node_id": "MDQ6VXNlcjM4Njc1MDE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3867501?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/charles-cooper",
      "html_url": "https://github.com/charles-cooper",
      "followers_url": "https://api.github.com/users/charles-cooper/followers",
      "following_url": "https://api.github.com/users/charles-cooper/following{/other_user}",
      "gists_url": "https://api.github.com/users/charles-cooper/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/charles-cooper/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/charles-cooper/subscriptions",
      "organizations_url": "https://api.github.com/users/charles-cooper/orgs",
      "repos_url": "https://api.github.com/users/charles-cooper/repos",
      "events_url": "https://api.github.com/users/charles-cooper/events{/privacy}",
      "received_events_url": "https://api.github.com/users/charles-cooper/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-27T21:02:42Z",
    "updated_at": "2018-11-27T21:08:31Z",
    "author_association": "COLLABORATOR",
    "body": "After working on https://github.com/ethereum/vyper/pull/1102 and getting closer to the issue, I would like to propose the following modifications to the spec:\r\n\r\n1. Struct constructors only accept named tuples. Every member of the struct must be instantiated, and the RHS must not contain any members that are not elements of the struct, otherwise the compiler should throw an error.\r\n    1. Example:\r\n    ```python\r\n    struct MyStruct:\r\n       x: address\r\n    s: MyStruct = { x: 0x123 } # Good\r\n    s: MyStruct = { x: 0x123, y: \"superfluous element\" } # Throw: Unrecognized member\r\n    s: MyStruct = {} # Throw: Missing member\r\n    ```\r\n    2. Motivation: Humans are better at remembering names than argument orders, and this is an added compiler guardrail. It can protect against common mistakes such as reordering the members of a struct and forgetting to update the order at all constructor call sites.\r\n2. Deprecate anonymous structs, or at least severely limit their usage.\r\n    1. Example:\r\n    ```python\r\n    contract_member: { x: uint256 } # Not allowed\r\n    struct Pair:\r\n      p1: uint256\r\n      p2: uint256\r\n    def div(a: { num: uint256, den: uint256}) -> uint256 : # Maybe?\r\n      Pair p = Pair(a) # Maybe?\r\n      p = Pair({p1: a.num, p2: a.den}) # Maybe?\r\n      x: { num: uint256, den: uint256 } = p # Maybe?\r\n      x = a # Maybe?\r\n    ```\r\n    2. Motivation: This might be a little contentious because it breaks backwards compatibility. But I figure pre-release is the best time to break backwards compatibility. Once we have named structs, anonymous structs seem less safe than named structs, which seems important since one of the stated goals of Vyper is to maximize human readability and to maximize difficulty of writing misleading code.\r\n3. This is more of a comment, but implementing this really illustrates the importance of https://github.com/ethereum/vyper/issues/563 - it shouldn't feel so hacky to add new keywords to Vyper.\r\n4. Discuss: should we support struct definitions in foreign contract interfaces?\r\n    1. Example:\r\n    ```python\r\n    contract ForeignContract:\r\n      struct ForeignStruct:\r\n        x: uint256\r\n      def proc_struct(arg: ForeignStruct) -> uint256:\r\n    ```\r\n    2. Motivation: This seems important to support interop between different contracts once #1019 and #1020 are in the pipeline. Note that it adds complexity around type-checking, because structs in different contracts should not be considered the same even if they have the same fields - e.g. to prevent phishing attacks in https://github.com/ethereum/vyper/issues/1020.\r\n\r\nEDIT: I forgot to mention, I think the type-checker should consider two structs as different even if they have the same members. That way casts must be explicit. A convenience function `cast` or `marshal` should be provided to make it easier to explicitly cast between structs which are considered equivalent (not sure yet how equivalence should be defined).",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/442215809/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/442271926",
    "html_url": "https://github.com/vyperlang/vyper/issues/300#issuecomment-442271926",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/300",
    "id": 442271926,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0MjI3MTkyNg==",
    "user": {
      "login": "fubuloubu",
      "id": 3859395,
      "node_id": "MDQ6VXNlcjM4NTkzOTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3859395?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fubuloubu",
      "html_url": "https://github.com/fubuloubu",
      "followers_url": "https://api.github.com/users/fubuloubu/followers",
      "following_url": "https://api.github.com/users/fubuloubu/following{/other_user}",
      "gists_url": "https://api.github.com/users/fubuloubu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fubuloubu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fubuloubu/subscriptions",
      "organizations_url": "https://api.github.com/users/fubuloubu/orgs",
      "repos_url": "https://api.github.com/users/fubuloubu/repos",
      "events_url": "https://api.github.com/users/fubuloubu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fubuloubu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-28T00:30:12Z",
    "updated_at": "2018-11-28T00:32:16Z",
    "author_association": "MEMBER",
    "body": "1. I don't disagree with allowing the `s: MyStruct = { x: 0x123 }` syntax. In practice though, struct members are rarely such short names and there could be many members. A more realistic example would be:\r\n```python\r\nstruct Transaction:\r\n    receiver: address\r\n    prevBlock: num256\r\n    amount: uint256\r\n\r\ndef createTransaction():\r\n    txn: Transaction = {receiver: msg.sender, prevBlock: block.number, amount: msg.value}\r\n\r\n# Proposed would disallow:\r\ndef createTransaction():\r\n    txn: Transaction = Transaction(msg.sender, block.number, msg.value)  # Fits more lines\r\n```\r\nI was thinking that allowing both would be optimal, but I see your point and mostly agree with it. We should discuss this further.\r\n\r\n2. Anonymous structs shouldn't be entirely deprecated. In fact, you are using one in your proposed syntax for creation/assignment, so they wouldn't go away anyways. We could pop up a deprecation warning if we find one is used for globals. I think many of the syntaxes you pointed out indeed looks awkward, we should probably avoid enabling too much usages of anon structs (outside of direct assignment).\r\n\r\n3. Yeah, agreed. Do you want to formally verify a brand new Vyper-specific front end? (not being snarky, honest question) We have formal semantics in K for Vyper [here](https://github.com/kframework/vyper-semantics). It's not up to date, but can be used to aid in the development of a front end. I would recommend using [PLY](https://github.com/dabeaz/ply) or [SLY](https://github.com/dabeaz/sly) (would prefer the latter). I think we're at a stage now where this may make sense, as it seems to be hampering development a bit and would be a good chance to refactor. (Also, a Vyper AST would be amazing for compiler code readability). Definitely a lot of work!\r\n\r\n4. That is a fantastic corner case I did not think of. Your proposal is interesting, but it may be more friendly to use the globally defined structs to fill it out e.g.\r\n```python\r\nstruct ForeignStruct:\r\n    x: uint256\r\ncontract ForeignContract:\r\n    def proc_struct(arg: ForeignStruct) -> uint256: constant\r\n```\r\nHaving to define them per-contract interface would create excessive complexity, and since the contract calling interface doesn't really care too much about the struct definitions as long as the members match, it wouldn't have much practical implications. This is also why doing a member check on structs is valuable for assignment.\r\n\r\nThat's my 2 wei",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/442271926/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/442276016",
    "html_url": "https://github.com/vyperlang/vyper/issues/300#issuecomment-442276016",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/300",
    "id": 442276016,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0MjI3NjAxNg==",
    "user": {
      "login": "charles-cooper",
      "id": 3867501,
      "node_id": "MDQ6VXNlcjM4Njc1MDE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3867501?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/charles-cooper",
      "html_url": "https://github.com/charles-cooper",
      "followers_url": "https://api.github.com/users/charles-cooper/followers",
      "following_url": "https://api.github.com/users/charles-cooper/following{/other_user}",
      "gists_url": "https://api.github.com/users/charles-cooper/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/charles-cooper/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/charles-cooper/subscriptions",
      "organizations_url": "https://api.github.com/users/charles-cooper/orgs",
      "repos_url": "https://api.github.com/users/charles-cooper/repos",
      "events_url": "https://api.github.com/users/charles-cooper/events{/privacy}",
      "received_events_url": "https://api.github.com/users/charles-cooper/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-28T00:50:16Z",
    "updated_at": "2018-11-28T00:50:16Z",
    "author_association": "COLLABORATOR",
    "body": "Thanks for the feedback.\r\n1. In my latest thinking (represented https://github.com/ethereum/vyper/pull/1102/commits/9a732d8a1b3dcbd36727d68964485d5e0187d98d) I decided to require that assignment uses the identical constructor and struct type. I think this leads to the clearest code:\r\n    ```python\r\n    struct Transaction:\r\n      receiver: address\r\n      prevBlock: num256\r\n      amount: uint256\r\n    struct Transaction2:\r\n      receiver: address\r\n      prevBlock: num256\r\n      amount: uint256\r\n\r\n    def createTransaction():\r\n      txn: Transaction = Transaction({receiver: msg.sender, prevBlock: block.number, amount: msg.value})\r\n      # Multi-line style is encouraged\r\n      txn: Transaction = Transaction({\r\n        receiver: msg.sender,\r\n        prevBlock: block.number,\r\n        amount: msg.value})\r\n      # Disallowed.\r\n      txn: Transaction = {receiver: msg.sender, prevBlock: block.number, amount: msg.value}\r\n      # Disallowed\r\n      txn: Transaction = Transaction2({receiver: msg.sender, prevBlock: block.number, amount: msg.value})\r\n    ```\r\n2. In https://github.com/ethereum/vyper/pull/1102/commits/9a732d8a1b3dcbd36727d68964485d5e0187d98d, anonymous structs are still allowed, but I am with you leaning towards disallowing (or deprecating) them as a type, and only allowing dicts in constructors.\r\n3. Sounds like a big project - maybe once these struct machinery issues are implemented. I definitely agree it would lead to simpler code - a lex/yacc grammar would be easy to understand as opposed to relying on the Python front-end - I don't think at the current time there is even a BNF grammar for Vyper.\r\n4. I definitely see your point about friendliness. Perhaps we can be less strict for interface definitions and allow anything that 'fits', and be really strict for struct signing.",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/442276016/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/442316432",
    "html_url": "https://github.com/vyperlang/vyper/issues/300#issuecomment-442316432",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/300",
    "id": 442316432,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0MjMxNjQzMg==",
    "user": {
      "login": "fubuloubu",
      "id": 3859395,
      "node_id": "MDQ6VXNlcjM4NTkzOTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3859395?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fubuloubu",
      "html_url": "https://github.com/fubuloubu",
      "followers_url": "https://api.github.com/users/fubuloubu/followers",
      "following_url": "https://api.github.com/users/fubuloubu/following{/other_user}",
      "gists_url": "https://api.github.com/users/fubuloubu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fubuloubu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fubuloubu/subscriptions",
      "organizations_url": "https://api.github.com/users/fubuloubu/orgs",
      "repos_url": "https://api.github.com/users/fubuloubu/repos",
      "events_url": "https://api.github.com/users/fubuloubu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fubuloubu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-28T04:33:27Z",
    "updated_at": "2018-11-28T04:33:27Z",
    "author_association": "MEMBER",
    "body": "I think being looser with interface definitions is fine, in that \"looser\" just means you are allowed to reuse the same structs you've defined locally. We still keep tightness outside of struct definitions, so I really see no issue with that. Interfaces don't execute any code.",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/442316432/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/442638739",
    "html_url": "https://github.com/vyperlang/vyper/issues/300#issuecomment-442638739",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/300",
    "id": 442638739,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0MjYzODczOQ==",
    "user": {
      "login": "jacqueswww",
      "id": 6917456,
      "node_id": "MDQ6VXNlcjY5MTc0NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6917456?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jacqueswww",
      "html_url": "https://github.com/jacqueswww",
      "followers_url": "https://api.github.com/users/jacqueswww/followers",
      "following_url": "https://api.github.com/users/jacqueswww/following{/other_user}",
      "gists_url": "https://api.github.com/users/jacqueswww/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jacqueswww/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jacqueswww/subscriptions",
      "organizations_url": "https://api.github.com/users/jacqueswww/orgs",
      "repos_url": "https://api.github.com/users/jacqueswww/repos",
      "events_url": "https://api.github.com/users/jacqueswww/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jacqueswww/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-28T23:01:35Z",
    "updated_at": "2018-11-28T23:06:29Z",
    "author_association": "CONTRIBUTOR",
    "body": "1. & 2. This looks good\r\n\r\n```python\r\ntxn: Transaction = Transaction({\r\n    receiver: msg.sender,\r\n    prevBlock: block.number,\r\n    amount: msg.value\r\n})\r\n```\r\nMainly because I actually suggested this at some point:\r\n```python\r\ntxn: Transaction = Transaction(\r\n    receiver=msg.sender,\r\n    prevBlock=block.number,\r\n    amount=msg.value\r\n)\r\n```\r\nI tend to agree that we could probably drop anonymous struct, just because majority of them are quite large - and just ends up cluttering the logic. ~However considering point 4, I am in two minds if the external interfaces should have their structs defined close to or on the interface definition~ see 4.\r\n\r\nI am also of the opinion that we should at least force all members on the RHS to be defined, at least with the first iteration of named structs.\r\n\r\n4. This implies we have to force structs to be defined before the external interfaces (just something to keep in mind). For the first iteration I would say keep struct defined only on the main contract.",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/442638739/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/442652978",
    "html_url": "https://github.com/vyperlang/vyper/issues/300#issuecomment-442652978",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/300",
    "id": 442652978,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0MjY1Mjk3OA==",
    "user": {
      "login": "fubuloubu",
      "id": 3859395,
      "node_id": "MDQ6VXNlcjM4NTkzOTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3859395?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fubuloubu",
      "html_url": "https://github.com/fubuloubu",
      "followers_url": "https://api.github.com/users/fubuloubu/followers",
      "following_url": "https://api.github.com/users/fubuloubu/following{/other_user}",
      "gists_url": "https://api.github.com/users/fubuloubu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fubuloubu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fubuloubu/subscriptions",
      "organizations_url": "https://api.github.com/users/fubuloubu/orgs",
      "repos_url": "https://api.github.com/users/fubuloubu/repos",
      "events_url": "https://api.github.com/users/fubuloubu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fubuloubu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-29T00:00:05Z",
    "updated_at": "2018-11-29T00:00:05Z",
    "author_association": "MEMBER",
    "body": "Well, if you have multiple contracts (if we enable importing struct and contract interface definitions) you could just do `from .contractA import MyStruct, MyContractInterface` (where `./contractA.vy` is available in the local directory) and that should work the same as if you defined them within the contract file (at least, in my mind)",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/442652978/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/451189033",
    "html_url": "https://github.com/vyperlang/vyper/issues/300#issuecomment-451189033",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/300",
    "id": 451189033,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1MTE4OTAzMw==",
    "user": {
      "login": "fubuloubu",
      "id": 3859395,
      "node_id": "MDQ6VXNlcjM4NTkzOTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3859395?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fubuloubu",
      "html_url": "https://github.com/fubuloubu",
      "followers_url": "https://api.github.com/users/fubuloubu/followers",
      "following_url": "https://api.github.com/users/fubuloubu/following{/other_user}",
      "gists_url": "https://api.github.com/users/fubuloubu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fubuloubu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fubuloubu/subscriptions",
      "organizations_url": "https://api.github.com/users/fubuloubu/orgs",
      "repos_url": "https://api.github.com/users/fubuloubu/repos",
      "events_url": "https://api.github.com/users/fubuloubu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fubuloubu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-03T16:04:03Z",
    "updated_at": "2019-01-03T16:04:03Z",
    "author_association": "MEMBER",
    "body": "Implemented in #1102 (yay!)",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/451189033/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
