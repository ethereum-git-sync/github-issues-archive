{
  "url": "https://api.github.com/repos/vyperlang/vyper/issues/3533",
  "repository_url": "https://api.github.com/repos/vyperlang/vyper",
  "labels_url": "https://api.github.com/repos/vyperlang/vyper/issues/3533/labels{/name}",
  "comments_url": "https://api.github.com/repos/vyperlang/vyper/issues/3533/comments",
  "events_url": "https://api.github.com/repos/vyperlang/vyper/issues/3533/events",
  "html_url": "https://github.com/vyperlang/vyper/issues/3533",
  "id": 1817184597,
  "node_id": "I_kwDOBGDvrM5sUAlV",
  "number": 3533,
  "title": "VIP: Enforcing Controlled State Mutations with @mutates Decorator",
  "user": {
    "login": "bout3fiddy",
    "id": 11488427,
    "node_id": "MDQ6VXNlcjExNDg4NDI3",
    "avatar_url": "https://avatars.githubusercontent.com/u/11488427?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/bout3fiddy",
    "html_url": "https://github.com/bout3fiddy",
    "followers_url": "https://api.github.com/users/bout3fiddy/followers",
    "following_url": "https://api.github.com/users/bout3fiddy/following{/other_user}",
    "gists_url": "https://api.github.com/users/bout3fiddy/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/bout3fiddy/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/bout3fiddy/subscriptions",
    "organizations_url": "https://api.github.com/users/bout3fiddy/orgs",
    "repos_url": "https://api.github.com/users/bout3fiddy/repos",
    "events_url": "https://api.github.com/users/bout3fiddy/events{/privacy}",
    "received_events_url": "https://api.github.com/users/bout3fiddy/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 3,
  "created_at": "2023-07-23T16:03:20Z",
  "updated_at": "2023-07-31T12:45:06Z",
  "closed_at": null,
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "## Simple Summary\r\nIntroduce a function decorator `@mutates` that specifies which state variables a function is allowed to modify.\r\n\r\n## Motivation\r\nThe goal of this VIP is to enhance the readability and auditability of Vyper smart contracts by explicitly stating which state variables a function can mutate. This will help contract developers and auditors quickly understand and verify the behaviour of a function. The increased clarity of function behaviour and the prevention of unintended state mutations are deemed beneficial to the overall health of the contract, despite potential drawbacks in gas costs.\r\n\r\n## Specification\r\n\r\nThe new feature will introduce a decorator `@mutates` that takes arguments which are string literals corresponding to state variables.\r\n\r\n```python\r\nvar_a: uint256\r\nvar_b: uint256\r\n\r\n@external\r\n@mutates('var_a', 'var_b')\r\ndef change_vars(a: uint256, b: uint256):\r\n    self.var_a = a\r\n    self.var_b = b\r\n\r\n@external\r\n@mutates('var_b')\r\ndef change_b_only(b: uint256):\r\n    self.var_b = b\r\n```\r\n\r\nIn the `change_vars` function, it is explicitly permitted to mutate the `var_a` and `var_b` state variables. However, in `change_b_only`, only `var_b` is allowed to mutate. If `change_b_only` attempts to mutate `var_a`, the contract should throw a compile-time exception.\r\n\r\n```python\r\n@external\r\n@mutates('var_b')\r\ndef change_b_and_a_wrongly(a: uint256, b: uint256):\r\n    self.var_a = a  # This will cause a revert\r\n    self.var_b = b\r\n```\r\n\r\nIn the `change_b_and_a_wrongly` function, despite the intention to change both `var_a` and `var_b`, the `@mutates` decorator only specifies `var_b`. As such, attempting to change `var_a` within this function will cause the contract to revert.\r\n\r\n## Backwards Compatibility\r\nThis VIP should be fully backwards compatible as it introduces a new decorator and does not modify the behaviour of existing ones. Current contracts will continue to function as before. Developers can opt-in to use this feature in new contracts or when updating existing ones.\r\n\r\n## Dependencies\r\n1. No existing VIPs are required for this implementation.\r\n2. Vyper's Code-Analysis needs to be refactored to support this feature. But this is probably for the better in the long term.\r\n\r\nNote that Vyper already has an implementation where state mutability is selectively forbidden, e.g. you cannot modify storage arrays in a for loop. \r\n\r\n## Performance Considerations\r\nThe introduction of the `@mutates` decorator will potentially increase the gas cost of decorated functions. This is due to the additional checks that the Vyper compiler will need to introduce to enforce mutability constraints at compile time. However, the potential increase in gas cost is an acceptable trade-off for the increase in contract safety and auditability.\r\n\r\n## Copyright\r\nCopyright and related rights waived via [CC0](https://creativecommons.org/publicdomain/zero/1.0/)",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/3533/reactions",
    "total_count": 1,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 1
  },
  "timeline_url": "https://api.github.com/repos/vyperlang/vyper/issues/3533/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/1646878085",
    "html_url": "https://github.com/vyperlang/vyper/issues/3533#issuecomment-1646878085",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/3533",
    "id": 1646878085,
    "node_id": "IC_kwDOBGDvrM5iKV2F",
    "user": {
      "login": "charles-cooper",
      "id": 3867501,
      "node_id": "MDQ6VXNlcjM4Njc1MDE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3867501?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/charles-cooper",
      "html_url": "https://github.com/charles-cooper",
      "followers_url": "https://api.github.com/users/charles-cooper/followers",
      "following_url": "https://api.github.com/users/charles-cooper/following{/other_user}",
      "gists_url": "https://api.github.com/users/charles-cooper/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/charles-cooper/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/charles-cooper/subscriptions",
      "organizations_url": "https://api.github.com/users/charles-cooper/orgs",
      "repos_url": "https://api.github.com/users/charles-cooper/repos",
      "events_url": "https://api.github.com/users/charles-cooper/events{/privacy}",
      "received_events_url": "https://api.github.com/users/charles-cooper/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-07-23T16:07:03Z",
    "updated_at": "2023-07-23T16:07:03Z",
    "author_association": "COLLABORATOR",
    "body": "the arguments to the modifier don't need to be string literals (since we have the variables names in the global namespace) but overall i don't see any issues with this proposals",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/1646878085/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/1646880165",
    "html_url": "https://github.com/vyperlang/vyper/issues/3533#issuecomment-1646880165",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/3533",
    "id": 1646880165,
    "node_id": "IC_kwDOBGDvrM5iKWWl",
    "user": {
      "login": "charles-cooper",
      "id": 3867501,
      "node_id": "MDQ6VXNlcjM4Njc1MDE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3867501?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/charles-cooper",
      "html_url": "https://github.com/charles-cooper",
      "followers_url": "https://api.github.com/users/charles-cooper/followers",
      "following_url": "https://api.github.com/users/charles-cooper/following{/other_user}",
      "gists_url": "https://api.github.com/users/charles-cooper/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/charles-cooper/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/charles-cooper/subscriptions",
      "organizations_url": "https://api.github.com/users/charles-cooper/orgs",
      "repos_url": "https://api.github.com/users/charles-cooper/repos",
      "events_url": "https://api.github.com/users/charles-cooper/events{/privacy}",
      "received_events_url": "https://api.github.com/users/charles-cooper/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-07-23T16:17:29Z",
    "updated_at": "2023-07-23T16:17:29Z",
    "author_association": "COLLABORATOR",
    "body": "also, i don't see why the protection needs to be a runtime revert - can be a compile time check.\r\n\r\nin addition, the compiler should raise (or at least warn) if the annotation indicates that some variable `x` is used in a function but it is not in fact used.",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/1646880165/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/1658306031",
    "html_url": "https://github.com/vyperlang/vyper/issues/3533#issuecomment-1658306031",
    "issue_url": "https://api.github.com/repos/vyperlang/vyper/issues/3533",
    "id": 1658306031,
    "node_id": "IC_kwDOBGDvrM5i173v",
    "user": {
      "login": "bout3fiddy",
      "id": 11488427,
      "node_id": "MDQ6VXNlcjExNDg4NDI3",
      "avatar_url": "https://avatars.githubusercontent.com/u/11488427?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bout3fiddy",
      "html_url": "https://github.com/bout3fiddy",
      "followers_url": "https://api.github.com/users/bout3fiddy/followers",
      "following_url": "https://api.github.com/users/bout3fiddy/following{/other_user}",
      "gists_url": "https://api.github.com/users/bout3fiddy/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bout3fiddy/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bout3fiddy/subscriptions",
      "organizations_url": "https://api.github.com/users/bout3fiddy/orgs",
      "repos_url": "https://api.github.com/users/bout3fiddy/repos",
      "events_url": "https://api.github.com/users/bout3fiddy/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bout3fiddy/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-07-31T12:45:06Z",
    "updated_at": "2023-07-31T12:45:06Z",
    "author_association": "CONTRIBUTOR",
    "body": "If it is a runtime revert: the check would only break if someone tries to manipulate an 'unauthorised storage' variable. say: via reentrancy. So, in that sense I do see this as a viable runtime protection, not just compile time.",
    "reactions": {
      "url": "https://api.github.com/repos/vyperlang/vyper/issues/comments/1658306031/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
