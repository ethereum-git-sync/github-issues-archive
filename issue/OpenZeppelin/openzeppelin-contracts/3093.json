{
  "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3093",
  "repository_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts",
  "labels_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3093/labels{/name}",
  "comments_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3093/comments",
  "events_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3093/events",
  "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3093",
  "id": 1097159810,
  "node_id": "I_kwDOA9tCBs5BZVSC",
  "number": 3093,
  "title": "The ability to override ERC20Upgradeable _transfer function",
  "user": {
    "login": "iam-dev",
    "id": 30754770,
    "node_id": "MDQ6VXNlcjMwNzU0Nzcw",
    "avatar_url": "https://avatars.githubusercontent.com/u/30754770?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/iam-dev",
    "html_url": "https://github.com/iam-dev",
    "followers_url": "https://api.github.com/users/iam-dev/followers",
    "following_url": "https://api.github.com/users/iam-dev/following{/other_user}",
    "gists_url": "https://api.github.com/users/iam-dev/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/iam-dev/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/iam-dev/subscriptions",
    "organizations_url": "https://api.github.com/users/iam-dev/orgs",
    "repos_url": "https://api.github.com/users/iam-dev/repos",
    "events_url": "https://api.github.com/users/iam-dev/events{/privacy}",
    "received_events_url": "https://api.github.com/users/iam-dev/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 4,
  "created_at": "2022-01-09T10:30:42Z",
  "updated_at": "2022-01-21T16:05:02Z",
  "closed_at": "2022-01-09T21:12:02Z",
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "**🧐 Motivation**\r\nsee also: https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/issues/139\r\nWhen override ERC20Upgradeable _transfer function using:\r\n```\r\nfunction _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal virtual override(ERC20Upgradeable) {}\r\n```\r\n You need to add mapping(address => uint256) private _balances; on the parent contract., resulting 0 balances when transfering a token.\r\n\r\nAs for now you can't add feature like adding tax to all transfers\r\n\r\n**📝 Details**\r\nAdd _processTransfer within ERC20Upgradeable _transfer function.\r\n\r\n```\r\nfunction _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        uint256 senderBalance = _balances[sender];\r\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        _processTransfer(sender, recipient, amount);\r\n\r\n        emit Transfer(sender, recipient, amount);\r\n\r\n        _afterTokenTransfer(sender, recipient, amount);\r\n    }\r\n\r\nfunction _processTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        unchecked {\r\n            _balances[sender] -= amount;\r\n        }\r\n        _balances[recipient] += amount;\r\n    }\r\n```\r\n\r\n\r\n**Example implementation**\r\n```\r\nfunction _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal virtual override(ERC20Upgradeable) {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        uint256 senderBalance = balanceOf(sender);\r\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n\r\n        uint256 newAmount = amount;\r\n        if (!_midSwap) {\r\n            if (!hasRole(EXCLUDED, sender) && !hasRole(EXCLUDED, recipient)) {\r\n                // TAX SETUP\r\n                uint256 taxAmount = newAmount * _tax / _DIV;\r\n                super._processTransfer(sender, _thisAddress, taxAmount);\r\n                newAmount -= taxAmount;\r\n                emit Transfer(sender, _thisAddress, taxAmount);\r\n            }\r\n        }\r\n\r\n        super._processTransfer(sender, recipient, newAmount);\r\n        emit Transfer(sender, recipient, newAmount);\r\n\r\n        _afterTokenTransfer(sender, recipient, newAmount);\r\n    }\r\n```",
  "closed_by": {
    "login": "iam-dev",
    "id": 30754770,
    "node_id": "MDQ6VXNlcjMwNzU0Nzcw",
    "avatar_url": "https://avatars.githubusercontent.com/u/30754770?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/iam-dev",
    "html_url": "https://github.com/iam-dev",
    "followers_url": "https://api.github.com/users/iam-dev/followers",
    "following_url": "https://api.github.com/users/iam-dev/following{/other_user}",
    "gists_url": "https://api.github.com/users/iam-dev/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/iam-dev/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/iam-dev/subscriptions",
    "organizations_url": "https://api.github.com/users/iam-dev/orgs",
    "repos_url": "https://api.github.com/users/iam-dev/repos",
    "events_url": "https://api.github.com/users/iam-dev/events{/privacy}",
    "received_events_url": "https://api.github.com/users/iam-dev/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3093/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3093/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1008329227",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3093#issuecomment-1008329227",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3093",
    "id": 1008329227,
    "node_id": "IC_kwDOA9tCBs48GeIL",
    "user": {
      "login": "Amxx",
      "id": 2432299,
      "node_id": "MDQ6VXNlcjI0MzIyOTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2432299?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Amxx",
      "html_url": "https://github.com/Amxx",
      "followers_url": "https://api.github.com/users/Amxx/followers",
      "following_url": "https://api.github.com/users/Amxx/following{/other_user}",
      "gists_url": "https://api.github.com/users/Amxx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Amxx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Amxx/subscriptions",
      "organizations_url": "https://api.github.com/users/Amxx/orgs",
      "repos_url": "https://api.github.com/users/Amxx/repos",
      "events_url": "https://api.github.com/users/Amxx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Amxx/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-01-09T16:19:24Z",
    "updated_at": "2022-01-09T17:31:32Z",
    "author_association": "COLLABORATOR",
    "body": "Hello @iam-dev \r\n\r\nWhen overriding the _transfer function, you are expected to use super calls to performs underlying transfers. This is showcased in many places in our codebase. In particular, I'm thinking of ERC20Votes.\r\n\r\nAn example that is often discussed, is adding fees to transfer operations. Implementing your logic can already easily be done that way:\r\n```\r\nfunction _transfer(address sender, address recipient, uint256 amount) internal virtual override {\r\n    if (!_midSwap && !hasRole(EXCLUDED, sender) && !hasRole(EXCLUDED, recipient)) {\r\n        uint256 taxAmount = amount * _tax / _DIV;\r\n        super._transfer(sender, _thisAddress, taxAmount);\r\n        amount -= taxAmount;\r\n    }\r\n    super._transfer(sender, recipient, amount);\r\n}\r\n``` \r\n\r\nThe reason why balances are private is the same reason why we are not going to implement your `_processTransfer`: It would allow balances to change without a transfer event being emitted, and that would break the ERC20 compliance of the contract.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1008329227/reactions",
      "total_count": 3,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 3,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1008340591",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3093#issuecomment-1008340591",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3093",
    "id": 1008340591,
    "node_id": "IC_kwDOA9tCBs48Gg5v",
    "user": {
      "login": "Amxx",
      "id": 2432299,
      "node_id": "MDQ6VXNlcjI0MzIyOTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2432299?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Amxx",
      "html_url": "https://github.com/Amxx",
      "followers_url": "https://api.github.com/users/Amxx/followers",
      "following_url": "https://api.github.com/users/Amxx/following{/other_user}",
      "gists_url": "https://api.github.com/users/Amxx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Amxx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Amxx/subscriptions",
      "organizations_url": "https://api.github.com/users/Amxx/orgs",
      "repos_url": "https://api.github.com/users/Amxx/repos",
      "events_url": "https://api.github.com/users/Amxx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Amxx/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-01-09T17:28:10Z",
    "updated_at": "2022-01-09T17:28:10Z",
    "author_association": "COLLABORATOR",
    "body": "Additional comments:\r\n\r\n- You way of cutting between `_transfer` and `_processTransfer` means that `_processTransfer` is not protected.\r\n  - it would be possible to overflow negatively, meaning that it is possible to take more token from the actual balance (unchecked would allow do that), and causing balance to jump to huge values.\r\n  - it would allow to send from/to address(0), which is not allowed in our system.\r\n- `_processTransfer` doesn't not emit a Trnasfer event (inconsistent with the ERC)\r\n- `_processTransfer` doesn't not call the hooks, meaning that some token movement would be watched by other module, resulting in dangerous undefined behavior.\r\n\r\nTo ensure the security and consistency of the contracts, transfers should:\r\n- only be allowed if \"from\" balance is sufficient\r\n- only be allowed if sender and recipient are non 0 (otherwise, use mint or burn)\r\n- emit a transfer Event\r\n- call the corresponding hooks.\r\n\r\nThis means that IMO, ERC20._transfer is minimal, and nothing smaller (in terms of features) should be available, as calling it would break some assumptions.\r\n\r\nWe are expecting contract developers to call `_transfer` for any token transfer operation. Additional \"on transfer\" features can easily be added through the before and after hooks ... and more drastic operation (adding fees for example) can be done by overriding `_transfer` and using the super keyword.\r\n\r\nIMO, what you are proposing is not necessary (I honestly don't see the usecase) and extremely dangerous (you could very easily use it to create \"hidden\" bugs, willingly or not).",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1008340591/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1018624530",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3093#issuecomment-1018624530",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3093",
    "id": 1018624530,
    "node_id": "IC_kwDOA9tCBs48tvoS",
    "user": {
      "login": "rt9k35rfpk",
      "id": 96126952,
      "node_id": "U_kgDOBbrH6A",
      "avatar_url": "https://avatars.githubusercontent.com/u/96126952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rt9k35rfpk",
      "html_url": "https://github.com/rt9k35rfpk",
      "followers_url": "https://api.github.com/users/rt9k35rfpk/followers",
      "following_url": "https://api.github.com/users/rt9k35rfpk/following{/other_user}",
      "gists_url": "https://api.github.com/users/rt9k35rfpk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rt9k35rfpk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rt9k35rfpk/subscriptions",
      "organizations_url": "https://api.github.com/users/rt9k35rfpk/orgs",
      "repos_url": "https://api.github.com/users/rt9k35rfpk/repos",
      "events_url": "https://api.github.com/users/rt9k35rfpk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rt9k35rfpk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-01-21T15:42:55Z",
    "updated_at": "2022-01-21T15:42:55Z",
    "author_association": "NONE",
    "body": "@Amxx what is the `_midSwap` related to? 😎 ",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1018624530/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1018643598",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3093#issuecomment-1018643598",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3093",
    "id": 1018643598,
    "node_id": "IC_kwDOA9tCBs48t0SO",
    "user": {
      "login": "Amxx",
      "id": 2432299,
      "node_id": "MDQ6VXNlcjI0MzIyOTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2432299?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Amxx",
      "html_url": "https://github.com/Amxx",
      "followers_url": "https://api.github.com/users/Amxx/followers",
      "following_url": "https://api.github.com/users/Amxx/following{/other_user}",
      "gists_url": "https://api.github.com/users/Amxx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Amxx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Amxx/subscriptions",
      "organizations_url": "https://api.github.com/users/Amxx/orgs",
      "repos_url": "https://api.github.com/users/Amxx/repos",
      "events_url": "https://api.github.com/users/Amxx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Amxx/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-01-21T16:05:02Z",
    "updated_at": "2022-01-21T16:05:02Z",
    "author_association": "COLLABORATOR",
    "body": "I don't know, this was part of @iam-dev original post.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1018643598/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
