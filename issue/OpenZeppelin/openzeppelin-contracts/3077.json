{
  "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3077",
  "repository_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts",
  "labels_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3077/labels{/name}",
  "comments_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3077/comments",
  "events_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3077/events",
  "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3077",
  "id": 1094334330,
  "node_id": "I_kwDOA9tCBs5BOjd6",
  "number": 3077,
  "title": "Governor with multiple choice",
  "user": {
    "login": "frangio",
    "id": 481465,
    "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
    "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/frangio",
    "html_url": "https://github.com/frangio",
    "followers_url": "https://api.github.com/users/frangio/followers",
    "following_url": "https://api.github.com/users/frangio/following{/other_user}",
    "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
    "organizations_url": "https://api.github.com/users/frangio/orgs",
    "repos_url": "https://api.github.com/users/frangio/repos",
    "events_url": "https://api.github.com/users/frangio/events{/privacy}",
    "received_events_url": "https://api.github.com/users/frangio/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 4953777396,
      "node_id": "LA_kwDOA9tCBs8AAAABJ0Sk9A",
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/labels/area:%20governance",
      "name": "area: governance",
      "color": "E7DA84",
      "default": false,
      "description": ""
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 11,
  "created_at": "2022-01-05T13:09:35Z",
  "updated_at": "2023-03-01T14:56:54Z",
  "closed_at": null,
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "There seems to be interest in the ability to create multiple choice proposals.\r\n\r\nThis issue is for gathering concrete use cases that can help guide the design. This may or may not be related to #3043.",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3077/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3077/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1005699317",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3077#issuecomment-1005699317",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3077",
    "id": 1005699317,
    "node_id": "IC_kwDOA9tCBs478cD1",
    "user": {
      "login": "Amxx",
      "id": 2432299,
      "node_id": "MDQ6VXNlcjI0MzIyOTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2432299?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Amxx",
      "html_url": "https://github.com/Amxx",
      "followers_url": "https://api.github.com/users/Amxx/followers",
      "following_url": "https://api.github.com/users/Amxx/following{/other_user}",
      "gists_url": "https://api.github.com/users/Amxx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Amxx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Amxx/subscriptions",
      "organizations_url": "https://api.github.com/users/Amxx/orgs",
      "repos_url": "https://api.github.com/users/Amxx/repos",
      "events_url": "https://api.github.com/users/Amxx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Amxx/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-01-05T13:47:04Z",
    "updated_at": "2022-01-05T13:47:12Z",
    "author_association": "COLLABORATOR",
    "body": "Would a multiple choice proposals be something like:\r\n\r\n- Option A: execute tx1\r\n- Option B: execute tx2\r\n- Option C: don't do anything\r\n\r\n?\r\n\r\nIt's interesting, but it creates a lot of potential issues where, if tx1 and tx2 are somehow similar, they could lose to option C even though the sum of A and B outweigh C",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1005699317/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1006053822",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3077#issuecomment-1006053822",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3077",
    "id": 1006053822,
    "node_id": "IC_kwDOA9tCBs479ym-",
    "user": {
      "login": "hack3r-0m",
      "id": 54898623,
      "node_id": "MDQ6VXNlcjU0ODk4NjIz",
      "avatar_url": "https://avatars.githubusercontent.com/u/54898623?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hack3r-0m",
      "html_url": "https://github.com/hack3r-0m",
      "followers_url": "https://api.github.com/users/hack3r-0m/followers",
      "following_url": "https://api.github.com/users/hack3r-0m/following{/other_user}",
      "gists_url": "https://api.github.com/users/hack3r-0m/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hack3r-0m/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hack3r-0m/subscriptions",
      "organizations_url": "https://api.github.com/users/hack3r-0m/orgs",
      "repos_url": "https://api.github.com/users/hack3r-0m/repos",
      "events_url": "https://api.github.com/users/hack3r-0m/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hack3r-0m/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-01-05T20:28:26Z",
    "updated_at": "2022-01-05T20:28:26Z",
    "author_association": "NONE",
    "body": "does this proposal concern only with providing the ability to create multiple choice proposals or also with the nature and interpretation of the options/choices (for e.g if a proposal has options A, B, and C then does all need to be mutually exclusive)?",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1006053822/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1006704607",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3077#issuecomment-1006704607",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3077",
    "id": 1006704607,
    "node_id": "IC_kwDOA9tCBs48ARff",
    "user": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-01-06T16:00:15Z",
    "updated_at": "2022-01-06T16:00:15Z",
    "author_association": "MEMBER",
    "body": "@hack3r-0m I think both. If we allow creation of multiple choice proposals we need to be clear about the meaning of such a proposal.\r\n\r\n@Amxx Yes that sounds like something that could happen commonly. But the use case is legitimate: put up for a vote alternative proposals of which only one should be chosen. So what solution can we offer?\r\n\r\nThe problem you point out is that a naive simple majority is not ideal if some of the options are similar and voters are forced to choose between them even though they might support both. Maybe this means that multiple choice proposals should use some other voting system, like [approval voting](https://en.wikipedia.org/wiki/Approval_voting).\r\n\r\nMaybe the answer is that multiple choice should be expressed as separate exclusive proposals somehow.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1006704607/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1006758742",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3077#issuecomment-1006758742",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3077",
    "id": 1006758742,
    "node_id": "IC_kwDOA9tCBs48AetW",
    "user": {
      "login": "kalikho",
      "id": 42250206,
      "node_id": "MDQ6VXNlcjQyMjUwMjA2",
      "avatar_url": "https://avatars.githubusercontent.com/u/42250206?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kalikho",
      "html_url": "https://github.com/kalikho",
      "followers_url": "https://api.github.com/users/kalikho/followers",
      "following_url": "https://api.github.com/users/kalikho/following{/other_user}",
      "gists_url": "https://api.github.com/users/kalikho/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kalikho/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kalikho/subscriptions",
      "organizations_url": "https://api.github.com/users/kalikho/orgs",
      "repos_url": "https://api.github.com/users/kalikho/repos",
      "events_url": "https://api.github.com/users/kalikho/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kalikho/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-01-06T17:11:46Z",
    "updated_at": "2022-01-06T17:11:46Z",
    "author_association": "NONE",
    "body": "Can a multi-choice proposal be thought of a single proposal with many sub-proposals as multiple choice options ? Also, can there be any provision for giving numeric score votes for the sub-proposals with already existing votes (for, against and abstain). \r\n \r\nConsider a scenario for management of an asset. A proposal can be created with multiple sub-proposals as options such as the ownership duration, the minimum value price of the asset. Voters can vote for the proposal by giving their respective values for the options in case they are willing to do so or else they can simply abstain or reject. \r\n\r\nAt the end of the voting a suitable value for the sub-proposals can be obtained which can be an average of all the submitted values or any other suitable function.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1006758742/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1007526270",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3077#issuecomment-1007526270",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3077",
    "id": 1007526270,
    "node_id": "IC_kwDOA9tCBs48DaF-",
    "user": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-01-07T16:03:13Z",
    "updated_at": "2022-01-07T16:03:13Z",
    "author_association": "MEMBER",
    "body": "Multiple choice proposals are those where the outcome is not \"Yes or No\", but \"A or B or C or ...\".\r\n\r\nProposals with sub-proposals, or voting with numeric scores, sounds like different features.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1007526270/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1007626625",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3077#issuecomment-1007626625",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3077",
    "id": 1007626625,
    "node_id": "IC_kwDOA9tCBs48DymB",
    "user": {
      "login": "crazyrabbitLTC",
      "id": 1938013,
      "node_id": "MDQ6VXNlcjE5MzgwMTM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1938013?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/crazyrabbitLTC",
      "html_url": "https://github.com/crazyrabbitLTC",
      "followers_url": "https://api.github.com/users/crazyrabbitLTC/followers",
      "following_url": "https://api.github.com/users/crazyrabbitLTC/following{/other_user}",
      "gists_url": "https://api.github.com/users/crazyrabbitLTC/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/crazyrabbitLTC/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/crazyrabbitLTC/subscriptions",
      "organizations_url": "https://api.github.com/users/crazyrabbitLTC/orgs",
      "repos_url": "https://api.github.com/users/crazyrabbitLTC/repos",
      "events_url": "https://api.github.com/users/crazyrabbitLTC/events{/privacy}",
      "received_events_url": "https://api.github.com/users/crazyrabbitLTC/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-01-07T18:15:52Z",
    "updated_at": "2022-01-07T18:15:52Z",
    "author_association": "CONTRIBUTOR",
    "body": "I would mention that the situation where Proposal A and B are similar and thus both lose out to the least popular C, is not really IMHO within the scope of the smart contract implementation. I think it's difficult to design the content of the proposals. \r\n\r\nIf you were to provide multiple executable code packages, and then provide the ability to choose which one executes in multiple-choice format, that seems like a very useful tool. Contradicting my own advice above, you could imagine a situation where the proposal is addressing one desired goal, but the multiple-choice part is for voters to choose their preferred implementation of that goal. ",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1007626625/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1046451179",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3077#issuecomment-1046451179",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3077",
    "id": 1046451179,
    "node_id": "IC_kwDOA9tCBs4-X5Pr",
    "user": {
      "login": "LiveDuo",
      "id": 370612,
      "node_id": "MDQ6VXNlcjM3MDYxMg==",
      "avatar_url": "https://avatars.githubusercontent.com/u/370612?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/LiveDuo",
      "html_url": "https://github.com/LiveDuo",
      "followers_url": "https://api.github.com/users/LiveDuo/followers",
      "following_url": "https://api.github.com/users/LiveDuo/following{/other_user}",
      "gists_url": "https://api.github.com/users/LiveDuo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/LiveDuo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/LiveDuo/subscriptions",
      "organizations_url": "https://api.github.com/users/LiveDuo/orgs",
      "repos_url": "https://api.github.com/users/LiveDuo/repos",
      "events_url": "https://api.github.com/users/LiveDuo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/LiveDuo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-02-21T04:04:23Z",
    "updated_at": "2023-01-27T13:09:22Z",
    "author_association": "NONE",
    "body": "Hey,\r\n\r\nI’ve been looking for ways to implement multiple choice votes during the last week or two and just stumbled across this issue. Below I've written about my implementation, talk about an example and discuss some limitations of my implementation and possible ways to extend it.\r\n\r\n## Implementation\r\n\r\nThis POC allows creating a \"proposal with options\" where token holders can add options that other holders can vote on.\r\n\r\n- Extend propose function with [proposeWithOptions](https://github.com/LiveDuo/governance-example/blob/b8cfc84d90d4bf93c9512442c1842f12abfdf87c/contracts/governance/GovernorContract.sol#L115). This creates a new proposal with a data type (eg. int, address, bool). For example, a proposal with an address data type can only have addresses options to vote one.\r\n- Create an [addOptionToProposal](https://github.com/LiveDuo/governance-example/blob/b8cfc84d90d4bf93c9512442c1842f12abfdf87c/contracts/source/GovernorCountingExtended.sol#L152) method to allow adding options for voting. Options should respect the proposal data type. For example, a proposal with an address data type can only have addresses as options.\r\n- Extend [_countVote](https://github.com/LiveDuo/governance-example/blob/b8cfc84d90d4bf93c9512442c1842f12abfdf87c/contracts/source/GovernorCountingExtended.sol#L105) so that votes are counted against their respective data type. This extends `ProposalVote` to contain an `options` field and a `dataType` field. For example, a proposal with an address data type will addresses as voting options. The address with the most votes will be included in the execution payload.\r\n- Extend queue with [queueWithOptions](https://github.com/LiveDuo/governance-example/blob/b8cfc84d90d4bf93c9512442c1842f12abfdf87c/contracts/governance/GovernorContract.sol#L127) and execute with [queueWithOptions](https://github.com/LiveDuo/governance-example/blob/b8cfc84d90d4bf93c9512442c1842f12abfdf87c/contracts/governance/GovernorContract.sol#L150) so the proposal queues and execute with calldata that include the parameter of the successful vote.\r\n\r\nRelevant Contracts: [GovernorContract.sol](https://github.com/LiveDuo/governance-example/blob/feature/multiple-options/contracts/governance/GovernorContract.sol) & [GovernorCountingExtended.sol](https://github.com/LiveDuo/governance-example/blob/feature/multiple-options/contracts/source/GovernorCountingExtended.sol)\r\n\r\n## Example\r\n\r\nConsider a DAO that requires a real world action. This DAO can have an address hardcoded that will receive some funds to perform the real-world action or it can create a vote where anyone can apply with their address.\r\n\r\nSo any holder can proposal a transfer of ETH to the `parameter` address. Holders of the DAO token can add their address as a parameter. The address with the most votes will receive the ETH if the proposal succeeds.\r\n\r\n### Proposal Succeeded Scenario\r\n\r\nProposal: Transfer 2 ETH to parameter\r\nOptions: Address A, Address B, Address C, Abstain\r\nVotes: Address A (60%), Address B (20%), Address C (10%), Abstain (10%)\r\nResult: The \"Address A\" will receive 2 ETH\r\n\r\n### Proposal Fail Scenario\r\n\r\nProposal: Transfer 2 ETH to parameter\r\nOptions: Address A, Address B, Address C, Abstain\r\nVotes: Address A (10%), Address B (20%), Address C (10%), Abstain (60%)\r\nResult: Nothing will happen\r\n\r\n## Remarks\r\n\r\n#### Backwards Compatibility\r\nThis is only backwards compatible with Compound Governance. So dashboards that only support Compound contracts won't fully work. It may be possible to create something that is completely compatible by creating multiple proposals and only allowing queuing and executing the one with the most votes. It seems a bit complex so I’m just throwing out the idea.\r\n\r\n#### Adding Option Restrictions\r\nAnother thing to consider is restrictions in adding proposal options (ie. `addOptionToProposal` function). These should be fairly easy to extend the current implementation to support them. Possibilities include: quorum based limitations, pay to add a proposal, admin approval, restrict add options to only the proposal creator etc.\r\n\r\n#### Counting Method\r\nIn the example code a proposal is succeeds if the sum proposal weighted votes is greater than the against votes. Another possible option is to require that the maximum votes is greater than against votes.\r\n\r\n#### Voting System\r\nThe new propose function is a simple “plurality voting” system. It should be fairly easy to implement “approval voting” with minor adjustments to the `_countVote` method. Other systems that are multi round (eg. exhaustive ballot or instant-runoff) are not as similar and will require more changes to work.\r\n\r\nPS: The example code above is a prototype and is expected to contain a quite a few bugs.\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1046451179/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 1,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1324155750",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3077#issuecomment-1324155750",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3077",
    "id": 1324155750,
    "node_id": "IC_kwDOA9tCBs5O7QNm",
    "user": {
      "login": "yehted",
      "id": 7292663,
      "node_id": "MDQ6VXNlcjcyOTI2NjM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7292663?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/yehted",
      "html_url": "https://github.com/yehted",
      "followers_url": "https://api.github.com/users/yehted/followers",
      "following_url": "https://api.github.com/users/yehted/following{/other_user}",
      "gists_url": "https://api.github.com/users/yehted/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/yehted/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/yehted/subscriptions",
      "organizations_url": "https://api.github.com/users/yehted/orgs",
      "repos_url": "https://api.github.com/users/yehted/repos",
      "events_url": "https://api.github.com/users/yehted/events{/privacy}",
      "received_events_url": "https://api.github.com/users/yehted/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-11-22T19:40:33Z",
    "updated_at": "2022-11-22T19:40:33Z",
    "author_association": "NONE",
    "body": "What about something like https://eips.ethereum.org/EIPS/eip-1202, specifically the `IERC1202MultiVote` interface? I'm interested in something like this as well, and I just extended the OZ governor to implement that interface (although I did have to write my own custom counting module to tally up the multivote).",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1324155750/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1328150865",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3077#issuecomment-1328150865",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3077",
    "id": 1328150865,
    "node_id": "IC_kwDOA9tCBs5PKflR",
    "user": {
      "login": "nambrot",
      "id": 571810,
      "node_id": "MDQ6VXNlcjU3MTgxMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/571810?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nambrot",
      "html_url": "https://github.com/nambrot",
      "followers_url": "https://api.github.com/users/nambrot/followers",
      "following_url": "https://api.github.com/users/nambrot/following{/other_user}",
      "gists_url": "https://api.github.com/users/nambrot/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nambrot/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nambrot/subscriptions",
      "organizations_url": "https://api.github.com/users/nambrot/orgs",
      "repos_url": "https://api.github.com/users/nambrot/repos",
      "events_url": "https://api.github.com/users/nambrot/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nambrot/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-11-27T01:54:24Z",
    "updated_at": "2022-11-27T01:54:24Z",
    "author_association": "NONE",
    "body": "Just wanted to leave a comment on here that we would love to collaborate with anybody interested in creating some kind of more flexible option. Even having the current simple Yes/No options be able to execute two different payloads would be progress in my opinion. A use case we have in mind is being able to vote on L2 where the governance contract holds some kind of voting power that it can then use on L1. Currently, a non-passing vote will not cause a no-vote on L1.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1328150865/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1447470548",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3077#issuecomment-1447470548",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3077",
    "id": 1447470548,
    "node_id": "IC_kwDOA9tCBs5WRqXU",
    "user": {
      "login": "0xShin0221",
      "id": 1934985,
      "node_id": "MDQ6VXNlcjE5MzQ5ODU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1934985?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/0xShin0221",
      "html_url": "https://github.com/0xShin0221",
      "followers_url": "https://api.github.com/users/0xShin0221/followers",
      "following_url": "https://api.github.com/users/0xShin0221/following{/other_user}",
      "gists_url": "https://api.github.com/users/0xShin0221/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/0xShin0221/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/0xShin0221/subscriptions",
      "organizations_url": "https://api.github.com/users/0xShin0221/orgs",
      "repos_url": "https://api.github.com/users/0xShin0221/repos",
      "events_url": "https://api.github.com/users/0xShin0221/events{/privacy}",
      "received_events_url": "https://api.github.com/users/0xShin0221/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-02-28T02:24:54Z",
    "updated_at": "2023-02-28T02:25:17Z",
    "author_association": "NONE",
    "body": "I have immense gratitude and respect for @LiveDuo  for actually implementing such an example.\r\n\r\nI have been contemplating this issue for a few days now, and it seems that making private variables public in [the patch section](https://github.com/LiveDuo/governance-example/blob/feature/multiple-options/patches/%40openzeppelin%2Bcontracts%2B4.4.1.patch) could have various implications including potential security risks.\r\n\r\nthe patch:\r\nhttps://github.com/LiveDuo/governance-example/blob/feature/multiple-options/patches/%40openzeppelin%2Bcontracts%2B4.4.1.patch\r\n\r\n\r\nI also tried to focus on this area and attempted my own implementation, but it ended up being complicated with extensions to the governors and timelocks, as well as the need to handle the relevant patch’s issue like _proposals and _timelockIds in new storage as another name.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1447470548/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1450286066",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3077#issuecomment-1450286066",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3077",
    "id": 1450286066,
    "node_id": "IC_kwDOA9tCBs5WcZvy",
    "user": {
      "login": "LiveDuo",
      "id": 370612,
      "node_id": "MDQ6VXNlcjM3MDYxMg==",
      "avatar_url": "https://avatars.githubusercontent.com/u/370612?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/LiveDuo",
      "html_url": "https://github.com/LiveDuo",
      "followers_url": "https://api.github.com/users/LiveDuo/followers",
      "following_url": "https://api.github.com/users/LiveDuo/following{/other_user}",
      "gists_url": "https://api.github.com/users/LiveDuo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/LiveDuo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/LiveDuo/subscriptions",
      "organizations_url": "https://api.github.com/users/LiveDuo/orgs",
      "repos_url": "https://api.github.com/users/LiveDuo/repos",
      "events_url": "https://api.github.com/users/LiveDuo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/LiveDuo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-03-01T14:56:53Z",
    "updated_at": "2023-03-01T14:56:53Z",
    "author_association": "NONE",
    "body": "@0xShin0221 Glad you had a deeper look.\r\n\r\n> I have been contemplating this issue for a few days now, and it seems that making private variables public in [the patch section](https://github.com/LiveDuo/governance-example/blob/feature/multiple-options/patches/%40openzeppelin%2Bcontracts%2B4.4.1.patch) could have various implications including potential security risks.\r\n\r\nI want to better understand the issue with the variables been public you have in mind. There's a problem with the variables been accessible from the smart contracts that imports governance which makes it easy update these variables by mistake. Then there's the issue of exposing these functions polluting the smart contract interface. Are there more security issues that I may be missing?\r\n\r\n---\r\nAs a side note, I see these variable been public is not ideal. The reason I made them that way was to have minimal patches in the governor contracts and make it easy for other people who are familiar to understand my example.\r\n\r\nA way to overcome the public variable might be to merge the code from [GovernorContract.sol](https://github.com/LiveDuo/governance-example/blob/feature/multiple-options/contracts/governance/GovernorContract.sol) and [openzeppelin-contracts/../Governor.sol](https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v4.4/contracts/governance/Governor.sol) into a new contract where there is access to `_proposals` and similarly [openzeppelin-contracts/../GovernorTimelockControl.sol](https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v4.4/contracts/governance/extensions/GovernorTimelockControl.sol) to access `_timelock` and `_timelockIds`.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1450286066/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
