{
  "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2187",
  "repository_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts",
  "labels_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2187/labels{/name}",
  "comments_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2187/comments",
  "events_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2187/events",
  "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2187",
  "id": 600245703,
  "node_id": "MDU6SXNzdWU2MDAyNDU3MDM=",
  "number": 2187,
  "title": "ERC721: Allow for lower-gas-cost minting with sequential IDs (and no burning)",
  "user": {
    "login": "KaiRo-at",
    "id": 824140,
    "node_id": "MDQ6VXNlcjgyNDE0MA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/824140?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/KaiRo-at",
    "html_url": "https://github.com/KaiRo-at",
    "followers_url": "https://api.github.com/users/KaiRo-at/followers",
    "following_url": "https://api.github.com/users/KaiRo-at/following{/other_user}",
    "gists_url": "https://api.github.com/users/KaiRo-at/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/KaiRo-at/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/KaiRo-at/subscriptions",
    "organizations_url": "https://api.github.com/users/KaiRo-at/orgs",
    "repos_url": "https://api.github.com/users/KaiRo-at/repos",
    "events_url": "https://api.github.com/users/KaiRo-at/events{/privacy}",
    "received_events_url": "https://api.github.com/users/KaiRo-at/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 14,
  "created_at": "2020-04-15T12:03:30Z",
  "updated_at": "2022-11-29T14:45:29Z",
  "closed_at": "2022-09-16T20:53:42Z",
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "As discussed in https://github.com/OpenZeppelin/openzeppelin-contracts/pull/2160#issuecomment-611035080 and the following comments, the merging of contracts in #2160 took away the possibility of an optimization that we at Capacity used e.g. for Crypto stamp Edition 1 and want to be using again in future projects (we have one going right now where we need it).\r\n\r\nIn those projects, we previously could replace the `ERC721Enumerable` implementation with an `ERC721EnumerableSimple` variant (see [Crypto stamp 1 code](https://etherscan.io/address/0x7e789E2dd1340971De0A9bca35b14AC0939Aa330#code), starting at line 534), which could save us two `SSTORE`s (40k gas) per token on minting, which sums up to quite some money when minting 150k tokens like we did there.\r\nOf course, this optimization does not work when token IDs can be random, but for those collectibles, we already had the requirements in place that:\r\n\r\n-  token IDs start with 0 and are strictly sequential\r\n- and tokens cannot be burned\r\n\r\nWhen those two requirements are in place (which can be not just for those collectibles which always have a physical \"twin\" but also in a number of other cases), we know that in `tokenByIndex()`, the `index` and `tokenId` are always the same - and that allows for removing the back-end to this function and that saves us that gas on minting.\r\n\r\nIn the OpenZeppelin 2.x structure, the main `ERC721.sol` implementation could still be reused with this approach by just replacing `ERC721Enumerable` - but in OpenZeppelin 3.0, with the merged `ERC721.sol`, this is not possible that easily.\r\nIt would be great if there was a way to do this still in the future.",
  "closed_by": {
    "login": "frangio",
    "id": 481465,
    "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
    "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/frangio",
    "html_url": "https://github.com/frangio",
    "followers_url": "https://api.github.com/users/frangio/followers",
    "following_url": "https://api.github.com/users/frangio/following{/other_user}",
    "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
    "organizations_url": "https://api.github.com/users/frangio/orgs",
    "repos_url": "https://api.github.com/users/frangio/repos",
    "events_url": "https://api.github.com/users/frangio/events{/privacy}",
    "received_events_url": "https://api.github.com/users/frangio/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2187/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2187/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/613997547",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2187#issuecomment-613997547",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2187",
    "id": 613997547,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYxMzk5NzU0Nw==",
    "user": {
      "login": "KaiRo-at",
      "id": 824140,
      "node_id": "MDQ6VXNlcjgyNDE0MA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/824140?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/KaiRo-at",
      "html_url": "https://github.com/KaiRo-at",
      "followers_url": "https://api.github.com/users/KaiRo-at/followers",
      "following_url": "https://api.github.com/users/KaiRo-at/following{/other_user}",
      "gists_url": "https://api.github.com/users/KaiRo-at/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/KaiRo-at/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/KaiRo-at/subscriptions",
      "organizations_url": "https://api.github.com/users/KaiRo-at/orgs",
      "repos_url": "https://api.github.com/users/KaiRo-at/repos",
      "events_url": "https://api.github.com/users/KaiRo-at/events{/privacy}",
      "received_events_url": "https://api.github.com/users/KaiRo-at/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-04-15T12:06:40Z",
    "updated_at": "2020-04-15T12:06:40Z",
    "author_association": "CONTRIBUTOR",
    "body": "A solution I did in our projects for the moment is to have a full copy of `ERC721.sol` with only the `EnumerableMap` library replaced, the changed library has those changes:\r\n\r\n```diff\r\n--- openzeppelin-contracts/utils/EnumerableMap.sol      1985-10-26 09:15:00.000000000 +0100\r\n+++ contracts/EnumerableMapSimple.sol   2020-04-14 18:07:43.454981171 +0200\r\n@@ -1,6 +1,6 @@\r\n pragma solidity ^0.6.0;\r\n \r\n-library EnumerableMap {\r\n+library EnumerableMapSimple {\r\n     // To implement this library for multiple types with as little code\r\n     // repetition as possible, we write it in terms of a generic Map type with\r\n     // bytes32 keys and values.\r\n@@ -10,18 +10,9 @@\r\n     // This means that we can only create new EnumerableMaps for types that fit\r\n     // in bytes32.\r\n \r\n-    struct MapEntry {\r\n-        bytes32 _key;\r\n-        bytes32 _value;\r\n-    }\r\n-\r\n     struct Map {\r\n         // Storage of map keys and values\r\n-        MapEntry[] _entries;\r\n-\r\n-        // Position of the entry defined by a key in the `entries` array, plus 1\r\n-        // because index 0 means a key is not in the map.\r\n-        mapping (bytes32 => uint256) _indexes;\r\n+        bytes32[] _entries;\r\n     }\r\n \r\n     /**\r\n@@ -32,17 +23,14 @@\r\n      * already present.\r\n      */\r\n     function _set(Map storage map, bytes32 key, bytes32 value) private returns (bool) {\r\n-        // We read and store the key's index to prevent multiple reads from the same storage slot\r\n-        uint256 keyIndex = map._indexes[key];\r\n+        uint256 uintKey = uint256(key);\r\n+        require(uintKey <= map._entries.length, \"Cannot add entry that is not connected to existing IDs\");\r\n \r\n-        if (keyIndex == 0) { // Equivalent to !contains(map, key)\r\n-            map._entries.push(MapEntry({ _key: key, _value: value }));\r\n-            // The entry is stored at length-1, but we add 1 to all indexes\r\n-            // and use 0 as a sentinel value\r\n-            map._indexes[key] = map._entries.length;\r\n+        if (uintKey == map._entries.length) { // add new entry\r\n+            map._entries.push(value);\r\n             return true;\r\n         } else {\r\n-            map._entries[keyIndex - 1]._value = value;\r\n+            map._entries[uintKey] = value;\r\n             return false;\r\n         }\r\n     }\r\n@@ -52,45 +40,15 @@\r\n      *\r\n      * Returns true if the key was removed from the map, that is if it was present.\r\n      */\r\n-    function _remove(Map storage map, bytes32 key) private returns (bool) {\r\n-        // We read and store the key's index to prevent multiple reads from the same storage slot\r\n-        uint256 keyIndex = map._indexes[key];\r\n-\r\n-        if (keyIndex != 0) { // Equivalent to contains(map, key)\r\n-            // To delete a key-value pair from the _entries array in O(1), we swap the entry to delete with the last one\r\n-            // in the array, and then remove the last entry (sometimes called as 'swap and pop').\r\n-            // This modifies the order of the array, as noted in {at}.\r\n-\r\n-            uint256 toDeleteIndex = keyIndex - 1;\r\n-            uint256 lastIndex = map._entries.length - 1;\r\n-\r\n-            // When the entry to delete is the last one, the swap operation is unnecessary. However, since this occurs\r\n-            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\r\n-\r\n-            MapEntry storage lastEntry = map._entries[lastIndex];\r\n-\r\n-            // Move the last entry to the index where the entry to delete is\r\n-            map._entries[toDeleteIndex] = lastEntry;\r\n-            // Update the index for the moved entry\r\n-            map._indexes[lastEntry._key] = toDeleteIndex + 1; // All indexes are 1-based\r\n-\r\n-            // Delete the slot where the moved entry was stored\r\n-            map._entries.pop();\r\n-\r\n-            // Delete the index for the deleted slot\r\n-            delete map._indexes[key];\r\n-\r\n-            return true;\r\n-        } else {\r\n-            return false;\r\n-        }\r\n+    function _remove(Map storage /*map*/, bytes32 /*key*/) private pure returns (bool) {\r\n+        revert(\"No removal supported\");\r\n     }\r\n \r\n     /**\r\n      * @dev Returns true if the key is in the map. O(1).\r\n      */\r\n     function _contains(Map storage map, bytes32 key) private view returns (bool) {\r\n-        return map._indexes[key] != 0;\r\n+        return uint256(key) < map._entries.length;\r\n     }\r\n \r\n     /**\r\n@@ -112,9 +70,7 @@\r\n     */\r\n     function _at(Map storage map, uint256 index) private view returns (bytes32, bytes32) {\r\n         require(map._entries.length > index, \"EnumerableMap: index out of bounds\");\r\n-\r\n-        MapEntry storage entry = map._entries[index];\r\n-        return (entry._key, entry._value);\r\n+        return (bytes32(index), map._entries[index]);\r\n     }\r\n \r\n     /**\r\n@@ -132,9 +88,9 @@\r\n      * @dev Same as {_get}, with a custom error message when `key` is not in the map.\r\n      */\r\n     function _get(Map storage map, bytes32 key, string memory errorMessage) private view returns (bytes32) {\r\n-        uint256 keyIndex = map._indexes[key];\r\n-        require(keyIndex != 0, errorMessage); // Equivalent to contains(map, key)\r\n-        return map._entries[keyIndex - 1]._value; // All indexes are 1-based\r\n+        uint256 uintKey = uint256(key);\r\n+        require(map._entries.length > uintKey, errorMessage); // Equivalent to contains(map, key)\r\n+        return map._entries[uintKey];\r\n     }\r\n \r\n     // UintToAddressMap\r\n@@ -159,7 +115,7 @@\r\n      *\r\n      * Returns true if the key was removed from the map, that is if it was present.\r\n      */\r\n-    function remove(UintToAddressMap storage map, uint256 key) internal returns (bool) {\r\n+    function remove(UintToAddressMap storage map, uint256 key) internal view returns (bool) {\r\n         return _remove(map._inner, bytes32(key));\r\n     }\r\n ```\r\n\r\nWith that, I can reclaim those 40k gas per token on minting and not touch the actual ERC721 implementation code, keeping custom changes confined to this library. Unfortunately, I still need a full copy of `ERC721.sol` as Solidity doesn't allow just overriding a used library.\r\nBut maybe we can find a better solution here that actually allows real reuse of the OpenZeppelin code.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/613997547/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/624257957",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2187#issuecomment-624257957",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2187",
    "id": 624257957,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYyNDI1Nzk1Nw==",
    "user": {
      "login": "nventuro",
      "id": 2530770,
      "node_id": "MDQ6VXNlcjI1MzA3NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2530770?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nventuro",
      "html_url": "https://github.com/nventuro",
      "followers_url": "https://api.github.com/users/nventuro/followers",
      "following_url": "https://api.github.com/users/nventuro/following{/other_user}",
      "gists_url": "https://api.github.com/users/nventuro/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nventuro/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nventuro/subscriptions",
      "organizations_url": "https://api.github.com/users/nventuro/orgs",
      "repos_url": "https://api.github.com/users/nventuro/repos",
      "events_url": "https://api.github.com/users/nventuro/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nventuro/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-05-05T19:26:00Z",
    "updated_at": "2020-05-05T19:26:00Z",
    "author_association": "CONTRIBUTOR",
    "body": "This is an interesting limitation of the Contracts library and Solidity in general. The behavior you want to change is encapsulated inside `EnumerableMap` (as can be seem by you fixing the issue by just modifying that library), but the notions of overriding library functions or inyecting dependencies don't exist in the language.\r\n\r\nWe saw something similar happen in an ERC777 contract, where a user wanted to store balances in a different data structure and had to end up with duplicated entries (both the original and their custom ones).\r\n\r\n@chriseth I believe you mentioned during the Solidity Summit wanting to extend what can be done with internal functions in libraries (soon to be free functions) - have you considered mechanisms to replace or otherwise modifiy them as discussed here? ",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/624257957/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/624693877",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2187#issuecomment-624693877",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2187",
    "id": 624693877,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYyNDY5Mzg3Nw==",
    "user": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-05-06T14:47:40Z",
    "updated_at": "2020-05-06T14:48:29Z",
    "author_association": "MEMBER",
    "body": "This could be achieve with templatized contracts. The template parameter would be the library used, and we'd have a default value but the user would be able to replace it.\r\n\r\nFree functions would actually go against this idea.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/624693877/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/624865713",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2187#issuecomment-624865713",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2187",
    "id": 624865713,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYyNDg2NTcxMw==",
    "user": {
      "login": "nventuro",
      "id": 2530770,
      "node_id": "MDQ6VXNlcjI1MzA3NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2530770?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nventuro",
      "html_url": "https://github.com/nventuro",
      "followers_url": "https://api.github.com/users/nventuro/followers",
      "following_url": "https://api.github.com/users/nventuro/following{/other_user}",
      "gists_url": "https://api.github.com/users/nventuro/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nventuro/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nventuro/subscriptions",
      "organizations_url": "https://api.github.com/users/nventuro/orgs",
      "repos_url": "https://api.github.com/users/nventuro/repos",
      "events_url": "https://api.github.com/users/nventuro/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nventuro/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-05-06T20:13:54Z",
    "updated_at": "2020-05-06T20:13:54Z",
    "author_association": "CONTRIBUTOR",
    "body": ">Free functions would actually go against this idea.\r\n\r\nBecause you'd need to have a concept of a group of internal functions? (what is now sort of  achieved with `library`)",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/624865713/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/624919093",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2187#issuecomment-624919093",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2187",
    "id": 624919093,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYyNDkxOTA5Mw==",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-05-06T22:13:45Z",
    "updated_at": "2020-05-06T22:13:45Z",
    "author_association": "CONTRIBUTOR",
    "body": "I'm sorry, I have a hard time grasping the gist of this issue or the question by you, @nventuro.\r\nI would be very much interested, though, in how templates can help and why free functions are a problem (or which aspect of free functions).",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/624919093/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/635648753",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2187#issuecomment-635648753",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2187",
    "id": 635648753,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYzNTY0ODc1Mw==",
    "user": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-05-28T22:48:50Z",
    "updated_at": "2020-05-28T22:49:53Z",
    "author_association": "MEMBER",
    "body": "@chriseth Sorry for the delay in replying. This issue is a request for the ability to customize how one of our contracts works, but it's a kind of internal customization that we can't provide without more advanced language support. An example of a language construct that would help would be (bounded) templates to parameterize the data structure we use internally, so that users would be able to swap that out with an alternative that has added (or removed) features according to their needs.\r\n\r\nFree functions wouldn't be a problem, but this pattern would not work with _only_ free functions because the contract would need to be parameterized with the whole data structure + functions bundle.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/635648753/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/635871549",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2187#issuecomment-635871549",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2187",
    "id": 635871549,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYzNTg3MTU0OQ==",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-05-29T09:23:47Z",
    "updated_at": "2020-05-29T09:23:47Z",
    "author_association": "CONTRIBUTOR",
    "body": "OK, I think I understand the problem better now. I fear that templates are not really the solution here. Templates, at least as we currently envision them, are pieces of code that can be applied to different datatypes, but the code will always look the same. I'm not sure if libraries would qualify for data types, though.\r\n\r\nAs far as I see, EnumerableMapSimple more or less exchanges the complete code of EnumerableMap. Why can't it be its own library?",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/635871549/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/638269688",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2187#issuecomment-638269688",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2187",
    "id": 638269688,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYzODI2OTY4OA==",
    "user": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-06-03T15:24:29Z",
    "updated_at": "2020-06-03T15:24:29Z",
    "author_association": "MEMBER",
    "body": "@chriseth I see what you mean. I think my suggestion was based on languages that have custom datatypes with attached functions, and it's easy to mistake the struct+library combo as that, even though it isn't.\r\n\r\nThe language features required for what I mentioned are too far from current Solidity, so I think we can leave this on the side now until some time in the future. Thanks for taking the time to join the conversation!\r\n\r\nOn your last paragraph, the goal would not be changing `EnumerableMap` itself, but the internal data structure used by `ERC721Enumerable` which is by default `EnumerableMap`.\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/638269688/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1042976116",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2187#issuecomment-1042976116",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2187",
    "id": 1042976116,
    "node_id": "IC_kwDOA9tCBs4-Ko10",
    "user": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-02-17T13:57:17Z",
    "updated_at": "2022-02-17T13:57:17Z",
    "author_association": "MEMBER",
    "body": "There has been quite a bit of interest in this feature in the past few months. The [\"ERC721A\"](https://www.azuki.com/erc721a) implementation by Azuki makes same tradeoffs (that we consider unacceptable) with the purpose of enabling cheap batch minting. \r\n\r\nWe want to revisit this and see if there's a way to implement cheap batch minting with acceptable tradeoffs.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1042976116/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1086750628",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2187#issuecomment-1086750628",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2187",
    "id": 1086750628,
    "node_id": "IC_kwDOA9tCBs5Axn-k",
    "user": {
      "login": "rubo",
      "id": 337518,
      "node_id": "MDQ6VXNlcjMzNzUxOA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/337518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rubo",
      "html_url": "https://github.com/rubo",
      "followers_url": "https://api.github.com/users/rubo/followers",
      "following_url": "https://api.github.com/users/rubo/following{/other_user}",
      "gists_url": "https://api.github.com/users/rubo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rubo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rubo/subscriptions",
      "organizations_url": "https://api.github.com/users/rubo/orgs",
      "repos_url": "https://api.github.com/users/rubo/repos",
      "events_url": "https://api.github.com/users/rubo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rubo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-04-03T00:45:07Z",
    "updated_at": "2022-04-03T00:45:07Z",
    "author_association": "NONE",
    "body": "@frangio Could you please elaborate on what tradeoffs exactly you mean?",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1086750628/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1091022104",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2187#issuecomment-1091022104",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2187",
    "id": 1091022104,
    "node_id": "IC_kwDOA9tCBs5BB60Y",
    "user": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-04-07T02:47:26Z",
    "updated_at": "2022-04-07T02:47:26Z",
    "author_association": "MEMBER",
    "body": "@rubo Functions like `tokenOfOwnerByIndex` use unbounded loops. Please see this thread: https://forum.openzeppelin.com/t/erc721enumerable-gas-optimization/22795\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1091022104/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1249802586",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2187#issuecomment-1249802586",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2187",
    "id": 1249802586,
    "node_id": "IC_kwDOA9tCBs5Kfnla",
    "user": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-09-16T20:53:42Z",
    "updated_at": "2022-09-16T20:53:42Z",
    "author_association": "MEMBER",
    "body": "Fixed in https://github.com/OpenZeppelin/openzeppelin-contracts/pull/3311.\r\n\r\nCurrently in release candidate.\r\n\r\nNote: Burning is available even for consecutive mints.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1249802586/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1329870996",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2187#issuecomment-1329870996",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2187",
    "id": 1329870996,
    "node_id": "IC_kwDOA9tCBs5PRDiU",
    "user": {
      "login": "xinbenlv",
      "id": 640325,
      "node_id": "MDQ6VXNlcjY0MDMyNQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/640325?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/xinbenlv",
      "html_url": "https://github.com/xinbenlv",
      "followers_url": "https://api.github.com/users/xinbenlv/followers",
      "following_url": "https://api.github.com/users/xinbenlv/following{/other_user}",
      "gists_url": "https://api.github.com/users/xinbenlv/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/xinbenlv/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/xinbenlv/subscriptions",
      "organizations_url": "https://api.github.com/users/xinbenlv/orgs",
      "repos_url": "https://api.github.com/users/xinbenlv/repos",
      "events_url": "https://api.github.com/users/xinbenlv/events{/privacy}",
      "received_events_url": "https://api.github.com/users/xinbenlv/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-11-28T23:10:37Z",
    "updated_at": "2022-11-28T23:11:04Z",
    "author_association": "CONTRIBUTOR",
    "body": "FYI, compatibility issue of EIP-2309 with ERC-721 have been raised per [this discussion](https://github.com/OpenZeppelin/openzeppelin-contracts/pull/3311#issuecomment-1329848927) and [this discussion](https://ethereum-magicians.org/t/eip-6047-extend-erc-721-to-support-balance-counting-via-transfer-event/11894/9)",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1329870996/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1330759208",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2187#issuecomment-1330759208",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2187",
    "id": 1330759208,
    "node_id": "IC_kwDOA9tCBs5PUcYo",
    "user": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-11-29T14:45:29Z",
    "updated_at": "2022-11-29T14:45:29Z",
    "author_association": "MEMBER",
    "body": "There is no compatibility issue. Please open a new issue if you still believe otherwise.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1330759208/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
