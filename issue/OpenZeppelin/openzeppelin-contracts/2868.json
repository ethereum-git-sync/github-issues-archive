{
  "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2868",
  "repository_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts",
  "labels_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2868/labels{/name}",
  "comments_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2868/comments",
  "events_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2868/events",
  "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2868",
  "id": 999135197,
  "node_id": "I_kwDOA9tCBs47jZfd",
  "number": 2868,
  "title": "Extract Checkpointing functionality from ERC20Votes",
  "user": {
    "login": "cygnusv",
    "id": 2564234,
    "node_id": "MDQ6VXNlcjI1NjQyMzQ=",
    "avatar_url": "https://avatars.githubusercontent.com/u/2564234?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/cygnusv",
    "html_url": "https://github.com/cygnusv",
    "followers_url": "https://api.github.com/users/cygnusv/followers",
    "following_url": "https://api.github.com/users/cygnusv/following{/other_user}",
    "gists_url": "https://api.github.com/users/cygnusv/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/cygnusv/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/cygnusv/subscriptions",
    "organizations_url": "https://api.github.com/users/cygnusv/orgs",
    "repos_url": "https://api.github.com/users/cygnusv/repos",
    "events_url": "https://api.github.com/users/cygnusv/events{/privacy}",
    "received_events_url": "https://api.github.com/users/cygnusv/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 6,
  "created_at": "2021-09-17T09:17:23Z",
  "updated_at": "2021-12-14T21:36:27Z",
  "closed_at": "2021-12-14T21:36:27Z",
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "**üßê Motivation**\r\nCurrently Governor assumes the underlying voting source is an ERC20 token, which is fine in most cases. However, it would useful that other types of voting sources are allowed. \r\n\r\nFor example, current NuCypher DAO (which uses Aragon), only works for _stakers_ (not liquid holders), so all the checkpointing logic occurs in the staking contract, and not in the ERC20 token. We're currently working on a new DAO for the Threshold Network (which comprises both NuCypher and KEEP networks) and we plan to use Governor Bravo. Our idea is that governance will not be based solely on ERC20 tokens, but also on staked tokens, which means the same checkpointing logic will be used both in the token and staking contracts. \r\n\r\nFurthermore, we plan to combine both approaches (i.e., token-based and staking-based voting sources), so an aggregation layer would be ideal (we have experience with Aragon's [VotingAggregator](https://github.com/aragonone/voting-connectors/tree/master/apps/voting-aggregator) in current NuCypher DAO, and it has been working great).\r\n\r\nI'm already working on this, and I personally believe it would be great for these improvements to go upstream.\r\n\r\n**üìù Details**\r\n* Extract checkpointing logic from `ERC20Votes.sol`, and place it in a library/abstract contract.\r\n* Create an aggregation layer that's capable to collect votes from several sources, and aggregate them according to some logic (e.g., weighted average).\r\n* Define new interfaces that improve composability of Governor Bravo (particularly wrt to integration of voting sources)\r\n\r\n",
  "closed_by": {
    "login": "frangio",
    "id": 481465,
    "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
    "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/frangio",
    "html_url": "https://github.com/frangio",
    "followers_url": "https://api.github.com/users/frangio/followers",
    "following_url": "https://api.github.com/users/frangio/following{/other_user}",
    "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
    "organizations_url": "https://api.github.com/users/frangio/orgs",
    "repos_url": "https://api.github.com/users/frangio/repos",
    "events_url": "https://api.github.com/users/frangio/events{/privacy}",
    "received_events_url": "https://api.github.com/users/frangio/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2868/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2868/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/921822047",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2868#issuecomment-921822047",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2868",
    "id": 921822047,
    "node_id": "IC_kwDOA9tCBs428eNf",
    "user": {
      "login": "Amxx",
      "id": 2432299,
      "node_id": "MDQ6VXNlcjI0MzIyOTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2432299?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Amxx",
      "html_url": "https://github.com/Amxx",
      "followers_url": "https://api.github.com/users/Amxx/followers",
      "following_url": "https://api.github.com/users/Amxx/following{/other_user}",
      "gists_url": "https://api.github.com/users/Amxx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Amxx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Amxx/subscriptions",
      "organizations_url": "https://api.github.com/users/Amxx/orgs",
      "repos_url": "https://api.github.com/users/Amxx/repos",
      "events_url": "https://api.github.com/users/Amxx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Amxx/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-09-17T14:02:37Z",
    "updated_at": "2021-09-17T14:02:37Z",
    "author_association": "COLLABORATOR",
    "body": "Hello @cygnusv \r\n\r\nCurrently, the governor does NOT assume the underlying voting source is an ERC20 token. This logic is implemented by the \"Votes\" modules, which currently comes in 3 different flavors:\r\n\r\n- `GovernorVotes`: for when your voting source is an ERC20Votes\r\n- `GovernorVotesQuorumFraction`: for when your voting source is an ERC20Votes and you want your quorum to be a fraction of the total supply\r\n- `GovernorVotesComp`: for when your voting source is a Comp fork\r\n\r\nIf you want to vote using something else (NFTs, sum of the balances of 2 tokens, proof of humanity, ...) you \"just\" have to write your own \"Votes\" module for the governor.\r\n\r\nTo do so:\r\n- create a new contract that inherits \"@openzeppelin/contracts/governance/Governor.sol\" \r\n- add other modules as you need them (timelock, counting, ...)\r\n- add a `function getVotes(address account, uint256 blockNumber) public view virtual override returns (uint256)` function with your custom logic\r\n\r\nAnd you should be good to go!",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/921822047/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/923894188",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2868#issuecomment-923894188",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2868",
    "id": 923894188,
    "node_id": "IC_kwDOA9tCBs43EYGs",
    "user": {
      "login": "ivanminutillo",
      "id": 1852065,
      "node_id": "MDQ6VXNlcjE4NTIwNjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1852065?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ivanminutillo",
      "html_url": "https://github.com/ivanminutillo",
      "followers_url": "https://api.github.com/users/ivanminutillo/followers",
      "following_url": "https://api.github.com/users/ivanminutillo/following{/other_user}",
      "gists_url": "https://api.github.com/users/ivanminutillo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ivanminutillo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ivanminutillo/subscriptions",
      "organizations_url": "https://api.github.com/users/ivanminutillo/orgs",
      "repos_url": "https://api.github.com/users/ivanminutillo/repos",
      "events_url": "https://api.github.com/users/ivanminutillo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ivanminutillo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-09-21T11:33:15Z",
    "updated_at": "2021-09-21T11:33:15Z",
    "author_association": "NONE",
    "body": "Hi @Amxx I'd like to figure out a basic governance system using an ERC721 token. From your summary (but I am way naive in the solidity realm) to have a duplicate of the actual governor that use NFTs,  it is mostly about duplicating existing contracts and replacing erc20 with erc721 ?\r\n\r\nBasically:\r\n\r\n- Create a `GovernorERC721Votes.sol` that will be added to the existing flavors\r\n```\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"../Governor.sol\";\r\nimport \"../../token/ERC721/extensions/ERC721Votes.sol\";\r\nimport \"../../utils/math/Math.sol\";\r\n\r\n/**\r\n * @dev Extension of {Governor} for voting weight extraction from an {ERC721Votes} token.\r\n *\r\n * _Available since v4.3._\r\n */\r\nabstract contract GovernorERC721Votes is Governor {\r\n    ERC721Votes public immutable token;\r\n\r\n    constructor(ERC721Votes tokenAddress) {\r\n        token = tokenAddress;\r\n    }\r\n\r\n    /**\r\n     * Read the voting weight from the token's built in snapshot mechanism (see {IGovernor-getVotes}).\r\n     */\r\n    function getVotes(address account, uint256 blockNumber) public view virtual override returns (uint256) {\r\n        return token.getPastVotes(account, blockNumber);\r\n    }\r\n}\r\n```\r\n- Clone `ERC20Votes.sol` as `ERC721Votes.sol` extension (that inherit its own `draft-ERC721Permit.sol` contract to enable signatures for delegating votes)\r\n\r\n Does it make sense at all? ps. Do you think it's better to move it on a dedicate issue?\r\n Thasks for your work :)",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/923894188/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/923896249",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2868#issuecomment-923896249",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2868",
    "id": 923896249,
    "node_id": "IC_kwDOA9tCBs43EYm5",
    "user": {
      "login": "Amxx",
      "id": 2432299,
      "node_id": "MDQ6VXNlcjI0MzIyOTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2432299?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Amxx",
      "html_url": "https://github.com/Amxx",
      "followers_url": "https://api.github.com/users/Amxx/followers",
      "following_url": "https://api.github.com/users/Amxx/following{/other_user}",
      "gists_url": "https://api.github.com/users/Amxx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Amxx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Amxx/subscriptions",
      "organizations_url": "https://api.github.com/users/Amxx/orgs",
      "repos_url": "https://api.github.com/users/Amxx/repos",
      "events_url": "https://api.github.com/users/Amxx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Amxx/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-09-21T11:36:09Z",
    "updated_at": "2021-09-21T11:36:09Z",
    "author_association": "COLLABORATOR",
    "body": "This sounds like a good plan of action !",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/923896249/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/923909263",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2868#issuecomment-923909263",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2868",
    "id": 923909263,
    "node_id": "IC_kwDOA9tCBs43EbyP",
    "user": {
      "login": "ivanminutillo",
      "id": 1852065,
      "node_id": "MDQ6VXNlcjE4NTIwNjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1852065?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ivanminutillo",
      "html_url": "https://github.com/ivanminutillo",
      "followers_url": "https://api.github.com/users/ivanminutillo/followers",
      "following_url": "https://api.github.com/users/ivanminutillo/following{/other_user}",
      "gists_url": "https://api.github.com/users/ivanminutillo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ivanminutillo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ivanminutillo/subscriptions",
      "organizations_url": "https://api.github.com/users/ivanminutillo/orgs",
      "repos_url": "https://api.github.com/users/ivanminutillo/repos",
      "events_url": "https://api.github.com/users/ivanminutillo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ivanminutillo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-09-21T11:55:07Z",
    "updated_at": "2021-09-21T14:01:44Z",
    "author_association": "NONE",
    "body": "Great, I see here https://eips.ethereum.org/EIPS/eip-2612 though, that the Permit implementation is bound to erc20 tokens...\r\nDo you think it's fair enough to use [the same implementation](https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/extensions/draft-ERC20Permit.sol) for ERC721 tokens?\r\n\r\nEDIT: I just discovered your implementation of [ERC721Permit](https://gist.github.com/Amxx/e3c87476093a6b27d9271b2e54b35292) :1st_place_medal: XD\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/923909263/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/927764139",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2868#issuecomment-927764139",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2868",
    "id": 927764139,
    "node_id": "IC_kwDOA9tCBs43TI6r",
    "user": {
      "login": "cygnusv",
      "id": 2564234,
      "node_id": "MDQ6VXNlcjI1NjQyMzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2564234?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cygnusv",
      "html_url": "https://github.com/cygnusv",
      "followers_url": "https://api.github.com/users/cygnusv/followers",
      "following_url": "https://api.github.com/users/cygnusv/following{/other_user}",
      "gists_url": "https://api.github.com/users/cygnusv/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cygnusv/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cygnusv/subscriptions",
      "organizations_url": "https://api.github.com/users/cygnusv/orgs",
      "repos_url": "https://api.github.com/users/cygnusv/repos",
      "events_url": "https://api.github.com/users/cygnusv/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cygnusv/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-09-27T11:12:37Z",
    "updated_at": "2021-09-27T11:12:37Z",
    "author_association": "NONE",
    "body": "Thanks for the clarification, @Amxx! I have a clearer picture now. Going back to the original issue, I see that there's a lot of reuse potential if the checkpointing functionality is extracted from ERC20Votes; same logic could be plugged in to another type of contract (e.g, staking, liquidity pools, ERC721, etc) without copy-pasting or re-implementing again. \r\n\r\nI have a proof of concept of such extracted logic [here](https://github.com/cygnusv/openzeppelin-contracts/commit/1da9a5ccddba974fedd4c1bcfb1c020199acaae6). Do you think this is something that could be interesting to include upstream?",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/927764139/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/994043363",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2868#issuecomment-994043363",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2868",
    "id": 994043363,
    "node_id": "IC_kwDOA9tCBs47P-Xj",
    "user": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-12-14T21:36:27Z",
    "updated_at": "2021-12-14T21:36:27Z",
    "author_association": "MEMBER",
    "body": "Fixed in https://github.com/OpenZeppelin/openzeppelin-contracts/pull/2944. There is now a [Checkpoints](https://github.com/OpenZeppelin/openzeppelin-contracts/blob/4a9cc8b4918ef3736229a5cc5a310bdc17bf759f/contracts/utils/Checkpoints.sol) library and a [Votes](https://github.com/OpenZeppelin/openzeppelin-contracts/blob/4a9cc8b4918ef3736229a5cc5a310bdc17bf759f/contracts/governance/utils/Votes.sol) contract.\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/994043363/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
