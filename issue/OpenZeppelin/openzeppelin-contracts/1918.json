{
  "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1918",
  "repository_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts",
  "labels_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1918/labels{/name}",
  "comments_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1918/comments",
  "events_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1918/events",
  "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1918",
  "id": 492518190,
  "node_id": "MDU6SXNzdWU0OTI1MTgxOTA=",
  "number": 1918,
  "title": "Support testing with an in-process ethereum provider",
  "user": {
    "login": "cgewecke",
    "id": 7332026,
    "node_id": "MDQ6VXNlcjczMzIwMjY=",
    "avatar_url": "https://avatars.githubusercontent.com/u/7332026?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/cgewecke",
    "html_url": "https://github.com/cgewecke",
    "followers_url": "https://api.github.com/users/cgewecke/followers",
    "following_url": "https://api.github.com/users/cgewecke/following{/other_user}",
    "gists_url": "https://api.github.com/users/cgewecke/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/cgewecke/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/cgewecke/subscriptions",
    "organizations_url": "https://api.github.com/users/cgewecke/orgs",
    "repos_url": "https://api.github.com/users/cgewecke/repos",
    "events_url": "https://api.github.com/users/cgewecke/events{/privacy}",
    "received_events_url": "https://api.github.com/users/cgewecke/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 13,
  "created_at": "2019-09-11T23:50:39Z",
  "updated_at": "2019-09-22T06:50:06Z",
  "closed_at": "2019-09-22T06:43:54Z",
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "**🧐 Motivation**\r\n\r\nsolidity-coverage is being [rewritten](https://github.com/sc-forks/solidity-coverage/pull/372) so that it has fewer quirks and problems. One element of the new design is that it listens to the ethereumjs-vm opcode step emitter of an in-process ganache instance. In Truffle terms, it runs on a network which looks like:\r\n\r\n```javascript\r\nconst ganache = require(\"ganache-cli\")\r\n\r\nmodules.exports = {\r\n  networks: {\r\n    ganache: {\r\n      provider: ganache.provider(options),\r\n      network_id: \"*\"\r\n    }\r\n  }\r\n}\r\n```\r\nHave been testing it on Zeppelin and the only issue is that some GSN tests rely on an [oz-gsn utility run in test.sh](https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/scripts/test.sh#L66-L70) which connects to ganache-cli as a stand-alone server. \r\n\r\nI'm wondering if anyone has any views are about moving away from `test.sh` towards an in-process provider approach. \r\n\r\nI think the main changes this would involve are:\r\n\r\n+ Putting the accounts keys and balances into their own file so they can be JS required. \r\n+ Writing an oz-gsn deploy relay hub test helper that uses an in-process provider\r\n+ Launching the tests with ganache.provider by default.\r\n\r\n**Pros**\r\n+ Less shell script\r\n+ There are interesting tools written to consume the client this way\r\n  + NomicLabs is actively working on some...\r\n  + 0xProject tooling \r\n\r\n**Cons/Caveats**\r\n+ It runs a little more slowly. ([ganache-core 481](https://github.com/trufflesuite/ganache-core/issues/481) requests info about this)\r\n+ Maintaining compatibility with a solution for #355?\r\n\r\n\r\nHappy to help with PRs etc if this is something you're interested in.",
  "closed_by": {
    "login": "cgewecke",
    "id": 7332026,
    "node_id": "MDQ6VXNlcjczMzIwMjY=",
    "avatar_url": "https://avatars.githubusercontent.com/u/7332026?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/cgewecke",
    "html_url": "https://github.com/cgewecke",
    "followers_url": "https://api.github.com/users/cgewecke/followers",
    "following_url": "https://api.github.com/users/cgewecke/following{/other_user}",
    "gists_url": "https://api.github.com/users/cgewecke/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/cgewecke/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/cgewecke/subscriptions",
    "organizations_url": "https://api.github.com/users/cgewecke/orgs",
    "repos_url": "https://api.github.com/users/cgewecke/repos",
    "events_url": "https://api.github.com/users/cgewecke/events{/privacy}",
    "received_events_url": "https://api.github.com/users/cgewecke/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1918/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1918/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/530621902",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1918#issuecomment-530621902",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1918",
    "id": 530621902,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUzMDYyMTkwMg==",
    "user": {
      "login": "nventuro",
      "id": 2530770,
      "node_id": "MDQ6VXNlcjI1MzA3NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2530770?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nventuro",
      "html_url": "https://github.com/nventuro",
      "followers_url": "https://api.github.com/users/nventuro/followers",
      "following_url": "https://api.github.com/users/nventuro/following{/other_user}",
      "gists_url": "https://api.github.com/users/nventuro/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nventuro/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nventuro/subscriptions",
      "organizations_url": "https://api.github.com/users/nventuro/orgs",
      "repos_url": "https://api.github.com/users/nventuro/repos",
      "events_url": "https://api.github.com/users/nventuro/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nventuro/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-09-12T01:02:20Z",
    "updated_at": "2019-09-12T01:02:20Z",
    "author_association": "CONTRIBUTOR",
    "body": "Hello @cgewecke! We of course will want to try out the new `solidity-coverage` once it comes out, and should modify our setup accordingly. I'm curious though, where does the need to have an in-process ganache come from? Will the new implementation be coupled to truffle, or is there some more generic API that can be used?",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/530621902/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/530635567",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1918#issuecomment-530635567",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1918",
    "id": 530635567,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUzMDYzNTU2Nw==",
    "user": {
      "login": "cgewecke",
      "id": 7332026,
      "node_id": "MDQ6VXNlcjczMzIwMjY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7332026?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cgewecke",
      "html_url": "https://github.com/cgewecke",
      "followers_url": "https://api.github.com/users/cgewecke/followers",
      "following_url": "https://api.github.com/users/cgewecke/following{/other_user}",
      "gists_url": "https://api.github.com/users/cgewecke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cgewecke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cgewecke/subscriptions",
      "organizations_url": "https://api.github.com/users/cgewecke/orgs",
      "repos_url": "https://api.github.com/users/cgewecke/repos",
      "events_url": "https://api.github.com/users/cgewecke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cgewecke/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-09-12T02:14:34Z",
    "updated_at": "2019-09-12T02:14:34Z",
    "author_association": "CONTRIBUTOR",
    "body": "Hi @nventuro! \r\n\r\n> where does the need to have an in-process ganache come from?\r\n\r\nGood question! An in-process ganache lets us access the VM directly and listen to a \"step\" event it emits each time an opcode is run. Solidity-coverage instruments contracts with statements which push a bytes32 data hash onto the evm stack. By watching the evm step we can detect the hash and mark it as a line or branch hit in a coverage map.\r\n\r\nWe need to collect opcode trace data for both `calls` and `sends`. At the moment ganache only provides a trace RPC endpoint for `sends` (debug_traceTransaction). \r\n\r\n0xProject's trace tools get around this restriction by replaying `calls` *as transactions* so their data is 'available' and then reverting the chain. However they also reported that there's a lot of data-transfer overhead using debug_traceTransaction and there has been a [reluctance at ganache](https://github.com/trufflesuite/ganache-core/issues/47#issuecomment-455560108) to fix that by making the trace method filterable.\r\n\r\nUsing an in-process provider tries to avoid that complexity...  fwiw it should be possible to adapt SC's design to work with a client like Parity which supports both traceTransaction and traceCall, although filtering might be necessary there as well.\r\n\r\n> Will the new implementation be coupled to truffle, or is there some more generic API that can be used? \r\n\r\nIt is strongly decoupled from Truffle. When the new version is released it will be available as both a Buidler and Truffle plugin and the API should allow integration with any JS ethereum dev stack or build process. \r\n",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/530635567/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/530645563",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1918#issuecomment-530645563",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1918",
    "id": 530645563,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUzMDY0NTU2Mw==",
    "user": {
      "login": "nventuro",
      "id": 2530770,
      "node_id": "MDQ6VXNlcjI1MzA3NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2530770?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nventuro",
      "html_url": "https://github.com/nventuro",
      "followers_url": "https://api.github.com/users/nventuro/followers",
      "following_url": "https://api.github.com/users/nventuro/following{/other_user}",
      "gists_url": "https://api.github.com/users/nventuro/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nventuro/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nventuro/subscriptions",
      "organizations_url": "https://api.github.com/users/nventuro/orgs",
      "repos_url": "https://api.github.com/users/nventuro/repos",
      "events_url": "https://api.github.com/users/nventuro/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nventuro/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-09-12T03:07:54Z",
    "updated_at": "2019-09-12T03:09:25Z",
    "author_association": "CONTRIBUTOR",
    "body": "(this is mostly me being curious)\r\n\r\nOhh, I see. And I'm guessing it is not possible to listen to `step` events on `ethereumjs-vm` when it is running as a separate process? I guess `solidity-coverage` needs more than just the ganache provider in order to work, is there a gist of the planed API available somewhere?\r\n\r\nedit: to clarify, I'm asking because there are instances where we find it valuable to run tests on a standalone ganache instance, and want to see if there is a way to no drop that capability.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/530645563/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/530652462",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1918#issuecomment-530652462",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1918",
    "id": 530652462,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUzMDY1MjQ2Mg==",
    "user": {
      "login": "cgewecke",
      "id": 7332026,
      "node_id": "MDQ6VXNlcjczMzIwMjY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7332026?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cgewecke",
      "html_url": "https://github.com/cgewecke",
      "followers_url": "https://api.github.com/users/cgewecke/followers",
      "following_url": "https://api.github.com/users/cgewecke/following{/other_user}",
      "gists_url": "https://api.github.com/users/cgewecke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cgewecke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cgewecke/subscriptions",
      "organizations_url": "https://api.github.com/users/cgewecke/orgs",
      "repos_url": "https://api.github.com/users/cgewecke/repos",
      "events_url": "https://api.github.com/users/cgewecke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cgewecke/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-09-12T03:47:12Z",
    "updated_at": "2019-09-12T03:47:12Z",
    "author_association": "CONTRIBUTOR",
    "body": "@nventuro \r\n\r\n> I'm guessing it is not possible to listen to step events on ethereumjs-vm when it is running as a separate process?\r\n\r\nLike a websocket subscription or something? That would be really cool and has [been proposed at ganache](https://github.com/trufflesuite/ganache-core/issues/381) but not sure  what its status is.\r\n\r\n\r\n> there are instances where we find it valuable to run tests on a standalone ganache instance,\r\n\r\nI am curious about this - that seems very important. What do you see as the differences between in-process and standalone? \r\n\r\nThe exposed API will be something like the `app` class in [this file](https://github.com/sc-forks/solidity-coverage/blob/truffle-plugin/lib/app.js#L52-L194). It's not finalized but it should be something very simple like\r\n```\r\ncoverage.attachToProvider(provider) \r\ncoverage.instrument(files) \r\ncoverage.report()\r\n```\r\n\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/530652462/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/530883672",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1918#issuecomment-530883672",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1918",
    "id": 530883672,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUzMDg4MzY3Mg==",
    "user": {
      "login": "nventuro",
      "id": 2530770,
      "node_id": "MDQ6VXNlcjI1MzA3NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2530770?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nventuro",
      "html_url": "https://github.com/nventuro",
      "followers_url": "https://api.github.com/users/nventuro/followers",
      "following_url": "https://api.github.com/users/nventuro/following{/other_user}",
      "gists_url": "https://api.github.com/users/nventuro/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nventuro/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nventuro/subscriptions",
      "organizations_url": "https://api.github.com/users/nventuro/orgs",
      "repos_url": "https://api.github.com/users/nventuro/repos",
      "events_url": "https://api.github.com/users/nventuro/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nventuro/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-09-12T15:39:04Z",
    "updated_at": "2019-09-12T15:39:04Z",
    "author_association": "CONTRIBUTOR",
    "body": ">Like a websocket subscription or something? \r\n\r\nRight, it technically wouldn't need to go over the network since it's running on the same machine, but that would work.\r\n\r\n>I am curious about this - that seems very important. What do you see as the differences between in-process and standalone?\r\n\r\nMy main use case is while debugging: I run some tests (a subset of them) on a standalone ganache, and then connect to it (e.g. via `truffle console` or some other tool) to manually inspect state, call functions, etc., to figure out what's wrong. Because running tests is often so slow, I find this approach lets me arrive at the solution much faster than iterating on the test suite directly.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/530883672/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/530887265",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1918#issuecomment-530887265",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1918",
    "id": 530887265,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUzMDg4NzI2NQ==",
    "user": {
      "login": "nventuro",
      "id": 2530770,
      "node_id": "MDQ6VXNlcjI1MzA3NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2530770?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nventuro",
      "html_url": "https://github.com/nventuro",
      "followers_url": "https://api.github.com/users/nventuro/followers",
      "following_url": "https://api.github.com/users/nventuro/following{/other_user}",
      "gists_url": "https://api.github.com/users/nventuro/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nventuro/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nventuro/subscriptions",
      "organizations_url": "https://api.github.com/users/nventuro/orgs",
      "repos_url": "https://api.github.com/users/nventuro/repos",
      "events_url": "https://api.github.com/users/nventuro/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nventuro/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-09-12T15:47:26Z",
    "updated_at": "2019-09-12T15:47:26Z",
    "author_association": "CONTRIBUTOR",
    "body": "It seems to me though that it should be possible to have a sort of 'coverage-node', a stand-alone process that wraps ganache and exposes the `instrument` and `report` functions to the network. I imagine all the truffle plugin does is hook those functions to mocha's `before` and `after` blocks, which could be replicated this way.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/530887265/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/531011280",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1918#issuecomment-531011280",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1918",
    "id": 531011280,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUzMTAxMTI4MA==",
    "user": {
      "login": "cgewecke",
      "id": 7332026,
      "node_id": "MDQ6VXNlcjczMzIwMjY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7332026?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cgewecke",
      "html_url": "https://github.com/cgewecke",
      "followers_url": "https://api.github.com/users/cgewecke/followers",
      "following_url": "https://api.github.com/users/cgewecke/following{/other_user}",
      "gists_url": "https://api.github.com/users/cgewecke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cgewecke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cgewecke/subscriptions",
      "organizations_url": "https://api.github.com/users/cgewecke/orgs",
      "repos_url": "https://api.github.com/users/cgewecke/repos",
      "events_url": "https://api.github.com/users/cgewecke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cgewecke/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-09-12T21:20:08Z",
    "updated_at": "2019-09-12T21:44:29Z",
    "author_association": "CONTRIBUTOR",
    "body": "@nventuro \r\n\r\nI have to think about this a bit... some of the redesign goals are that the tool is :\r\n+ usable with any testing framework setup (ex: ethers & jest)\r\n+ usable with any ganache version (e.g. user can configure this - no fork dependence)\r\n\r\n> I imagine all the truffle plugin does is hook those functions to mocha's before and after blocks, which could be replicated this way.\r\n\r\nThe coverage API is trying to limit its concerns to rewriting solidity files, storing them in a pre-defined temporary folder and attaching to the client to get a trace. How the user compiles and tests, and which client version they use is ideally up to their tooling.\r\n\r\n> it should be possible to have a sort of 'coverage-node', a stand-alone process that wraps ganache\r\n\r\nJust making a note here ... in your model :\r\n+ `instrument` writes instrumented solidity and its coverage mapping to the filesystem. \r\n+ there is a node script wrapper around ganache that:\r\n  + consumes any ganache\r\n  + hooks into the ganache vm\r\n  + loads the coverage map (maybe when it receives a message that the tests are about to run) \r\n  + forwards calls & responses between the test runner and the standalone\r\n  + gets a message when the tests are complete and reports the outcome.\r\n\r\nDoes that seem right? \r\n\r\nVery specifically for truffle I *think* it might be possible to point the console at a network that uses an in-process provider, run the `test` command at the console, and achieve the same debugging setup. \r\n\r\nHowever you've raised a really important use case - will think about this further...\r\n\r\n\r\n\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/531011280/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/531045328",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1918#issuecomment-531045328",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1918",
    "id": 531045328,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUzMTA0NTMyOA==",
    "user": {
      "login": "nventuro",
      "id": 2530770,
      "node_id": "MDQ6VXNlcjI1MzA3NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2530770?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nventuro",
      "html_url": "https://github.com/nventuro",
      "followers_url": "https://api.github.com/users/nventuro/followers",
      "following_url": "https://api.github.com/users/nventuro/following{/other_user}",
      "gists_url": "https://api.github.com/users/nventuro/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nventuro/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nventuro/subscriptions",
      "organizations_url": "https://api.github.com/users/nventuro/orgs",
      "repos_url": "https://api.github.com/users/nventuro/repos",
      "events_url": "https://api.github.com/users/nventuro/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nventuro/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-09-12T23:34:28Z",
    "updated_at": "2019-09-12T23:34:28Z",
    "author_association": "CONTRIBUTOR",
    "body": "> Just making a note here ... in your model :\r\n>\r\n>    * instrument writes instrumented solidity and its coverage mapping to the filesystem.\r\n>    * there is a node script wrapper around ganache that:\r\n>       * consumes any ganache\r\n>       * hooks into the ganache vm\r\n>       * loads the coverage map (maybe when it receives a message that the tests are about to run)\r\n>       * forwards calls & responses between the test runner and the standalone\r\n>       * gets a message when the tests are complete and reports the outcome.\r\n\r\nPretty much, yes. I assume by 'consume a ganache' you mean that it is launched from within node? Also, from my shallow understanding of the matter, we wouldn't have to do anything special to handle the 'call forwarding'.\r\n\r\nSorry to have thwarted your plans! :sweat_smile: ",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/531045328/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/531058508",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1918#issuecomment-531058508",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1918",
    "id": 531058508,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUzMTA1ODUwOA==",
    "user": {
      "login": "cgewecke",
      "id": 7332026,
      "node_id": "MDQ6VXNlcjczMzIwMjY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7332026?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cgewecke",
      "html_url": "https://github.com/cgewecke",
      "followers_url": "https://api.github.com/users/cgewecke/followers",
      "following_url": "https://api.github.com/users/cgewecke/following{/other_user}",
      "gists_url": "https://api.github.com/users/cgewecke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cgewecke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cgewecke/subscriptions",
      "organizations_url": "https://api.github.com/users/cgewecke/orgs",
      "repos_url": "https://api.github.com/users/cgewecke/repos",
      "events_url": "https://api.github.com/users/cgewecke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cgewecke/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-09-13T00:44:21Z",
    "updated_at": "2019-09-13T00:44:47Z",
    "author_association": "CONTRIBUTOR",
    "body": "> Also, from my shallow understanding of the matter, we wouldn't have to do anything special to handle the 'call forwarding'.\r\n\r\n@nventuro Maybe I am misunderstanding but to me this seems *a little* complicated - a special server wrapper around the provider (which supports http + websockets) and which has to be launched separately for coverage. This is similar to the current approach but I've been thinking it's preferable not to have a different client for every task (e.g normal test, test w/ coverage). \r\n\r\nI actually really don't want to do what you're proposing ha ha!! It's simpler to handle as much as possible in the same process & memory as the tests.\r\n\r\nHowever I just remembered that Oraclize has that bridge and is a case similar to your GSN deployer. So in-process is definitely a problem for some very important testing contexts.... ",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/531058508/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/531066798",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1918#issuecomment-531066798",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1918",
    "id": 531066798,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUzMTA2Njc5OA==",
    "user": {
      "login": "cgewecke",
      "id": 7332026,
      "node_id": "MDQ6VXNlcjczMzIwMjY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7332026?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cgewecke",
      "html_url": "https://github.com/cgewecke",
      "followers_url": "https://api.github.com/users/cgewecke/followers",
      "following_url": "https://api.github.com/users/cgewecke/following{/other_user}",
      "gists_url": "https://api.github.com/users/cgewecke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cgewecke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cgewecke/subscriptions",
      "organizations_url": "https://api.github.com/users/cgewecke/orgs",
      "repos_url": "https://api.github.com/users/cgewecke/repos",
      "events_url": "https://api.github.com/users/cgewecke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cgewecke/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-09-13T01:36:47Z",
    "updated_at": "2019-09-13T01:36:47Z",
    "author_association": "CONTRIBUTOR",
    "body": "Also for clarification, the way we need to access the vm trace is a little tortured. It has to be in memory and the attachment step looks something like this...\r\n```javascript\r\nconst self = this;\r\nconst provider = ganache.provider(options);\r\n\r\nconst blockchain = provider.engine.manager.state.blockchain;\r\nconst createVM = blockchain.createVMFromStateTrie;\r\n\r\n// Attach to VM which ganache has already instantiated and \r\n// which it uses to execute eth_send\r\nblockchain.vm.on('step', self.collector.step.bind(self.collector));\r\n\r\n// Hijack createVM method which ganache uses to run eth_calls\r\nblockchain.createVMFromStateTrie = function(state, activatePrecompiles) {\r\n  const vm = createVM.apply(blockchain, arguments);\r\n  vm.on('step', self.collector.step.bind(self.collector));\r\n  return vm;\r\n}\r\n```\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/531066798/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/531081079",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1918#issuecomment-531081079",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1918",
    "id": 531081079,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUzMTA4MTA3OQ==",
    "user": {
      "login": "nventuro",
      "id": 2530770,
      "node_id": "MDQ6VXNlcjI1MzA3NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2530770?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nventuro",
      "html_url": "https://github.com/nventuro",
      "followers_url": "https://api.github.com/users/nventuro/followers",
      "following_url": "https://api.github.com/users/nventuro/following{/other_user}",
      "gists_url": "https://api.github.com/users/nventuro/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nventuro/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nventuro/subscriptions",
      "organizations_url": "https://api.github.com/users/nventuro/orgs",
      "repos_url": "https://api.github.com/users/nventuro/repos",
      "events_url": "https://api.github.com/users/nventuro/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nventuro/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-09-13T03:03:40Z",
    "updated_at": "2019-09-13T03:03:40Z",
    "author_association": "CONTRIBUTOR",
    "body": ">I actually really don't want to do what you're proposing ha ha!! It's simpler to handle as much as possible in the same process & memory as the tests.\r\n\r\nTo be fair, I don't think you _need_ to: from our discussion here and my understanding of the proposed API it seems to me like it shouldn't be hard to get `ganache-core` and the new `solidity-coverage` bundled together in the fashion I described above. We could do this ourselves if needed.\r\n\r\nBy the way, I just realized I never replied to the GSN deployment bit: that'll be a non-issue, our [gsn-helpers](https://github.com/OpenZeppelin/openzeppelin-gsn-helpers) already support being called from JavaScript directly, so that migration will be simple. ",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/531081079/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/531081686",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1918#issuecomment-531081686",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1918",
    "id": 531081686,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUzMTA4MTY4Ng==",
    "user": {
      "login": "cgewecke",
      "id": 7332026,
      "node_id": "MDQ6VXNlcjczMzIwMjY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7332026?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cgewecke",
      "html_url": "https://github.com/cgewecke",
      "followers_url": "https://api.github.com/users/cgewecke/followers",
      "following_url": "https://api.github.com/users/cgewecke/following{/other_user}",
      "gists_url": "https://api.github.com/users/cgewecke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cgewecke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cgewecke/subscriptions",
      "organizations_url": "https://api.github.com/users/cgewecke/orgs",
      "repos_url": "https://api.github.com/users/cgewecke/repos",
      "events_url": "https://api.github.com/users/cgewecke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cgewecke/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-09-13T03:08:05Z",
    "updated_at": "2019-09-13T03:08:05Z",
    "author_association": "CONTRIBUTOR",
    "body": "> from our discussion here and my understanding of the proposed API it seems to me like it shouldn't be hard to get ganache-core and the new solidity-coverage bundled together in the fashion I described above. We could do this ourselves if needed.\r\n\r\nOk well you've persuaded me this is likely necessary anyway. If you'd like to collaborate in some way I'd be very happy to.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/531081686/reactions",
      "total_count": 3,
      "+1": 2,
      "-1": 0,
      "laugh": 1,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/533854656",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1918#issuecomment-533854656",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1918",
    "id": 533854656,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUzMzg1NDY1Ng==",
    "user": {
      "login": "cgewecke",
      "id": 7332026,
      "node_id": "MDQ6VXNlcjczMzIwMjY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7332026?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cgewecke",
      "html_url": "https://github.com/cgewecke",
      "followers_url": "https://api.github.com/users/cgewecke/followers",
      "following_url": "https://api.github.com/users/cgewecke/following{/other_user}",
      "gists_url": "https://api.github.com/users/cgewecke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cgewecke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cgewecke/subscriptions",
      "organizations_url": "https://api.github.com/users/cgewecke/orgs",
      "repos_url": "https://api.github.com/users/cgewecke/repos",
      "events_url": "https://api.github.com/users/cgewecke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cgewecke/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-09-22T06:43:54Z",
    "updated_at": "2019-09-22T06:50:06Z",
    "author_association": "CONTRIBUTOR",
    "body": "@nventuro Thanks so much for your advice in this thread - incredibly helpful. \r\n\r\nHave now modified solidity-coverage to run ganache as an http server and added async hook options that allow the user to launch whatever external processes they want and connect to the coverage server as required. \r\n\r\nHave opened #1923 upgrading solidity-coverage using this approach for GSN. It's not exactly what you suggested but it preserves the stand-alone server launch for regular tests. . . \r\n\r\nClosing in favor #1923. ",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/533854656/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
