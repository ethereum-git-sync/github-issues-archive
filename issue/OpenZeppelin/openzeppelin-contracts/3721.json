{
  "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3721",
  "repository_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts",
  "labels_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3721/labels{/name}",
  "comments_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3721/comments",
  "events_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3721/events",
  "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3721",
  "id": 1382694729,
  "node_id": "I_kwDOA9tCBs5Saj9J",
  "number": 3721,
  "title": "Deploying an ERC4626 vault with an asset without code reverts in v4.8.0-rc.0",
  "user": {
    "login": "tinchoabbate",
    "id": 8171248,
    "node_id": "MDQ6VXNlcjgxNzEyNDg=",
    "avatar_url": "https://avatars.githubusercontent.com/u/8171248?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tinchoabbate",
    "html_url": "https://github.com/tinchoabbate",
    "followers_url": "https://api.github.com/users/tinchoabbate/followers",
    "following_url": "https://api.github.com/users/tinchoabbate/following{/other_user}",
    "gists_url": "https://api.github.com/users/tinchoabbate/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tinchoabbate/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tinchoabbate/subscriptions",
    "organizations_url": "https://api.github.com/users/tinchoabbate/orgs",
    "repos_url": "https://api.github.com/users/tinchoabbate/repos",
    "events_url": "https://api.github.com/users/tinchoabbate/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tinchoabbate/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 1,
  "created_at": "2022-09-22T16:10:47Z",
  "updated_at": "2022-09-28T18:42:56Z",
  "closed_at": "2022-09-28T18:42:56Z",
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "In v4.7.0, deploying an `ERC4626` vault for an asset with no code worked. Either for an asset that still hasn't been deployed, or an asset under construction.\r\n\r\nIn v4.8.0-rc.0, the same fails. As far as I can tell, this is due to the changes introduced in #3639.\r\n\r\nHere's a Foundry test:\r\n\r\n```solidity\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\";\r\nimport \"forge-std/Test.sol\";\r\n\r\ncontract Vault is ERC4626 {\r\n    constructor(IERC20Metadata asset) ERC20(\"vToken\", \"vToken\") ERC4626(asset) {}\r\n}\r\n\r\ncontract ExampleToken is ERC20 {\r\n    Vault public vault;\r\n\r\n    constructor() ERC20(\"Token\", \"Token\") {\r\n        vault = new Vault(\r\n            IERC20Metadata(address(this))\r\n        );\r\n    }\r\n}\r\n\r\ncontract VaultTest is Test {\r\n    ExampleToken token;\r\n\r\n    function test_deploy() public {\r\n        // Deploy token that deploys vault\r\n        // In 4.7.0 this works\r\n        // In 4.8.0-rc.0 this fails\r\n        token = new ExampleToken();\r\n    }\r\n}\r\n```\r\n\r\n\r\n\r\nThe root cause seems to be that after #3639, the constructor of `ERC4626` executes a `try/catch` to call the `decimals` function of the passed asset.\r\n```solidity\r\nconstructor(IERC20 asset_) {\r\n        uint8 decimals_;\r\n        try IERC20Metadata(address(asset_)).decimals() returns (uint8 value) { ... }\r\n```\r\nHowever, when the asset doesn't have code, the call to `decimals` returns no data. Solidity attempts to decode it as a `uint8`, but fails. This triggers a revert _in the constructor_ of the `ERC4626` contract, instead of going into the `catch` clause. This is explained by the Solidity docs:\r\n\r\n> If an error happens during the decoding of the return data inside a try/catch-statement, this causes an exception in the currently executing contract and because of that, it is not caught in the catch clause.\r\n\r\nTo make the error nicer, we could include a `require` in the constructor of the `ERC4626` to ensure the asset has code. In any case, it seems this new behavior is worth including as a breaking change.\r\n",
  "closed_by": {
    "login": "frangio",
    "id": 481465,
    "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
    "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/frangio",
    "html_url": "https://github.com/frangio",
    "followers_url": "https://api.github.com/users/frangio/followers",
    "following_url": "https://api.github.com/users/frangio/following{/other_user}",
    "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
    "organizations_url": "https://api.github.com/users/frangio/orgs",
    "repos_url": "https://api.github.com/users/frangio/repos",
    "events_url": "https://api.github.com/users/frangio/events{/privacy}",
    "received_events_url": "https://api.github.com/users/frangio/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3721/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3721/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1255534451",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3721#issuecomment-1255534451",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3721",
    "id": 1255534451,
    "node_id": "IC_kwDOA9tCBs5K1e9z",
    "user": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-09-22T20:49:11Z",
    "updated_at": "2022-09-22T20:49:11Z",
    "author_association": "MEMBER",
    "body": "This feels like an edge case, but the use case presented in `ExampleToken` looks like something that could show up in practice, so I think we should try to support this.\r\n\r\nThe way that decimals are set for the vault is not properly documented and we need to improve that too.\r\n\r\nI also have some concerns around calling `super.decimals()` in the constructor. I would prefer if we simplified the constructor to just make a best effort to retrieve and cache the decimals of the underlying, and set the cached value to 0 if anything fails. Then `ERC4626.decimals()` should decide whether to return the cached value if it's 0, and call `super.decimals()` otherwise.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1255534451/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
