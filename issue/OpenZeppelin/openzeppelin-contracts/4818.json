{
  "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4818",
  "repository_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts",
  "labels_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4818/labels{/name}",
  "comments_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4818/comments",
  "events_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4818/events",
  "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/4818",
  "id": 2067349027,
  "node_id": "I_kwDOA9tCBs57OT4j",
  "number": 4818,
  "title": "Enhancing Security in MerkleProof.sol with safeVerify() Function for Double Hashing 64-Byte Leaves",
  "user": {
    "login": "Erengonen",
    "id": 49316630,
    "node_id": "MDQ6VXNlcjQ5MzE2NjMw",
    "avatar_url": "https://avatars.githubusercontent.com/u/49316630?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/Erengonen",
    "html_url": "https://github.com/Erengonen",
    "followers_url": "https://api.github.com/users/Erengonen/followers",
    "following_url": "https://api.github.com/users/Erengonen/following{/other_user}",
    "gists_url": "https://api.github.com/users/Erengonen/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/Erengonen/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/Erengonen/subscriptions",
    "organizations_url": "https://api.github.com/users/Erengonen/orgs",
    "repos_url": "https://api.github.com/users/Erengonen/repos",
    "events_url": "https://api.github.com/users/Erengonen/events{/privacy}",
    "received_events_url": "https://api.github.com/users/Erengonen/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 1,
  "created_at": "2024-01-05T13:25:40Z",
  "updated_at": "2024-01-05T14:57:41Z",
  "closed_at": null,
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "**üßê Motivation**\r\nThe current implementation of MerkleProof.sol in the OpenZeppelin library exhibits a vulnerability when handling leaf data that is exactly 64 bytes in size. This issue, detailed in [Issue #278](https://github.com/sherlock-audit/2023-04-footium-judging/issues/278) from the sherlock-audit repository, enables an attacker to bypass the merkle-tree proof, leading to significant security risks. Additionally, this vulnerability is acknowledged with a warning in the [MerkleProof.sol](https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/cryptography/MerkleProof.sol) contract(https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3091). To address this, I propose introducing a `safeVerify()` function in the MerkleProof contract, which implements double hashing of leaves regardless of their size.\r\n\r\n**üìù Details**\r\nThis enhancement involves extending the existing [MerkleProof.sol](https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/cryptography/MerkleProof.sol)  contract by adding a `safeVerify()` function. This function will apply double hashing to the provided leaf, irrespective of its size, thereby ensuring enhanced security and mitigating the identified vulnerability.\r\n\r\nThe proposed `safeVerify()` function could be implemented as follows:\r\n\r\n```\r\n    function safeVerify(bytes32[] memory proof, bytes32 leaf) internal pure returns (bool) {\r\n        return MerkleProof.verify(proof, root, keccak256(leaf));\r\n    }\r\n```\r\n\r\nI welcome feedback and further suggestions from the OpenZeppelin community on this proposal.\r\n\r\n\r\n<!-- Make sure that you have reviewed the OpenZeppelin Contracts Contributor Guidelines. -->\r\n<!-- https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/CONTRIBUTING.md -->\r\n",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4818/reactions",
    "total_count": 1,
    "+1": 1,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4818/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1878807934",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/4818#issuecomment-1878807934",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4818",
    "id": 1878807934,
    "node_id": "IC_kwDOA9tCBs5v_FV-",
    "user": {
      "login": "Amxx",
      "id": 2432299,
      "node_id": "MDQ6VXNlcjI0MzIyOTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2432299?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Amxx",
      "html_url": "https://github.com/Amxx",
      "followers_url": "https://api.github.com/users/Amxx/followers",
      "following_url": "https://api.github.com/users/Amxx/following{/other_user}",
      "gists_url": "https://api.github.com/users/Amxx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Amxx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Amxx/subscriptions",
      "organizations_url": "https://api.github.com/users/Amxx/orgs",
      "repos_url": "https://api.github.com/users/Amxx/repos",
      "events_url": "https://api.github.com/users/Amxx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Amxx/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2024-01-05T14:57:39Z",
    "updated_at": "2024-01-05T14:57:39Z",
    "author_association": "COLLABORATOR",
    "body": "Hello @Erengonen \r\n\r\nThe `MerkleProof.sol` library is designed to support as many merkle trees as possible. In fact, the only requirement is that internal hashes are produced using the keccak256 hash of the sorted child values.\r\n\r\nIt is indeed true that this includes support for trees that are poorly designed. If the leaves are unhashed 32bytes values, than internal nodes can be proven even though they are no leaves. Similarly, if the leaves are produced by hashing 64 bytes, then you may prove non existing leaves that match some internal nodes.\r\n\r\nWe believe this is out of scope of the solidity library that verifies the trees, and it should be addressed by the tooling that build the trees. That is why we maintain [@openzeppelin/merkle-tree](https://github.com/OpenZeppelin/merkle-tree). This library will encourage you to double hash your leaves in a way that is safe from the issues you describe.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1878807934/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
