{
  "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4205",
  "repository_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts",
  "labels_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4205/labels{/name}",
  "comments_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4205/comments",
  "events_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4205/events",
  "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/4205",
  "id": 1692720437,
  "node_id": "I_kwDOA9tCBs5k5N01",
  "number": 4205,
  "title": "`ReentrancyGuard` with transient opcodes `TSTORE` and `TLOAD`",
  "user": {
    "login": "pcaversaccio",
    "id": 25297591,
    "node_id": "MDQ6VXNlcjI1Mjk3NTkx",
    "avatar_url": "https://avatars.githubusercontent.com/u/25297591?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/pcaversaccio",
    "html_url": "https://github.com/pcaversaccio",
    "followers_url": "https://api.github.com/users/pcaversaccio/followers",
    "following_url": "https://api.github.com/users/pcaversaccio/following{/other_user}",
    "gists_url": "https://api.github.com/users/pcaversaccio/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/pcaversaccio/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/pcaversaccio/subscriptions",
    "organizations_url": "https://api.github.com/users/pcaversaccio/orgs",
    "repos_url": "https://api.github.com/users/pcaversaccio/repos",
    "events_url": "https://api.github.com/users/pcaversaccio/events{/privacy}",
    "received_events_url": "https://api.github.com/users/pcaversaccio/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 9,
  "created_at": "2023-05-02T16:22:02Z",
  "updated_at": "2023-08-15T15:06:31Z",
  "closed_at": null,
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "**🧐 Motivation**\r\n\r\nSince [EIP-1153](https://eips.ethereum.org/EIPS/eip-1153) is confirmed to be included in the upcoming Cancun-Deneb upgrade, I would like to discuss the possibility of using the future transient opcodes `TSTORE` and `TLOAD` for the `ReentrancyGuard` (abstract) contract.\r\n\r\nFurthermore, I would like to highlight the initiatives (partially driven by myself), to disable reentrancy by default at the compiler level:\r\n- **Vyper:** https://github.com/vyperlang/vyper/issues/3380\r\n- **Solidity:** https://github.com/ethereum/solidity/issues/12996",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4205/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4205/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1532717112",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/4205#issuecomment-1532717112",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4205",
    "id": 1532717112,
    "node_id": "IC_kwDOA9tCBs5bW2g4",
    "user": {
      "login": "Amxx",
      "id": 2432299,
      "node_id": "MDQ6VXNlcjI0MzIyOTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2432299?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Amxx",
      "html_url": "https://github.com/Amxx",
      "followers_url": "https://api.github.com/users/Amxx/followers",
      "following_url": "https://api.github.com/users/Amxx/following{/other_user}",
      "gists_url": "https://api.github.com/users/Amxx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Amxx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Amxx/subscriptions",
      "organizations_url": "https://api.github.com/users/Amxx/orgs",
      "repos_url": "https://api.github.com/users/Amxx/repos",
      "events_url": "https://api.github.com/users/Amxx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Amxx/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-05-03T09:31:45Z",
    "updated_at": "2023-05-03T09:31:45Z",
    "author_association": "COLLABORATOR",
    "body": "Hello @pcaversaccio \r\n\r\nFor the first part, this is definitely something I'd like to do when possible. The main issue I see is that this new opcode will not be available on some EVM network, so we'll need a solution for that. In any case, I think we will wait to see how the solidity language supports this feature.\r\n\r\nFor the second part, I'm personally against it. Yes re-entrancy can lead to bugs, and being 100% safe against any form of re-entrancy (including read-only) re-entrancy is possibly difficult. But I would still qualify re-entrancy as a great feature for contract composability. IMO contract composability is possibly the most important feature of the EVM ecosystem. I fear that preventing re-entrancy by default would seriously limit composability. Also, I'm generally against any \"forbid by default\" approach. If a dev want to block re-entrancy in its app, then ok ... but we should not set that by default. I'd much rather see devs learn how to build re-entrant safety thatn learn that re-entrancy is disabled by the language. \r\n\r\nAdditionally, I'm afraid what it will lead to: people writting entire contracts in yul directly to circumvent that restriction? \r\n\r\nSince 0.8.0 made safe-math by default, we see a lot of people advertising the use of unchecked in ways that affect the readability of the code. This trends is honestly driving me mad: \r\n![Capture d’écran du 2023-05-03 11-30-07](https://user-images.githubusercontent.com/2432299/235880550-b61b100f-f10b-4315-813b-9ad72fe469a5.png)\r\nWill we see the same trend of people trying to circumvent the re-entrancy prevention (sometimes for good reason) and write bad code as a consequence?\r\n\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1532717112/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1532782822",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/4205#issuecomment-1532782822",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4205",
    "id": 1532782822,
    "node_id": "IC_kwDOA9tCBs5bXGjm",
    "user": {
      "login": "pcaversaccio",
      "id": 25297591,
      "node_id": "MDQ6VXNlcjI1Mjk3NTkx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25297591?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pcaversaccio",
      "html_url": "https://github.com/pcaversaccio",
      "followers_url": "https://api.github.com/users/pcaversaccio/followers",
      "following_url": "https://api.github.com/users/pcaversaccio/following{/other_user}",
      "gists_url": "https://api.github.com/users/pcaversaccio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pcaversaccio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pcaversaccio/subscriptions",
      "organizations_url": "https://api.github.com/users/pcaversaccio/orgs",
      "repos_url": "https://api.github.com/users/pcaversaccio/repos",
      "events_url": "https://api.github.com/users/pcaversaccio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pcaversaccio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-05-03T10:22:36Z",
    "updated_at": "2023-05-03T10:22:36Z",
    "author_association": "CONTRIBUTOR",
    "body": "> For the first part, this is definitely something I'd like to do when possible. The main issue I see is that this new opcode will not be available on some EVM network, so we'll need a solution for that. In any case, I think we will wait to see how the solidity language supports this feature.\r\n\r\nSure, my intent on this issue was not to immediately jump to a technical solution but to rather gather a discussion in one place. I think you raise a very important point on the differences within EVM implementations. I would go even further and claim that this discussion is not only about the transient opcodes right now, but generally about how OZ plans to deal with differences in the future. Just as another example, where a precompile breaks a common EVM assumption, is [Moonbeam](https://docs.moonbeam.network/builders/get-started/eth-compare/security/): \r\n![image](https://user-images.githubusercontent.com/25297591/235885803-6aa22c4f-7035-4731-8711-8b29adbf0a88.png)\r\n\r\nOr another example is the behaviour of `CREATE` and `CREATE2` on zkSync; I made a tweet thread about [here](https://twitter.com/pcaversaccio/status/1635346927465406465). The only way I currently see how to solve this generally, is to somehow make the logic dependent on the `chainId`, but I haven't thought about this properly and also this would increase the gas costs. So maybe we can take this discussion as a good opportunity to have a conversation about a future-proof model, where not all chains are fully EVM equivalent.\r\n\r\n> For the second part, I'm personally against it. Yes re-entrancy can lead to bugs, and being 100% safe against any form of re-entrancy (including read-only) re-entrancy is possibly difficult. But I would still qualify re-entrancy as a great feature for contract composability. IMO contract composability is possibly the most important feature of the EVM ecosystem. I fear that preventing re-entrancy by default would seriously limit composability. Also, I'm generally against any \"forbid by default\" approach. If a dev want to block re-entrancy in its app, then ok ... but we should not set that by default. I'd much rather see devs learn how to build re-entrant safety thatn learn that re-entrancy is disabled by the language.\r\n\r\nI feel like those are all valid arguments. But I would like to share some proven facts from practice (at least my experience over the last 8 years or so):\r\n- Devs do not consistently adhere to CEI, otherwise we would not see so many reentrancy attacks,\r\n- Since Solidity has already introduced `unchecked` in version `0.8.0` (i.e. a full footgun protection on math operations by default), we have noticed that there are fewer positive or negative overflow exploits,\r\n- Billions of lost funds justify a certain degree of protection IMHO (see my repo on reentrancy attacks [here](https://github.com/pcaversaccio/reentrancy-attacks)),\r\n- Multiple other languages on other blockchains disabled reentrancy by design (e.g. Radix or Fuel) and we've seen a positive development there,\r\n- Reentrancy as a language feature is built for the 5-10% of professionals that understand the underlying implications (e.g. not everyone needs to build something related to flash loans), but not the remaining majority that implements for example a simple withdraw function using a low-level `call` and doesn't understand what means handing over the execution flow.\r\n\r\n> Will we see the same trend of people trying to circumvent the re-entrancy prevention (sometimes for good reason) and write bad code as a consequence?\r\n\r\nI hope not :) - I honestly think that the `unchecked` arithmetic trend is driven by the bad performance of the compiler optimiser, whilst disabling reentrancy by default is much more security focussed. Disabling a reentrancy requires much more brain work IMHO, than using `unchecked` for e.g. a multiplication. Whenever we can have _unsafe_ external calls, we need to think about what can be unsafe exactly, and how to prevent it. So I think devs will become more prudent hopefully (ofc I can be wrong here).\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1532782822/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1532995883",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/4205#issuecomment-1532995883",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4205",
    "id": 1532995883,
    "node_id": "IC_kwDOA9tCBs5bX6kr",
    "user": {
      "login": "Amxx",
      "id": 2432299,
      "node_id": "MDQ6VXNlcjI0MzIyOTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2432299?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Amxx",
      "html_url": "https://github.com/Amxx",
      "followers_url": "https://api.github.com/users/Amxx/followers",
      "following_url": "https://api.github.com/users/Amxx/following{/other_user}",
      "gists_url": "https://api.github.com/users/Amxx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Amxx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Amxx/subscriptions",
      "organizations_url": "https://api.github.com/users/Amxx/orgs",
      "repos_url": "https://api.github.com/users/Amxx/repos",
      "events_url": "https://api.github.com/users/Amxx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Amxx/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-05-03T13:03:30Z",
    "updated_at": "2023-05-03T13:04:43Z",
    "author_association": "COLLABORATOR",
    "body": "> Reentrancy as a language feature is built for the 5-10% of professionals that understand the underlying implications\r\n\r\nMy personal view on that (which is not OZ position) is that maybe those 5-10% of professionals should be the only one writting defi apps. I don't think \"everyone should write smart contracts\" like \"everyone should write python scripts to help with taxes\" or \"everyone should write php to customize their personal wordpress\".\r\n\r\nIf the language decides to help the 90-95% its ok, as long as they don't make the work of the 5-10% more difficult to write and review.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1532995883/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1533003583",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/4205#issuecomment-1533003583",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4205",
    "id": 1533003583,
    "node_id": "IC_kwDOA9tCBs5bX8c_",
    "user": {
      "login": "Amxx",
      "id": 2432299,
      "node_id": "MDQ6VXNlcjI0MzIyOTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2432299?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Amxx",
      "html_url": "https://github.com/Amxx",
      "followers_url": "https://api.github.com/users/Amxx/followers",
      "following_url": "https://api.github.com/users/Amxx/following{/other_user}",
      "gists_url": "https://api.github.com/users/Amxx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Amxx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Amxx/subscriptions",
      "organizations_url": "https://api.github.com/users/Amxx/orgs",
      "repos_url": "https://api.github.com/users/Amxx/repos",
      "events_url": "https://api.github.com/users/Amxx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Amxx/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-05-03T13:08:31Z",
    "updated_at": "2023-05-03T13:08:31Z",
    "author_association": "COLLABORATOR",
    "body": "> So maybe we can take this discussion as a good opportunity to have a conversation about a future-proof model, where not all chains are fully EVM equivalent.\r\n\r\nThat is an interesting and necessary discussion that we don't really have so far. We worked on tooling to identify some key point of the VM behavior, in order to check our contract will behave as expected. This will possibly detect missing/modified features, but it won't identify new one (like the moonbeam precompile you mentioned).\r\n\r\nIts also unclear what we want to do with this information:\r\n- add warning that contract X will not work on network Y ?\r\n- propose an alternative implementation ?",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1533003583/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1533188221",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/4205#issuecomment-1533188221",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4205",
    "id": 1533188221,
    "node_id": "IC_kwDOA9tCBs5bYph9",
    "user": {
      "login": "pcaversaccio",
      "id": 25297591,
      "node_id": "MDQ6VXNlcjI1Mjk3NTkx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25297591?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pcaversaccio",
      "html_url": "https://github.com/pcaversaccio",
      "followers_url": "https://api.github.com/users/pcaversaccio/followers",
      "following_url": "https://api.github.com/users/pcaversaccio/following{/other_user}",
      "gists_url": "https://api.github.com/users/pcaversaccio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pcaversaccio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pcaversaccio/subscriptions",
      "organizations_url": "https://api.github.com/users/pcaversaccio/orgs",
      "repos_url": "https://api.github.com/users/pcaversaccio/repos",
      "events_url": "https://api.github.com/users/pcaversaccio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pcaversaccio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-05-03T14:56:27Z",
    "updated_at": "2023-05-03T14:57:05Z",
    "author_association": "CONTRIBUTOR",
    "body": "> If the language decides to help the 90-95% its ok, as long as they don't make the work of the 5-10% more difficult to write and review.\r\n\r\nI guess there is no question that this is the ultimate goal.\r\n\r\n> That is an interesting and necessary discussion that we don't really have so far. We worked on tooling to identify some key point of the VM behavior, in order to check our contract will behave as expected. This will possibly detect missing/modified features, but it won't identify new one (like the moonbeam precompile you mentioned).\r\n\r\nIs that kind of tooling open-source?\r\n\r\n> Its also unclear what we want to do with this information:\r\n> \r\n> - add warning that contract X will not work on network Y ?\r\n> - propose an alternative implementation ?\r\n\r\nBased on my experience, warnings are easily ignored. One solution could be to simply state in a disclaimer, that only fully EVM equivalent chains are supported (I drafted an EIP on the definition of this term [here](https://github.com/ethereum/EIPs/pull/6269) because I think it's very important to align here as a community, but unfortunately they closed it; I'm trying to push them to reconsider it again). But that solution might be too high-level and will be ignored by the folks that simply `npm` install OZ contracts. Will need to think about it.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1533188221/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1542904789",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/4205#issuecomment-1542904789",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4205",
    "id": 1542904789,
    "node_id": "IC_kwDOA9tCBs5b9tvV",
    "user": {
      "login": "pcaversaccio",
      "id": 25297591,
      "node_id": "MDQ6VXNlcjI1Mjk3NTkx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25297591?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pcaversaccio",
      "html_url": "https://github.com/pcaversaccio",
      "followers_url": "https://api.github.com/users/pcaversaccio/followers",
      "following_url": "https://api.github.com/users/pcaversaccio/following{/other_user}",
      "gists_url": "https://api.github.com/users/pcaversaccio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pcaversaccio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pcaversaccio/subscriptions",
      "organizations_url": "https://api.github.com/users/pcaversaccio/orgs",
      "repos_url": "https://api.github.com/users/pcaversaccio/repos",
      "events_url": "https://api.github.com/users/pcaversaccio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pcaversaccio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-05-10T22:50:33Z",
    "updated_at": "2023-05-10T22:50:33Z",
    "author_association": "CONTRIBUTOR",
    "body": "Another comment on EVM equivalence given the current circumstances: We are right now in a situation where there are numerous chains that do not support the latest EVM version `shanghai` with the opcode `PUSH0`. This means that, for example, the use of the latest Solidity version `0.8.20`, which supports `PUSH0`, will likely fail with these chains (if it includes `PUSH0` in the init code and gets executed at creation time, the deployment fails; if the runtime code has `PUSH0` and is not executed as part of the deployment, the runtime code can revert on calls) and thus these chains can no longer be considered fully EVM-equivalent. I don't think this is OZ's responsibility to ensure EVM-compatible bytecode, but what if such differences increase over time and certain critical OZ logic cannot be deployed or executed anymore due to EVM version differences? I don't know the solution to this problem, but I just want to highlight it since I deem this important.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1542904789/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1550603914",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/4205#issuecomment-1550603914",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4205",
    "id": 1550603914,
    "node_id": "IC_kwDOA9tCBs5cbFaK",
    "user": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-05-17T02:40:31Z",
    "updated_at": "2023-05-17T02:43:08Z",
    "author_association": "MEMBER",
    "body": "> Is that kind of tooling open-source?\r\n\r\nIt is a test suite rather than tooling, and it isn't really open source quality. One learning I can share is that it's more tough to deal with the \"network level\" specifics of a testnet than it is to deal with the EVM differences across networks (for now)!\r\n\r\n---\r\n\r\nRegarding the point about EVM diverging, I share the concerns but I don't see anything that we can do for now rather than observing how PUSH0 adoption evolves.\r\n\r\nI also think that this issue about transient ReentrancyGuard is a little premature :slightly_smiling_face: but rest assured I also want to see that implemented.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1550603914/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1550990908",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/4205#issuecomment-1550990908",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4205",
    "id": 1550990908,
    "node_id": "IC_kwDOA9tCBs5ccj48",
    "user": {
      "login": "pcaversaccio",
      "id": 25297591,
      "node_id": "MDQ6VXNlcjI1Mjk3NTkx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25297591?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pcaversaccio",
      "html_url": "https://github.com/pcaversaccio",
      "followers_url": "https://api.github.com/users/pcaversaccio/followers",
      "following_url": "https://api.github.com/users/pcaversaccio/following{/other_user}",
      "gists_url": "https://api.github.com/users/pcaversaccio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pcaversaccio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pcaversaccio/subscriptions",
      "organizations_url": "https://api.github.com/users/pcaversaccio/orgs",
      "repos_url": "https://api.github.com/users/pcaversaccio/repos",
      "events_url": "https://api.github.com/users/pcaversaccio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pcaversaccio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-05-17T08:41:00Z",
    "updated_at": "2023-05-17T08:41:00Z",
    "author_association": "CONTRIBUTOR",
    "body": "> It is a test suite rather than tooling, and it isn't really open source quality. One learning I can share is that it's more tough to deal with the \"network level\" specifics of a testnet than it is to deal with the EVM differences across networks (for now)!\r\n\r\nCan you quickly elaborate on what you exactly mean by the \"network level specifics\"? I.e. maybe challenges with the gossip protocol, state tries, signature verifications etc.? (and sorry for going off-topic here, since this issue is about the `ReentrancyGuard`, but I feel it's still important)\r\n\r\n> I also think that this issue about transient ReentrancyGuard is a little premature 🙂 but rest assured I also want to see that implemented.\r\n\r\nYeah, I was just thinking about it and wanted to drop my thoughts into an issue so we have a go-to source for this discussion. I mean I could also open another thread on FEM, but since it's implementation-specific I thought the OZ repo is appropriate 🙂.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1550990908/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1679095716",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/4205#issuecomment-1679095716",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4205",
    "id": 1679095716,
    "node_id": "IC_kwDOA9tCBs5kFPek",
    "user": {
      "login": "sambacha",
      "id": 32783916,
      "node_id": "MDQ6VXNlcjMyNzgzOTE2",
      "avatar_url": "https://avatars.githubusercontent.com/u/32783916?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sambacha",
      "html_url": "https://github.com/sambacha",
      "followers_url": "https://api.github.com/users/sambacha/followers",
      "following_url": "https://api.github.com/users/sambacha/following{/other_user}",
      "gists_url": "https://api.github.com/users/sambacha/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sambacha/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sambacha/subscriptions",
      "organizations_url": "https://api.github.com/users/sambacha/orgs",
      "repos_url": "https://api.github.com/users/sambacha/repos",
      "events_url": "https://api.github.com/users/sambacha/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sambacha/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-08-15T15:06:31Z",
    "updated_at": "2023-08-15T15:06:31Z",
    "author_association": "NONE",
    "body": "> > Reentrancy as a language feature is built for the 5-10% of professionals that understand the underlying implications\r\n> \r\n> My personal view on that (which is not OZ position) is that maybe those 5-10% of professionals should be the only one writting defi apps. I don't think \"everyone should write smart contracts\" like \"everyone should write python scripts to help with taxes\" or \"everyone should write php to customize their personal wordpress\".\r\n> \r\n> If the language decides to help the 90-95% its ok, as long as they don't make the work of the 5-10% more difficult to write and review.\r\n\r\nMy man, yes. Concurrence is hard to grasp to begin with. \r\n\r\nWe dont want to cater to everyone. Principled engineering is an attitude a a much as its experience and knowledge. If you are not serious to begin with go do something else.\r\n\r\nWe want fanatics, no part time believers. \r\n",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1679095716/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
