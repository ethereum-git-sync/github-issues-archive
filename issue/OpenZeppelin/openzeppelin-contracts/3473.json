{
  "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3473",
  "repository_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts",
  "labels_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3473/labels{/name}",
  "comments_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3473/comments",
  "events_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3473/events",
  "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3473",
  "id": 1270529768,
  "node_id": "I_kwDOA9tCBs5Lur7o",
  "number": 3473,
  "title": "Returning token ID from `mint()` function of `ERC721` preset contract.",
  "user": {
    "login": "3rdstage",
    "id": 2508220,
    "node_id": "MDQ6VXNlcjI1MDgyMjA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/2508220?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/3rdstage",
    "html_url": "https://github.com/3rdstage",
    "followers_url": "https://api.github.com/users/3rdstage/followers",
    "following_url": "https://api.github.com/users/3rdstage/following{/other_user}",
    "gists_url": "https://api.github.com/users/3rdstage/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/3rdstage/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/3rdstage/subscriptions",
    "organizations_url": "https://api.github.com/users/3rdstage/orgs",
    "repos_url": "https://api.github.com/users/3rdstage/repos",
    "events_url": "https://api.github.com/users/3rdstage/events{/privacy}",
    "received_events_url": "https://api.github.com/users/3rdstage/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 2,
  "created_at": "2022-06-14T09:37:20Z",
  "updated_at": "2022-06-15T13:57:07Z",
  "closed_at": "2022-06-15T13:57:06Z",
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "**üßê Motivation**\r\nCurrent only preset of ERC721 (`ERC721PresetMinterPauserAutoId`) has `mint()` function that doesn't return the ID of minted token.  \r\nIt's okay for most cases.  But there can be some use-cases that needs to know the ID to post process the minted token, especially called from another contract. (not from off-chain directly).\r\nFor convenience of those cases, *****how about making `mint()` function return the token ID?*****  This may not cause compatibility issue with current design(not returning the token ID). \r\n\r\n\r\n**üìù Details**\r\nFor example, let's support we need a ERC721 contract that would pay some benefit (like some point or ERC20 tokens) when the minted token has special value (like 100, 1,000, 100,000, 111,111 and so on).\r\nIf we extend `ERC721PresetMinterPauserAutoId`, we can't reuse `super.mint()` nor access `_tokenIdTracker()` (which is `private`). So, we must entirely override the `mint()` function with new ID tracker field.\r\n\r\n\r\n```solidity\r\n// When `ERC721PresetMinterPauserAutoId.mint()` doesn't return token ID, \r\n// we have to entirely rewrite (including id tracker state variable) `mint` function\r\ncontract SurpriseERC7221 is ERC721PresetMinterPauserAutoId{\r\n    \r\n    Counters.Counter private _tokenIdTracker;\r\n    PointTokens private _pointToken;\r\n    uint256 private _specialIdBonus;\r\n\r\n    function mint(address to) public virtual {\r\n        uint256 id = _tokenIdTracker.current()\r\n        if(isSpecialId(id)) {\r\n            _pointToken.transfer(to, _specialIdBonus);\r\n        }\r\n        _mint(to, id);\r\n        _tokenIdTracker.increment();\r\n    }\r\n\r\n    function isSpecialId(uint256 id) public view returns (bool){\r\n        ...\r\n    }\r\n}    \r\n``` \r\n\r\n\r\nBut if `ERC721PresetMinterPauserAutoId.mint()` returns the ID of the created token. The above can be more simple using `super.mint()` .\r\n\r\n\r\n```solidity\r\n// If `ERC721PresetMinterPauserAutoId.mint()` would return token ID, \r\n// we can reuse `mint()` function within the derived contract more usefully.\r\ncontract SurpriseERC7221 is ERC721PresetMinterPauserAutoId{\r\n    \r\n    PointTokens private _points;\r\n    uint256 private _specialIdBonus;\r\n\r\n    function mint(address to) public virtual {\r\n        uint256 id = super.mint(to);\r\n        if(isSpecialId(id)) {\r\n            _points.mint(to, _specialIdBonus);\r\n        }\r\n    }\r\n\r\n    function isSpecialId(uint256 id) public view returns (bool){\r\n        ...\r\n    }\r\n}    \r\n``` \r\n\r\n\r\nIf `ERC721PresetMinterPauserAutoId.mint()` returns the ID, we can even use delegation (not inheritance) to apply surprise bonus to already deployed contracts.\r\nIn this case, *****delegation is not possible without returned ID*****, because, the contract can't catch event from other contract.\r\n\r\n\r\n```solidity\r\ncontract SurpriseERC7221Minter{\r\n\r\n    ERC721PresetMinterPauserAutoId private _assets;\r\n    PointTokens private _points;\r\n    uint256 private _specialIdBonus;\r\n    \r\n    constructor(address assets, address points, uint256 bonus){\r\n        ...\r\n        _assets.grantRole(_assets.MINTER_ROLE(), address(this));\r\n        _points.grantRole(_points.MINTER_ROLE(), address(this));\r\n    }\r\n\r\n    function mintWithBonus(address to){\r\n        uint256 id = _assets.mint(to);\r\n        if(isSpecialId(id)) {\r\n            _points.mint(to, _specialIdBonus);\r\n        }\r\n    }\r\n    \r\n    function isSpecialId(uint256 id) public view returns (bool){\r\n        ...\r\n    }\r\n     \r\n````        \r\n\r\n     \r\nAbove example shows that *****`mint()` function that returning token ID would be more useful, especially when called from other contracts.*****.\r\nAs more features - such as locking, decorating and so on - are added, the ERC721 contract may have more chance to need to know the given ID right after being minted.\r\n\r\nChanging current `ERC721PresetMinterPauserAutoId.mint()` function to return token ID will not cause any compatibility issue. \r\nExisting codes that assume the `mint()` function is void would be safe even after the function have changed to return the ID.\r\n\r\nSo, *****why not `mint()` to return the ID ?*****\r\n \r\n\r\n\r\n",
  "closed_by": {
    "login": "Amxx",
    "id": 2432299,
    "node_id": "MDQ6VXNlcjI0MzIyOTk=",
    "avatar_url": "https://avatars.githubusercontent.com/u/2432299?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/Amxx",
    "html_url": "https://github.com/Amxx",
    "followers_url": "https://api.github.com/users/Amxx/followers",
    "following_url": "https://api.github.com/users/Amxx/following{/other_user}",
    "gists_url": "https://api.github.com/users/Amxx/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/Amxx/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/Amxx/subscriptions",
    "organizations_url": "https://api.github.com/users/Amxx/orgs",
    "repos_url": "https://api.github.com/users/Amxx/repos",
    "events_url": "https://api.github.com/users/Amxx/events{/privacy}",
    "received_events_url": "https://api.github.com/users/Amxx/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3473/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3473/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1155048342",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3473#issuecomment-1155048342",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3473",
    "id": 1155048342,
    "node_id": "IC_kwDOA9tCBs5E2KOW",
    "user": {
      "login": "Amxx",
      "id": 2432299,
      "node_id": "MDQ6VXNlcjI0MzIyOTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2432299?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Amxx",
      "html_url": "https://github.com/Amxx",
      "followers_url": "https://api.github.com/users/Amxx/followers",
      "following_url": "https://api.github.com/users/Amxx/following{/other_user}",
      "gists_url": "https://api.github.com/users/Amxx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Amxx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Amxx/subscriptions",
      "organizations_url": "https://api.github.com/users/Amxx/orgs",
      "repos_url": "https://api.github.com/users/Amxx/repos",
      "events_url": "https://api.github.com/users/Amxx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Amxx/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-06-14T11:17:20Z",
    "updated_at": "2022-06-14T11:17:20Z",
    "author_association": "COLLABORATOR",
    "body": "Hello @3rdstage \r\n\r\nI don't think returning the tokenId would be an issue here. However, I want to point out a few things:\r\n\r\n- Presets are not really designed to be built on top of, but rather be used out-of-the-box.\r\n- Presets are currently deprecated in favor of [the wizard](wizard.openzeppelin.com/).\r\n- Presets are likely going to be removed in the next major release.\r\n\r\n@frangio should we add this to 4.x ???",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1155048342/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1156509305",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3473#issuecomment-1156509305",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3473",
    "id": 1156509305,
    "node_id": "IC_kwDOA9tCBs5E7u55",
    "user": {
      "login": "Amxx",
      "id": 2432299,
      "node_id": "MDQ6VXNlcjI0MzIyOTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2432299?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Amxx",
      "html_url": "https://github.com/Amxx",
      "followers_url": "https://api.github.com/users/Amxx/followers",
      "following_url": "https://api.github.com/users/Amxx/following{/other_user}",
      "gists_url": "https://api.github.com/users/Amxx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Amxx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Amxx/subscriptions",
      "organizations_url": "https://api.github.com/users/Amxx/orgs",
      "repos_url": "https://api.github.com/users/Amxx/repos",
      "events_url": "https://api.github.com/users/Amxx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Amxx/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-06-15T13:57:06Z",
    "updated_at": "2022-06-15T13:57:06Z",
    "author_association": "COLLABORATOR",
    "body": "Closing this here, but we should open an issue in the wizard repo, so that contract produced by the wizard return the tokenId",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1156509305/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
