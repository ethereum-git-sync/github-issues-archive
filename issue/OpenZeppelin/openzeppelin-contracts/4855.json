{
  "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4855",
  "repository_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts",
  "labels_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4855/labels{/name}",
  "comments_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4855/comments",
  "events_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4855/events",
  "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/4855",
  "id": 2100670963,
  "node_id": "I_kwDOA9tCBs59NbHz",
  "number": 4855,
  "title": "Consider checking code length of the signer before attempting an ecrecover in SignatureChecker.isValidSignatureNow",
  "user": {
    "login": "Amxx",
    "id": 2432299,
    "node_id": "MDQ6VXNlcjI0MzIyOTk=",
    "avatar_url": "https://avatars.githubusercontent.com/u/2432299?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/Amxx",
    "html_url": "https://github.com/Amxx",
    "followers_url": "https://api.github.com/users/Amxx/followers",
    "following_url": "https://api.github.com/users/Amxx/following{/other_user}",
    "gists_url": "https://api.github.com/users/Amxx/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/Amxx/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/Amxx/subscriptions",
    "organizations_url": "https://api.github.com/users/Amxx/orgs",
    "repos_url": "https://api.github.com/users/Amxx/repos",
    "events_url": "https://api.github.com/users/Amxx/events{/privacy}",
    "received_events_url": "https://api.github.com/users/Amxx/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 0,
  "created_at": "2024-01-25T15:47:00Z",
  "updated_at": "2024-01-25T15:47:01Z",
  "closed_at": null,
  "author_association": "COLLABORATOR",
  "active_lock_reason": null,
  "body": "The current implementation of `SignatureChecker.isValidSignatureNow` is\r\n\r\n```solidity\r\nfunction isValidSignatureNow(address signer, bytes32 hash, bytes memory signature) internal view returns (bool) {\r\n    (address recovered, ECDSA.RecoverError error, ) = ECDSA.tryRecover(hash, signature);\r\n    return\r\n        (error == ECDSA.RecoverError.NoError && recovered == signer) ||\r\n        isValidERC1271SignatureNow(signer, hash, signature);\r\n}\r\n```\r\n\r\nThis implementation assumes that ecrecover will not identify the correct signer if the signer is a smart contract. This comes from the assumption that there contract addresses is generated in such a way that there is no (known) private key that derivates to the same address.\r\n\r\nThese assumption could be challenged by [EIP-7377](https://eips.ethereum.org/EIPS/eip-7377).\r\n\r\nIf EIP-7377 is deployed, a private key would be able to deploy code at its own address. In that case, there would be a known private key for the contract. This causes a governance issue. Some people may expect the contract to have some shared ownership (Multisig), be controlled by another wallet (Ownable), or just trustless. But using the private key that was used to deploy it, the deployer could generate a Permit signature (or similar) that could result in funds being drained out of the contract.\r\n\r\nThis attack will be feasable on historical implementations if the ecrecover precompile does not check the presence of code at the recovered location!\r\n\r\nIt as been proposed to not rely on the precompile possibly being changed, and change our implementation toward:\r\n\r\n```solidity\r\nfunction isValidSignatureNow(address signer, bytes32 hash, bytes memory signature) internal view returns (bool) {\r\n    if (signer.code.length == 0) {\r\n        (address recovered, ECDSA.RecoverError error, ) = ECDSA.tryRecover(hash, signature);\r\n        return (error == ECDSA.RecoverError.NoError && recovered == signer);\r\n    } else {\r\n        return isValidERC1271SignatureNow(signer, hash, signature);\r\n    }\r\n}\r\n```\r\n\r\nHowever, doing this would significantly increase the gas cost when the signer is an EOA:\r\n- If the signer is an EOA, then it is likelly that the signature is used in a transaction that is not performed by the signer itself. In that case, the signer account is cold, and the `signer.code.length == 0` checks costs 2600 gas! With signer being an EOA, it is unlikelly that it is called at any point, so \"warming up\" the account it not reused, and we should not anticipate saving elsewere as a result of this.\r\n- If the signer is not an EOA, then we are going to call `IERC1271.isValidSignature` on it anyway. In that case the cost of the check is only really 100gas. The new version would also not try the unecessary ecrecover, with result is some savings. Overall this new version would be cheaper.\r\n\r\nWe expect the proposed version to be cheaper when signer is a contract, and signature verification is done through ERC-1271. However the proposed version should also be significantly more expensive (+2600gas) when the signer is an EOA, which is the vast majority of cases.",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4855/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4855/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[

]
