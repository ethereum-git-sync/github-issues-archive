{
  "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3235",
  "repository_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts",
  "labels_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3235/labels{/name}",
  "comments_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3235/comments",
  "events_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3235/events",
  "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3235",
  "id": 1156900913,
  "node_id": "I_kwDOA9tCBs5E9Ogx",
  "number": 3235,
  "title": "GovernorCompatibilityBravo ran out of gas when deploying",
  "user": {
    "login": "TheStarBoys",
    "id": 41286328,
    "node_id": "MDQ6VXNlcjQxMjg2MzI4",
    "avatar_url": "https://avatars.githubusercontent.com/u/41286328?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/TheStarBoys",
    "html_url": "https://github.com/TheStarBoys",
    "followers_url": "https://api.github.com/users/TheStarBoys/followers",
    "following_url": "https://api.github.com/users/TheStarBoys/following{/other_user}",
    "gists_url": "https://api.github.com/users/TheStarBoys/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/TheStarBoys/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/TheStarBoys/subscriptions",
    "organizations_url": "https://api.github.com/users/TheStarBoys/orgs",
    "repos_url": "https://api.github.com/users/TheStarBoys/repos",
    "events_url": "https://api.github.com/users/TheStarBoys/events{/privacy}",
    "received_events_url": "https://api.github.com/users/TheStarBoys/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 2,
  "created_at": "2022-03-02T09:33:02Z",
  "updated_at": "2022-03-02T18:06:14Z",
  "closed_at": "2022-03-02T18:06:14Z",
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "<!-- Briefly describe the issue you're experiencing. Tell us what you were trying to do and what happened instead. -->\r\n\r\n<!-- Remember, this is not a place to ask for help debugging code. For that, we welcome you in the OpenZeppelin Community Forum: https://forum.openzeppelin.com/. -->\r\n\r\n**üíª Environment**\r\n\r\n<!-- Tell us what version of OpenZeppelin Contracts you're using, and how you're using it: Truffle, Remix, etc. -->\r\nOpenZeppelin version: 4.5.0\r\nTruffle version: 5.3.7\r\nGanachi verison: 6.12.2\r\nOS: Darwin 12.1\r\n\r\n\r\n**üìù Details**\r\n\r\n<!-- Describe the problem you have been experiencing in more detail. Include as much information as you think is relevant. Keep in mind that transactions can fail for many reasons; context is key here. -->\r\n\r\n1. I copy 2 contracts from this [docs](https://docs.openzeppelin.com/contracts/4.x/governance) and just modify some variable names. And rename MyToken to GovernanceToken, and rename MyGovernor to MyGovernorComp.\r\n2. Add TimelockController to my project.\r\n3. Write migration scripts, run ganachi and try deploying.\r\n4. Deploy failed: \"MyGovernorComp\" ran out of gas (using a value you set in your network config or deployment parameters.)\r\n   * Block limit:  187219750 (0xb28bf26)\r\n   * Gas sent:     187219750 (0xb28bf26)\r\n5. As you can see, I increase block limit of ganachi-cli and gas of truffle-config.js to very large value. But still \"ran out of gas\".\r\n6. Then I copy MyGovernorComp as MyGovernor, remove GovernorCompatibilityBravo from MyGovernor and add GovernorCountingSimple. It works.\r\n7. So I guess GovernorCompatibilityBravo has issues.\r\n\r\n\r\n**üî¢ Code to reproduce bug**\r\n\r\n<!-- We will be able to better help if you provide a minimal example that triggers the bug. -->\r\n\r\n```solidity\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.2;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol\";\r\n\r\ncontract GovernanceToken is ERC20, ERC20Permit, ERC20Votes {\r\n    constructor() ERC20(\"MyToken\", \"MTK\") ERC20Permit(\"MyToken\") {}\r\n\r\n    // The functions below are overrides required by Solidity.\r\n\r\n    function _afterTokenTransfer(address from, address to, uint256 amount)\r\n        internal\r\n        override(ERC20, ERC20Votes)\r\n    {\r\n        super._afterTokenTransfer(from, to, amount);\r\n    }\r\n\r\n    function _mint(address to, uint256 amount)\r\n        internal\r\n        override(ERC20, ERC20Votes)\r\n    {\r\n        super._mint(to, amount);\r\n    }\r\n\r\n    function _burn(address account, uint256 amount)\r\n        internal\r\n        override(ERC20, ERC20Votes)\r\n    {\r\n        super._burn(account, amount);\r\n    }\r\n}\r\n```\r\n\r\n```solidity\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.2;\r\n\r\nimport \"@openzeppelin/contracts/governance/Governor.sol\";\r\nimport \"@openzeppelin/contracts/governance/extensions/GovernorVotes.sol\";\r\nimport \"@openzeppelin/contracts/governance/extensions/GovernorVotesQuorumFraction.sol\";\r\nimport \"@openzeppelin/contracts/governance/extensions/GovernorCountingSimple.sol\";\r\nimport \"@openzeppelin/contracts/governance/extensions/GovernorTimelockControl.sol\";\r\n\r\ncontract MyGovernor is Governor, GovernorVotes, GovernorVotesQuorumFraction, GovernorCountingSimple, GovernorTimelockControl {\r\n    constructor(IVotes _token, TimelockController _timelock)\r\n        Governor(\"MyGovernor\")\r\n        GovernorVotes(_token)\r\n        GovernorVotesQuorumFraction(4)\r\n        GovernorTimelockControl(_timelock)\r\n    {}\r\n\r\n    function votingDelay() public pure override returns (uint256) {\r\n        // return 6575; // 1 day\r\n        return 300; // 5 mins\r\n    }\r\n\r\n    function votingPeriod() public pure override returns (uint256) {\r\n        // return 46027; // 1 week\r\n        return 300; // 5 mins\r\n    }\r\n\r\n    function proposalThreshold() public pure override returns (uint256) {\r\n        return 0;\r\n    }\r\n\r\n    // The functions below are overrides required by Solidity.\r\n\r\n    function quorum(uint256 blockNumber)\r\n        public\r\n        view\r\n        override(IGovernor, GovernorVotesQuorumFraction)\r\n        returns (uint256)\r\n    {\r\n        return super.quorum(blockNumber);\r\n    }\r\n\r\n    function getVotes(address account, uint256 blockNumber)\r\n        public\r\n        view\r\n        override(IGovernor, GovernorVotes)\r\n        returns (uint256)\r\n    {\r\n        return super.getVotes(account, blockNumber);\r\n    }\r\n\r\n    function state(uint256 proposalId)\r\n        public\r\n        view\r\n        override(Governor, GovernorTimelockControl)\r\n        returns (ProposalState)\r\n    {\r\n        return super.state(proposalId);\r\n    }\r\n\r\n    function _execute(uint256 proposalId, address[] memory targets, uint256[] memory values, bytes[] memory calldatas, bytes32 descriptionHash)\r\n        internal\r\n        override(Governor, GovernorTimelockControl)\r\n    {\r\n        super._execute(proposalId, targets, values, calldatas, descriptionHash);\r\n    }\r\n\r\n    function _cancel(address[] memory targets, uint256[] memory values, bytes[] memory calldatas, bytes32 descriptionHash)\r\n        internal\r\n        override(Governor, GovernorTimelockControl)\r\n        returns (uint256)\r\n    {\r\n        return super._cancel(targets, values, calldatas, descriptionHash);\r\n    }\r\n\r\n    function _executor()\r\n        internal\r\n        view\r\n        override(Governor, GovernorTimelockControl)\r\n        returns (address)\r\n    {\r\n        return super._executor();\r\n    }\r\n\r\n    function supportsInterface(bytes4 interfaceId)\r\n        public\r\n        view\r\n        override(Governor, GovernorTimelockControl)\r\n        returns (bool)\r\n    {\r\n        return super.supportsInterface(interfaceId);\r\n    }\r\n}\r\n```\r\n\r\n```solidity\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.2;\r\n\r\nimport \"@openzeppelin/contracts/governance/Governor.sol\";\r\nimport \"@openzeppelin/contracts/governance/compatibility/GovernorCompatibilityBravo.sol\";\r\nimport \"@openzeppelin/contracts/governance/extensions/GovernorSettings.sol\";\r\nimport \"@openzeppelin/contracts/governance/extensions/GovernorVotes.sol\";\r\nimport \"@openzeppelin/contracts/governance/extensions/GovernorVotesQuorumFraction.sol\";\r\nimport \"@openzeppelin/contracts/governance/extensions/GovernorTimelockControl.sol\";\r\n\r\ncontract MyGovernorComp is Governor, GovernorCompatibilityBravo, GovernorVotes, GovernorVotesQuorumFraction, GovernorTimelockControl {\r\n    constructor(IVotes _token, TimelockController _timelock)\r\n        Governor(\"MyGovernor\")\r\n        GovernorVotes(_token)\r\n        GovernorVotesQuorumFraction(4)\r\n        GovernorTimelockControl(_timelock)\r\n    {}\r\n\r\n    function votingDelay() public pure override returns (uint256) {\r\n        return 6575; // 1 day\r\n    }\r\n\r\n    function votingPeriod() public pure override returns (uint256) {\r\n        return 46027; // 1 week\r\n    }\r\n\r\n    function proposalThreshold() public pure override returns (uint256) {\r\n        return 0;\r\n    }\r\n\r\n    // The functions below are overrides required by Solidity.\r\n\r\n    function quorum(uint256 blockNumber)\r\n        public\r\n        view\r\n        override(IGovernor, GovernorVotesQuorumFraction)\r\n        returns (uint256)\r\n    {\r\n        return super.quorum(blockNumber);\r\n    }\r\n\r\n    function getVotes(address account, uint256 blockNumber)\r\n        public\r\n        view\r\n        override(IGovernor, GovernorVotes)\r\n        returns (uint256)\r\n    {\r\n        return super.getVotes(account, blockNumber);\r\n    }\r\n\r\n    function state(uint256 proposalId)\r\n        public\r\n        view\r\n        override(Governor, IGovernor, GovernorTimelockControl)\r\n        returns (ProposalState)\r\n    {\r\n        return super.state(proposalId);\r\n    }\r\n\r\n    function propose(address[] memory targets, uint256[] memory values, bytes[] memory calldatas, string memory description)\r\n        public\r\n        override(Governor, GovernorCompatibilityBravo, IGovernor)\r\n        returns (uint256)\r\n    {\r\n        return super.propose(targets, values, calldatas, description);\r\n    }\r\n\r\n    function _execute(uint256 proposalId, address[] memory targets, uint256[] memory values, bytes[] memory calldatas, bytes32 descriptionHash)\r\n        internal\r\n        override(Governor, GovernorTimelockControl)\r\n    {\r\n        super._execute(proposalId, targets, values, calldatas, descriptionHash);\r\n    }\r\n\r\n    function _cancel(address[] memory targets, uint256[] memory values, bytes[] memory calldatas, bytes32 descriptionHash)\r\n        internal\r\n        override(Governor, GovernorTimelockControl)\r\n        returns (uint256)\r\n    {\r\n        return super._cancel(targets, values, calldatas, descriptionHash);\r\n    }\r\n\r\n    function _executor()\r\n        internal\r\n        view\r\n        override(Governor, GovernorTimelockControl)\r\n        returns (address)\r\n    {\r\n        return super._executor();\r\n    }\r\n\r\n    function supportsInterface(bytes4 interfaceId)\r\n        public\r\n        view\r\n        override(Governor, IERC165, GovernorTimelockControl)\r\n        returns (bool)\r\n    {\r\n        return super.supportsInterface(interfaceId);\r\n    }\r\n}\r\n```\r\n\r\n```solidity\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.2;\r\n\r\nimport \"@openzeppelin/contracts/governance/TimelockController.sol\";\r\n\r\ncontract MyTimelock is TimelockController {\r\n  constructor(\r\n    uint256 minDelay,\r\n    address[] memory proposers,\r\n    address[] memory executors\r\n  ) TimelockController(minDelay, proposers, executors) {}\r\n}\r\n```\r\n\r\n```javascript\r\nconst USDTMock = artifacts.require('USDTMock')\r\nconst GovernanceToken = artifacts.require('GovernanceToken')\r\nconst TimelockController = artifacts.require('MyTimelock')\r\nconst MyGovernor = artifacts.require('MyGovernorComp')\r\nconst ethers = require('ethers')\r\nconst { toWei, fromWei } = web3.utils\r\n\r\nconst fs = require('fs')\r\n\r\nmodule.exports = async (deployer, network, accounts) => {\r\n    console.log(\">>>>> network: \", network)\r\n    await deploy(deployer, network, accounts)\r\n}\r\n\r\nlet deployedContracts = {\r\n    governance_token: '',\r\n    timelock: '',\r\n    my_governor: '',\r\n    startBlock: 0,\r\n}\r\n\r\nconst deploy = async (deployer, network, accounts) => {\r\n    deployedContracts.startBlock = await web3.eth.getBlockNumber()\r\n    if (network.indexOf('testnet') != -1 || network == 'development') {\r\n        await deployContractsInTestnet(deployer, accounts)\r\n    } else if (network == 'bscmainnet') {\r\n    }\r\n\r\n    if (network != 'test' && network != 'development') {\r\n        console.log('deployedContracts: ', deployedContracts)\r\n        \r\n        let obj = JSON.parse(fs.readFileSync('./deployedContracts.json'))\r\n        obj[network] = deployedContracts\r\n        fs.writeFileSync('./deployedContracts.json', JSON.stringify(obj, null, 2))\r\n    }\r\n}\r\n\r\nconst deployContractsInTestnet = async (deployer, [dev, alice, bob]) => {\r\n    await deployer.deploy(USDTMock)\r\n    let usdt = await USDTMock.deployed()\r\n    await deployer.deploy(GovernanceToken)\r\n    let governanceToken = await GovernanceToken.deployed()\r\n    deployedContracts.governance_token = governanceToken.address\r\n\r\n    let nonce = await web3.eth.getTransactionCount(dev)\r\n    let timelockAddr = ethers.utils.getContractAddress({from: dev, nonce: nonce})\r\n    let myGovernorAddr = ethers.utils.getContractAddress({from: dev, nonce: nonce+1})\r\n    console.log(`dev: ${dev} nonce: ${nonce} timelockAddr: ${timelockAddr}, myGovernorAddr: ${myGovernorAddr}`)\r\n\r\n    await deployer.deploy(TimelockController, 5 * 60, [myGovernorAddr], [])\r\n    deployedContracts.timelock = timelockAddr\r\n\r\n    await deployer.deploy(MyGovernor, governanceToken.address, timelockAddr)\r\n    // await deployer.deploy(MyGovernor, governanceToken.address)\r\n    deployedContracts.my_governor = myGovernorAddr\r\n\r\n    // Transfer USDT into treasury of the DAO.\r\n    await usdt.transfer(timelockAddr, '1000')\r\n\r\n    showTokenBalance(timelockAddr, usdt)\r\n\r\n    const usdtContract = new ethers.Contract(usdt.address, `[{\r\n        \"inputs\": [\r\n          {\r\n            \"internalType\": \"address\",\r\n            \"name\": \"recipient\",\r\n            \"type\": \"address\"\r\n          },\r\n          {\r\n            \"internalType\": \"uint256\",\r\n            \"name\": \"amount\",\r\n            \"type\": \"uint256\"\r\n          }\r\n        ],\r\n        \"name\": \"transfer\",\r\n        \"outputs\": [\r\n          {\r\n            \"internalType\": \"bool\",\r\n            \"name\": \"\",\r\n            \"type\": \"bool\"\r\n          }\r\n        ],\r\n        \"stateMutability\": \"nonpayable\",\r\n        \"type\": \"function\"\r\n      }]`)\r\n\r\n    const transferCalldata = usdtContract.interface.encodeFunctionData('transfer', [alice, '50'])\r\n    // Create a proposal\r\n    let myGovernor = await MyGovernor.deployed()\r\n    let proposalCreatedTx = await myGovernor.propose(\r\n        [usdt.address], // targets\r\n        ['0'], // values\r\n        [transferCalldata], // calldatas\r\n        'Proposal #1: Give grant to team' // description\r\n    )\r\n    console.log('proposalCreatedTx: ', proposalCreatedTx)\r\n}\r\n\r\nconst showTokenBalance = async (targetAddr, token) => {\r\n    console.log('token balance: ', (await token.balanceOf(targetAddr)).toString())\r\n}\r\n```\r\n",
  "closed_by": {
    "login": "Amxx",
    "id": 2432299,
    "node_id": "MDQ6VXNlcjI0MzIyOTk=",
    "avatar_url": "https://avatars.githubusercontent.com/u/2432299?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/Amxx",
    "html_url": "https://github.com/Amxx",
    "followers_url": "https://api.github.com/users/Amxx/followers",
    "following_url": "https://api.github.com/users/Amxx/following{/other_user}",
    "gists_url": "https://api.github.com/users/Amxx/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/Amxx/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/Amxx/subscriptions",
    "organizations_url": "https://api.github.com/users/Amxx/orgs",
    "repos_url": "https://api.github.com/users/Amxx/repos",
    "events_url": "https://api.github.com/users/Amxx/events{/privacy}",
    "received_events_url": "https://api.github.com/users/Amxx/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3235/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3235/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1056859929",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3235#issuecomment-1056859929",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3235",
    "id": 1056859929,
    "node_id": "IC_kwDOA9tCBs4-_mcZ",
    "user": {
      "login": "Amxx",
      "id": 2432299,
      "node_id": "MDQ6VXNlcjI0MzIyOTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2432299?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Amxx",
      "html_url": "https://github.com/Amxx",
      "followers_url": "https://api.github.com/users/Amxx/followers",
      "following_url": "https://api.github.com/users/Amxx/following{/other_user}",
      "gists_url": "https://api.github.com/users/Amxx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Amxx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Amxx/subscriptions",
      "organizations_url": "https://api.github.com/users/Amxx/orgs",
      "repos_url": "https://api.github.com/users/Amxx/repos",
      "events_url": "https://api.github.com/users/Amxx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Amxx/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-03-02T12:11:36Z",
    "updated_at": "2022-03-02T12:12:08Z",
    "author_association": "COLLABORATOR",
    "body": "Hello @TheStarBoys \r\n\r\n0xb28bf26 as gas number makes no sense. Since EIP1559, the block size is 30m gas.\r\n\r\nThe GovernorCompatibilityBravo is indeed a big contract, but our testing suite shows it is possible to deploy it providing that:\r\n- **you have enabled optimisations**\r\n- you are using a recent enough blockchain (any public blockchain in the ETH ecosystem should be good, not sure about ETC or other \"evm-compatible\" chains)",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1056859929/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1057055737",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3235#issuecomment-1057055737",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3235",
    "id": 1057055737,
    "node_id": "IC_kwDOA9tCBs4_AWP5",
    "user": {
      "login": "TheStarBoys",
      "id": 41286328,
      "node_id": "MDQ6VXNlcjQxMjg2MzI4",
      "avatar_url": "https://avatars.githubusercontent.com/u/41286328?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheStarBoys",
      "html_url": "https://github.com/TheStarBoys",
      "followers_url": "https://api.github.com/users/TheStarBoys/followers",
      "following_url": "https://api.github.com/users/TheStarBoys/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheStarBoys/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheStarBoys/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheStarBoys/subscriptions",
      "organizations_url": "https://api.github.com/users/TheStarBoys/orgs",
      "repos_url": "https://api.github.com/users/TheStarBoys/repos",
      "events_url": "https://api.github.com/users/TheStarBoys/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheStarBoys/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-03-02T15:25:49Z",
    "updated_at": "2022-03-02T15:25:49Z",
    "author_association": "NONE",
    "body": "@Amxx Thanks for your advice. When I delete old artifacts generated by truffle and enable optimisations, it works.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1057055737/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
