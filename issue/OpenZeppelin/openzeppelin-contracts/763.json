{
  "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/763",
  "repository_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts",
  "labels_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/763/labels{/name}",
  "comments_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/763/comments",
  "events_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/763/events",
  "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/763",
  "id": 298771437,
  "node_id": "MDU6SXNzdWUyOTg3NzE0Mzc=",
  "number": 763,
  "title": "Change ERC721Token `private` functions to `internal`",
  "user": {
    "login": "ryana",
    "id": 16389,
    "node_id": "MDQ6VXNlcjE2Mzg5",
    "avatar_url": "https://avatars.githubusercontent.com/u/16389?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/ryana",
    "html_url": "https://github.com/ryana",
    "followers_url": "https://api.github.com/users/ryana/followers",
    "following_url": "https://api.github.com/users/ryana/following{/other_user}",
    "gists_url": "https://api.github.com/users/ryana/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/ryana/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/ryana/subscriptions",
    "organizations_url": "https://api.github.com/users/ryana/orgs",
    "repos_url": "https://api.github.com/users/ryana/repos",
    "events_url": "https://api.github.com/users/ryana/events{/privacy}",
    "received_events_url": "https://api.github.com/users/ryana/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 4,
  "created_at": "2018-02-20T22:23:04Z",
  "updated_at": "2018-02-22T18:40:04Z",
  "closed_at": "2018-02-21T18:06:49Z",
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "## 🎉 Description\r\n\r\n<!-- Briefly describe the issue you are experiencing (or the feature you want to see added to OpenZeppelin). Tell us what you were trying to do and what happened instead. **Remember, this is _not_ a place to ask for help debugging code; for that, we welcome you in the [OpenZeppelin Slack Channel](https://slack.openzeppelin.org/).** -->\r\n\r\nI think the functions inside of the ERC721Token class should not be `private` but rather `internal`.\r\n\r\n- [ ] 🐛 This is a bug report.\r\n- [x] 📈 This is a feature request.\r\n\r\n\r\n## 💻 Environment\r\n\r\n- v1.6.0\r\n- Rinkeby\r\n- Truffle\r\n\r\n## 📝 Details\r\n\r\n\r\nHi! This weekend I used your ERC721 library to build something at ETHDenver. I had a novel use case for ERC721 tokens that required a small bit of nonstandard behavior. For reasons I will explain in depth below, I needed to allow the contract owner, not just the token owner, to burn a token.\r\n\r\nThis required me to override this:\r\n```\r\n  function _burn(uint256 _tokenId) onlyOwnerOf(_tokenId) internal {\r\n    if (approvedFor(_tokenId) != 0) {\r\n      clearApproval(msg.sender, _tokenId);\r\n    }\r\n    removeToken(msg.sender, _tokenId);\r\n    Transfer(msg.sender, 0x0, _tokenId);\r\n  }\r\n```\r\n\r\nto this:\r\n```\r\n  function _burn(uint256 _tokenId) internal {\r\n    address ownerOfToken = ownerOf(_tokenId);\r\n\r\n    if (approvedFor(_tokenId) != 0) {\r\n      clearApproval(ownerOfToken, _tokenId);\r\n    }\r\n    removeToken(ownerOfToken, _tokenId);\r\n    Transfer(ownerOfToken, 0x0, _tokenId);\r\n  }\r\n```\r\n\r\nThe problem I ran into is that since `clearApproval` and `removeToken` are private, I couldn't just do this. I had to copy in the whole contract (http://github.com/ryana/ethden-eth-gateway/blob/master/contracts/QuickEth.sol)\r\n\r\nI don't understand why anything should be private except for the data. i.e.:\r\n\r\n```\r\n  // Total amount of tokens\r\n  uint256 private totalTokens;\r\n\r\n  // Mapping from token ID to owner\r\n  mapping (uint256 => address) private tokenOwner;\r\n\r\n  // Mapping from token ID to approved address\r\n  mapping (uint256 => address) private tokenApprovals;\r\n\r\n  // Mapping from owner to list of owned token IDs\r\n  mapping (address => uint256[]) private ownedTokens;\r\n\r\n  // Mapping from token ID to index of the owner tokens list\r\n  mapping(uint256 => uint256) private ownedTokensIndex;\r\n```\r\n\r\nSo I am proposing this is changed. I am happy to provide the PR if you all agree.\r\n\r\n## 👍 Other Information\r\n\r\nI know that this will probably illicit some \"why would you want to do this?\"-type responses, so to give you a little more context, the general idea is that I was building a small escrow service that gives merchants who want to get paid in crypto the ability allow their customers to use credit cards. Upon a successful charge, my service would issue an ETH-backed NFT which would be revocable for a certain period of time based on the risk profile of the purchaser. After the revocation window passes, the NFT can be burned and the ETH backing it gets released.\r\n\r\nhttps://bit.ly/quicketh-preso",
  "closed_by": {
    "login": "ryana",
    "id": 16389,
    "node_id": "MDQ6VXNlcjE2Mzg5",
    "avatar_url": "https://avatars.githubusercontent.com/u/16389?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/ryana",
    "html_url": "https://github.com/ryana",
    "followers_url": "https://api.github.com/users/ryana/followers",
    "following_url": "https://api.github.com/users/ryana/following{/other_user}",
    "gists_url": "https://api.github.com/users/ryana/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/ryana/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/ryana/subscriptions",
    "organizations_url": "https://api.github.com/users/ryana/orgs",
    "repos_url": "https://api.github.com/users/ryana/repos",
    "events_url": "https://api.github.com/users/ryana/events{/privacy}",
    "received_events_url": "https://api.github.com/users/ryana/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/763/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/763/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/367185795",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/763#issuecomment-367185795",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/763",
    "id": 367185795,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2NzE4NTc5NQ==",
    "user": {
      "login": "carloschida",
      "id": 979600,
      "node_id": "MDQ6VXNlcjk3OTYwMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/979600?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/carloschida",
      "html_url": "https://github.com/carloschida",
      "followers_url": "https://api.github.com/users/carloschida/followers",
      "following_url": "https://api.github.com/users/carloschida/following{/other_user}",
      "gists_url": "https://api.github.com/users/carloschida/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/carloschida/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/carloschida/subscriptions",
      "organizations_url": "https://api.github.com/users/carloschida/orgs",
      "repos_url": "https://api.github.com/users/carloschida/repos",
      "events_url": "https://api.github.com/users/carloschida/events{/privacy}",
      "received_events_url": "https://api.github.com/users/carloschida/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-21T01:45:35Z",
    "updated_at": "2018-02-21T08:05:08Z",
    "author_association": "NONE",
    "body": "As you write in 'Other Information' I don't agree with the change but find your use case useful.\r\nI explain why I don't agree and propose later a workaround to your business case.\r\n\r\n# Reasons to disagree\r\n\r\nThese comments are based on private research I undertook for a client for a related project.\r\n\r\n## Contradiction of ~~the NFT standard~~ EIP-721\r\nI am of the idea that your proposal contradicts the common practices, and understanding of what property is and implies, and thus violates the spirit of the EIP-721 Deed Standard\r\n\r\nIn the [EIP-721 Deed Standard](https://github.com/ethereum/EIPs/pull/841#issuecomment-360030881) the following is mentioned:\r\n\r\n> The things to which deeds express ownership are an implementation detail. While writing this standard we considered a diverse univerise of things, and we know you will dream up many more:\r\n>\r\n>Physical property — houses, unique artwork\r\n>Digital property — unique pictures of kittens, collectable cards\r\n>\"Negative value\" assets — loans, burdens and other responsibilities\r\n\r\nSticking then to what property means, I refer to the article of [Tony Honoré on Wikipedia in German](https://de.wikipedia.org/wiki/Tony_Honor%C3%A9) (unluckily the version in English does not contain the text to which I want to refer but I leave a [link to the fairly good Google-translated version](https://translate.google.com/translate?sl=auto&tl=en&js=y&prev=_t&hl=en&ie=UTF-8&u=https%3A%2F%2Fde.wikipedia.org%2Fwiki%2FTony_Honor%C3%A9&edit-text=&act=url)).\r\nIn the table that depicts the 11 rights and obligations of property (as in ownership thereof), one can find:\r\n> 6. Right to security against expropriation.\r\n> 9. Duty to prevent damage.\r\n\r\nOne can easily agree on these two contradicting your proposal in the sense that a non-owner, in the case the issuer, of the token is allowed to destroy the token. Extrapolate this to saying that a construction company has the right to destroy a house even after it sold it.\r\n\r\n## Lines of credit as contracts contradict (partially) blockchain settlements\r\n\r\nIn the [presentation you shared](https://bit.ly/quicketh-preso), you state\r\n> It [QuickETH] never issues more NFTs than it has non-spoken-for ETH.\r\n\r\nThis turns QuickETH into a credit provider. You're are already mitigating some of the risk by saying\r\n> If we get a spike in usage, NFTs will not be issues until we can push more ETH into the contract to back the NFTs.\r\n\r\nWithout getting too philosophical here, I believe that the spirit of settlements on a blockchain is to ensure that only _true_ transactions are recorded. Therefore, providing a line of credit via a NFT that can be traded and later burnt by party exogenous to the transaction, is rather conflicting, even if the tokens have “revocation expiry timestamp”.\r\nIf Alice wants to sell Bob a good and they reach a agreement to a price stated in QuickETH's NFT, Alice would need to check the timestamp of each of the tokens Bob has and ponder the risk in which she would incur. This creates a high burden comparable to that of a credit score review.\r\n\r\n# Business workaround\r\nAssume fully the risk that a credit-line-providing service involves. Grant immediately the amount of ETH they want to acquire charging a commission based on the amount of ETH they want to acquire, your proposed social check, and your own credit experience with them to cover your lending risk and profit. Inasmuch as their credit record evolves adjust the previously mentioned commission.\r\n\r\nI hope you find these comments helpful.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/367185795/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/367191888",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/763#issuecomment-367191888",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/763",
    "id": 367191888,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2NzE5MTg4OA==",
    "user": {
      "login": "ryana",
      "id": 16389,
      "node_id": "MDQ6VXNlcjE2Mzg5",
      "avatar_url": "https://avatars.githubusercontent.com/u/16389?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryana",
      "html_url": "https://github.com/ryana",
      "followers_url": "https://api.github.com/users/ryana/followers",
      "following_url": "https://api.github.com/users/ryana/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryana/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryana/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryana/subscriptions",
      "organizations_url": "https://api.github.com/users/ryana/orgs",
      "repos_url": "https://api.github.com/users/ryana/repos",
      "events_url": "https://api.github.com/users/ryana/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryana/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-21T02:19:21Z",
    "updated_at": "2018-02-21T02:19:21Z",
    "author_association": "NONE",
    "body": "Thanks a lot for engaging on this @carloschida. I find these comments very helpful. I'm going to sleep on this and will respond again in the morning.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/367191888/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/367416818",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/763#issuecomment-367416818",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/763",
    "id": 367416818,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2NzQxNjgxOA==",
    "user": {
      "login": "ryana",
      "id": 16389,
      "node_id": "MDQ6VXNlcjE2Mzg5",
      "avatar_url": "https://avatars.githubusercontent.com/u/16389?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryana",
      "html_url": "https://github.com/ryana",
      "followers_url": "https://api.github.com/users/ryana/followers",
      "following_url": "https://api.github.com/users/ryana/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryana/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryana/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryana/subscriptions",
      "organizations_url": "https://api.github.com/users/ryana/orgs",
      "repos_url": "https://api.github.com/users/ryana/repos",
      "events_url": "https://api.github.com/users/ryana/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryana/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-21T18:06:49Z",
    "updated_at": "2018-02-21T18:06:49Z",
    "author_association": "NONE",
    "body": "I understand your point of view with respect to the philosophy behind NFT and I really appreciate you taking the time to enlighten me. Some really great stuff in there I never considered. When I first read your comment last night, I got stuck on the \"Negative value\" asset example as a perfect example _allowing_ what I'm proposing. But then I realized that even if a loan defaults, the holder of that loan still holds that loan. Nobody should ever take it away from them.\r\n\r\nI'm going to close this since I agree now that the way it is implemented is required to stop people from doing exactly what I did, which breaks the idea of deeds :) \r\n\r\n---\r\n\r\nThat being said, I have two more questions which I think others who stumble across this may benefit from:\r\n\r\n1. What is the purpose of `_burn` and `_mint` having the `_` prefix? I thought that meant I SHOULD override these functions, but now as I begin to more fully understand what you're saying, I'm realizing it probably means that I MUST call those at least once in my implementation to conform to the standard. If that's the case, what should I have read to know that?\r\n\r\n2. I'm still probably going to deploy a contract like this on mainnet at some point. Clearly it will not be a valid 721 token for the reasons we have discussed. Is there someway I can make my contract signal that? I would like ERC721 wallets to be able to move this asset around, but I would also like to put some sort of asterisk on the token so that people aren't misled. Do any other ERCs discuss how to do that?\r\n\r\nThank you!",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/367416818/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/367778670",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/763#issuecomment-367778670",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/763",
    "id": 367778670,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2Nzc3ODY3MA==",
    "user": {
      "login": "carloschida",
      "id": 979600,
      "node_id": "MDQ6VXNlcjk3OTYwMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/979600?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/carloschida",
      "html_url": "https://github.com/carloschida",
      "followers_url": "https://api.github.com/users/carloschida/followers",
      "following_url": "https://api.github.com/users/carloschida/following{/other_user}",
      "gists_url": "https://api.github.com/users/carloschida/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/carloschida/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/carloschida/subscriptions",
      "organizations_url": "https://api.github.com/users/carloschida/orgs",
      "repos_url": "https://api.github.com/users/carloschida/repos",
      "events_url": "https://api.github.com/users/carloschida/events{/privacy}",
      "received_events_url": "https://api.github.com/users/carloschida/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-22T18:40:04Z",
    "updated_at": "2018-02-22T18:40:04Z",
    "author_association": "NONE",
    "body": "You're most welcome. I'm glad I could be of assistance.\r\n\r\nOn point 1.\r\nNot so long ago I questioned that my self, because it doesn't always fit the patterns employed in other OOL, and found this discussion useful: [What is the purpose of underscores in front of parameters](https://ethereum.stackexchange.com/questions/1351/what-is-the-purpose-of-underscores-in-front-of-parameters).\r\nYet I'd stick to the rule 'code is king/law': whether you SHOULD contrasted to whether you MUST or even SHALL NOT becomes a weak reason even when specified in a ERC or alike in comparison to whether you **can**.\r\n\r\nOn point 2.\r\nI don't know a way to signal _all_ wallets about the specific nature of your deed (if you decide to implement à la ERC721). Probably you should wait to see how `ERC721Metadata` evolves (specified somewhere [here](https://github.com/ethereum/EIPs/pull/841#issuecomment-360030881)).\r\nAs an additional comment on the business side, you could check out the way [Lykke Wallet](https://www.lykke.com) operates: in their [assets directory](https://blockchainexplorer.lykke.com/assets) you can see information related to each token. I could imagine that your business case could use a BlockchainExplorer similar to theirs to see some information at a glance, eg date of issuance, to whom it was originally issued and their credit score, etc.  ",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/367778670/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
