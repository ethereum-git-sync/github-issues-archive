{
  "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4318",
  "repository_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts",
  "labels_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4318/labels{/name}",
  "comments_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4318/comments",
  "events_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4318/events",
  "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/4318",
  "id": 1743812577,
  "node_id": "I_kwDOA9tCBs5n8Hfh",
  "number": 4318,
  "title": "`EIP712`: `_TYPE_HASH` including `salt`",
  "user": {
    "login": "pcaversaccio",
    "id": 25297591,
    "node_id": "MDQ6VXNlcjI1Mjk3NTkx",
    "avatar_url": "https://avatars.githubusercontent.com/u/25297591?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/pcaversaccio",
    "html_url": "https://github.com/pcaversaccio",
    "followers_url": "https://api.github.com/users/pcaversaccio/followers",
    "following_url": "https://api.github.com/users/pcaversaccio/following{/other_user}",
    "gists_url": "https://api.github.com/users/pcaversaccio/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/pcaversaccio/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/pcaversaccio/subscriptions",
    "organizations_url": "https://api.github.com/users/pcaversaccio/orgs",
    "repos_url": "https://api.github.com/users/pcaversaccio/repos",
    "events_url": "https://api.github.com/users/pcaversaccio/events{/privacy}",
    "received_events_url": "https://api.github.com/users/pcaversaccio/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 6,
  "created_at": "2023-06-06T12:53:37Z",
  "updated_at": "2023-06-07T13:21:56Z",
  "closed_at": null,
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "Since `EIP-5267` got merged I wanted to raise a question. In [`EIP-712`](https://eips.ethereum.org/EIPS/eip-712)'s definition of the `domainSeparator` a so-called `salt` is also listed:\r\n\r\n> `bytes32 salt` an disambiguating salt for the protocol. This can be used as a domain separator of last resort.\r\n\r\n`EIP-5267` also supports the `salt` parameters for retrieval via the `fields` parameter. Now, my question: shouldn't we adjust the [`EIP712`](https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/cryptography/EIP712.sol) to incorporate this `salt` parameter?\r\n\r\nI.e.:\r\n\r\n```diff\r\n- bytes32 private constant _TYPE_HASH = keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\");\r\n+ bytes32 private constant _TYPE_HASH = keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract,bytes32 salt)\");\r\n```\r\n\r\nand\r\n\r\n```solidity\r\nfunction _buildDomainSeparator(bytes32 salt) private view returns (bytes32) {\r\n    return keccak256(abi.encode(_TYPE_HASH, _hashedName, _hashedVersion, block.chainid, address(this), salt));\r\n}\r\n```\r\n\r\nThe above are illustrations and _not_ final code suggestions.",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4318/reactions",
    "total_count": 1,
    "+1": 1,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4318/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1578938117",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/4318#issuecomment-1578938117",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4318",
    "id": 1578938117,
    "node_id": "IC_kwDOA9tCBs5eHK8F",
    "user": {
      "login": "Amxx",
      "id": 2432299,
      "node_id": "MDQ6VXNlcjI0MzIyOTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2432299?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Amxx",
      "html_url": "https://github.com/Amxx",
      "followers_url": "https://api.github.com/users/Amxx/followers",
      "following_url": "https://api.github.com/users/Amxx/following{/other_user}",
      "gists_url": "https://api.github.com/users/Amxx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Amxx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Amxx/subscriptions",
      "organizations_url": "https://api.github.com/users/Amxx/orgs",
      "repos_url": "https://api.github.com/users/Amxx/repos",
      "events_url": "https://api.github.com/users/Amxx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Amxx/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-06-06T15:03:43Z",
    "updated_at": "2023-06-06T15:03:43Z",
    "author_association": "COLLABORATOR",
    "body": "Hello @pcaversaccio \r\n\r\nIMO most cases don't need the salt. In fact, the only use of salt I've seen in production is in some polygon contract that used chainId as the salt (and did not include chainId).\r\n\r\nI wouldn't want to force that onto any user, particularly without a good documentation explaining when/why use the salt.\r\n\r\nOn the other hand, it would be better if our implementation could allow someone that want to include a salt to do so.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1578938117/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1578946495",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/4318#issuecomment-1578946495",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4318",
    "id": 1578946495,
    "node_id": "IC_kwDOA9tCBs5eHM-_",
    "user": {
      "login": "pcaversaccio",
      "id": 25297591,
      "node_id": "MDQ6VXNlcjI1Mjk3NTkx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25297591?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pcaversaccio",
      "html_url": "https://github.com/pcaversaccio",
      "followers_url": "https://api.github.com/users/pcaversaccio/followers",
      "following_url": "https://api.github.com/users/pcaversaccio/following{/other_user}",
      "gists_url": "https://api.github.com/users/pcaversaccio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pcaversaccio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pcaversaccio/subscriptions",
      "organizations_url": "https://api.github.com/users/pcaversaccio/orgs",
      "repos_url": "https://api.github.com/users/pcaversaccio/repos",
      "events_url": "https://api.github.com/users/pcaversaccio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pcaversaccio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-06-06T15:08:20Z",
    "updated_at": "2023-06-06T15:08:20Z",
    "author_association": "CONTRIBUTOR",
    "body": "> On the other hand, it would be better if our implementation could allow someone that want to include a salt to do so.\r\n\r\nI think OpenZeppelin is optimising for security, correctness and completeness (to a certain extend). Thus, I definitely believe OZ as the most common Solidity smart contract library should allow for such a customisation if someone would like to include the salt.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1578946495/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1578954868",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/4318#issuecomment-1578954868",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4318",
    "id": 1578954868,
    "node_id": "IC_kwDOA9tCBs5eHPB0",
    "user": {
      "login": "Amxx",
      "id": 2432299,
      "node_id": "MDQ6VXNlcjI0MzIyOTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2432299?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Amxx",
      "html_url": "https://github.com/Amxx",
      "followers_url": "https://api.github.com/users/Amxx/followers",
      "following_url": "https://api.github.com/users/Amxx/following{/other_user}",
      "gists_url": "https://api.github.com/users/Amxx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Amxx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Amxx/subscriptions",
      "organizations_url": "https://api.github.com/users/Amxx/orgs",
      "repos_url": "https://api.github.com/users/Amxx/repos",
      "events_url": "https://api.github.com/users/Amxx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Amxx/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-06-06T15:13:11Z",
    "updated_at": "2023-06-06T15:14:26Z",
    "author_association": "COLLABORATOR",
    "body": "We could have a version that does\r\n\r\n```solidity\r\n    function _buildDomainSeparator() private view returns (bytes32) {\r\n        return _salt == bytes32(0)\r\n            ? keccak256(abi.encode(_TYPE_HASH,           _hashedName, _hashedVersion, block.chainid, address(this)))\r\n            : keccak256(abi.encode(_TYPE_HASH_WITH_SALT, _hashedName, _hashedVersion, block.chainid, address(this), _salt));\r\n    }\r\n    \r\n    function eip712Domain()\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (\r\n            bytes1 fields,\r\n            string memory name,\r\n            string memory version,\r\n            uint256 chainId,\r\n            address verifyingContract,\r\n            bytes32 salt,\r\n            uint256[] memory extensions\r\n        )\r\n    {\r\n        return (\r\n            _salt == bytes32(0) ? hex\"0f\" : hex\"1f\", // 01111 or 11111\r\n            _name.toStringWithFallback(_nameFallback),\r\n            _version.toStringWithFallback(_versionFallback),\r\n            block.chainid,\r\n            address(this),\r\n            _salt,\r\n            new uint256[](0)\r\n        );\r\n    }\r\n```\r\n\r\nIf _salt is immutable, we would be breaking the constructor's argument.\r\n\r\nWe could declare a \r\n```solidity \r\nfunction _salt() internal pure virtual returns (bytes32) { return bytes32(0); }\r\n```\r\nor \r\n```solidity \r\nfunction _salt() internal pure virtual returns (bool enabled, bytes32 value) { return (false, bytes32(0)); }\r\n```\r\nthat users can overload. I'm wondering if `pure` gives enough guarantees (it should be constant in time)\r\n\r\n@frangio, what do you think ?",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1578954868/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1580097577",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/4318#issuecomment-1580097577",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4318",
    "id": 1580097577,
    "node_id": "IC_kwDOA9tCBs5eLmAp",
    "user": {
      "login": "Amxx",
      "id": 2432299,
      "node_id": "MDQ6VXNlcjI0MzIyOTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2432299?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Amxx",
      "html_url": "https://github.com/Amxx",
      "followers_url": "https://api.github.com/users/Amxx/followers",
      "following_url": "https://api.github.com/users/Amxx/following{/other_user}",
      "gists_url": "https://api.github.com/users/Amxx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Amxx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Amxx/subscriptions",
      "organizations_url": "https://api.github.com/users/Amxx/orgs",
      "repos_url": "https://api.github.com/users/Amxx/repos",
      "events_url": "https://api.github.com/users/Amxx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Amxx/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-06-07T07:28:21Z",
    "updated_at": "2023-06-07T07:28:21Z",
    "author_association": "COLLABORATOR",
    "body": "One more thing we need to discuss is: \r\nAre there any users that require this feature, or is the need purely theoretical?\r\n\r\nIf we don't see any real need for a salt in the EIP712 domain, we probably shouldn't add unnecessary complexity to the code.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1580097577/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1580111509",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/4318#issuecomment-1580111509",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4318",
    "id": 1580111509,
    "node_id": "IC_kwDOA9tCBs5eLpaV",
    "user": {
      "login": "pcaversaccio",
      "id": 25297591,
      "node_id": "MDQ6VXNlcjI1Mjk3NTkx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25297591?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pcaversaccio",
      "html_url": "https://github.com/pcaversaccio",
      "followers_url": "https://api.github.com/users/pcaversaccio/followers",
      "following_url": "https://api.github.com/users/pcaversaccio/following{/other_user}",
      "gists_url": "https://api.github.com/users/pcaversaccio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pcaversaccio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pcaversaccio/subscriptions",
      "organizations_url": "https://api.github.com/users/pcaversaccio/orgs",
      "repos_url": "https://api.github.com/users/pcaversaccio/repos",
      "events_url": "https://api.github.com/users/pcaversaccio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pcaversaccio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-06-07T07:38:56Z",
    "updated_at": "2023-06-07T07:39:15Z",
    "author_association": "CONTRIBUTOR",
    "body": "absolutely - fwiw [this](https://github.com/RevokeCash/revoke.cash/blob/master/lib/utils/permit.ts#L42) is for instance what revoke.cash does (so apparently many use cases use the `chainId` as `salt`):\r\n\r\n```ts\r\nconst salt = utils.hexZeroPad(utils.hexlify(chainId), 32);\r\n\r\n// Given the potential fields of a domain, we try to find the one that matches the domain separator\r\nconst potentialDomains = [\r\n  // Expected domain separators\r\n  { name, version, chainId, verifyingContract },\r\n  { name, version, verifyingContract, salt },\r\n  { name: symbol, version, chainId, verifyingContract },\r\n  { name: symbol, version, verifyingContract, salt },\r\n\r\n  // Without version\r\n  { name, chainId, verifyingContract },\r\n  { name, verifyingContract, salt },\r\n  { name: symbol, chainId, verifyingContract },\r\n  { name: symbol, verifyingContract, salt },\r\n\r\n  // Without name\r\n  { version, chainId, verifyingContract },\r\n  { version, verifyingContract, salt },\r\n\r\n  // Without name or version\r\n  { chainId, verifyingContract },\r\n  { verifyingContract, salt },\r\n\r\n  // With both chainId and salt\r\n  { name, version, chainId, verifyingContract, salt },\r\n  { name: symbol, version, chainId, verifyingContract, salt },\r\n];\r\n\r\nconst domain = potentialDomains.find((domain) => utils._TypedDataEncoder.hashDomain(domain) === domainSeparator);\r\n```\r\n\r\n@rkalis sorry for tagging but you might have some input here about use cases you have seen with revoke.cash.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1580111509/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1580808854",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/4318#issuecomment-1580808854",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4318",
    "id": 1580808854,
    "node_id": "IC_kwDOA9tCBs5eOTqW",
    "user": {
      "login": "Amxx",
      "id": 2432299,
      "node_id": "MDQ6VXNlcjI0MzIyOTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2432299?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Amxx",
      "html_url": "https://github.com/Amxx",
      "followers_url": "https://api.github.com/users/Amxx/followers",
      "following_url": "https://api.github.com/users/Amxx/following{/other_user}",
      "gists_url": "https://api.github.com/users/Amxx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Amxx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Amxx/subscriptions",
      "organizations_url": "https://api.github.com/users/Amxx/orgs",
      "repos_url": "https://api.github.com/users/Amxx/repos",
      "events_url": "https://api.github.com/users/Amxx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Amxx/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-06-07T13:20:49Z",
    "updated_at": "2023-06-07T13:21:56Z",
    "author_association": "COLLABORATOR",
    "body": "I see no case when both chainId and salt are used ... and  I would say that using the chainId as salt is bad design !\r\n\r\nIf that is the only real usecase, then I'd say we should stick with including the chainId for everyone and not including the salt.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1580808854/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
