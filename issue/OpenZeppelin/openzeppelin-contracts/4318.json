{
  "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4318",
  "repository_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts",
  "labels_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4318/labels{/name}",
  "comments_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4318/comments",
  "events_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4318/events",
  "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/4318",
  "id": 1743812577,
  "node_id": "I_kwDOA9tCBs5n8Hfh",
  "number": 4318,
  "title": "`EIP712`: `_TYPE_HASH` including `salt`",
  "user": {
    "login": "pcaversaccio",
    "id": 25297591,
    "node_id": "MDQ6VXNlcjI1Mjk3NTkx",
    "avatar_url": "https://avatars.githubusercontent.com/u/25297591?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/pcaversaccio",
    "html_url": "https://github.com/pcaversaccio",
    "followers_url": "https://api.github.com/users/pcaversaccio/followers",
    "following_url": "https://api.github.com/users/pcaversaccio/following{/other_user}",
    "gists_url": "https://api.github.com/users/pcaversaccio/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/pcaversaccio/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/pcaversaccio/subscriptions",
    "organizations_url": "https://api.github.com/users/pcaversaccio/orgs",
    "repos_url": "https://api.github.com/users/pcaversaccio/repos",
    "events_url": "https://api.github.com/users/pcaversaccio/events{/privacy}",
    "received_events_url": "https://api.github.com/users/pcaversaccio/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 10,
  "created_at": "2023-06-06T12:53:37Z",
  "updated_at": "2023-06-08T07:20:53Z",
  "closed_at": null,
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "Since `EIP-5267` got merged I wanted to raise a question. In [`EIP-712`](https://eips.ethereum.org/EIPS/eip-712)'s definition of the `domainSeparator` a so-called `salt` is also listed:\r\n\r\n> `bytes32 salt` an disambiguating salt for the protocol. This can be used as a domain separator of last resort.\r\n\r\n`EIP-5267` also supports the `salt` parameters for retrieval via the `fields` parameter. Now, my question: shouldn't we adjust the [`EIP712`](https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/cryptography/EIP712.sol) to incorporate this `salt` parameter?\r\n\r\nI.e.:\r\n\r\n```diff\r\n- bytes32 private constant _TYPE_HASH = keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\");\r\n+ bytes32 private constant _TYPE_HASH = keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract,bytes32 salt)\");\r\n```\r\n\r\nand\r\n\r\n```solidity\r\nfunction _buildDomainSeparator(bytes32 salt) private view returns (bytes32) {\r\n    return keccak256(abi.encode(_TYPE_HASH, _hashedName, _hashedVersion, block.chainid, address(this), salt));\r\n}\r\n```\r\n\r\nThe above are illustrations and _not_ final code suggestions.",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4318/reactions",
    "total_count": 1,
    "+1": 1,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4318/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1578938117",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/4318#issuecomment-1578938117",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4318",
    "id": 1578938117,
    "node_id": "IC_kwDOA9tCBs5eHK8F",
    "user": {
      "login": "Amxx",
      "id": 2432299,
      "node_id": "MDQ6VXNlcjI0MzIyOTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2432299?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Amxx",
      "html_url": "https://github.com/Amxx",
      "followers_url": "https://api.github.com/users/Amxx/followers",
      "following_url": "https://api.github.com/users/Amxx/following{/other_user}",
      "gists_url": "https://api.github.com/users/Amxx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Amxx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Amxx/subscriptions",
      "organizations_url": "https://api.github.com/users/Amxx/orgs",
      "repos_url": "https://api.github.com/users/Amxx/repos",
      "events_url": "https://api.github.com/users/Amxx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Amxx/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-06-06T15:03:43Z",
    "updated_at": "2023-06-06T15:03:43Z",
    "author_association": "COLLABORATOR",
    "body": "Hello @pcaversaccio \r\n\r\nIMO most cases don't need the salt. In fact, the only use of salt I've seen in production is in some polygon contract that used chainId as the salt (and did not include chainId).\r\n\r\nI wouldn't want to force that onto any user, particularly without a good documentation explaining when/why use the salt.\r\n\r\nOn the other hand, it would be better if our implementation could allow someone that want to include a salt to do so.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1578938117/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1578946495",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/4318#issuecomment-1578946495",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4318",
    "id": 1578946495,
    "node_id": "IC_kwDOA9tCBs5eHM-_",
    "user": {
      "login": "pcaversaccio",
      "id": 25297591,
      "node_id": "MDQ6VXNlcjI1Mjk3NTkx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25297591?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pcaversaccio",
      "html_url": "https://github.com/pcaversaccio",
      "followers_url": "https://api.github.com/users/pcaversaccio/followers",
      "following_url": "https://api.github.com/users/pcaversaccio/following{/other_user}",
      "gists_url": "https://api.github.com/users/pcaversaccio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pcaversaccio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pcaversaccio/subscriptions",
      "organizations_url": "https://api.github.com/users/pcaversaccio/orgs",
      "repos_url": "https://api.github.com/users/pcaversaccio/repos",
      "events_url": "https://api.github.com/users/pcaversaccio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pcaversaccio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-06-06T15:08:20Z",
    "updated_at": "2023-06-06T15:08:20Z",
    "author_association": "CONTRIBUTOR",
    "body": "> On the other hand, it would be better if our implementation could allow someone that want to include a salt to do so.\r\n\r\nI think OpenZeppelin is optimising for security, correctness and completeness (to a certain extend). Thus, I definitely believe OZ as the most common Solidity smart contract library should allow for such a customisation if someone would like to include the salt.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1578946495/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1578954868",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/4318#issuecomment-1578954868",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4318",
    "id": 1578954868,
    "node_id": "IC_kwDOA9tCBs5eHPB0",
    "user": {
      "login": "Amxx",
      "id": 2432299,
      "node_id": "MDQ6VXNlcjI0MzIyOTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2432299?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Amxx",
      "html_url": "https://github.com/Amxx",
      "followers_url": "https://api.github.com/users/Amxx/followers",
      "following_url": "https://api.github.com/users/Amxx/following{/other_user}",
      "gists_url": "https://api.github.com/users/Amxx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Amxx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Amxx/subscriptions",
      "organizations_url": "https://api.github.com/users/Amxx/orgs",
      "repos_url": "https://api.github.com/users/Amxx/repos",
      "events_url": "https://api.github.com/users/Amxx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Amxx/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-06-06T15:13:11Z",
    "updated_at": "2023-06-06T15:14:26Z",
    "author_association": "COLLABORATOR",
    "body": "We could have a version that does\r\n\r\n```solidity\r\n    function _buildDomainSeparator() private view returns (bytes32) {\r\n        return _salt == bytes32(0)\r\n            ? keccak256(abi.encode(_TYPE_HASH,           _hashedName, _hashedVersion, block.chainid, address(this)))\r\n            : keccak256(abi.encode(_TYPE_HASH_WITH_SALT, _hashedName, _hashedVersion, block.chainid, address(this), _salt));\r\n    }\r\n    \r\n    function eip712Domain()\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (\r\n            bytes1 fields,\r\n            string memory name,\r\n            string memory version,\r\n            uint256 chainId,\r\n            address verifyingContract,\r\n            bytes32 salt,\r\n            uint256[] memory extensions\r\n        )\r\n    {\r\n        return (\r\n            _salt == bytes32(0) ? hex\"0f\" : hex\"1f\", // 01111 or 11111\r\n            _name.toStringWithFallback(_nameFallback),\r\n            _version.toStringWithFallback(_versionFallback),\r\n            block.chainid,\r\n            address(this),\r\n            _salt,\r\n            new uint256[](0)\r\n        );\r\n    }\r\n```\r\n\r\nIf _salt is immutable, we would be breaking the constructor's argument.\r\n\r\nWe could declare a \r\n```solidity \r\nfunction _salt() internal pure virtual returns (bytes32) { return bytes32(0); }\r\n```\r\nor \r\n```solidity \r\nfunction _salt() internal pure virtual returns (bool enabled, bytes32 value) { return (false, bytes32(0)); }\r\n```\r\nthat users can overload. I'm wondering if `pure` gives enough guarantees (it should be constant in time)\r\n\r\n@frangio, what do you think ?",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1578954868/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1580097577",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/4318#issuecomment-1580097577",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4318",
    "id": 1580097577,
    "node_id": "IC_kwDOA9tCBs5eLmAp",
    "user": {
      "login": "Amxx",
      "id": 2432299,
      "node_id": "MDQ6VXNlcjI0MzIyOTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2432299?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Amxx",
      "html_url": "https://github.com/Amxx",
      "followers_url": "https://api.github.com/users/Amxx/followers",
      "following_url": "https://api.github.com/users/Amxx/following{/other_user}",
      "gists_url": "https://api.github.com/users/Amxx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Amxx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Amxx/subscriptions",
      "organizations_url": "https://api.github.com/users/Amxx/orgs",
      "repos_url": "https://api.github.com/users/Amxx/repos",
      "events_url": "https://api.github.com/users/Amxx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Amxx/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-06-07T07:28:21Z",
    "updated_at": "2023-06-07T07:28:21Z",
    "author_association": "COLLABORATOR",
    "body": "One more thing we need to discuss is: \r\nAre there any users that require this feature, or is the need purely theoretical?\r\n\r\nIf we don't see any real need for a salt in the EIP712 domain, we probably shouldn't add unnecessary complexity to the code.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1580097577/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1580111509",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/4318#issuecomment-1580111509",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4318",
    "id": 1580111509,
    "node_id": "IC_kwDOA9tCBs5eLpaV",
    "user": {
      "login": "pcaversaccio",
      "id": 25297591,
      "node_id": "MDQ6VXNlcjI1Mjk3NTkx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25297591?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pcaversaccio",
      "html_url": "https://github.com/pcaversaccio",
      "followers_url": "https://api.github.com/users/pcaversaccio/followers",
      "following_url": "https://api.github.com/users/pcaversaccio/following{/other_user}",
      "gists_url": "https://api.github.com/users/pcaversaccio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pcaversaccio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pcaversaccio/subscriptions",
      "organizations_url": "https://api.github.com/users/pcaversaccio/orgs",
      "repos_url": "https://api.github.com/users/pcaversaccio/repos",
      "events_url": "https://api.github.com/users/pcaversaccio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pcaversaccio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-06-07T07:38:56Z",
    "updated_at": "2023-06-07T07:39:15Z",
    "author_association": "CONTRIBUTOR",
    "body": "absolutely - fwiw [this](https://github.com/RevokeCash/revoke.cash/blob/master/lib/utils/permit.ts#L42) is for instance what revoke.cash does (so apparently many use cases use the `chainId` as `salt`):\r\n\r\n```ts\r\nconst salt = utils.hexZeroPad(utils.hexlify(chainId), 32);\r\n\r\n// Given the potential fields of a domain, we try to find the one that matches the domain separator\r\nconst potentialDomains = [\r\n  // Expected domain separators\r\n  { name, version, chainId, verifyingContract },\r\n  { name, version, verifyingContract, salt },\r\n  { name: symbol, version, chainId, verifyingContract },\r\n  { name: symbol, version, verifyingContract, salt },\r\n\r\n  // Without version\r\n  { name, chainId, verifyingContract },\r\n  { name, verifyingContract, salt },\r\n  { name: symbol, chainId, verifyingContract },\r\n  { name: symbol, verifyingContract, salt },\r\n\r\n  // Without name\r\n  { version, chainId, verifyingContract },\r\n  { version, verifyingContract, salt },\r\n\r\n  // Without name or version\r\n  { chainId, verifyingContract },\r\n  { verifyingContract, salt },\r\n\r\n  // With both chainId and salt\r\n  { name, version, chainId, verifyingContract, salt },\r\n  { name: symbol, version, chainId, verifyingContract, salt },\r\n];\r\n\r\nconst domain = potentialDomains.find((domain) => utils._TypedDataEncoder.hashDomain(domain) === domainSeparator);\r\n```\r\n\r\n@rkalis sorry for tagging but you might have some input here about use cases you have seen with revoke.cash.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1580111509/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1580808854",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/4318#issuecomment-1580808854",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4318",
    "id": 1580808854,
    "node_id": "IC_kwDOA9tCBs5eOTqW",
    "user": {
      "login": "Amxx",
      "id": 2432299,
      "node_id": "MDQ6VXNlcjI0MzIyOTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2432299?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Amxx",
      "html_url": "https://github.com/Amxx",
      "followers_url": "https://api.github.com/users/Amxx/followers",
      "following_url": "https://api.github.com/users/Amxx/following{/other_user}",
      "gists_url": "https://api.github.com/users/Amxx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Amxx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Amxx/subscriptions",
      "organizations_url": "https://api.github.com/users/Amxx/orgs",
      "repos_url": "https://api.github.com/users/Amxx/repos",
      "events_url": "https://api.github.com/users/Amxx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Amxx/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-06-07T13:20:49Z",
    "updated_at": "2023-06-07T13:21:56Z",
    "author_association": "COLLABORATOR",
    "body": "I see no case when both chainId and salt are used ... and  I would say that using the chainId as salt is bad design !\r\n\r\nIf that is the only real usecase, then I'd say we should stick with including the chainId for everyone and not including the salt.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1580808854/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1581310297",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/4318#issuecomment-1581310297",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4318",
    "id": 1581310297,
    "node_id": "IC_kwDOA9tCBs5eQOFZ",
    "user": {
      "login": "pcaversaccio",
      "id": 25297591,
      "node_id": "MDQ6VXNlcjI1Mjk3NTkx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25297591?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pcaversaccio",
      "html_url": "https://github.com/pcaversaccio",
      "followers_url": "https://api.github.com/users/pcaversaccio/followers",
      "following_url": "https://api.github.com/users/pcaversaccio/following{/other_user}",
      "gists_url": "https://api.github.com/users/pcaversaccio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pcaversaccio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pcaversaccio/subscriptions",
      "organizations_url": "https://api.github.com/users/pcaversaccio/orgs",
      "repos_url": "https://api.github.com/users/pcaversaccio/repos",
      "events_url": "https://api.github.com/users/pcaversaccio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pcaversaccio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-06-07T18:25:58Z",
    "updated_at": "2023-06-07T18:26:27Z",
    "author_association": "CONTRIBUTOR",
    "body": "A recent example where the `block.prevrandao` is used for the `salt` is the [crvUSD Stablecoin](https://etherscan.io/address/0xf939e0a03fb07f59a73314e73794be0e57ac1b4e/advanced#code): \r\n![image](https://github.com/OpenZeppelin/openzeppelin-contracts/assets/25297591/bedffabd-48c2-46ea-9498-8cd025881770)\r\n![image](https://github.com/OpenZeppelin/openzeppelin-contracts/assets/25297591/559bdbbf-05d1-42fb-94f8-d9b3c8901101)\r\n\r\nIt's written in Vyper but I simply wanted to highlight that there are projects out there using `salt` in different ways. ",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1581310297/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1581375741",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/4318#issuecomment-1581375741",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4318",
    "id": 1581375741,
    "node_id": "IC_kwDOA9tCBs5eQeD9",
    "user": {
      "login": "Amxx",
      "id": 2432299,
      "node_id": "MDQ6VXNlcjI0MzIyOTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2432299?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Amxx",
      "html_url": "https://github.com/Amxx",
      "followers_url": "https://api.github.com/users/Amxx/followers",
      "following_url": "https://api.github.com/users/Amxx/following{/other_user}",
      "gists_url": "https://api.github.com/users/Amxx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Amxx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Amxx/subscriptions",
      "organizations_url": "https://api.github.com/users/Amxx/orgs",
      "repos_url": "https://api.github.com/users/Amxx/repos",
      "events_url": "https://api.github.com/users/Amxx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Amxx/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-06-07T19:18:19Z",
    "updated_at": "2023-06-07T19:18:58Z",
    "author_association": "COLLABORATOR",
    "body": "I'm sure you can find example of projects using a salt ... but WHY are they doing that ? \r\n\r\nI don't want an example of project that do it. I want a good reason for projects doing it. I want a rational for our users to clearly decide if they need it of not.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1581375741/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1581529748",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/4318#issuecomment-1581529748",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4318",
    "id": 1581529748,
    "node_id": "IC_kwDOA9tCBs5eRDqU",
    "user": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-06-07T21:21:29Z",
    "updated_at": "2023-06-07T21:39:36Z",
    "author_association": "MEMBER",
    "body": "I believe the reason why people use `salt` instead of `chainId` is that they want to allow users to create signatures without switching networks in their wallet. If the domain separator contains the `chainId` parameter the wallet verifies that it is the network that they are connected to. By putting the chain id in `salt` instead, the signature remains non-replayable but works without switching networks. I recall someone mentioning this to me, but we should confirm. In any case, it sounds like a UX problem the wallets need to solve, that the contracts are understandably implementing workarounds for. We generally avoid implementing this kind of workaround though, I think it has the potential to keep the ecosystem behind instead of pushing towards solving these things where they should be.\r\n\r\nEven if we add the salt in the way that @Amxx suggests, then people will want to _remove_ `chainId`, or `version` or any other parameter. So this approach does not scale.\r\n\r\nMost of what our `EIP712` contract is doing is optimizing the way the values are cached, and making sure it behaves properly in a hard fork. I'd propose to keep the `EIP712` contract as is, with the fields that we've been using so far, which seem to work for most users.\r\n\r\nFor supporting the more advanced use cases, we could have a set of utilities for implementing an alternative to our `EIP712` contract but with different fields. In particular, we can have a function that converts the EIP-5267 descriptor into the domain separator hash. Since Solidity functions can't accept tuples as argument I think the best way would be:\r\n\r\n```solidity\r\nfunction toDomainSeparator(\r\n    function () view returns (bytes1, string memory, string memory, uint256, address, bytes32, uint256[] memory) eip712Domain\r\n) internal returns (bytes32) {\r\n    ...\r\n}\r\n```\r\n\r\nIn this way a user that wants a different set of EIP-712 fields can just implement the EIP-5267 `eip712Domain` function and pass that function pointer in to get the domain separator hash, then they can take care of caching it and we can provide instructions to handle a hard fork.\r\n\r\nI would propose to consider this for 5.1, but it might make sense to look at one thing for 5.0: our `ECDSA` library currently contains `toEthSignedMessageHash`, `toTypedDataHash`, and `toDataWithIntendedValidatorHash`. We might want to move these out of the `ECDSA` library into their own `SignatureUtils` library. In this library we could add the `toDomainSeparator` function I described above.\r\n\r\n---\r\n\r\n> I'm wondering if pure gives enough guarantees (it should be constant in time)\r\n\r\nThere is no reason why it should be constant in time AFAIK.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1581529748/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1582012419",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/4318#issuecomment-1582012419",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4318",
    "id": 1582012419,
    "node_id": "IC_kwDOA9tCBs5eS5gD",
    "user": {
      "login": "pcaversaccio",
      "id": 25297591,
      "node_id": "MDQ6VXNlcjI1Mjk3NTkx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25297591?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pcaversaccio",
      "html_url": "https://github.com/pcaversaccio",
      "followers_url": "https://api.github.com/users/pcaversaccio/followers",
      "following_url": "https://api.github.com/users/pcaversaccio/following{/other_user}",
      "gists_url": "https://api.github.com/users/pcaversaccio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pcaversaccio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pcaversaccio/subscriptions",
      "organizations_url": "https://api.github.com/users/pcaversaccio/orgs",
      "repos_url": "https://api.github.com/users/pcaversaccio/repos",
      "events_url": "https://api.github.com/users/pcaversaccio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pcaversaccio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-06-08T07:13:59Z",
    "updated_at": "2023-06-08T07:13:59Z",
    "author_association": "CONTRIBUTOR",
    "body": "> I believe the reason why people use `salt` instead of `chainId` is that they want to allow users to create signatures without switching networks in their wallet. If the domain separator contains the `chainId` parameter the wallet verifies that it is the network that they are connected to. By putting the chain id in `salt` instead, the signature remains non-replayable but works without switching networks. I recall someone mentioning this to me, but we should confirm. In any case, it sounds like a UX problem the wallets need to solve, that the contracts are understandably implementing workarounds for. We generally avoid implementing this kind of workaround though, I think it has the potential to keep the ecosystem behind instead of pushing towards solving these things where they should be.\r\n\r\n@tayvano or @danfinlay could you confirm that MetaMask verifies the `chainId` parameter in the domain separator is the network that the user is connected to?\r\n\r\n > In this way a user that wants a different set of EIP-712 fields can just implement the EIP-5267 eip712Domain function and pass that function pointer in to get the domain separator hash, then they can take care of caching it and we can provide instructions to handle a hard fork.\r\n\r\nI think that approach is indeed a good compromise and scales well. Another way would be by using a `struct` and passing this argument (am not yet sure about the gas implications of the function pointer approach):\r\n\r\n```solidity\r\nstruct Domain {\r\n  bytes1 fields;\r\n  string name;\r\n  string version;\r\n  uint256 chainId;\r\n  address verifyingContract;\r\n  bytes32 salt;\r\n  uint256[] extensions;\r\n}\r\n\r\nfunction toDomainSeparator(Domain calldata domain) internal returns (bytes32) {\r\n    ...\r\n}\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1582012419/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
