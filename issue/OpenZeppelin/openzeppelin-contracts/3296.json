{
  "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3296",
  "repository_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts",
  "labels_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3296/labels{/name}",
  "comments_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3296/comments",
  "events_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3296/events",
  "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3296",
  "id": 1181110474,
  "node_id": "I_kwDOA9tCBs5GZlDK",
  "number": 3296,
  "title": "Allow Counter increment by more than just 1",
  "user": {
    "login": "tab00",
    "id": 12715448,
    "node_id": "MDQ6VXNlcjEyNzE1NDQ4",
    "avatar_url": "https://avatars.githubusercontent.com/u/12715448?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tab00",
    "html_url": "https://github.com/tab00",
    "followers_url": "https://api.github.com/users/tab00/followers",
    "following_url": "https://api.github.com/users/tab00/following{/other_user}",
    "gists_url": "https://api.github.com/users/tab00/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tab00/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tab00/subscriptions",
    "organizations_url": "https://api.github.com/users/tab00/orgs",
    "repos_url": "https://api.github.com/users/tab00/repos",
    "events_url": "https://api.github.com/users/tab00/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tab00/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 11,
  "created_at": "2022-03-25T18:32:09Z",
  "updated_at": "2022-03-31T21:37:05Z",
  "closed_at": null,
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "After a batch mint of ERC1155 NFTs I want to be able to increment the total supply count like this:\r\n```\r\n_mintBatch(_receiver, ids, amounts, \"\");\r\nsupply.increment(ids.length);\r\n```\r\n\r\nHowever currently `increment()` can only increase the counter by 1:\r\nhttps://github.com/OpenZeppelin/openzeppelin-contracts/blob/4a9cc8b4918ef3736229a5cc5a310bdc17bf759f/contracts/utils/Counters.sol#L26\r\n\r\nSo I have to resort to using a loop:\r\n```\r\n_mintBatch(_receiver, ids, amounts, \"\");\r\nfor (uint256 i = 0; i < ids.length; i++) supply.increment();\r\n```\r\nor not use `Counters` and do `supply += ids.length;`\r\n\r\nPlease allow `increment()` to increase the counter by more than just 1.",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3296/reactions",
    "total_count": 3,
    "+1": 3,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3296/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1079600357",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3296#issuecomment-1079600357",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3296",
    "id": 1079600357,
    "node_id": "IC_kwDOA9tCBs5AWWTl",
    "user": {
      "login": "mw2000",
      "id": 11898068,
      "node_id": "MDQ6VXNlcjExODk4MDY4",
      "avatar_url": "https://avatars.githubusercontent.com/u/11898068?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mw2000",
      "html_url": "https://github.com/mw2000",
      "followers_url": "https://api.github.com/users/mw2000/followers",
      "following_url": "https://api.github.com/users/mw2000/following{/other_user}",
      "gists_url": "https://api.github.com/users/mw2000/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mw2000/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mw2000/subscriptions",
      "organizations_url": "https://api.github.com/users/mw2000/orgs",
      "repos_url": "https://api.github.com/users/mw2000/repos",
      "events_url": "https://api.github.com/users/mw2000/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mw2000/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-03-26T04:31:56Z",
    "updated_at": "2022-03-26T04:32:03Z",
    "author_association": "CONTRIBUTOR",
    "body": "I propose adding overloaded increment and decrement functionswith the following signatures:\r\n\r\n`function increment(Counter storage counter, uint256 amount)`\r\n`function decrement(Counter storage counter, uint256 amount)`",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1079600357/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1079613353",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3296#issuecomment-1079613353",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3296",
    "id": 1079613353,
    "node_id": "IC_kwDOA9tCBs5AWZep",
    "user": {
      "login": "tab00",
      "id": 12715448,
      "node_id": "MDQ6VXNlcjEyNzE1NDQ4",
      "avatar_url": "https://avatars.githubusercontent.com/u/12715448?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tab00",
      "html_url": "https://github.com/tab00",
      "followers_url": "https://api.github.com/users/tab00/followers",
      "following_url": "https://api.github.com/users/tab00/following{/other_user}",
      "gists_url": "https://api.github.com/users/tab00/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tab00/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tab00/subscriptions",
      "organizations_url": "https://api.github.com/users/tab00/orgs",
      "repos_url": "https://api.github.com/users/tab00/repos",
      "events_url": "https://api.github.com/users/tab00/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tab00/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-03-26T05:49:55Z",
    "updated_at": "2022-03-26T05:49:55Z",
    "author_association": "NONE",
    "body": "> `function increment(Counter storage counter, uint256 amount)`\r\n> `function decrement(Counter storage counter, uint256 amount)`\r\n\r\nI was thinking the same.\r\n\r\nHere are examples of simple counters that take an amount value to increment by that I've used before:\r\nhttps://github.com/awwx/meteor-mongo-counter\r\nhttps://www.npmjs.com/package/mongodb-counter",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1079613353/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1079657298",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3296#issuecomment-1079657298",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3296",
    "id": 1079657298,
    "node_id": "IC_kwDOA9tCBs5AWkNS",
    "user": {
      "login": "philipSKYBIT",
      "id": 70418730,
      "node_id": "MDQ6VXNlcjcwNDE4NzMw",
      "avatar_url": "https://avatars.githubusercontent.com/u/70418730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/philipSKYBIT",
      "html_url": "https://github.com/philipSKYBIT",
      "followers_url": "https://api.github.com/users/philipSKYBIT/followers",
      "following_url": "https://api.github.com/users/philipSKYBIT/following{/other_user}",
      "gists_url": "https://api.github.com/users/philipSKYBIT/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/philipSKYBIT/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/philipSKYBIT/subscriptions",
      "organizations_url": "https://api.github.com/users/philipSKYBIT/orgs",
      "repos_url": "https://api.github.com/users/philipSKYBIT/repos",
      "events_url": "https://api.github.com/users/philipSKYBIT/events{/privacy}",
      "received_events_url": "https://api.github.com/users/philipSKYBIT/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-03-26T10:26:14Z",
    "updated_at": "2022-03-26T10:26:14Z",
    "author_association": "NONE",
    "body": "I need this too. I might try a pull request.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1079657298/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1079658775",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3296#issuecomment-1079658775",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3296",
    "id": 1079658775,
    "node_id": "IC_kwDOA9tCBs5AWkkX",
    "user": {
      "login": "Amxx",
      "id": 2432299,
      "node_id": "MDQ6VXNlcjI0MzIyOTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2432299?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Amxx",
      "html_url": "https://github.com/Amxx",
      "followers_url": "https://api.github.com/users/Amxx/followers",
      "following_url": "https://api.github.com/users/Amxx/following{/other_user}",
      "gists_url": "https://api.github.com/users/Amxx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Amxx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Amxx/subscriptions",
      "organizations_url": "https://api.github.com/users/Amxx/orgs",
      "repos_url": "https://api.github.com/users/Amxx/repos",
      "events_url": "https://api.github.com/users/Amxx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Amxx/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-03-26T10:36:12Z",
    "updated_at": "2022-03-26T10:36:12Z",
    "author_association": "COLLABORATOR",
    "body": "Hello @tab00 \r\n\r\nI understand your request, but I'm not super comfortable with where this is heading.\r\n\r\nWe already have:\r\n- `increment(Counter storage counter)`\r\n- `decrement(Counter storage counter)`\r\n- `reset(Counter storage counter)`\r\n\r\nYou'd like to add \r\n- `increment(Counter storage counter, uint256)`\r\n- `decrement(Counter storage counter, uint256)`\r\n\r\nThen someone will ask for `set(Counter storage counter, uint256)` ... and we'll just have a simple uint256 wrapper ... which doesn't sound like it makes much sense (why not just use uint256?)\r\n\r\n@frangio What do you think? Should we expand the Counters library further? Should we use UDVT instead of structs?\r\n\r\nNote: it's not \"clean\" but if you really want to do that now, you can always do `counter._value += 17;` or `counter._value -= 42;`",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1079658775/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1079661783",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3296#issuecomment-1079661783",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3296",
    "id": 1079661783,
    "node_id": "IC_kwDOA9tCBs5AWlTX",
    "user": {
      "login": "tab00",
      "id": 12715448,
      "node_id": "MDQ6VXNlcjEyNzE1NDQ4",
      "avatar_url": "https://avatars.githubusercontent.com/u/12715448?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tab00",
      "html_url": "https://github.com/tab00",
      "followers_url": "https://api.github.com/users/tab00/followers",
      "following_url": "https://api.github.com/users/tab00/following{/other_user}",
      "gists_url": "https://api.github.com/users/tab00/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tab00/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tab00/subscriptions",
      "organizations_url": "https://api.github.com/users/tab00/orgs",
      "repos_url": "https://api.github.com/users/tab00/repos",
      "events_url": "https://api.github.com/users/tab00/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tab00/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-03-26T10:56:55Z",
    "updated_at": "2022-03-26T10:57:21Z",
    "author_association": "NONE",
    "body": "> why not just use uint256\r\n\r\nYou could ask the same with how `Counters` is now  - why not just use `count += 1`, `count -= 1`, `count = 0` instead of `increment()`, `decrement()`, `reset()`?\r\n\r\nI was thinking a value of `Counters` is its safety checks. e.g. currently there is a check that prevents underflow.\r\n\r\n`reset(Counter storage counter, uint256 newValue)` would actually be a good idea too. These proposed functions would be more generalized versions of what currently exists, and if implemented then the original functions could call them by passing `1` or `0` for the amounts.\r\n\r\n> Note: it's not \"clean\" but if you really want to do that now, you can always do `counter._value += 17;` or `counter._value -= 42;`\r\n\r\nThat's a possible workaround in the meantime and definitely more gas-efficient, though there is a comment that explicitly says `_value` should never be directly accessed:\r\nhttps://github.com/OpenZeppelin/openzeppelin-contracts/blob/76eee35971c2541585e05cbf258510dda7b2fbc6/contracts/utils/Counters.sol#L16",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1079661783/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1079761431",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3296#issuecomment-1079761431",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3296",
    "id": 1079761431,
    "node_id": "IC_kwDOA9tCBs5AW9oX",
    "user": {
      "login": "mw2000",
      "id": 11898068,
      "node_id": "MDQ6VXNlcjExODk4MDY4",
      "avatar_url": "https://avatars.githubusercontent.com/u/11898068?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mw2000",
      "html_url": "https://github.com/mw2000",
      "followers_url": "https://api.github.com/users/mw2000/followers",
      "following_url": "https://api.github.com/users/mw2000/following{/other_user}",
      "gists_url": "https://api.github.com/users/mw2000/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mw2000/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mw2000/subscriptions",
      "organizations_url": "https://api.github.com/users/mw2000/orgs",
      "repos_url": "https://api.github.com/users/mw2000/repos",
      "events_url": "https://api.github.com/users/mw2000/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mw2000/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-03-26T19:39:02Z",
    "updated_at": "2022-03-26T19:39:02Z",
    "author_association": "CONTRIBUTOR",
    "body": "I agree with @tab00 on this, I think the proposed new functions to the Counters library would be good in terms of the added functionality mixed in with the safety checks.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1079761431/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1079851433",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3296#issuecomment-1079851433",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3296",
    "id": 1079851433,
    "node_id": "IC_kwDOA9tCBs5AXTmp",
    "user": {
      "login": "dhxmo",
      "id": 74324901,
      "node_id": "MDQ6VXNlcjc0MzI0OTAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/74324901?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dhxmo",
      "html_url": "https://github.com/dhxmo",
      "followers_url": "https://api.github.com/users/dhxmo/followers",
      "following_url": "https://api.github.com/users/dhxmo/following{/other_user}",
      "gists_url": "https://api.github.com/users/dhxmo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dhxmo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dhxmo/subscriptions",
      "organizations_url": "https://api.github.com/users/dhxmo/orgs",
      "repos_url": "https://api.github.com/users/dhxmo/repos",
      "events_url": "https://api.github.com/users/dhxmo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dhxmo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-03-27T06:35:40Z",
    "updated_at": "2022-03-27T06:35:40Z",
    "author_association": "NONE",
    "body": "hi @Amxx  I'd like to contribute to this issue. Are we thinking of changing increment, decrement and reset function to include a newValue or only the reset function? \r\n\r\nalso, is there any resource I can study to understand the necessary safety checks for this op? thank you.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1079851433/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1079985608",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3296#issuecomment-1079985608",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3296",
    "id": 1079985608,
    "node_id": "IC_kwDOA9tCBs5AX0XI",
    "user": {
      "login": "hack3r-0m",
      "id": 54898623,
      "node_id": "MDQ6VXNlcjU0ODk4NjIz",
      "avatar_url": "https://avatars.githubusercontent.com/u/54898623?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hack3r-0m",
      "html_url": "https://github.com/hack3r-0m",
      "followers_url": "https://api.github.com/users/hack3r-0m/followers",
      "following_url": "https://api.github.com/users/hack3r-0m/following{/other_user}",
      "gists_url": "https://api.github.com/users/hack3r-0m/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hack3r-0m/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hack3r-0m/subscriptions",
      "organizations_url": "https://api.github.com/users/hack3r-0m/orgs",
      "repos_url": "https://api.github.com/users/hack3r-0m/repos",
      "events_url": "https://api.github.com/users/hack3r-0m/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hack3r-0m/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-03-27T18:03:48Z",
    "updated_at": "2022-03-27T18:03:48Z",
    "author_association": "NONE",
    "body": "A better solution would be to create a new library `CounterExtended.sol` which will not break existing apis.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1079985608/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1080836380",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3296#issuecomment-1080836380",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3296",
    "id": 1080836380,
    "node_id": "IC_kwDOA9tCBs5AbEEc",
    "user": {
      "login": "Amxx",
      "id": 2432299,
      "node_id": "MDQ6VXNlcjI0MzIyOTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2432299?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Amxx",
      "html_url": "https://github.com/Amxx",
      "followers_url": "https://api.github.com/users/Amxx/followers",
      "following_url": "https://api.github.com/users/Amxx/following{/other_user}",
      "gists_url": "https://api.github.com/users/Amxx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Amxx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Amxx/subscriptions",
      "organizations_url": "https://api.github.com/users/Amxx/orgs",
      "repos_url": "https://api.github.com/users/Amxx/repos",
      "events_url": "https://api.github.com/users/Amxx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Amxx/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-03-28T16:05:21Z",
    "updated_at": "2022-03-28T16:05:21Z",
    "author_association": "COLLABORATOR",
    "body": "> A better solution would be to create a new library `CounterExtended.sol` which will not break existing apis.\r\n\r\nWhat would this new library provide over just using uint256? Adding code creates discoverability and maintainability issues. ",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1080836380/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1080879740",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3296#issuecomment-1080879740",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3296",
    "id": 1080879740,
    "node_id": "IC_kwDOA9tCBs5AbOp8",
    "user": {
      "login": "Amxx",
      "id": 2432299,
      "node_id": "MDQ6VXNlcjI0MzIyOTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2432299?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Amxx",
      "html_url": "https://github.com/Amxx",
      "followers_url": "https://api.github.com/users/Amxx/followers",
      "following_url": "https://api.github.com/users/Amxx/following{/other_user}",
      "gists_url": "https://api.github.com/users/Amxx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Amxx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Amxx/subscriptions",
      "organizations_url": "https://api.github.com/users/Amxx/orgs",
      "repos_url": "https://api.github.com/users/Amxx/repos",
      "events_url": "https://api.github.com/users/Amxx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Amxx/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-03-28T16:33:16Z",
    "updated_at": "2022-03-28T16:33:16Z",
    "author_association": "COLLABORATOR",
    "body": "One important thing with the Counter is that by increasing by 1, we can very safely assume that increment will not overflow, and we can \"uncheck\" it. As soon as we increment by arbitrary values, we can no longer make this assumption, so we should re-add the overflow checks, which IMO defeats the whole point of having Counter.\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1080879740/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1085146039",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3296#issuecomment-1085146039",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3296",
    "id": 1085146039,
    "node_id": "IC_kwDOA9tCBs5ArgO3",
    "user": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-03-31T21:37:05Z",
    "updated_at": "2022-03-31T21:37:05Z",
    "author_association": "MEMBER",
    "body": "Yes, the intent of the Counter abstraction is to represent a value that is known to never overflow. Incrementing by arbitrary uint256 removes that benefit entirely. We could consider incrementing by small integer types like uint8 if that's seen as valuable, but I don't think it's really necessary.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1085146039/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
