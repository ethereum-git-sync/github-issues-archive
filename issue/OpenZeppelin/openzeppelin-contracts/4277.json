{
  "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4277",
  "repository_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts",
  "labels_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4277/labels{/name}",
  "comments_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4277/comments",
  "events_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4277/events",
  "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/4277",
  "id": 1723809528,
  "node_id": "I_kwDOA9tCBs5mvz74",
  "number": 4277,
  "title": "Feature request: modern implementation of \"SafeERC20Namer\" library",
  "user": {
    "login": "PaulRBerg",
    "id": 8782666,
    "node_id": "MDQ6VXNlcjg3ODI2NjY=",
    "avatar_url": "https://avatars.githubusercontent.com/u/8782666?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/PaulRBerg",
    "html_url": "https://github.com/PaulRBerg",
    "followers_url": "https://api.github.com/users/PaulRBerg/followers",
    "following_url": "https://api.github.com/users/PaulRBerg/following{/other_user}",
    "gists_url": "https://api.github.com/users/PaulRBerg/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/PaulRBerg/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/PaulRBerg/subscriptions",
    "organizations_url": "https://api.github.com/users/PaulRBerg/orgs",
    "repos_url": "https://api.github.com/users/PaulRBerg/repos",
    "events_url": "https://api.github.com/users/PaulRBerg/events{/privacy}",
    "received_events_url": "https://api.github.com/users/PaulRBerg/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 503650860,
      "node_id": "MDU6TGFiZWw1MDM2NTA4NjA=",
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/labels/feature",
      "name": "feature",
      "color": "b9db64",
      "default": false,
      "description": "New contracts, functions, or helpers."
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 4,
  "created_at": "2023-05-24T11:53:13Z",
  "updated_at": "2023-05-29T21:17:22Z",
  "closed_at": null,
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "It would be nice to have a modern implementation of Uniswap's `SafeERC20Number` library:\r\n\r\nhttps://github.com/Uniswap/solidity-lib/blob/c01640b0f0f1d8a85cba8de378cc48469fcfd9a6/contracts/libraries/SafeERC20Namer.sol\r\n\r\nIdeally, the implementation would provide an additional `tokenDecimals` helper for safely retrieving the ERC-20 decimals (just like Yield's [version](https://github.com/Uniswap/v3-periphery/blob/6cce88e63e176af1ddb6cc56e029110289622317/contracts/NonfungibleTokenPositionDescriptor.sol#L70-L92) does).\r\n\r\nI imagine that this functionality could be incorporated in your existing [`SafeERC20`](https://github.com/OpenZeppelin/openzeppelin-contracts/blob/cbc6145f5f33744e91e40be153f151c2e0fb850f/contracts/token/ERC20/utils/SafeERC20.sol) library?\r\n\r\nThe use case for this is anything that needs a reliable way of retrieving ERC-20 token metadata on-chain, e.g. NFT SVGs:\r\n\r\nhttps://github.com/Uniswap/v3-periphery/blob/6cce88e63e176af1ddb6cc56e029110289622317/contracts/NonfungibleTokenPositionDescriptor.sol#L70-L92",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4277/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4277/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1561289537",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/4277#issuecomment-1561289537",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4277",
    "id": 1561289537,
    "node_id": "IC_kwDOA9tCBs5dD2NB",
    "user": {
      "login": "Amxx",
      "id": 2432299,
      "node_id": "MDQ6VXNlcjI0MzIyOTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2432299?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Amxx",
      "html_url": "https://github.com/Amxx",
      "followers_url": "https://api.github.com/users/Amxx/followers",
      "following_url": "https://api.github.com/users/Amxx/following{/other_user}",
      "gists_url": "https://api.github.com/users/Amxx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Amxx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Amxx/subscriptions",
      "organizations_url": "https://api.github.com/users/Amxx/orgs",
      "repos_url": "https://api.github.com/users/Amxx/repos",
      "events_url": "https://api.github.com/users/Amxx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Amxx/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-05-24T14:40:11Z",
    "updated_at": "2023-05-24T14:40:11Z",
    "author_association": "COLLABORATOR",
    "body": "Hello @PaulRBerg \r\n\r\nI think that would fall under bytes utils or string utils. Even though its usefull for (some) ERC20, it might have other usecases. ",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1561289537/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1567154849",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/4277#issuecomment-1567154849",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4277",
    "id": 1567154849,
    "node_id": "IC_kwDOA9tCBs5daOKh",
    "user": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-05-29T13:41:52Z",
    "updated_at": "2023-05-29T13:41:52Z",
    "author_association": "MEMBER",
    "body": "@Amxx I actually think this should go in SafeERC20 because it would be specialized to ERC20.\r\n\r\n@PaulRBerg What is your use case for reading `name()` and `symbol()` onchain?\r\n\r\nThe behavior of Uniswap's SafeERC20Namer for default `name()` and `symbol()` seems very opinionated, I don't think we should do that... I would rather return an empty string so the caller can handle that and use whatever fallback they want, but at that point I don't know if this is different from using `try/catch`? Is there an issue with using `try/catch` for this purpose?\r\n\r\nFor `decimals()` I think it makes sense to have a function that attempts to call `decimals()` and returns a default of 18 if unavailable.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1567154849/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1567477300",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/4277#issuecomment-1567477300",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4277",
    "id": 1567477300,
    "node_id": "IC_kwDOA9tCBs5dbc40",
    "user": {
      "login": "PaulRBerg",
      "id": 8782666,
      "node_id": "MDQ6VXNlcjg3ODI2NjY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8782666?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/PaulRBerg",
      "html_url": "https://github.com/PaulRBerg",
      "followers_url": "https://api.github.com/users/PaulRBerg/followers",
      "following_url": "https://api.github.com/users/PaulRBerg/following{/other_user}",
      "gists_url": "https://api.github.com/users/PaulRBerg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/PaulRBerg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/PaulRBerg/subscriptions",
      "organizations_url": "https://api.github.com/users/PaulRBerg/orgs",
      "repos_url": "https://api.github.com/users/PaulRBerg/repos",
      "events_url": "https://api.github.com/users/PaulRBerg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/PaulRBerg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-05-29T20:07:33Z",
    "updated_at": "2023-05-29T20:07:33Z",
    "author_association": "CONTRIBUTOR",
    "body": "> What is your use case for reading `name()` and `symbol()` onchain?\r\n\r\nNFT SVGs. Here are the functions I ended up implementing for this (happy to let you copy-paste them BTW - I've also tested them thoroughly):\r\n\r\n```solidity\r\n/// @notice Retrieves the asset's decimals safely, defaulting to \"0\" if an error occurs.\r\n/// @dev Performs a low-level call to handle assets in which the decimals are not implemented.\r\nfunction safeAssetDecimals(address asset) internal view returns (uint8 decimals) {\r\n    (bool success, bytes memory returnData) = asset.staticcall(abi.encodeCall(IERC20Metadata.decimals, ()));\r\n    if (success && returnData.length == 32) {\r\n        decimals = abi.decode(returnData, (uint8));\r\n    }\r\n}\r\n\r\n/// @notice Retrieves the asset's symbol safely, defaulting to a hard-coded value if an error occurs.\r\n/// @dev Performs a low-level call to handle assets in which the symbol is not implemented or it is a bytes32\r\n/// instead of a string.\r\nfunction safeAssetSymbol(address asset) internal view returns (string memory) {\r\n    (bool success, bytes memory symbol) = asset.staticcall(abi.encodeCall(IERC20Metadata.symbol, ()));\r\n\r\n    // Non-empty strings have a length greater than 64, and bytes32 has length 32.\r\n    if (!success || symbol.length <= 64) {\r\n        return \"ERC20\";\r\n    }\r\n\r\n    return abi.decode(symbol, (string));\r\n}\r\n```\r\n\r\n> The behavior of Uniswap's SafeERC20Namer ... seems very opinionated, I don't think we should do that\r\n\r\nI agree\r\n\r\n> Is there an issue with using `try/catch` for this purpose?\r\n\r\n`try/catch` doesn't work for this use case, see https://ethereum.stackexchange.com/q/150597/24693",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1567477300/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1567524768",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/4277#issuecomment-1567524768",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4277",
    "id": 1567524768,
    "node_id": "IC_kwDOA9tCBs5dboeg",
    "user": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-05-29T21:17:22Z",
    "updated_at": "2023-05-29T21:17:22Z",
    "author_association": "MEMBER",
    "body": ">reverts are not caught when ... `asset` returns a `bytes32` instead of `string` (e.g. the MKR token does this)\r\n\r\nWas not aware of this particularity of MKR. Definitely within the scope of SafeERC20!\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1567524768/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
