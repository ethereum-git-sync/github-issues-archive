{
  "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3618",
  "repository_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts",
  "labels_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3618/labels{/name}",
  "comments_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3618/comments",
  "events_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3618/events",
  "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3618",
  "id": 1340136109,
  "node_id": "I_kwDOA9tCBs5P4Nqt",
  "number": 3618,
  "title": "Create a new ERC721 extension implementing uses",
  "user": {
    "login": "Niceural",
    "id": 92452440,
    "node_id": "U_kgDOBYK2WA",
    "avatar_url": "https://avatars.githubusercontent.com/u/92452440?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/Niceural",
    "html_url": "https://github.com/Niceural",
    "followers_url": "https://api.github.com/users/Niceural/followers",
    "following_url": "https://api.github.com/users/Niceural/following{/other_user}",
    "gists_url": "https://api.github.com/users/Niceural/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/Niceural/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/Niceural/subscriptions",
    "organizations_url": "https://api.github.com/users/Niceural/orgs",
    "repos_url": "https://api.github.com/users/Niceural/repos",
    "events_url": "https://api.github.com/users/Niceural/events{/privacy}",
    "received_events_url": "https://api.github.com/users/Niceural/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 4,
  "created_at": "2022-08-16T10:22:53Z",
  "updated_at": "2022-08-16T19:07:15Z",
  "closed_at": "2022-08-16T19:07:14Z",
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "**üßê Motivation**\r\n<!-- Is your feature request related to a specific problem? Is it just a crazy idea? Tell us about it! -->\r\nGoing through [Metaplex' documentation](https://docs.metaplex.com/programs/token-metadata/using-nfts) (NFT standard for Solana), their metadata account includes a Uses field designed to restrict the use of an NFT. This feature could be used in gaming, event ticketing, and memberships.\r\n\r\n**üìù Details**\r\n<!-- Please describe your feature request in detail. -->\r\nAdd a ERC721 extension inheriting the ERC721 base contract. This extension would include:\r\n- a mapping from tokenId to a UseMethod enum\r\n- a mapping from tokenId to remaining uses. \r\n\r\nThe UseMethod enum would include three use cases:\r\n- None: no restriction on usage,\r\n- Burn: the token is burned immediately after the first use,\r\n- Single: all operations are frozen after the first use,\r\n- Multiple: allows multiple operations.\r\n\r\nIn the case of a Multiple UseMethod, the remaining uses mapping would be updated at each operation on the token. The remaining uses could only be reduced by the current owner. Once the remaining uses is null, each operation call will be reverted.\r\n\r\n**Important:** What is meant by *using* a token would have to be clearly defined. The contract could include a function that decrements the remaining uses of the token. The user would then decide how to use this function (for instance: override the transfer functions to decrement).\r\n\r\n<!-- Make sure that you have reviewed the OpenZeppelin Contracts Contributor Guidelines. -->\r\n<!-- https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/CONTRIBUTING.md -->\r\n",
  "closed_by": {
    "login": "Niceural",
    "id": 92452440,
    "node_id": "U_kgDOBYK2WA",
    "avatar_url": "https://avatars.githubusercontent.com/u/92452440?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/Niceural",
    "html_url": "https://github.com/Niceural",
    "followers_url": "https://api.github.com/users/Niceural/followers",
    "following_url": "https://api.github.com/users/Niceural/following{/other_user}",
    "gists_url": "https://api.github.com/users/Niceural/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/Niceural/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/Niceural/subscriptions",
    "organizations_url": "https://api.github.com/users/Niceural/orgs",
    "repos_url": "https://api.github.com/users/Niceural/repos",
    "events_url": "https://api.github.com/users/Niceural/events{/privacy}",
    "received_events_url": "https://api.github.com/users/Niceural/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3618/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3618/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1216555875",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3618#issuecomment-1216555875",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3618",
    "id": 1216555875,
    "node_id": "IC_kwDOA9tCBs5Igytj",
    "user": {
      "login": "Amxx",
      "id": 2432299,
      "node_id": "MDQ6VXNlcjI0MzIyOTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2432299?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Amxx",
      "html_url": "https://github.com/Amxx",
      "followers_url": "https://api.github.com/users/Amxx/followers",
      "following_url": "https://api.github.com/users/Amxx/following{/other_user}",
      "gists_url": "https://api.github.com/users/Amxx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Amxx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Amxx/subscriptions",
      "organizations_url": "https://api.github.com/users/Amxx/orgs",
      "repos_url": "https://api.github.com/users/Amxx/repos",
      "events_url": "https://api.github.com/users/Amxx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Amxx/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-08-16T12:15:44Z",
    "updated_at": "2022-08-16T12:15:44Z",
    "author_association": "COLLABORATOR",
    "body": "Hello @Niceural and that you for raising the issue.\r\n\r\nI'm must say I am not familiar with Solana and its standards. Is there any specification beside the documentation you already linked? Is there a reference implementation somewhere?",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1216555875/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1216741430",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3618#issuecomment-1216741430",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3618",
    "id": 1216741430,
    "node_id": "IC_kwDOA9tCBs5IhgA2",
    "user": {
      "login": "Niceural",
      "id": 92452440,
      "node_id": "U_kgDOBYK2WA",
      "avatar_url": "https://avatars.githubusercontent.com/u/92452440?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Niceural",
      "html_url": "https://github.com/Niceural",
      "followers_url": "https://api.github.com/users/Niceural/followers",
      "following_url": "https://api.github.com/users/Niceural/following{/other_user}",
      "gists_url": "https://api.github.com/users/Niceural/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Niceural/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Niceural/subscriptions",
      "organizations_url": "https://api.github.com/users/Niceural/orgs",
      "repos_url": "https://api.github.com/users/Niceural/repos",
      "events_url": "https://api.github.com/users/Niceural/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Niceural/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-08-16T14:47:15Z",
    "updated_at": "2022-08-16T14:47:15Z",
    "author_association": "CONTRIBUTOR",
    "body": "Bonjour :)\r\n\r\nI tried looking for more detailed information on use cases of Metaplex Uses. It seems to be a very recent feature. Unfortunately, I could not find any guidance on Discord, Docs, or forums. \r\nSolana separates logic from data, logic being called Programs and data being called Accounts. Minting an NFT requires the creation of a [Metadata Account](https://docs.metaplex.com/programs/token-metadata/accounts#metadata) storing the metadata of the NFT. This metadata account contains the Uses field. The owner of the NFT can execute two instructions on this field: [reduce the number of uses](https://docs.metaplex.com/programs/token-metadata/instructions#reduce-the-number-of-uses) (that is use the NFT) and [approve a new use authority](https://docs.metaplex.com/programs/token-metadata/instructions#approve-a-new-use-authority).\r\nAs far as I understand, this functionality could be used to do the following:\r\n1. an NFT is minted to be used in a video game and a certain amount of Uses is set,\r\n2. the NFT is sold to a player,\r\n3. the player adds the video game program as a Use authority and uses the NFT in the video game (i.e. the owner allows a program (instructions, logic) to access the Metadata Account (just an array of bytes)),\r\n4. once the uses is null, the NFT cannot be used in the game.\r\n\r\n</br>\r\n\r\nIn the example above, a video game can sell stuff (skins, weapons, objects, etc) in the form of NFTs. These NFTs can then be used in the game and become unusable once the limit is reached. The player would then have to obtain a new NFT to use in the game. I was thinking of the following implementation (not reviewed and with more vulnerabilities than you can imagine):\r\n\r\n```solidity\r\n  enum UseMethod {\r\n    None,\r\n    Burn,\r\n    Single,\r\n    Multiple,\r\n    Used\r\n  }\r\n\r\n  uint8 totalUses;\r\n\r\n  // tokenId to UseMethod\r\n  mapping(uint256 => UseMethod) private _useMethods;\r\n\r\n  // tokenId to caller address to uses amount\r\n  mapping(uint256 => mapping(address => uint8)) private _uses;\r\n\r\n  modifier useModifier(uint256 tokenId, address caller) {\r\n    // get token UseMethod\r\n    UseMethod useMethod = _useMethods[tokenId];\r\n\r\n    // check that the token is not fully used\r\n    require(useMethod != UseMethod.Used, \"Token fully used sorry :(\");\r\n\r\n\r\n    if (useMethod == UseMethod.Single) {\r\n      // if use method is single, set it to Used\r\n      _useMethods[tokenId] = UseMethod.Used;\r\n    } else if (useMethod == UseMethod.Multiple) {\r\n      // logic to decrement the variables tracking the uses\r\n    }\r\n\r\n    _;\r\n\r\n    // if use method is burn then burn the token\r\n    if (useMethod == UseMethod.Burn) {\r\n      _burn(tokenId);\r\n    }\r\n  }\r\n\r\n  function functionThatUsesUses(uint256 tokenId)\r\n    public\r\n    useModifier(tokenId, _msgSender())\r\n  {\r\n    // do something with the nft\r\n  }\r\n```\r\n\r\nThis extension would be similar to the Royalty extension in the sense that it is not mentioned in the ERC721 standard but it's still used in NFT Marketplaces and gives more power to the authority who created the NFT.\r\nI hope I haven't been too confusing or incorrect.\r\nLet me know what you think @Amxx :)",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1216741430/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1216829084",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3618#issuecomment-1216829084",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3618",
    "id": 1216829084,
    "node_id": "IC_kwDOA9tCBs5Ih1ac",
    "user": {
      "login": "Amxx",
      "id": 2432299,
      "node_id": "MDQ6VXNlcjI0MzIyOTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2432299?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Amxx",
      "html_url": "https://github.com/Amxx",
      "followers_url": "https://api.github.com/users/Amxx/followers",
      "following_url": "https://api.github.com/users/Amxx/following{/other_user}",
      "gists_url": "https://api.github.com/users/Amxx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Amxx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Amxx/subscriptions",
      "organizations_url": "https://api.github.com/users/Amxx/orgs",
      "repos_url": "https://api.github.com/users/Amxx/repos",
      "events_url": "https://api.github.com/users/Amxx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Amxx/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-08-16T15:53:53Z",
    "updated_at": "2022-08-16T15:53:53Z",
    "author_association": "COLLABORATOR",
    "body": "Thanks for the additional information.\r\n\r\nThis looks like a Solana thing. Not saying that is bad, but we would need good evidence of the ethereum community needing this. So far we had no request for anything like this, and I am not aware of any ERC standardizing this.\r\n\r\nWe are not trying to be trend-setters, proposing innovative approaches before they are standard. Rather we are following the trends, and providing safe implementation of patterns vetted by the community.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1216829084/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1217042418",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3618#issuecomment-1217042418",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3618",
    "id": 1217042418,
    "node_id": "IC_kwDOA9tCBs5Iipfy",
    "user": {
      "login": "Niceural",
      "id": 92452440,
      "node_id": "U_kgDOBYK2WA",
      "avatar_url": "https://avatars.githubusercontent.com/u/92452440?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Niceural",
      "html_url": "https://github.com/Niceural",
      "followers_url": "https://api.github.com/users/Niceural/followers",
      "following_url": "https://api.github.com/users/Niceural/following{/other_user}",
      "gists_url": "https://api.github.com/users/Niceural/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Niceural/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Niceural/subscriptions",
      "organizations_url": "https://api.github.com/users/Niceural/orgs",
      "repos_url": "https://api.github.com/users/Niceural/repos",
      "events_url": "https://api.github.com/users/Niceural/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Niceural/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-08-16T19:07:14Z",
    "updated_at": "2022-08-16T19:07:14Z",
    "author_association": "CONTRIBUTOR",
    "body": "Fair enough, thanks for your feedback on that!",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1217042418/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
