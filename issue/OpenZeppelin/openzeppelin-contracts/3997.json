{
  "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3997",
  "repository_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts",
  "labels_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3997/labels{/name}",
  "comments_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3997/comments",
  "events_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3997/events",
  "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3997",
  "id": 1556043938,
  "node_id": "I_kwDOA9tCBs5cv1ii",
  "number": 3997,
  "title": "ERC721Votes._afterTokenTransfer assumes 1 token = 1 vote",
  "user": {
    "login": "RitzyDevBox",
    "id": 103006767,
    "node_id": "U_kgDOBiPCLw",
    "avatar_url": "https://avatars.githubusercontent.com/u/103006767?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/RitzyDevBox",
    "html_url": "https://github.com/RitzyDevBox",
    "followers_url": "https://api.github.com/users/RitzyDevBox/followers",
    "following_url": "https://api.github.com/users/RitzyDevBox/following{/other_user}",
    "gists_url": "https://api.github.com/users/RitzyDevBox/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/RitzyDevBox/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/RitzyDevBox/subscriptions",
    "organizations_url": "https://api.github.com/users/RitzyDevBox/orgs",
    "repos_url": "https://api.github.com/users/RitzyDevBox/repos",
    "events_url": "https://api.github.com/users/RitzyDevBox/events{/privacy}",
    "received_events_url": "https://api.github.com/users/RitzyDevBox/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 10,
  "created_at": "2023-01-25T04:35:43Z",
  "updated_at": "2023-01-28T23:37:29Z",
  "closed_at": "2023-01-28T23:37:22Z",
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "I found this while unit testing my contract.  I wanted to providing more voting power per nft, mostly because I've written a governor which handles partial voting.\r\n\r\nI overriden the `_getVotingUnits` like so:\r\n\r\n    function _getVotingUnits(address account) internal view virtual override returns (uint256) {\r\n        return balanceOf(account) * 10000;\r\n    }\r\n\r\nWhen minting and delegating I'm getting the wrong result:\r\n\r\n    await nft.mint(owner.address, { value: ethers.utils.parseUnits(\"1\", 18)})\r\n    await nft.delegate(owner.address);\r\n\r\n    ownerVotes = await nft.getVotes(owner.address);\r\n    console.log(`owner votes: ${ownerVotes.toString()}`);\r\n\r\n    await nft.mint(owner.address, { value: ethers.utils.parseUnits(\"1\", 18)})\r\n    await nft.delegate(owner.address);\r\n\r\n    ownerVotes = await nft.getVotes(owner.address);\r\n    console.log(`owner votes: ${ownerVotes.toString()}`);\r\n\r\nthis outputs \r\n\r\n     10000\r\n     10001\r\n\r\nIt increments sequentially after.  The issue is that `_transferVotingUnits(from, to, batchSize )` does not take the units into account.\r\n\r\n    \r\n 2. `_afterTokenTransfer` does not apply the Units to the batch size\r\n\r\n`abstract contract ERC721Votes is ERC721, Votes {\r\n     internal uint256 votingPowerBase = 1\r\n\r\n    _setVotingPowerUnits(uint256 _votingPowerBase) internal virtual {\r\n        votingPowerBase = _votingPowerBase\r\n    }\r\n    \r\n    getVotingPowerUnits(uint256 _votingPowerBase) public virtual returns (uint 256) {\r\n        return votingPower;\r\n    }\r\n\r\n    /**\r\n     * @dev See {ERC721-_afterTokenTransfer}. Adjusts votes when tokens are transferred.\r\n     *\r\n     * Emits a {IVotes-DelegateVotesChanged} event.\r\n     */\r\n    function _afterTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 firstTokenId,\r\n        uint256 batchSize\r\n    ) internal virtual override {\r\n        _transferVotingUnits(from, to, batchSize * VotingPowerBase );\r\n        super._afterTokenTransfer(from, to, firstTokenId, batchSize);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the balance of `account`.\r\n     */\r\n    function _getVotingUnits(address account) internal view virtual override returns (uint256) {\r\n        return balanceOf(account) * VotingPowerBase ;\r\n    }`\r\n\r\nI'm not sure how to increment the units otherwise, seeing as even if I override this directly in my contract it will still end up calling the base.",
  "closed_by": {
    "login": "frangio",
    "id": 481465,
    "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
    "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/frangio",
    "html_url": "https://github.com/frangio",
    "followers_url": "https://api.github.com/users/frangio/followers",
    "following_url": "https://api.github.com/users/frangio/following{/other_user}",
    "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
    "organizations_url": "https://api.github.com/users/frangio/orgs",
    "repos_url": "https://api.github.com/users/frangio/repos",
    "events_url": "https://api.github.com/users/frangio/events{/privacy}",
    "received_events_url": "https://api.github.com/users/frangio/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3997/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3997/timeline",
  "performed_via_github_app": null,
  "state_reason": "not_planned"
}
[
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1403636095",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3997#issuecomment-1403636095",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3997",
    "id": 1403636095,
    "node_id": "IC_kwDOA9tCBs5Tqcl_",
    "user": {
      "login": "Amxx",
      "id": 2432299,
      "node_id": "MDQ6VXNlcjI0MzIyOTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2432299?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Amxx",
      "html_url": "https://github.com/Amxx",
      "followers_url": "https://api.github.com/users/Amxx/followers",
      "following_url": "https://api.github.com/users/Amxx/following{/other_user}",
      "gists_url": "https://api.github.com/users/Amxx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Amxx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Amxx/subscriptions",
      "organizations_url": "https://api.github.com/users/Amxx/orgs",
      "repos_url": "https://api.github.com/users/Amxx/repos",
      "events_url": "https://api.github.com/users/Amxx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Amxx/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-01-25T13:39:02Z",
    "updated_at": "2023-01-25T13:39:02Z",
    "author_association": "COLLABORATOR",
    "body": "Hello @RitzyDevBox \r\n\r\nThe `_getVotingUnits` function is used to know how much weight to move when an accounts change its delegation.\r\nIf Alice is previously delegated to Bob, but is changing her delegate to Charles, then we remove `_getVotingUnits(Alice)` from Bob and add that to Charles.\r\n\r\nIndeed, it is not accounted for when doing a transfer.\r\n\r\nYour rewrite of `ERC721Votes` looks good, and IMO you rewritting it is probably the best thing to do. \r\nAn alternative would be to write you own Governor module that does\r\n\r\n```\r\n    function _getVotes(\r\n        address account,\r\n        uint256 blockNumber,\r\n        bytes memory /*params*/\r\n    ) internal view virtual override returns (uint256) {\r\n        return token.getPastVotes(account, blockNumber) * VotingPowerBase;\r\n    }\r\n```\r\n\r\n---\r\n\r\nWe've had a few request for custom weight per token ... which is \"easy\" to do for the transfer part, but unresolved for the \"re-delegate\" part.\r\n\r\n---\r\n\r\nIf (like in your case) all token have the same weight, then we could had a new function \r\n```\r\n_votesPerToken() internal view virtual returns (uint256) { return 1; }\r\n```\r\nthat devs could override.\r\n\r\nDo you want to submit a PR for that?",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1403636095/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1403868453",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3997#issuecomment-1403868453",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3997",
    "id": 1403868453,
    "node_id": "IC_kwDOA9tCBs5TrVUl",
    "user": {
      "login": "RitzyDevBox",
      "id": 103006767,
      "node_id": "U_kgDOBiPCLw",
      "avatar_url": "https://avatars.githubusercontent.com/u/103006767?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/RitzyDevBox",
      "html_url": "https://github.com/RitzyDevBox",
      "followers_url": "https://api.github.com/users/RitzyDevBox/followers",
      "following_url": "https://api.github.com/users/RitzyDevBox/following{/other_user}",
      "gists_url": "https://api.github.com/users/RitzyDevBox/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/RitzyDevBox/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/RitzyDevBox/subscriptions",
      "organizations_url": "https://api.github.com/users/RitzyDevBox/orgs",
      "repos_url": "https://api.github.com/users/RitzyDevBox/repos",
      "events_url": "https://api.github.com/users/RitzyDevBox/events{/privacy}",
      "received_events_url": "https://api.github.com/users/RitzyDevBox/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-01-25T16:16:34Z",
    "updated_at": "2023-01-25T16:16:34Z",
    "author_association": "NONE",
    "body": "Yeah I will create a pr, for this.\nI've solved custom weights slightly differently. But I'm not sure how\napplicable it is to this model.\n\nI'm working on a multiple choice governor, so all votes are done in\npercentages. Each nft has the equivalent vote weight to bips.\n\nThen the percentages are applied across to their vote share externally.\n\nI need to look into the check pointing system a bit more but I'll try to\ncreate a pr for dynamic weights as well\n\nOn Wed, Jan 25, 2023, 8:39 AM Hadrien Croubois ***@***.***>\nwrote:\n\n> Hello @RitzyDevBox <https://github.com/RitzyDevBox>\n>\n> The _getVotingUnits function is used to know how much weight to move when\n> an accounts change its delegation.\n> If Alice is previously delegated to Bob, but is changing her delegate to\n> Charles, then we remove _getVotingUnits(Alice) from Bob and add that to\n> Charles.\n>\n> Indeed, it is not accounted for when doing a transfer.\n>\n> Your rewrite of ERC721Votes looks good, and IMO you rewritting it is\n> probably the best thing to do.\n> An alternative would be to write you own Governor module that does\n>\n>     function _getVotes(\n>         address account,\n>         uint256 blockNumber,\n>         bytes memory /*params*/\n>     ) internal view virtual override returns (uint256) {\n>         return token.getPastVotes(account, blockNumber) * VotingPowerBase;\n>     }\n>\n> ------------------------------\n>\n> We've had a few request for custom weight per token ... which is \"easy\" to\n> do for the transfer part, but unresolved for the \"re-delegate\" part.\n> ------------------------------\n>\n> If (like in your case) all token have the same weight, then we could had a\n> new function\n>\n> _votesPerToken() internal view virtual returns (uint256) { return 1; }\n>\n> that devs could override.\n>\n> Do you want to submit a PR for that?\n>\n> —\n> Reply to this email directly, view it on GitHub\n> <https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3997#issuecomment-1403636095>,\n> or unsubscribe\n> <https://github.com/notifications/unsubscribe-auth/AYR4EL5MOWRMBZHHHHGAE4LWUEUIFANCNFSM6AAAAAAUF35BQU>\n> .\n> You are receiving this because you were mentioned.Message ID:\n> ***@***.***>\n>\n",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1403868453/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1404145046",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3997#issuecomment-1404145046",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3997",
    "id": 1404145046,
    "node_id": "IC_kwDOA9tCBs5TsY2W",
    "user": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-01-25T19:48:27Z",
    "updated_at": "2023-01-25T19:48:27Z",
    "author_association": "MEMBER",
    "body": "`_votesPerToken` should be `pure`, not `view`, to make sure that the value is not dynamic.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1404145046/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1404369707",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3997#issuecomment-1404369707",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3997",
    "id": 1404369707,
    "node_id": "IC_kwDOA9tCBs5TtPsr",
    "user": {
      "login": "RitzyDevBox",
      "id": 103006767,
      "node_id": "U_kgDOBiPCLw",
      "avatar_url": "https://avatars.githubusercontent.com/u/103006767?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/RitzyDevBox",
      "html_url": "https://github.com/RitzyDevBox",
      "followers_url": "https://api.github.com/users/RitzyDevBox/followers",
      "following_url": "https://api.github.com/users/RitzyDevBox/following{/other_user}",
      "gists_url": "https://api.github.com/users/RitzyDevBox/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/RitzyDevBox/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/RitzyDevBox/subscriptions",
      "organizations_url": "https://api.github.com/users/RitzyDevBox/orgs",
      "repos_url": "https://api.github.com/users/RitzyDevBox/repos",
      "events_url": "https://api.github.com/users/RitzyDevBox/events{/privacy}",
      "received_events_url": "https://api.github.com/users/RitzyDevBox/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-01-25T23:49:42Z",
    "updated_at": "2023-01-25T23:49:42Z",
    "author_association": "NONE",
    "body": "@frangio I need to figure out how your tests works first, but if you have time please review https://github.com/OpenZeppelin/openzeppelin-contracts/pull/4003\r\n\r\nModifying the vote weights isn't as simple, as I initial figured,  In rare scenario's it can cause dead locks or voting to exceed max uint256.  \r\n\r\nI've created a fix for it but it maybe worth weighing in on first",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1404369707/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1404971280",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3997#issuecomment-1404971280",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3997",
    "id": 1404971280,
    "node_id": "IC_kwDOA9tCBs5TvikQ",
    "user": {
      "login": "Amxx",
      "id": 2432299,
      "node_id": "MDQ6VXNlcjI0MzIyOTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2432299?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Amxx",
      "html_url": "https://github.com/Amxx",
      "followers_url": "https://api.github.com/users/Amxx/followers",
      "following_url": "https://api.github.com/users/Amxx/following{/other_user}",
      "gists_url": "https://api.github.com/users/Amxx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Amxx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Amxx/subscriptions",
      "organizations_url": "https://api.github.com/users/Amxx/orgs",
      "repos_url": "https://api.github.com/users/Amxx/repos",
      "events_url": "https://api.github.com/users/Amxx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Amxx/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-01-26T13:00:12Z",
    "updated_at": "2023-01-26T13:00:24Z",
    "author_association": "COLLABORATOR",
    "body": "I commented on #4003.\r\n\r\nTLDR: I think that should all be addressed in the governor by doing \r\n```solidity\r\nreturn token.getPastVotes(account, blockNumber) * VotingPowerBase;\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1404971280/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1405823796",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3997#issuecomment-1405823796",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3997",
    "id": 1405823796,
    "node_id": "IC_kwDOA9tCBs5Tyys0",
    "user": {
      "login": "RitzyDevBox",
      "id": 103006767,
      "node_id": "U_kgDOBiPCLw",
      "avatar_url": "https://avatars.githubusercontent.com/u/103006767?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/RitzyDevBox",
      "html_url": "https://github.com/RitzyDevBox",
      "followers_url": "https://api.github.com/users/RitzyDevBox/followers",
      "following_url": "https://api.github.com/users/RitzyDevBox/following{/other_user}",
      "gists_url": "https://api.github.com/users/RitzyDevBox/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/RitzyDevBox/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/RitzyDevBox/subscriptions",
      "organizations_url": "https://api.github.com/users/RitzyDevBox/orgs",
      "repos_url": "https://api.github.com/users/RitzyDevBox/repos",
      "events_url": "https://api.github.com/users/RitzyDevBox/events{/privacy}",
      "received_events_url": "https://api.github.com/users/RitzyDevBox/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-01-26T23:48:57Z",
    "updated_at": "2023-01-26T23:48:57Z",
    "author_association": "NONE",
    "body": "> \r\n> TLDR: I think that should all be addressed in the governor by doing\r\n> \r\n\r\nThe issue is then your governor is tracking voting power and not your NFT.   Usually you would want all of the properties related to the NFT self contained within the contract.\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1405823796/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1406066060",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3997#issuecomment-1406066060",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3997",
    "id": 1406066060,
    "node_id": "IC_kwDOA9tCBs5Tzt2M",
    "user": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-01-27T06:12:15Z",
    "updated_at": "2023-01-27T06:12:15Z",
    "author_association": "MEMBER",
    "body": "Why do you need to scale it by a uniform amount? Seems like it doesn't make a difference.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1406066060/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1407216597",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3997#issuecomment-1407216597",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3997",
    "id": 1407216597,
    "node_id": "IC_kwDOA9tCBs5T4GvV",
    "user": {
      "login": "RitzyDevBox",
      "id": 103006767,
      "node_id": "U_kgDOBiPCLw",
      "avatar_url": "https://avatars.githubusercontent.com/u/103006767?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/RitzyDevBox",
      "html_url": "https://github.com/RitzyDevBox",
      "followers_url": "https://api.github.com/users/RitzyDevBox/followers",
      "following_url": "https://api.github.com/users/RitzyDevBox/following{/other_user}",
      "gists_url": "https://api.github.com/users/RitzyDevBox/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/RitzyDevBox/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/RitzyDevBox/subscriptions",
      "organizations_url": "https://api.github.com/users/RitzyDevBox/orgs",
      "repos_url": "https://api.github.com/users/RitzyDevBox/repos",
      "events_url": "https://api.github.com/users/RitzyDevBox/events{/privacy}",
      "received_events_url": "https://api.github.com/users/RitzyDevBox/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-01-28T00:26:58Z",
    "updated_at": "2023-01-28T00:29:46Z",
    "author_association": "NONE",
    "body": "> Why do you need to scale it by a uniform amount? Seems like it doesn't make a difference.\r\n\r\nIn a traditional governance system no.   However in multiple choice governance It needs to be scaled uniformly.\r\nMultiple choice requires to be able to split its choices.   So I need to scale up the voting amount to equal my basis points.\r\n\r\nLets say I'm voting for \r\n  \r\n    Choice A 10% => 1000/10000 bips\r\n\r\nIf my nft voting power a single vote.\r\n\r\nthen votingPower * 1000 / 10000  will = 0\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1407216597/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1407511716",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3997#issuecomment-1407511716",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3997",
    "id": 1407511716,
    "node_id": "IC_kwDOA9tCBs5T5Oyk",
    "user": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-01-28T23:34:48Z",
    "updated_at": "2023-01-28T23:35:07Z",
    "author_association": "MEMBER",
    "body": "> The issue is then your governor is tracking voting power and not your NFT\r\n\r\nI don't really agree with this. The NFT continues tracking voting power. The governor simply scales it up, or you could say it makes it more divisible by adding decimals.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1407511716/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1407512083",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3997#issuecomment-1407512083",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3997",
    "id": 1407512083,
    "node_id": "IC_kwDOA9tCBs5T5O4T",
    "user": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-01-28T23:37:22Z",
    "updated_at": "2023-01-28T23:37:29Z",
    "author_association": "MEMBER",
    "body": "Based on comments by @Amxx which I agree with, it doesn't seem we're open to this proposal. Personally I would be in favor of adding something like we're discussing in https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3996.in ERC721.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1407512083/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
