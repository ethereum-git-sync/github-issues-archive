{
  "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2663",
  "repository_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts",
  "labels_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2663/labels{/name}",
  "comments_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2663/comments",
  "events_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2663/events",
  "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2663",
  "id": 877254812,
  "node_id": "MDU6SXNzdWU4NzcyNTQ4MTI=",
  "number": 2663,
  "title": "General meta-data container contract",
  "user": {
    "login": "3rdstage",
    "id": 2508220,
    "node_id": "MDQ6VXNlcjI1MDgyMjA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/2508220?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/3rdstage",
    "html_url": "https://github.com/3rdstage",
    "followers_url": "https://api.github.com/users/3rdstage/followers",
    "following_url": "https://api.github.com/users/3rdstage/following{/other_user}",
    "gists_url": "https://api.github.com/users/3rdstage/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/3rdstage/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/3rdstage/subscriptions",
    "organizations_url": "https://api.github.com/users/3rdstage/orgs",
    "repos_url": "https://api.github.com/users/3rdstage/repos",
    "events_url": "https://api.github.com/users/3rdstage/events{/privacy}",
    "received_events_url": "https://api.github.com/users/3rdstage/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 3,
  "created_at": "2021-05-06T08:47:10Z",
  "updated_at": "2021-05-25T09:35:52Z",
  "closed_at": "2021-05-25T09:35:52Z",
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "**🧐 Motivation**\r\nAlthough Solidity provide various primitive types, extending properties(state variables) of (deployed) contract is very restricted.  Apart from proxy patterns, general meta-data container property can be exploited.\r\n\r\nOne of the best references for such general meta-data container structure is [HTTP header fields](https://en.wikipedia.org/wiki/List_of_HTTP_header_fields).  HTTP header fields can support any type of meta-data because they don't require type definition. HTTP header fields also support multi-value field effectively.\r\n\r\nI want to suggest general meta-data container base contract named `Attributable` following the behavior of HTTP header fields operations.\r\n\r\n\r\n**📝 Details**\r\nThe `Attributable` contract is a general meta-data container contract expected to be base contract for more concrete usage.\r\n\r\nA meta-data is modeled to be name(key)-value pair and has no type concept. Both `name` and `value` are treated as  `string`.   Multiple `value`s can be paired to a single `name`.\r\n\r\nThe interface for `Attributable` contract would be like the following \r\n\r\n```solidity\r\nstruct Attribute{\r\n    string name;\r\n    string value;\r\n}\r\n\r\ninterface IAttributable{\r\n\r\n    event AttributeAdded(string indexed name, string value, uint no);\r\n    event AttributeRemoved(string indexed name, string value);    \r\n    event AttributesRemoved(string indexed name);\r\n\r\n    function getAttributeNames() external view returns (string[] memory);\r\n    function getAttribute(string memory name) external view returns (string memory);\r\n    function getAttributes(string memory name) external view returns (string[] memory);\r\n    function getAttributesCount(string memory name) external view returns (uint);\r\n    function setAttribute(string memory name, string memory value) external;\r\n    function addAttribute(string memory name, string memory value) external;\r\n    function removeAttribute(string memory name, string memory value) external;\r\n    function removeAttributes(string memory name) external;\r\n}\r\n``` \r\n\r\nThe basic implementation for the above interface could be written as follows.  Aside from the main state variable `Attribute[] _attribs`, two index variables `_idxsByName` and `_firstIdxs` \r\n\r\n```solidity\r\ncontract Attributable is IAttributable{\r\n    using EnumerableSet for EnumerableSet.UintSet;\r\n    using Math for uint256;\r\n\r\n    Attribute[] private _attribs;\r\n    mapping(string => EnumerableSet.UintSet) private _idxsByName; // attrib name => attrib indexes\r\n    EnumerableSet.UintSet private _firstIdxs;  // attrib indexes on first values for each name\r\n\r\n    function getAttributeNames() public view override returns (string[] memory){\r\n        uint l = _firstIdxs.length();\r\n\r\n        string[] memory names = new string[](l);\r\n        for(uint i = 0; i < l; i++){\r\n            names[i] = _attribs[_firstIdxs.at(i)].name;\r\n        }\r\n        return names;\r\n    }\r\n    \r\n    function getAttribute(string memory name) public view override returns (string memory){\r\n        uint m = _idxsByName[name].length();\r\n        string memory val;\r\n        if(m > 0) val = _attribs[_idxsByName[name].at(0)].value;\r\n        \r\n        return val;\r\n    }\r\n    \r\n    function getAttributes(string memory name) public view override returns (string[] memory){\r\n        uint m = _idxsByName[name].length();\r\n        string[] memory vals = new string[](m);\r\n        \r\n        for(uint i = 0; i < m; i++){\r\n            vals[i] = _attribs[_idxsByName[name].at(i)].value;\r\n        }\r\n        return vals;\r\n    }\r\n    \r\n    function getAttributesCount(string memory name) public view override returns (uint){\r\n        return _idxsByName[name].length();\r\n    }\r\n\r\n    function setAttribute(string memory name, string memory value) public override{\r\n        _removeAttributes(name);\r\n        _addAttribute(name, value);\r\n    }\r\n    \r\n    function addAttribute(string memory name, string memory value) public override{\r\n        _addAttribute(name, value);\r\n    }\r\n    \r\n    function _addAttribute(string memory name, string memory value) internal{\r\n        uint idx = _attribs.length;\r\n        _attribs.push(Attribute(name, value));\r\n        _idxsByName[name].add(idx);\r\n        uint n = _idxsByName[name].length();\r\n        \r\n        if(n == 1) _firstIdxs.add(idx); \r\n        emit AttributeAdded(name, value, _idxsByName[name].length());\r\n\r\n    }\r\n\r\n    function removeAttribute(string memory name, string memory value) public override{\r\n        uint m = _idxsByName[name].length();\r\n        if(m == 0) return;\r\n        \r\n        bytes32 hash = keccak256(abi.encodePacked(value));\r\n        string memory val;\r\n        uint idx;\r\n        for(uint i = 0; i < m; i++){\r\n            idx = _idxsByName[name].at(i);\r\n            val = _attribs[idx].value;\r\n            if(keccak256(abi.encodePacked(val)) == hash){\r\n                delete _attribs[idx];\r\n                _idxsByName[name].remove(idx);\r\n                if(_firstIdxs.contains(idx)){\r\n                    _firstIdxs.remove(idx);\r\n                    if(_idxsByName[name].length() > 0){\r\n                        _firstIdxs.add(_idxsByName[name].at(0));\r\n                    }\r\n                }\r\n                emit AttributeRemoved(name, value);\r\n            }\r\n        }\r\n    }\r\n    \r\n    function removeAttributes(string memory name) public override{\r\n        _removeAttributes(name);\r\n    }\r\n    \r\n    function _removeAttributes(string memory name) internal{\r\n        uint m = _idxsByName[name].length();\r\n        \r\n        if(m > 0){\r\n            uint idx;\r\n            for(uint i = 0; i < m; i++){\r\n                idx = _idxsByName[name].at(i);\r\n                delete _attribs[idx];\r\n                _firstIdxs.remove(idx);\r\n            }\r\n            \r\n            delete _idxsByName[name];\r\n            emit AttributesRemoved(name);\r\n        }\r\n   }\r\n}\r\n```\r\n\r\n",
  "closed_by": {
    "login": "Amxx",
    "id": 2432299,
    "node_id": "MDQ6VXNlcjI0MzIyOTk=",
    "avatar_url": "https://avatars.githubusercontent.com/u/2432299?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/Amxx",
    "html_url": "https://github.com/Amxx",
    "followers_url": "https://api.github.com/users/Amxx/followers",
    "following_url": "https://api.github.com/users/Amxx/following{/other_user}",
    "gists_url": "https://api.github.com/users/Amxx/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/Amxx/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/Amxx/subscriptions",
    "organizations_url": "https://api.github.com/users/Amxx/orgs",
    "repos_url": "https://api.github.com/users/Amxx/repos",
    "events_url": "https://api.github.com/users/Amxx/events{/privacy}",
    "received_events_url": "https://api.github.com/users/Amxx/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2663/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2663/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/833372992",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2663#issuecomment-833372992",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2663",
    "id": 833372992,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgzMzM3Mjk5Mg==",
    "user": {
      "login": "Amxx",
      "id": 2432299,
      "node_id": "MDQ6VXNlcjI0MzIyOTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2432299?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Amxx",
      "html_url": "https://github.com/Amxx",
      "followers_url": "https://api.github.com/users/Amxx/followers",
      "following_url": "https://api.github.com/users/Amxx/following{/other_user}",
      "gists_url": "https://api.github.com/users/Amxx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Amxx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Amxx/subscriptions",
      "organizations_url": "https://api.github.com/users/Amxx/orgs",
      "repos_url": "https://api.github.com/users/Amxx/repos",
      "events_url": "https://api.github.com/users/Amxx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Amxx/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-05-06T09:19:42Z",
    "updated_at": "2021-05-06T09:19:42Z",
    "author_association": "COLLABORATOR",
    "body": "Hello @3rdstage .\r\n\r\nBefore pushing a particular implementation, it would make a lot of sens to standardize the interface (in an ERC) and get feedback/support for it.\r\nI remember version 2 of [ERC725](https://github.com/ERC725Alliance/erc725/blob/master/docs/ERC-725.md) (after it was reworked at ETHCC 2018) focused on metadata through `setData` and `getData`. [ENS resolvers](https://docs.ens.domains/contract-api-reference/publicresolver) also support generic text records. \r\n\r\nMaybe you this discussion should happen on the [ethmagician's forum](https://ethereum-magicians.org/)",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/833372992/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/839893302",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2663#issuecomment-839893302",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2663",
    "id": 839893302,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgzOTg5MzMwMg==",
    "user": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-05-12T16:02:31Z",
    "updated_at": "2021-05-12T16:02:31Z",
    "author_association": "MEMBER",
    "body": "I agree this looks like something that should be standardized and that a better place for discussion is the Ethereum Magicians forum.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/839893302/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/847482352",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2663#issuecomment-847482352",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2663",
    "id": 847482352,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg0NzQ4MjM1Mg==",
    "user": {
      "login": "fulldecent",
      "id": 382183,
      "node_id": "MDQ6VXNlcjM4MjE4Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/382183?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fulldecent",
      "html_url": "https://github.com/fulldecent",
      "followers_url": "https://api.github.com/users/fulldecent/followers",
      "following_url": "https://api.github.com/users/fulldecent/following{/other_user}",
      "gists_url": "https://api.github.com/users/fulldecent/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fulldecent/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fulldecent/subscriptions",
      "organizations_url": "https://api.github.com/users/fulldecent/orgs",
      "repos_url": "https://api.github.com/users/fulldecent/repos",
      "events_url": "https://api.github.com/users/fulldecent/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fulldecent/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-05-25T02:26:21Z",
    "updated_at": "2021-05-25T02:26:27Z",
    "author_association": "CONTRIBUTOR",
    "body": "Recommend to close issue. There's too much to say about this proposal that I don't want to put here.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/847482352/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
