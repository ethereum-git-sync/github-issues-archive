{
  "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3877",
  "repository_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts",
  "labels_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3877/labels{/name}",
  "comments_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3877/comments",
  "events_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3877/events",
  "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3877",
  "id": 1497717344,
  "node_id": "I_kwDOA9tCBs5ZRVpg",
  "number": 3877,
  "title": "Missing GovernorBravo compatibility",
  "user": {
    "login": "RitzyDevBox",
    "id": 103006767,
    "node_id": "U_kgDOBiPCLw",
    "avatar_url": "https://avatars.githubusercontent.com/u/103006767?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/RitzyDevBox",
    "html_url": "https://github.com/RitzyDevBox",
    "followers_url": "https://api.github.com/users/RitzyDevBox/followers",
    "following_url": "https://api.github.com/users/RitzyDevBox/following{/other_user}",
    "gists_url": "https://api.github.com/users/RitzyDevBox/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/RitzyDevBox/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/RitzyDevBox/subscriptions",
    "organizations_url": "https://api.github.com/users/RitzyDevBox/orgs",
    "repos_url": "https://api.github.com/users/RitzyDevBox/repos",
    "events_url": "https://api.github.com/users/RitzyDevBox/events{/privacy}",
    "received_events_url": "https://api.github.com/users/RitzyDevBox/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 4953777396,
      "node_id": "LA_kwDOA9tCBs8AAAABJ0Sk9A",
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/labels/area:%20governance",
      "name": "area: governance",
      "color": "E7DA84",
      "default": false,
      "description": ""
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/milestones/14",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/milestone/14",
    "labels_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/milestones/14/labels",
    "id": 8383880,
    "node_id": "MI_kwDOA9tCBs4Af-2I",
    "number": 14,
    "title": "4.9",
    "description": "",
    "creator": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "open_issues": 0,
    "closed_issues": 24,
    "state": "closed",
    "created_at": "2022-09-05T16:36:05Z",
    "updated_at": "2023-05-16T01:45:32Z",
    "due_on": null,
    "closed_at": "2023-05-16T01:45:32Z"
  },
  "comments": 16,
  "created_at": "2022-12-15T03:15:01Z",
  "updated_at": "2023-03-14T22:14:04Z",
  "closed_at": "2023-03-14T22:14:03Z",
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "The GovernorCompatibilityBravo.sol contract seems to be missing alot of the the public interface members for bravo\r\n\r\nsuch as:\r\n\r\n    /// @notice The latest proposal for each proposer\r\n    mapping (address => uint) public latestProposalIds;\r\n\r\n\r\n",
  "closed_by": {
    "login": "frangio",
    "id": 481465,
    "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
    "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/frangio",
    "html_url": "https://github.com/frangio",
    "followers_url": "https://api.github.com/users/frangio/followers",
    "following_url": "https://api.github.com/users/frangio/following{/other_user}",
    "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
    "organizations_url": "https://api.github.com/users/frangio/orgs",
    "repos_url": "https://api.github.com/users/frangio/repos",
    "events_url": "https://api.github.com/users/frangio/events{/privacy}",
    "received_events_url": "https://api.github.com/users/frangio/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3877/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3877/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1361994760",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3877#issuecomment-1361994760",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3877",
    "id": 1361994760,
    "node_id": "IC_kwDOA9tCBs5RLmQI",
    "user": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-12-21T19:30:27Z",
    "updated_at": "2022-12-21T19:30:33Z",
    "author_association": "MEMBER",
    "body": "Thanks for pointing that out. We may have missed some public getters.\r\n\r\nAre you using `GovernorCompatibilityBravo`? Would appreciate if you could chime in on https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3833.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1361994760/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1363170605",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3877#issuecomment-1363170605",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3877",
    "id": 1363170605,
    "node_id": "IC_kwDOA9tCBs5RQFUt",
    "user": {
      "login": "FriskyHamTitz",
      "id": 94883498,
      "node_id": "U_kgDOBafOqg",
      "avatar_url": "https://avatars.githubusercontent.com/u/94883498?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/FriskyHamTitz",
      "html_url": "https://github.com/FriskyHamTitz",
      "followers_url": "https://api.github.com/users/FriskyHamTitz/followers",
      "following_url": "https://api.github.com/users/FriskyHamTitz/following{/other_user}",
      "gists_url": "https://api.github.com/users/FriskyHamTitz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/FriskyHamTitz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/FriskyHamTitz/subscriptions",
      "organizations_url": "https://api.github.com/users/FriskyHamTitz/orgs",
      "repos_url": "https://api.github.com/users/FriskyHamTitz/repos",
      "events_url": "https://api.github.com/users/FriskyHamTitz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/FriskyHamTitz/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-12-22T17:40:24Z",
    "updated_at": "2022-12-22T17:40:59Z",
    "author_association": "NONE",
    "body": "Yeah I use bravo compatibility, Do you have full bravo compatibility implementation anywhere?\r\n\r\nFor my particular case I was trying to create governance, but I didn't want to recreate the wheel so I reused uniswaps interface.\r\n\r\nI noticed the compatibility doesn't really work.  I needed to add a few properties and add an enumerator, since there's no way to determine the proposalid (other than using the graph or enumerating the blocks).  I believe in the original proposalids we're sequential so you can predict them using the proposalCount\r\n\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1363170605/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1363280120",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3877#issuecomment-1363280120",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3877",
    "id": 1363280120,
    "node_id": "IC_kwDOA9tCBs5RQgD4",
    "user": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-12-22T19:44:33Z",
    "updated_at": "2022-12-22T19:44:33Z",
    "author_association": "MEMBER",
    "body": "If I understand your comment correctly, you used Uniswap's interface connected to an instance of `GovernorCompatibilityBravo`, and it didn't work correctly. You've already said a few things but I'd appreciate if you can provide as much detail as possible.\r\n\r\nSo for example `latestProposalIds` is missing. What other properties did you need to add? And what enumerator?\r\n\r\nIs the UI broken because proposal ids are not sequential?\r\n\r\nThis is very valuable so we can evaluate getting to 100% compatibility (sorry this wasn't caught earlier).",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1363280120/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1364949407",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3877#issuecomment-1364949407",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3877",
    "id": 1364949407,
    "node_id": "IC_kwDOA9tCBs5RW3mf",
    "user": {
      "login": "RitzyDevBox",
      "id": 103006767,
      "node_id": "U_kgDOBiPCLw",
      "avatar_url": "https://avatars.githubusercontent.com/u/103006767?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/RitzyDevBox",
      "html_url": "https://github.com/RitzyDevBox",
      "followers_url": "https://api.github.com/users/RitzyDevBox/followers",
      "following_url": "https://api.github.com/users/RitzyDevBox/following{/other_user}",
      "gists_url": "https://api.github.com/users/RitzyDevBox/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/RitzyDevBox/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/RitzyDevBox/subscriptions",
      "organizations_url": "https://api.github.com/users/RitzyDevBox/orgs",
      "repos_url": "https://api.github.com/users/RitzyDevBox/repos",
      "events_url": "https://api.github.com/users/RitzyDevBox/events{/privacy}",
      "received_events_url": "https://api.github.com/users/RitzyDevBox/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-12-26T07:11:26Z",
    "updated_at": "2022-12-26T07:23:47Z",
    "author_association": "NONE",
    "body": "Yeah the UI will break, because they use the proposalCount, to enumerate the previous proposals.  In all fairness, the uniswap code there is kinda hacky,  but I didn't feel like rewriting their UI so I just wrote more compatability for it and modified the UI in the slightest way possible.\r\n\r\n`latestPropsalIds` was missing too, but TBH they were using for that, because they did it to prevent people from creating multiple active proposals or something but I didn't really care about it too much so I deleted their code\r\n\r\nHere is the contract for reference:\r\n\r\n`pragma solidity ^0.8.0;\r\n\r\nimport \"@openzeppelin/contracts/governance/compatibility/GovernorCompatibilityBravo.sol\";\r\n\r\nabstract contract GovenorEnumerationCompatibilityBravo is GovernorCompatibilityBravo {\r\n\r\n    uint256 public proposalCount = 0;\r\n    mapping(uint256 => uint256) private _proposalIndexMap;\r\n\r\n    function getProposalIdFromIndex(uint256 index) public view returns (uint256) {\r\n        return _proposalIndexMap[index];\r\n    }\r\n\r\n    // ============================================== Proposal lifecycle ==============================================\r\n    /**\r\n     * @dev See {IGovernor-propose}.\r\n     */\r\n    function propose(\r\n        address[] memory targets,\r\n        uint256[] memory values,\r\n        bytes[] memory calldatas,\r\n        string memory description\r\n    ) public virtual override(GovernorCompatibilityBravo) returns (uint256) {\r\n        return super.propose(targets, values, calldatas, description);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IGovernorCompatibilityBravo-propose}.\r\n     */\r\n    function propose(\r\n        address[] memory targets,\r\n        uint256[] memory values,\r\n        string[] memory signatures,\r\n        bytes[] memory calldatas,\r\n        string memory description\r\n    ) public virtual override returns (uint256) {\r\n        uint256 proposalId = super.propose(targets, values, signatures, calldatas, description);\r\n        _storeProposalIndex(proposalId);\r\n        return proposalId;\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Store proposal metadata for later lookup\r\n     */\r\n    function _storeProposalIndex(uint256 proposalId) private {\r\n        _proposalIndexMap[proposalCount] = proposalId;\r\n        proposalCount++;\r\n    }\r\n}\r\n`",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1364949407/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1364953230",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3877#issuecomment-1364953230",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3877",
    "id": 1364953230,
    "node_id": "IC_kwDOA9tCBs5RW4iO",
    "user": {
      "login": "RitzyDevBox",
      "id": 103006767,
      "node_id": "U_kgDOBiPCLw",
      "avatar_url": "https://avatars.githubusercontent.com/u/103006767?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/RitzyDevBox",
      "html_url": "https://github.com/RitzyDevBox",
      "followers_url": "https://api.github.com/users/RitzyDevBox/followers",
      "following_url": "https://api.github.com/users/RitzyDevBox/following{/other_user}",
      "gists_url": "https://api.github.com/users/RitzyDevBox/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/RitzyDevBox/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/RitzyDevBox/subscriptions",
      "organizations_url": "https://api.github.com/users/RitzyDevBox/orgs",
      "repos_url": "https://api.github.com/users/RitzyDevBox/repos",
      "events_url": "https://api.github.com/users/RitzyDevBox/events{/privacy}",
      "received_events_url": "https://api.github.com/users/RitzyDevBox/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-12-26T07:18:07Z",
    "updated_at": "2022-12-26T07:18:07Z",
    "author_association": "NONE",
    "body": "I ignored proposals coming through the 4 parameter, which may be a bug. \r\n\r\nI was debating on just using a closure around the propose function to store the original count e.g\r\n\r\nuin256 originalCount = proposalCount;\r\npropose...\r\nproposalCount = originalCount+1.\r\n\r\nThis would ensure that the storage was correct but I'm still skeptical on whether the hashes would differ.   I'm not in the production phase yet so that contract is just a rough workaround\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1364953230/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1387088832",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3877#issuecomment-1387088832",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3877",
    "id": 1387088832,
    "node_id": "IC_kwDOA9tCBs5SrUvA",
    "user": {
      "login": "Amxx",
      "id": 2432299,
      "node_id": "MDQ6VXNlcjI0MzIyOTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2432299?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Amxx",
      "html_url": "https://github.com/Amxx",
      "followers_url": "https://api.github.com/users/Amxx/followers",
      "following_url": "https://api.github.com/users/Amxx/following{/other_user}",
      "gists_url": "https://api.github.com/users/Amxx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Amxx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Amxx/subscriptions",
      "organizations_url": "https://api.github.com/users/Amxx/orgs",
      "repos_url": "https://api.github.com/users/Amxx/repos",
      "events_url": "https://api.github.com/users/Amxx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Amxx/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-01-18T13:38:10Z",
    "updated_at": "2023-01-18T13:48:31Z",
    "author_association": "COLLABORATOR",
    "body": "Our governor inherits part of its interface (in particular the events and the voting ABI) from Compound's governor. Still, both have significant differences. The most significant is in the storage and representation of proposals:\r\n\r\n- Governor Bravo stores everything onchain, and numbers the proposal that are submitted sequentially. This is really expensive!\r\n- OZ's Governor does NOT store the proposal details by default. We publish them through event, which is enough for offchain indexing. A consequence of this design is that proposal need to be identified differently. Therefore, our proposal numbering system is not sequential but relies on the hash of the proposal.\r\n\r\nThe `GovernorCompatibilityBravo` module is here to provide some backward compatibility by storing the proposal details onchain, which can then be queried using the `getActions(uint256)` getter. This helps with some usecases, but the proposal numbering system remains hash-based.\r\n\r\nSequentiality of proposal in Compound's system allows for simpler (event-less) indexing of the proposal. You just query how much proposal there are, and you can then lookup the proposals, from 0 to N-1. I expect this is what uniswap's interface does. \r\n\r\nChanging the governor to use sequential numbering, and thus achieve 100% compatibility, feels like a very difficult thing to do in a extension module. building an extension means that we continue supporting the \"core\" interface, which itself requires the hash-based proposal numbering.\r\n\r\nWe may have to reconsider the amount of compatibility we want to achieve. Event, and voting interface, compatibility is really a blessing, but we also inherited some poor design choice, made by compound years ago in a very different context. We hope that this debt, combined with the compatibility layer, would make everyone's work (expect ours) significantly easier... but if it turn out that this is not the case, maybe we should dial back and remove some (costly) extensions that don't achieve the expected goal.\r\n\r\nNote: Similarly, compound includes rules about the each proposer's `latestProposalIds` and enforces a maximum of one live proposal per proposer (which we don't do, even in the compatibility module). Is this something we should have ?",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1387088832/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1396380738",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3877#issuecomment-1396380738",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3877",
    "id": 1396380738,
    "node_id": "IC_kwDOA9tCBs5TOxRC",
    "user": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-01-19T03:03:34Z",
    "updated_at": "2023-01-19T03:03:34Z",
    "author_association": "MEMBER",
    "body": "Here is the full GovernorBravo interface:\r\n\r\n```solidity\r\npragma solidity ^0.5.16;\r\npragma experimental ABIEncoderV2;\r\n\r\ninterface GovernorBravo {\r\n    struct Receipt {\r\n        bool hasVoted;\r\n        uint8 support;\r\n        uint96 votes;\r\n    }\r\n\r\n    event NewAdmin(address oldAdmin, address newAdmin);\r\n    event NewImplementation(\r\n        address oldImplementation,\r\n        address newImplementation\r\n    );\r\n    event NewPendingAdmin(address oldPendingAdmin, address newPendingAdmin);\r\n    event ProposalCanceled(uint256 id);\r\n    event ProposalCreated(\r\n        uint256 id,\r\n        address proposer,\r\n        address[] targets,\r\n        uint256[] values,\r\n        string[] signatures,\r\n        bytes[] calldatas,\r\n        uint256 startBlock,\r\n        uint256 endBlock,\r\n        string description\r\n    );\r\n    event ProposalExecuted(uint256 id);\r\n    event ProposalQueued(uint256 id, uint256 eta);\r\n    event ProposalThresholdSet(\r\n        uint256 oldProposalThreshold,\r\n        uint256 newProposalThreshold\r\n    );\r\n    event VoteCast(\r\n        address indexed voter,\r\n        uint256 proposalId,\r\n        uint8 support,\r\n        uint256 votes,\r\n        string reason\r\n    );\r\n    event VotingDelaySet(uint256 oldVotingDelay, uint256 newVotingDelay);\r\n    event VotingPeriodSet(uint256 oldVotingPeriod, uint256 newVotingPeriod);\r\n    event WhitelistAccountExpirationSet(address account, uint256 expiration);\r\n    event WhitelistGuardianSet(address oldGuardian, address newGuardian);\r\n\r\n    function BALLOT_TYPEHASH() external view returns (bytes32);\r\n\r\n    function DOMAIN_TYPEHASH() external view returns (bytes32);\r\n\r\n    function MAX_PROPOSAL_THRESHOLD() external view returns (uint256);\r\n\r\n    function MAX_VOTING_DELAY() external view returns (uint256);\r\n\r\n    function MAX_VOTING_PERIOD() external view returns (uint256);\r\n\r\n    function MIN_PROPOSAL_THRESHOLD() external view returns (uint256);\r\n\r\n    function MIN_VOTING_DELAY() external view returns (uint256);\r\n\r\n    function MIN_VOTING_PERIOD() external view returns (uint256);\r\n\r\n    function _acceptAdmin() external;\r\n\r\n    function _initiate(address governorAlpha) external;\r\n\r\n    function _setPendingAdmin(address newPendingAdmin) external;\r\n\r\n    function _setProposalThreshold(uint256 newProposalThreshold) external;\r\n\r\n    function _setVotingDelay(uint256 newVotingDelay) external;\r\n\r\n    function _setVotingPeriod(uint256 newVotingPeriod) external;\r\n\r\n    function _setWhitelistAccountExpiration(address account, uint256 expiration)\r\n        external;\r\n\r\n    function _setWhitelistGuardian(address account) external;\r\n\r\n    function admin() external view returns (address);\r\n\r\n    function cancel(uint256 proposalId) external;\r\n\r\n    function castVote(uint256 proposalId, uint8 support) external;\r\n\r\n    function castVoteBySig(\r\n        uint256 proposalId,\r\n        uint8 support,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n    function castVoteWithReason(\r\n        uint256 proposalId,\r\n        uint8 support,\r\n        string memory reason\r\n    ) external;\r\n\r\n    function comp() external view returns (address);\r\n\r\n    function execute(uint256 proposalId) external;\r\n\r\n    function getActions(uint256 proposalId)\r\n        external\r\n        view\r\n        returns (\r\n            address[] memory targets,\r\n            uint256[] memory values,\r\n            string[] memory signatures,\r\n            bytes[] memory calldatas\r\n        );\r\n\r\n    function getReceipt(uint256 proposalId, address voter)\r\n        external\r\n        view\r\n        returns (Receipt memory);\r\n\r\n    function implementation() external view returns (address);\r\n\r\n    function initialProposalId() external view returns (uint256);\r\n\r\n    function initialize(\r\n        address timelock_,\r\n        address comp_,\r\n        uint256 votingPeriod_,\r\n        uint256 votingDelay_,\r\n        uint256 proposalThreshold_\r\n    ) external;\r\n\r\n    function isWhitelisted(address account) external view returns (bool);\r\n\r\n    function latestProposalIds(address) external view returns (uint256);\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    function pendingAdmin() external view returns (address);\r\n\r\n    function proposalCount() external view returns (uint256);\r\n\r\n    function proposalMaxOperations() external view returns (uint256);\r\n\r\n    function proposalThreshold() external view returns (uint256);\r\n\r\n    function proposals(uint256)\r\n        external\r\n        view\r\n        returns (\r\n            uint256 id,\r\n            address proposer,\r\n            uint256 eta,\r\n            uint256 startBlock,\r\n            uint256 endBlock,\r\n            uint256 forVotes,\r\n            uint256 againstVotes,\r\n            uint256 abstainVotes,\r\n            bool canceled,\r\n            bool executed\r\n        );\r\n\r\n    function propose(\r\n        address[] memory targets,\r\n        uint256[] memory values,\r\n        string[] memory signatures,\r\n        bytes[] memory calldatas,\r\n        string memory description\r\n    ) external returns (uint256);\r\n\r\n    function queue(uint256 proposalId) external;\r\n\r\n    function quorumVotes() external view returns (uint256);\r\n\r\n    function state(uint256 proposalId) external view returns (uint8);\r\n\r\n    function timelock() external view returns (address);\r\n\r\n    function votingDelay() external view returns (uint256);\r\n\r\n    function votingPeriod() external view returns (uint256);\r\n\r\n    function whitelistAccountExpirations(address)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function whitelistGuardian() external view returns (address);\r\n}\r\n```\r\n\r\nI don't think we want to support all of these, and like @Amxx says above in some cases it is not possible due to implementation differences. We should definitely be advertising better that compatibility is limited and what things are not supported.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1396380738/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1399033443",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3877#issuecomment-1399033443",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3877",
    "id": 1399033443,
    "node_id": "IC_kwDOA9tCBs5TY45j",
    "user": {
      "login": "FriskyHamTitz",
      "id": 94883498,
      "node_id": "U_kgDOBafOqg",
      "avatar_url": "https://avatars.githubusercontent.com/u/94883498?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/FriskyHamTitz",
      "html_url": "https://github.com/FriskyHamTitz",
      "followers_url": "https://api.github.com/users/FriskyHamTitz/followers",
      "following_url": "https://api.github.com/users/FriskyHamTitz/following{/other_user}",
      "gists_url": "https://api.github.com/users/FriskyHamTitz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/FriskyHamTitz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/FriskyHamTitz/subscriptions",
      "organizations_url": "https://api.github.com/users/FriskyHamTitz/orgs",
      "repos_url": "https://api.github.com/users/FriskyHamTitz/repos",
      "events_url": "https://api.github.com/users/FriskyHamTitz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/FriskyHamTitz/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-01-20T22:35:19Z",
    "updated_at": "2023-01-20T22:35:19Z",
    "author_association": "NONE",
    "body": "Hmm, I would just suggest hybrid compatibility.\nAdding enumeration capabilities in the following manner.\n\n1. Add proposalCount to the bravo compatibility contract\n\n2. Add a public mapping of (uint256 => uint256) indexToHashMap\n\n3. On propose add the index and hash to the map.\n\nThis way the bravo compatibility has no dependency on the graph.\n\n(If you really wanted to take go wild with it you can override all the\nmethods to internally use that but that would be a little much )\n\nOn Wed, Jan 18, 2023, 8:38 AM Hadrien Croubois ***@***.***>\nwrote:\n\n> Our governor inherits part of its interface (in particular the events and\n> the voting ABI) from Compound's governor. Still, both have significant\n> differences. The most significant is in the storage and representation of\n> proposals:\n>\n>    - Governor Bravo stores everything onchain, and numbers the proposal\n>    that are submitted sequentially. This is really expensive!\n>    - OZ's Governor does NOT store the proposal details by default. We\n>    publish them through event, which is enough for offchain indexing. A\n>    consequence of this design is that proposal need to be identified\n>    differently. Therefore, our proposal numbering system is not sequential but\n>    relies on the hash of the proposal.\n>\n> The GovernorCompatibilityBravo module is here to provide some backward\n> compatibility by storing the proposal details onchain, which can then be\n> queried using the proposals(uint256) getter. This helps with some\n> usecases, but the proposal numbering system remains hash-based.\n>\n> Sequentiality of proposal in Compound's system allows for simpler\n> (event-less) indexing of the proposal. You just query how much proposal\n> there are, and you can then lookup the proposals, from 0 to N-1. I expect\n> this is what uniswap's interface does.\n>\n> Changing the governor to use sequential numbering, and thus achieve 100%\n> compatibility, feels like a very difficult thing to do in a extension\n> module. building an extension means that we continue supporting the \"core\"\n> interface, which itself requires the hash-based proposal numbering.\n>\n> We may have to reconsider the amount of compatibility we want to achieve.\n> Event, and voting interface, compatibility is really a blessing, but we\n> also inherited some poor design choice, made by compound years ago in a\n> very different context. We hope that this debt, combined with the\n> compatibility layer, would make everyone's work (expect ours) significantly\n> easier... but if it turn out that this is not the case, maybe we should\n> dial back and remove some (costly) extensions that don't achieve the\n> expected goal.\n>\n> Note: Similarly, compound includes rules about the each proposer's\n> latestProposalIds and enforces a maximum of one live proposal per\n> proposer (which we don't do, even in the compatibility module). Is this\n> something we should have ?\n>\n> —\n> Reply to this email directly, view it on GitHub\n> <https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3877#issuecomment-1387088832>,\n> or unsubscribe\n> <https://github.com/notifications/unsubscribe-auth/AWT45KUR6E273QC6OMXZ5VLWS7W45ANCNFSM6AAAAAAS7HP4XI>\n> .\n> You are receiving this because you commented.Message ID:\n> ***@***.***>\n>\n",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1399033443/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1400117322",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3877#issuecomment-1400117322",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3877",
    "id": 1400117322,
    "node_id": "IC_kwDOA9tCBs5TdBhK",
    "user": {
      "login": "Amxx",
      "id": 2432299,
      "node_id": "MDQ6VXNlcjI0MzIyOTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2432299?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Amxx",
      "html_url": "https://github.com/Amxx",
      "followers_url": "https://api.github.com/users/Amxx/followers",
      "following_url": "https://api.github.com/users/Amxx/following{/other_user}",
      "gists_url": "https://api.github.com/users/Amxx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Amxx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Amxx/subscriptions",
      "organizations_url": "https://api.github.com/users/Amxx/orgs",
      "repos_url": "https://api.github.com/users/Amxx/repos",
      "events_url": "https://api.github.com/users/Amxx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Amxx/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-01-23T10:27:06Z",
    "updated_at": "2023-01-23T10:27:06Z",
    "author_association": "COLLABORATOR",
    "body": "That would not be compatible though, because the `proposalId` given by the events is the hash one.\r\n\r\nSo when you have a proposalId, depending on if it is an index, of an actual hash based proposal id, you would have to workflows. \r\n\r\nAlso, if you get a count, take the last index, and start listening for the corresponding events you would get nothing. ",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1400117322/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1401126804",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3877#issuecomment-1401126804",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3877",
    "id": 1401126804,
    "node_id": "IC_kwDOA9tCBs5Tg3-U",
    "user": {
      "login": "RitzyDevBox",
      "id": 103006767,
      "node_id": "U_kgDOBiPCLw",
      "avatar_url": "https://avatars.githubusercontent.com/u/103006767?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/RitzyDevBox",
      "html_url": "https://github.com/RitzyDevBox",
      "followers_url": "https://api.github.com/users/RitzyDevBox/followers",
      "following_url": "https://api.github.com/users/RitzyDevBox/following{/other_user}",
      "gists_url": "https://api.github.com/users/RitzyDevBox/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/RitzyDevBox/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/RitzyDevBox/subscriptions",
      "organizations_url": "https://api.github.com/users/RitzyDevBox/orgs",
      "repos_url": "https://api.github.com/users/RitzyDevBox/repos",
      "events_url": "https://api.github.com/users/RitzyDevBox/events{/privacy}",
      "received_events_url": "https://api.github.com/users/RitzyDevBox/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-01-23T23:06:04Z",
    "updated_at": "2023-01-23T23:06:34Z",
    "author_association": "NONE",
    "body": "> That would not be compatible though, because the `proposalId` given by the events is the hash one.\r\n> \r\n> So when you have a proposalId, depending on if it is an index, of an actual hash based proposal id, you would have to workflows.\r\n> \r\n> Also, if you get a count, take the last index, and start listening for the corresponding events you would get nothing.\r\n\r\nMy sugguestion for full compatibility is that, You override all the functions, e.g propose, execute, queue, to look up the HashId from the CountId passed in, and pass that to the base.\r\n\r\nBut my suggestion for \"hybrid\" I really meant \"partial\", with just the mapping you can easily enumerate without needing the graph.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1401126804/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1401712147",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3877#issuecomment-1401712147",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3877",
    "id": 1401712147,
    "node_id": "IC_kwDOA9tCBs5TjG4T",
    "user": {
      "login": "Amxx",
      "id": 2432299,
      "node_id": "MDQ6VXNlcjI0MzIyOTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2432299?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Amxx",
      "html_url": "https://github.com/Amxx",
      "followers_url": "https://api.github.com/users/Amxx/followers",
      "following_url": "https://api.github.com/users/Amxx/following{/other_user}",
      "gists_url": "https://api.github.com/users/Amxx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Amxx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Amxx/subscriptions",
      "organizations_url": "https://api.github.com/users/Amxx/orgs",
      "repos_url": "https://api.github.com/users/Amxx/repos",
      "events_url": "https://api.github.com/users/Amxx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Amxx/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-01-24T10:39:45Z",
    "updated_at": "2023-01-24T10:39:45Z",
    "author_association": "COLLABORATOR",
    "body": "> My sugguestion for full compatibility is that, You override all the functions, e.g propose, execute, queue, to look up the HashId from the CountId passed in, and pass that to the base.\r\n\r\nThe events are emitted by the core, using proposalId that are hashed by the core. I'm not sure how we would make sure the core doesn't use the proposalId it produces and use sequential ids instead.\r\n\r\nIt feels like the difference is so big that we would need a different codebase altogether\r\n\r\n```mermaid\r\nclassDiagram\r\n    class IGovernor{\r\n        +function something() external virtual\r\n    }\r\n    class AbstractGovernor {\r\n        +function something() public virtual override\r\n    }\r\n    class GovernorCore {\r\n        +function something() public virtual override ...\r\n    }\r\n    class GovernorCompatibilityCore {\r\n        +function something() public virtual override ...\r\n    }\r\n\r\n\r\n    IGovernor --|> AbstractGovernor\r\n    AbstractGovernor --|> GovernorCore\r\n    AbstractGovernor --|> GovernorCompatibilityCore\r\n    AbstractGovernor --|> GovernorModuleXxx\r\n\r\n    GovernorCore --> GovernorModuleXxx : possible composition\r\n    GovernorCompatibilityCore --> GovernorModuleXxx : possible composition\r\n```\r\n\r\nI'm not sure would be a lot of development and maintenance, and also a lot of confuction for the users. Considering the compatibility mode is way more expensive to use (because of all the sload/sstore) I'm not sure we want to encourage that ... and then have users complain its expensive",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1401712147/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1403038089",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3877#issuecomment-1403038089",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3877",
    "id": 1403038089,
    "node_id": "IC_kwDOA9tCBs5ToKmJ",
    "user": {
      "login": "RitzyDevBox",
      "id": 103006767,
      "node_id": "U_kgDOBiPCLw",
      "avatar_url": "https://avatars.githubusercontent.com/u/103006767?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/RitzyDevBox",
      "html_url": "https://github.com/RitzyDevBox",
      "followers_url": "https://api.github.com/users/RitzyDevBox/followers",
      "following_url": "https://api.github.com/users/RitzyDevBox/following{/other_user}",
      "gists_url": "https://api.github.com/users/RitzyDevBox/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/RitzyDevBox/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/RitzyDevBox/subscriptions",
      "organizations_url": "https://api.github.com/users/RitzyDevBox/orgs",
      "repos_url": "https://api.github.com/users/RitzyDevBox/repos",
      "events_url": "https://api.github.com/users/RitzyDevBox/events{/privacy}",
      "received_events_url": "https://api.github.com/users/RitzyDevBox/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-01-25T03:09:59Z",
    "updated_at": "2023-01-25T03:09:59Z",
    "author_association": "NONE",
    "body": "I see your point,   To be honest a separate base altogether may make sense.   \r\nThe only downfalls there would be.\r\n\r\n     1. More maintenance managing multiple contracts\r\n     2. Updating the wizard so that it\r\n\r\nPersonally, I just added a BravoEnumeration to my project and added as a layer on top of the existing compatibility,  Even though it doesn't follow the Bravo Spec, I'm able to enumerate just the same I just need to modify the front end interface.  But the only issue is that if a contract is expecting a bravo interface it won't work.\r\n\r\nI just finished writing a Multiple choice voting Governor, not sure what the process is but I would love to become a contributor here.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1403038089/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1403646461",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3877#issuecomment-1403646461",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3877",
    "id": 1403646461,
    "node_id": "IC_kwDOA9tCBs5TqfH9",
    "user": {
      "login": "Amxx",
      "id": 2432299,
      "node_id": "MDQ6VXNlcjI0MzIyOTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2432299?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Amxx",
      "html_url": "https://github.com/Amxx",
      "followers_url": "https://api.github.com/users/Amxx/followers",
      "following_url": "https://api.github.com/users/Amxx/following{/other_user}",
      "gists_url": "https://api.github.com/users/Amxx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Amxx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Amxx/subscriptions",
      "organizations_url": "https://api.github.com/users/Amxx/orgs",
      "repos_url": "https://api.github.com/users/Amxx/repos",
      "events_url": "https://api.github.com/users/Amxx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Amxx/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-01-25T13:45:30Z",
    "updated_at": "2023-01-25T13:45:30Z",
    "author_association": "COLLABORATOR",
    "body": "> I just finished writing a Multiple choice voting Governor, not sure what the process is but I would love to become a contributor here.\r\n\r\nThe process is documented here [here](https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/CONTRIBUTING.md)",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1403646461/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1403650044",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3877#issuecomment-1403650044",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3877",
    "id": 1403650044,
    "node_id": "IC_kwDOA9tCBs5Tqf_8",
    "user": {
      "login": "Amxx",
      "id": 2432299,
      "node_id": "MDQ6VXNlcjI0MzIyOTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2432299?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Amxx",
      "html_url": "https://github.com/Amxx",
      "followers_url": "https://api.github.com/users/Amxx/followers",
      "following_url": "https://api.github.com/users/Amxx/following{/other_user}",
      "gists_url": "https://api.github.com/users/Amxx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Amxx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Amxx/subscriptions",
      "organizations_url": "https://api.github.com/users/Amxx/orgs",
      "repos_url": "https://api.github.com/users/Amxx/repos",
      "events_url": "https://api.github.com/users/Amxx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Amxx/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-01-25T13:47:08Z",
    "updated_at": "2023-01-25T13:47:08Z",
    "author_association": "COLLABORATOR",
    "body": "Also note that we had the project of having a repository of \"unofficial contracts\" that would include things like governor modules. We are not yet sure how it would be maintained, but that is something we should focus some time on (after 5.0?)",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1403650044/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1403855867",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3877#issuecomment-1403855867",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3877",
    "id": 1403855867,
    "node_id": "IC_kwDOA9tCBs5TrSP7",
    "user": {
      "login": "RitzyDevBox",
      "id": 103006767,
      "node_id": "U_kgDOBiPCLw",
      "avatar_url": "https://avatars.githubusercontent.com/u/103006767?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/RitzyDevBox",
      "html_url": "https://github.com/RitzyDevBox",
      "followers_url": "https://api.github.com/users/RitzyDevBox/followers",
      "following_url": "https://api.github.com/users/RitzyDevBox/following{/other_user}",
      "gists_url": "https://api.github.com/users/RitzyDevBox/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/RitzyDevBox/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/RitzyDevBox/subscriptions",
      "organizations_url": "https://api.github.com/users/RitzyDevBox/orgs",
      "repos_url": "https://api.github.com/users/RitzyDevBox/repos",
      "events_url": "https://api.github.com/users/RitzyDevBox/events{/privacy}",
      "received_events_url": "https://api.github.com/users/RitzyDevBox/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-01-25T16:08:16Z",
    "updated_at": "2023-01-25T16:08:16Z",
    "author_association": "NONE",
    "body": "I can fix this bug for you guys.\n\nhttps://github.com/OpenZeppelin/openzeppelin-contracts/issues/3997\n\nI've already put most of the code there\n\n\n\nOn Wed, Jan 25, 2023, 8:47 AM Hadrien Croubois ***@***.***>\nwrote:\n\n> Also note that we had the project of having a repository of \"unofficial\n> contracts\" that would include things like governor modules. We are not yet\n> sure how it would be maintained, but that is something we should focus some\n> time on (after 5.0?)\n>\n> —\n> Reply to this email directly, view it on GitHub\n> <https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3877#issuecomment-1403650044>,\n> or unsubscribe\n> <https://github.com/notifications/unsubscribe-auth/AYR4EL7MIND7ZX24V4YS34LWUEVGPANCNFSM6AAAAAAS7HP4XI>\n> .\n> You are receiving this because you authored the thread.Message ID:\n> ***@***.***>\n>\n",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1403855867/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1442632212",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3877#issuecomment-1442632212",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3877",
    "id": 1442632212,
    "node_id": "IC_kwDOA9tCBs5V_NIU",
    "user": {
      "login": "ernestognw",
      "id": 33379285,
      "node_id": "MDQ6VXNlcjMzMzc5Mjg1",
      "avatar_url": "https://avatars.githubusercontent.com/u/33379285?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ernestognw",
      "html_url": "https://github.com/ernestognw",
      "followers_url": "https://api.github.com/users/ernestognw/followers",
      "following_url": "https://api.github.com/users/ernestognw/following{/other_user}",
      "gists_url": "https://api.github.com/users/ernestognw/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ernestognw/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ernestognw/subscriptions",
      "organizations_url": "https://api.github.com/users/ernestognw/orgs",
      "repos_url": "https://api.github.com/users/ernestognw/repos",
      "events_url": "https://api.github.com/users/ernestognw/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ernestognw/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-02-24T00:46:32Z",
    "updated_at": "2023-02-24T00:46:32Z",
    "author_association": "MEMBER",
    "body": "Hey @RitzyDevBox, we've been reviewing this, and here are the missing functions:\r\n\r\n```solidity\r\nfunction DOMAIN_TYPEHASH() external view returns (bytes32);\r\nfunction MAX_PROPOSAL_THRESHOLD() external view returns (uint256);\r\nfunction MAX_VOTING_DELAY() external view returns (uint256);\r\nfunction MAX_VOTING_PERIOD() external view returns (uint256);\r\nfunction MIN_PROPOSAL_THRESHOLD() external view returns (uint256);\r\nfunction MIN_VOTING_DELAY() external view returns (uint256);\r\nfunction MIN_VOTING_PERIOD() external view returns (uint256);\r\nfunction _acceptAdmin() external;\r\nfunction _setPendingAdmin(address newPendingAdmin) external;\r\nfunction admin() external view returns (address);\r\nfunction pendingAdmin() external view returns (address);\r\nfunction _initiate(address governorAlpha) external; \r\nfunction _setProposalThreshold(uint256 newProposalThreshold) external;\r\nfunction _setVotingDelay(uint256 newVotingDelay) external;\r\nfunction _setVotingPeriod(uint256 newVotingPeriod) external;\r\nfunction _setWhitelistAccountExpiration(address account, uint256 expiration) external;\r\nfunction _setWhitelistGuardian(address account) external;\r\nfunction isWhitelisted(address account) external view returns (bool);\r\nfunction whitelistAccountExpirations(address) external view returns (uint256);\r\nfunction whitelistGuardian() external view returns (address);\r\nfunction comp() external view returns (address);\r\nfunction initialProposalId() external view returns (uint256);\r\nfunction latestProposalIds(address) external view returns (uint256);\r\nfunction proposalCount() external view returns (uint256);\r\nfunction proposalMaxOperations() external view returns (uint256);\r\n\r\n// EIP-1967 and upgrades\r\nfunction implementation() external view returns (address);\r\nfunction initialize(\r\n    address timelock_,\r\n    address comp_,\r\n    uint256 votingPeriod_,\r\n    uint256 votingDelay_,\r\n    uint256 proposalThreshold_\r\n) external;\r\n```\r\n\r\nSo far, we think not all of these functions need to be there, and most of them would be filled with placeholder values, take as a reference `comp` or `whitelistGuardian`, in which the former should return the address of an underlying token (which may not be ERC20, though), and there's no `whitelist` mechanism.\r\n\r\nAside from that, some of them can be implemented easily but are not critical (such as `DOMAIN_TYPEHASH`). \r\n\r\nRegarding your use case, even if we add the missing `proposalCount`, it won't work for enumerability.\r\nWe'll document the limitations of the compatibility, including inner differences (like how `proposalId` works) though we'd like to hear your thoughts if you have reasons to support the addition of any of these functions.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1442632212/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
