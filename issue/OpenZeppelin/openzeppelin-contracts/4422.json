{
  "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4422",
  "repository_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts",
  "labels_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4422/labels{/name}",
  "comments_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4422/comments",
  "events_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4422/events",
  "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/4422",
  "id": 1788455588,
  "node_id": "I_kwDOA9tCBs5qmaqk",
  "number": 4422,
  "title": "read only version of nonReentrant modifier",
  "user": {
    "login": "thedavidmeister",
    "id": 629710,
    "node_id": "MDQ6VXNlcjYyOTcxMA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/629710?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/thedavidmeister",
    "html_url": "https://github.com/thedavidmeister",
    "followers_url": "https://api.github.com/users/thedavidmeister/followers",
    "following_url": "https://api.github.com/users/thedavidmeister/following{/other_user}",
    "gists_url": "https://api.github.com/users/thedavidmeister/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/thedavidmeister/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/thedavidmeister/subscriptions",
    "organizations_url": "https://api.github.com/users/thedavidmeister/orgs",
    "repos_url": "https://api.github.com/users/thedavidmeister/repos",
    "events_url": "https://api.github.com/users/thedavidmeister/events{/privacy}",
    "received_events_url": "https://api.github.com/users/thedavidmeister/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 0,
  "created_at": "2023-07-04T20:42:13Z",
  "updated_at": "2023-07-04T20:42:54Z",
  "closed_at": null,
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "**üßê Motivation**\r\n\r\nHelp slither understand read only reentrancy guards by implementing a modifier like `nonReentrant` that does NOT modify the state, and just checks `_reentrancyGuardEntered`.\r\n\r\nSlither has a special case in it for analysing `nonReentrant` but gives false positives on cross function reentrancies where `view` functions read state that is modified after a reentrant call.\r\n\r\nE.g. https://github.com/crytic/slither/issues/735#issuecomment-1620704314\r\n\r\nIf there was a modifier that was compatible with `view` functions then slither could understand this too.\r\n\r\n**üìù Details**\r\n\r\nAdd a `nonReentrantView` modifier that is a thin wrapper around `_reentrancyGuardEntered()`\r\n\r\ne.g.\r\n\r\n```solidity\r\nmodifier nonReentrantView() {\r\n  if(_reentrancyGuardEntered()) {\r\n    revert ReentrancyGuardReentrantCall();\r\n  }\r\n  _;\r\n}\r\n```",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4422/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4422/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[

]
