{
  "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4422",
  "repository_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts",
  "labels_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4422/labels{/name}",
  "comments_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4422/comments",
  "events_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4422/events",
  "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/4422",
  "id": 1788455588,
  "node_id": "I_kwDOA9tCBs5qmaqk",
  "number": 4422,
  "title": "read only version of nonReentrant modifier",
  "user": {
    "login": "thedavidmeister",
    "id": 629710,
    "node_id": "MDQ6VXNlcjYyOTcxMA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/629710?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/thedavidmeister",
    "html_url": "https://github.com/thedavidmeister",
    "followers_url": "https://api.github.com/users/thedavidmeister/followers",
    "following_url": "https://api.github.com/users/thedavidmeister/following{/other_user}",
    "gists_url": "https://api.github.com/users/thedavidmeister/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/thedavidmeister/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/thedavidmeister/subscriptions",
    "organizations_url": "https://api.github.com/users/thedavidmeister/orgs",
    "repos_url": "https://api.github.com/users/thedavidmeister/repos",
    "events_url": "https://api.github.com/users/thedavidmeister/events{/privacy}",
    "received_events_url": "https://api.github.com/users/thedavidmeister/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 2,
  "created_at": "2023-07-04T20:42:13Z",
  "updated_at": "2023-07-05T11:22:32Z",
  "closed_at": null,
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "**üßê Motivation**\r\n\r\nHelp slither understand read only reentrancy guards by implementing a modifier like `nonReentrant` that does NOT modify the state, and just checks `_reentrancyGuardEntered`.\r\n\r\nSlither has a special case in it for analysing `nonReentrant` but gives false positives on cross function reentrancies where `view` functions read state that is modified after a reentrant call.\r\n\r\nE.g. https://github.com/crytic/slither/issues/735#issuecomment-1620704314\r\n\r\nIf there was a modifier that was compatible with `view` functions then slither could understand this too.\r\n\r\n**üìù Details**\r\n\r\nAdd a `nonReentrantView` modifier that is a thin wrapper around `_reentrancyGuardEntered()`\r\n\r\ne.g.\r\n\r\n```solidity\r\nmodifier nonReentrantView() {\r\n  if(_reentrancyGuardEntered()) {\r\n    revert ReentrancyGuardReentrantCall();\r\n  }\r\n  _;\r\n}\r\n```",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4422/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4422/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1621326208",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/4422#issuecomment-1621326208",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4422",
    "id": 1621326208,
    "node_id": "IC_kwDOA9tCBs5go3mA",
    "user": {
      "login": "Amxx",
      "id": 2432299,
      "node_id": "MDQ6VXNlcjI0MzIyOTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2432299?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Amxx",
      "html_url": "https://github.com/Amxx",
      "followers_url": "https://api.github.com/users/Amxx/followers",
      "following_url": "https://api.github.com/users/Amxx/following{/other_user}",
      "gists_url": "https://api.github.com/users/Amxx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Amxx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Amxx/subscriptions",
      "organizations_url": "https://api.github.com/users/Amxx/orgs",
      "repos_url": "https://api.github.com/users/Amxx/repos",
      "events_url": "https://api.github.com/users/Amxx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Amxx/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-07-05T08:57:12Z",
    "updated_at": "2023-07-05T08:57:12Z",
    "author_association": "COLLABORATOR",
    "body": "Hello @thedavidmeister \r\n\r\nJust to confirm I understand correctly, the motivation for adding this modifier is only to prevent slither raising false positives?\r\n\r\nIf that is the case, I would be strongly against adding this. It could create confusion for devs over which one should be used. This would contribute negativelly to security.\r\n\r\nIf its just about Slither raising false positives, then slither should be fixes and our code should not be modified. ",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1621326208/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1621539624",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/4422#issuecomment-1621539624",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4422",
    "id": 1621539624,
    "node_id": "IC_kwDOA9tCBs5gprso",
    "user": {
      "login": "thedavidmeister",
      "id": 629710,
      "node_id": "MDQ6VXNlcjYyOTcxMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/629710?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/thedavidmeister",
      "html_url": "https://github.com/thedavidmeister",
      "followers_url": "https://api.github.com/users/thedavidmeister/followers",
      "following_url": "https://api.github.com/users/thedavidmeister/following{/other_user}",
      "gists_url": "https://api.github.com/users/thedavidmeister/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/thedavidmeister/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/thedavidmeister/subscriptions",
      "organizations_url": "https://api.github.com/users/thedavidmeister/orgs",
      "repos_url": "https://api.github.com/users/thedavidmeister/repos",
      "events_url": "https://api.github.com/users/thedavidmeister/events{/privacy}",
      "received_events_url": "https://api.github.com/users/thedavidmeister/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-07-05T11:09:32Z",
    "updated_at": "2023-07-05T11:22:32Z",
    "author_association": "NONE",
    "body": "@Amxx no, that's not the only reason, it's an example\r\n\r\nread only reentrancy is a real issue, which OZ doesn't provide a modifier to solve, and slither is correct in complaining about it\r\n\r\nif devs are confused and don't know which one to use, they're likely writing insecure code already because right now it's much more difficult to do correctly, you have to manually implement the snippet i posted basically\r\n\r\nto be clear, the slither false positive comes into play _only if you fix the issue manually_ and then slither still complains (because it doesn't understand the ad-hoc hand rolled solution). In the base case that a dev simply leaves a view function unguarded, and slither reports an issue, that's a real issue for the dev to fix somehow.\r\n\r\ni.e. the baseline that OZ provides with modifiers alone is often insecure atm\r\n\r\nhere's more info\r\n\r\nhttps://officercia.mirror.xyz/DBzFiDuxmDOTQEbfXhvLdK0DXVpKu1Nkurk0Cqk3QKc\r\n\r\nthe main issue with the current `nonReentrant` modifier is that it always modifies the state, there's no variant where it just checks the state, which make it incompatible with `view` functions\r\n\r\ni'm suggesting a second modifier that checks the reentrancy state without attempting to modify it, so that getters don't report inconsistent values as part of a cross function reentrancy\r\n\r\nthen, in a hypothetical world where there's a standard modifier for people to fix this problem with, slither could check it to ensure that the issues it is reporting have been solved in a standard way (slither is already OZ aware for the existing `nonReentrant` modifier)",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1621539624/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
