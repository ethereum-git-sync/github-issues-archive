{
  "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4422",
  "repository_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts",
  "labels_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4422/labels{/name}",
  "comments_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4422/comments",
  "events_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4422/events",
  "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/4422",
  "id": 1788455588,
  "node_id": "I_kwDOA9tCBs5qmaqk",
  "number": 4422,
  "title": "read only version of nonReentrant modifier",
  "user": {
    "login": "thedavidmeister",
    "id": 629710,
    "node_id": "MDQ6VXNlcjYyOTcxMA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/629710?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/thedavidmeister",
    "html_url": "https://github.com/thedavidmeister",
    "followers_url": "https://api.github.com/users/thedavidmeister/followers",
    "following_url": "https://api.github.com/users/thedavidmeister/following{/other_user}",
    "gists_url": "https://api.github.com/users/thedavidmeister/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/thedavidmeister/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/thedavidmeister/subscriptions",
    "organizations_url": "https://api.github.com/users/thedavidmeister/orgs",
    "repos_url": "https://api.github.com/users/thedavidmeister/repos",
    "events_url": "https://api.github.com/users/thedavidmeister/events{/privacy}",
    "received_events_url": "https://api.github.com/users/thedavidmeister/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 6,
  "created_at": "2023-07-04T20:42:13Z",
  "updated_at": "2023-07-19T08:20:08Z",
  "closed_at": null,
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "**üßê Motivation**\r\n\r\nHelp slither understand read only reentrancy guards by implementing a modifier like `nonReentrant` that does NOT modify the state, and just checks `_reentrancyGuardEntered`.\r\n\r\nSlither has a special case in it for analysing `nonReentrant` but gives false positives on cross function reentrancies where `view` functions read state that is modified after a reentrant call.\r\n\r\nE.g. https://github.com/crytic/slither/issues/735#issuecomment-1620704314\r\n\r\nIf there was a modifier that was compatible with `view` functions then slither could understand this too.\r\n\r\n**üìù Details**\r\n\r\nAdd a `nonReentrantView` modifier that is a thin wrapper around `_reentrancyGuardEntered()`\r\n\r\ne.g.\r\n\r\n```solidity\r\nmodifier nonReentrantView() {\r\n  if(_reentrancyGuardEntered()) {\r\n    revert ReentrancyGuardReentrantCall();\r\n  }\r\n  _;\r\n}\r\n```",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4422/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4422/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1621326208",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/4422#issuecomment-1621326208",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4422",
    "id": 1621326208,
    "node_id": "IC_kwDOA9tCBs5go3mA",
    "user": {
      "login": "Amxx",
      "id": 2432299,
      "node_id": "MDQ6VXNlcjI0MzIyOTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2432299?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Amxx",
      "html_url": "https://github.com/Amxx",
      "followers_url": "https://api.github.com/users/Amxx/followers",
      "following_url": "https://api.github.com/users/Amxx/following{/other_user}",
      "gists_url": "https://api.github.com/users/Amxx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Amxx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Amxx/subscriptions",
      "organizations_url": "https://api.github.com/users/Amxx/orgs",
      "repos_url": "https://api.github.com/users/Amxx/repos",
      "events_url": "https://api.github.com/users/Amxx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Amxx/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-07-05T08:57:12Z",
    "updated_at": "2023-07-05T08:57:12Z",
    "author_association": "COLLABORATOR",
    "body": "Hello @thedavidmeister \r\n\r\nJust to confirm I understand correctly, the motivation for adding this modifier is only to prevent slither raising false positives?\r\n\r\nIf that is the case, I would be strongly against adding this. It could create confusion for devs over which one should be used. This would contribute negativelly to security.\r\n\r\nIf its just about Slither raising false positives, then slither should be fixes and our code should not be modified. ",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1621326208/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1621539624",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/4422#issuecomment-1621539624",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4422",
    "id": 1621539624,
    "node_id": "IC_kwDOA9tCBs5gprso",
    "user": {
      "login": "thedavidmeister",
      "id": 629710,
      "node_id": "MDQ6VXNlcjYyOTcxMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/629710?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/thedavidmeister",
      "html_url": "https://github.com/thedavidmeister",
      "followers_url": "https://api.github.com/users/thedavidmeister/followers",
      "following_url": "https://api.github.com/users/thedavidmeister/following{/other_user}",
      "gists_url": "https://api.github.com/users/thedavidmeister/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/thedavidmeister/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/thedavidmeister/subscriptions",
      "organizations_url": "https://api.github.com/users/thedavidmeister/orgs",
      "repos_url": "https://api.github.com/users/thedavidmeister/repos",
      "events_url": "https://api.github.com/users/thedavidmeister/events{/privacy}",
      "received_events_url": "https://api.github.com/users/thedavidmeister/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-07-05T11:09:32Z",
    "updated_at": "2023-07-05T11:22:32Z",
    "author_association": "NONE",
    "body": "@Amxx no, that's not the only reason, it's an example\r\n\r\nread only reentrancy is a real issue, which OZ doesn't provide a modifier to solve, and slither is correct in complaining about it\r\n\r\nif devs are confused and don't know which one to use, they're likely writing insecure code already because right now it's much more difficult to do correctly, you have to manually implement the snippet i posted basically\r\n\r\nto be clear, the slither false positive comes into play _only if you fix the issue manually_ and then slither still complains (because it doesn't understand the ad-hoc hand rolled solution). In the base case that a dev simply leaves a view function unguarded, and slither reports an issue, that's a real issue for the dev to fix somehow.\r\n\r\ni.e. the baseline that OZ provides with modifiers alone is often insecure atm\r\n\r\nhere's more info\r\n\r\nhttps://officercia.mirror.xyz/DBzFiDuxmDOTQEbfXhvLdK0DXVpKu1Nkurk0Cqk3QKc\r\n\r\nthe main issue with the current `nonReentrant` modifier is that it always modifies the state, there's no variant where it just checks the state, which make it incompatible with `view` functions\r\n\r\ni'm suggesting a second modifier that checks the reentrancy state without attempting to modify it, so that getters don't report inconsistent values as part of a cross function reentrancy\r\n\r\nthen, in a hypothetical world where there's a standard modifier for people to fix this problem with, slither could check it to ensure that the issues it is reporting have been solved in a standard way (slither is already OZ aware for the existing `nonReentrant` modifier)",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1621539624/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1639331582",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/4422#issuecomment-1639331582",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4422",
    "id": 1639331582,
    "node_id": "IC_kwDOA9tCBs5htjb-",
    "user": {
      "login": "ernestognw",
      "id": 33379285,
      "node_id": "MDQ6VXNlcjMzMzc5Mjg1",
      "avatar_url": "https://avatars.githubusercontent.com/u/33379285?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ernestognw",
      "html_url": "https://github.com/ernestognw",
      "followers_url": "https://api.github.com/users/ernestognw/followers",
      "following_url": "https://api.github.com/users/ernestognw/following{/other_user}",
      "gists_url": "https://api.github.com/users/ernestognw/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ernestognw/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ernestognw/subscriptions",
      "organizations_url": "https://api.github.com/users/ernestognw/orgs",
      "repos_url": "https://api.github.com/users/ernestognw/repos",
      "events_url": "https://api.github.com/users/ernestognw/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ernestognw/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-07-18T03:55:49Z",
    "updated_at": "2023-07-18T03:55:49Z",
    "author_association": "MEMBER",
    "body": "Given read-only reentrancy already has some successful exploits (totaling 220k in the Quickswap case alone) I'd credit the idea of having a `nonReentrant` modifier for view functions and if developers are already using a similar solution to this one, I think it's reasonable to add the change.\r\n\r\nNonetheless, I also agree with @Amxx concerns of people getting confused. It's true that a user might be already in trouble if they don't fully understand how reentrancy works, but I also don't want to give people reasons to throw the `nonReentrant` everywhere without a reason because in such case, it would also increase the runtime costs of `external` functions accessing `view` getters.\r\n\r\nWe would need some data to evaluate better if there's a significative impact of users using unnecessary `nonReentrant` modifiers\r\n ",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1639331582/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1639748656",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/4422#issuecomment-1639748656",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4422",
    "id": 1639748656,
    "node_id": "IC_kwDOA9tCBs5hvJQw",
    "user": {
      "login": "thedavidmeister",
      "id": 629710,
      "node_id": "MDQ6VXNlcjYyOTcxMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/629710?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/thedavidmeister",
      "html_url": "https://github.com/thedavidmeister",
      "followers_url": "https://api.github.com/users/thedavidmeister/followers",
      "following_url": "https://api.github.com/users/thedavidmeister/following{/other_user}",
      "gists_url": "https://api.github.com/users/thedavidmeister/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/thedavidmeister/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/thedavidmeister/subscriptions",
      "organizations_url": "https://api.github.com/users/thedavidmeister/orgs",
      "repos_url": "https://api.github.com/users/thedavidmeister/repos",
      "events_url": "https://api.github.com/users/thedavidmeister/events{/privacy}",
      "received_events_url": "https://api.github.com/users/thedavidmeister/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-07-18T08:23:38Z",
    "updated_at": "2023-07-18T08:26:22Z",
    "author_association": "NONE",
    "body": "@ernestognw the snippet i posted is roughly the cost of one storage read and and a couple of jumps due to the internal function call and `if`\r\n\r\ntotal cost would be ~200 gas.\r\n\r\nslither already tells you if there's a cross function problem where you write to storage somewhere and it can be read reentrently elsewhere\r\n\r\ne.g.\r\n\r\n```\r\nFoo.bar (src/Foo.sol#123) can be used in cross function reentrancies:\r\n```\r\n\r\nThe existence of readily available FOSS tools that tell a dev if and where issues are seems out of scope for OZ though.\r\n\r\nWhat we can say re: gas costs:\r\n\r\n- A view only reentrancy modifier will always be cheaper than one that has to perform two writes in addition to the read\r\n- A dev that puts unnecessary modifiers on their functions is already doing so in the write case, so it doesn't change much if they're also adding a few hundred gas to some read functions as well\r\n- In the case where a dev _doesn't_ put a guard on their view functions, we can expect the gas costs downstream to be far greater than what the modifier would have cost\r\n\r\nE.g. from the linked article\r\n\r\n<img width=\"862\" alt=\"Screenshot 2023-07-18 at 12 17 44\" src=\"https://github.com/OpenZeppelin/openzeppelin-contracts/assets/629710/c7032b7b-673d-4e17-958f-b4d27a69f781\">\r\n\r\nDownstream consumers have to defensively try/catch some other reentrancy-guarded function (assuming an appropriate method even exists) before they know if the read is safe. This would incur the gas costs of an external call, the cost of a write reentrancy guard, whatever else that method does, and then error handling, on top of then reading the view function.\r\n\r\nSomewhat tangentially, also note that OZ makes the reentrant status of the contract `private` which means it is unlikely that downstream consumers can directly check whether it is safe to read, other than the hacky \"try to write and catch\" approach.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1639748656/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1641199562",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/4422#issuecomment-1641199562",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4422",
    "id": 1641199562,
    "node_id": "IC_kwDOA9tCBs5h0rfK",
    "user": {
      "login": "ernestognw",
      "id": 33379285,
      "node_id": "MDQ6VXNlcjMzMzc5Mjg1",
      "avatar_url": "https://avatars.githubusercontent.com/u/33379285?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ernestognw",
      "html_url": "https://github.com/ernestognw",
      "followers_url": "https://api.github.com/users/ernestognw/followers",
      "following_url": "https://api.github.com/users/ernestognw/following{/other_user}",
      "gists_url": "https://api.github.com/users/ernestognw/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ernestognw/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ernestognw/subscriptions",
      "organizations_url": "https://api.github.com/users/ernestognw/orgs",
      "repos_url": "https://api.github.com/users/ernestognw/repos",
      "events_url": "https://api.github.com/users/ernestognw/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ernestognw/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-07-19T00:33:25Z",
    "updated_at": "2023-07-19T00:33:55Z",
    "author_association": "MEMBER",
    "body": "You're right on the costs analysis, the order of magnitude of the cost is not exaggerated and these costs are already assumed by protocols protecting against read-only reentrancy. My concern is less about the total gas cost added and more about _unintentional_ gas costs added.\r\n\r\nI'd be in favor of adding the modifier but the reason I'm wary is because adding it doesn't fully solve problems such as defensive try/catch on guarded functions, which I would consider even more problematic in terms of gas costs as you suggest. I'm worried users won't understand these aspects and began throwing the protection everywhere.\r\n\r\n> Somewhat tangentially, also note that OZ makes the reentrant status of the contract private which means it is unlikely that downstream consumers can directly check whether it is safe to read, other than the hacky \"try to write and catch\" approach\r\n\r\nAt this point, I'll be more interested in solving the `private` initialize state issue, which also enables users to guard their own view functions. Note that there's a workaround for this, which is reading the value directly from storage and expose in a getter. \r\n\r\nThe way I see it is that it's very easy for experimented users to build the view modifier on their own (they're already doing it afaik) than expect nonadvanced users to know when to use the modifier, so I'm leaning towards just making the reentrant status `public`. If the read-only reentrancy landscape evolves in a way in which it's easy to make a mistake with your own modifier then we should add the modifier and maintain it accordingly.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1641199562/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1641633781",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/4422#issuecomment-1641633781",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4422",
    "id": 1641633781,
    "node_id": "IC_kwDOA9tCBs5h2Vf1",
    "user": {
      "login": "thedavidmeister",
      "id": 629710,
      "node_id": "MDQ6VXNlcjYyOTcxMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/629710?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/thedavidmeister",
      "html_url": "https://github.com/thedavidmeister",
      "followers_url": "https://api.github.com/users/thedavidmeister/followers",
      "following_url": "https://api.github.com/users/thedavidmeister/following{/other_user}",
      "gists_url": "https://api.github.com/users/thedavidmeister/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/thedavidmeister/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/thedavidmeister/subscriptions",
      "organizations_url": "https://api.github.com/users/thedavidmeister/orgs",
      "repos_url": "https://api.github.com/users/thedavidmeister/repos",
      "events_url": "https://api.github.com/users/thedavidmeister/events{/privacy}",
      "received_events_url": "https://api.github.com/users/thedavidmeister/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-07-19T08:14:33Z",
    "updated_at": "2023-07-19T08:20:08Z",
    "author_association": "NONE",
    "body": "@ernestognw \r\n\r\n> My concern is less about the total gas cost added and more about unintentional gas costs added.\r\n> I'm worried users won't understand these aspects and began throwing the protection everywhere.\r\n\r\nMy initial reaction is... \"so what if they do?\"\r\n\r\nPeople _like_ being conservative by default, and then only removing protections if/when they can prove/show\r\n\r\n- that it is safe to do so (often at great expense through proofs/tests/tools/time).\r\n- the performance benefits justify the risk of being wrong about it being safe to do so\r\n\r\nThrowing protection everywhere seems to be the basic philosophy of choosing to work with Solidity+OZ rather than yul/huff in the first place.\r\n\r\n200 gas is comparable to or cheaper than the gas cost of the following \"always on by default\" safety features baked into Solidity and OZ already\r\n\r\n- checking the index of an array exists\r\n- checking a math operation doesn't overflow\r\n- checking that tokens transfer/approve safely\r\n- looping over newly allocated memory to zero it out\r\n- padding the alignment of memory due to use of `bytes`\r\n- converting between numeric types safety\r\n- safely calling any external contract\r\n- checking if a function is payable\r\n- allocating and copying new memory always (e.g. when abi encoding) instead of mutating/sharing data in place or working directly with pointers\r\n\r\nDeciding whether or not any given potential reentrancy is perfectly safe or unsafe is very difficult to do just by looking at the code. If it wasn't then I'm sure mature tooling like slither would have fixed all their reentrancy false positive/negatives long ago.\r\n\r\n> adding it doesn't fully solve problems such as defensive try/catch on guarded functions\r\n\r\nok, can we talk about this, because as i understand, the proposed modifier completely solves the need to do this\r\n\r\nin what scenario does the view modifier NOT remove the need for an external consumer to defensively ping unrelated functions in the hope of spotting an error without unintended side effects?\r\n\r\n> The way I see it is that it's very easy for experimented users to build the view modifier on their own (they're already doing it afaik) than expect nonadvanced users to know when to use the modifier, so I'm leaning towards just making the reentrant status public.\r\n\r\nThe problem with this stance is that in defi it's the _end users_ that need to convince themselves that something is safe to put their money into, not just the code author.\r\n\r\nHaving and adopting clear standard approaches to mitigating known risks lowers the bar for _readers_ to understand whether something is safe or not.\r\n\r\nThere is value in being able to say \"you don't even have to care about whether reeentrancy is an issue here\" vs. \"you have to read every other line of the contract to figure out whether this line is vulnerable\".",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1641633781/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
