{
  "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4005",
  "repository_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts",
  "labels_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4005/labels{/name}",
  "comments_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4005/comments",
  "events_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4005/events",
  "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/4005",
  "id": 1558951768,
  "node_id": "I_kwDOA9tCBs5c67dY",
  "number": 4005,
  "title": "Add dynamic options to governance proposals",
  "user": {
    "login": "RitzyDevBox",
    "id": 103006767,
    "node_id": "U_kgDOBiPCLw",
    "avatar_url": "https://avatars.githubusercontent.com/u/103006767?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/RitzyDevBox",
    "html_url": "https://github.com/RitzyDevBox",
    "followers_url": "https://api.github.com/users/RitzyDevBox/followers",
    "following_url": "https://api.github.com/users/RitzyDevBox/following{/other_user}",
    "gists_url": "https://api.github.com/users/RitzyDevBox/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/RitzyDevBox/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/RitzyDevBox/subscriptions",
    "organizations_url": "https://api.github.com/users/RitzyDevBox/orgs",
    "repos_url": "https://api.github.com/users/RitzyDevBox/repos",
    "events_url": "https://api.github.com/users/RitzyDevBox/events{/privacy}",
    "received_events_url": "https://api.github.com/users/RitzyDevBox/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 4953777396,
      "node_id": "LA_kwDOA9tCBs8AAAABJ0Sk9A",
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/labels/area:%20governance",
      "name": "area: governance",
      "color": "E7DA84",
      "default": false,
      "description": ""
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 7,
  "created_at": "2023-01-26T23:58:04Z",
  "updated_at": "2023-04-18T01:27:35Z",
  "closed_at": null,
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "I've been working on a multi-governor, I've had to pretty much duplicate the entire interface due to one small parameter change\r\nI need an additional parameter to accept data during the propose,  currently i've hardcoded this \r\n\r\n    function propose(\r\n        address[] memory targets,\r\n        uint256[] memory values,\r\n        bytes[] memory calldatas,\r\n        string memory description,\r\n        VoteChoices[] memory voteChoices\r\n    )\r\n\r\nBut if the new version were to accept a blob of bytes, the interface would be more versatile a it can include things that is related to the proposal and but not specifically for execution \r\n\r\n    function propose(\r\n        address[] memory targets,\r\n        uint256[] memory values,\r\n        bytes[] memory calldatas,\r\n        string memory description,\r\n        bytes memory additionalData\r\n    )",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4005/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4005/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1406270235",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/4005#issuecomment-1406270235",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4005",
    "id": 1406270235,
    "node_id": "IC_kwDOA9tCBs5T0fsb",
    "user": {
      "login": "Amxx",
      "id": 2432299,
      "node_id": "MDQ6VXNlcjI0MzIyOTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2432299?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Amxx",
      "html_url": "https://github.com/Amxx",
      "followers_url": "https://api.github.com/users/Amxx/followers",
      "following_url": "https://api.github.com/users/Amxx/following{/other_user}",
      "gists_url": "https://api.github.com/users/Amxx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Amxx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Amxx/subscriptions",
      "organizations_url": "https://api.github.com/users/Amxx/orgs",
      "repos_url": "https://api.github.com/users/Amxx/repos",
      "events_url": "https://api.github.com/users/Amxx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Amxx/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-01-27T09:53:40Z",
    "updated_at": "2023-01-27T09:53:59Z",
    "author_association": "COLLABORATOR",
    "body": "Hello @RitzyDevBox \r\n\r\nChanging the propose interface is a breaking change that we want to avoid. \r\n\r\n---\r\n\r\nYou could use a construction similar to [GovernorCompatibilityBravo](https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/governance/compatibility/GovernorCompatibilityBravo.sol) to add a second interface on top of the existing one. It could look like:\r\n\r\n```solidity\r\nabstract contract MyGovernorModule is Governor {\r\n    function propose(\r\n        address[] memory targets,\r\n        uint256[] memory values,\r\n        bytes[] memory calldatas,\r\n        string memory description\r\n    ) public virtual override(IGovernor, Governor) returns (uint256) {\r\n        revert(\"disabled, please use the other one\");\r\n    } \r\n    \r\n    function propose(\r\n        address[] memory targets,\r\n        uint256[] memory values,\r\n        bytes[] memory calldatas,\r\n        string memory description,\r\n        bytes memory additionalData\r\n    ) public virtual returns (uint256) {\r\n        uint256 proposalId = super.propose(targets, values, calldatas, description);\r\n        // Do something with the additionalData\r\n        return proposalId;\r\n    }\r\n}\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1406270235/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1407177680",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/4005#issuecomment-1407177680",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4005",
    "id": 1407177680,
    "node_id": "IC_kwDOA9tCBs5T39PQ",
    "user": {
      "login": "RitzyDevBox",
      "id": 103006767,
      "node_id": "U_kgDOBiPCLw",
      "avatar_url": "https://avatars.githubusercontent.com/u/103006767?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/RitzyDevBox",
      "html_url": "https://github.com/RitzyDevBox",
      "followers_url": "https://api.github.com/users/RitzyDevBox/followers",
      "following_url": "https://api.github.com/users/RitzyDevBox/following{/other_user}",
      "gists_url": "https://api.github.com/users/RitzyDevBox/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/RitzyDevBox/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/RitzyDevBox/subscriptions",
      "organizations_url": "https://api.github.com/users/RitzyDevBox/orgs",
      "repos_url": "https://api.github.com/users/RitzyDevBox/repos",
      "events_url": "https://api.github.com/users/RitzyDevBox/events{/privacy}",
      "received_events_url": "https://api.github.com/users/RitzyDevBox/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-01-27T23:09:26Z",
    "updated_at": "2023-01-27T23:09:26Z",
    "author_association": "NONE",
    "body": "Yeah I know that would be a big breaking change.   I have it working as you proposed currently.\r\nOpenzepplin interfaces are widely used, and it would save a lot of audit time and money if all of this functionality was built into the interface. \r\n\r\nI would almost take it a further notch and day wouldn't it make sense to include an additional bytes param in almost every method?\r\n\r\nThere shouldn't be much of an additional cost if by default the parameter is not used, the only down side is that it is taking away from the max bytes that can be placed in a contract.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1407177680/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1411023099",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/4005#issuecomment-1411023099",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4005",
    "id": 1411023099,
    "node_id": "IC_kwDOA9tCBs5UGoD7",
    "user": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-01-31T20:28:43Z",
    "updated_at": "2023-01-31T20:28:43Z",
    "author_association": "MEMBER",
    "body": "> include an additional bytes param in almost every method\r\n\r\nIt isn't as simple as adding an additional bytes param. We need to give it a semantics. In the case of vote params, we have `params` in COUNTING_MODE to help with that.\r\n\r\nWe're not going to add a bytes param without a really good idea of what it can be used for and how important those use cases are. Feel free to share what you're building for multiple choice.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1411023099/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1416431141",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/4005#issuecomment-1416431141",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4005",
    "id": 1416431141,
    "node_id": "IC_kwDOA9tCBs5UbQYl",
    "user": {
      "login": "RitzyDevBox",
      "id": 103006767,
      "node_id": "U_kgDOBiPCLw",
      "avatar_url": "https://avatars.githubusercontent.com/u/103006767?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/RitzyDevBox",
      "html_url": "https://github.com/RitzyDevBox",
      "followers_url": "https://api.github.com/users/RitzyDevBox/followers",
      "following_url": "https://api.github.com/users/RitzyDevBox/following{/other_user}",
      "gists_url": "https://api.github.com/users/RitzyDevBox/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/RitzyDevBox/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/RitzyDevBox/subscriptions",
      "organizations_url": "https://api.github.com/users/RitzyDevBox/orgs",
      "repos_url": "https://api.github.com/users/RitzyDevBox/repos",
      "events_url": "https://api.github.com/users/RitzyDevBox/events{/privacy}",
      "received_events_url": "https://api.github.com/users/RitzyDevBox/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-02-03T21:40:12Z",
    "updated_at": "2023-02-03T21:40:12Z",
    "author_association": "NONE",
    "body": "The current governor is limited its tightly coupling the behavior to the proposals and does not allow dynamic options.\r\n\r\nThere is a clear use case for the additional bytes parameter and that is to configure dynamic options related to the proposal.  I will list a few use cases.\r\n\r\n1. Providing different choices for different proposal\r\n          Proposal 1 Choices:  A,B,C\r\n          Proposal 2 Choices: D, E, F, G\r\n.     This cannot be addressed by counting mode as the choices are dynamic with each proposal.\r\n\r\n2. Options can be used for declaring different proposal types.  \r\n            Standard, Emergency Vote, Multiple choice.\r\n\r\n3. Options which allow proposers with special roles to override default behavior such as the quorum, threshold.\r\n\r\n\r\n            \r\n",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1416431141/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1416569381",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/4005#issuecomment-1416569381",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4005",
    "id": 1416569381,
    "node_id": "IC_kwDOA9tCBs5UbyIl",
    "user": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-02-04T00:59:26Z",
    "updated_at": "2023-02-04T01:00:10Z",
    "author_association": "MEMBER",
    "body": "Those are good examples! \"Dynamic options\" is a very clear category that is clearly not covered by the current design.\r\n\r\n> This cannot be addressed by counting mode as the choices are dynamic with each proposal.\r\n\r\nJust to be clear, I didn't mean that counting mode addressed this, what I meant is that when we have a generic argument we need a way to communicate what kinds of values are accepted for that argument. If we add bytes data to proposals, the Govenor needs to specify for anyone interacting with it what values it is possible to pass as data and how they would be decoded and interpreted.\r\n\r\n---\r\n\r\nI think this is a potentially good idea, but we should set clear expectations: we are currently working on a 4.9 release which will not include this as it is a significant feature. After that we will work on a 5.0 release and I think we should consider this as a potential feature and if it requires breaking changes that would be a good moment to add it, but if it doesn't require breaking changes it would likely get pushed to a subsequent minor release.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1416569381/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1416648542",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/4005#issuecomment-1416648542",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4005",
    "id": 1416648542,
    "node_id": "IC_kwDOA9tCBs5UcFde",
    "user": {
      "login": "RitzyDevBox",
      "id": 103006767,
      "node_id": "U_kgDOBiPCLw",
      "avatar_url": "https://avatars.githubusercontent.com/u/103006767?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/RitzyDevBox",
      "html_url": "https://github.com/RitzyDevBox",
      "followers_url": "https://api.github.com/users/RitzyDevBox/followers",
      "following_url": "https://api.github.com/users/RitzyDevBox/following{/other_user}",
      "gists_url": "https://api.github.com/users/RitzyDevBox/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/RitzyDevBox/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/RitzyDevBox/subscriptions",
      "organizations_url": "https://api.github.com/users/RitzyDevBox/orgs",
      "repos_url": "https://api.github.com/users/RitzyDevBox/repos",
      "events_url": "https://api.github.com/users/RitzyDevBox/events{/privacy}",
      "received_events_url": "https://api.github.com/users/RitzyDevBox/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-02-04T03:32:14Z",
    "updated_at": "2023-02-04T03:32:14Z",
    "author_association": "NONE",
    "body": "Thanks,\n\nYeah I def can wait for 5.0, I have a lot of refactoring to do anyway.  I\noriginally duplicated the entire design.  But after a few of our\nconversations I realized it it all fits, that's the only thing that was\noutstanding.\n\n\n\nOn Fri, Feb 3, 2023, 7:59 PM Francisco ***@***.***> wrote:\n\n> Those are good examples! \"Dynamic options\" is a very clear category that\n> is clearly not covered by the current design.\n>\n> This cannot be addressed by counting mode as the choices are dynamic with\n> each proposal.\n>\n> Just to be clear, I didn't mean that counting mode addressed this, what I\n> meant is that when we have a generic argument we need a way to communicate\n> what kinds of values are accepted for that argument. If we add bytes data\n> to proposals, the Govenor needs to specify what values it is possible to\n> pass as data and how they would be decoded and interpreted.\n> ------------------------------\n>\n> I think this is a potentially good idea, but we should set clear\n> expectations: we are currently working on a 4.9 release which will not\n> include this as it is a significant feature. After that we will work on a\n> 5.0 release and I think we should consider this as a potential feature and\n> if it requires breaking changes that would be a good moment to add it, but\n> if it doesn't require breaking changes it would likely get pushed to a\n> subsequent minor release.\n>\n> —\n> Reply to this email directly, view it on GitHub\n> <https://github.com/OpenZeppelin/openzeppelin-contracts/issues/4005#issuecomment-1416569381>,\n> or unsubscribe\n> <https://github.com/notifications/unsubscribe-auth/AYR4EL3VRW7HBAMLVRHPAHLWVWSXRANCNFSM6AAAAAAUIDCLWM>\n> .\n> You are receiving this because you were mentioned.Message ID:\n> ***@***.***>\n>\n",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1416648542/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1512307958",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/4005#issuecomment-1512307958",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4005",
    "id": 1512307958,
    "node_id": "IC_kwDOA9tCBs5aI_z2",
    "user": {
      "login": "RitzyDevBox",
      "id": 103006767,
      "node_id": "U_kgDOBiPCLw",
      "avatar_url": "https://avatars.githubusercontent.com/u/103006767?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/RitzyDevBox",
      "html_url": "https://github.com/RitzyDevBox",
      "followers_url": "https://api.github.com/users/RitzyDevBox/followers",
      "following_url": "https://api.github.com/users/RitzyDevBox/following{/other_user}",
      "gists_url": "https://api.github.com/users/RitzyDevBox/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/RitzyDevBox/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/RitzyDevBox/subscriptions",
      "organizations_url": "https://api.github.com/users/RitzyDevBox/orgs",
      "repos_url": "https://api.github.com/users/RitzyDevBox/repos",
      "events_url": "https://api.github.com/users/RitzyDevBox/events{/privacy}",
      "received_events_url": "https://api.github.com/users/RitzyDevBox/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-04-18T01:27:35Z",
    "updated_at": "2023-04-18T01:27:35Z",
    "author_association": "NONE",
    "body": "@frangio do you guys have a roadmap or eta for 5.0 release?  I finished all my smart contract coding, and I'm on to the front-end but once I have the POC done, I'll be able to provide some help if you guys need assistance for the release.  \r\n ",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1512307958/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
