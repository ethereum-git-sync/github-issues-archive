{
  "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1341",
  "repository_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts",
  "labels_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1341/labels{/name}",
  "comments_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1341/comments",
  "events_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1341/events",
  "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1341",
  "id": 362479840,
  "node_id": "MDU6SXNzdWUzNjI0Nzk4NDA=",
  "number": 1341,
  "title": "TimedCrowdsale, AllowanceCrowdsale: Possible Overflow in Standardtoken.sol -> transferFrom",
  "user": {
    "login": "360disrupt",
    "id": 7427903,
    "node_id": "MDQ6VXNlcjc0Mjc5MDM=",
    "avatar_url": "https://avatars.githubusercontent.com/u/7427903?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/360disrupt",
    "html_url": "https://github.com/360disrupt",
    "followers_url": "https://api.github.com/users/360disrupt/followers",
    "following_url": "https://api.github.com/users/360disrupt/following{/other_user}",
    "gists_url": "https://api.github.com/users/360disrupt/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/360disrupt/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/360disrupt/subscriptions",
    "organizations_url": "https://api.github.com/users/360disrupt/orgs",
    "repos_url": "https://api.github.com/users/360disrupt/repos",
    "events_url": "https://api.github.com/users/360disrupt/events{/privacy}",
    "received_events_url": "https://api.github.com/users/360disrupt/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 1,
  "created_at": "2018-09-21T06:55:05Z",
  "updated_at": "2018-09-27T16:24:30Z",
  "closed_at": "2018-09-27T16:24:30Z",
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "## 🎉 Description\r\n I created a Crowdsale (TimedCrowdsale, AllowanceCrowdsale) and it looks like it creates an overflow. Because the addresses change to some weird hex numbers:\r\n\r\n```\r\n  _from: '0x627306090abab3a6e1400e9345bc60c78a8bef57'\r\n _to: '0xc5fdf4076b8f3a5357c5e395ab970b5b54098fef'\r\n\r\n_from: '0x0de0b6b3a7640000'\r\n_to: '0x0de0b6b3a7640000'\r\n\r\n```\r\n- [x ] 🐛 This is a bug report.\r\n- [ ] 📈 This is a feature request.\r\n\r\n## 💻 Environment\r\nopenzeppelin-solidity@v1.12.0\r\nGanache\r\ntruffle\r\n\r\n## 📝 Details\r\n\r\nThe transaction fails with revert (see the debugging point below). I'm a beginner at Solidity but it looks like there is an overflow somewhere. \r\n\r\n\r\n## 🔢 Code To Reproduce Issue [ Good To Have ]\r\n\r\n## token \r\n\r\nI create a BurnableToken:\r\n```\r\n    pragma solidity 0.4.24;\r\n    \r\n    import 'openzeppelin-solidity/contracts/token/ERC20/StandardBurnableToken.sol';\r\n    \r\n    contract TestBurnableToken is StandardBurnableToken {\r\n        string public name = \"TestCoinBurnable\";\r\n        string public symbol = \"tcb\";\r\n        uint8 public decimals = 18;\r\n    \r\n        uint256 public totalSupply;\r\n        mapping (address => uint256) public balanceOf;\r\n    \r\n        constructor (\r\n            uint256 initialSupply\r\n        ) public {\r\n            totalSupply = initialSupply * 10 ** uint256(decimals);  // Update total supply with the decimal amount\r\n            balanceOf[msg.sender] = totalSupply;                // Give the creator all initial tokens\r\n        }\r\n    }\r\n```\r\nthe creator receives all the tokens.\r\n\r\n\r\n## crowdsale\r\n```\r\n    pragma solidity 0.4.24;\r\n    \r\n    import './TestBurnableToken.sol';\r\n    import 'openzeppelin-solidity/contracts/crowdsale/emission/AllowanceCrowdsale.sol';\r\n    import 'openzeppelin-solidity/contracts/crowdsale/validation/TimedCrowdsale.sol';\r\n    \r\n    \r\n    contract TestBurnableCrowdsale is TimedCrowdsale, AllowanceCrowdsale {\r\n        constructor\r\n            (\r\n                uint256 _openingTime,\r\n                uint256 _closingTime,\r\n                uint256 _rate,\r\n                address _wallet,\r\n                StandardBurnableToken _token\r\n            )\r\n            public\r\n            Crowdsale(_rate, _wallet, _token)\r\n            TimedCrowdsale(_openingTime, _closingTime)\r\n            AllowanceCrowdsale(_wallet) {\r\n            }\r\n    }\r\n```\r\n\r\n## deployment\r\n```\r\n    const TestBurnableToken = artifacts.require(\"./TestBurnableToken.sol\");\r\n    const TestBurnableCrowdsale = artifacts.require(\"./TestBurnableCrowdsale.sol\");\r\n    \r\n    module.exports = function(deployer, network, accounts) {\r\n\r\n    const openingTime = web3.eth.getBlock('latest').timestamp + 30; // two secs in the future\r\n    const closingTime = openingTime + 60 *15 // 15min\r\n    const rate = new web3.BigNumber(1000); // only ints > 0, rate seems not to be inverse\r\n    const wallet = accounts[0];\r\n\r\n\r\n    console.log(\"Deploying openingTime: \", openingTime, \" closingTime \", closingTime, \" rate \", rate, \" wallet \", wallet);\r\n\r\n    return deployer\r\n        .then(() => {\r\n            return deployer.deploy(TestBurnableToken, 10000);\r\n        })\r\n        .then(() => {\r\n            return deployer.deploy(\r\n                TestBurnableCrowdsale,\r\n                openingTime,\r\n                closingTime,\r\n                rate,\r\n                wallet,\r\n                TestBurnableToken.address\r\n            );\r\n        });\r\n    };\r\n```\r\n\r\n## truffle console\r\n```\r\n    // The account that created the tokens\r\n    creator = web3.eth.accounts[0]\r\n    \r\n    // The account that will buy Test tokens.\r\n    purchaser = web3.eth.accounts[2]\r\n    \r\n    // The address of the Test token instance that was created when the crowdsaleInstance contract was deployed\r\n    // assign the result of TestBurnableCrowdsale.deployed() to the variable crowdsaleInstance\r\n    TestBurnableCrowdsale.deployed().then(inst => { crowdsaleInstance = inst })\r\n    \r\n    crowdsaleInstance.token().then(addr => { tokenAddress = addr } )\r\n    tokenAddress\r\n    \r\n    TestBurnableTokenInstance = TestBurnableToken.at(tokenAddress)\r\n    \r\n    //balances before\r\n    TestBurnableTokenInstance.balanceOf(creator).then(balance => web3.fromWei(balance.toString(10)))\r\n    //this shows 10000 because 10000 tokens have been created by account[0]\r\n\r\n    TestBurnableTokenInstance.balanceOf(purchaser).then(balance => web3.fromWei(balance.toString(10)))\r\n    //this shows 0, no tokens have been bought yet\r\n    \r\n    \r\n    //account 0 now approves tokens to be sold\r\n    TestBurnableTokenInstance.approve(crowdsaleInstance.address,web3.toWei(1000, \"ether\"))\r\n    crowdsaleInstance.remainingTokens().then(balance => web3.fromWei(balance.toString(10)))\r\n    //shows that 1000 tokens of 10000 have been approved for selling\r\n    \r\n    //buy and balances after buying\r\n    crowdsaleInstance.sendTransaction({ from: purchaser, value: web3.toWei(1, \"ether\")})\r\n    // Here I get an error: Error: VM Exception while processing transaction: revert // I also tried 0.1 and 10000 to make sure it has nothing to do with the rate\r\n```\r\n## Debug\r\n\r\nI used truffles debug function with a weird result:\r\n```\r\n    31:     returns (bool)\r\n    32:   {\r\n    33:     require(_value <= balances[_from]);\r\n            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ \r\n\r\n    debug(develop:0xefe253c5...)> v\r\n    \r\n       _from: '0x627306090abab3a6e1400e9345bc60c78a8bef57'\r\n         _to: '0xc5fdf4076b8f3a5357c5e395ab970b5b54098fef'\r\n      _value: 1000000000000000000\r\n            : true\r\n    \r\n    debug(develop:0xefe253c5...)> \r\n    \r\n    StandardToken.sol:\r\n    \r\n    35:     require(_to != address(0));\r\n    36: \r\n    37:     balances[_from] = balances[_from].sub(_value);\r\n                              ^^^^^^^^^^^^^^^             \r\n    \r\n    debug(develop:0xefe253c5...)> v\r\n    \r\n       _from: '0x0de0b6b3a7640000'\r\n         _to: '0x0de0b6b3a7640000'\r\n      _value: 816\r\n            : true\r\n```\r\nBasically the values of `_from`, `to`, `_value` change between the lines `33` and `37`.\r\n```\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n    require(_to != address(0));\r\n    \r\n    balances[_from] = balances[_from].sub(_value);\r\n```\r\nIn Standardtoken.sol `_value` is `uint256` => `1000000000000000000 < 2^256-1`which should be Ok. \r\n\r\n\r\n## 👍 Other Information\r\nTo be honest I'm not sure if it is a bug because I'm a Soldity beginner but my gutfeeling is that an overflow should never happen. I also created a post on `ethereum.stackexchange`:\r\nhttps://ethereum.stackexchange.com/posts/57835/edit\r\n",
  "closed_by": {
    "login": "360disrupt",
    "id": 7427903,
    "node_id": "MDQ6VXNlcjc0Mjc5MDM=",
    "avatar_url": "https://avatars.githubusercontent.com/u/7427903?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/360disrupt",
    "html_url": "https://github.com/360disrupt",
    "followers_url": "https://api.github.com/users/360disrupt/followers",
    "following_url": "https://api.github.com/users/360disrupt/following{/other_user}",
    "gists_url": "https://api.github.com/users/360disrupt/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/360disrupt/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/360disrupt/subscriptions",
    "organizations_url": "https://api.github.com/users/360disrupt/orgs",
    "repos_url": "https://api.github.com/users/360disrupt/repos",
    "events_url": "https://api.github.com/users/360disrupt/events{/privacy}",
    "received_events_url": "https://api.github.com/users/360disrupt/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1341/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1341/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/425156290",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1341#issuecomment-425156290",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1341",
    "id": 425156290,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyNTE1NjI5MA==",
    "user": {
      "login": "360disrupt",
      "id": 7427903,
      "node_id": "MDQ6VXNlcjc0Mjc5MDM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7427903?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/360disrupt",
      "html_url": "https://github.com/360disrupt",
      "followers_url": "https://api.github.com/users/360disrupt/followers",
      "following_url": "https://api.github.com/users/360disrupt/following{/other_user}",
      "gists_url": "https://api.github.com/users/360disrupt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/360disrupt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/360disrupt/subscriptions",
      "organizations_url": "https://api.github.com/users/360disrupt/orgs",
      "repos_url": "https://api.github.com/users/360disrupt/repos",
      "events_url": "https://api.github.com/users/360disrupt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/360disrupt/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-09-27T16:24:30Z",
    "updated_at": "2018-09-27T16:24:30Z",
    "author_association": "NONE",
    "body": "Problem is in TestBurnableToken not in OS-zeppelin\r\n`balanceOf `=> `balances ` this overwrites the function",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/425156290/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
