{
  "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1595",
  "repository_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts",
  "labels_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1595/labels{/name}",
  "comments_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1595/comments",
  "events_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1595/events",
  "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1595",
  "id": 397387925,
  "node_id": "MDU6SXNzdWUzOTczODc5MjU=",
  "number": 1595,
  "title": "AllowanceCrowsale allows investors to buy more tokens than allowed",
  "user": {
    "login": "nebojsakonsta",
    "id": 43207316,
    "node_id": "MDQ6VXNlcjQzMjA3MzE2",
    "avatar_url": "https://avatars.githubusercontent.com/u/43207316?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nebojsakonsta",
    "html_url": "https://github.com/nebojsakonsta",
    "followers_url": "https://api.github.com/users/nebojsakonsta/followers",
    "following_url": "https://api.github.com/users/nebojsakonsta/following{/other_user}",
    "gists_url": "https://api.github.com/users/nebojsakonsta/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nebojsakonsta/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nebojsakonsta/subscriptions",
    "organizations_url": "https://api.github.com/users/nebojsakonsta/orgs",
    "repos_url": "https://api.github.com/users/nebojsakonsta/repos",
    "events_url": "https://api.github.com/users/nebojsakonsta/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nebojsakonsta/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 417782817,
      "node_id": "MDU6TGFiZWw0MTc3ODI4MTc=",
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/labels/bug",
      "name": "bug",
      "color": "b60205",
      "default": true,
      "description": null
    },
    {
      "id": 1000207718,
      "node_id": "MDU6TGFiZWwxMDAwMjA3NzE4",
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/labels/contracts",
      "name": "contracts",
      "color": "1d76db",
      "default": false,
      "description": "Smart contract code."
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/milestones/7",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/milestone/7",
    "labels_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/milestones/7/labels",
    "id": 3978237,
    "node_id": "MDk6TWlsZXN0b25lMzk3ODIzNw==",
    "number": 7,
    "title": "v2.3",
    "description": "",
    "creator": {
      "login": "nventuro",
      "id": 2530770,
      "node_id": "MDQ6VXNlcjI1MzA3NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2530770?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nventuro",
      "html_url": "https://github.com/nventuro",
      "followers_url": "https://api.github.com/users/nventuro/followers",
      "following_url": "https://api.github.com/users/nventuro/following{/other_user}",
      "gists_url": "https://api.github.com/users/nventuro/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nventuro/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nventuro/subscriptions",
      "organizations_url": "https://api.github.com/users/nventuro/orgs",
      "repos_url": "https://api.github.com/users/nventuro/repos",
      "events_url": "https://api.github.com/users/nventuro/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nventuro/received_events",
      "type": "User",
      "site_admin": false
    },
    "open_issues": 0,
    "closed_issues": 21,
    "state": "closed",
    "created_at": "2019-01-16T15:39:54Z",
    "updated_at": "2019-10-04T17:45:57Z",
    "due_on": "2019-04-23T07:00:00Z",
    "closed_at": "2019-10-04T17:45:57Z"
  },
  "comments": 1,
  "created_at": "2019-01-09T14:10:31Z",
  "updated_at": "2019-04-23T22:06:11Z",
  "closed_at": "2019-04-23T22:06:11Z",
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "<!-- Briefly describe the issue you're experiencing. Tell us what you were trying to do and what happened instead. -->\r\nSetup: we are using a contract that extends AllowanceCrowdsale and PostDeliveryCrowdsale contracts with already minted tokens to create a crowdsale. IcoMaker approves for half of minted tokens to be sold in a crowdsale. \r\n\r\nExpected: when investor calls buyTokens function to buy more than half of tokens (more than allowance), buyTokens should revert. \r\n\r\nActual: when investor calls buyTokens function to buy more than half of tokens (more than allowance), buyTokens executes. When investor tries to withdraw tokens by calling withdrawTokens function, a transaction is reverted. \r\n\r\n<!-- Remember, this is not a place to ask for help debugging code. For that, we welcome you in the OpenZeppelin Slack channel: https://slack.openzeppelin.org/. -->\r\n\r\n**üíª Environment**\r\n\r\n<!-- Tell us what version of OpenZeppelin you're using, and how you're using it: Truffle, Remix, etc. -->\r\n\"openzeppelin-solidity\": \"2.0.0\",\r\n\"truffle\": \"^4.1.14\",\r\nrunning tests, see code bellow\r\n\r\n**üìù Details**\r\n\r\n<!-- Describe the problem you have been experiencing in more detail. Include as much information as you think is relevant. Keep in mind that transactions can fail for many reasons; context is key here. -->\r\n\r\n**üî¢ Code to reproduce bug**\r\n\r\n<!-- We will be able to better help if you provide a minimal example that triggers the bug. -->\r\n```\r\n  it('CARPDCrowdsale (Allowance) - buyTokens() when allowance exceeded', (done) => {\r\n    let crowdsaleArgs = [startTime, endTime, 1000, icoMaker, null, web3.utils.toWei('1', 'ether'), web3.utils.toWei('0.1', 'ether'), icoMaker];\r\n    mintApi.deployCARPDCrowdsale(icoMaker, tokenArgs, crowdsaleArgs, tokenServiceFeeETH, crowdsaleServiceFeeETH).then(receipts => {\r\n\r\n      // approve half the tokens to crowdsale contract\r\n      let tokenInstance = new web3.eth.Contract(TokenMintERC20TokenJSON.abi, receipts.tokenReceipt.contractAddress);\r\n      tokenInstance.methods.approve(receipts.crowdsaleReceipt.contractAddress, new BigNumber((tokenArgs[3] / 2) * 10 ** tokenArgs[2]).toString()).send({ from: icoMaker }).then(receipt => {\r\n        expect(receipt.status).to.be.eq(true);\r\n\r\n        // wait 3 seconds before first investment\r\n        let delay = ms => new Promise((resolve) => setTimeout(resolve, ms));\r\n        delay(3000).then(() => {\r\n\r\n          // case1: buy more than half, should reject\r\n          //let crowdsaleInstance = new web3.eth.Contract(CARPDCrowdsaleJSON.abi, receipts.crowdsaleReceipt.contractAddress);\r\n          //crowdsaleInstance.methods.buyTokens(investor2).send({ from: investor2, gas: 4712388, value: web3.utils.toWei('0.6', 'ether') }).then(() => {\r\n          //  done(new Error('Allowance exceeded, but not reverted.'));\r\n          //}).catch(e => {\r\n          //  expect(true).to.be.eq(true);\r\n          //  done();\r\n          //});\r\n\r\n          let crowdsaleInstance = new web3.eth.Contract(CARPDCrowdsaleJSON.abi, receipts.crowdsaleReceipt.contractAddress);\r\n          crowdsaleInstance.methods.buyTokens(investor1).send({ from: investor1, gas: 4712388, value: web3.utils.toWei('0.501', 'ether') }).then(() => {\r\n\r\n            // wait 6 seconds so that crowdsale is closed (timed crowdsale)\r\n            let delay = ms => new Promise((resolve) => setTimeout(resolve, ms));\r\n            delay(6000).then(() => {\r\n              // finalize sale after goal is reached, anyone can call\r\n              crowdsaleInstance.methods.finalize().send({ from: investor1 }).then(receipt => {\r\n                expect(receipt.status).to.be.eq(true);\r\n\r\n                // case2: check balance, bigger than allowance\r\n                //crowdsaleInstance.methods.balanceOf(investor1).call().then(balanceOf => {\r\n                //  // console.log(balanceOf);\r\n                //  expect(balanceOf).to.be.lessThan(new BigNumber((tokenArgs[3] / 2) * 10 ** tokenArgs[2]).toString());\r\n                //  done();\r\n                //}).catch(e => {\r\n                //  done(new Error(e));\r\n                //});\r\n\r\n                // case 3: withdraw reverts, leaving investors without tokens\r\n                crowdsaleInstance.methods.withdrawTokens(investor1).send({ from: investor1 }).then(receipt => {\r\n                  expect(receipt.status).to.be.eq(true);\r\n\r\n                  // check token balance after investment, should be 200 after finalization and withdrawal\r\n                  mintApi.getTokenBalance(tokenInstance, investor1).then(actualTokenBalance => {\r\n                    expect(parseInt(actualTokenBalance)).to.be.eq(501);\r\n                    done();\r\n                  });\r\n                }).catch(e => {\r\n                  done(new Error(e));\r\n                });\r\n              }).catch(e => {\r\n                done(new Error(e));\r\n              });\r\n            });\r\n          }).catch(e => {\r\n            expect(true).to.be.eq(true);\r\n            done();\r\n          });\r\n        });\r\n      }).catch((e) => {\r\n        done(new Error(e));\r\n      });\r\n    }).catch(e => {\r\n      done(new Error(e));\r\n    });\r\n  });\r\n```",
  "closed_by": {
    "login": "nventuro",
    "id": 2530770,
    "node_id": "MDQ6VXNlcjI1MzA3NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/2530770?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nventuro",
    "html_url": "https://github.com/nventuro",
    "followers_url": "https://api.github.com/users/nventuro/followers",
    "following_url": "https://api.github.com/users/nventuro/following{/other_user}",
    "gists_url": "https://api.github.com/users/nventuro/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nventuro/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nventuro/subscriptions",
    "organizations_url": "https://api.github.com/users/nventuro/orgs",
    "repos_url": "https://api.github.com/users/nventuro/repos",
    "events_url": "https://api.github.com/users/nventuro/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nventuro/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1595/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1595/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/452736094",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1595#issuecomment-452736094",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1595",
    "id": 452736094,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1MjczNjA5NA==",
    "user": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-09T15:26:43Z",
    "updated_at": "2019-01-09T15:26:43Z",
    "author_association": "MEMBER",
    "body": "Thanks for reporting @KonstaMerkle. Great find.\r\n\r\nI think the best way to fix this is to make `PostDeliveryCrowdsale._processPurchase` trigger a token delivery to an escrow, and `withdrawTokens` to release the tokens from that escrow to the beneficiary. This may be a good excuse to implement ERC20 escrows.\r\n\r\nWe should probably publish patch releases for 2.0 and 2.1.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/452736094/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
