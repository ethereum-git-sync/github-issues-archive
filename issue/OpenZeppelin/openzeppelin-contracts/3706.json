{
  "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3706",
  "repository_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts",
  "labels_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3706/labels{/name}",
  "comments_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3706/comments",
  "events_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3706/events",
  "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3706",
  "id": 1376159586,
  "node_id": "I_kwDOA9tCBs5SBodi",
  "number": 3706,
  "title": "Implement or recommend mitigations for ERC4626 inflation attacks",
  "user": {
    "login": "frangio",
    "id": 481465,
    "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
    "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/frangio",
    "html_url": "https://github.com/frangio",
    "followers_url": "https://api.github.com/users/frangio/followers",
    "following_url": "https://api.github.com/users/frangio/following{/other_user}",
    "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
    "organizations_url": "https://api.github.com/users/frangio/orgs",
    "repos_url": "https://api.github.com/users/frangio/repos",
    "events_url": "https://api.github.com/users/frangio/events{/privacy}",
    "received_events_url": "https://api.github.com/users/frangio/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 4976342503,
      "node_id": "LA_kwDOA9tCBs8AAAABKJz15w",
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/labels/area:%20erc4626",
      "name": "area: erc4626",
      "color": "E7DA84",
      "default": false,
      "description": ""
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/milestones/14",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/milestone/14",
    "labels_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/milestones/14/labels",
    "id": 8383880,
    "node_id": "MI_kwDOA9tCBs4Af-2I",
    "number": 14,
    "title": "4.9",
    "description": "",
    "creator": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "open_issues": 0,
    "closed_issues": 24,
    "state": "closed",
    "created_at": "2022-09-05T16:36:05Z",
    "updated_at": "2023-05-16T01:45:32Z",
    "due_on": null,
    "closed_at": "2023-05-16T01:45:32Z"
  },
  "comments": 27,
  "created_at": "2022-09-16T16:20:02Z",
  "updated_at": "2023-02-17T09:08:34Z",
  "closed_at": "2023-02-17T09:08:33Z",
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "Empty ERC4626 vaults can be manipulated to inflate the price of a share and cause depositors to lose their deposits due to rounding in favor of the vault. In particular, this can be done as a frontrunning attack if the vault is used without specifying a minimum of shares to be received using an [ERC4626 router](https://github.com/fei-protocol/ERC4626#erc4626router-and-base).\r\n\r\nWe caution users against slippage in the documentation but we could offer concrete mitigations either in code or as recommendations. \r\nMorpho Labs [mentions](https://twitter.com/MerlinEgalite/status/1570765265272713216) they have made some changes on top of our implementation as a mitigation, we should look into that (where is the code?). See also https://github.com/transmissions11/solmate/issues/178.",
  "closed_by": {
    "login": "Amxx",
    "id": 2432299,
    "node_id": "MDQ6VXNlcjI0MzIyOTk=",
    "avatar_url": "https://avatars.githubusercontent.com/u/2432299?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/Amxx",
    "html_url": "https://github.com/Amxx",
    "followers_url": "https://api.github.com/users/Amxx/followers",
    "following_url": "https://api.github.com/users/Amxx/following{/other_user}",
    "gists_url": "https://api.github.com/users/Amxx/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/Amxx/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/Amxx/subscriptions",
    "organizations_url": "https://api.github.com/users/Amxx/orgs",
    "repos_url": "https://api.github.com/users/Amxx/repos",
    "events_url": "https://api.github.com/users/Amxx/events{/privacy}",
    "received_events_url": "https://api.github.com/users/Amxx/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3706/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3706/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1251616114",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3706#issuecomment-1251616114",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3706",
    "id": 1251616114,
    "node_id": "IC_kwDOA9tCBs5KmiVy",
    "user": {
      "login": "zoey-t",
      "id": 101599447,
      "node_id": "U_kgDOBg5I1w",
      "avatar_url": "https://avatars.githubusercontent.com/u/101599447?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/zoey-t",
      "html_url": "https://github.com/zoey-t",
      "followers_url": "https://api.github.com/users/zoey-t/followers",
      "following_url": "https://api.github.com/users/zoey-t/following{/other_user}",
      "gists_url": "https://api.github.com/users/zoey-t/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/zoey-t/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/zoey-t/subscriptions",
      "organizations_url": "https://api.github.com/users/zoey-t/orgs",
      "repos_url": "https://api.github.com/users/zoey-t/repos",
      "events_url": "https://api.github.com/users/zoey-t/events{/privacy}",
      "received_events_url": "https://api.github.com/users/zoey-t/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-09-19T22:06:36Z",
    "updated_at": "2022-09-19T22:06:36Z",
    "author_association": "NONE",
    "body": "the morpho erc4626 vault contract should be in this repo. https://github.com/morpho-dao/morpho-tokenized-vaults",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1251616114/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1297199749",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3706#issuecomment-1297199749",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3706",
    "id": 1297199749,
    "node_id": "IC_kwDOA9tCBs5NUbKF",
    "user": {
      "login": "Amxx",
      "id": 2432299,
      "node_id": "MDQ6VXNlcjI0MzIyOTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2432299?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Amxx",
      "html_url": "https://github.com/Amxx",
      "followers_url": "https://api.github.com/users/Amxx/followers",
      "following_url": "https://api.github.com/users/Amxx/following{/other_user}",
      "gists_url": "https://api.github.com/users/Amxx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Amxx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Amxx/subscriptions",
      "organizations_url": "https://api.github.com/users/Amxx/orgs",
      "repos_url": "https://api.github.com/users/Amxx/repos",
      "events_url": "https://api.github.com/users/Amxx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Amxx/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-10-31T14:46:25Z",
    "updated_at": "2022-10-31T14:47:59Z",
    "author_association": "COLLABORATOR",
    "body": "As the name suggest, the inflation attack comes from the amount of underlying assets changing without the amount of shares reflecting that. This inflation makes all the share more valuable, which means that someone buying shares will get less than they would have expected.\r\n\r\nThe bigger the inflation, the bigger the effect of the attack, which is why this is particularly sensitive when then vault is its early stages, with low liquidity.\r\n\r\n---\r\n\r\nA few mitigations strategies have been mentioned:\r\n\r\n1. Using an ERC4626 router\r\n2. Keeping track of the total assets internally\r\n3. Creating \"dead shares\"\r\n\r\n---\r\n\r\nThe first solution is the most simple one, but also possibly the less satisfying. It doesn't actually address the issue as much as it goes around it.\r\n\r\n**Advantage:**\r\n- Already available\r\n- Easy to reason by\r\n- Nothing to change to the vault's code\r\n\r\n**Drawback:**\r\n- Uses more gas (router needs to take custody before performing vault operations)\r\n- Additional trust assumption (the router is a critical element that will be allowed to spend user token)\r\n- User are still subject to slippage (they can limit it, but there is still room for \"MEV\")\r\n\r\n---\r\n\r\nKeeping track of the assets held by the vault internally remove the effect of direct transfers. Tokens transferred directly are not accounted for (unlike tokens that are explicitly transferred during a `mint`/`deposit` operation), which completely removes the risk of inflation attack. \r\n\r\nThis however causes other issues. Transferring tokens is still possible, and if they are not accounted for automatically, they might not be recoverable. To recover them would likely require some form of access control, which might not be desirable when building trust minimizing applications.\r\n\r\nIn addition to direct transfers, this also apply to re-basing tokens!\r\n\r\n**Advantage:**\r\n- Completely removes the inflation, removing all slippage\r\n- Easy to reason by\r\n- Self contained to the vault (no dependency on third party contract)\r\n- Same workflow for EOAs and smart contracts\r\n- This solution can provided as an optional module, that devs would add on top of the base implementation.\r\n\r\n**Drawback:**\r\n- Not generic (does not work with re-basing tokens)\r\n- Risk of token lock (burn) OR needs a trusted admin\r\n- Still some gas cost overhead (but less than the previous option)\r\n\r\n---\r\n\r\nThe last option is inspired by Uniswap V2, which created some \"dead LP shares\" when the first liquidity is deposited. That basically means that the first liquidity provider is giving away a fraction of its shares for monetary stability.\r\n\r\nA similar approach could be implemented in ERC4626 vaults, by minting \"dead shares\" on the first `deposit`/`mint`. For any assets that are then transferred to the vault, a fraction would be associated to these dead shares, and not redeemable by anyone.\r\n\r\nIn addition to not solving the actual problem (it is still possible to do inflation attacks, the profit is just reduced) this approach disincentivize any early liquidity providing that is not part of an inflation attack. It asks a lot of questions with the amount of \"dead shares\" to mint that possibly don't have an absolute good answer, and must be answered on a case-by-case basis.\r\n\r\n**Advantage:**\r\n- Very limited gas overhead.\r\n- This solution can provided as an optional module, that devs would add on top of the base implementation.\r\n\r\n**Drawback:**\r\n- Doesn't truly resolve the issue\r\n- Disincentivize legitimate early liquidity providers\r\n- Locks a fraction of the assets in the vault (that can never be withdrawn)\r\n\r\n--- \r\n\r\nAny other solution I should study?",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1297199749/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1297230505",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3706#issuecomment-1297230505",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3706",
    "id": 1297230505,
    "node_id": "IC_kwDOA9tCBs5NUiqp",
    "user": {
      "login": "Amxx",
      "id": 2432299,
      "node_id": "MDQ6VXNlcjI0MzIyOTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2432299?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Amxx",
      "html_url": "https://github.com/Amxx",
      "followers_url": "https://api.github.com/users/Amxx/followers",
      "following_url": "https://api.github.com/users/Amxx/following{/other_user}",
      "gists_url": "https://api.github.com/users/Amxx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Amxx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Amxx/subscriptions",
      "organizations_url": "https://api.github.com/users/Amxx/orgs",
      "repos_url": "https://api.github.com/users/Amxx/repos",
      "events_url": "https://api.github.com/users/Amxx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Amxx/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-10-31T15:06:27Z",
    "updated_at": "2022-10-31T15:37:59Z",
    "author_association": "COLLABORATOR",
    "body": "## How they fixed it\r\n\r\n### [**Morpho-dao**](https://github.com/morpho-dao/morpho-tokenized-vaults/blob/main/src/ERC4626UpgradeableSafe.sol#L34)\r\n\r\nAt initialization (eq. construction) deposit some assets into the vault. The corresponding shares are minted to the vault itself, which acts as a dead address.\r\n\r\nThis is similar to the 3rd option above, but with the loss taken by the project. The more is deposited initially, the more difficult it is to perform an inflation attack ... but funds needs to be available for that (they are lost).\r\n\r\nNote:\r\n- Implementation is very simple.\r\n- It is necessary to precompute the address of the vault, and approve it in advance (before deploying it)\r\n\r\n### [**YieldBox**](https://github.com/boringcrypto/YieldBox/blob/107eb8cb9d0bc686181b842d8c74659913603937/contracts/YieldBoxRebase.sol)\r\n\r\nWhen computing the exchange rate, add a \"virtual\" amount of shares and assets to the vault. That is equivalent to the behavior of option 3, but without the need to actually burn any tokens to mint the \"dead shares\".\r\n\r\nThis fixes the second drawback, but a fraction of any tokens that the vault receives from direct transfer, or re-basing, will be lost.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1297230505/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1297231980",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3706#issuecomment-1297231980",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3706",
    "id": 1297231980,
    "node_id": "IC_kwDOA9tCBs5NUjBs",
    "user": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-10-31T15:07:31Z",
    "updated_at": "2022-10-31T15:07:31Z",
    "author_association": "MEMBER",
    "body": "There is also another option, though it's arguable a \"non-solution\": leaving `totalAssets` unimplemented and have users implement it to their needs. I've argued before that most vaults will need a custom `totalAssets` function anyway (we should evaluate existing concrete ERC4626 vaults to understand if this is true).\r\n\r\nOf the three options presented, I favor tracking the asset balance internally.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1297231980/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1297233067",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3706#issuecomment-1297233067",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3706",
    "id": 1297233067,
    "node_id": "IC_kwDOA9tCBs5NUjSr",
    "user": {
      "login": "Amxx",
      "id": 2432299,
      "node_id": "MDQ6VXNlcjI0MzIyOTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2432299?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Amxx",
      "html_url": "https://github.com/Amxx",
      "followers_url": "https://api.github.com/users/Amxx/followers",
      "following_url": "https://api.github.com/users/Amxx/following{/other_user}",
      "gists_url": "https://api.github.com/users/Amxx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Amxx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Amxx/subscriptions",
      "organizations_url": "https://api.github.com/users/Amxx/orgs",
      "repos_url": "https://api.github.com/users/Amxx/repos",
      "events_url": "https://api.github.com/users/Amxx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Amxx/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-10-31T15:08:19Z",
    "updated_at": "2022-10-31T15:11:23Z",
    "author_association": "COLLABORATOR",
    "body": "> Of the three options presented, I favor tracking the asset balance internally.\r\n\r\nBy default, or as an option? \r\n\r\nI would go for the second, because the internal tracking has a cost, and devs that don't need it should not pay for it. You can override the `totalAsset` function, but you'd still pay for the sstore in deposit/mint/withdraw/redeem",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1297233067/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1297248536",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3706#issuecomment-1297248536",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3706",
    "id": 1297248536,
    "node_id": "IC_kwDOA9tCBs5NUnEY",
    "user": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-10-31T15:18:32Z",
    "updated_at": "2022-10-31T15:18:32Z",
    "author_association": "MEMBER",
    "body": "The problem is that the default should be risk-minimized... If we want to make it optional, the default should be abstract.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1297248536/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1297279581",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3706#issuecomment-1297279581",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3706",
    "id": 1297279581,
    "node_id": "IC_kwDOA9tCBs5NUupd",
    "user": {
      "login": "Amxx",
      "id": 2432299,
      "node_id": "MDQ6VXNlcjI0MzIyOTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2432299?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Amxx",
      "html_url": "https://github.com/Amxx",
      "followers_url": "https://api.github.com/users/Amxx/followers",
      "following_url": "https://api.github.com/users/Amxx/following{/other_user}",
      "gists_url": "https://api.github.com/users/Amxx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Amxx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Amxx/subscriptions",
      "organizations_url": "https://api.github.com/users/Amxx/orgs",
      "repos_url": "https://api.github.com/users/Amxx/repos",
      "events_url": "https://api.github.com/users/Amxx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Amxx/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-10-31T15:39:54Z",
    "updated_at": "2022-10-31T15:39:54Z",
    "author_association": "COLLABORATOR",
    "body": "> The problem is that the default should be risk-minimized\r\n\r\nI don't fully disagree with that. IMO the default should be feature-minimal, with security issues clearly identified, and option to address the issues through additional feature. That is what we did with Ownable/Ownable2Step.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1297279581/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1297500630",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3706#issuecomment-1297500630",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3706",
    "id": 1297500630,
    "node_id": "IC_kwDOA9tCBs5NVknW",
    "user": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-10-31T18:29:45Z",
    "updated_at": "2022-10-31T18:30:05Z",
    "author_association": "MEMBER",
    "body": "Does that mean you would agree with leaving `totalAssets` as an abstract function in the default? In that case do you see it as necessary to _also_ provide an option with internal balance tracking?",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1297500630/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1297703013",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3706#issuecomment-1297703013",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3706",
    "id": 1297703013,
    "node_id": "IC_kwDOA9tCBs5NWWBl",
    "user": {
      "login": "Amxx",
      "id": 2432299,
      "node_id": "MDQ6VXNlcjI0MzIyOTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2432299?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Amxx",
      "html_url": "https://github.com/Amxx",
      "followers_url": "https://api.github.com/users/Amxx/followers",
      "following_url": "https://api.github.com/users/Amxx/following{/other_user}",
      "gists_url": "https://api.github.com/users/Amxx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Amxx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Amxx/subscriptions",
      "organizations_url": "https://api.github.com/users/Amxx/orgs",
      "repos_url": "https://api.github.com/users/Amxx/repos",
      "events_url": "https://api.github.com/users/Amxx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Amxx/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-10-31T21:23:34Z",
    "updated_at": "2022-10-31T21:23:34Z",
    "author_association": "COLLABORATOR",
    "body": "I'm not sure about the abstract version. It feels like we purposefully remove one line of code just to force users to read the doc ...",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1297703013/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1302719512",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3706#issuecomment-1302719512",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3706",
    "id": 1302719512,
    "node_id": "IC_kwDOA9tCBs5NpewY",
    "user": {
      "login": "daejunpark",
      "id": 5491770,
      "node_id": "MDQ6VXNlcjU0OTE3NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5491770?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/daejunpark",
      "html_url": "https://github.com/daejunpark",
      "followers_url": "https://api.github.com/users/daejunpark/followers",
      "following_url": "https://api.github.com/users/daejunpark/following{/other_user}",
      "gists_url": "https://api.github.com/users/daejunpark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/daejunpark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/daejunpark/subscriptions",
      "organizations_url": "https://api.github.com/users/daejunpark/orgs",
      "repos_url": "https://api.github.com/users/daejunpark/repos",
      "events_url": "https://api.github.com/users/daejunpark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/daejunpark/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-11-03T21:55:28Z",
    "updated_at": "2022-11-03T21:55:28Z",
    "author_association": "CONTRIBUTOR",
    "body": "@Amxx the second option alone (keeping track of the assets) may not be effective to prevent various ways of inflating the price. Especially, adversaries could still donate to the place where the vault assets are deployed and yields are accumulated, e.g., https://www.rileyholterhus.com/writing/bunni\r\n\r\nIMO, the price inflation is hard to completely prevent, since it is not easy to distinguish genuine vs fake yield.\r\n\r\nSo, I think a separate mitigation to make it hard to profit from price inflation would be still needed, e.g., requiring a minimum initial deposit, or extra slippage protection.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1302719512/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1302730593",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3706#issuecomment-1302730593",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3706",
    "id": 1302730593,
    "node_id": "IC_kwDOA9tCBs5Nphdh",
    "user": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-11-03T22:09:05Z",
    "updated_at": "2022-11-03T22:09:05Z",
    "author_association": "MEMBER",
    "body": "Is the minimum initial deposit the standard accepted way to mitigate this? It seems like a really suboptimal approach. (It's literally burning money? I guess you can call it a \"security budget\". :grimacing:)\r\n\r\nWe can adopt Morpho's solution which is really clean and can be easily disabled by users who don't want to make an initial deposit for whatever reason (e.g., testing purposes).",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1302730593/reactions",
      "total_count": 3,
      "+1": 2,
      "-1": 0,
      "laugh": 1,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1303544431",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3706#issuecomment-1303544431",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3706",
    "id": 1303544431,
    "node_id": "IC_kwDOA9tCBs5NsoJv",
    "user": {
      "login": "Amxx",
      "id": 2432299,
      "node_id": "MDQ6VXNlcjI0MzIyOTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2432299?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Amxx",
      "html_url": "https://github.com/Amxx",
      "followers_url": "https://api.github.com/users/Amxx/followers",
      "following_url": "https://api.github.com/users/Amxx/following{/other_user}",
      "gists_url": "https://api.github.com/users/Amxx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Amxx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Amxx/subscriptions",
      "organizations_url": "https://api.github.com/users/Amxx/orgs",
      "repos_url": "https://api.github.com/users/Amxx/repos",
      "events_url": "https://api.github.com/users/Amxx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Amxx/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-11-04T13:31:30Z",
    "updated_at": "2022-11-04T13:33:16Z",
    "author_association": "COLLABORATOR",
    "body": "YieldBox's option is also really nice:\r\n\r\nIt achieve the same result without the need to actually burn/lock any real underlying asset. It also greatly simplify the conversion function fallbacks.\r\n\r\n```\r\nfunction _convertToShares(uint256 assets, Math.Rounding rounding) internal view virtual returns (uint256 shares) {\r\n    return assets.mulDiv(\r\n        supply, \r\n        totalSupply() + _supplyOffset(),\r\n        totalAssets() + _assetsOffset(),\r\n        rounding\r\n    );\r\n}\r\n\r\nfunction _convertToAssets(uint256 shares, Math.Rounding rounding) internal view virtual returns (uint256 assets) {\r\n    return assets.mulDiv(\r\n        shares, \r\n        totalAssets() + _assetsOffset(), \r\n        totalSupply() + _supplyOffset(),\r\n        rounding\r\n    );\r\n}\r\n\r\nfunction _supplyOffset() internal virtual returns (uint256) {\r\n    return 1e18;\r\n}\r\n\r\nfunction _assetsOffset() internal virtual returns (uint256) {\r\n    return 1e18;\r\n} \r\n```\r\n\r\nYou could override the offset, or use an immutable variable set at construction.\r\n\r\n---\r\n\r\nThis removes the need for `_initialConvertToShares` and `_initialConvertToAssets`.\r\nThe downside is that the offset \"captures\" a part of the price change (it acts as a \"buffer\"). So this is not suitable for all usages.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1303544431/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1303878606",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3706#issuecomment-1303878606",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3706",
    "id": 1303878606,
    "node_id": "IC_kwDOA9tCBs5Nt5vO",
    "user": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-11-04T16:55:43Z",
    "updated_at": "2022-11-04T16:55:43Z",
    "author_association": "MEMBER",
    "body": "Can you give a concrete example with numbers of how the virtual offsets would eat part of the profits from a rebasing token? How much would be lost? My guess is the fraction lost would be \"assetsOffset / (totalAssets + assetsOffset)\"?",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1303878606/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1304271471",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3706#issuecomment-1304271471",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3706",
    "id": 1304271471,
    "node_id": "IC_kwDOA9tCBs5NvZpv",
    "user": {
      "login": "Amxx",
      "id": 2432299,
      "node_id": "MDQ6VXNlcjI0MzIyOTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2432299?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Amxx",
      "html_url": "https://github.com/Amxx",
      "followers_url": "https://api.github.com/users/Amxx/followers",
      "following_url": "https://api.github.com/users/Amxx/following{/other_user}",
      "gists_url": "https://api.github.com/users/Amxx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Amxx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Amxx/subscriptions",
      "organizations_url": "https://api.github.com/users/Amxx/orgs",
      "repos_url": "https://api.github.com/users/Amxx/repos",
      "events_url": "https://api.github.com/users/Amxx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Amxx/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-11-04T21:22:00Z",
    "updated_at": "2022-11-04T21:22:00Z",
    "author_association": "COLLABORATOR",
    "body": "> My guess is the fraction lost would be \"assetsOffset / (totalAssets + assetsOffset)\"?\r\n\r\nYes,\r\n\r\nWhich is the same as what would be lost with the current implementation if you deposited \"assetsOffset\" in the constructor (and locked the corresponding shares). Its the same security, without the \"cost\".",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1304271471/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1304420140",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3706#issuecomment-1304420140",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3706",
    "id": 1304420140,
    "node_id": "IC_kwDOA9tCBs5Nv98s",
    "user": {
      "login": "daejunpark",
      "id": 5491770,
      "node_id": "MDQ6VXNlcjU0OTE3NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5491770?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/daejunpark",
      "html_url": "https://github.com/daejunpark",
      "followers_url": "https://api.github.com/users/daejunpark/followers",
      "following_url": "https://api.github.com/users/daejunpark/following{/other_user}",
      "gists_url": "https://api.github.com/users/daejunpark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/daejunpark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/daejunpark/subscriptions",
      "organizations_url": "https://api.github.com/users/daejunpark/orgs",
      "repos_url": "https://api.github.com/users/daejunpark/repos",
      "events_url": "https://api.github.com/users/daejunpark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/daejunpark/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-11-05T06:17:36Z",
    "updated_at": "2022-11-05T06:17:36Z",
    "author_association": "CONTRIBUTOR",
    "body": "I like YieldBox's approach. As @Amxx said, it is essentially a virtual initial deposit that is locked forever (as long as the offset is immutable). So it can effectively mitigate both this issue and #3800 at no cost (zero \"security budget\")!\r\n\r\nHowever, in its current form, I don't think it properly handles the _negative_ interest case. Suppose that a vault deploys its assets to under-collateralized lending protocols (for better APY) and later some of their loans become default, resulting in a loss of principal, i.e., totalAssets < totalSupply. Now, suppose that all the users attempt to withdraw all their (remaining) assets. Then, the last few unlucky users will never be able to withdraw, and their shares will be permanently locked.\r\n\r\nFor example, after the loss of principal, suppose that totalAssets = 1e18, totalSupply = 3e18, and assetOffset = supplyOffset = 1e18, where Alice, Bob, and Charlie's share is equally 1e18 respectively. Suppose Alice and Bob redeem all their shares, then they will get 5e17 respectively. Later, Charlie attempts to redeem his shares, but it will revert because the vault's real balance is zero, and asset transfer will fail (even if convertToAsset(1e18) = 5e17 = 1e18 * (0 + 1e18) / (1e18 + 1e18)).\r\n\r\nSimply put, the \"virtual initial depositor\" can only gain but not lose, so some real users (i.e., the last remaining users) will lose more than they should, if not all, in case of negative interest.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1304420140/reactions",
      "total_count": 3,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1304557874",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3706#issuecomment-1304557874",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3706",
    "id": 1304557874,
    "node_id": "IC_kwDOA9tCBs5Nwfky",
    "user": {
      "login": "Amxx",
      "id": 2432299,
      "node_id": "MDQ6VXNlcjI0MzIyOTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2432299?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Amxx",
      "html_url": "https://github.com/Amxx",
      "followers_url": "https://api.github.com/users/Amxx/followers",
      "following_url": "https://api.github.com/users/Amxx/following{/other_user}",
      "gists_url": "https://api.github.com/users/Amxx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Amxx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Amxx/subscriptions",
      "organizations_url": "https://api.github.com/users/Amxx/orgs",
      "repos_url": "https://api.github.com/users/Amxx/repos",
      "events_url": "https://api.github.com/users/Amxx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Amxx/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-11-05T14:33:13Z",
    "updated_at": "2022-11-05T14:33:13Z",
    "author_association": "COLLABORATOR",
    "body": "Interesting.\nThat is definitely not a generic solution then...",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1304557874/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1307855134",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3706#issuecomment-1307855134",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3706",
    "id": 1307855134,
    "node_id": "IC_kwDOA9tCBs5N9Eke",
    "user": {
      "login": "matthewlilley",
      "id": 6063350,
      "node_id": "MDQ6VXNlcjYwNjMzNTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6063350?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/matthewlilley",
      "html_url": "https://github.com/matthewlilley",
      "followers_url": "https://api.github.com/users/matthewlilley/followers",
      "following_url": "https://api.github.com/users/matthewlilley/following{/other_user}",
      "gists_url": "https://api.github.com/users/matthewlilley/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/matthewlilley/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/matthewlilley/subscriptions",
      "organizations_url": "https://api.github.com/users/matthewlilley/orgs",
      "repos_url": "https://api.github.com/users/matthewlilley/repos",
      "events_url": "https://api.github.com/users/matthewlilley/events{/privacy}",
      "received_events_url": "https://api.github.com/users/matthewlilley/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-11-08T21:32:19Z",
    "updated_at": "2022-11-15T07:51:33Z",
    "author_association": "NONE",
    "body": "Interestingly relevent thread for us! \r\n\r\nBentoBox was pre ERC-4626, but had a somewhat similar protection to the Morpho-dao solution. \r\n\r\nYieldbox solution was an attempt to improve on that, initial thoughts were it was a step in the right direction, but we hadn't considered all cases.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1307855134/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1309033363",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3706#issuecomment-1309033363",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3706",
    "id": 1309033363,
    "node_id": "IC_kwDOA9tCBs5OBkOT",
    "user": {
      "login": "Okavango",
      "id": 4114167,
      "node_id": "MDQ6VXNlcjQxMTQxNjc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4114167?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Okavango",
      "html_url": "https://github.com/Okavango",
      "followers_url": "https://api.github.com/users/Okavango/followers",
      "following_url": "https://api.github.com/users/Okavango/following{/other_user}",
      "gists_url": "https://api.github.com/users/Okavango/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Okavango/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Okavango/subscriptions",
      "organizations_url": "https://api.github.com/users/Okavango/orgs",
      "repos_url": "https://api.github.com/users/Okavango/repos",
      "events_url": "https://api.github.com/users/Okavango/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Okavango/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-11-09T16:39:05Z",
    "updated_at": "2022-11-09T16:40:02Z",
    "author_association": "NONE",
    "body": "In original YieldBox solution assetsOffset = 1. Look: https://github.com/boringcrypto/YieldBox/blob/master/contracts/YieldBoxRebase.sol#L24\r\nThat means for your example that  Alice, Bob, and Charlie's share is equally 1e36 respectively, and after loosing assets 3e18->1e18\r\neach user will recieve 1e36*(1e18+1)/(3e36+1e18) = (1/3)e18 That is absolutely fair\r\n\r\nYieldBox solution fixes the issue",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1309033363/reactions",
      "total_count": 4,
      "+1": 4,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1311985147",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3706#issuecomment-1311985147",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3706",
    "id": 1311985147,
    "node_id": "IC_kwDOA9tCBs5OM037",
    "user": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-11-11T17:42:32Z",
    "updated_at": "2022-11-11T17:43:32Z",
    "author_association": "MEMBER",
    "body": "Thanks @Okavango, very important observation. YieldBox uses assetsOffset = 1 and supplyOffset = 1e8. This does seem to be a pretty great solution. The only \"issue\" is that the number of decimals of the vault token will have 8 more decimals than the assets, which should probably be reflected in `decimals()`, even though people don't like tokens with decimals other than 18.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1311985147/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1312183022",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3706#issuecomment-1312183022",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3706",
    "id": 1312183022,
    "node_id": "IC_kwDOA9tCBs5ONlLu",
    "user": {
      "login": "daejunpark",
      "id": 5491770,
      "node_id": "MDQ6VXNlcjU0OTE3NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5491770?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/daejunpark",
      "html_url": "https://github.com/daejunpark",
      "followers_url": "https://api.github.com/users/daejunpark/followers",
      "following_url": "https://api.github.com/users/daejunpark/following{/other_user}",
      "gists_url": "https://api.github.com/users/daejunpark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/daejunpark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/daejunpark/subscriptions",
      "organizations_url": "https://api.github.com/users/daejunpark/orgs",
      "repos_url": "https://api.github.com/users/daejunpark/repos",
      "events_url": "https://api.github.com/users/daejunpark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/daejunpark/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-11-11T20:52:50Z",
    "updated_at": "2022-11-11T20:52:50Z",
    "author_association": "CONTRIBUTOR",
    "body": "I agree, it's a great solution!  Thanks @Okavango!  Now I can see that the assetsOffset = 1 and supplyOffset = 1e8 setup works as an internal fixedpoint representation for shares.  So, it's like we have 1 wei assets and 1.00000000 wei shares for the virtual initial deposit.  This mitigates the inflation attacks because now we can represent as small as 0.00000001 wei share.  This also addresses the issue #3800, without suffering from the negative interest problem because the amount of virtual asset is just 1, so the loss of real users, if any, will never be greater than 1, which means nothing in practice.\r\n\r\nI may add more test cases to the erc4626-tests to fuzz these specific scenarios more effectively, so that others can find these subtle issues more easily from their vaults.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1312183022/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1312220326",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3706#issuecomment-1312220326",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3706",
    "id": 1312220326,
    "node_id": "IC_kwDOA9tCBs5ONuSm",
    "user": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-11-11T21:55:42Z",
    "updated_at": "2022-11-11T22:27:47Z",
    "author_association": "MEMBER",
    "body": "Fuzzing would be very nice, we were thinking about that earlier today in conversation with @xaler5. Do you think we can model a general property that a user's deposit of `x` assets can't be stolen by an attacker through frontrunning with a deposit of `y` and a donation of `z` (for arbitrary `x, y, z`)?\r\n\r\n---\r\n\r\nI initially thought this issue was just about slippage and that rounding errors weren't a big part of it, but I can see that I was wrong. My understanding of the attack is now as follows: the attacker mints some shares, then manipulates the share price through a donation, so that a subsequent user deposit of a \"large\" amount of assets ends up minting a \"very small\" amount of shares (possibly but not necessarily <1 in real terms), causing the depositor to lose the fractional portion of their shares due to truncation, and allowing the attacker to claim the assets corresponding to that fraction, since they hold the majority of the vault's shares and the losses to precision are distributed proportionaly to shareholders. This is why making 0.00000001 share representable fixes the attack, though it will only do it up to 8 decimals.\r\n\r\nIf this is the case, there should be an alternative fix where a user's deposit is done only up to the amount of assets that can be losslessly represented by an integer number of shares at the current share price. That is, defining `deposit(assets)` as `mint(previewDeposit(assets))`. In this case the assets that are actually deposited are not exactly the requested amount, I don't know if this is allowed by ERC4626 but it should be.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1312220326/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1312226945",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3706#issuecomment-1312226945",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3706",
    "id": 1312226945,
    "node_id": "IC_kwDOA9tCBs5ONv6B",
    "user": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-11-11T22:07:07Z",
    "updated_at": "2022-11-12T00:18:50Z",
    "author_association": "MEMBER",
    "body": "According to [EIP-4626](https://eips.ethereum.org/EIPS/eip-4626#deposit):\r\n> - Mints `shares` Vault shares to `receiver` by depositing exactly `assets` of underlying tokens.\r\n> - MUST revert if all of `assets` cannot be deposited (due to deposit limit being reached, slippage, the user not approving enough underlying tokens to the Vault contract, etc).\r\n\r\nSo the alternative fix I suggested above would not be compliant. However, we can make it compliant with a few adjustments. `deposit` should have a threshold of how much of assets it's acceptable to lose to precision. If the amount lost is below the threshold, deposit succeds even though a small amount will be socialized to the vault. If the amount lost is above the threshold, deposit reverts to protect the depositor.\r\n\r\nIs there something I'm missing that would make this a bad solution?\r\n\r\n---\r\n\r\n~Another point that this seems to suggest is that it's always safer to use `mint` instead of `deposit`... Is there a reason this shouldn't be a blanket recommendation for users?~ **Edit:** Doesn't sound like a good idea due to slippage given that users probably think of their deposits denominated not in the shares but in the asset. However, an interesting observation is that `mint` + finite (but not exact) ERC20 allowance of the underlying asset gives you a sort of \"built-in\" slippage protection without the need of a router.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1312226945/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1314382001",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3706#issuecomment-1314382001",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3706",
    "id": 1314382001,
    "node_id": "IC_kwDOA9tCBs5OV-Cx",
    "user": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-11-14T21:08:48Z",
    "updated_at": "2022-11-14T21:08:48Z",
    "author_association": "MEMBER",
    "body": "To summarize, my proposal for a fix is as follows:\r\n\r\n```solidity\r\nuint256 private _maxRoundingLoss = 0.05e18; // configurable\r\n\r\nfunction deposit(uint256 assets, address receiver) public virtual override returns (uint256) {\r\n    require(assets <= maxDeposit(receiver), \"ERC4626: deposit more than max\");\r\n\r\n    uint256 shares = previewDeposit(assets);\r\n    _deposit(_msgSender(), receiver, assets, shares);\r\n\r\n    // Check that shares are redeemable for roughly the amount deposited, with minimal rounding error.\r\n    uint256 redeemable = previewRedeem(shares);\r\n    require(redeemable + _maxRoundingLoss >= assets, \"ERC4626: deposit loses assets from rounding\");\r\n\r\n    return shares;\r\n}\r\n```\r\n\r\nNote the check after `_deposit`.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1314382001/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1314574369",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3706#issuecomment-1314574369",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3706",
    "id": 1314574369,
    "node_id": "IC_kwDOA9tCBs5OWtAh",
    "user": {
      "login": "daejunpark",
      "id": 5491770,
      "node_id": "MDQ6VXNlcjU0OTE3NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5491770?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/daejunpark",
      "html_url": "https://github.com/daejunpark",
      "followers_url": "https://api.github.com/users/daejunpark/followers",
      "following_url": "https://api.github.com/users/daejunpark/following{/other_user}",
      "gists_url": "https://api.github.com/users/daejunpark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/daejunpark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/daejunpark/subscriptions",
      "organizations_url": "https://api.github.com/users/daejunpark/orgs",
      "repos_url": "https://api.github.com/users/daejunpark/repos",
      "events_url": "https://api.github.com/users/daejunpark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/daejunpark/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-11-15T00:08:45Z",
    "updated_at": "2022-11-15T00:54:57Z",
    "author_association": "CONTRIBUTOR",
    "body": "Great discussion!\r\n\r\nRe: fuzzing, yes, I have been thinking of working on that, and will let you know if I find a good way to fuzz such scenarios.\r\n\r\nRe: the loss, I thought that the 8 decimals precision for shares is enough for practical purposes; e.g., given the victim's deposit of 1000 ETH, the adversaries need to donate at least 100M ETH to steal 1 ETH; 10M ETH to steal 0.1 ETH, 1M ETH to steal 0.01 ETH. In general, they need to put `10^8 * <the amount to steal>` upfront at least.[^1] (I guess they will likely have a better way to utilize such a large amount of capital.) The number of decimals should be adjusted based on the value and total supply of the underlying assets, though.\r\n\r\n[^1]: https://www.desmos.com/calculator/ezavnc4lbh  where `s` is the total supply of shares ~~(including the offset)~~, `d` is the victim's deposit, `x` is the attacker's donation, and `y` is the attacker's profit.\r\n\r\nRe: the mint vs deposit, I've indeed thought about a similar thing: the mint() method seems more secure than the deposit() method when the vault doesn't have enough liquidity yet, as it gives users more control of the cost basis and proceeds. I'm not sure if it provides the ultimate security though, especially against the price reset (#3800).\r\n\r\nThat all said, I like your extra check which prevents this slightly different type of slippages.\r\nSome thoughts:\r\n- The threshold may be given as a percentage instead of an absolute value.\r\n- Which would be a better place to put this check: router vs vault?  I mean, putting it in the vault would provide a better integrated security, but I'm wondering if this could be exploited for griefing or have UX issues.  If it is put in router, users can choose the threshold per deposit.\r\n- Would you handle the price reset issue separately?\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1314574369/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1314641224",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3706#issuecomment-1314641224",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3706",
    "id": 1314641224,
    "node_id": "IC_kwDOA9tCBs5OW9VI",
    "user": {
      "login": "daejunpark",
      "id": 5491770,
      "node_id": "MDQ6VXNlcjU0OTE3NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5491770?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/daejunpark",
      "html_url": "https://github.com/daejunpark",
      "followers_url": "https://api.github.com/users/daejunpark/followers",
      "following_url": "https://api.github.com/users/daejunpark/following{/other_user}",
      "gists_url": "https://api.github.com/users/daejunpark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/daejunpark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/daejunpark/subscriptions",
      "organizations_url": "https://api.github.com/users/daejunpark/orgs",
      "repos_url": "https://api.github.com/users/daejunpark/repos",
      "events_url": "https://api.github.com/users/daejunpark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/daejunpark/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-11-15T01:42:22Z",
    "updated_at": "2022-11-15T01:43:04Z",
    "author_association": "CONTRIBUTOR",
    "body": "Wait, I think I missed another important effect of virtual offsets for this inflation attack.  If we have the virtual offsets (even with just assetsOffset = supplyOffset = 1), the known attack scenario _cannot_ be profitable, since the attacker cannot fully withdraw their donation, because a significant part of the donation goes to the \"virtual depositor\" and will be locked in the vault forever.  Of course, users may still lose their funds if the attacker donates a lot of assets (roughly `supplyOffset * <user deposit>`), but in that case the attacker's loss will be much more than that. Also, if we set `supplyOffset` large enough, e.g., 100x of the total supply of underlying assets, that is, `supplyOffset = 1e10` for ETH, then the max possible loss will be effectively limited to < 0.01 ETH.  So, I think the YieldBox approach is a good solution (provided that supplyOffset is properly set depending on the underlying asset.)",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1314641224/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1335927385",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3706#issuecomment-1335927385",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3706",
    "id": 1335927385,
    "node_id": "IC_kwDOA9tCBs5PoKJZ",
    "user": {
      "login": "TChairman",
      "id": 98551945,
      "node_id": "U_kgDOBd_IiQ",
      "avatar_url": "https://avatars.githubusercontent.com/u/98551945?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TChairman",
      "html_url": "https://github.com/TChairman",
      "followers_url": "https://api.github.com/users/TChairman/followers",
      "following_url": "https://api.github.com/users/TChairman/following{/other_user}",
      "gists_url": "https://api.github.com/users/TChairman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TChairman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TChairman/subscriptions",
      "organizations_url": "https://api.github.com/users/TChairman/orgs",
      "repos_url": "https://api.github.com/users/TChairman/repos",
      "events_url": "https://api.github.com/users/TChairman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TChairman/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-12-02T22:31:20Z",
    "updated_at": "2022-12-09T06:33:48Z",
    "author_association": "NONE",
    "body": "@frangio what about the option of just preserving the ratio when the vault is emptied? You mentioned this in https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3800. Something like: \r\n\r\n```\r\n    uint256 private lastKnownShares;\r\n    uint256 private lastKnownAssets;\r\n\r\n    function _initialConvertToShares(\r\n        uint256 assets,\r\n        Math.Rounding /*rounding*/\r\n    ) internal view virtual returns (uint256 shares) {\r\n        return lastKnownAssets > 0 ? assets.mulDiv(lastKnownShares, lastKnownAssets, rounding) : assets;\r\n    }\r\n\r\n    function _initialConvertToAssets(\r\n        uint256 shares,\r\n        Math.Rounding /*rounding*/\r\n    ) internal view virtual returns (uint256) {\r\n        return lastKnownShares > 0 ? assets.mulDiv(lastKnownAssets, lastKnownShares, rounding) : shares;\r\n    }\r\n\r\n    function _withdraw(\r\n        address caller,\r\n        address receiver,\r\n        address owner,\r\n        uint256 assets,\r\n        uint256 shares\r\n    ) internal virtual {\r\n        if (caller != owner) {\r\n            _spendAllowance(owner, caller, shares);\r\n        }\r\n\r\n        _burn(owner, shares);\r\n        SafeERC20.safeTransfer(_asset, receiver, assets);\r\n\r\n         // preserve share price on empty vault\r\n        if (totalAssets()==0 || totalShares() == 0) {\r\n            lastKnownShares = shares;\r\n            lastKnownAssets = assets;\r\n        }\r\n\r\n        emit Withdraw(caller, receiver, owner, assets, shares);\r\n    }\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1335927385/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1335943827",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3706#issuecomment-1335943827",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3706",
    "id": 1335943827,
    "node_id": "IC_kwDOA9tCBs5PoOKT",
    "user": {
      "login": "TChairman",
      "id": 98551945,
      "node_id": "U_kgDOBd_IiQ",
      "avatar_url": "https://avatars.githubusercontent.com/u/98551945?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TChairman",
      "html_url": "https://github.com/TChairman",
      "followers_url": "https://api.github.com/users/TChairman/followers",
      "following_url": "https://api.github.com/users/TChairman/following{/other_user}",
      "gists_url": "https://api.github.com/users/TChairman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TChairman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TChairman/subscriptions",
      "organizations_url": "https://api.github.com/users/TChairman/orgs",
      "repos_url": "https://api.github.com/users/TChairman/repos",
      "events_url": "https://api.github.com/users/TChairman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TChairman/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-12-02T23:03:21Z",
    "updated_at": "2022-12-02T23:03:21Z",
    "author_association": "NONE",
    "body": "On reconsideration, seems like my solution solves the sudden price change problem (outlined in https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3800) but not the rounding problem. FWIW, on the rounding problem, I prefer the idea of checking for slippage to the idea of some initial deposit.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1335943827/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
