{
  "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3963",
  "repository_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts",
  "labels_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3963/labels{/name}",
  "comments_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3963/comments",
  "events_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3963/events",
  "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3963",
  "id": 1535532140,
  "node_id": "I_kwDOA9tCBs5bhlxs",
  "number": 3963,
  "title": "Enable setting and getting multiple bits in `Bitmaps.sol`",
  "user": {
    "login": "jesperkristensen58",
    "id": 17262072,
    "node_id": "MDQ6VXNlcjE3MjYyMDcy",
    "avatar_url": "https://avatars.githubusercontent.com/u/17262072?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jesperkristensen58",
    "html_url": "https://github.com/jesperkristensen58",
    "followers_url": "https://api.github.com/users/jesperkristensen58/followers",
    "following_url": "https://api.github.com/users/jesperkristensen58/following{/other_user}",
    "gists_url": "https://api.github.com/users/jesperkristensen58/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jesperkristensen58/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jesperkristensen58/subscriptions",
    "organizations_url": "https://api.github.com/users/jesperkristensen58/orgs",
    "repos_url": "https://api.github.com/users/jesperkristensen58/repos",
    "events_url": "https://api.github.com/users/jesperkristensen58/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jesperkristensen58/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 25,
  "created_at": "2023-01-16T22:01:00Z",
  "updated_at": "2023-02-21T15:12:36Z",
  "closed_at": null,
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "**🧐 Motivation**\r\n\r\n- The Bitmaps library can be greatly expanded in its usefulness if setting and getting multiple bits is enabled\r\n\r\nThis would be helpful, e.g., in an NFT bitmap-based airdrop where we start with 1-bits and switch them to 0 as mints occur.\r\nThis would also be helpful in the case where a protocol is using bitpacking (e.g., this is directly useful in Panoptic), as in: https://twitter.com/cryptojesperk/status/1613207330782416897?s=20&t=dDcU6hQPJEGzoo8sX8PJ8A\r\n\r\n**📝 Details**\r\nThese new functions are added via function overloading (the argument list is changed from taking an `index` to a `startIndex` and `num`):\r\n\r\n- set(BitMap storage bitmap, uint256 startIndex, uint256 num)\r\n- get(BitMap storage bitmap, uint256 startIndex, uint256 num)\r\n- setTo(BitMap storage bitmap, uint256 startIndex, uint256 num, bool value)\r\n- unset(BitMap storage bitmap, uint256 startIndex, uint256 num)\r\n\r\nWhere \"startIndex\" is the starting index of the first bit to interact with. \"num\" is the number of bits to interact with (`set` or `unset`) from the startIndex onwards.\r\n\r\nConsider the following 256 bits (32 bytes, or 1 word) example:\r\n\r\n> exampleBitmap = 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\r\n\r\nCurrently, we can set or unset 1 bit at a time. With these new functions, we can set n bits at once.\r\n\r\nFor example:\r\n\r\n> exampleBitmap = exampleBitmap.set(5, 10);\r\n\r\nsets the bits starting at index 5 to 15 to 1 - and leaves the rest at 0 - in a single function call:\r\n\r\n> 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111110000\r\n\r\nAnd we can get those bits back:\r\n\r\n> exampleBitmap = exampleBitmap.get(5, 10);\r\n\r\nReturns the bits:\r\n\r\n> 1111111111\r\n\r\nThe bits can be returned in various formats to be decided. Potentially as an array of uint256s. An event would be emitted also detailing the start index and the number of bits that are returned.\r\n\r\nThe difficult parts will be when bits are set across overlapping _data elements, but can be handled, among other complex situations (which can all be handled).",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3963/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3963/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1385063838",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3963#issuecomment-1385063838",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3963",
    "id": 1385063838,
    "node_id": "IC_kwDOA9tCBs5SjmWe",
    "user": {
      "login": "Amxx",
      "id": 2432299,
      "node_id": "MDQ6VXNlcjI0MzIyOTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2432299?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Amxx",
      "html_url": "https://github.com/Amxx",
      "followers_url": "https://api.github.com/users/Amxx/followers",
      "following_url": "https://api.github.com/users/Amxx/following{/other_user}",
      "gists_url": "https://api.github.com/users/Amxx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Amxx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Amxx/subscriptions",
      "organizations_url": "https://api.github.com/users/Amxx/orgs",
      "repos_url": "https://api.github.com/users/Amxx/repos",
      "events_url": "https://api.github.com/users/Amxx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Amxx/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-01-17T09:10:36Z",
    "updated_at": "2023-01-17T09:10:36Z",
    "author_association": "COLLABORATOR",
    "body": "Hello @jesperkristensen58 \r\n\r\nWhile I like the general idea, I'm uncomfortable with unbounded operation. If `num` is big, than the gas cost might start being an issue. Maybe `num` should be a uint8, limiting the size to 255, which would fit in a bytes32 (and would require read/write to at most 2 storage slots).\r\n\r\nAdditionally, this library is just a data structure, it should be fully transparent to the devs using it, so I don't think emitting an event is acceptable. An analogy would be if a standard C++ structure such as `std::vector` did a `printf` to the console. Nobody wants that.\r\n\r\nIs this issue just theoretical, or do you have a real usecase motivating it ? I'd love to know more about how it would be used.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1385063838/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1385193866",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3963#issuecomment-1385193866",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3963",
    "id": 1385193866,
    "node_id": "IC_kwDOA9tCBs5SkGGK",
    "user": {
      "login": "jesperkristensen58",
      "id": 17262072,
      "node_id": "MDQ6VXNlcjE3MjYyMDcy",
      "avatar_url": "https://avatars.githubusercontent.com/u/17262072?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jesperkristensen58",
      "html_url": "https://github.com/jesperkristensen58",
      "followers_url": "https://api.github.com/users/jesperkristensen58/followers",
      "following_url": "https://api.github.com/users/jesperkristensen58/following{/other_user}",
      "gists_url": "https://api.github.com/users/jesperkristensen58/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jesperkristensen58/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jesperkristensen58/subscriptions",
      "organizations_url": "https://api.github.com/users/jesperkristensen58/orgs",
      "repos_url": "https://api.github.com/users/jesperkristensen58/repos",
      "events_url": "https://api.github.com/users/jesperkristensen58/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jesperkristensen58/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-01-17T10:39:31Z",
    "updated_at": "2023-01-17T10:39:31Z",
    "author_association": "NONE",
    "body": "Thanks for your quick reply, Hadrien!\r\n\r\n> Maybe num should be a uint8, limiting the size to 255\r\n\r\nYour suggestion to cut the complexity of the proposal down to at least being able to manage two words while having the capacity to set multiple bits is an excellent one. The price of gas is an important factor. And this will make it possible to use the `uint8` as well of course.\r\n\r\n> so I don't think emitting an event is acceptable\r\n\r\nI concur with you completely. Let's eliminate the `event` specific. If necessary, any further information could be included in the return data.\r\n\r\n> Is this issue just theoretical, or do you have a real usecase motivating it ?\r\n\r\n**Current Solution**\r\n\r\nYes, we are essentially utilizing bitpacking in the development of Panoptic - it's not theoretical, but highly practical and will, in fact, be implemented in our DeFi Options protocol in production: Please see http://www.panoptic.xyz/ for context.\r\n\r\nThis tweet demonstrates how this is now achieved (but we have our own implementation): https://twitter.com/cryptojesperk/status/1613207330782416897\r\n\r\nSo, in short, we need a way to set and get `n` bits in a word starting at an arbitrary index. This allows us to pack variables of any number of bits easily. Having this be available for a single word makes sense.\r\n\r\n(In fact, in our case we'd always work within the first word, aka bucket with index 0: _data[0]; but that's just a detail, in general it could be helpful to have the potential _data[0] to _data[1] crossing happen if needed so I like your idea).\r\n\r\n**Bitmaps used as a Current Solution**\r\n\r\nTo be sure, we can solve the problem using the current library, but it becomes cumbersome and inefficient since we need a for loop.\r\n\r\n**Best Solution: Generalize Bitmaps.sol**\r\n\r\nThe solution here could use a simple (generalized) mask but with the complexity of correctly handling \"bucket crossings.\"",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1385193866/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1386199686",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3963#issuecomment-1386199686",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3963",
    "id": 1386199686,
    "node_id": "IC_kwDOA9tCBs5Sn7qG",
    "user": {
      "login": "Amxx",
      "id": 2432299,
      "node_id": "MDQ6VXNlcjI0MzIyOTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2432299?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Amxx",
      "html_url": "https://github.com/Amxx",
      "followers_url": "https://api.github.com/users/Amxx/followers",
      "following_url": "https://api.github.com/users/Amxx/following{/other_user}",
      "gists_url": "https://api.github.com/users/Amxx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Amxx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Amxx/subscriptions",
      "organizations_url": "https://api.github.com/users/Amxx/orgs",
      "repos_url": "https://api.github.com/users/Amxx/repos",
      "events_url": "https://api.github.com/users/Amxx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Amxx/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-01-17T23:02:13Z",
    "updated_at": "2023-01-17T23:02:29Z",
    "author_association": "COLLABORATOR",
    "body": "For the record, this may be a possible (untested) implementation:\r\n\r\n```\r\n    function mkmask(uint8 leftZeros, uint8 rightZeros) internal pure returns (uint256) {\r\n        return type(uint256).max << leftZeros >> leftZeros >> rightZeros << rightZeros;\r\n    }\r\n\r\n    function setTo(uint256 index, uint8 length, bool value) internal {\r\n        if (length == 0) {\r\n            return;\r\n        }\r\n\r\n        uint256 bucket = index / 256;\r\n        uint256 start  = index % 256;\r\n        uint256 end    = start + length;\r\n\r\n        if (end <= 256) {\r\n            uint8 leftZero = uint8(start);\r\n            uint8 rightZero = uint8(256 - end);\r\n            setBucketTo(bucket, mkmask(leftZero, rightZero), value);\r\n        } else {\r\n            uint8 leftZero1 = uint8(start);\r\n            uint8 rightZero1 = uint8(0);\r\n            setBucketTo(bucket, mkmask(leftZero1, rightZero1), value);\r\n\r\n            uint8 leftZero2 = uint8(0);\r\n            uint8 rightZero2 = uint8(512 - end);\r\n            setBucketTo(bucket + 1, mkmask(leftZero2, rightZero2), value);\r\n        }\r\n    }\r\n\r\n    function setBucketTo(uint256 bucket, uint256 mask, bool value) internal {\r\n        if (value) {\r\n            setBucket(bucket, mask);\r\n        } else {\r\n            unsetBucket(bucket, mask);\r\n        }\r\n    }\r\n\r\n    function setBucket(uint256 bucket, uint256 mask) internal {\r\n        _data[bucket] |= mask;\r\n    }\r\n\r\n    function unsetBucket(uint256 bucket, uint256 mask) internal {\r\n        _data[bucket] &= ~mask;\r\n    }\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1386199686/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1386733454",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3963#issuecomment-1386733454",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3963",
    "id": 1386733454,
    "node_id": "IC_kwDOA9tCBs5Sp9-O",
    "user": {
      "login": "jesperkristensen58",
      "id": 17262072,
      "node_id": "MDQ6VXNlcjE3MjYyMDcy",
      "avatar_url": "https://avatars.githubusercontent.com/u/17262072?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jesperkristensen58",
      "html_url": "https://github.com/jesperkristensen58",
      "followers_url": "https://api.github.com/users/jesperkristensen58/followers",
      "following_url": "https://api.github.com/users/jesperkristensen58/following{/other_user}",
      "gists_url": "https://api.github.com/users/jesperkristensen58/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jesperkristensen58/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jesperkristensen58/subscriptions",
      "organizations_url": "https://api.github.com/users/jesperkristensen58/orgs",
      "repos_url": "https://api.github.com/users/jesperkristensen58/repos",
      "events_url": "https://api.github.com/users/jesperkristensen58/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jesperkristensen58/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-01-18T09:21:13Z",
    "updated_at": "2023-01-18T09:27:35Z",
    "author_association": "NONE",
    "body": "Yes, this would work (I will test as well).\r\nCreating a PR.\r\n\r\n- How do you prefer the `get` method to work?\r\n\r\nDo we return a uint256 where we shift the bits to the start of this uint? And then it's up to the user to know that these are the bits from `start` to `end`?\r\n\r\n**Example**: (this is not a full bucket, but just to get the point across)\r\n\r\n`00000001111110000000`\r\nHere the first 1 is at index 7\r\n\r\nThe user calls `bitmap.get(7, 7)` and wants this chunk (boundaries highlighted with \"-\"'s):\r\n\r\n`000000 - 0111111 - 0000000`\r\n\r\n\r\nSo we can return it as:\r\n\r\n1) a single uint256: 00000000000...0000 - 0111111\r\n\r\nthe user then will need to understand that this is from index 7 to 13 in the bitmap - this will be made clear in the documentation. Of course they know what they called - they provided `index` and `length`.\r\n\r\nThis would of course still be a single uint256 even if a bucket crossing happens.\r\n\r\n2) at most two uint256's where the bits are positioned like in the bitmap's bucket(s):\r\n\r\n000000 - 0111111 - 0000000\r\n\r\nand the user still needs to know that indices 7 to 13 are of interest. Two uint256's are needed for bucket crossings (and could be returned in general where the second uint256 is just zero in case no crossing happens).\r\n\r\n3) either bullet above but in addition, returning explicitly the `start` and `end` indexes as well to be sure (however, the user called with `index` and `length` so already has this info).\r\n\r\nEither way, the documentation will of course be made clear on exactly what is returned, and examples should be provided in the docstrings.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1386733454/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1386781222",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3963#issuecomment-1386781222",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3963",
    "id": 1386781222,
    "node_id": "IC_kwDOA9tCBs5SqJom",
    "user": {
      "login": "jesperkristensen58",
      "id": 17262072,
      "node_id": "MDQ6VXNlcjE3MjYyMDcy",
      "avatar_url": "https://avatars.githubusercontent.com/u/17262072?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jesperkristensen58",
      "html_url": "https://github.com/jesperkristensen58",
      "followers_url": "https://api.github.com/users/jesperkristensen58/followers",
      "following_url": "https://api.github.com/users/jesperkristensen58/following{/other_user}",
      "gists_url": "https://api.github.com/users/jesperkristensen58/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jesperkristensen58/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jesperkristensen58/subscriptions",
      "organizations_url": "https://api.github.com/users/jesperkristensen58/orgs",
      "repos_url": "https://api.github.com/users/jesperkristensen58/repos",
      "events_url": "https://api.github.com/users/jesperkristensen58/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jesperkristensen58/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-01-18T09:57:44Z",
    "updated_at": "2023-01-18T09:58:02Z",
    "author_association": "NONE",
    "body": "Still untested, but without the `get(...)` function pending your answer, here is what I got - thanks for your example:\r\n\r\n```\r\n// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/structs/BitMaps.sol)\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Library for managing uint256 to bool mapping in a compact and efficient way, providing the keys are sequential.\r\n * Largely inspired by Uniswap's https://github.com/Uniswap/merkle-distributor/blob/master/contracts/MerkleDistributor.sol[merkle-distributor].\r\n */\r\nlibrary BitMaps {\r\n    struct BitMap {\r\n        mapping(uint256 => uint256) _data; // _data[bucket]\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether the bit at `index` is set.\r\n     */\r\n    function get(BitMap storage bitmap, uint256 index) internal view returns (bool) {\r\n        uint256 bucket = index >> 8;\r\n        uint256 mask = 1 << (index & 0xff);\r\n        return bitmap._data[bucket] & mask != 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Sets the bit at `index` to the boolean `value`.\r\n     */\r\n    function setTo(BitMap storage bitmap, uint256 index, bool value) internal {\r\n        if (value) {\r\n            set(bitmap, index);\r\n        } else {\r\n            unset(bitmap, index);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Sets the bit at `index`.\r\n     */\r\n    function set(BitMap storage bitmap, uint256 index) internal {\r\n        uint256 bucket = index >> 8;\r\n        uint256 mask = 1 << (index & 0xff);\r\n        bitmap._data[bucket] |= mask;\r\n    }\r\n\r\n    /**\r\n     * @dev Unsets the bit at `index`.\r\n     */\r\n    function unset(BitMap storage bitmap, uint256 index) internal {\r\n        uint256 bucket = index >> 8;\r\n        uint256 mask = 1 << (index & 0xff);\r\n        bitmap._data[bucket] &= ~mask;\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `length` bits starting at `index` to the boolean `value`.\r\n     */\r\n    function setTo(BitMap storage bitmap, uint256 index, uint8 length, bool value) internal {\r\n        if (length == 0) {\r\n            return;\r\n        }\r\n\r\n        if (value) {\r\n            set(bitmap, index, length);\r\n        } else {\r\n            unset(bitmap, index, length);\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * @dev Sets `length` bits starting at `index`.\r\n     */\r\n    function set(BitMap storage bitmap, uint256 index, uint8 length) internal {\r\n        if (length == 0) {\r\n            return;\r\n        }\r\n\r\n        uint256 bucket = index / 256;\r\n        uint256 start = index % 256;\r\n        uint256 end = start + length;\r\n\r\n        if (end <= 256) {\r\n            uint8 leftZeroes = uint8(start);\r\n            uint8 rightZeroes = uint8(256 - end);\r\n            uint256 mask = mkmask(leftZeroes, rightZeroes);\r\n            setBucket(bitmap, bucket, mask);\r\n        } else {\r\n            uint8 leftZeroes1 = uint8(start);\r\n            uint8 rightZeroes1 = uint8(0);\r\n            uint256 mask1 = mkmask(leftZeroes1, rightZeroes1);\r\n            setBucket(bitmap, bucket, mask1);\r\n\r\n            uint8 leftZeroes2 = uint8(0);\r\n            uint8 rightZeroes2 = uint8(512 - end);\r\n            uint256 mask2 = mkmask(leftZeroes2, rightZeroes2);\r\n            setBucket(bitmap, bucket + 1, mask2);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Unsets `length` bits starting at `index`.\r\n     */\r\n    function unset(BitMap storage bitmap, uint256 index, uint8 length) internal {\r\n        if (length == 0) {\r\n            return;\r\n        }\r\n\r\n        uint256 bucket = index / 256;\r\n        uint256 start = index % 256;\r\n        uint256 end = start + length;\r\n\r\n        if (end <= 256) {\r\n            uint8 leftZeroes = uint8(start);\r\n            uint8 rightZeroes = uint8(256 - end);\r\n            uint256 mask = mkmask(leftZeroes, rightZeroes);\r\n            unsetBucket(bitmap, bucket, mask);\r\n        } else {\r\n            uint8 leftZeroes1 = uint8(start);\r\n            uint8 rightZeroes1 = uint8(0);\r\n            uint256 mask1 = mkmask(leftZeroes1, rightZeroes1);\r\n            unsetBucket(bitmap, bucket, mask1);\r\n\r\n            uint8 leftZeroes2 = uint8(0);\r\n            uint8 rightZeroes2 = uint8(512 - end);\r\n            uint256 mask2 = mkmask(leftZeroes2, rightZeroes2);\r\n            unsetBucket(bitmap, bucket + 1, mask2);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Sets a `bucket` in the bitmap under the `mask`.\r\n     */\r\n    function setBucket(BitMap storage bitmap, uint256 bucket, uint256 mask) internal {\r\n        bitmap._data[bucket] |= mask;\r\n    }\r\n\r\n    /**\r\n     * @dev Unsets a `bucket` in the bitmap under the `mask`.\r\n     */\r\n    function unsetBucket(BitMap storage bitmap, uint256 bucket, uint256 mask) internal {\r\n        bitmap._data[bucket] &= ~mask;\r\n    }\r\n\r\n    /**\r\n     * @dev Make a bitmask with `leftZeros` number of left zero-bits and `rightZeros` number of right zero-bits.\r\n     */\r\n    function mkmask(uint8 leftZeros, uint8 rightZeros) internal pure returns (uint256) {\r\n        return type(uint256).max << leftZeros >> leftZeros >> rightZeros << rightZeros;\r\n    }\r\n}\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1386781222/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1386826184",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3963#issuecomment-1386826184",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3963",
    "id": 1386826184,
    "node_id": "IC_kwDOA9tCBs5SqUnI",
    "user": {
      "login": "Amxx",
      "id": 2432299,
      "node_id": "MDQ6VXNlcjI0MzIyOTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2432299?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Amxx",
      "html_url": "https://github.com/Amxx",
      "followers_url": "https://api.github.com/users/Amxx/followers",
      "following_url": "https://api.github.com/users/Amxx/following{/other_user}",
      "gists_url": "https://api.github.com/users/Amxx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Amxx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Amxx/subscriptions",
      "organizations_url": "https://api.github.com/users/Amxx/orgs",
      "repos_url": "https://api.github.com/users/Amxx/repos",
      "events_url": "https://api.github.com/users/Amxx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Amxx/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-01-18T10:28:48Z",
    "updated_at": "2023-01-18T10:28:48Z",
    "author_association": "COLLABORATOR",
    "body": "> Creating a PR.\r\n\r\nPlease don't. We would still need some internal discussion about this before pulling the trigger on that.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1386826184/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1386831469",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3963#issuecomment-1386831469",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3963",
    "id": 1386831469,
    "node_id": "IC_kwDOA9tCBs5SqV5t",
    "user": {
      "login": "jesperkristensen58",
      "id": 17262072,
      "node_id": "MDQ6VXNlcjE3MjYyMDcy",
      "avatar_url": "https://avatars.githubusercontent.com/u/17262072?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jesperkristensen58",
      "html_url": "https://github.com/jesperkristensen58",
      "followers_url": "https://api.github.com/users/jesperkristensen58/followers",
      "following_url": "https://api.github.com/users/jesperkristensen58/following{/other_user}",
      "gists_url": "https://api.github.com/users/jesperkristensen58/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jesperkristensen58/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jesperkristensen58/subscriptions",
      "organizations_url": "https://api.github.com/users/jesperkristensen58/orgs",
      "repos_url": "https://api.github.com/users/jesperkristensen58/repos",
      "events_url": "https://api.github.com/users/jesperkristensen58/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jesperkristensen58/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-01-18T10:32:53Z",
    "updated_at": "2023-01-18T10:32:53Z",
    "author_association": "NONE",
    "body": "> > Creating a PR.\r\n> \r\n> Please don't. We would still need some internal discussion about this before pulling the trigger on that.\r\n\r\nNo problem.\r\n\r\nAnother practical application is Bitmap-based NFT airdrops, in which a group of bits (say 5,000 - it would be the collection size) are initially set and subsequently unset when users mint the NFT. As numerous buckets are required to first set the bits, this new code would also be beneficial.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1386831469/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1387032936",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3963#issuecomment-1387032936",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3963",
    "id": 1387032936,
    "node_id": "IC_kwDOA9tCBs5SrHFo",
    "user": {
      "login": "Amxx",
      "id": 2432299,
      "node_id": "MDQ6VXNlcjI0MzIyOTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2432299?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Amxx",
      "html_url": "https://github.com/Amxx",
      "followers_url": "https://api.github.com/users/Amxx/followers",
      "following_url": "https://api.github.com/users/Amxx/following{/other_user}",
      "gists_url": "https://api.github.com/users/Amxx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Amxx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Amxx/subscriptions",
      "organizations_url": "https://api.github.com/users/Amxx/orgs",
      "repos_url": "https://api.github.com/users/Amxx/repos",
      "events_url": "https://api.github.com/users/Amxx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Amxx/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-01-18T12:59:24Z",
    "updated_at": "2023-01-18T12:59:24Z",
    "author_association": "COLLABORATOR",
    "body": "Note that because of the limitations of uint8, the `set(BitMap storage bitmap, uint256 index, uint8 length)` and `unset` functions are limited to a length of 255. This doesn't allow setting an entire bucket at once (a bucket has 256 items) ",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1387032936/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1387038091",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3963#issuecomment-1387038091",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3963",
    "id": 1387038091,
    "node_id": "IC_kwDOA9tCBs5SrIWL",
    "user": {
      "login": "jesperkristensen58",
      "id": 17262072,
      "node_id": "MDQ6VXNlcjE3MjYyMDcy",
      "avatar_url": "https://avatars.githubusercontent.com/u/17262072?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jesperkristensen58",
      "html_url": "https://github.com/jesperkristensen58",
      "followers_url": "https://api.github.com/users/jesperkristensen58/followers",
      "following_url": "https://api.github.com/users/jesperkristensen58/following{/other_user}",
      "gists_url": "https://api.github.com/users/jesperkristensen58/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jesperkristensen58/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jesperkristensen58/subscriptions",
      "organizations_url": "https://api.github.com/users/jesperkristensen58/orgs",
      "repos_url": "https://api.github.com/users/jesperkristensen58/repos",
      "events_url": "https://api.github.com/users/jesperkristensen58/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jesperkristensen58/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-01-18T13:02:10Z",
    "updated_at": "2023-01-18T13:02:10Z",
    "author_association": "NONE",
    "body": "It would be nice to be able to set a full bucket.\r\n\r\nWe can either create a special function for this, or increase the uint8 for that reason.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1387038091/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1387040382",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3963#issuecomment-1387040382",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3963",
    "id": 1387040382,
    "node_id": "IC_kwDOA9tCBs5SrI5-",
    "user": {
      "login": "Amxx",
      "id": 2432299,
      "node_id": "MDQ6VXNlcjI0MzIyOTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2432299?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Amxx",
      "html_url": "https://github.com/Amxx",
      "followers_url": "https://api.github.com/users/Amxx/followers",
      "following_url": "https://api.github.com/users/Amxx/following{/other_user}",
      "gists_url": "https://api.github.com/users/Amxx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Amxx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Amxx/subscriptions",
      "organizations_url": "https://api.github.com/users/Amxx/orgs",
      "repos_url": "https://api.github.com/users/Amxx/repos",
      "events_url": "https://api.github.com/users/Amxx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Amxx/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-01-18T13:03:52Z",
    "updated_at": "2023-01-18T13:04:29Z",
    "author_association": "COLLABORATOR",
    "body": "If we increase the uint8, the next type is uint16... but then if someone provides the max value for this type, that implies updating 256 buckets, which is not ok.\r\n\r\nI'm not a big fan of doing `require(length <= 256)`",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1387040382/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1387044089",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3963#issuecomment-1387044089",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3963",
    "id": 1387044089,
    "node_id": "IC_kwDOA9tCBs5SrJz5",
    "user": {
      "login": "jesperkristensen58",
      "id": 17262072,
      "node_id": "MDQ6VXNlcjE3MjYyMDcy",
      "avatar_url": "https://avatars.githubusercontent.com/u/17262072?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jesperkristensen58",
      "html_url": "https://github.com/jesperkristensen58",
      "followers_url": "https://api.github.com/users/jesperkristensen58/followers",
      "following_url": "https://api.github.com/users/jesperkristensen58/following{/other_user}",
      "gists_url": "https://api.github.com/users/jesperkristensen58/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jesperkristensen58/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jesperkristensen58/subscriptions",
      "organizations_url": "https://api.github.com/users/jesperkristensen58/orgs",
      "repos_url": "https://api.github.com/users/jesperkristensen58/repos",
      "events_url": "https://api.github.com/users/jesperkristensen58/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jesperkristensen58/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-01-18T13:06:22Z",
    "updated_at": "2023-01-18T13:06:22Z",
    "author_association": "NONE",
    "body": "so can we do start index and end index instead?",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1387044089/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1387056441",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3963#issuecomment-1387056441",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3963",
    "id": 1387056441,
    "node_id": "IC_kwDOA9tCBs5SrM05",
    "user": {
      "login": "Amxx",
      "id": 2432299,
      "node_id": "MDQ6VXNlcjI0MzIyOTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2432299?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Amxx",
      "html_url": "https://github.com/Amxx",
      "followers_url": "https://api.github.com/users/Amxx/followers",
      "following_url": "https://api.github.com/users/Amxx/following{/other_user}",
      "gists_url": "https://api.github.com/users/Amxx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Amxx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Amxx/subscriptions",
      "organizations_url": "https://api.github.com/users/Amxx/orgs",
      "repos_url": "https://api.github.com/users/Amxx/repos",
      "events_url": "https://api.github.com/users/Amxx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Amxx/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-01-18T13:14:57Z",
    "updated_at": "2023-01-18T13:14:57Z",
    "author_association": "COLLABORATOR",
    "body": "Start index must be uint256. I guess end index also needs to be uint256. Then we would need to check that `startIndex < endIndex <= startIndex + 256`\r\n\r\nnot sure that is any better",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1387056441/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1387058120",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3963#issuecomment-1387058120",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3963",
    "id": 1387058120,
    "node_id": "IC_kwDOA9tCBs5SrNPI",
    "user": {
      "login": "jesperkristensen58",
      "id": 17262072,
      "node_id": "MDQ6VXNlcjE3MjYyMDcy",
      "avatar_url": "https://avatars.githubusercontent.com/u/17262072?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jesperkristensen58",
      "html_url": "https://github.com/jesperkristensen58",
      "followers_url": "https://api.github.com/users/jesperkristensen58/followers",
      "following_url": "https://api.github.com/users/jesperkristensen58/following{/other_user}",
      "gists_url": "https://api.github.com/users/jesperkristensen58/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jesperkristensen58/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jesperkristensen58/subscriptions",
      "organizations_url": "https://api.github.com/users/jesperkristensen58/orgs",
      "repos_url": "https://api.github.com/users/jesperkristensen58/repos",
      "events_url": "https://api.github.com/users/jesperkristensen58/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jesperkristensen58/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-01-18T13:16:07Z",
    "updated_at": "2023-01-18T13:16:07Z",
    "author_association": "NONE",
    "body": "True, I actually in that case like the uint16 better, but overall does not get rid of the check.\r\nWe already check for length == 0 though ...",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1387058120/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1387063695",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3963#issuecomment-1387063695",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3963",
    "id": 1387063695,
    "node_id": "IC_kwDOA9tCBs5SrOmP",
    "user": {
      "login": "Amxx",
      "id": 2432299,
      "node_id": "MDQ6VXNlcjI0MzIyOTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2432299?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Amxx",
      "html_url": "https://github.com/Amxx",
      "followers_url": "https://api.github.com/users/Amxx/followers",
      "following_url": "https://api.github.com/users/Amxx/following{/other_user}",
      "gists_url": "https://api.github.com/users/Amxx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Amxx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Amxx/subscriptions",
      "organizations_url": "https://api.github.com/users/Amxx/orgs",
      "repos_url": "https://api.github.com/users/Amxx/repos",
      "events_url": "https://api.github.com/users/Amxx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Amxx/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-01-18T13:20:10Z",
    "updated_at": "2023-01-18T13:20:10Z",
    "author_association": "COLLABORATOR",
    "body": "`length == 0` is a no-op, not an error. We can return without doing anything and that is valid.\r\n\r\n`require(length <= 256)` is different because it reverts, which is way worst. Even with documentation, there is always someone that calls the function with a parameter that is uint16 ... and the contract will work for a while until the value becomes too big. At that point the library reverts, and that could completely block the contract ... resulting in a potential loss of funds.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1387063695/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1387076033",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3963#issuecomment-1387076033",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3963",
    "id": 1387076033,
    "node_id": "IC_kwDOA9tCBs5SrRnB",
    "user": {
      "login": "jesperkristensen58",
      "id": 17262072,
      "node_id": "MDQ6VXNlcjE3MjYyMDcy",
      "avatar_url": "https://avatars.githubusercontent.com/u/17262072?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jesperkristensen58",
      "html_url": "https://github.com/jesperkristensen58",
      "followers_url": "https://api.github.com/users/jesperkristensen58/followers",
      "following_url": "https://api.github.com/users/jesperkristensen58/following{/other_user}",
      "gists_url": "https://api.github.com/users/jesperkristensen58/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jesperkristensen58/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jesperkristensen58/subscriptions",
      "organizations_url": "https://api.github.com/users/jesperkristensen58/orgs",
      "repos_url": "https://api.github.com/users/jesperkristensen58/repos",
      "events_url": "https://api.github.com/users/jesperkristensen58/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jesperkristensen58/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-01-18T13:28:37Z",
    "updated_at": "2023-01-18T13:28:37Z",
    "author_association": "NONE",
    "body": "i was thinking of no-opping on <= 256 too.\r\n\r\nbut if no, we could:\r\n\r\n1) write another function to set the full bucket\r\n\r\nor \r\n\r\n2) introduce a new variable, maybe a bool, saying \"setAllBits\" or something like that.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1387076033/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1387079939",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3963#issuecomment-1387079939",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3963",
    "id": 1387079939,
    "node_id": "IC_kwDOA9tCBs5SrSkD",
    "user": {
      "login": "jesperkristensen58",
      "id": 17262072,
      "node_id": "MDQ6VXNlcjE3MjYyMDcy",
      "avatar_url": "https://avatars.githubusercontent.com/u/17262072?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jesperkristensen58",
      "html_url": "https://github.com/jesperkristensen58",
      "followers_url": "https://api.github.com/users/jesperkristensen58/followers",
      "following_url": "https://api.github.com/users/jesperkristensen58/following{/other_user}",
      "gists_url": "https://api.github.com/users/jesperkristensen58/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jesperkristensen58/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jesperkristensen58/subscriptions",
      "organizations_url": "https://api.github.com/users/jesperkristensen58/orgs",
      "repos_url": "https://api.github.com/users/jesperkristensen58/repos",
      "events_url": "https://api.github.com/users/jesperkristensen58/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jesperkristensen58/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-01-18T13:31:33Z",
    "updated_at": "2023-01-18T13:31:33Z",
    "author_association": "NONE",
    "body": "Or we redefine what \"0\" means in \"length\" (potentially renaming \"length\")",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1387079939/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1387718051",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3963#issuecomment-1387718051",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3963",
    "id": 1387718051,
    "node_id": "IC_kwDOA9tCBs5StuWj",
    "user": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-01-18T20:14:41Z",
    "updated_at": "2023-01-18T20:14:41Z",
    "author_association": "MEMBER",
    "body": "To summarize, this is a proposal to add a function `setTo(BitMap storage bitmap, uint256 index, uint8 length, bool value)` that will set `length` bits starting at `index` to 1 or 0 according to `value`.\r\n\r\nI don't think it's a big problem if length=256 can't be expressed.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1387718051/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1387729338",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3963#issuecomment-1387729338",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3963",
    "id": 1387729338,
    "node_id": "IC_kwDOA9tCBs5StxG6",
    "user": {
      "login": "jesperkristensen58",
      "id": 17262072,
      "node_id": "MDQ6VXNlcjE3MjYyMDcy",
      "avatar_url": "https://avatars.githubusercontent.com/u/17262072?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jesperkristensen58",
      "html_url": "https://github.com/jesperkristensen58",
      "followers_url": "https://api.github.com/users/jesperkristensen58/followers",
      "following_url": "https://api.github.com/users/jesperkristensen58/following{/other_user}",
      "gists_url": "https://api.github.com/users/jesperkristensen58/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jesperkristensen58/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jesperkristensen58/subscriptions",
      "organizations_url": "https://api.github.com/users/jesperkristensen58/orgs",
      "repos_url": "https://api.github.com/users/jesperkristensen58/repos",
      "events_url": "https://api.github.com/users/jesperkristensen58/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jesperkristensen58/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-01-18T20:21:19Z",
    "updated_at": "2023-01-18T20:21:19Z",
    "author_association": "NONE",
    "body": "Thanks, @frangio.\r\n\r\nIt would be valuable having a way to set a bucket entirely to 1 or 0 (due to the airdrop example mentioned, and to make it less strange). Are you saying that we can still do this even with uint8? Or that we shouldn't support this?\r\n\r\nCurrently:\r\n\r\n`bitmap.setTo(0, 256, 1)`\r\n\r\nWould set all the bucket's bits to 1 but can't be done now.\r\n\r\nUnless we let:\r\n\r\n`bitmap.setTo(0, 0, 1)`\r\n\r\nmean \"set the bit in the first index to 1\".\r\n\r\nThen this would set all bits, and can be done: `bitmap.setTo(0, 255, 1)`.\r\n\r\nWhat are your thoughts on this?",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1387729338/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1396200035",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3963#issuecomment-1396200035",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3963",
    "id": 1396200035,
    "node_id": "IC_kwDOA9tCBs5TOFJj",
    "user": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-01-18T22:52:19Z",
    "updated_at": "2023-01-18T22:52:19Z",
    "author_association": "MEMBER",
    "body": "> Unless we let: `bitmap.setTo(0, 0, 1)` mean \"set the bit in the first index to 1\".\r\n\r\nThis is not intuitive and people might not read the docs well enough.\r\n\r\n\r\n\r\n> This would be helpful, e.g., in an NFT bitmap-based airdrop where we start with 1-bits and switch them to 0 as mints occur.\r\n\r\nPlease note that this is not good justification... Such a contract should start with 0-bits because it's the default value.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1396200035/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1396201601",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3963#issuecomment-1396201601",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3963",
    "id": 1396201601,
    "node_id": "IC_kwDOA9tCBs5TOFiB",
    "user": {
      "login": "jesperkristensen58",
      "id": 17262072,
      "node_id": "MDQ6VXNlcjE3MjYyMDcy",
      "avatar_url": "https://avatars.githubusercontent.com/u/17262072?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jesperkristensen58",
      "html_url": "https://github.com/jesperkristensen58",
      "followers_url": "https://api.github.com/users/jesperkristensen58/followers",
      "following_url": "https://api.github.com/users/jesperkristensen58/following{/other_user}",
      "gists_url": "https://api.github.com/users/jesperkristensen58/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jesperkristensen58/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jesperkristensen58/subscriptions",
      "organizations_url": "https://api.github.com/users/jesperkristensen58/orgs",
      "repos_url": "https://api.github.com/users/jesperkristensen58/repos",
      "events_url": "https://api.github.com/users/jesperkristensen58/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jesperkristensen58/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-01-18T22:54:32Z",
    "updated_at": "2023-01-18T22:54:32Z",
    "author_association": "NONE",
    "body": "> This is not intuitive and people might not read the docs well enough.\r\n\r\nI agree. I do like the uint16 the best and perhaps no-op anything >256. seems cleanest and simplest.\r\n\r\n> Please note that this is not good justification... Such a contract should start with 0-bits because it's the default value.\r\n\r\nThe reason for starting at 1 and converting to 0 is due to gas savings. Setting non-zero to zero is the least costly and will save users lots of money. There are many use-cases like this.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1396201601/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1396358489",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3963#issuecomment-1396358489",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3963",
    "id": 1396358489,
    "node_id": "IC_kwDOA9tCBs5TOr1Z",
    "user": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-01-19T02:21:28Z",
    "updated_at": "2023-01-19T02:22:47Z",
    "author_association": "MEMBER",
    "body": "Ok so what you're saying is that as the deployer you would set all to 1 so that users don't need to pay the cost of changing zero to non-zero? That's interesting.\r\n\r\nWhat I'm starting to consider is that perhaps we should just allow length > 256 and alert people that using an unbounded length will consume unbounded gas. Do we have other cases of unbounded execution in the library currently?\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1396358489/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1396498342",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3963#issuecomment-1396498342",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3963",
    "id": 1396498342,
    "node_id": "IC_kwDOA9tCBs5TPN-m",
    "user": {
      "login": "jesperkristensen58",
      "id": 17262072,
      "node_id": "MDQ6VXNlcjE3MjYyMDcy",
      "avatar_url": "https://avatars.githubusercontent.com/u/17262072?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jesperkristensen58",
      "html_url": "https://github.com/jesperkristensen58",
      "followers_url": "https://api.github.com/users/jesperkristensen58/followers",
      "following_url": "https://api.github.com/users/jesperkristensen58/following{/other_user}",
      "gists_url": "https://api.github.com/users/jesperkristensen58/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jesperkristensen58/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jesperkristensen58/subscriptions",
      "organizations_url": "https://api.github.com/users/jesperkristensen58/orgs",
      "repos_url": "https://api.github.com/users/jesperkristensen58/repos",
      "events_url": "https://api.github.com/users/jesperkristensen58/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jesperkristensen58/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-01-19T06:28:47Z",
    "updated_at": "2023-01-19T06:28:47Z",
    "author_association": "NONE",
    "body": "> Ok so what you're saying is that as the deployer you would set all to 1 so that users don't need to pay the cost of changing zero to non-zero? That's interesting.\r\n\r\nExactly.\r\n\r\n> What I'm starting to consider is that perhaps we should just allow length > 256 and alert people that using an unbounded length will consume unbounded gas.\r\n\r\nI'm fully onboard with this.\r\n\r\n> Do we have other cases of unbounded execution in the library currently?\r\n\r\nThis was from a quick glance:\r\nhttps://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/structs/EnumerableSet.sol#L216\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1396498342/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1399350915",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3963#issuecomment-1399350915",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3963",
    "id": 1399350915,
    "node_id": "IC_kwDOA9tCBs5TaGaD",
    "user": {
      "login": "jesperkristensen58",
      "id": 17262072,
      "node_id": "MDQ6VXNlcjE3MjYyMDcy",
      "avatar_url": "https://avatars.githubusercontent.com/u/17262072?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jesperkristensen58",
      "html_url": "https://github.com/jesperkristensen58",
      "followers_url": "https://api.github.com/users/jesperkristensen58/followers",
      "following_url": "https://api.github.com/users/jesperkristensen58/following{/other_user}",
      "gists_url": "https://api.github.com/users/jesperkristensen58/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jesperkristensen58/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jesperkristensen58/subscriptions",
      "organizations_url": "https://api.github.com/users/jesperkristensen58/orgs",
      "repos_url": "https://api.github.com/users/jesperkristensen58/repos",
      "events_url": "https://api.github.com/users/jesperkristensen58/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jesperkristensen58/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-01-21T23:09:03Z",
    "updated_at": "2023-01-21T23:09:03Z",
    "author_association": "NONE",
    "body": "@frangio ",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1399350915/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1438621599",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3963#issuecomment-1438621599",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3963",
    "id": 1438621599,
    "node_id": "IC_kwDOA9tCBs5Vv5-f",
    "user": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-02-21T14:53:18Z",
    "updated_at": "2023-02-21T14:53:18Z",
    "author_association": "MEMBER",
    "body": "Sorry @jesperkristensen58 this will not make it in the next release.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1438621599/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1438652464",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3963#issuecomment-1438652464",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3963",
    "id": 1438652464,
    "node_id": "IC_kwDOA9tCBs5VwBgw",
    "user": {
      "login": "jesperkristensen58",
      "id": 17262072,
      "node_id": "MDQ6VXNlcjE3MjYyMDcy",
      "avatar_url": "https://avatars.githubusercontent.com/u/17262072?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jesperkristensen58",
      "html_url": "https://github.com/jesperkristensen58",
      "followers_url": "https://api.github.com/users/jesperkristensen58/followers",
      "following_url": "https://api.github.com/users/jesperkristensen58/following{/other_user}",
      "gists_url": "https://api.github.com/users/jesperkristensen58/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jesperkristensen58/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jesperkristensen58/subscriptions",
      "organizations_url": "https://api.github.com/users/jesperkristensen58/orgs",
      "repos_url": "https://api.github.com/users/jesperkristensen58/repos",
      "events_url": "https://api.github.com/users/jesperkristensen58/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jesperkristensen58/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-02-21T15:12:35Z",
    "updated_at": "2023-02-21T15:12:35Z",
    "author_association": "NONE",
    "body": "No problem; thanks for the update",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1438652464/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
