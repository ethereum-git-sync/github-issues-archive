{
  "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3882",
  "repository_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts",
  "labels_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3882/labels{/name}",
  "comments_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3882/comments",
  "events_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3882/events",
  "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3882",
  "id": 1499698649,
  "node_id": "I_kwDOA9tCBs5ZY5XZ",
  "number": 3882,
  "title": "Add method `keys` for `EnumerableMap`",
  "user": {
    "login": "vlad-khramov",
    "id": 1215671,
    "node_id": "MDQ6VXNlcjEyMTU2NzE=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1215671?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vlad-khramov",
    "html_url": "https://github.com/vlad-khramov",
    "followers_url": "https://api.github.com/users/vlad-khramov/followers",
    "following_url": "https://api.github.com/users/vlad-khramov/following{/other_user}",
    "gists_url": "https://api.github.com/users/vlad-khramov/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vlad-khramov/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vlad-khramov/subscriptions",
    "organizations_url": "https://api.github.com/users/vlad-khramov/orgs",
    "repos_url": "https://api.github.com/users/vlad-khramov/repos",
    "events_url": "https://api.github.com/users/vlad-khramov/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vlad-khramov/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 503650966,
      "node_id": "MDU6TGFiZWw1MDM2NTA5NjY=",
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/labels/good%20first%20issue",
      "name": "good first issue",
      "color": "0e8a16",
      "default": true,
      "description": "Low hanging fruit for new contributors to get involved!"
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 0,
  "created_at": "2022-12-16T06:57:22Z",
  "updated_at": "2023-01-03T21:25:39Z",
  "closed_at": "2023-01-03T21:25:39Z",
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "**üßê Motivation**\r\n\r\nAdd convenient way for retrieving all keys of `EnumerableMap`. I understand that this method will have limited usage (as `EnumerableSet.values()`)\r\n\r\n\r\n**üìù Details**\r\nThere are possibilities to get all the keys of EnumerableMap, but they are quite inconvenient. Examles for `EnumerableMap.UintToUintMap`:\r\n```solidity\r\n        bytes32[] memory temp = map._inner._keys._inner._values;\r\n        uint256[] memory result;\r\n\r\n        assembly {\r\n            result := temp\r\n        }\r\n```\r\nor\r\n```solidity\r\nusing EnumerableSet for EnumerableSet.Bytes32Set;\r\n...\r\n        bytes32[] memory temp = map._inner._keys.values();\r\n        uint256[] memory result;\r\n\r\n        assembly {\r\n            result := temp\r\n        }\r\n```\r\nor even loop by all keys.\r\n\r\nI propose to add method keys with imlementation as in the example 2 above\r\n",
  "closed_by": {
    "login": "Amxx",
    "id": 2432299,
    "node_id": "MDQ6VXNlcjI0MzIyOTk=",
    "avatar_url": "https://avatars.githubusercontent.com/u/2432299?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/Amxx",
    "html_url": "https://github.com/Amxx",
    "followers_url": "https://api.github.com/users/Amxx/followers",
    "following_url": "https://api.github.com/users/Amxx/following{/other_user}",
    "gists_url": "https://api.github.com/users/Amxx/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/Amxx/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/Amxx/subscriptions",
    "organizations_url": "https://api.github.com/users/Amxx/orgs",
    "repos_url": "https://api.github.com/users/Amxx/repos",
    "events_url": "https://api.github.com/users/Amxx/events{/privacy}",
    "received_events_url": "https://api.github.com/users/Amxx/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3882/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3882/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[

]
