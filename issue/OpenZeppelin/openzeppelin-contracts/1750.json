{
  "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1750",
  "repository_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts",
  "labels_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1750/labels{/name}",
  "comments_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1750/comments",
  "events_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1750/events",
  "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1750",
  "id": 443208248,
  "node_id": "MDU6SXNzdWU0NDMyMDgyNDg=",
  "number": 1750,
  "title": "Behavior of ERC165Checker when less than 30k gas available",
  "user": {
    "login": "wighawag",
    "id": 790580,
    "node_id": "MDQ6VXNlcjc5MDU4MA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/790580?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/wighawag",
    "html_url": "https://github.com/wighawag",
    "followers_url": "https://api.github.com/users/wighawag/followers",
    "following_url": "https://api.github.com/users/wighawag/following{/other_user}",
    "gists_url": "https://api.github.com/users/wighawag/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/wighawag/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/wighawag/subscriptions",
    "organizations_url": "https://api.github.com/users/wighawag/orgs",
    "repos_url": "https://api.github.com/users/wighawag/repos",
    "events_url": "https://api.github.com/users/wighawag/events{/privacy}",
    "received_events_url": "https://api.github.com/users/wighawag/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 417782817,
      "node_id": "MDU6TGFiZWw0MTc3ODI4MTc=",
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/labels/bug",
      "name": "bug",
      "color": "b60205",
      "default": true,
      "description": null
    },
    {
      "id": 1000207718,
      "node_id": "MDU6TGFiZWwxMDAwMjA3NzE4",
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/labels/contracts",
      "name": "contracts",
      "color": "1d76db",
      "default": false,
      "description": "Smart contract code."
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 19,
  "created_at": "2019-05-13T05:12:44Z",
  "updated_at": "2023-10-30T01:12:48Z",
  "closed_at": null,
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "\r\n[EIP-165](http://eips.ethereum.org/EIPS/eip-165) stipulate that ```supportsInterface``` can use up to 30,000 gas.\r\n\r\nBut as you can see in openzeppelin implementation [here](https://github.com/OpenZeppelin/openzeppelin-solidity/blob/fa004a7f5de572b3dbcde1a8a81f9a87e353e799/contracts/introspection/ERC165Checker.sol#L110-L119), the call is executed without making sure 30,000 gas is indeed given to the call. Remember, the gas provided as part of the STATIC_CALL is just a maximum.\r\n\r\nAnd because of [EIP-150](http://eips.ethereum.org/EIPS/eip-150) behaviour, it is possible for ```supportsInterface``` to get less gas than required for it to complete (and thus throw which is interpreted wrongly as non-implementation) while the rest of the transaction continue and complete.\r\n\r\nI described the issue in more details [here](https://github.com/ethereum/EIPs/pull/881#issuecomment-491677748) as the issue is also present in the example implementation described at EIP-165.\r\n\r\nVarious solution are presented here but the best option is [EIP-1930](https://github.com/ethereum/EIPs/issues/1930) which also solve issue present in other use cases like meta-transactions.\r\n\r\nAlso find some test case regarding EIP-165 [here](https://github.com/wighawag/ethereum_gas)\r\n",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1750/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1750/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/491687616",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1750#issuecomment-491687616",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1750",
    "id": 491687616,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ5MTY4NzYxNg==",
    "user": {
      "login": "nventuro",
      "id": 2530770,
      "node_id": "MDQ6VXNlcjI1MzA3NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2530770?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nventuro",
      "html_url": "https://github.com/nventuro",
      "followers_url": "https://api.github.com/users/nventuro/followers",
      "following_url": "https://api.github.com/users/nventuro/following{/other_user}",
      "gists_url": "https://api.github.com/users/nventuro/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nventuro/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nventuro/subscriptions",
      "organizations_url": "https://api.github.com/users/nventuro/orgs",
      "repos_url": "https://api.github.com/users/nventuro/repos",
      "events_url": "https://api.github.com/users/nventuro/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nventuro/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-05-13T06:05:45Z",
    "updated_at": "2019-05-13T06:05:45Z",
    "author_association": "CONTRIBUTOR",
    "body": "Hello @wighawag, thank you for reporting this!\r\n\r\nHow would you suggest to change the implementation? If, as you've mentioned, that function is called with less than 30k gas available, then the execution will error out with an 'out of gas' error, which is different from a regular revert. However, if there's indeed not enough gas, what could the contract do, other than erroring out early?",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/491687616/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/491689178",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1750#issuecomment-491689178",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1750",
    "id": 491689178,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ5MTY4OTE3OA==",
    "user": {
      "login": "wighawag",
      "id": 790580,
      "node_id": "MDQ6VXNlcjc5MDU4MA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/790580?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wighawag",
      "html_url": "https://github.com/wighawag",
      "followers_url": "https://api.github.com/users/wighawag/followers",
      "following_url": "https://api.github.com/users/wighawag/following{/other_user}",
      "gists_url": "https://api.github.com/users/wighawag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wighawag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wighawag/subscriptions",
      "organizations_url": "https://api.github.com/users/wighawag/orgs",
      "repos_url": "https://api.github.com/users/wighawag/repos",
      "events_url": "https://api.github.com/users/wighawag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wighawag/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-05-13T06:13:28Z",
    "updated_at": "2019-05-13T06:13:28Z",
    "author_association": "NONE",
    "body": "Hi @nventuro  I mention various solution available today on [EIP-1930](https://github.com/ethereum/EIPs/issues/1930) as well as on [EIP-165 discussion](https://github.com/ethereum/EIPs/pull/881#issuecomment-491677748)\r\n\r\nIt can \r\n- check for gas (via ```gasleft()```) before the call but need to account for the gas required between the call to ```gasleft()``` and the actual call\r\n- check for gas afterward assuming supportsinterface is not quitting early based on the gas passed in,\r\n\r\nBut the best solution is to add functionality in the EVM for that : see [EIP-1930](https://github.com/ethereum/EIPs/issues/1930)\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/491689178/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/491878642",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1750#issuecomment-491878642",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1750",
    "id": 491878642,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ5MTg3ODY0Mg==",
    "user": {
      "login": "nventuro",
      "id": 2530770,
      "node_id": "MDQ6VXNlcjI1MzA3NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2530770?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nventuro",
      "html_url": "https://github.com/nventuro",
      "followers_url": "https://api.github.com/users/nventuro/followers",
      "following_url": "https://api.github.com/users/nventuro/following{/other_user}",
      "gists_url": "https://api.github.com/users/nventuro/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nventuro/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nventuro/subscriptions",
      "organizations_url": "https://api.github.com/users/nventuro/orgs",
      "repos_url": "https://api.github.com/users/nventuro/repos",
      "events_url": "https://api.github.com/users/nventuro/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nventuro/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-05-13T15:48:39Z",
    "updated_at": "2019-05-13T15:49:32Z",
    "author_association": "CONTRIBUTOR",
    "body": ">check for gas (via gasleft()) before the call but need to account for the gas required between the call to gasleft() and the actual call\r\n\r\nWhat is the intent behind this? What should a contract do if it has less than 30k gas available to make the call?\r\n\r\n>check for gas afterward assuming supportsinterface is not quitting early based on the gas passed in,\r\n\r\n30k will be sent if they are available: the only way for the implementer to quit early is if the transaction doesn't have enough gas, in which case the caller will revert with an out of gas error.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/491878642/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 1,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/491899224",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1750#issuecomment-491899224",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1750",
    "id": 491899224,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ5MTg5OTIyNA==",
    "user": {
      "login": "wighawag",
      "id": 790580,
      "node_id": "MDQ6VXNlcjc5MDU4MA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/790580?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wighawag",
      "html_url": "https://github.com/wighawag",
      "followers_url": "https://api.github.com/users/wighawag/followers",
      "following_url": "https://api.github.com/users/wighawag/following{/other_user}",
      "gists_url": "https://api.github.com/users/wighawag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wighawag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wighawag/subscriptions",
      "organizations_url": "https://api.github.com/users/wighawag/orgs",
      "repos_url": "https://api.github.com/users/wighawag/repos",
      "events_url": "https://api.github.com/users/wighawag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wighawag/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-05-13T16:45:05Z",
    "updated_at": "2019-05-13T16:46:12Z",
    "author_association": "NONE",
    "body": ">> check for gas (via gasleft()) before the call but need to account for the gas required between the call to gasleft() and the actual call\r\n\r\n>What is the intent behind this? What should a contract do if it has less than 30k gas available to make the call?\r\n\r\n```_callERC165SupportsInterface``` can be\r\n```\r\nfunction _callERC165SupportsInterface(address account, bytes4 interfaceId)\r\n    private\r\n    view\r\n    returns (bool success, bool result)\r\n{\r\n    bytes memory encodedParams = abi.encodeWithSelector(_INTERFACE_ID_ERC165, interfaceId);\r\n\r\n    uint256 gasAvailable = gasleft() - E;\r\n    require(gasAvailable - gasAvailable / 64  >= 30000, \"not enough gas provided\")\r\n    // solhint-disable-next-line no-inline-assembly\r\n    assembly {\r\n        let encodedParams_data := add(0x20, encodedParams)\r\n        let encodedParams_size := mload(encodedParams)\r\n\r\n        let output := mload(0x40)    // Find empty storage location using \"free memory pointer\"\r\n        mstore(output, 0x0)\r\n\r\n        success := staticcall(\r\n            30000,                   // 30k gas\r\n            account,                 // To addr\r\n            encodedParams_data,\r\n            encodedParams_size,\r\n            output,\r\n            0x20                     // Outputs are 32 bytes long\r\n        )\r\n\r\n        result := mload(output)      // Load the result\r\n    }\r\n}\r\n```\r\nwhere E is the gas required for the operations between the call to ```gasleft()``` and the actual call.\r\nUnfortunately this computation will be dependent on gas pricing. And as such an overestimation is required.\r\n\r\nFor the intent, the idea is that if ```_callERC165SupportsInterface ``` can't ensure that ```supportsInterface``` will receive 30,000 gas, it has to revert the call since it cannot be sure whether ```supportsInterface``` throw because it did not received enough gas or simply because it does not implement ```supportsInterface```\r\n\r\n\r\n\r\n> > check for gas afterward assuming supportsinterface is not quitting early based on the gas passed in,\r\n\r\n>30k will be sent if they are available: the only way for the implementer to quit early is if the transaction doesn't have enough gas, in which case the caller will revert with an out of gas error.\r\n\r\nWhile it is unlikely in the context of ERC-165 I wanted to make it clear that the \"after-the-call\" check does not work if the implementer of ```supportsInterface``` is doing something like ```require(gasleft() > X``` as in that case it could quit earlier because of a lack of gas, while not using all gas provided. If that happen the check ```gasleft() > 30,000 / 63``` will not be sufficient since while less than 30,000 was given there could be more than 30,000/63 left.\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/491899224/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/492355503",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1750#issuecomment-492355503",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1750",
    "id": 492355503,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ5MjM1NTUwMw==",
    "user": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-05-14T18:30:11Z",
    "updated_at": "2019-05-14T18:31:38Z",
    "author_association": "MEMBER",
    "body": "Thanks for bringing this up @wighawag. Super interesting.\r\n\r\n> Unfortunately this computation will be dependent on gas pricing. And as such an overestimation is required.\r\n\r\nTo be clear, by \"gas pricing\" you mean the gas cost of each opcode, right?",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/492355503/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/492360135",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1750#issuecomment-492360135",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1750",
    "id": 492360135,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ5MjM2MDEzNQ==",
    "user": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-05-14T18:42:31Z",
    "updated_at": "2019-05-14T18:42:31Z",
    "author_association": "MEMBER",
    "body": "I'm looking at the EIP and it seems rather clear that a reverting `supportsInterface` should only be interpreted to mean \"false\" when querying about supporting ERC165 itself.\r\n\r\n> **How to Detect if a Contract Implements ERC-165**\r\n> \r\n> 1. The source contract makes a `STATICCALL` to the destination address with input data: `0x01ffc9a701ffc9a700000000000000000000000000000000000000000000000000000000` and gas 30,000. This corresponds to `contract.supportsInterface(0x01ffc9a7)`.\r\n> 2. **If the call fails or return false**, the destination contract does not implement ERC-165.\r\n> 3. If the call returns true, a second call is made with input data `0x01ffc9a7ffffffff00000000000000000000000000000000000000000000000000000000`.\r\n> 4. **If the second call fails or returns true**, the destination contract does not implement ERC-165.\r\n> 5. Otherwise it implements ERC-165.\r\n> \r\n> **How to Detect if a Contract Implements any Given Interface**\r\n> \r\n> 1. If you are not sure if the contract implements ERC-165, use the above procedure to confirm.\r\n> 2. If it does not implement ERC-165, then you will have to see what methods it uses the old-fashioned way.\r\n> 3. If it implements ERC-165 then just call `supportsInterface(interfaceID)` to determine if it implements an interface you can use.\r\n\r\nNote how the second list doesn't mention anything about a failing call. This impies that reverts must be propagated.\r\n\r\nSo there are two bugs in our implementation:\r\n\r\n1) `ERC165Checker._supportsERC165` is affected by the gas-related bug reported in this issue.\r\n2) `ERC165Checker._supportsInterface` is not propagating reverts like it should be.\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/492360135/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/492361739",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1750#issuecomment-492361739",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1750",
    "id": 492361739,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ5MjM2MTczOQ==",
    "user": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-05-14T18:47:02Z",
    "updated_at": "2019-05-14T18:50:19Z",
    "author_association": "MEMBER",
    "body": "The second bug is easy to fix. The first one is the tricky one.\r\n\r\n> the \"after-the-call\" check does not work if the implementer of `supportsInterface` is doing something like `require(gasleft() > X)`\r\n\r\n@wighawag In this case it is the implementer who is buggy. Because of the following line from the EIP:\r\n\r\n> If the call fails or return false, the destination contract does not implement ERC-165.\r\n\r\nThis implies that if the implementer indeed does `require(gasleft() > X)` it should be interpreted as not implementing ERC165. (This definitely deserves special mention in the EIP.)\r\n\r\nWith this in mind, do you think an after-the-call check would work? I will give this a bit more thought and get back.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/492361739/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/492366209",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1750#issuecomment-492366209",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1750",
    "id": 492366209,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ5MjM2NjIwOQ==",
    "user": {
      "login": "nventuro",
      "id": 2530770,
      "node_id": "MDQ6VXNlcjI1MzA3NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2530770?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nventuro",
      "html_url": "https://github.com/nventuro",
      "followers_url": "https://api.github.com/users/nventuro/followers",
      "following_url": "https://api.github.com/users/nventuro/following{/other_user}",
      "gists_url": "https://api.github.com/users/nventuro/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nventuro/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nventuro/subscriptions",
      "organizations_url": "https://api.github.com/users/nventuro/orgs",
      "repos_url": "https://api.github.com/users/nventuro/repos",
      "events_url": "https://api.github.com/users/nventuro/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nventuro/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-05-14T18:59:14Z",
    "updated_at": "2019-05-14T18:59:14Z",
    "author_association": "CONTRIBUTOR",
    "body": "Thanks for reporting this @wighawag, I had forgotten about the 63/64ths rule. \r\n\r\nIn the worst case, a contract needs 30k gas to execute its function, and is provided only 29,999. This means that the caller will end up with 476 gas (`29999 / 63`) after the (failed) call. I don't think 476 gas is enough for a contract to perform any significant action (and this is the _absolute worst case_), but it _is_ enough for a `view` function to return, which may be used to trick whomever is calling (maybe a dApp's UI)? We should therefore definitely fix this.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/492366209/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/492369546",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1750#issuecomment-492369546",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1750",
    "id": 492369546,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ5MjM2OTU0Ng==",
    "user": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-05-14T19:08:38Z",
    "updated_at": "2019-05-14T19:08:38Z",
    "author_association": "MEMBER",
    "body": "Pasting here @wighawag's suggestion from https://github.com/ethereum/EIPs/pull/881#issuecomment-491677748:\r\n\r\n>  check for gasleft() after the call\r\n>\r\n>```\r\n>// execute STATIC_CALL with 30000 gas\r\n>require(gasleft() > 30000/63, \"not enough gas left\");\r\n>```\r\n>\r\n>This works because if the call throw because of not enough gas, the amount of gas left will be lower than 30000/63. But this also require for `supportsInterface` to not have code like `require(gasleft() > X)` since this in that case, the gas left after the call would be bigger than what it would be if all the gas was used\r\n>This does not depend on gas pricing except for the 1/64 behavior of EIP-150\r\n\r\nGiven the considerations above, I think this is the best course of action.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/492369546/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/492372940",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1750#issuecomment-492372940",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1750",
    "id": 492372940,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ5MjM3Mjk0MA==",
    "user": {
      "login": "nventuro",
      "id": 2530770,
      "node_id": "MDQ6VXNlcjI1MzA3NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2530770?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nventuro",
      "html_url": "https://github.com/nventuro",
      "followers_url": "https://api.github.com/users/nventuro/followers",
      "following_url": "https://api.github.com/users/nventuro/following{/other_user}",
      "gists_url": "https://api.github.com/users/nventuro/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nventuro/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nventuro/subscriptions",
      "organizations_url": "https://api.github.com/users/nventuro/orgs",
      "repos_url": "https://api.github.com/users/nventuro/repos",
      "events_url": "https://api.github.com/users/nventuro/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nventuro/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-05-14T19:17:25Z",
    "updated_at": "2019-05-14T19:17:25Z",
    "author_association": "CONTRIBUTOR",
    "body": "@frangio is the idea behind that check to not require the caller tx to have over 30k gas? Shouldn't we also only revert if the call failed? i.e. if the call failed and it _possibly_ run out of gas (there's less than 30k/63 remaining), then we revert.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/492372940/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/492373656",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1750#issuecomment-492373656",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1750",
    "id": 492373656,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ5MjM3MzY1Ng==",
    "user": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-05-14T19:19:25Z",
    "updated_at": "2019-05-14T19:19:25Z",
    "author_association": "MEMBER",
    "body": "> i.e. if the call failed and it possibly run out of gas (there's less than 30k/63 remaining), then we revert.\r\n\r\nYes. Why \"possibly\" though?",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/492373656/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/492374595",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1750#issuecomment-492374595",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1750",
    "id": 492374595,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ5MjM3NDU5NQ==",
    "user": {
      "login": "nventuro",
      "id": 2530770,
      "node_id": "MDQ6VXNlcjI1MzA3NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2530770?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nventuro",
      "html_url": "https://github.com/nventuro",
      "followers_url": "https://api.github.com/users/nventuro/followers",
      "following_url": "https://api.github.com/users/nventuro/following{/other_user}",
      "gists_url": "https://api.github.com/users/nventuro/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nventuro/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nventuro/subscriptions",
      "organizations_url": "https://api.github.com/users/nventuro/orgs",
      "repos_url": "https://api.github.com/users/nventuro/repos",
      "events_url": "https://api.github.com/users/nventuro/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nventuro/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-05-14T19:22:08Z",
    "updated_at": "2019-05-14T19:22:08Z",
    "author_association": "CONTRIBUTOR",
    "body": "A call may return with less than that value and not have reverted, or It may have reverted for a different reason.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/492374595/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/492378988",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1750#issuecomment-492378988",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1750",
    "id": 492378988,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ5MjM3ODk4OA==",
    "user": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-05-14T19:35:27Z",
    "updated_at": "2019-05-14T19:35:27Z",
    "author_association": "MEMBER",
    "body": "Technically we can assume that the implementer will use at most 30000 gas. So we could send like 30001 (or a similarly small value), and then we can be sure that if there is less than 30k/64 we can assume that it was an out of gas error.\r\n\r\nI really am not sure about all these numbers though. I need to sit down and think them through.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/492378988/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/492379989",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1750#issuecomment-492379989",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1750",
    "id": 492379989,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ5MjM3OTk4OQ==",
    "user": {
      "login": "nventuro",
      "id": 2530770,
      "node_id": "MDQ6VXNlcjI1MzA3NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2530770?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nventuro",
      "html_url": "https://github.com/nventuro",
      "followers_url": "https://api.github.com/users/nventuro/followers",
      "following_url": "https://api.github.com/users/nventuro/following{/other_user}",
      "gists_url": "https://api.github.com/users/nventuro/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nventuro/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nventuro/subscriptions",
      "organizations_url": "https://api.github.com/users/nventuro/orgs",
      "repos_url": "https://api.github.com/users/nventuro/repos",
      "events_url": "https://api.github.com/users/nventuro/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nventuro/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-05-14T19:38:34Z",
    "updated_at": "2019-05-15T15:50:55Z",
    "author_association": "CONTRIBUTOR",
    "body": "...but the whole point of this is what happens when _less_ than 30k are sent? And a post-check will not know how much was actually sent.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/492379989/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 1
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/492626863",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1750#issuecomment-492626863",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1750",
    "id": 492626863,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ5MjYyNjg2Mw==",
    "user": {
      "login": "wighawag",
      "id": 790580,
      "node_id": "MDQ6VXNlcjc5MDU4MA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/790580?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wighawag",
      "html_url": "https://github.com/wighawag",
      "followers_url": "https://api.github.com/users/wighawag/followers",
      "following_url": "https://api.github.com/users/wighawag/following{/other_user}",
      "gists_url": "https://api.github.com/users/wighawag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wighawag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wighawag/subscriptions",
      "organizations_url": "https://api.github.com/users/wighawag/orgs",
      "repos_url": "https://api.github.com/users/wighawag/repos",
      "events_url": "https://api.github.com/users/wighawag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wighawag/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-05-15T12:06:53Z",
    "updated_at": "2019-05-15T12:06:53Z",
    "author_association": "NONE",
    "body": "@frangio \r\n> To be clear, by \"gas pricing\" you mean the gas cost of each opcode, right?\r\n\r\nyes that's what I meant\r\n\r\n> Note how the second list doesn't mention anything about a failing call. This impies that reverts must be propagated.\r\n\r\nThat's true, but this is not very clear since it does not mention the 30,000 rules neither here\r\n\r\n> In this case it is the implementer who is buggy. Because of the following line from the EIP:\r\n\r\nPossibly but the ```require(gasleft() >X)``` could also come from a call that ```supportsInterface``` make independent of it. So I don't think we can consider that buggy in all case, unless ERC-165 change to precise such forbidden behaviour\r\n\r\nAlso it is worth noting that an ```assert(gasleft() > X)``` is fine since all gas is used\r\n\r\n@nventuro \r\n>  I don't think 476 gas is enough for a contract to perform any significant action (and this is the absolute worst case)\r\n\r\nThe thing is that the caller might not have to do anything. I actually discovered the bug while I was investigating the use of 165 for token receiver in #1155\r\n\r\nthe context is that a contract that want to act on token reception must implement ```onERC1155Received``` and that method can throw to reject the reception of tokens\r\n\r\nThe logic for the caller could be (like in the case of an ```unsafeTransfer``` method  :\r\n- check existence of interface X \r\n- if it exits, it means the receiver accept a call to ```onERC1155Received``` \r\n  - call ```onERC1155Received```  \r\n   - if it throw, revert the transfer\r\n- if the interface X do not exit, continue the transfer\r\n\r\nThe last step could be doing nothing else, just returning, this is where it does not need much gas.\r\n\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/492626863/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/492707639",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1750#issuecomment-492707639",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1750",
    "id": 492707639,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ5MjcwNzYzOQ==",
    "user": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-05-15T15:38:14Z",
    "updated_at": "2019-05-15T15:38:14Z",
    "author_association": "MEMBER",
    "body": ">That's true, but this is not very clear since it does not mention the 30,000 rules neither here\r\n\r\nThat requirement is mentioned in the general description for `supportsInterface:\r\n\r\n> This function must return a bool and use at most 30,000 gas.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/492707639/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/492710693",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1750#issuecomment-492710693",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1750",
    "id": 492710693,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ5MjcxMDY5Mw==",
    "user": {
      "login": "wighawag",
      "id": 790580,
      "node_id": "MDQ6VXNlcjc5MDU4MA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/790580?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wighawag",
      "html_url": "https://github.com/wighawag",
      "followers_url": "https://api.github.com/users/wighawag/followers",
      "following_url": "https://api.github.com/users/wighawag/following{/other_user}",
      "gists_url": "https://api.github.com/users/wighawag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wighawag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wighawag/subscriptions",
      "organizations_url": "https://api.github.com/users/wighawag/orgs",
      "repos_url": "https://api.github.com/users/wighawag/repos",
      "events_url": "https://api.github.com/users/wighawag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wighawag/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-05-15T15:45:57Z",
    "updated_at": "2019-05-15T15:46:44Z",
    "author_association": "NONE",
    "body": "What I meant is that the 2nd list is less clear, it could have at least  said \"call supportsInterface(interfaceID) with at least 30,000 gas\" \r\nEspecially in comparison to the first list\r\n\r\nI agree though that your interpretation is correct. ",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/492710693/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1272399023",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1750#issuecomment-1272399023",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1750",
    "id": 1272399023,
    "node_id": "IC_kwDOA9tCBs5L10Sv",
    "user": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-10-08T21:18:18Z",
    "updated_at": "2022-10-08T21:18:18Z",
    "author_association": "MEMBER",
    "body": "This is still an issue but I don't believe it would be right to encode the 63/64ths rule in the Solidity code. I think this is just a limitation that users of this EIP have to consider. It needs to be documented.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1272399023/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1784326934",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1750#issuecomment-1784326934",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1750",
    "id": 1784326934,
    "node_id": "IC_kwDOA9tCBs5qWqsW",
    "user": {
      "login": "HariharPadhi1412",
      "id": 39830449,
      "node_id": "MDQ6VXNlcjM5ODMwNDQ5",
      "avatar_url": "https://avatars.githubusercontent.com/u/39830449?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/HariharPadhi1412",
      "html_url": "https://github.com/HariharPadhi1412",
      "followers_url": "https://api.github.com/users/HariharPadhi1412/followers",
      "following_url": "https://api.github.com/users/HariharPadhi1412/following{/other_user}",
      "gists_url": "https://api.github.com/users/HariharPadhi1412/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/HariharPadhi1412/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/HariharPadhi1412/subscriptions",
      "organizations_url": "https://api.github.com/users/HariharPadhi1412/orgs",
      "repos_url": "https://api.github.com/users/HariharPadhi1412/repos",
      "events_url": "https://api.github.com/users/HariharPadhi1412/events{/privacy}",
      "received_events_url": "https://api.github.com/users/HariharPadhi1412/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-10-30T01:12:48Z",
    "updated_at": "2023-10-30T01:12:48Z",
    "author_association": "NONE",
    "body": "if this issued is solved then we can close the issue.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1784326934/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
