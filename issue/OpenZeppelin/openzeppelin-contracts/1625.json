{
  "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1625",
  "repository_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts",
  "labels_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1625/labels{/name}",
  "comments_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1625/comments",
  "events_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1625/events",
  "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1625",
  "id": 403685890,
  "node_id": "MDU6SXNzdWU0MDM2ODU4OTA=",
  "number": 1625,
  "title": "SafeMath for uint32 and all other variations",
  "user": {
    "login": "cedricwalter",
    "id": 763491,
    "node_id": "MDQ6VXNlcjc2MzQ5MQ==",
    "avatar_url": "https://avatars.githubusercontent.com/u/763491?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/cedricwalter",
    "html_url": "https://github.com/cedricwalter",
    "followers_url": "https://api.github.com/users/cedricwalter/followers",
    "following_url": "https://api.github.com/users/cedricwalter/following{/other_user}",
    "gists_url": "https://api.github.com/users/cedricwalter/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/cedricwalter/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/cedricwalter/subscriptions",
    "organizations_url": "https://api.github.com/users/cedricwalter/orgs",
    "repos_url": "https://api.github.com/users/cedricwalter/repos",
    "events_url": "https://api.github.com/users/cedricwalter/events{/privacy}",
    "received_events_url": "https://api.github.com/users/cedricwalter/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 1000207718,
      "node_id": "MDU6TGFiZWwxMDAwMjA3NzE4",
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/labels/contracts",
      "name": "contracts",
      "color": "1d76db",
      "default": false,
      "description": "Smart contract code."
    },
    {
      "id": 1309858931,
      "node_id": "MDU6TGFiZWwxMzA5ODU4OTMx",
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/labels/needs%20milestone",
      "name": "needs milestone",
      "color": "c5def5",
      "default": false,
      "description": "Interesting features or improvements that are not yet assigned to a milestone."
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 12,
  "created_at": "2019-01-28T07:45:52Z",
  "updated_at": "2019-10-24T15:43:04Z",
  "closed_at": "2019-10-24T15:43:04Z",
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "**üßê Motivation**\r\n* safemath only work for uint256/int256\r\n* we could use today SafeMath and downcast (unsafe) afterward to the desired type (https://github.com/OpenZeppelin/openzeppelin-solidity/issues/1576)\r\n* template or generics are not yet supported in solidity (see https://github.com/ethereum/solidity/issues/869)\r\n\r\n**üìù Details**\r\nI need safe math operations on uint32, i could do a PR but there is a lot of type to support (uint8 to uint256 in steps of 8 (unsigned of 8 up to 256 bits) ) and before jumping in, i want to know what this PR could/should contains\r\n\r\n<!-- Make sure that you have reviewed the OpenZeppelin Contributor Guidelines. -->\r\n<!-- https://github.com/OpenZeppelin/openzeppelin-solidity/blob/master/CONTRIBUTING.md -->\r\n",
  "closed_by": {
    "login": "nventuro",
    "id": 2530770,
    "node_id": "MDQ6VXNlcjI1MzA3NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/2530770?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nventuro",
    "html_url": "https://github.com/nventuro",
    "followers_url": "https://api.github.com/users/nventuro/followers",
    "following_url": "https://api.github.com/users/nventuro/following{/other_user}",
    "gists_url": "https://api.github.com/users/nventuro/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nventuro/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nventuro/subscriptions",
    "organizations_url": "https://api.github.com/users/nventuro/orgs",
    "repos_url": "https://api.github.com/users/nventuro/repos",
    "events_url": "https://api.github.com/users/nventuro/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nventuro/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1625/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1625/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/458239410",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1625#issuecomment-458239410",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1625",
    "id": 458239410,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1ODIzOTQxMA==",
    "user": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-28T18:09:01Z",
    "updated_at": "2019-01-28T18:09:01Z",
    "author_association": "MEMBER",
    "body": "Hi @cedricwalter. Thank you for opening an issue prior to contributing a PR. :blush: Please see my response here: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/1484#issuecomment-457691541.\r\n\r\n>Unfortunately we've decided in the past to only support 256 bit arithmetic. Since that is the native word size in the EVM and everything else is emulated by Solidity, we don't see any situation where 32 bit arithmetic should be used.\r\n\r\nCould you share your motivation for working with 32 bit integers? If it involves gas costs, please include code to measure them. Given that Solidity emulates 32 bit arithmetic with masks, shifting, and \"manual\" overflow detection, I'm not convinced that using 32 bit integers is actually cheaper than integers of the native size (256 bit).",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/458239410/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/464302387",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1625#issuecomment-464302387",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1625",
    "id": 464302387,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ2NDMwMjM4Nw==",
    "user": {
      "login": "ackintosh",
      "id": 1885716,
      "node_id": "MDQ6VXNlcjE4ODU3MTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1885716?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ackintosh",
      "html_url": "https://github.com/ackintosh",
      "followers_url": "https://api.github.com/users/ackintosh/followers",
      "following_url": "https://api.github.com/users/ackintosh/following{/other_user}",
      "gists_url": "https://api.github.com/users/ackintosh/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ackintosh/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ackintosh/subscriptions",
      "organizations_url": "https://api.github.com/users/ackintosh/orgs",
      "repos_url": "https://api.github.com/users/ackintosh/repos",
      "events_url": "https://api.github.com/users/ackintosh/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ackintosh/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-02-16T07:04:17Z",
    "updated_at": "2019-02-16T07:04:17Z",
    "author_association": "NONE",
    "body": "Hi. üòä\r\n\r\nI've noticed that the types effects to gas costs in case of numbers in inside of structs. üí° \r\n\r\nDetails are in the CryptZombies tutorial below:\r\nhttps://cryptozombies.io/en/lesson/3/chapter/4\r\n> ### Struct packing to save gas\r\n> If you have multiple uints inside a struct, using a smaller-sized uint when possible will allow Solidity to pack these variables together to take up less storage. \r\n\r\n---\r\n\r\nWith the sample code below, I've measured that how much of gas cost difference between `uint(uint256)` and `uint8` which are exists inside of struct.\r\n\r\n\r\n## Sample code (GasCosts.sol)\r\n\r\n\r\n```solidity\r\npragma solidity >=0.4.21 <0.6.0;\r\n\r\ncontract GasCosts {\r\n    StructA public structA;\r\n    struct StructA {\r\n        uint a;\r\n        uint b;\r\n        uint c;\r\n    }\r\n\r\n    StructB public structB;\r\n    struct StructB {\r\n        uint8 a;\r\n        uint8 b;\r\n        uint8 c;\r\n    }\r\n\r\n    function saveStructAtoStorage() public {\r\n        structA = StructA(1, 2, 3);\r\n    }\r\n\r\n    function saveStructBtoStorage() public {\r\n        structB = StructB(1, 2, 3);\r\n    }\r\n}\r\n```\r\n\r\n## Operations on truffle console\r\n\r\n#### StructA (`uint`)\r\n\r\n- operation\r\n\r\n```sh\r\nGasCosts.deployed().then(function(instance) { instance.saveStructAtoStorage() });\r\n```\r\n\r\n- log on the operation (`truffle develop --log`)\r\n\r\n```sh\r\n  develop:ganache eth_getBlockByNumber +45s\r\n  develop:ganache eth_getBlockByNumber +7ms\r\n  develop:ganache eth_sendTransaction +4ms\r\n  develop:ganache  +33ms\r\n  develop:ganache   Transaction: 0x69f6b8ec2e1be68117f05adcab1562e04a8e73c0a43bf6182ecc75c891ee5e16 +0ms\r\n  develop:ganache   Gas usage: 81602 +0ms\r\n  develop:ganache   Block Number: 33 +0ms\r\n  develop:ganache   Block Time: Sat Feb 16 2019 14:23:05 GMT+0900 (Êó•Êú¨Ê®ôÊ∫ñÊôÇ) +1ms\r\n  develop:ganache  +0ms\r\n  develop:ganache eth_getTransactionReceipt +0ms\r\n```\r\n\r\n> Gas usage: 81602\r\n\r\n\r\n#### StructB (`uint8`)\r\n\r\n- operation\r\n\r\n```sh\r\nGasCosts.deployed().then(function(instance) { instance.saveStructBtoStorage() });\r\n```\r\n\r\n- logs on the operation (`truffle develop --log`)\r\n\r\n```sh\r\n  develop:ganache eth_getBlockByNumber +36s\r\n  develop:ganache eth_getBlockByNumber +6ms\r\n  develop:ganache eth_sendTransaction +4ms\r\n  develop:ganache  +32ms\r\n  develop:ganache   Transaction: 0x762db0c9a598d60fbdd81777fc3877bbfbaad2536e9badb27b5d47a1d9f5f688 +0ms\r\n  develop:ganache   Gas usage: 52481 +0ms\r\n  develop:ganache   Block Number: 34 +0ms\r\n  develop:ganache   Block Time: Sat Feb 16 2019 14:23:41 GMT+0900 (Êó•Êú¨Ê®ôÊ∫ñÊôÇ) +1ms\r\n  develop:ganache  +0ms\r\n  develop:ganache eth_getTransactionReceipt +0ms\r\n```\r\n\r\n> Gas usage: 52481\r\n\r\n\r\n---\r\n\r\nFrom the results, in case of inside of struct, there's a benefit that using the subtypes instead of `uint`. üí° ",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/464302387/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/466067451",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1625#issuecomment-466067451",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1625",
    "id": 466067451,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ2NjA2NzQ1MQ==",
    "user": {
      "login": "wbt",
      "id": 563406,
      "node_id": "MDQ6VXNlcjU2MzQwNg==",
      "avatar_url": "https://avatars.githubusercontent.com/u/563406?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wbt",
      "html_url": "https://github.com/wbt",
      "followers_url": "https://api.github.com/users/wbt/followers",
      "following_url": "https://api.github.com/users/wbt/following{/other_user}",
      "gists_url": "https://api.github.com/users/wbt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wbt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wbt/subscriptions",
      "organizations_url": "https://api.github.com/users/wbt/orgs",
      "repos_url": "https://api.github.com/users/wbt/repos",
      "events_url": "https://api.github.com/users/wbt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wbt/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-02-21T16:30:53Z",
    "updated_at": "2019-02-21T16:30:53Z",
    "author_association": "NONE",
    "body": "> Unfortunately we've decided in the past to only support 256 bit arithmetic. Since that is the native word size in the EVM and everything else is emulated by Solidity, we don't see any situation where 32 bit arithmetic should be used.\r\n> \r\n> Could you share your motivation for working with 32 bit integers? If it involves gas costs, please include code to measure them. Given that Solidity emulates 32 bit arithmetic with masks, shifting, and \"manual\" overflow detection, I'm not convinced that using 32 bit integers is actually cheaper than integers of the native size (256 bit).\r\n\r\n[This repository](https://github.com/wbt/thermostat) also demonstrates measurable savings in gas costs, showing that the use of 256-bit arithmetic adds an inefficiency cost of about 1/3 compared to using 32-bit integers, in a setting where 32-bit integers suffice.   To reproduce, clone that repo and run `truffle migrate` as noted in its readme. ",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/466067451/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/466428894",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1625#issuecomment-466428894",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1625",
    "id": 466428894,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ2NjQyODg5NA==",
    "user": {
      "login": "nventuro",
      "id": 2530770,
      "node_id": "MDQ6VXNlcjI1MzA3NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2530770?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nventuro",
      "html_url": "https://github.com/nventuro",
      "followers_url": "https://api.github.com/users/nventuro/followers",
      "following_url": "https://api.github.com/users/nventuro/following{/other_user}",
      "gists_url": "https://api.github.com/users/nventuro/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nventuro/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nventuro/subscriptions",
      "organizations_url": "https://api.github.com/users/nventuro/orgs",
      "repos_url": "https://api.github.com/users/nventuro/repos",
      "events_url": "https://api.github.com/users/nventuro/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nventuro/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-02-22T15:09:10Z",
    "updated_at": "2019-02-22T15:09:10Z",
    "author_association": "CONTRIBUTOR",
    "body": "Hm, I wonder how those numbers would change in more dynamic scenarios (e.g. the values are received as parameters instead of being hardcoded, and some math is done on them).",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/466428894/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/466429289",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1625#issuecomment-466429289",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1625",
    "id": 466429289,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ2NjQyOTI4OQ==",
    "user": {
      "login": "nventuro",
      "id": 2530770,
      "node_id": "MDQ6VXNlcjI1MzA3NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2530770?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nventuro",
      "html_url": "https://github.com/nventuro",
      "followers_url": "https://api.github.com/users/nventuro/followers",
      "following_url": "https://api.github.com/users/nventuro/following{/other_user}",
      "gists_url": "https://api.github.com/users/nventuro/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nventuro/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nventuro/subscriptions",
      "organizations_url": "https://api.github.com/users/nventuro/orgs",
      "repos_url": "https://api.github.com/users/nventuro/repos",
      "events_url": "https://api.github.com/users/nventuro/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nventuro/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-02-22T15:10:14Z",
    "updated_at": "2019-02-22T15:10:14Z",
    "author_association": "CONTRIBUTOR",
    "body": "Tagging this for 2.3 so that we keep track of it and continue the discussion, but this doesn't necessarily mean that we will include support in that version.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/466429289/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/466473602",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1625#issuecomment-466473602",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1625",
    "id": 466473602,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ2NjQ3MzYwMg==",
    "user": {
      "login": "wbt",
      "id": 563406,
      "node_id": "MDQ6VXNlcjU2MzQwNg==",
      "avatar_url": "https://avatars.githubusercontent.com/u/563406?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wbt",
      "html_url": "https://github.com/wbt",
      "followers_url": "https://api.github.com/users/wbt/followers",
      "following_url": "https://api.github.com/users/wbt/following{/other_user}",
      "gists_url": "https://api.github.com/users/wbt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wbt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wbt/subscriptions",
      "organizations_url": "https://api.github.com/users/wbt/orgs",
      "repos_url": "https://api.github.com/users/wbt/repos",
      "events_url": "https://api.github.com/users/wbt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wbt/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-02-22T17:15:32Z",
    "updated_at": "2019-02-22T17:15:43Z",
    "author_association": "NONE",
    "body": "> Hm, I wonder how those numbers would change in more dynamic scenarios (e.g. the values are received as parameters instead of being hardcoded, and some math is done on them).\r\n\r\n@nventuro I'm not sure what you mean.  In the [example repo](https://github.com/wbt/thermostat) the uint values are received by EVM as parameters; the actual values being stored are randomly generated in Javascript.  \r\nThe number of bits in the integer representation is hard-coded, as usual.  \r\n",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/466473602/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/466553381",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1625#issuecomment-466553381",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1625",
    "id": 466553381,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ2NjU1MzM4MQ==",
    "user": {
      "login": "nventuro",
      "id": 2530770,
      "node_id": "MDQ6VXNlcjI1MzA3NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2530770?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nventuro",
      "html_url": "https://github.com/nventuro",
      "followers_url": "https://api.github.com/users/nventuro/followers",
      "following_url": "https://api.github.com/users/nventuro/following{/other_user}",
      "gists_url": "https://api.github.com/users/nventuro/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nventuro/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nventuro/subscriptions",
      "organizations_url": "https://api.github.com/users/nventuro/orgs",
      "repos_url": "https://api.github.com/users/nventuro/repos",
      "events_url": "https://api.github.com/users/nventuro/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nventuro/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-02-22T21:25:49Z",
    "updated_at": "2019-02-22T21:25:49Z",
    "author_association": "CONTRIBUTOR",
    "body": "Sorry @wbt, I had only looked at the example @ackintosh provided. Your example should indeed trigger some of Solidity's masking code, since you're both storing packed `uint32` values, and emitting events with `uint32` values.\r\n\r\nThat said, it does seem to serve as a good estimate of an upper bound in gas savings, since it compares four values packed into a single slot as opposed to four full slots, with functions that only read/write said slots. ",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/466553381/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/466555030",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1625#issuecomment-466555030",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1625",
    "id": 466555030,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ2NjU1NTAzMA==",
    "user": {
      "login": "wbt",
      "id": 563406,
      "node_id": "MDQ6VXNlcjU2MzQwNg==",
      "avatar_url": "https://avatars.githubusercontent.com/u/563406?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wbt",
      "html_url": "https://github.com/wbt",
      "followers_url": "https://api.github.com/users/wbt/followers",
      "following_url": "https://api.github.com/users/wbt/following{/other_user}",
      "gists_url": "https://api.github.com/users/wbt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wbt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wbt/subscriptions",
      "organizations_url": "https://api.github.com/users/wbt/orgs",
      "repos_url": "https://api.github.com/users/wbt/repos",
      "events_url": "https://api.github.com/users/wbt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wbt/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-02-22T21:31:45Z",
    "updated_at": "2019-02-22T21:31:45Z",
    "author_association": "NONE",
    "body": "@nventuro Yes, I believe packing is the primary gas-savings motivation for using smaller ints.\r\nIn some cases, there are also concerns about interoperability with legacy systems that don't support such large numbers, but the gas savings from tight packing is a stronger and more general motivator.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/466555030/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/468395608",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1625#issuecomment-468395608",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1625",
    "id": 468395608,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ2ODM5NTYwOA==",
    "user": {
      "login": "wbt",
      "id": 563406,
      "node_id": "MDQ6VXNlcjU2MzQwNg==",
      "avatar_url": "https://avatars.githubusercontent.com/u/563406?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wbt",
      "html_url": "https://github.com/wbt",
      "followers_url": "https://api.github.com/users/wbt/followers",
      "following_url": "https://api.github.com/users/wbt/following{/other_user}",
      "gists_url": "https://api.github.com/users/wbt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wbt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wbt/subscriptions",
      "organizations_url": "https://api.github.com/users/wbt/orgs",
      "repos_url": "https://api.github.com/users/wbt/repos",
      "events_url": "https://api.github.com/users/wbt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wbt/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-02-28T19:02:37Z",
    "updated_at": "2019-02-28T19:03:19Z",
    "author_association": "NONE",
    "body": "I've added a function \"turnUpHeat\" in the [example repo](https://github.com/wbt/thermostat) which does some math on what the contract is receiving as dynamic variables.  \r\n\r\nAlso, I think you'd have to be using `uint8`s where there is more frequent changing of values to get closer to a good estimate of an upper bound in gas savings.  Still, I don't think we'd need to approach the upper bound in gas savings when an even lower savings level is still significant, and (in my mind) justifies the relatively low cost of adapting SafeMath to smaller integer types.  ",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/468395608/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/470710100",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1625#issuecomment-470710100",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1625",
    "id": 470710100,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3MDcxMDEwMA==",
    "user": {
      "login": "nventuro",
      "id": 2530770,
      "node_id": "MDQ6VXNlcjI1MzA3NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2530770?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nventuro",
      "html_url": "https://github.com/nventuro",
      "followers_url": "https://api.github.com/users/nventuro/followers",
      "following_url": "https://api.github.com/users/nventuro/following{/other_user}",
      "gists_url": "https://api.github.com/users/nventuro/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nventuro/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nventuro/subscriptions",
      "organizations_url": "https://api.github.com/users/nventuro/orgs",
      "repos_url": "https://api.github.com/users/nventuro/repos",
      "events_url": "https://api.github.com/users/nventuro/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nventuro/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-03-07T21:54:48Z",
    "updated_at": "2019-03-07T21:54:48Z",
    "author_association": "CONTRIBUTOR",
    "body": "@wbt I played around with your migrations script for a bit, adding calls to `turnUpHeat`, using new functions to use more/less storage slots, other arithmetic functions, etc., and found that the gas cost difference is very much dependent on actual usage of storage - in some scenarios, the extra overhead of 32-byte arithmetic outweighs the benefit of packed structs. This means that each developer should analyse gas for their particular project and decide which integer size to use based on estimated usage - no simple rule of thumb can be given.\r\n\r\nThat said, there _are_ cases where savings can be quite large (~30%), so providing support may make sense. My main issue is regarding a lack of language support in this regards (no generics, in particular): we'd have to maintain multiple `SafeMathNBytes` contracts with extremely similar content, or use some sort of code autogeneration tool to take care of this for us. @frangio thoughts?",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/470710100/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/470940064",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1625#issuecomment-470940064",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1625",
    "id": 470940064,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3MDk0MDA2NA==",
    "user": {
      "login": "wbt",
      "id": 563406,
      "node_id": "MDQ6VXNlcjU2MzQwNg==",
      "avatar_url": "https://avatars.githubusercontent.com/u/563406?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wbt",
      "html_url": "https://github.com/wbt",
      "followers_url": "https://api.github.com/users/wbt/followers",
      "following_url": "https://api.github.com/users/wbt/following{/other_user}",
      "gists_url": "https://api.github.com/users/wbt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wbt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wbt/subscriptions",
      "organizations_url": "https://api.github.com/users/wbt/orgs",
      "repos_url": "https://api.github.com/users/wbt/repos",
      "events_url": "https://api.github.com/users/wbt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wbt/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-03-08T14:07:46Z",
    "updated_at": "2019-03-08T14:07:46Z",
    "author_association": "NONE",
    "body": ">each developer should analyse gas for their particular project and decide which integer size to use based on estimated usage - no simple rule of thumb can be given.\r\n\r\nI agree, which is why \"everybody always use uint256 or don't use OpenZeppelin's safemath\" doesn't seem appropriate.\r\n\r\nCode autogeneration seems like it'd be relatively easy, or copy-paste-modify for those where it's requested (or maybe starting with the powers of 2, 8-256). I would recommend dropping \"Bytes\" from the suggested name, and have N match the bit count (e. g. \"[SafeMath32](https://github.com/OpenZeppelin/openzeppelin-solidity/pull/1484)\"), so the naming convention matches how uints are named. ",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/470940064/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/545978860",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1625#issuecomment-545978860",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1625",
    "id": 545978860,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU0NTk3ODg2MA==",
    "user": {
      "login": "nventuro",
      "id": 2530770,
      "node_id": "MDQ6VXNlcjI1MzA3NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2530770?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nventuro",
      "html_url": "https://github.com/nventuro",
      "followers_url": "https://api.github.com/users/nventuro/followers",
      "following_url": "https://api.github.com/users/nventuro/following{/other_user}",
      "gists_url": "https://api.github.com/users/nventuro/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nventuro/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nventuro/subscriptions",
      "organizations_url": "https://api.github.com/users/nventuro/orgs",
      "repos_url": "https://api.github.com/users/nventuro/repos",
      "events_url": "https://api.github.com/users/nventuro/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nventuro/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-10-24T15:43:04Z",
    "updated_at": "2019-10-24T15:43:04Z",
    "author_association": "CONTRIBUTOR",
    "body": "https://github.com/OpenZeppelin/openzeppelin-contracts/pull/1926 added `SafeCast`, allowing `SafeMath` to be used on smaller types by:\r\n\r\n1. using regular 256 bit `SafeMath` on the smaller types, which will upcast them, and then\r\n2. downcasting with `SafeCast`\r\n\r\nArithmetic will be performed on 256 types (which is often useful since it allows for intermediate steps in a calculation to go over smaller types, e.g. when multiplying multiple numbers before dividing), and the final downcast will assert that the result fits in the intended type.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/545978860/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 1,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
