{
  "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1661",
  "repository_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts",
  "labels_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1661/labels{/name}",
  "comments_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1661/comments",
  "events_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1661/events",
  "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1661",
  "id": 416023437,
  "node_id": "MDU6SXNzdWU0MTYwMjM0Mzc=",
  "number": 1661,
  "title": "Refactor code to use composition and delegation over Inheritance",
  "user": {
    "login": "earizon",
    "id": 3679391,
    "node_id": "MDQ6VXNlcjM2NzkzOTE=",
    "avatar_url": "https://avatars.githubusercontent.com/u/3679391?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/earizon",
    "html_url": "https://github.com/earizon",
    "followers_url": "https://api.github.com/users/earizon/followers",
    "following_url": "https://api.github.com/users/earizon/following{/other_user}",
    "gists_url": "https://api.github.com/users/earizon/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/earizon/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/earizon/subscriptions",
    "organizations_url": "https://api.github.com/users/earizon/orgs",
    "repos_url": "https://api.github.com/users/earizon/repos",
    "events_url": "https://api.github.com/users/earizon/events{/privacy}",
    "received_events_url": "https://api.github.com/users/earizon/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 1000207718,
      "node_id": "MDU6TGFiZWwxMDAwMjA3NzE4",
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/labels/contracts",
      "name": "contracts",
      "color": "1d76db",
      "default": false,
      "description": "Smart contract code."
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 5,
  "created_at": "2019-03-01T09:53:20Z",
  "updated_at": "2019-03-04T09:11:04Z",
  "closed_at": "2019-03-04T09:11:04Z",
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "**üßê Motivation**\r\nI'm trying to use the RBAC libraries of openzeppelin-solidity and I found they are using (abusing?) from inheritance.\r\n\r\n\r\n**üìù Details**\r\nI'm trying to create a controller in charge of RBAC,  error-handing or action routing. Using inheritance I'm forced to make the controller inherit from many different classes and programming looks un-natural.\r\n\r\nBy promoting composition-and-delegation over inheritance the implementation would look much more natural. For example the controller could just \"pick\" the needed RBAC classes at will and delegate to them for access control.\r\n\r\nSome related refs:\r\n - https://en.wikipedia.org/wiki/Composition_over_inheritance\r\n - https://medium.com/rocket-fuel/kotlin-by-class-delegation-favor-composition-over-inheritance-a1b97fecd839\r\n\r\n(IMHO, inheritance is just a design mistake that cause problems and future maintenance issues).",
  "closed_by": {
    "login": "earizon",
    "id": 3679391,
    "node_id": "MDQ6VXNlcjM2NzkzOTE=",
    "avatar_url": "https://avatars.githubusercontent.com/u/3679391?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/earizon",
    "html_url": "https://github.com/earizon",
    "followers_url": "https://api.github.com/users/earizon/followers",
    "following_url": "https://api.github.com/users/earizon/following{/other_user}",
    "gists_url": "https://api.github.com/users/earizon/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/earizon/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/earizon/subscriptions",
    "organizations_url": "https://api.github.com/users/earizon/orgs",
    "repos_url": "https://api.github.com/users/earizon/repos",
    "events_url": "https://api.github.com/users/earizon/events{/privacy}",
    "received_events_url": "https://api.github.com/users/earizon/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1661/reactions",
    "total_count": 5,
    "+1": 1,
    "-1": 0,
    "laugh": 0,
    "hooray": 1,
    "confused": 0,
    "heart": 1,
    "rocket": 1,
    "eyes": 1
  },
  "timeline_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1661/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/468720090",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1661#issuecomment-468720090",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1661",
    "id": 468720090,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ2ODcyMDA5MA==",
    "user": {
      "login": "nventuro",
      "id": 2530770,
      "node_id": "MDQ6VXNlcjI1MzA3NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2530770?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nventuro",
      "html_url": "https://github.com/nventuro",
      "followers_url": "https://api.github.com/users/nventuro/followers",
      "following_url": "https://api.github.com/users/nventuro/following{/other_user}",
      "gists_url": "https://api.github.com/users/nventuro/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nventuro/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nventuro/subscriptions",
      "organizations_url": "https://api.github.com/users/nventuro/orgs",
      "repos_url": "https://api.github.com/users/nventuro/repos",
      "events_url": "https://api.github.com/users/nventuro/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nventuro/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-03-01T16:17:39Z",
    "updated_at": "2019-03-01T16:17:39Z",
    "author_association": "CONTRIBUTOR",
    "body": "We've discussed this multiple times, and made efforts to switch to a composition-based architecture. This isn't always easy to achieve however, and usually comes with added gas costs.\r\n\r\nDo you have specific recommendations for the RBAC scenario you could share?",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/468720090/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/468755093",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1661#issuecomment-468755093",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1661",
    "id": 468755093,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ2ODc1NTA5Mw==",
    "user": {
      "login": "biocrypto730",
      "id": 38660876,
      "node_id": "MDQ6VXNlcjM4NjYwODc2",
      "avatar_url": "https://avatars.githubusercontent.com/u/38660876?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/biocrypto730",
      "html_url": "https://github.com/biocrypto730",
      "followers_url": "https://api.github.com/users/biocrypto730/followers",
      "following_url": "https://api.github.com/users/biocrypto730/following{/other_user}",
      "gists_url": "https://api.github.com/users/biocrypto730/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/biocrypto730/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/biocrypto730/subscriptions",
      "organizations_url": "https://api.github.com/users/biocrypto730/orgs",
      "repos_url": "https://api.github.com/users/biocrypto730/repos",
      "events_url": "https://api.github.com/users/biocrypto730/events{/privacy}",
      "received_events_url": "https://api.github.com/users/biocrypto730/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-03-01T18:02:54Z",
    "updated_at": "2019-03-01T18:21:38Z",
    "author_association": "NONE",
    "body": "i think what you need is a \"lean\" codebase designed for gas (inheritance, no refactoring strings, minimized comments), and a beginner codebase with comments / refactoring strings / most things in one file.... I don't know",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/468755093/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/468830478",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1661#issuecomment-468830478",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1661",
    "id": 468830478,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ2ODgzMDQ3OA==",
    "user": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-03-01T22:15:19Z",
    "updated_at": "2019-03-01T22:15:19Z",
    "author_association": "MEMBER",
    "body": "Hi @earizon. Could you please share some code for what you're trying to do?\r\n\r\nRoles are actually quite good for composition, because you can compose functionality by assigning the role to a contract instance. This allows you for example to create a minting scheme without modifying `ERC20Mintable` at all, with minimal use of inheritance. Check out [this guide](https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226) for an example of this kind of composition.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/468830478/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/468913669",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1661#issuecomment-468913669",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1661",
    "id": 468913669,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ2ODkxMzY2OQ==",
    "user": {
      "login": "earizon",
      "id": 3679391,
      "node_id": "MDQ6VXNlcjM2NzkzOTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3679391?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/earizon",
      "html_url": "https://github.com/earizon",
      "followers_url": "https://api.github.com/users/earizon/followers",
      "following_url": "https://api.github.com/users/earizon/following{/other_user}",
      "gists_url": "https://api.github.com/users/earizon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/earizon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/earizon/subscriptions",
      "organizations_url": "https://api.github.com/users/earizon/orgs",
      "repos_url": "https://api.github.com/users/earizon/repos",
      "events_url": "https://api.github.com/users/earizon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/earizon/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-03-02T11:54:03Z",
    "updated_at": "2019-03-02T11:54:03Z",
    "author_association": "NONE",
    "body": "@frangio , @nventuro , @projectoblio :\r\n\r\nCorrecting myself. Digging further I found a code like next one will (so I think) work with current RBAC implementation. All that needed is a very simple, intermediate step to create new classes inheriting from the RBAC ones and then continue to use the composition/delegation pattern as I'm used to:\r\n\r\n      contract WhiteListAdmins is WhileListAdminRole { } // <- ** Inherit from Existing role **\r\n      contract Role1Signers is SignerRole { }\r\n      contract Role2Signers is SignerRole { } \r\n\r\n      contract Controller {\r\n          WhiteListAdmins whiteListAdmins;\r\n          Role1Signers role1Signers;\r\n          Role2Signers role2Signers;\r\n          ...          \r\n          constructor() public {\r\n              whiteListAdmins = new whiteListAdmins();\r\n              role1Signers    = new Role1Signers();\r\n              role2Signers    = new Role2Signers();\r\n              emit WhileListAdminsCreated(whiteListAdmins,...)\r\n              emit role1SignersCreated(role1Signers,...)\r\n              emit role1SignersCreated(role2Signers,...)\r\n          }   \r\n          function addAdminRole() public  {\r\n              if (! whiteListAdmins.isWhitelistAdmin(msg.sender)) { // <-- **Delegate** \r\n              // ... handleError....\r\n            }\r\n            function actionRequiringRole1Signature() public {\r\n               if (!role1Signers.isSigner(msg.sender)) {                    // <-- **Delegate**\r\n                  // ... handleError...\r\n               }\r\n          }   \r\n     }\r\n\r\nRBAC function modifiers are lost (but that's a minor issue for me).\r\n\r\nDo you see any problem in the long term with this approach?\r\n\r\nA (not so important) problem I observe is that now I have to control 4 contracts for event emission (controller, whiteListAdmins, Role1/2 Signers). Ideally I would like to put all event emissions in a single contract. Maybe adding a flag to indicate whether emit on RBAC or the controller instance is just enough or maybe it's better to leave it as it is for some reason Im not aware of.\r\n\r\n(Regarding gas-problems, I'm optimistic to think that current gas-limits are temporal ones while scalability technology improves through pegged chains, sharding, PoS, ... )",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/468913669/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/468947506",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1661#issuecomment-468947506",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1661",
    "id": 468947506,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ2ODk0NzUwNg==",
    "user": {
      "login": "biocrypto730",
      "id": 38660876,
      "node_id": "MDQ6VXNlcjM4NjYwODc2",
      "avatar_url": "https://avatars.githubusercontent.com/u/38660876?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/biocrypto730",
      "html_url": "https://github.com/biocrypto730",
      "followers_url": "https://api.github.com/users/biocrypto730/followers",
      "following_url": "https://api.github.com/users/biocrypto730/following{/other_user}",
      "gists_url": "https://api.github.com/users/biocrypto730/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/biocrypto730/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/biocrypto730/subscriptions",
      "organizations_url": "https://api.github.com/users/biocrypto730/orgs",
      "repos_url": "https://api.github.com/users/biocrypto730/repos",
      "events_url": "https://api.github.com/users/biocrypto730/events{/privacy}",
      "received_events_url": "https://api.github.com/users/biocrypto730/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-03-02T18:35:40Z",
    "updated_at": "2019-03-02T18:36:44Z",
    "author_association": "NONE",
    "body": "that looks great. but in regards to scalability, the protocol is named `casper` for a reason. As it becomes cheaper to transact on a blockchain, more people will use it. It's a never ending cycle (i.e. casper the friendly ghost). If blockchain becomes cheaper to use, more people will use it, only increasing fees back to where they are about now (or higher). if you want to have an edge over your competitors design for the cheapest possible blockchain protocol.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/468947506/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
