{
  "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/724",
  "repository_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts",
  "labels_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/724/labels{/name}",
  "comments_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/724/comments",
  "events_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/724/events",
  "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/724",
  "id": 295122860,
  "node_id": "MDU6SXNzdWUyOTUxMjI4NjA=",
  "number": 724,
  "title": "How to use only 50% of tokens in crowdsale?",
  "user": {
    "login": "Dougy2800",
    "id": 35806639,
    "node_id": "MDQ6VXNlcjM1ODA2NjM5",
    "avatar_url": "https://avatars.githubusercontent.com/u/35806639?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/Dougy2800",
    "html_url": "https://github.com/Dougy2800",
    "followers_url": "https://api.github.com/users/Dougy2800/followers",
    "following_url": "https://api.github.com/users/Dougy2800/following{/other_user}",
    "gists_url": "https://api.github.com/users/Dougy2800/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/Dougy2800/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/Dougy2800/subscriptions",
    "organizations_url": "https://api.github.com/users/Dougy2800/orgs",
    "repos_url": "https://api.github.com/users/Dougy2800/repos",
    "events_url": "https://api.github.com/users/Dougy2800/events{/privacy}",
    "received_events_url": "https://api.github.com/users/Dougy2800/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 1,
  "created_at": "2018-02-07T12:40:10Z",
  "updated_at": "2018-02-08T03:07:39Z",
  "closed_at": "2018-02-08T03:07:39Z",
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "## 👁‍🗨 Description\r\n\r\nI want to create a crowdsale which sells 50% of the coins and allocates the rest to my wallet. \r\nwhat is the best way of doing this? \r\nIs it best to create the token first? \r\n\r\nI've attempted to launch multiple crowdsales on the Rinkeby test network using Remix, none of them accepting ether or returning any coins. \r\n\r\nPerhaps its better for me to use a service that makes the coin/crowdsale for me?\r\n\r\nI have followed countless tutorials, I'm not the smartest guy, I'm quite lost, please put me in the right direction, thanks.\r\n\r\n## 👽 Environment\r\n\r\n- Rinkeby Test Net\r\n- Remix\r\n- pragma solidity ^0.4.18;\r\n- 0.4.19+commit.c4cbbb05.Emscripten.clang\r\n\r\n## 📝 Details\r\n\r\nI want to create 10billion tokens so do I need to create the first 5billion tokens and then mint the next 5billion? \r\n\r\nIn the most recent tutorial I followed, the programmer used an API interface function for interacting with the Token contract, I thought this would call the pre-minted tokens, I must be missing some details to do with token allocation. (he explains it in the video at 5:00)\r\n\r\nThis following tutorial seemed to be the most useful, the crowdsale code deployed but the token contract addresss would not accept or return anything.\r\n\r\nTutorial:\r\nhttps://www.youtube.com/watch?v=VfZ4H3KUMNg&ab_channel=WildCrypto \r\n\r\nI have pasted my crowdsale code followed by my token code below, I really appreciate it if you read this far. Thank you.\r\n\r\n## 🔢 Crowdsale Code (Last attempt) \r\n\r\n```\r\nIn Question:\r\n\r\n/**\r\n * @title Token\r\n * @dev API interface for interacting with the Token contract \r\n */\r\ninterface Token {\r\n  function transfer(address _to, uint256 _value) returns (bool);\r\n  function balanceOf(address _owner) constant returns (uint256 balance);\r\n}\r\n\r\ncontract Crowdsale is Ownable {\r\n\r\n  using SafeMath for uint256;\r\n\r\n  Token public token;\r\n\r\n  uint256 public constant RATE = 100000; // Number of tokens per Ether\r\n  uint256 public constant CAP = 50000; // Cap in Ether\r\n  uint256 public constant START = 1517932200; // Feb 6, 2018 @ 15:50 UTC\r\n  uint256 public constant DAYS = 30; // 30 Days\r\n\r\n  uint256 public constant initialTokens = 10000000000 * 10**5; // Initial number of tokens available\r\n  bool public initialized = false;\r\n  uint256 public raisedAmount = 0;\r\n\r\n  event BoughtTokens(address indexed to, uint256 value);\r\n\r\n  modifier whenSaleIsActive() {\r\n    // Check if sale is active\r\n    assert(isActive());\r\n\r\n    _;\r\n  }\r\n\r\n  function Crowdsale(address _tokenAddr) {\r\n      require(_tokenAddr != 0xa1B9573a39D04F63A44831AaaBE40ff5326305a6);\r\n      token = Token(_tokenAddr);\r\n  }\r\n  \r\n  function initialize() onlyOwner {\r\n      require(initialized == false); // Can only be initialized once\r\n      require(tokensAvailable() == initialTokens); // Must have some tokens allocated\r\n      initialized = true;\r\n```\r\npragma solidity ^0.4.18;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n  \r\n}\r\n  /**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Token\r\n * @dev API interface for interacting with the Token contract \r\n */\r\ninterface Token {\r\n  function transfer(address _to, uint256 _value) returns (bool);\r\n  function balanceOf(address _owner) constant returns (uint256 balance);\r\n}\r\n\r\ncontract Crowdsale is Ownable {\r\n\r\n  using SafeMath for uint256;\r\n\r\n  Token public token;\r\n\r\n  uint256 public constant RATE = 100000; // Number of tokens per Ether\r\n  uint256 public constant CAP = 50000; // Cap in Ether\r\n  uint256 public constant START = 1517932200; // Feb 6, 2018 @ 15:50 UTC\r\n  uint256 public constant DAYS = 30; // 30 Days\r\n\r\n  uint256 public constant initialTokens = 10000000000 * 10**5; // Initial number of tokens available\r\n  bool public initialized = false;\r\n  uint256 public raisedAmount = 0;\r\n\r\n  event BoughtTokens(address indexed to, uint256 value);\r\n\r\n  modifier whenSaleIsActive() {\r\n    // Check if sale is active\r\n    assert(isActive());\r\n\r\n    _;\r\n  }\r\n\r\n  function Crowdsale(address _tokenAddr) {\r\n      require(_tokenAddr != 0xa1B9573a39D04F63A44831AaaBE40ff5326305a6);\r\n      token = Token(_tokenAddr);\r\n  }\r\n  \r\n  function initialize() onlyOwner {\r\n      require(initialized == false); // Can only be initialized once\r\n      require(tokensAvailable() == initialTokens); // Must have some tokens allocated\r\n      initialized = true;\r\n  }\r\n\r\n  function isActive() constant returns (bool) {\r\n    return (\r\n        initialized == true &&\r\n        now >= START && // Must be after the START date\r\n        now <= START.add(DAYS * 1 days) && // Must be before the end date\r\n        goalReached() == false // Goal must not already be reached\r\n    );\r\n  }\r\n\r\n  function goalReached() constant returns (bool) {\r\n    return (raisedAmount >= CAP * 1 ether);\r\n  }\r\n\r\n  function () payable {\r\n    buyTokens();\r\n  }\r\n\r\n  /**\r\n  * @dev function that sells available tokens\r\n  */\r\n  function buyTokens() payable whenSaleIsActive {\r\n\r\n    // Calculate tokens to sell\r\n    uint256 weiAmount = msg.value;\r\n    uint256 tokens = weiAmount.mul(RATE);\r\n\r\n    BoughtTokens(msg.sender, tokens);\r\n\r\n    // Increment raised amount\r\n    raisedAmount = raisedAmount.add(msg.value);\r\n    \r\n    // Send tokens to buyer\r\n    token.transfer(msg.sender, tokens);\r\n    \r\n    // Send money to owner\r\n    owner.transfer(msg.value);\r\n  }\r\n\r\n  /**\r\n   * @dev returns the number of tokens allocated to this contract\r\n   */\r\n  function tokensAvailable() constant returns (uint256) {\r\n    return token.balanceOf(this);\r\n  }\r\n\r\n  /**\r\n   * @notice Terminate contract and refund to owner\r\n   */\r\n  function destroy() onlyOwner {\r\n    // Transfer tokens back to owner\r\n    uint256 balance = token.balanceOf(this);\r\n    assert(balance > 0);\r\n    token.transfer(owner, balance);\r\n\r\n    // There should be no ether in the contract but just in case\r\n    selfdestruct(owner);\r\n  }\r\n\r\n}\r\n\r\n## 🔢 My Token Code \r\n```\r\nIn Question:\r\n\r\ncontract Test is StandardToken {\r\n\r\n  string public constant name = \"Test\"; // solium-disable-line uppercase\r\n  string public constant symbol = \"TEST\"; // solium-disable-line uppercase\r\n  uint8 public constant decimals = 5; // solium-disable-line uppercase\r\n\r\n  uint256 public constant INITIAL_SUPPLY = 10000000000 * (10 ** uint256(decimals));\r\n\r\n  /**\r\n   * @dev Constructor that gives msg.sender all of existing tokens.\r\n   */\r\n  function Test() public {\r\n    totalSupply_ = INITIAL_SUPPLY;\r\n    balances[msg.sender] = INITIAL_SUPPLY;\r\n    Transfer(0x0, msg.sender, INITIAL_SUPPLY);\r\n  }\r\n\r\n}\r\n\r\n```\r\npragma solidity ^0.4.18;\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  uint256 totalSupply_;\r\n\r\n  /**\r\n  * @dev total number of tokens in existence\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return totalSupply_;\r\n  }\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n \r\n}\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public view returns (uint256) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title Test\r\n * @dev Very simple ERC20 Token example, where all tokens are pre-assigned to the creator.\r\n * Note they can later distribute these tokens as they wish using `transfer` and other\r\n * `StandardToken` functions.\r\n */\r\ncontract Test is StandardToken {\r\n\r\n  string public constant name = \"Test\"; // solium-disable-line uppercase\r\n  string public constant symbol = \"TEST\"; // solium-disable-line uppercase\r\n  uint8 public constant decimals = 5; // solium-disable-line uppercase\r\n\r\n  uint256 public constant INITIAL_SUPPLY = 10000000000 * (10 ** uint256(decimals));\r\n\r\n  /**\r\n   * @dev Constructor that gives msg.sender all of existing tokens.\r\n   */\r\n  function Test() public {\r\n    totalSupply_ = INITIAL_SUPPLY;\r\n    balances[msg.sender] = INITIAL_SUPPLY;\r\n    Transfer(0x0, msg.sender, INITIAL_SUPPLY);\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n<!-- If your code is larger, consider linking us to a repo illustrating your issue. -->\r\n\r\n\r\n\r\n<!-- List any other information that is relevant to your issue. Error logs, related issues, suggestions on how to fix, Stack Overflow links, forum links, etc. -->\r\n",
  "closed_by": {
    "login": "federicobond",
    "id": 138426,
    "node_id": "MDQ6VXNlcjEzODQyNg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/138426?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/federicobond",
    "html_url": "https://github.com/federicobond",
    "followers_url": "https://api.github.com/users/federicobond/followers",
    "following_url": "https://api.github.com/users/federicobond/following{/other_user}",
    "gists_url": "https://api.github.com/users/federicobond/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/federicobond/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/federicobond/subscriptions",
    "organizations_url": "https://api.github.com/users/federicobond/orgs",
    "repos_url": "https://api.github.com/users/federicobond/repos",
    "events_url": "https://api.github.com/users/federicobond/events{/privacy}",
    "received_events_url": "https://api.github.com/users/federicobond/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/724/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/724/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/363988424",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/724#issuecomment-363988424",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/724",
    "id": 363988424,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2Mzk4ODQyNA==",
    "user": {
      "login": "federicobond",
      "id": 138426,
      "node_id": "MDQ6VXNlcjEzODQyNg==",
      "avatar_url": "https://avatars.githubusercontent.com/u/138426?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/federicobond",
      "html_url": "https://github.com/federicobond",
      "followers_url": "https://api.github.com/users/federicobond/followers",
      "following_url": "https://api.github.com/users/federicobond/following{/other_user}",
      "gists_url": "https://api.github.com/users/federicobond/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/federicobond/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/federicobond/subscriptions",
      "organizations_url": "https://api.github.com/users/federicobond/orgs",
      "repos_url": "https://api.github.com/users/federicobond/repos",
      "events_url": "https://api.github.com/users/federicobond/events{/privacy}",
      "received_events_url": "https://api.github.com/users/federicobond/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-08T03:07:39Z",
    "updated_at": "2018-02-08T03:07:39Z",
    "author_association": "CONTRIBUTOR",
    "body": "Hi @Dougy2800! In general, you should be able to mint the remaining tokens in the `finalize` method. You can find an example of this in the [Decentraland crowdsale](https://github.com/decentraland/mana/blob/master/contracts/MANACrowdsale.sol#L169-L176).\r\n\r\nI will close this issue now, please reopen if you have any other questions.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/363988424/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
