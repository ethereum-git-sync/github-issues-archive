{
  "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/335",
  "repository_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts",
  "labels_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/335/labels{/name}",
  "comments_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/335/comments",
  "events_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/335/events",
  "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/335",
  "id": 245867660,
  "node_id": "MDU6SXNzdWUyNDU4Njc2NjA=",
  "number": 335,
  "title": "Remove reentrancy guard contract.",
  "user": {
    "login": "MicahZoltu",
    "id": 886059,
    "node_id": "MDQ6VXNlcjg4NjA1OQ==",
    "avatar_url": "https://avatars.githubusercontent.com/u/886059?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/MicahZoltu",
    "html_url": "https://github.com/MicahZoltu",
    "followers_url": "https://api.github.com/users/MicahZoltu/followers",
    "following_url": "https://api.github.com/users/MicahZoltu/following{/other_user}",
    "gists_url": "https://api.github.com/users/MicahZoltu/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/MicahZoltu/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/MicahZoltu/subscriptions",
    "organizations_url": "https://api.github.com/users/MicahZoltu/orgs",
    "repos_url": "https://api.github.com/users/MicahZoltu/repos",
    "events_url": "https://api.github.com/users/MicahZoltu/events{/privacy}",
    "received_events_url": "https://api.github.com/users/MicahZoltu/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 18,
  "created_at": "2017-07-26T22:00:33Z",
  "updated_at": "2021-03-22T23:01:34Z",
  "closed_at": "2017-08-11T14:24:41Z",
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "https://github.com/OpenZeppelin/zeppelin-solidity/blob/master/contracts/ReentrancyGuard.sol\r\nIt is _way_ too easy to incorrectly use the reentrancy guard contract and end up deadlocking your contract.  Recommend removing it from your collection of recommended contracts, even with its caveats listed.  In general, reentrancy guards via modifiers while a good idea on the surface introduce an easy way for a contract author to shoot themselves in the foot.  I think it would be best to instead provide users with education on patterns/practices to avoid reentrancy problems then to encourage them to _depend_ on modifier based reentrancy protection.",
  "closed_by": {
    "login": "frangio",
    "id": 481465,
    "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
    "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/frangio",
    "html_url": "https://github.com/frangio",
    "followers_url": "https://api.github.com/users/frangio/followers",
    "following_url": "https://api.github.com/users/frangio/following{/other_user}",
    "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
    "organizations_url": "https://api.github.com/users/frangio/orgs",
    "repos_url": "https://api.github.com/users/frangio/repos",
    "events_url": "https://api.github.com/users/frangio/events{/privacy}",
    "received_events_url": "https://api.github.com/users/frangio/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/335/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/335/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/318813017",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/335#issuecomment-318813017",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/335",
    "id": 318813017,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxODgxMzAxNw==",
    "user": {
      "login": "rstormsf",
      "id": 9360827,
      "node_id": "MDQ6VXNlcjkzNjA4Mjc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9360827?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rstormsf",
      "html_url": "https://github.com/rstormsf",
      "followers_url": "https://api.github.com/users/rstormsf/followers",
      "following_url": "https://api.github.com/users/rstormsf/following{/other_user}",
      "gists_url": "https://api.github.com/users/rstormsf/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rstormsf/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rstormsf/subscriptions",
      "organizations_url": "https://api.github.com/users/rstormsf/orgs",
      "repos_url": "https://api.github.com/users/rstormsf/repos",
      "events_url": "https://api.github.com/users/rstormsf/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rstormsf/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-07-29T08:14:58Z",
    "updated_at": "2017-07-29T08:14:58Z",
    "author_association": "CONTRIBUTOR",
    "body": "hmmm.... IMHO, I don't see anything wrong with this protection. Maybe there will be a case when you need to do some work before you update the state. That's where you would use this modifier. Correct me if I'm wrong",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/318813017/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/318871788",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/335#issuecomment-318871788",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/335",
    "id": 318871788,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxODg3MTc4OA==",
    "user": {
      "login": "MicahZoltu",
      "id": 886059,
      "node_id": "MDQ6VXNlcjg4NjA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MicahZoltu",
      "html_url": "https://github.com/MicahZoltu",
      "followers_url": "https://api.github.com/users/MicahZoltu/followers",
      "following_url": "https://api.github.com/users/MicahZoltu/following{/other_user}",
      "gists_url": "https://api.github.com/users/MicahZoltu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MicahZoltu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MicahZoltu/subscriptions",
      "organizations_url": "https://api.github.com/users/MicahZoltu/orgs",
      "repos_url": "https://api.github.com/users/MicahZoltu/repos",
      "events_url": "https://api.github.com/users/MicahZoltu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MicahZoltu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-07-30T01:49:48Z",
    "updated_at": "2017-07-30T01:49:48Z",
    "author_association": "CONTRIBUTOR",
    "body": "The problem isn't with the protection of a mutex.  The problem is that this _mechanism_ of applying a mutex comes with some significant risks that are easy to miss and can lead to a complete deadlock of your contract(s).\r\n\r\n```\r\ncontract Foo {\r\n\tbool private lock = false;\r\n\tmodifier noReentry() {\r\n\t\trequire(lock == false);\r\n\t\tlock = true;\r\n\t\t_;\r\n\t\tlock = false;\r\n\t}\r\n\tfunction apple() public noReentry returns(uint256 output) {\r\n\t\toutput = 5;\r\n\t\t...\r\n\t\tif (veryRareCondition) {\r\n\t\t\toutput = 3;\r\n\t\t\treturn\r\n\t\t}\r\n\t\t...\r\n\t\toutput = 7;\r\n\t}\r\n}\r\n```\r\nThe above contract will deadlock (become permanently unusable) if `veryRareCondition` ever evaluates to true.  Unfortunately, rare conditions like this can end up as unexercised code paths that make it to release, especially in a large project.\r\n\r\nA perhaps more subtle and hard to miss problem would be:\r\n```\r\ncontract Foo {\r\n\tbool private lock = false;\r\n\tmodifier noReentry() {\r\n\t\trequire(lock == false);\r\n\t\tlock = true;\r\n\t\t_;\r\n\t\tlock = false;\r\n\t}\r\n\tmodifier optionalExecution() {\r\n\t\tif (condition) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t_;\r\n\t}\r\n\tfunction apple() public noReentry optionalExecution returns(uint256 output) {\r\n\t\toutput = 5;\r\n\t}\r\n}\r\n```\r\nIn this example it is easier to miss that `noReentry` is incompatible with `optionalExecution`.\r\n\r\nBoth of these scenarios _can_ be avoided with diligence, but I think it would be better to not encourage patterns that enable people to shoot themselves in the foot so easily.  In general, locks/mutexes in programming are hard and humans are really bad at not writing deadlocks in large applications where locks are used.  Even the best engineers who fully grok the best practices for their usage still sometimes mess up and create a deadlock.  While the idea of a mutex can be useful, I think that without tooling to give strong guarantees that the user isn't doing the wrong thing (e.g., a static analyzer that ensures no function that returns is modified) this modifier makes it too easy for the unsuspecting engineer to screw up really badly.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/318871788/reactions",
      "total_count": 4,
      "+1": 4,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/321302725",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/335#issuecomment-321302725",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/335",
    "id": 321302725,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMyMTMwMjcyNQ==",
    "user": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-08-09T16:08:14Z",
    "updated_at": "2017-08-09T16:08:14Z",
    "author_association": "MEMBER",
    "body": "Thanks for reporting, @MicahZoltu!\r\n\r\nAs I see it, there's two different issues here: 1) a bug report, which is that using the `nonReentrant` modifier can lead to deadlock, and 2) a suggestion to remove the feature altogether.\r\n\r\nMaybe the bug can be fixed and there's no reason to remove the feature. I haven't been able to come up with a solution but I'll let others think it through. My first idea was to use the block number instead of a boolean, but that won't work if there's more than one usage in the same block. There's no way to identify that two calls happen in the same transaction that I can think of.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/321302725/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/321813534",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/335#issuecomment-321813534",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/335",
    "id": 321813534,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMyMTgxMzUzNA==",
    "user": {
      "login": "spalladino",
      "id": 429604,
      "node_id": "MDQ6VXNlcjQyOTYwNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/429604?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/spalladino",
      "html_url": "https://github.com/spalladino",
      "followers_url": "https://api.github.com/users/spalladino/followers",
      "following_url": "https://api.github.com/users/spalladino/following{/other_user}",
      "gists_url": "https://api.github.com/users/spalladino/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/spalladino/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/spalladino/subscriptions",
      "organizations_url": "https://api.github.com/users/spalladino/orgs",
      "repos_url": "https://api.github.com/users/spalladino/repos",
      "events_url": "https://api.github.com/users/spalladino/events{/privacy}",
      "received_events_url": "https://api.github.com/users/spalladino/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-08-11T13:35:31Z",
    "updated_at": "2017-08-11T13:35:50Z",
    "author_association": "CONTRIBUTOR",
    "body": "@MicahZoltu as far as I understand, the \"end\" of a modifier is always executed (unless the function throws), regardless of whether the function returns or not. Actually there is a very similar example in the [Solidity docs](http://solidity.readthedocs.io/en/develop/contracts.html#function-modifiers):\r\n\r\n```\r\ncontract Mutex {\r\n    bool locked;\r\n    modifier noReentrancy() {\r\n        require(!locked);\r\n        locked = true;\r\n        _;\r\n        locked = false;\r\n    }\r\n\r\n    /// This function is protected by a mutex, which means that\r\n    /// reentrant calls from within msg.sender.call cannot call f again.\r\n    /// The `return 7` statement assigns 7 to the return value but still\r\n    /// executes the statement `locked = false` in the modifier.\r\n    function f() noReentrancy returns (uint) {\r\n        require(msg.sender.call());\r\n        return 7;\r\n    }\r\n}\r\n```\r\n\r\nI haven't checked this behaviour yet though. But if the end is indeed executed, I think this issue could be closed, unless I'm not seeing something. WDYT?",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/321813534/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/321827412",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/335#issuecomment-321827412",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/335",
    "id": 321827412,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMyMTgyNzQxMg==",
    "user": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-08-11T14:24:41Z",
    "updated_at": "2017-08-11T14:24:41Z",
    "author_association": "MEMBER",
    "body": "You're correct @spalladino. From [the docs](https://solidity.readthedocs.io/en/develop/contracts.html#function-modifiers): \r\n> Explicit returns from a modifier or function body only leave the current modifier or function body. Return variables are assigned and control flow continues after the “_” in the preceding modifier.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/321827412/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/321868117",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/335#issuecomment-321868117",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/335",
    "id": 321868117,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMyMTg2ODExNw==",
    "user": {
      "login": "Ivshti",
      "id": 1247629,
      "node_id": "MDQ6VXNlcjEyNDc2Mjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1247629?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Ivshti",
      "html_url": "https://github.com/Ivshti",
      "followers_url": "https://api.github.com/users/Ivshti/followers",
      "following_url": "https://api.github.com/users/Ivshti/following{/other_user}",
      "gists_url": "https://api.github.com/users/Ivshti/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Ivshti/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Ivshti/subscriptions",
      "organizations_url": "https://api.github.com/users/Ivshti/orgs",
      "repos_url": "https://api.github.com/users/Ivshti/repos",
      "events_url": "https://api.github.com/users/Ivshti/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Ivshti/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-08-11T17:10:19Z",
    "updated_at": "2017-08-11T17:10:19Z",
    "author_association": "CONTRIBUTOR",
    "body": "We have to keep in mind, before solidity 0.4.x (or so) there was a caveat where if a function returns, the rest of the modifier code would not be executed, because the \"_\" in the modifier acted as a pre-processor replacement rather than a function call.\r\n\r\nI think this is resolved in solidity now and therefore should not be a problem.\r\n\r\nPlease correct me if I'm wrong",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/321868117/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/321884797",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/335#issuecomment-321884797",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/335",
    "id": 321884797,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMyMTg4NDc5Nw==",
    "user": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-08-11T18:22:20Z",
    "updated_at": "2017-08-11T18:23:47Z",
    "author_association": "MEMBER",
    "body": "That's right, @Ivshti. From the changelog in [version 0.4.0](https://github.com/ethereum/solidity/blob/develop/Changelog.md#040-2016-09-08):\r\n> Modifiers: return does not skip part in modifier after _.\r\n\r\nSince our contracts require Solidity version at least 0.4.11, it's not a problem for us.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/321884797/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/321942600",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/335#issuecomment-321942600",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/335",
    "id": 321942600,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMyMTk0MjYwMA==",
    "user": {
      "login": "MicahZoltu",
      "id": 886059,
      "node_id": "MDQ6VXNlcjg4NjA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MicahZoltu",
      "html_url": "https://github.com/MicahZoltu",
      "followers_url": "https://api.github.com/users/MicahZoltu/followers",
      "following_url": "https://api.github.com/users/MicahZoltu/following{/other_user}",
      "gists_url": "https://api.github.com/users/MicahZoltu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MicahZoltu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MicahZoltu/subscriptions",
      "organizations_url": "https://api.github.com/users/MicahZoltu/orgs",
      "repos_url": "https://api.github.com/users/MicahZoltu/repos",
      "events_url": "https://api.github.com/users/MicahZoltu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MicahZoltu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-08-11T23:58:15Z",
    "updated_at": "2017-08-11T23:58:15Z",
    "author_association": "CONTRIBUTOR",
    "body": "Ah!  Great find!  I'm happy to hear this because I actually do use a Mutex and would _like_ to move it to a modifier.  :)",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/321942600/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/343610091",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/335#issuecomment-343610091",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/335",
    "id": 343610091,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0MzYxMDA5MQ==",
    "user": {
      "login": "rstormsf",
      "id": 9360827,
      "node_id": "MDQ6VXNlcjkzNjA4Mjc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9360827?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rstormsf",
      "html_url": "https://github.com/rstormsf",
      "followers_url": "https://api.github.com/users/rstormsf/followers",
      "following_url": "https://api.github.com/users/rstormsf/following{/other_user}",
      "gists_url": "https://api.github.com/users/rstormsf/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rstormsf/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rstormsf/subscriptions",
      "organizations_url": "https://api.github.com/users/rstormsf/orgs",
      "repos_url": "https://api.github.com/users/rstormsf/repos",
      "events_url": "https://api.github.com/users/rstormsf/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rstormsf/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-11-10T23:04:43Z",
    "updated_at": "2017-11-10T23:04:43Z",
    "author_association": "CONTRIBUTOR",
    "body": "sounds like the issue could be closed",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/343610091/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/792368444",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/335#issuecomment-792368444",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/335",
    "id": 792368444,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc5MjM2ODQ0NA==",
    "user": {
      "login": "fkirc",
      "id": 17876666,
      "node_id": "MDQ6VXNlcjE3ODc2NjY2",
      "avatar_url": "https://avatars.githubusercontent.com/u/17876666?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fkirc",
      "html_url": "https://github.com/fkirc",
      "followers_url": "https://api.github.com/users/fkirc/followers",
      "following_url": "https://api.github.com/users/fkirc/following{/other_user}",
      "gists_url": "https://api.github.com/users/fkirc/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fkirc/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fkirc/subscriptions",
      "organizations_url": "https://api.github.com/users/fkirc/orgs",
      "repos_url": "https://api.github.com/users/fkirc/repos",
      "events_url": "https://api.github.com/users/fkirc/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fkirc/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-03-07T22:49:11Z",
    "updated_at": "2021-03-07T22:49:11Z",
    "author_association": "NONE",
    "body": "As a newcomer to Solidity, I am curious whether such reentrancy-guards are still a recommended pattern.\r\nAccording to https://ethereum.stackexchange.com/questions/19333/reentrancy-flag-without-sstore, reentrancy-guards might consume quite a lot of gas.\r\nI would be grateful if somebody could point me to a solution that works without any additional storage.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/792368444/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/792762730",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/335#issuecomment-792762730",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/335",
    "id": 792762730,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc5Mjc2MjczMA==",
    "user": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-03-08T13:39:15Z",
    "updated_at": "2021-03-08T13:39:15Z",
    "author_association": "MEMBER",
    "body": "@fkirc Check out our article [Reentrancy After Istanbul](https://blog.openzeppelin.com/reentrancy-after-istanbul/) to learn about other techniques to protect against reentrancy.\r\n\r\nI should note that `ReentrancyGuard` uses storage in a way that makes it cheaper than most other storage uses (e.g. balance counters), because the guard slot is reset to its original value at the end of a transaction, and it is always at a non-zero value. Both of those conditions imply significantly cheaper costs to writing to storage.\r\n\r\nThe resulting overhead may not be significant relative to the inherent runtime cost of your contract, so I'd encourage you to measure the costs and make a decision based on that. (However, there are other downsides to reentrancy guards which I mention in the article shared above.)",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/792762730/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/792913549",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/335#issuecomment-792913549",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/335",
    "id": 792913549,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc5MjkxMzU0OQ==",
    "user": {
      "login": "fkirc",
      "id": 17876666,
      "node_id": "MDQ6VXNlcjE3ODc2NjY2",
      "avatar_url": "https://avatars.githubusercontent.com/u/17876666?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fkirc",
      "html_url": "https://github.com/fkirc",
      "followers_url": "https://api.github.com/users/fkirc/followers",
      "following_url": "https://api.github.com/users/fkirc/following{/other_user}",
      "gists_url": "https://api.github.com/users/fkirc/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fkirc/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fkirc/subscriptions",
      "organizations_url": "https://api.github.com/users/fkirc/orgs",
      "repos_url": "https://api.github.com/users/fkirc/repos",
      "events_url": "https://api.github.com/users/fkirc/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fkirc/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-03-08T17:14:10Z",
    "updated_at": "2021-03-08T17:14:10Z",
    "author_association": "NONE",
    "body": "Thank you for the summary.\r\nBased on your article, it seems to me that reentrancy-guards are still the most general solution.\r\nThe \"checks-effect-pattern\" is a good pattern, but it requires more care than just one additional modifier per function.\r\nAnd \"pull-payments\" is rather an app-specifc pattern in my view.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/792913549/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/796415227",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/335#issuecomment-796415227",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/335",
    "id": 796415227,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc5NjQxNTIyNw==",
    "user": {
      "login": "MicahZoltu",
      "id": 886059,
      "node_id": "MDQ6VXNlcjg4NjA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MicahZoltu",
      "html_url": "https://github.com/MicahZoltu",
      "followers_url": "https://api.github.com/users/MicahZoltu/followers",
      "following_url": "https://api.github.com/users/MicahZoltu/following{/other_user}",
      "gists_url": "https://api.github.com/users/MicahZoltu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MicahZoltu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MicahZoltu/subscriptions",
      "organizations_url": "https://api.github.com/users/MicahZoltu/orgs",
      "repos_url": "https://api.github.com/users/MicahZoltu/repos",
      "events_url": "https://api.github.com/users/MicahZoltu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MicahZoltu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-03-11T03:32:30Z",
    "updated_at": "2021-03-11T03:32:30Z",
    "author_association": "CONTRIBUTOR",
    "body": "I'm personally a fan of untrusted external calls always being tail called.  This is similar to the check-effect pattern, but a bit more extreme and (IMO) a bit easier to enforce codebase wide without too much thought.  Just come up with a naming convention for any function that tail calls into an external contract, and then also name any function that calls that with the same naming convention.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/796415227/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/796552260",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/335#issuecomment-796552260",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/335",
    "id": 796552260,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc5NjU1MjI2MA==",
    "user": {
      "login": "fkirc",
      "id": 17876666,
      "node_id": "MDQ6VXNlcjE3ODc2NjY2",
      "avatar_url": "https://avatars.githubusercontent.com/u/17876666?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fkirc",
      "html_url": "https://github.com/fkirc",
      "followers_url": "https://api.github.com/users/fkirc/followers",
      "following_url": "https://api.github.com/users/fkirc/following{/other_user}",
      "gists_url": "https://api.github.com/users/fkirc/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fkirc/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fkirc/subscriptions",
      "organizations_url": "https://api.github.com/users/fkirc/orgs",
      "repos_url": "https://api.github.com/users/fkirc/repos",
      "events_url": "https://api.github.com/users/fkirc/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fkirc/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-03-11T08:11:03Z",
    "updated_at": "2021-03-11T08:30:24Z",
    "author_association": "NONE",
    "body": "I agree that untrusted tailcalls are a good pattern.\r\nBut even then, untrusted tailcalls might still be exploitable via reentrancy-attacks.\r\nLet's take a look at the following deposit-function that mints pool-tokens when depositing ETH into a contract (think of a simplified liquidity pool):\r\n```Solidity\r\nfunction deposit() external payable {\r\n        uint256 depositValue = msg.value;\r\n        require(depositValue >= 1, \"EMPTY_DEPOSIT\");\r\n\r\n        uint256 newPoolValue = address(this).balance;\r\n        require(newPoolValue >= depositValue, \"POOL_TOO_LOW\");\r\n        uint256 oldPoolValue = newPoolValue - depositValue;\r\n\r\n        uint256 oldSupply = totalSupplyOfPoolToken();\r\n        uint256 newSupply;\r\n        if (oldPoolValue == 0) {\r\n            newSupply = depositValue;\r\n        } else {\r\n            newSupply = (depositValue * oldSupply) / oldPoolValue;\r\n        }\r\n\r\n        require(newSupply >= 1, \"DEPOSIT_TOO_LOW\");\r\n        mintPoolToken(msg.sender, newSupply); // This might be an untrusted tailcall\r\n    }\r\n```\r\n\r\nIf an attacker recurses into this function via the untrusted tailcall in the last line, then the attacker might obtain an excessive amount of pool-tokens for a small amount of ETH.\r\nThis could allow to steal almost all the ETH in the pool via a separate withdraw-function (not listed here).",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/796552260/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/797226934",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/335#issuecomment-797226934",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/335",
    "id": 797226934,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc5NzIyNjkzNA==",
    "user": {
      "login": "MicahZoltu",
      "id": 886059,
      "node_id": "MDQ6VXNlcjg4NjA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MicahZoltu",
      "html_url": "https://github.com/MicahZoltu",
      "followers_url": "https://api.github.com/users/MicahZoltu/followers",
      "following_url": "https://api.github.com/users/MicahZoltu/following{/other_user}",
      "gists_url": "https://api.github.com/users/MicahZoltu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MicahZoltu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MicahZoltu/subscriptions",
      "organizations_url": "https://api.github.com/users/MicahZoltu/orgs",
      "repos_url": "https://api.github.com/users/MicahZoltu/repos",
      "events_url": "https://api.github.com/users/MicahZoltu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MicahZoltu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-03-12T04:30:47Z",
    "updated_at": "2021-03-12T04:30:47Z",
    "author_association": "CONTRIBUTOR",
    "body": "@fkirc Can you help me understand why that contract is problematic?",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/797226934/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/797538060",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/335#issuecomment-797538060",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/335",
    "id": 797538060,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc5NzUzODA2MA==",
    "user": {
      "login": "MicahZoltu",
      "id": 886059,
      "node_id": "MDQ6VXNlcjg4NjA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MicahZoltu",
      "html_url": "https://github.com/MicahZoltu",
      "followers_url": "https://api.github.com/users/MicahZoltu/followers",
      "following_url": "https://api.github.com/users/MicahZoltu/following{/other_user}",
      "gists_url": "https://api.github.com/users/MicahZoltu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MicahZoltu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MicahZoltu/subscriptions",
      "organizations_url": "https://api.github.com/users/MicahZoltu/orgs",
      "repos_url": "https://api.github.com/users/MicahZoltu/repos",
      "events_url": "https://api.github.com/users/MicahZoltu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MicahZoltu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-03-12T14:51:32Z",
    "updated_at": "2021-03-12T14:51:32Z",
    "author_association": "CONTRIBUTOR",
    "body": "I'm still not seeing it.  Perhaps to phrase things differently, how would the caller re-entering on the last line be any different from the caller just calling `deposit()` twice in a row either as part of a contract or as two transactions?\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/797538060/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/797684009",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/335#issuecomment-797684009",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/335",
    "id": 797684009,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc5NzY4NDAwOQ==",
    "user": {
      "login": "MicahZoltu",
      "id": 886059,
      "node_id": "MDQ6VXNlcjg4NjA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MicahZoltu",
      "html_url": "https://github.com/MicahZoltu",
      "followers_url": "https://api.github.com/users/MicahZoltu/followers",
      "following_url": "https://api.github.com/users/MicahZoltu/following{/other_user}",
      "gists_url": "https://api.github.com/users/MicahZoltu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MicahZoltu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MicahZoltu/subscriptions",
      "organizations_url": "https://api.github.com/users/MicahZoltu/orgs",
      "repos_url": "https://api.github.com/users/MicahZoltu/repos",
      "events_url": "https://api.github.com/users/MicahZoltu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MicahZoltu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-03-12T18:55:42Z",
    "updated_at": "2021-03-12T18:55:42Z",
    "author_association": "CONTRIBUTOR",
    "body": "You would need to send more ETH on the reentry in order to deposit again, which means the deposit contract will work as expected.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/797684009/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/804451277",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/335#issuecomment-804451277",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/335",
    "id": 804451277,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgwNDQ1MTI3Nw==",
    "user": {
      "login": "fkirc",
      "id": 17876666,
      "node_id": "MDQ6VXNlcjE3ODc2NjY2",
      "avatar_url": "https://avatars.githubusercontent.com/u/17876666?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fkirc",
      "html_url": "https://github.com/fkirc",
      "followers_url": "https://api.github.com/users/fkirc/followers",
      "following_url": "https://api.github.com/users/fkirc/following{/other_user}",
      "gists_url": "https://api.github.com/users/fkirc/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fkirc/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fkirc/subscriptions",
      "organizations_url": "https://api.github.com/users/fkirc/orgs",
      "repos_url": "https://api.github.com/users/fkirc/repos",
      "events_url": "https://api.github.com/users/fkirc/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fkirc/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-03-22T23:01:34Z",
    "updated_at": "2021-03-22T23:01:34Z",
    "author_association": "NONE",
    "body": "Thanks for your hints, let's forget about the reentrancy-vulnerability. As you said, the deposit contract will work as expected.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/804451277/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
