{
  "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3874",
  "repository_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts",
  "labels_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3874/labels{/name}",
  "comments_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3874/comments",
  "events_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3874/events",
  "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3874",
  "id": 1494249073,
  "node_id": "I_kwDOA9tCBs5ZEG5x",
  "number": 3874,
  "title": "Consider adding a contract existence check in TimelockController's _execute function",
  "user": {
    "login": "Jaime-Iglesias",
    "id": 22358726,
    "node_id": "MDQ6VXNlcjIyMzU4NzI2",
    "avatar_url": "https://avatars.githubusercontent.com/u/22358726?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/Jaime-Iglesias",
    "html_url": "https://github.com/Jaime-Iglesias",
    "followers_url": "https://api.github.com/users/Jaime-Iglesias/followers",
    "following_url": "https://api.github.com/users/Jaime-Iglesias/following{/other_user}",
    "gists_url": "https://api.github.com/users/Jaime-Iglesias/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/Jaime-Iglesias/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/Jaime-Iglesias/subscriptions",
    "organizations_url": "https://api.github.com/users/Jaime-Iglesias/orgs",
    "repos_url": "https://api.github.com/users/Jaime-Iglesias/repos",
    "events_url": "https://api.github.com/users/Jaime-Iglesias/events{/privacy}",
    "received_events_url": "https://api.github.com/users/Jaime-Iglesias/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 9,
  "created_at": "2022-12-13T13:33:32Z",
  "updated_at": "2022-12-22T23:58:20Z",
  "closed_at": null,
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "I noticed that the `_execute` function in the TimeLockController contract does not have a contract existence check, which, in the case that `data` is not empty and `target` has no code will cause the proposal to be deemed \"executed successfully\" even though no side-effects have been triggered.\r\n\r\nhttps://github.com/OpenZeppelin/openzeppelin-contracts/blob/3d7a93876a2e5e1d7fe29b5a0e96e222afdc4cfa/contracts/governance/TimelockController.sol#L350\r\n\r\nI think the contract existence check should be made by the function when `data` is not empty to prevent cases in which a mistake during the proposal creation or execution goes unnoticed.\r\n\r\nThis also affects the upgradeable version:\r\n\r\nhttps://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/25aabd286e002a1526c345c8db259d57bdf0ad28/contracts/governance/TimelockControllerUpgradeable.sol#L360\r\n\r\nOne the other hand I think one could also make the argument that if an operation reaches the state of \"execution\" and no mistakes have been noticed there is probably something wrong elsewhere in the system (probably in a process); however, this fact (i.e that proposals will be deemed \"successfully executed\" even when no side-effects have been triggered) is not documented anywhere AFAIK so I think at the very least a documentation effort should be made.\r\n\r\nFinally, as a side note I think this import is unused - I believe it was added [here](https://github.com/OpenZeppelin/openzeppelin-contracts/pull/3317/files)\r\nhttps://github.com/OpenZeppelin/openzeppelin-contracts/blob/3d7a93876a2e5e1d7fe29b5a0e96e222afdc4cfa/contracts/governance/TimelockController.sol#L9\r\n\r\n",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3874/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3874/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1353136078",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3874#issuecomment-1353136078",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3874",
    "id": 1353136078,
    "node_id": "IC_kwDOA9tCBs5QpzfO",
    "user": {
      "login": "Amxx",
      "id": 2432299,
      "node_id": "MDQ6VXNlcjI0MzIyOTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2432299?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Amxx",
      "html_url": "https://github.com/Amxx",
      "followers_url": "https://api.github.com/users/Amxx/followers",
      "following_url": "https://api.github.com/users/Amxx/following{/other_user}",
      "gists_url": "https://api.github.com/users/Amxx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Amxx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Amxx/subscriptions",
      "organizations_url": "https://api.github.com/users/Amxx/orgs",
      "repos_url": "https://api.github.com/users/Amxx/repos",
      "events_url": "https://api.github.com/users/Amxx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Amxx/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-12-15T14:00:03Z",
    "updated_at": "2022-12-15T14:06:35Z",
    "author_association": "COLLABORATOR",
    "body": "Hello @Jaime-Iglesias \n\nIn case the timelock hold some ETH, and you want that ETH sent to an EOA, you need to do a call with value (data is irrelevant in that case) to an address that has no code.\n\nPreventing such calls would break some legitimate usecases.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1353136078/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1353269393",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3874#issuecomment-1353269393",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3874",
    "id": 1353269393,
    "node_id": "IC_kwDOA9tCBs5QqUCR",
    "user": {
      "login": "Jaime-Iglesias",
      "id": 22358726,
      "node_id": "MDQ6VXNlcjIyMzU4NzI2",
      "avatar_url": "https://avatars.githubusercontent.com/u/22358726?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Jaime-Iglesias",
      "html_url": "https://github.com/Jaime-Iglesias",
      "followers_url": "https://api.github.com/users/Jaime-Iglesias/followers",
      "following_url": "https://api.github.com/users/Jaime-Iglesias/following{/other_user}",
      "gists_url": "https://api.github.com/users/Jaime-Iglesias/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Jaime-Iglesias/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Jaime-Iglesias/subscriptions",
      "organizations_url": "https://api.github.com/users/Jaime-Iglesias/orgs",
      "repos_url": "https://api.github.com/users/Jaime-Iglesias/repos",
      "events_url": "https://api.github.com/users/Jaime-Iglesias/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Jaime-Iglesias/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-12-15T15:28:16Z",
    "updated_at": "2022-12-15T15:28:16Z",
    "author_association": "NONE",
    "body": "> Hello @Jaime-Iglesias\r\n> \r\n> In case the timelock hold some ETH, and you want that ETH sent to an EOA, you need to do a call with value (data is irrelevant in that case) to an address that has no code.\r\n> \r\n> Preventing such calls would break some legitimate usecases.\r\n\r\nWouldn't making the check only when `data.length > 0` still allow for this functionality? Unless you are making the argument that you might want to send data along with ETH to an EOA.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1353269393/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1353620068",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3874#issuecomment-1353620068",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3874",
    "id": 1353620068,
    "node_id": "IC_kwDOA9tCBs5Qrppk",
    "user": {
      "login": "tupokraju",
      "id": 105707216,
      "node_id": "U_kgDOBkz20A",
      "avatar_url": "https://avatars.githubusercontent.com/u/105707216?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tupokraju",
      "html_url": "https://github.com/tupokraju",
      "followers_url": "https://api.github.com/users/tupokraju/followers",
      "following_url": "https://api.github.com/users/tupokraju/following{/other_user}",
      "gists_url": "https://api.github.com/users/tupokraju/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tupokraju/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tupokraju/subscriptions",
      "organizations_url": "https://api.github.com/users/tupokraju/orgs",
      "repos_url": "https://api.github.com/users/tupokraju/repos",
      "events_url": "https://api.github.com/users/tupokraju/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tupokraju/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-12-15T19:43:49Z",
    "updated_at": "2022-12-15T19:43:49Z",
    "author_association": "NONE",
    "body": "Hello!\r\n\r\nYes, you are correct that making the check only when data.length > 0 would still allow for sending ETH to an EOA. This would not break any legitimate use cases and would prevent cases where a proposal is deemed to have been \"executed successfully\" even though no side-effects were triggered.\r\n\r\n@Jaime-Iglesias As for the import statement you mentioned, I checked and I have not found any use case for it in the code, so it is safe to assume that it can be removed safely.\r\n\r\nOverall, I think adding a contract existence check in the _execute function when data is not empty is a good idea. It would help prevent mistakes from going unnoticed and would improve the overall reliability of the system.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1353620068/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1361755876",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3874#issuecomment-1361755876",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3874",
    "id": 1361755876,
    "node_id": "IC_kwDOA9tCBs5RKr7k",
    "user": {
      "login": "Jaime-Iglesias",
      "id": 22358726,
      "node_id": "MDQ6VXNlcjIyMzU4NzI2",
      "avatar_url": "https://avatars.githubusercontent.com/u/22358726?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Jaime-Iglesias",
      "html_url": "https://github.com/Jaime-Iglesias",
      "followers_url": "https://api.github.com/users/Jaime-Iglesias/followers",
      "following_url": "https://api.github.com/users/Jaime-Iglesias/following{/other_user}",
      "gists_url": "https://api.github.com/users/Jaime-Iglesias/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Jaime-Iglesias/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Jaime-Iglesias/subscriptions",
      "organizations_url": "https://api.github.com/users/Jaime-Iglesias/orgs",
      "repos_url": "https://api.github.com/users/Jaime-Iglesias/repos",
      "events_url": "https://api.github.com/users/Jaime-Iglesias/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Jaime-Iglesias/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-12-21T17:53:22Z",
    "updated_at": "2022-12-21T17:53:22Z",
    "author_association": "NONE",
    "body": "What do you think @Amxx ?",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1361755876/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1362221705",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3874#issuecomment-1362221705",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3874",
    "id": 1362221705,
    "node_id": "IC_kwDOA9tCBs5RMdqJ",
    "user": {
      "login": "Amxx",
      "id": 2432299,
      "node_id": "MDQ6VXNlcjI0MzIyOTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2432299?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Amxx",
      "html_url": "https://github.com/Amxx",
      "followers_url": "https://api.github.com/users/Amxx/followers",
      "following_url": "https://api.github.com/users/Amxx/following{/other_user}",
      "gists_url": "https://api.github.com/users/Amxx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Amxx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Amxx/subscriptions",
      "organizations_url": "https://api.github.com/users/Amxx/orgs",
      "repos_url": "https://api.github.com/users/Amxx/repos",
      "events_url": "https://api.github.com/users/Amxx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Amxx/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-12-21T23:37:41Z",
    "updated_at": "2022-12-21T23:37:41Z",
    "author_association": "COLLABORATOR",
    "body": "It all comes down to this one thing: is it ok / legitimate to send data along during an ETH transfer to an EOA.\n\nThe core protocol somehow says yes. You can send a native TX from EOA to EOA with ETH and/or data. \n\nThis has usecases that are clear, and getting the corresponding data is way easier than getting the equivalent data when dealing with a subcall by a contract.\n\nDoes that mean such contracts call should be prevented from passing data? IMO passing such data should be a thing, because it's not breaking and it might actually be useful one day... but I get the point that it can be confusing.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1362221705/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1363267512",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3874#issuecomment-1363267512",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3874",
    "id": 1363267512,
    "node_id": "IC_kwDOA9tCBs5RQc-4",
    "user": {
      "login": "Jaime-Iglesias",
      "id": 22358726,
      "node_id": "MDQ6VXNlcjIyMzU4NzI2",
      "avatar_url": "https://avatars.githubusercontent.com/u/22358726?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Jaime-Iglesias",
      "html_url": "https://github.com/Jaime-Iglesias",
      "followers_url": "https://api.github.com/users/Jaime-Iglesias/followers",
      "following_url": "https://api.github.com/users/Jaime-Iglesias/following{/other_user}",
      "gists_url": "https://api.github.com/users/Jaime-Iglesias/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Jaime-Iglesias/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Jaime-Iglesias/subscriptions",
      "organizations_url": "https://api.github.com/users/Jaime-Iglesias/orgs",
      "repos_url": "https://api.github.com/users/Jaime-Iglesias/repos",
      "events_url": "https://api.github.com/users/Jaime-Iglesias/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Jaime-Iglesias/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-12-22T19:27:40Z",
    "updated_at": "2022-12-22T19:31:55Z",
    "author_association": "NONE",
    "body": "> It all comes down to this one thing: is it ok / legitimate to send data along during an ETH transfer to an EOA.\r\n> \r\n> The core protocol somehow says yes. You can send a native TX from EOA to EOA with ETH and/or data.\r\n> \r\n> This has usecases that are clear, and getting the corresponding data is way easier than getting the equivalent data when dealing with a subcall by a contract.\r\n> \r\n> Does that mean such contracts call should be prevented from passing data? IMO passing such data should be a thing, because it's not breaking and it might actually be useful one day... but I get the point that it can be confusing.\r\n\r\nI think people being able to send data along with ETH to an EOA is a fair argument regardless of how much demand there might be for that; however I think there is certainly an edge case here w.r.t proposals that target non-existent contracts being deemed \"successfully executed\", perhaps a documentation effort is enough to make users aware of this; however I would  rather have a programmatic solution if possible.\r\n\r\nPerhaps adding a flag to the schedule and/or execute  functions that says wether `target` is a supposed to be a contract could be a solution?\r\n\r\n1. If flag is set to true -> `target` is expected to be a contract -> check contract existence on operation execution.\r\n2. if flag is set to false -> `target` not expected to be a contract -> do not check contract existence on operation execution.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1363267512/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1363314049",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3874#issuecomment-1363314049",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3874",
    "id": 1363314049,
    "node_id": "IC_kwDOA9tCBs5RQoWB",
    "user": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-12-22T20:28:14Z",
    "updated_at": "2022-12-22T20:28:14Z",
    "author_association": "MEMBER",
    "body": "Adding a flag is complexity that we should try to avoid.\r\n\r\nI agree with @Amxx's points, I think sending ETH to an EOA is a legitimate operation that we shouldn't make more difficult. The reality is that at the EVM level making a `CALL` to a non-existent contract is a successful execution, and there is nothing specific about TimelockController's execute that could justify having different semantics for calls...\r\n\r\nI can see the point: across the library we try to help prevent mistakes, and in many places we have additional on-chain checks that don't strictly need to be on-chain, but I don't think any of those checks get in the way of legitimate use cases.\r\n\r\nIn practice, timelocks, governance, and other forms of indirect execution should be validated in some off-chain way. This is something we are already seeing, for example running a Tenderly simulation like Gnosis Safe offers, and similar things are done [for governance proposals](https://github.com/Uniswap/governance-seatbelt/).",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1363314049/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1363402146",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3874#issuecomment-1363402146",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3874",
    "id": 1363402146,
    "node_id": "IC_kwDOA9tCBs5RQ92i",
    "user": {
      "login": "Jaime-Iglesias",
      "id": 22358726,
      "node_id": "MDQ6VXNlcjIyMzU4NzI2",
      "avatar_url": "https://avatars.githubusercontent.com/u/22358726?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Jaime-Iglesias",
      "html_url": "https://github.com/Jaime-Iglesias",
      "followers_url": "https://api.github.com/users/Jaime-Iglesias/followers",
      "following_url": "https://api.github.com/users/Jaime-Iglesias/following{/other_user}",
      "gists_url": "https://api.github.com/users/Jaime-Iglesias/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Jaime-Iglesias/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Jaime-Iglesias/subscriptions",
      "organizations_url": "https://api.github.com/users/Jaime-Iglesias/orgs",
      "repos_url": "https://api.github.com/users/Jaime-Iglesias/repos",
      "events_url": "https://api.github.com/users/Jaime-Iglesias/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Jaime-Iglesias/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-12-22T22:24:18Z",
    "updated_at": "2022-12-22T22:24:18Z",
    "author_association": "NONE",
    "body": "I think the arguments are very much valid and I agree with the idea of adding a flag being extra overhead, it was not meant as an actual solution more like an idea hahaha.\r\n\r\nPerhaps a middle ground would be a documentation effort w.r.t assumptions about proposal's correctness and edge-cases such as the one I'm trying to point to - would that be something you guys feel like it would add value here? \r\n\r\n\r\n\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1363402146/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1363448266",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3874#issuecomment-1363448266",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3874",
    "id": 1363448266,
    "node_id": "IC_kwDOA9tCBs5RRJHK",
    "user": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-12-22T23:58:20Z",
    "updated_at": "2022-12-22T23:58:20Z",
    "author_association": "MEMBER",
    "body": "We want to have more documentation answering the question \"what could go wrong, and what to do about it\" for each contract. We're not sure what is the best place for that kind of content, and we may need to make a new place for it in the docs site. I think this could fit in that category, but IMO in a more general form like \"your proposal parameters could be wrong and you might only find out after execution\".",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1363448266/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
