{
  "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2822",
  "repository_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts",
  "labels_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2822/labels{/name}",
  "comments_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2822/comments",
  "events_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2822/events",
  "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2822",
  "id": 970809069,
  "node_id": "MDU6SXNzdWU5NzA4MDkwNjk=",
  "number": 2822,
  "title": "Consider renaming \"to\" in \"safeTransfer\" flows to remind about unsafe external call",
  "user": {
    "login": "ethosdev",
    "id": 79124435,
    "node_id": "MDQ6VXNlcjc5MTI0NDM1",
    "avatar_url": "https://avatars.githubusercontent.com/u/79124435?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/ethosdev",
    "html_url": "https://github.com/ethosdev",
    "followers_url": "https://api.github.com/users/ethosdev/followers",
    "following_url": "https://api.github.com/users/ethosdev/following{/other_user}",
    "gists_url": "https://api.github.com/users/ethosdev/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/ethosdev/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/ethosdev/subscriptions",
    "organizations_url": "https://api.github.com/users/ethosdev/orgs",
    "repos_url": "https://api.github.com/users/ethosdev/repos",
    "events_url": "https://api.github.com/users/ethosdev/events{/privacy}",
    "received_events_url": "https://api.github.com/users/ethosdev/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 4,
  "created_at": "2021-08-14T03:25:14Z",
  "updated_at": "2021-08-19T05:37:26Z",
  "closed_at": null,
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "An unsafe external call is made to innocent looking `to`.\r\n\r\nhttps://github.com/OpenZeppelin/openzeppelin-contracts/blob/b174f067df18e3214f290c62d50f6721e87c05cf/contracts/token/ERC721/ERC721.sol#L371\r\n\r\nhttps://www.paradigm.xyz/2021/08/the-dangers-of-surprising-code/\r\n\r\nA suggestion that comes to mind is to use \"untrustedTo\" instead of \"to\", but any other name would be a good reminder about the dangers of untrusted external calls.\r\n\r\nThe rename should propagate back to the safeTransfer functions like https://github.com/OpenZeppelin/openzeppelin-contracts/blob/b174f067df18e3214f290c62d50f6721e87c05cf/contracts/token/ERC721/ERC721.sol#L168\r\n\r\n\r\nUnsafe external calls is pretty much the first thing in the smart contract best practices, and marking untrusted contracts is the \r\nfirst recommendation: https://consensys.github.io/smart-contract-best-practices/recommendations/#mark-untrusted-contracts",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2822/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2822/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/900705587",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2822#issuecomment-900705587",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2822",
    "id": 900705587,
    "node_id": "IC_kwDOA9tCBs41r60z",
    "user": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-08-17T23:51:37Z",
    "updated_at": "2021-08-17T23:51:37Z",
    "author_association": "MEMBER",
    "body": "Thanks for the suggestion @ethosdev. We're interested in ways to make this risk clearer. However, I'm not sure that this rename accomplishes that. In fact it confused me and made me question whether `to` is actually untrusted or rather trusted, and I think it's neither/both.\r\n\r\nRenaming this to `untrustedTo` could imply that it is OK to pass in an untrusted address, when in fact it's the opposite: an untrusted address introduces risk of reentrancy. `trustedTo` is also not accurate because it is perfectly fine to pass in an untrusted address, as long as you invoke the function such that reentrancy poses no risk (e.g. following checks-effects-interactions).\r\n\r\nWhether `to` is trusted or untrusted, and marking it as such, should be done at the caller site it seems, as a hint to the reader that there is or isn't risk of reentrancy (notwithstanding the unfortunate \"safe\" terminology).",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/900705587/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/900895587",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2822#issuecomment-900895587",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2822",
    "id": 900895587,
    "node_id": "IC_kwDOA9tCBs41spNj",
    "user": {
      "login": "QEDK",
      "id": 1272002,
      "node_id": "MDQ6VXNlcjEyNzIwMDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1272002?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/QEDK",
      "html_url": "https://github.com/QEDK",
      "followers_url": "https://api.github.com/users/QEDK/followers",
      "following_url": "https://api.github.com/users/QEDK/following{/other_user}",
      "gists_url": "https://api.github.com/users/QEDK/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/QEDK/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/QEDK/subscriptions",
      "organizations_url": "https://api.github.com/users/QEDK/orgs",
      "repos_url": "https://api.github.com/users/QEDK/repos",
      "events_url": "https://api.github.com/users/QEDK/events{/privacy}",
      "received_events_url": "https://api.github.com/users/QEDK/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-08-18T07:45:14Z",
    "updated_at": "2021-08-18T07:45:14Z",
    "author_association": "CONTRIBUTOR",
    "body": "> Thanks for the suggestion @ethosdev. We're interested in ways to make this risk clearer. However, I'm not sure that this rename accomplishes that. In fact it confused me and made me question whether `to` is actually untrusted or rather trusted, and I think it's neither/both.\r\n> \r\n> Renaming this to `untrustedTo` could imply that it is OK to pass in an untrusted address, when in fact it's the opposite: an untrusted address introduces risk of reentrancy. `trustedTo` is also not accurate because it is perfectly fine to pass in an untrusted address, as long as you invoke the function such that reentrancy poses no risk (e.g. following checks-effects-interactions).\r\n> \r\n> Whether `to` is trusted or untrusted, and marking it as such, should be done at the caller site it seems, as a hint to the reader that there is or isn't risk of reentrancy (notwithstanding the unfortunate \"safe\" terminology).\r\n\r\nAgreed, since in reality, `safeTransfer` is only _safer_ at best. I don't think renaming will help, it's best to cover or link possible dangers in documentation and make the developer community aware of what exactly future risks can be.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/900895587/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/901617541",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2822#issuecomment-901617541",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2822",
    "id": 901617541,
    "node_id": "IC_kwDOA9tCBs41vZeF",
    "user": {
      "login": "ethosdev",
      "id": 79124435,
      "node_id": "MDQ6VXNlcjc5MTI0NDM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/79124435?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ethosdev",
      "html_url": "https://github.com/ethosdev",
      "followers_url": "https://api.github.com/users/ethosdev/followers",
      "following_url": "https://api.github.com/users/ethosdev/following{/other_user}",
      "gists_url": "https://api.github.com/users/ethosdev/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ethosdev/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ethosdev/subscriptions",
      "organizations_url": "https://api.github.com/users/ethosdev/orgs",
      "repos_url": "https://api.github.com/users/ethosdev/repos",
      "events_url": "https://api.github.com/users/ethosdev/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ethosdev/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-08-19T05:17:21Z",
    "updated_at": "2021-08-19T05:17:21Z",
    "author_association": "NONE",
    "body": "Thanks for the responses @frangio and @QEDK \r\n\r\n> Renaming this to `untrustedTo` could imply that it is OK to pass in an untrusted address, when in fact it's the opposite: an untrusted address introduces risk of reentrancy. \r\n\r\nIndeed the word trusted is still not clear enough.  What do you think about `unsafeTo`?\r\n\r\nWhile the `to` could be safe in some cases, the library errs to bring most alert to devs and readers to be careful.\r\n\r\nWe thought we'd all be better at watching out for unsafe external calls, but even 5 years after TheDAO, they are very good at hiding behind variable names.\r\n\r\nI understand the objections that other variables names are not as elegant as `to`, but whenever we do things indirectly, humans can always forget.  For example, in one context you tell yourself that I know a particular `to` is safe, and later on you see another `to` and also incorrectly assume it is safe.\r\n\r\nI also know we cannot solve for everything.  This suggestion is to consider if we can do more about `to` instead of just putting it as a code comment.\r\n\r\n> should be done at the caller site\r\n\r\nI also agrees with this.  Much less control over this though, and I think it's a good opportunity for OpenZeppelin to set a good example and reminders about unsafe external calls and how easily they hide behind variable names.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/901617541/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/901624696",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2822#issuecomment-901624696",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2822",
    "id": 901624696,
    "node_id": "IC_kwDOA9tCBs41vbN4",
    "user": {
      "login": "ethosdev",
      "id": 79124435,
      "node_id": "MDQ6VXNlcjc5MTI0NDM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/79124435?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ethosdev",
      "html_url": "https://github.com/ethosdev",
      "followers_url": "https://api.github.com/users/ethosdev/followers",
      "following_url": "https://api.github.com/users/ethosdev/following{/other_user}",
      "gists_url": "https://api.github.com/users/ethosdev/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ethosdev/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ethosdev/subscriptions",
      "organizations_url": "https://api.github.com/users/ethosdev/orgs",
      "repos_url": "https://api.github.com/users/ethosdev/repos",
      "events_url": "https://api.github.com/users/ethosdev/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ethosdev/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-08-19T05:36:18Z",
    "updated_at": "2021-08-19T05:37:26Z",
    "author_association": "NONE",
    "body": "> `safeTransfer` is only _safer_ at best.\r\n\r\nI spoke to someone who thought it's better not to call these methods \"safe\". Someone could open a PR against the ERC and for now I am not ready for those discussions.\r\n\r\n> I don't think renaming will help\r\n\r\nIs this really the concern?  (If an external call is being made to a variable called something like `unsafeTo` or `unsafeRecipient`, doesn't that bring much more attention and alert than if it was called with the shorter name?)\r\n\r\n> make the developer community aware of what exactly future risks can be\r\n\r\nThe lesson behind TheDAO was not specifically about reentrancy.  It was about external calls and how they can be unsafe, and it's #1 danger in smart contracts:\r\n\r\nhttps://consensys.github.io/smart-contract-best-practices/recommendations/#external-calls\r\n\r\nIt's been 5 years and I think we can improve here on alerting about the potentially unsafe contracts, not just adding more comments and documentation that people can more easily forget about.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/901624696/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
