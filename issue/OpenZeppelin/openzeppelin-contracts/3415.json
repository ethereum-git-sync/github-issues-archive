{
  "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3415",
  "repository_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts",
  "labels_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3415/labels{/name}",
  "comments_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3415/comments",
  "events_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3415/events",
  "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3415",
  "id": 1237339616,
  "node_id": "I_kwDOA9tCBs5JwE3g",
  "number": 3415,
  "title": "Utility for creating contracts",
  "user": {
    "login": "Amxx",
    "id": 2432299,
    "node_id": "MDQ6VXNlcjI0MzIyOTk=",
    "avatar_url": "https://avatars.githubusercontent.com/u/2432299?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/Amxx",
    "html_url": "https://github.com/Amxx",
    "followers_url": "https://api.github.com/users/Amxx/followers",
    "following_url": "https://api.github.com/users/Amxx/following{/other_user}",
    "gists_url": "https://api.github.com/users/Amxx/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/Amxx/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/Amxx/subscriptions",
    "organizations_url": "https://api.github.com/users/Amxx/orgs",
    "repos_url": "https://api.github.com/users/Amxx/repos",
    "events_url": "https://api.github.com/users/Amxx/events{/privacy}",
    "received_events_url": "https://api.github.com/users/Amxx/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/milestones/12",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/milestone/12",
    "labels_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/milestones/12/labels",
    "id": 8058901,
    "node_id": "MI_kwDOA9tCBs4AevgV",
    "number": 12,
    "title": "4.8",
    "description": "",
    "creator": {
      "login": "Amxx",
      "id": 2432299,
      "node_id": "MDQ6VXNlcjI0MzIyOTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2432299?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Amxx",
      "html_url": "https://github.com/Amxx",
      "followers_url": "https://api.github.com/users/Amxx/followers",
      "following_url": "https://api.github.com/users/Amxx/following{/other_user}",
      "gists_url": "https://api.github.com/users/Amxx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Amxx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Amxx/subscriptions",
      "organizations_url": "https://api.github.com/users/Amxx/orgs",
      "repos_url": "https://api.github.com/users/Amxx/repos",
      "events_url": "https://api.github.com/users/Amxx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Amxx/received_events",
      "type": "User",
      "site_admin": false
    },
    "open_issues": 0,
    "closed_issues": 22,
    "state": "closed",
    "created_at": "2022-06-07T15:35:04Z",
    "updated_at": "2022-11-08T17:25:45Z",
    "due_on": "2022-08-23T07:00:00Z",
    "closed_at": "2022-11-08T17:25:45Z"
  },
  "comments": 13,
  "created_at": "2022-05-16T15:34:38Z",
  "updated_at": "2022-07-05T06:16:28Z",
  "closed_at": "2022-07-05T01:09:07Z",
  "author_association": "COLLABORATOR",
  "active_lock_reason": null,
  "body": "This issue is there to discuss the utils proposed by @pcaversaccio in #3411",
  "closed_by": {
    "login": "frangio",
    "id": 481465,
    "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
    "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/frangio",
    "html_url": "https://github.com/frangio",
    "followers_url": "https://api.github.com/users/frangio/followers",
    "following_url": "https://api.github.com/users/frangio/following{/other_user}",
    "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
    "organizations_url": "https://api.github.com/users/frangio/orgs",
    "repos_url": "https://api.github.com/users/frangio/repos",
    "events_url": "https://api.github.com/users/frangio/events{/privacy}",
    "received_events_url": "https://api.github.com/users/frangio/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3415/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3415/timeline",
  "performed_via_github_app": null,
  "state_reason": "not_planned"
}
[
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1127832760",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3415#issuecomment-1127832760",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3415",
    "id": 1127832760,
    "node_id": "IC_kwDOA9tCBs5DOVy4",
    "user": {
      "login": "Amxx",
      "id": 2432299,
      "node_id": "MDQ6VXNlcjI0MzIyOTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2432299?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Amxx",
      "html_url": "https://github.com/Amxx",
      "followers_url": "https://api.github.com/users/Amxx/followers",
      "following_url": "https://api.github.com/users/Amxx/following{/other_user}",
      "gists_url": "https://api.github.com/users/Amxx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Amxx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Amxx/subscriptions",
      "organizations_url": "https://api.github.com/users/Amxx/orgs",
      "repos_url": "https://api.github.com/users/Amxx/repos",
      "events_url": "https://api.github.com/users/Amxx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Amxx/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-05-16T15:41:47Z",
    "updated_at": "2022-05-16T15:41:47Z",
    "author_association": "COLLABORATOR",
    "body": "We personally favor contracts written in solidity and compiled using the same compiler settings. These can easily be deployed using the native solidity features. Can you tell us more about when you'd like to deploy bytecode that is not produced by the compiler?",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1127832760/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1127863746",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3415#issuecomment-1127863746",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3415",
    "id": 1127863746,
    "node_id": "IC_kwDOA9tCBs5DOdXC",
    "user": {
      "login": "pcaversaccio",
      "id": 25297591,
      "node_id": "MDQ6VXNlcjI1Mjk3NTkx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25297591?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pcaversaccio",
      "html_url": "https://github.com/pcaversaccio",
      "followers_url": "https://api.github.com/users/pcaversaccio/followers",
      "following_url": "https://api.github.com/users/pcaversaccio/following{/other_user}",
      "gists_url": "https://api.github.com/users/pcaversaccio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pcaversaccio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pcaversaccio/subscriptions",
      "organizations_url": "https://api.github.com/users/pcaversaccio/orgs",
      "repos_url": "https://api.github.com/users/pcaversaccio/repos",
      "events_url": "https://api.github.com/users/pcaversaccio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pcaversaccio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-05-16T16:10:55Z",
    "updated_at": "2022-05-16T16:27:48Z",
    "author_association": "CONTRIBUTOR",
    "body": "@Amxx thanks for opening this issue. The motivation behind this PR is twofold:\r\n- Provide a helper contract in the similar way it exists for `CREATE2`.\r\n- Provide a RLP-based `computeAddress` functionality.\r\n\r\nSo let me elaborate personally when for instance I use such a `CREATE` functionality: sometimes when attacks happen I support the projects as a white hat. One of the first things I do usually is to check whether there is a similar attack contract on the testnets/other EVM chains. Since the contracts are usually unverified, I take their creation bytecode and deploy them across all the chains via a helper contract that implements `CREATE` (for sophisticated attacks this won't work but I already had cases where the exploit contract where rather simple and the attackers pre-tested the attack on Rinkeby, Goerli etc.). Thereafter, I can e.g. use Etherscan to find similar bytecode matches.\r\n\r\nFurthermore, I've seen code out there that uses the `CREATE` opcode extensively (via libraries) within factory smart contracts. Eventually, I've witnessed code which is not fully correct but used in production; something like:\r\n\r\n```solidity\r\npragma solidity ^0.8.0;\r\n\r\ncontract DeployBytecode {\r\n    function deployBytecode(bytes memory bytecode) public returns (address) {\r\n        address retval;\r\n        assembly{\r\n            mstore(0x0, bytecode)\r\n            retval := create(0, 0xa0, calldatasize)\r\n        }\r\n        return retval;\r\n   }\r\n}\r\n```\r\n\r\nThe problem is here that fixing the deployment code location at `0xa0` is not always correct. Also using `calldatasize` as the deployment code length without using `calldata` is not right. The overall aim is make `CREATE` a future-proof library via OpenZeppelin.\r\n\r\nThe reasoning behind `computeAddress` is that it can be really useful to precalculate the deployment address as part of e.g. a more sophisticated factory smart contract systems where certain constructor parameters are set within the deployment itself. Of course, I'm a strong advocate of `CREATE2` as well but IMO we should leave to the developer what way they chose and make sure the library they use is safe.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1127863746/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1129773478",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3415#issuecomment-1129773478",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3415",
    "id": 1129773478,
    "node_id": "IC_kwDOA9tCBs5DVvmm",
    "user": {
      "login": "pcaversaccio",
      "id": 25297591,
      "node_id": "MDQ6VXNlcjI1Mjk3NTkx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25297591?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pcaversaccio",
      "html_url": "https://github.com/pcaversaccio",
      "followers_url": "https://api.github.com/users/pcaversaccio/followers",
      "following_url": "https://api.github.com/users/pcaversaccio/following{/other_user}",
      "gists_url": "https://api.github.com/users/pcaversaccio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pcaversaccio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pcaversaccio/subscriptions",
      "organizations_url": "https://api.github.com/users/pcaversaccio/orgs",
      "repos_url": "https://api.github.com/users/pcaversaccio/repos",
      "events_url": "https://api.github.com/users/pcaversaccio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pcaversaccio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-05-18T09:19:00Z",
    "updated_at": "2022-05-18T09:19:00Z",
    "author_association": "CONTRIBUTOR",
    "body": "@frangio what is your view on this?",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1129773478/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1130019636",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3415#issuecomment-1130019636",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3415",
    "id": 1130019636,
    "node_id": "IC_kwDOA9tCBs5DWrs0",
    "user": {
      "login": "Amxx",
      "id": 2432299,
      "node_id": "MDQ6VXNlcjI0MzIyOTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2432299?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Amxx",
      "html_url": "https://github.com/Amxx",
      "followers_url": "https://api.github.com/users/Amxx/followers",
      "following_url": "https://api.github.com/users/Amxx/following{/other_user}",
      "gists_url": "https://api.github.com/users/Amxx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Amxx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Amxx/subscriptions",
      "organizations_url": "https://api.github.com/users/Amxx/orgs",
      "repos_url": "https://api.github.com/users/Amxx/repos",
      "events_url": "https://api.github.com/users/Amxx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Amxx/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-05-18T13:29:07Z",
    "updated_at": "2022-05-18T13:29:07Z",
    "author_association": "COLLABORATOR",
    "body": "So there are two things here, the create wrapper, and the \"compute address\" utility.\r\n\r\nWhile I'm not sure I would ever use it myself, I do understand that the \"compute address\" does something that is otherwise not easy to do out of the box. \r\n\r\nFor the create wrapper, you mention the fact that we have a similar function for create2 (`Create2.deploy`). I would like to clarify that this was included BEFORE solidity natively supported create2 (through the `new Contract{salt: ... }()` syntax. We keep it for backward compatibility, and it feels like we should probably deprecate it.\r\n\r\nMy understand of your usecase is that, for whitehacking purposes, its sometime useful to deploy some bytecode to have etherscan match it. This sounds like a corner case, that in fact doesn't even need create. create2 would work just as weel for this usecase since what you care about is the bytecode being deployed, not which address its deployed at. You could thus use an existing factory like the one at 0xfAC000a12dA42B871c0AaD5F25391aAe62958Db1, and don't really need to write your own factory contract. Am I wrong?",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1130019636/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1130127526",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3415#issuecomment-1130127526",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3415",
    "id": 1130127526,
    "node_id": "IC_kwDOA9tCBs5DXGCm",
    "user": {
      "login": "pcaversaccio",
      "id": 25297591,
      "node_id": "MDQ6VXNlcjI1Mjk3NTkx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25297591?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pcaversaccio",
      "html_url": "https://github.com/pcaversaccio",
      "followers_url": "https://api.github.com/users/pcaversaccio/followers",
      "following_url": "https://api.github.com/users/pcaversaccio/following{/other_user}",
      "gists_url": "https://api.github.com/users/pcaversaccio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pcaversaccio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pcaversaccio/subscriptions",
      "organizations_url": "https://api.github.com/users/pcaversaccio/orgs",
      "repos_url": "https://api.github.com/users/pcaversaccio/repos",
      "events_url": "https://api.github.com/users/pcaversaccio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pcaversaccio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-05-18T15:00:07Z",
    "updated_at": "2022-05-18T15:00:07Z",
    "author_association": "CONTRIBUTOR",
    "body": "> While I'm not sure I would ever use it myself, I do understand that the \"compute address\" does something that is otherwise not easy to do out of the box.\r\n\r\nLet me explain when for instance I do this: I deployed a `CREATE2` factory contract for my [`xdeployer`](https://github.com/pcaversaccio/xdeployer) plugin on 36 EVM chains. Before I do a deployment on a new chain, I always check (as part of my deployment pipeline) first whether - given my account nonce - it will be the same address as all existing ones. If the deployment is done via a clean account this is a trivial task to do but if the nonce is `>0` on all chains you need to precheck to assure everything. In any case, the method `computeAddress` can be useful in any context where no `CREATE2` factory contract is available (nor wanted) to pre-check the deployment address.\r\n\r\n> For the create wrapper, you mention the fact that we have a similar function for create2 (Create2.deploy). I would like to clarify that this was included BEFORE solidity natively supported create2 (through the new Contract{salt: ... }() syntax. We keep it for backward compatibility, and it feels like we should probably deprecate it.\r\n\r\nHmm, I'm not sure whether deprecation is a good idea. As long as you know the exact contract to be deployed it will work but if you want to provide a `CREATE2` factory contract, the `Create2` library is much more useful. What I mean is the following:\r\n\r\n```solidity\r\n// SPDX-License-Identifier: UNLICENSED\r\npragma solidity 0.8.14\r\ncontract A {\r\n    uint256 public x;\r\n    constructor(uint256 a) {\r\n        x = a;\r\n    }\r\n}\r\n\r\ncontract B {\r\n    function createASalted(bytes32 salt, uint256 arg) public {\r\n        A a = new A{salt: salt}(arg);\r\n        require(address(a) != address(0));\r\n    }\r\n}\r\n```\r\n \r\nIf you don't know contract `A` in advance you have a problem. And for general `CREATE2` factory contracts you don't know it.\r\n\r\n> My understand of your usecase is that, for whitehacking purposes, its sometime useful to deploy some bytecode to have etherscan match it. This sounds like a corner case, that in fact doesn't even need create. create2 would work just as weel for this usecase since what you care about is the bytecode being deployed, not which address its deployed at. You could thus use an existing factory like the one at 0xfAC000a12dA42B871c0AaD5F25391aAe62958Db1, and don't really need to write your own factory contract. Am I wrong?\r\n\r\nYou are correct - it's more like that I used this approach even before `CREATE2` was introduced and therefore I have already all my `CREATE` factory contracts deployed on the various chains.\r\n\r\nFor all the use cases where deterministic addresses are not relevant, factory contracts should prefer `CREATE` over `CREATE2` due to the gas costs. The gas costs for `CREATE` are the following:\r\n```\r\ncode_deposit_cost = 200 * deployed_code_size\r\n\r\nstatic_gas = 32000\r\ndynamic_gas = memory_expansion_cost + deployment_code_execution_cost + code_deposit_cost\r\n``` \r\n\r\nand for `CREATE2`\r\n```\r\nminimum_word_size = (size + 31) / 32\r\ncode_deposit_cost = 200 * deployed_code_size\r\n\r\nstatic_gas = 32000\r\ndynamic_gas = 6 * minimum_word_size + memory_expansion_cost + deployment_code_execution_cost + code_deposit_cost\r\n```\r\n\r\nYou see there is an additional cost due to the hashing of the init code. \r\n\r\nAnother use case I just realised is that you can build a clone factory via `CREATE` (and of course `CREATE2`). Depending on your needs it can be simpler to use `CREATE` since no `salt` value is involved / needs to be managed.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1130127526/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1130247286",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3415#issuecomment-1130247286",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3415",
    "id": 1130247286,
    "node_id": "IC_kwDOA9tCBs5DXjR2",
    "user": {
      "login": "Amxx",
      "id": 2432299,
      "node_id": "MDQ6VXNlcjI0MzIyOTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2432299?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Amxx",
      "html_url": "https://github.com/Amxx",
      "followers_url": "https://api.github.com/users/Amxx/followers",
      "following_url": "https://api.github.com/users/Amxx/following{/other_user}",
      "gists_url": "https://api.github.com/users/Amxx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Amxx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Amxx/subscriptions",
      "organizations_url": "https://api.github.com/users/Amxx/orgs",
      "repos_url": "https://api.github.com/users/Amxx/repos",
      "events_url": "https://api.github.com/users/Amxx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Amxx/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-05-18T16:45:06Z",
    "updated_at": "2022-05-18T16:45:06Z",
    "author_association": "COLLABORATOR",
    "body": "> > While I'm not sure I would ever use it myself, I do understand that the \"compute address\" does something that is otherwise not easy to do out of the box.\r\n> \r\n> Let me explain when for instance I do this: I deployed a `CREATE2` factory contract for my [`xdeployer`](https://github.com/pcaversaccio/xdeployer) plugin on 36 EVM chains. Before I do a deployment on a new chain, I always check (as part of my deployment pipeline) first whether - given my account nonce - it will be the same address as all existing ones. If the deployment is done via a clean account this is a trivial task to do but if the nonce is `>0` on all chains you need to precheck to assure everything. In any case, the method `computeAddress` can be useful in any context where no `CREATE2` factory contract is available (nor wanted) to pre-check the deployment address.\r\n\r\nBut that is something you want to check before sending the deployment transaction ... so off-chain. I don't really bet why you need a solidity implementation here.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1130247286/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1130250439",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3415#issuecomment-1130250439",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3415",
    "id": 1130250439,
    "node_id": "IC_kwDOA9tCBs5DXkDH",
    "user": {
      "login": "Amxx",
      "id": 2432299,
      "node_id": "MDQ6VXNlcjI0MzIyOTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2432299?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Amxx",
      "html_url": "https://github.com/Amxx",
      "followers_url": "https://api.github.com/users/Amxx/followers",
      "following_url": "https://api.github.com/users/Amxx/following{/other_user}",
      "gists_url": "https://api.github.com/users/Amxx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Amxx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Amxx/subscriptions",
      "organizations_url": "https://api.github.com/users/Amxx/orgs",
      "repos_url": "https://api.github.com/users/Amxx/repos",
      "events_url": "https://api.github.com/users/Amxx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Amxx/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-05-18T16:47:09Z",
    "updated_at": "2022-05-18T16:47:09Z",
    "author_association": "COLLABORATOR",
    "body": "> Another use case I just realised is that you can build a clone factory via `CREATE` (and of course `CREATE2`). Depending on your needs it can be simpler to use `CREATE` since no `salt` value is involved / needs to be managed.\r\n\r\nWe already have the `Clone` library that provides create & create2 options",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1130250439/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1130253772",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3415#issuecomment-1130253772",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3415",
    "id": 1130253772,
    "node_id": "IC_kwDOA9tCBs5DXk3M",
    "user": {
      "login": "Amxx",
      "id": 2432299,
      "node_id": "MDQ6VXNlcjI0MzIyOTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2432299?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Amxx",
      "html_url": "https://github.com/Amxx",
      "followers_url": "https://api.github.com/users/Amxx/followers",
      "following_url": "https://api.github.com/users/Amxx/following{/other_user}",
      "gists_url": "https://api.github.com/users/Amxx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Amxx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Amxx/subscriptions",
      "organizations_url": "https://api.github.com/users/Amxx/orgs",
      "repos_url": "https://api.github.com/users/Amxx/repos",
      "events_url": "https://api.github.com/users/Amxx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Amxx/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-05-18T16:51:06Z",
    "updated_at": "2022-05-18T16:51:06Z",
    "author_association": "COLLABORATOR",
    "body": "For your message, it seems we agree that the use case is primarily for factories that would deploy contracts with arbitrary code. I'm not sure how common it is. I would always encourage users to deploy known contracts using the \"new\" syntax ... but there might be cases where having access to the \"create\" opcode with arbitrary bytecode would be relevant.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1130253772/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1130396585",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3415#issuecomment-1130396585",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3415",
    "id": 1130396585,
    "node_id": "IC_kwDOA9tCBs5DYHup",
    "user": {
      "login": "pcaversaccio",
      "id": 25297591,
      "node_id": "MDQ6VXNlcjI1Mjk3NTkx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25297591?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pcaversaccio",
      "html_url": "https://github.com/pcaversaccio",
      "followers_url": "https://api.github.com/users/pcaversaccio/followers",
      "following_url": "https://api.github.com/users/pcaversaccio/following{/other_user}",
      "gists_url": "https://api.github.com/users/pcaversaccio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pcaversaccio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pcaversaccio/subscriptions",
      "organizations_url": "https://api.github.com/users/pcaversaccio/orgs",
      "repos_url": "https://api.github.com/users/pcaversaccio/repos",
      "events_url": "https://api.github.com/users/pcaversaccio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pcaversaccio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-05-18T19:01:55Z",
    "updated_at": "2022-05-18T19:16:07Z",
    "author_association": "CONTRIBUTOR",
    "body": "> But that is something you want to check before sending the deployment transaction ... so off-chain. I don't really bet why you need a solidity implementation here.\r\n\r\nBecause I want to test it directly against the EVM and not the `node_modules`. Also, I've already written a deployer contract (using `CREATE`) that takes the target address (in my case the factory address I have for other EVM chains) I want to achieve as a function parameter and uses internally the `msg.sender` & a given nonce - also as a function argument - retrieved off-chain via the RPC method `eth_getTransactionCount` to validate the correctness (via `computeAddress` before the `CREATE` call to save gas if it's wrong and reverts - of course the `computeAddress` must be correctly implemented in Solidity). Of course, you can do the same completely off-chain but I guess I follow here my own philosophy and try as much as possible via Solidity/EVM directly.\r\n\r\n> We already have the Clone library that provides create & create2 options\r\n\r\nThanks for the hint - this validates this case. \r\n\r\n> For your message, it seems we agree that the use case is primarily for factories that would deploy contracts with arbitrary code. I'm not sure how common it is. I would always encourage users to deploy known contracts using the \"new\" syntax ... but there might be cases where having access to the \"create\" opcode with arbitrary bytecode would be relevant.\r\n\r\nIMO yes, but I could be completely wrong of course. It's just based on my personal experience. Can't speak for the entire community.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1130396585/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1140539628",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3415#issuecomment-1140539628",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3415",
    "id": 1140539628,
    "node_id": "IC_kwDOA9tCBs5D-0Ds",
    "user": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-05-29T22:54:21Z",
    "updated_at": "2022-05-29T22:54:21Z",
    "author_association": "MEMBER",
    "body": "I see that there could be value for deploying bytecode directly when Solidity `new` can't be used, and I think we'd be interested in offering a library for that use case so that the programmer doesn't have to drop to assembly.\r\n\r\nI think we can reopen https://github.com/OpenZeppelin/openzeppelin-contracts/pull/3411, though over the next week we will be focusing on the features that are already set for the next release.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1140539628/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1145708094",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3415#issuecomment-1145708094",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3415",
    "id": 1145708094,
    "node_id": "IC_kwDOA9tCBs5ESh4-",
    "user": {
      "login": "pcaversaccio",
      "id": 25297591,
      "node_id": "MDQ6VXNlcjI1Mjk3NTkx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25297591?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pcaversaccio",
      "html_url": "https://github.com/pcaversaccio",
      "followers_url": "https://api.github.com/users/pcaversaccio/followers",
      "following_url": "https://api.github.com/users/pcaversaccio/following{/other_user}",
      "gists_url": "https://api.github.com/users/pcaversaccio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pcaversaccio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pcaversaccio/subscriptions",
      "organizations_url": "https://api.github.com/users/pcaversaccio/orgs",
      "repos_url": "https://api.github.com/users/pcaversaccio/repos",
      "events_url": "https://api.github.com/users/pcaversaccio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pcaversaccio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-06-03T08:07:53Z",
    "updated_at": "2022-06-03T08:07:53Z",
    "author_association": "CONTRIBUTOR",
    "body": "Awesome, if @Amxx agrees as well we can move forward once you guys have wrapped up your current week's tasks.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1145708094/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1174491523",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3415#issuecomment-1174491523",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3415",
    "id": 1174491523,
    "node_id": "IC_kwDOA9tCBs5GAVGD",
    "user": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-07-05T01:09:07Z",
    "updated_at": "2022-07-05T01:09:07Z",
    "author_association": "MEMBER",
    "body": "Coming back to this now and rethinking, I really have a hard time seeing a strong enough use case to justify the effort required to add and maintain this.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1174491523/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1174659447",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3415#issuecomment-1174659447",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3415",
    "id": 1174659447,
    "node_id": "IC_kwDOA9tCBs5GA-F3",
    "user": {
      "login": "pcaversaccio",
      "id": 25297591,
      "node_id": "MDQ6VXNlcjI1Mjk3NTkx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25297591?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pcaversaccio",
      "html_url": "https://github.com/pcaversaccio",
      "followers_url": "https://api.github.com/users/pcaversaccio/followers",
      "following_url": "https://api.github.com/users/pcaversaccio/following{/other_user}",
      "gists_url": "https://api.github.com/users/pcaversaccio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pcaversaccio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pcaversaccio/subscriptions",
      "organizations_url": "https://api.github.com/users/pcaversaccio/orgs",
      "repos_url": "https://api.github.com/users/pcaversaccio/repos",
      "events_url": "https://api.github.com/users/pcaversaccio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pcaversaccio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-07-05T06:16:28Z",
    "updated_at": "2022-07-05T06:16:28Z",
    "author_association": "CONTRIBUTOR",
    "body": "For anyone still interested, I created a dedicated repo https://github.com/pcaversaccio/create-util.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1174659447/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
