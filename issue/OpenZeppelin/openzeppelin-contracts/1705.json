{
  "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1705",
  "repository_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts",
  "labels_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1705/labels{/name}",
  "comments_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1705/comments",
  "events_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1705/events",
  "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1705",
  "id": 428039057,
  "node_id": "MDU6SXNzdWU0MjgwMzkwNTc=",
  "number": 1705,
  "title": "Couldn't burn tokens by accessing from contract even after approval",
  "user": {
    "login": "smrMadhan7",
    "id": 25484145,
    "node_id": "MDQ6VXNlcjI1NDg0MTQ1",
    "avatar_url": "https://avatars.githubusercontent.com/u/25484145?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/smrMadhan7",
    "html_url": "https://github.com/smrMadhan7",
    "followers_url": "https://api.github.com/users/smrMadhan7/followers",
    "following_url": "https://api.github.com/users/smrMadhan7/following{/other_user}",
    "gists_url": "https://api.github.com/users/smrMadhan7/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/smrMadhan7/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/smrMadhan7/subscriptions",
    "organizations_url": "https://api.github.com/users/smrMadhan7/orgs",
    "repos_url": "https://api.github.com/users/smrMadhan7/repos",
    "events_url": "https://api.github.com/users/smrMadhan7/events{/privacy}",
    "received_events_url": "https://api.github.com/users/smrMadhan7/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 1034168915,
      "node_id": "MDU6TGFiZWwxMDM0MTY4OTE1",
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/labels/question",
      "name": "question",
      "color": "fcef8d",
      "default": true,
      "description": "Compilation errors, reverts on transactions, design questions."
    }
  ],
  "state": "closed",
  "locked": true,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 15,
  "created_at": "2019-04-02T06:03:41Z",
  "updated_at": "2022-12-20T22:24:02Z",
  "closed_at": "2019-04-06T05:24:12Z",
  "author_association": "NONE",
  "active_lock_reason": "resolved",
  "body": "I'm trying to call burnFrom() in the token from a contract by creating a interface object. After approval transferFrom() works fine whereas an error thrown while calling burnFrom().\r\n\r\nfor example, I've token X deployed. I'm calling it from an other contract with IERC20 tokenX object.\r\n\r\nfunction burnToken(address _address,uint256 value) public{\r\n        Token.burnFrom(_address,value);\r\n    }\r\n\r\n",
  "closed_by": {
    "login": "smrMadhan7",
    "id": 25484145,
    "node_id": "MDQ6VXNlcjI1NDg0MTQ1",
    "avatar_url": "https://avatars.githubusercontent.com/u/25484145?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/smrMadhan7",
    "html_url": "https://github.com/smrMadhan7",
    "followers_url": "https://api.github.com/users/smrMadhan7/followers",
    "following_url": "https://api.github.com/users/smrMadhan7/following{/other_user}",
    "gists_url": "https://api.github.com/users/smrMadhan7/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/smrMadhan7/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/smrMadhan7/subscriptions",
    "organizations_url": "https://api.github.com/users/smrMadhan7/orgs",
    "repos_url": "https://api.github.com/users/smrMadhan7/repos",
    "events_url": "https://api.github.com/users/smrMadhan7/events{/privacy}",
    "received_events_url": "https://api.github.com/users/smrMadhan7/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1705/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1705/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/479047963",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1705#issuecomment-479047963",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1705",
    "id": 479047963,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3OTA0Nzk2Mw==",
    "user": {
      "login": "Skyge",
      "id": 27282380,
      "node_id": "MDQ6VXNlcjI3MjgyMzgw",
      "avatar_url": "https://avatars.githubusercontent.com/u/27282380?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Skyge",
      "html_url": "https://github.com/Skyge",
      "followers_url": "https://api.github.com/users/Skyge/followers",
      "following_url": "https://api.github.com/users/Skyge/following{/other_user}",
      "gists_url": "https://api.github.com/users/Skyge/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Skyge/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Skyge/subscriptions",
      "organizations_url": "https://api.github.com/users/Skyge/orgs",
      "repos_url": "https://api.github.com/users/Skyge/repos",
      "events_url": "https://api.github.com/users/Skyge/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Skyge/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-04-02T15:21:46Z",
    "updated_at": "2019-04-02T15:21:46Z",
    "author_association": "CONTRIBUTOR",
    "body": "Yeah, what is the  error? \r\nYou can refer to this contract [ERC20Burnable.sol](https://github.com/OpenZeppelin/openzeppelin-solidity/blob/master/contracts/token/ERC20/ERC20Burnable.sol). I think your way is a little weird.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/479047963/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/479071772",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1705#issuecomment-479071772",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1705",
    "id": 479071772,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3OTA3MTc3Mg==",
    "user": {
      "login": "nventuro",
      "id": 2530770,
      "node_id": "MDQ6VXNlcjI1MzA3NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2530770?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nventuro",
      "html_url": "https://github.com/nventuro",
      "followers_url": "https://api.github.com/users/nventuro/followers",
      "following_url": "https://api.github.com/users/nventuro/following{/other_user}",
      "gists_url": "https://api.github.com/users/nventuro/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nventuro/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nventuro/subscriptions",
      "organizations_url": "https://api.github.com/users/nventuro/orgs",
      "repos_url": "https://api.github.com/users/nventuro/repos",
      "events_url": "https://api.github.com/users/nventuro/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nventuro/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-04-02T16:09:33Z",
    "updated_at": "2019-04-02T16:09:33Z",
    "author_association": "CONTRIBUTOR",
    "body": "Could you share your setup in greater detail? Keep in mind that if you call `burnFrom` from another contract, then _that contract_ is the one that you need to approve.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/479071772/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/479352218",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1705#issuecomment-479352218",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1705",
    "id": 479352218,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3OTM1MjIxOA==",
    "user": {
      "login": "smrMadhan7",
      "id": 25484145,
      "node_id": "MDQ6VXNlcjI1NDg0MTQ1",
      "avatar_url": "https://avatars.githubusercontent.com/u/25484145?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/smrMadhan7",
      "html_url": "https://github.com/smrMadhan7",
      "followers_url": "https://api.github.com/users/smrMadhan7/followers",
      "following_url": "https://api.github.com/users/smrMadhan7/following{/other_user}",
      "gists_url": "https://api.github.com/users/smrMadhan7/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/smrMadhan7/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/smrMadhan7/subscriptions",
      "organizations_url": "https://api.github.com/users/smrMadhan7/orgs",
      "repos_url": "https://api.github.com/users/smrMadhan7/repos",
      "events_url": "https://api.github.com/users/smrMadhan7/events{/privacy}",
      "received_events_url": "https://api.github.com/users/smrMadhan7/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-04-03T06:04:18Z",
    "updated_at": "2019-04-03T16:03:10Z",
    "author_association": "NONE",
    "body": "Yeah, I've done that. That's why I mentioned transferFrom() works fine.\r\n\r\nThis is the code I'm executing. The token is created with open zeppelin 0.5.2 standard. I've an interface which has burnFrom(). I just don't get it, If transferFroms works in the sense burnFrom() should also work. But its throwing an error.\r\n```\r\nfunction returnToken(uint256 _amount) public returns(bool){\r\n    require(Token.balanceOf(msg.sender)>=_amount);\r\n    require(hasInvested[_address] == true);\r\n    \r\n   Token.burnFrom(msg.sender,_amount);\r\n    //getPropertyTokens(msg.sender,_amount);   \r\n}\r\n```\r\nP.s The user has enough balance and error not occured by require statements.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/479352218/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/479557308",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1705#issuecomment-479557308",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1705",
    "id": 479557308,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3OTU1NzMwOA==",
    "user": {
      "login": "nventuro",
      "id": 2530770,
      "node_id": "MDQ6VXNlcjI1MzA3NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2530770?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nventuro",
      "html_url": "https://github.com/nventuro",
      "followers_url": "https://api.github.com/users/nventuro/followers",
      "following_url": "https://api.github.com/users/nventuro/following{/other_user}",
      "gists_url": "https://api.github.com/users/nventuro/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nventuro/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nventuro/subscriptions",
      "organizations_url": "https://api.github.com/users/nventuro/orgs",
      "repos_url": "https://api.github.com/users/nventuro/repos",
      "events_url": "https://api.github.com/users/nventuro/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nventuro/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-04-03T16:13:22Z",
    "updated_at": "2019-04-03T16:13:22Z",
    "author_association": "CONTRIBUTOR",
    "body": "Could you share a snippet of how you call `transferFrom `in that contract?",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/479557308/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/479563210",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1705#issuecomment-479563210",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1705",
    "id": 479563210,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3OTU2MzIxMA==",
    "user": {
      "login": "Skyge",
      "id": 27282380,
      "node_id": "MDQ6VXNlcjI3MjgyMzgw",
      "avatar_url": "https://avatars.githubusercontent.com/u/27282380?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Skyge",
      "html_url": "https://github.com/Skyge",
      "followers_url": "https://api.github.com/users/Skyge/followers",
      "following_url": "https://api.github.com/users/Skyge/following{/other_user}",
      "gists_url": "https://api.github.com/users/Skyge/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Skyge/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Skyge/subscriptions",
      "organizations_url": "https://api.github.com/users/Skyge/orgs",
      "repos_url": "https://api.github.com/users/Skyge/repos",
      "events_url": "https://api.github.com/users/Skyge/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Skyge/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-04-03T16:29:06Z",
    "updated_at": "2019-04-03T18:14:17Z",
    "author_association": "CONTRIBUTOR",
    "body": "contract `ERC20Burnable.sol` is that:\r\n```\r\npragma solidity ^0.5.0;\r\n\r\nimport \"./ERC20.sol\";\r\n\r\ncontract ERC20Burnable  {\r\n    \r\n    ERC20 erc20;\r\n    constructor(address _ERC20Address) public {\r\n        erc20 = ERC20(_ERC20Address);\r\n    }\r\n \r\n    function burnFrom(address from, uint256 value) public {\r\n        erc20._burnFrom(from, value);\r\n    }\r\n}\r\n```\r\ncontract` ERC20.sol` is:\r\n```\r\npragma solidity 0.5.0;\r\n\r\nimport \"./IERC20.sol\";\r\nimport \"./SafeMath.sol\";\r\n\r\ncontract ERC20 is IERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowed;\r\n\r\n    uint256 private _totalSupply;\r\n    \r\n    constructor() public {\r\n        _balances[msg.sender] = 10000;\r\n        _totalSupply = 10000;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view returns (uint256) {\r\n        return _allowed[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 value) public returns (bool) {\r\n        _approve(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n    function _transfer(address from, address to, uint256 value) internal {\r\n        require(to != address(0));\r\n\r\n        _balances[from] = _balances[from].sub(value);\r\n        _balances[to] = _balances[to].add(value);\r\n        emit Transfer(from, to, value);\r\n    }\r\n\r\n    function _burn(address account, uint256 value) internal {\r\n        require(account != address(0));\r\n\r\n        _totalSupply = _totalSupply.sub(value);\r\n        _balances[account] = _balances[account].sub(value);\r\n        emit Transfer(account, address(0), value);\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 value) internal {\r\n        require(spender != address(0));\r\n        require(owner != address(0));\r\n\r\n        _allowed[owner][spender] = value;\r\n        emit Approval(owner, spender, value);\r\n    }\r\n\r\n    function _burnFrom(address account, uint256 value) public {\r\n        _burn(account, value);\r\n        _approve(account, msg.sender, _allowed[account][msg.sender].sub(value));\r\n    }\r\n}\r\n```\r\nDeploy the contract `ERC20.sol`  with the account1, then deploy the contract `ERC20Burnable.sol`, call `approve(address(account1), address(ERC20Burnable), 100)`, then call `burnFrom(address(account1), 50 )`, it will be OK, it will burn the `ERC20Burnable` approval token, but I think this way is a little weird. I prefer [this way](https://github.com/OpenZeppelin/openzeppelin-solidity/blob/master/contracts/token/ERC20/ERC20Burnable.sol)",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/479563210/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/479600762",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1705#issuecomment-479600762",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1705",
    "id": 479600762,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3OTYwMDc2Mg==",
    "user": {
      "login": "nventuro",
      "id": 2530770,
      "node_id": "MDQ6VXNlcjI1MzA3NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2530770?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nventuro",
      "html_url": "https://github.com/nventuro",
      "followers_url": "https://api.github.com/users/nventuro/followers",
      "following_url": "https://api.github.com/users/nventuro/following{/other_user}",
      "gists_url": "https://api.github.com/users/nventuro/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nventuro/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nventuro/subscriptions",
      "organizations_url": "https://api.github.com/users/nventuro/orgs",
      "repos_url": "https://api.github.com/users/nventuro/repos",
      "events_url": "https://api.github.com/users/nventuro/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nventuro/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-04-03T18:13:27Z",
    "updated_at": "2019-04-03T18:13:27Z",
    "author_association": "CONTRIBUTOR",
    "body": "@Skyge to clarify, I was requesting @smrMadhan7 to post a snippet of _their_ contract with the `transferFrom` call.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/479600762/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/479688004",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1705#issuecomment-479688004",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1705",
    "id": 479688004,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3OTY4ODAwNA==",
    "user": {
      "login": "Skyge",
      "id": 27282380,
      "node_id": "MDQ6VXNlcjI3MjgyMzgw",
      "avatar_url": "https://avatars.githubusercontent.com/u/27282380?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Skyge",
      "html_url": "https://github.com/Skyge",
      "followers_url": "https://api.github.com/users/Skyge/followers",
      "following_url": "https://api.github.com/users/Skyge/following{/other_user}",
      "gists_url": "https://api.github.com/users/Skyge/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Skyge/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Skyge/subscriptions",
      "organizations_url": "https://api.github.com/users/Skyge/orgs",
      "repos_url": "https://api.github.com/users/Skyge/repos",
      "events_url": "https://api.github.com/users/Skyge/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Skyge/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-04-03T22:56:41Z",
    "updated_at": "2019-04-03T22:56:41Z",
    "author_association": "CONTRIBUTOR",
    "body": "Yeah, I also think he should provide more details about his contract, in order to we can quickly help him solve it.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/479688004/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/479750613",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1705#issuecomment-479750613",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1705",
    "id": 479750613,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3OTc1MDYxMw==",
    "user": {
      "login": "smrMadhan7",
      "id": 25484145,
      "node_id": "MDQ6VXNlcjI1NDg0MTQ1",
      "avatar_url": "https://avatars.githubusercontent.com/u/25484145?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/smrMadhan7",
      "html_url": "https://github.com/smrMadhan7",
      "followers_url": "https://api.github.com/users/smrMadhan7/followers",
      "following_url": "https://api.github.com/users/smrMadhan7/following{/other_user}",
      "gists_url": "https://api.github.com/users/smrMadhan7/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/smrMadhan7/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/smrMadhan7/subscriptions",
      "organizations_url": "https://api.github.com/users/smrMadhan7/orgs",
      "repos_url": "https://api.github.com/users/smrMadhan7/repos",
      "events_url": "https://api.github.com/users/smrMadhan7/events{/privacy}",
      "received_events_url": "https://api.github.com/users/smrMadhan7/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-04-04T05:00:59Z",
    "updated_at": "2019-04-04T21:17:58Z",
    "author_association": "NONE",
    "body": "This is the code used for token.\r\n```\r\npragma solidity 0.5.0;\r\n\r\nimport \"./Roles.sol\";\r\nimport \"./MinterRole.sol\";\r\nimport \"./Ownable.sol\";\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Unsigned math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Multiplies two unsigned integers, reverts on overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Adds two unsigned integers, reverts on overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\r\n     * reverts when dividing by zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ninterface IERC20 {\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address who) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\r\n * Originally based on code by FirstBlood:\r\n * https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n *\r\n * This implementation emits additional Approval events, allowing applications to reconstruct the allowance status for\r\n * all accounts just by listening to said events. Note that this isn't required by the specification, and other\r\n * compliant implementations may not do it.\r\n */\r\ncontract ERC20 is IERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowed;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    /**\r\n     * @dev Total number of tokens in existence\r\n     */\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev Gets the balance of the specified address.\r\n     * @param owner The address to query the balance of.\r\n     * @return An uint256 representing the amount owned by the passed address.\r\n     */\r\n    function balanceOf(address owner) public view returns (uint256) {\r\n        return _balances[owner];\r\n    }\r\n\r\n    /**\r\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n     * @param owner address The address which owns the funds.\r\n     * @param spender address The address which will spend the funds.\r\n     * @return A uint256 specifying the amount of tokens still available for the spender.\r\n     */\r\n    function allowance(address owner, address spender) public view returns (uint256) {\r\n        return _allowed[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer token for a specified address\r\n     * @param to The address to transfer to.\r\n     * @param value The amount to be transferred.\r\n     */\r\n    function transfer(address to, uint256 value) public returns (bool) {\r\n        _transfer(msg.sender, to, value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     * @param spender The address which will spend the funds.\r\n     * @param value The amount of tokens to be spent.\r\n     */\r\n    function approve(address spender, uint256 value) public returns (bool) {\r\n        _approve(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer tokens from one address to another.\r\n     * Note that while this function emits an Approval event, this is not required as per the specification,\r\n     * and other compliant implementations may not emit the event.\r\n     * @param from address The address which you want to send tokens from\r\n     * @param to address The address which you want to transfer to\r\n     * @param value uint256 the amount of tokens to be transferred\r\n     */\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\r\n        _transfer(from, to, value);\r\n        _approve(from, msg.sender, _allowed[from][msg.sender].sub(value));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n     * approve should be called when allowed_[_spender] == 0. To increment\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * From MonolithDAO Token.sol\r\n     * Emits an Approval event.\r\n     * @param spender The address which will spend the funds.\r\n     * @param addedValue The amount of tokens to increase the allowance by.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n        _approve(msg.sender, spender, _allowed[msg.sender][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n     * approve should be called when allowed_[_spender] == 0. To decrement\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * From MonolithDAO Token.sol\r\n     * Emits an Approval event.\r\n     * @param spender The address which will spend the funds.\r\n     * @param subtractedValue The amount of tokens to decrease the allowance by.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n        _approve(msg.sender, spender, _allowed[msg.sender][spender].sub(subtractedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer token for a specified addresses\r\n     * @param from The address to transfer from.\r\n     * @param to The address to transfer to.\r\n     * @param value The amount to be transferred.\r\n     */\r\n    function _transfer(address from, address to, uint256 value) internal {\r\n        require(to != address(0));\r\n\r\n        _balances[from] = _balances[from].sub(value);\r\n        _balances[to] = _balances[to].add(value);\r\n        emit Transfer(from, to, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function that mints an amount of the token and assigns it to\r\n     * an account. This encapsulates the modification of balances such that the\r\n     * proper events are emitted.\r\n     * @param account The account that will receive the created tokens.\r\n     * @param value The amount that will be created.\r\n     */\r\n    function _mint(address account, uint256 value) internal {\r\n        require(account != address(0));\r\n\r\n        _totalSupply = _totalSupply.add(value);\r\n        _balances[account] = _balances[account].add(value);\r\n        emit Transfer(address(0), account, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function that burns an amount of the token of a given\r\n     * account.\r\n     * @param account The account whose tokens will be burnt.\r\n     * @param value The amount that will be burnt.\r\n     */\r\n    function _burn(address account, uint256 value) internal {\r\n        require(account != address(0));\r\n\r\n        _totalSupply = _totalSupply.sub(value);\r\n        _balances[account] = _balances[account].sub(value);\r\n        emit Transfer(account, address(0), value);\r\n    }\r\n\r\n    /**\r\n     * @dev Approve an address to spend another addresses' tokens.\r\n     * @param owner The address that owns the tokens.\r\n     * @param spender The address that will spend the tokens.\r\n     * @param value The number of tokens that can be spent.\r\n     */\r\n    function _approve(address owner, address spender, uint256 value) internal {\r\n        require(spender != address(0));\r\n        require(owner != address(0));\r\n\r\n        _allowed[owner][spender] = value;\r\n        emit Approval(owner, spender, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function that burns an amount of the token of a given\r\n     * account, deducting from the sender's allowance for said account. Uses the\r\n     * internal burn function.\r\n     * Emits an Approval event (reflecting the reduced allowance).\r\n     * @param account The account whose tokens will be burnt.\r\n     * @param value The amount that will be burnt.\r\n     */\r\n    function _burnFrom(address account, uint256 value) internal {\r\n        _burn(account, value);\r\n        _approve(account, msg.sender, _allowed[account][msg.sender].sub(value));\r\n    }\r\n}\r\n\r\n/**\r\n * @title Burnable Token\r\n * @dev Token that can be irreversibly burned (destroyed).\r\n */\r\ncontract ERC20Burnable is ERC20,MinterRole  {\r\n    /**\r\n     * @dev Burns a specific amount of tokens.\r\n     * @param value The amount of token to be burned.\r\n     */\r\n    function burn(uint256 value) public {\r\n        _burn(msg.sender, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Burns a specific amount of tokens from the target address and decrements allowance\r\n     * @param from address The account whose tokens will be burned.\r\n     * @param value uint256 The amount of token to be burned.\r\n     */\r\n    function burnFrom(address from, uint256 value) public {\r\n        _burnFrom(from, value);\r\n    }\r\n}\r\n\r\ncontract XToken is ERC20Burnable  { \r\n    \r\n  string public name=\"X Token\";\r\n  string public symbol=\"X\";\r\n  uint8 public decimals=18;\r\n \r\n  \r\n  /**\r\n     * @dev Function to mint tokens\r\n     * @param to The address that will receive the minted tokens.\r\n     * @param value The amount of tokens to mint.\r\n     * @return A boolean that indicates if the operation was successful.\r\n     */\r\n    function mint(address to, uint256 value) public onlyMinter returns (bool) {\r\n        _mint(to, value);\r\n        return true;\r\n    }\r\n\r\n\r\n}\r\n```\r\n**This is the interface used.**\r\n```\r\ninterface Minter{\r\n    function mint(address to, uint256 value)  external returns (bool);\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address who) external view returns (uint256);\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n    function burnFrom(address from, uint256 value) external returns (bool);\r\n    function burn(uint256 value) external returns (bool);\r\n}\r\n```\r\n**In main contract, I've used the following code. In this transferFrom() works fine, replacing it with burnFrom() throws error.**\r\n```\r\n constructor(Minter _XToken) public{\r\n        XToken = _XToken;       \r\n    }\r\n\r\nfunction returnTokens(uint256 _amount) public returns(bool){\r\n       \r\n        require(XToken.balanceOf(msg.sender)>=_amount);\r\n        //require(hasInvested[_address] == true);\r\n        \r\n        XToken.transferFrom(msg.sender,address(this),_amount);\r\n              \r\n    }\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/479750613/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/479846876",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1705#issuecomment-479846876",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1705",
    "id": 479846876,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3OTg0Njg3Ng==",
    "user": {
      "login": "Skyge",
      "id": 27282380,
      "node_id": "MDQ6VXNlcjI3MjgyMzgw",
      "avatar_url": "https://avatars.githubusercontent.com/u/27282380?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Skyge",
      "html_url": "https://github.com/Skyge",
      "followers_url": "https://api.github.com/users/Skyge/followers",
      "following_url": "https://api.github.com/users/Skyge/following{/other_user}",
      "gists_url": "https://api.github.com/users/Skyge/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Skyge/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Skyge/subscriptions",
      "organizations_url": "https://api.github.com/users/Skyge/orgs",
      "repos_url": "https://api.github.com/users/Skyge/repos",
      "events_url": "https://api.github.com/users/Skyge/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Skyge/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-04-04T10:44:51Z",
    "updated_at": "2019-04-04T10:50:44Z",
    "author_association": "CONTRIBUTOR",
    "body": "@smrMadhan7 It looks like a standard contract, so I think it will work fine. So if `accountA` has 100 tokens, then he calls `approve(accountB, 50)` to give `accountB` approval 50 token, if `accountB` want to burn 30 tokens, then he can call `burnFrom (accountA, 30)`. ",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/479846876/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/479901625",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1705#issuecomment-479901625",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1705",
    "id": 479901625,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3OTkwMTYyNQ==",
    "user": {
      "login": "smrMadhan7",
      "id": 25484145,
      "node_id": "MDQ6VXNlcjI1NDg0MTQ1",
      "avatar_url": "https://avatars.githubusercontent.com/u/25484145?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/smrMadhan7",
      "html_url": "https://github.com/smrMadhan7",
      "followers_url": "https://api.github.com/users/smrMadhan7/followers",
      "following_url": "https://api.github.com/users/smrMadhan7/following{/other_user}",
      "gists_url": "https://api.github.com/users/smrMadhan7/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/smrMadhan7/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/smrMadhan7/subscriptions",
      "organizations_url": "https://api.github.com/users/smrMadhan7/orgs",
      "repos_url": "https://api.github.com/users/smrMadhan7/repos",
      "events_url": "https://api.github.com/users/smrMadhan7/events{/privacy}",
      "received_events_url": "https://api.github.com/users/smrMadhan7/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-04-04T13:41:19Z",
    "updated_at": "2019-04-04T13:41:19Z",
    "author_association": "NONE",
    "body": "@Skyge  I too thought the same, but it didn't work. I even went through the code multiple times, nothing seems odd. ",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/479901625/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/480245895",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1705#issuecomment-480245895",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1705",
    "id": 480245895,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ4MDI0NTg5NQ==",
    "user": {
      "login": "smrMadhan7",
      "id": 25484145,
      "node_id": "MDQ6VXNlcjI1NDg0MTQ1",
      "avatar_url": "https://avatars.githubusercontent.com/u/25484145?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/smrMadhan7",
      "html_url": "https://github.com/smrMadhan7",
      "followers_url": "https://api.github.com/users/smrMadhan7/followers",
      "following_url": "https://api.github.com/users/smrMadhan7/following{/other_user}",
      "gists_url": "https://api.github.com/users/smrMadhan7/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/smrMadhan7/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/smrMadhan7/subscriptions",
      "organizations_url": "https://api.github.com/users/smrMadhan7/orgs",
      "repos_url": "https://api.github.com/users/smrMadhan7/repos",
      "events_url": "https://api.github.com/users/smrMadhan7/events{/privacy}",
      "received_events_url": "https://api.github.com/users/smrMadhan7/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-04-05T11:44:17Z",
    "updated_at": "2019-04-05T11:44:17Z",
    "author_association": "NONE",
    "body": "Thanks @Skyge ",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/480245895/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/480330509",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1705#issuecomment-480330509",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1705",
    "id": 480330509,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ4MDMzMDUwOQ==",
    "user": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-04-05T16:02:09Z",
    "updated_at": "2019-04-05T16:02:09Z",
    "author_association": "MEMBER",
    "body": "@smrMadhan7 We're not giving up on helping you to make this code work.\r\n\r\nSo, to be clear, you're replacing `XToken.transferFrom(msg.sender,address(this),_amount)` with `XToken.burnFrom(msg.sender,_amount)`, right?\r\n\r\nYour code looks very weird for a couple of reasons. Why are you defining your own `ERC20Burnable` with `MinterRole`? You should be using OpenZeppelin contracts as-is. You can use `ERC20Burnable` and `ERC20Mintable` here. I'd recommend to change `XToken` to use those contracts.\r\n\r\n---\r\n\r\nWe can continue this conversation here now, but for future questions like this please [join our forum](http://forum.zeppelin.solutions/) and post over there. :slightly_smiling_face: ",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/480330509/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/480431490",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1705#issuecomment-480431490",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1705",
    "id": 480431490,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ4MDQzMTQ5MA==",
    "user": {
      "login": "Skyge",
      "id": 27282380,
      "node_id": "MDQ6VXNlcjI3MjgyMzgw",
      "avatar_url": "https://avatars.githubusercontent.com/u/27282380?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Skyge",
      "html_url": "https://github.com/Skyge",
      "followers_url": "https://api.github.com/users/Skyge/followers",
      "following_url": "https://api.github.com/users/Skyge/following{/other_user}",
      "gists_url": "https://api.github.com/users/Skyge/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Skyge/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Skyge/subscriptions",
      "organizations_url": "https://api.github.com/users/Skyge/orgs",
      "repos_url": "https://api.github.com/users/Skyge/repos",
      "events_url": "https://api.github.com/users/Skyge/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Skyge/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-04-05T21:43:22Z",
    "updated_at": "2019-04-05T21:43:22Z",
    "author_association": "CONTRIBUTOR",
    "body": "I've helped him out in private, so he closed the issue, the exact reason is that he wrote an interface, it is OK that he gave a return value in a function, but when he rewrote the function, he forgot to give a return value, so it always throws out an error. ",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/480431490/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1360391741",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1705#issuecomment-1360391741",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1705",
    "id": 1360391741,
    "node_id": "IC_kwDOA9tCBs5RFe49",
    "user": {
      "login": "SuperDev321",
      "id": 77449282,
      "node_id": "MDQ6VXNlcjc3NDQ5Mjgy",
      "avatar_url": "https://avatars.githubusercontent.com/u/77449282?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/SuperDev321",
      "html_url": "https://github.com/SuperDev321",
      "followers_url": "https://api.github.com/users/SuperDev321/followers",
      "following_url": "https://api.github.com/users/SuperDev321/following{/other_user}",
      "gists_url": "https://api.github.com/users/SuperDev321/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/SuperDev321/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SuperDev321/subscriptions",
      "organizations_url": "https://api.github.com/users/SuperDev321/orgs",
      "repos_url": "https://api.github.com/users/SuperDev321/repos",
      "events_url": "https://api.github.com/users/SuperDev321/events{/privacy}",
      "received_events_url": "https://api.github.com/users/SuperDev321/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-12-20T22:18:13Z",
    "updated_at": "2022-12-20T22:18:13Z",
    "author_association": "NONE",
    "body": "Hello, @Skyge \r\nCould you help me on same issue?\r\nI don't use return value, but still get error.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1360391741/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1360395497",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1705#issuecomment-1360395497",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1705",
    "id": 1360395497,
    "node_id": "IC_kwDOA9tCBs5RFfzp",
    "user": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-12-20T22:23:52Z",
    "updated_at": "2022-12-20T22:23:52Z",
    "author_association": "MEMBER",
    "body": "Please ask in the [OpenZeppelin Forum](https://forum.openzeppelin.com/).",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1360395497/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
