{
  "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1099",
  "repository_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts",
  "labels_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1099/labels{/name}",
  "comments_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1099/comments",
  "events_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1099/events",
  "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1099",
  "id": 343302552,
  "node_id": "MDU6SXNzdWUzNDMzMDI1NTI=",
  "number": 1099,
  "title": "Extend Escrows to use tokens",
  "user": {
    "login": "nventuro",
    "id": 2530770,
    "node_id": "MDQ6VXNlcjI1MzA3NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/2530770?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nventuro",
    "html_url": "https://github.com/nventuro",
    "followers_url": "https://api.github.com/users/nventuro/followers",
    "following_url": "https://api.github.com/users/nventuro/following{/other_user}",
    "gists_url": "https://api.github.com/users/nventuro/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nventuro/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nventuro/subscriptions",
    "organizations_url": "https://api.github.com/users/nventuro/orgs",
    "repos_url": "https://api.github.com/users/nventuro/repos",
    "events_url": "https://api.github.com/users/nventuro/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nventuro/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 1000207718,
      "node_id": "MDU6TGFiZWwxMDAwMjA3NzE4",
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/labels/contracts",
      "name": "contracts",
      "color": "1d76db",
      "default": false,
      "description": "Smart contract code."
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 15,
  "created_at": "2018-07-21T06:26:58Z",
  "updated_at": "2019-07-22T10:20:12Z",
  "closed_at": null,
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "Currently, the [Escrow](https://github.com/OpenZeppelin/openzeppelin-solidity/blob/release-v1.11.0/contracts/payment/Escrow.sol) contracts can only be used to transfer Ether. #1010 introduced a contract very similar to a [ConditionalEscrow](https://github.com/OpenZeppelin/openzeppelin-solidity/blob/release-v1.11.0/contracts/payment/ConditionalEscrow.sol), with the added bonus of also allowing tokens to be transferred.\r\n\r\nDo we want to extend the current `Escrow` so that it can also use tokens? The original intent behind it was to enable [async payments](https://github.com/OpenZeppelin/openzeppelin-solidity/blob/release-v1.11.0/contracts/payment/PullPayment.sol), which is not required for an ERC20 token (since in both cases it'd boil down to a `transfer` call). It is when `ConditionalEscrow`s are considered that the benefits emerge: we could have [refund payments](https://github.com/OpenZeppelin/openzeppelin-solidity/blob/release-v1.11.0/contracts/payment/RefundEscrow.sol) with tokens, the aforementioned timelock, etc.\r\n\r\nIf there's interest in this idea, I can try out some designs and come back with a more concrete proposal (in terms of implementation details).",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1099/reactions",
    "total_count": 1,
    "+1": 1,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1099/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/406807804",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1099#issuecomment-406807804",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1099",
    "id": 406807804,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwNjgwNzgwNA==",
    "user": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-21T16:26:15Z",
    "updated_at": "2018-07-21T16:26:15Z",
    "author_association": "MEMBER",
    "body": "I'm very interested in exploring how contracts can be written to deal with ether and tokens uniformly. I think this also affects the stabilization efforts because it will probably result in a convention for external functions that deal with both, so there's reason to do this research now before v2.0.\r\n\r\nWhat would be a practical use case for a generic Escrow? The `Timelock` contract in particular I feel shouldn't be replaced by a conditional escrow because one has a single beneficiary and the other has multiple. This is a fundamental difference IMO.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/406807804/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/407075469",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1099#issuecomment-407075469",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1099",
    "id": 407075469,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwNzA3NTQ2OQ==",
    "user": {
      "login": "nedodn",
      "id": 29645083,
      "node_id": "MDQ6VXNlcjI5NjQ1MDgz",
      "avatar_url": "https://avatars.githubusercontent.com/u/29645083?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nedodn",
      "html_url": "https://github.com/nedodn",
      "followers_url": "https://api.github.com/users/nedodn/followers",
      "following_url": "https://api.github.com/users/nedodn/following{/other_user}",
      "gists_url": "https://api.github.com/users/nedodn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nedodn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nedodn/subscriptions",
      "organizations_url": "https://api.github.com/users/nedodn/orgs",
      "repos_url": "https://api.github.com/users/nedodn/repos",
      "events_url": "https://api.github.com/users/nedodn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nedodn/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-23T14:22:32Z",
    "updated_at": "2018-07-23T14:23:01Z",
    "author_association": "CONTRIBUTOR",
    "body": "The `Timelock` contract was originally written as an extension to `TokenTimelock` to handle tokens and Ether, and I would agree with @frangio that it is fundamentally different than an Escrow. The Timelock contracts seem to me to be more for one time payments to a single person, while the Escrows seem more suitable for multiple payments to different people. I think those use cases are different enough to warrant two separate contracts to avoid confusion. \r\n\r\nExtending the `Escrow` contracts to support tokens would probably be important, I think the issues that will arise from that will be whether or not you want them to generically support many tokens or only support one type. Also that as far as I know, there's no way to track incoming token transfers in contract, like you can with ether, so you won't really know who's transferring what into the contract.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/407075469/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/407100712",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1099#issuecomment-407100712",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1099",
    "id": 407100712,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwNzEwMDcxMg==",
    "user": {
      "login": "nventuro",
      "id": 2530770,
      "node_id": "MDQ6VXNlcjI1MzA3NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2530770?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nventuro",
      "html_url": "https://github.com/nventuro",
      "followers_url": "https://api.github.com/users/nventuro/followers",
      "following_url": "https://api.github.com/users/nventuro/following{/other_user}",
      "gists_url": "https://api.github.com/users/nventuro/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nventuro/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nventuro/subscriptions",
      "organizations_url": "https://api.github.com/users/nventuro/orgs",
      "repos_url": "https://api.github.com/users/nventuro/repos",
      "events_url": "https://api.github.com/users/nventuro/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nventuro/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-23T15:34:32Z",
    "updated_at": "2018-07-23T15:34:32Z",
    "author_association": "CONTRIBUTOR",
    "body": "@frangio The Escrows are a payment system: assets are handled to the Escrow, which then decides what to do with them based on a condition (e.g. give them immediately to the payee, refund the payer if a condition is met, release the funds after a certain date, etc.). Extending the current Ether-only implementation to tokens feels like a natural step forward to me.\r\n\r\n@nedodn For random tokens, sure, you won't be able to tell, but any compliant (e.g. ERC20) token should have something akin to a `Transfer` event.\r\n\r\nRegarding one-off vs multiple payments, I don't see a reason to support both when the former is (by definition) doable with the latter. Pragmatically, I'd expect the deployment cost of a `Timelock` to be (much) higher than the transaction cost to register a payment in a `TimelockedEscrow`, though I don't have data for this yet.\r\n\r\nI'll try out a sample API I have in mind soon, and come back with the aforementioned data and a more concrete proposal.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/407100712/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/407763044",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1099#issuecomment-407763044",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1099",
    "id": 407763044,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwNzc2MzA0NA==",
    "user": {
      "login": "nedodn",
      "id": 29645083,
      "node_id": "MDQ6VXNlcjI5NjQ1MDgz",
      "avatar_url": "https://avatars.githubusercontent.com/u/29645083?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nedodn",
      "html_url": "https://github.com/nedodn",
      "followers_url": "https://api.github.com/users/nedodn/followers",
      "following_url": "https://api.github.com/users/nedodn/following{/other_user}",
      "gists_url": "https://api.github.com/users/nedodn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nedodn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nedodn/subscriptions",
      "organizations_url": "https://api.github.com/users/nedodn/orgs",
      "repos_url": "https://api.github.com/users/nedodn/repos",
      "events_url": "https://api.github.com/users/nedodn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nedodn/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-25T13:56:58Z",
    "updated_at": "2018-07-25T13:56:58Z",
    "author_association": "CONTRIBUTOR",
    "body": "@nventuro  True about the `Transfer` event but you would have to run some sort of server or watcher off-chain in order to keep track of how many tokens were sent. I don't think there's any on-chain way to monitor those transfers, so the only information you'd have about a contract would be its total token balance. This may or may not be an issue depending on what you're using the `Escrow` for though it may be difficult to keep track of multiple payees and payers with tokens. Might make sense to have the payer approve the contract and then have the contract pull the tokens from the payer, so you'd know how many were supposed to be sent. \r\n\r\nThere is probably less gas used with a `TimelockedEscrow` transaction but you'd still have to deploy that as well wouldn't you? Unless you have one general contract for everyone keeping track of each transactions' deadlines as well as the amount. Which wouldn't be too difficult, I wrote something similar a while ago that basically does that.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/407763044/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/407802756",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1099#issuecomment-407802756",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1099",
    "id": 407802756,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwNzgwMjc1Ng==",
    "user": {
      "login": "nventuro",
      "id": 2530770,
      "node_id": "MDQ6VXNlcjI1MzA3NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2530770?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nventuro",
      "html_url": "https://github.com/nventuro",
      "followers_url": "https://api.github.com/users/nventuro/followers",
      "following_url": "https://api.github.com/users/nventuro/following{/other_user}",
      "gists_url": "https://api.github.com/users/nventuro/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nventuro/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nventuro/subscriptions",
      "organizations_url": "https://api.github.com/users/nventuro/orgs",
      "repos_url": "https://api.github.com/users/nventuro/repos",
      "events_url": "https://api.github.com/users/nventuro/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nventuro/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-25T15:50:15Z",
    "updated_at": "2018-07-25T15:50:15Z",
    "author_association": "CONTRIBUTOR",
    "body": "Approving and pulling wouldn't work, since nothing prevents the payer from transferring all of their tokens into a separate account: this is similar to #901, and the whole reason why Escrows were introduced in the first place.\r\n\r\nYour gas costs comment is correct in that there is indeed a (higher?) cost of deploying the Escrow itself, but since it's a one-off thing, it should be amortized over time.\r\n\r\nThere are two somewhat orthogonal issues being discussed here:\r\n 1. Should Escrows be extended to use tokens?\r\n 1. Should Escrows replace the 'old' `Timelock` and `TokenTimelock`?\r\n\r\n`1` is what I intend for us to answer here (including a tentative API). \r\n\r\nRegarding `2`, I've been convinced offline that a one-off Escrow deserves being a thing, simply because the attack surface vector is smaller, as well as the risk (i.e. it will only contain funds for _one_ payment, preventing a DAO-hack style attack). I'm not sure what these contracts should look like (since they will pretty much share the Escrow's logic), maybe inheritance adding these restrictions? Anyway, this is not the place for that discussion: we should open a separate issue.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/407802756/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/468443998",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1099#issuecomment-468443998",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1099",
    "id": 468443998,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ2ODQ0Mzk5OA==",
    "user": {
      "login": "nventuro",
      "id": 2530770,
      "node_id": "MDQ6VXNlcjI1MzA3NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2530770?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nventuro",
      "html_url": "https://github.com/nventuro",
      "followers_url": "https://api.github.com/users/nventuro/followers",
      "following_url": "https://api.github.com/users/nventuro/following{/other_user}",
      "gists_url": "https://api.github.com/users/nventuro/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nventuro/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nventuro/subscriptions",
      "organizations_url": "https://api.github.com/users/nventuro/orgs",
      "repos_url": "https://api.github.com/users/nventuro/repos",
      "events_url": "https://api.github.com/users/nventuro/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nventuro/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-02-28T21:24:09Z",
    "updated_at": "2019-02-28T21:24:09Z",
    "author_association": "CONTRIBUTOR",
    "body": "https://github.com/OpenZeppelin/openzeppelin-solidity/issues/1595 requires these to exist, so we probably want to revisit this conversation soon.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/468443998/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/470727706",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1099#issuecomment-470727706",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1099",
    "id": 470727706,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3MDcyNzcwNg==",
    "user": {
      "login": "nventuro",
      "id": 2530770,
      "node_id": "MDQ6VXNlcjI1MzA3NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2530770?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nventuro",
      "html_url": "https://github.com/nventuro",
      "followers_url": "https://api.github.com/users/nventuro/followers",
      "following_url": "https://api.github.com/users/nventuro/following{/other_user}",
      "gists_url": "https://api.github.com/users/nventuro/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nventuro/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nventuro/subscriptions",
      "organizations_url": "https://api.github.com/users/nventuro/orgs",
      "repos_url": "https://api.github.com/users/nventuro/repos",
      "events_url": "https://api.github.com/users/nventuro/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nventuro/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-03-07T22:40:40Z",
    "updated_at": "2019-03-07T22:40:40Z",
    "author_association": "CONTRIBUTOR",
    "body": "#1 and #239 both have use-cases for timelocked-ether: a feature we already have for tokens, that could be easily implemented via `ConditionalEscrow`.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/470727706/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/471027316",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1099#issuecomment-471027316",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1099",
    "id": 471027316,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3MTAyNzMxNg==",
    "user": {
      "login": "nventuro",
      "id": 2530770,
      "node_id": "MDQ6VXNlcjI1MzA3NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2530770?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nventuro",
      "html_url": "https://github.com/nventuro",
      "followers_url": "https://api.github.com/users/nventuro/followers",
      "following_url": "https://api.github.com/users/nventuro/following{/other_user}",
      "gists_url": "https://api.github.com/users/nventuro/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nventuro/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nventuro/subscriptions",
      "organizations_url": "https://api.github.com/users/nventuro/orgs",
      "repos_url": "https://api.github.com/users/nventuro/repos",
      "events_url": "https://api.github.com/users/nventuro/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nventuro/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-03-08T18:24:49Z",
    "updated_at": "2019-03-08T18:24:49Z",
    "author_association": "CONTRIBUTOR",
    "body": "An ether timelock came up again in #443.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/471027316/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/508537366",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1099#issuecomment-508537366",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1099",
    "id": 508537366,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUwODUzNzM2Ng==",
    "user": {
      "login": "ramikalai",
      "id": 16903305,
      "node_id": "MDQ6VXNlcjE2OTAzMzA1",
      "avatar_url": "https://avatars.githubusercontent.com/u/16903305?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ramikalai",
      "html_url": "https://github.com/ramikalai",
      "followers_url": "https://api.github.com/users/ramikalai/followers",
      "following_url": "https://api.github.com/users/ramikalai/following{/other_user}",
      "gists_url": "https://api.github.com/users/ramikalai/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ramikalai/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ramikalai/subscriptions",
      "organizations_url": "https://api.github.com/users/ramikalai/orgs",
      "repos_url": "https://api.github.com/users/ramikalai/repos",
      "events_url": "https://api.github.com/users/ramikalai/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ramikalai/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-07-04T16:46:54Z",
    "updated_at": "2019-07-04T16:46:54Z",
    "author_association": "NONE",
    "body": "Hey @nventuro, is there any progress/effort being made on the tokenescrow contracts? I believe this could definitely be useful.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/508537366/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/508780124",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1099#issuecomment-508780124",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1099",
    "id": 508780124,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUwODc4MDEyNA==",
    "user": {
      "login": "nventuro",
      "id": 2530770,
      "node_id": "MDQ6VXNlcjI1MzA3NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2530770?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nventuro",
      "html_url": "https://github.com/nventuro",
      "followers_url": "https://api.github.com/users/nventuro/followers",
      "following_url": "https://api.github.com/users/nventuro/following{/other_user}",
      "gists_url": "https://api.github.com/users/nventuro/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nventuro/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nventuro/subscriptions",
      "organizations_url": "https://api.github.com/users/nventuro/orgs",
      "repos_url": "https://api.github.com/users/nventuro/repos",
      "events_url": "https://api.github.com/users/nventuro/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nventuro/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-07-05T14:40:22Z",
    "updated_at": "2019-07-05T14:40:22Z",
    "author_association": "CONTRIBUTOR",
    "body": "Hey @ramikalai! While we're still definitely interested in having this in OpenZeppelin, there's noone that I know of currently working on it. \r\n\r\nThe actual implementation and tests are probably not too hard, but we'd really like to get the design and API right, which is way trickier.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/508780124/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/508797505",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1099#issuecomment-508797505",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1099",
    "id": 508797505,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUwODc5NzUwNQ==",
    "user": {
      "login": "ramikalai",
      "id": 16903305,
      "node_id": "MDQ6VXNlcjE2OTAzMzA1",
      "avatar_url": "https://avatars.githubusercontent.com/u/16903305?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ramikalai",
      "html_url": "https://github.com/ramikalai",
      "followers_url": "https://api.github.com/users/ramikalai/followers",
      "following_url": "https://api.github.com/users/ramikalai/following{/other_user}",
      "gists_url": "https://api.github.com/users/ramikalai/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ramikalai/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ramikalai/subscriptions",
      "organizations_url": "https://api.github.com/users/ramikalai/orgs",
      "repos_url": "https://api.github.com/users/ramikalai/repos",
      "events_url": "https://api.github.com/users/ramikalai/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ramikalai/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-07-05T15:38:50Z",
    "updated_at": "2019-07-05T15:38:50Z",
    "author_association": "NONE",
    "body": "@nventuro I'm happy to help if there's anything I can look at?\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/508797505/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/509382354",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1099#issuecomment-509382354",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1099",
    "id": 509382354,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUwOTM4MjM1NA==",
    "user": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-07-08T20:37:48Z",
    "updated_at": "2019-07-08T20:38:01Z",
    "author_association": "MEMBER",
    "body": "> I believe this could definitely be useful.\r\n\r\n@ramikalai I'm curious to hear your use case! It will help prioritize this for us, and to come up with a good design for the feature.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/509382354/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/509635959",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1099#issuecomment-509635959",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1099",
    "id": 509635959,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUwOTYzNTk1OQ==",
    "user": {
      "login": "ramikalai",
      "id": 16903305,
      "node_id": "MDQ6VXNlcjE2OTAzMzA1",
      "avatar_url": "https://avatars.githubusercontent.com/u/16903305?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ramikalai",
      "html_url": "https://github.com/ramikalai",
      "followers_url": "https://api.github.com/users/ramikalai/followers",
      "following_url": "https://api.github.com/users/ramikalai/following{/other_user}",
      "gists_url": "https://api.github.com/users/ramikalai/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ramikalai/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ramikalai/subscriptions",
      "organizations_url": "https://api.github.com/users/ramikalai/orgs",
      "repos_url": "https://api.github.com/users/ramikalai/repos",
      "events_url": "https://api.github.com/users/ramikalai/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ramikalai/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-07-09T13:11:40Z",
    "updated_at": "2019-07-09T13:11:40Z",
    "author_association": "NONE",
    "body": "@frangio We are looking at building escrow wallets for ERC20 tokens. I think if done properly (as part of openzeppelin), then this could be built in a way that is extendable to multisig wallets/multiownable contracts for ERC20.\r\n\r\nEffectively, what I think needs to be built is \r\n- An abstract mulit-ownership contract (Similar to Ownable.sol).\r\n- An abstract escrow contract: This would define the approval mechanisms for the child's different methods. Effectively a modifier that checks a condition is true, and an approval function that takes into account multiple approvals as per multi-ownable.\r\n- Implement the ERC20 token escrow by inheriting the above contracts.\r\n\r\nThe first contract can be reused elsewhere for ERC20 multisig wallets for example.\r\nThe second can be reused for Ether escrow.\r\n\r\nLet me know your thoughts on this and how we can progress things.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/509635959/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/510548594",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1099#issuecomment-510548594",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1099",
    "id": 510548594,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUxMDU0ODU5NA==",
    "user": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-07-11T16:03:18Z",
    "updated_at": "2019-07-11T16:03:18Z",
    "author_association": "MEMBER",
    "body": ">An abstract mulit-ownership contract (Similar to Ownable.sol).\r\n\r\nGenerally we believe that complex authorization mechanisms like multisig should be separate from the contract they manage. So the contract should only have a single owner which is a itself a multisig wallet. Have you found scenarios where this doesn't work well?\r\n\r\n>An abstract escrow contract: This would define the approval mechanisms for the child's different methods.\r\n\r\nI don't understand this idea very well. Can you give an example of an approval mechanism? Would this work _without_ multi-ownable?",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/510548594/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/513733166",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1099#issuecomment-513733166",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1099",
    "id": 513733166,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUxMzczMzE2Ng==",
    "user": {
      "login": "ramikalai",
      "id": 16903305,
      "node_id": "MDQ6VXNlcjE2OTAzMzA1",
      "avatar_url": "https://avatars.githubusercontent.com/u/16903305?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ramikalai",
      "html_url": "https://github.com/ramikalai",
      "followers_url": "https://api.github.com/users/ramikalai/followers",
      "following_url": "https://api.github.com/users/ramikalai/following{/other_user}",
      "gists_url": "https://api.github.com/users/ramikalai/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ramikalai/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ramikalai/subscriptions",
      "organizations_url": "https://api.github.com/users/ramikalai/orgs",
      "repos_url": "https://api.github.com/users/ramikalai/repos",
      "events_url": "https://api.github.com/users/ramikalai/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ramikalai/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-07-22T10:20:12Z",
    "updated_at": "2019-07-22T10:20:12Z",
    "author_association": "NONE",
    "body": "Hi @frangio, sorry got caught up at work.\r\n\r\nOn your first point, yes I agree that could definitely work.\r\n\r\nAn example of approval mechanisms are a simple toggle of approval that each owner can interact with. Other mechanisms can be added as well such as  m of n if ownership is implemented through a multisig wallet. Approval can be on a transaction basis, meaning that parties approve a certain transaction and then approval is reset until the next transaction\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/513733166/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
