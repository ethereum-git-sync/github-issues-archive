{
  "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2906",
  "repository_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts",
  "labels_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2906/labels{/name}",
  "comments_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2906/comments",
  "events_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2906/events",
  "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2906",
  "id": 1021541558,
  "node_id": "I_kwDOA9tCBs4843y2",
  "number": 2906,
  "title": "Add BigInt library support",
  "user": {
    "login": "alxiong",
    "id": 20514086,
    "node_id": "MDQ6VXNlcjIwNTE0MDg2",
    "avatar_url": "https://avatars.githubusercontent.com/u/20514086?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/alxiong",
    "html_url": "https://github.com/alxiong",
    "followers_url": "https://api.github.com/users/alxiong/followers",
    "following_url": "https://api.github.com/users/alxiong/following{/other_user}",
    "gists_url": "https://api.github.com/users/alxiong/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/alxiong/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/alxiong/subscriptions",
    "organizations_url": "https://api.github.com/users/alxiong/orgs",
    "repos_url": "https://api.github.com/users/alxiong/repos",
    "events_url": "https://api.github.com/users/alxiong/events{/privacy}",
    "received_events_url": "https://api.github.com/users/alxiong/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 2,
  "created_at": "2021-10-08T23:57:17Z",
  "updated_at": "2022-05-28T08:55:47Z",
  "closed_at": null,
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "**üßê Motivation**\r\nThis issue is brought to my attention by a question from @wly99. \r\n\r\nSay I want to calculate the future value of principal on a 30-year home loan: \r\n```solidity\r\nfuturePrincipal = principal * (1 + stabilityFee / 12) ** monthsLeft\r\n```\r\nsince `stabilityFee` is a floating number, (e.g. `0.00225`) so we need to multiply it by `10000` in practice; but then with the power of `monthsLeft = 12 * 30 = 360`, this value could easily exceed `type(uint256).max`.\r\n\r\nWe want arbitrary precision arithmetic for BigInt.\r\n\r\n**üìù Details**\r\n\r\nThere is one sample `library BigInt {}` in [Solidity's doc here](https://docs.soliditylang.org/en/v0.8.9/contracts.html?highlight=bigint#libraries): \r\n\r\n```solidity\r\n// SPDX-License-Identifier: GPL-3.0\r\npragma solidity ^0.8.0;\r\n\r\nstruct bigint {\r\n    uint[] limbs;\r\n}\r\n\r\nlibrary BigInt {\r\n    function fromUint(uint x) internal pure returns (bigint memory r) {\r\n        r.limbs = new uint[](1);\r\n        r.limbs[0] = x;\r\n    }\r\n\r\n    function add(bigint memory _a, bigint memory _b) internal pure returns (bigint memory r) {\r\n        r.limbs = new uint[](max(_a.limbs.length, _b.limbs.length));\r\n        uint carry = 0;\r\n        for (uint i = 0; i < r.limbs.length; ++i) {\r\n            uint a = limb(_a, i);\r\n            uint b = limb(_b, i);\r\n            unchecked {\r\n                r.limbs[i] = a + b + carry;\r\n\r\n                if (a + b < a || (a + b == type(uint).max && carry > 0))\r\n                    carry = 1;\r\n                else\r\n                    carry = 0;\r\n            }\r\n        }\r\n        if (carry > 0) {\r\n            // too bad, we have to add a limb\r\n            uint[] memory newLimbs = new uint[](r.limbs.length + 1);\r\n            uint i;\r\n            for (i = 0; i < r.limbs.length; ++i)\r\n                newLimbs[i] = r.limbs[i];\r\n            newLimbs[i] = carry;\r\n            r.limbs = newLimbs;\r\n        }\r\n    }\r\n\r\n    function limb(bigint memory _a, uint _limb) internal pure returns (uint) {\r\n        return _limb < _a.limbs.length ? _a.limbs[_limb] : 0;\r\n    }\r\n\r\n    function max(uint a, uint b) private pure returns (uint) {\r\n        return a > b ? a : b;\r\n    }\r\n}\r\n\r\ncontract C {\r\n    using BigInt for bigint;\r\n\r\n    function f() public pure {\r\n        bigint memory x = BigInt.fromUint(7);\r\n        bigint memory y = BigInt.fromUint(type(uint).max);\r\n        bigint memory z = x.add(y);\r\n        assert(z.limb(1) > 0);\r\n    }\r\n}\r\n```\r\n\r\nBut still, would love the excellent engineers and security experts from OpenZeppelin community to take a more careful vetting and standardize it by including in future version of the library.\r\n",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2906/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2906/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/973230074",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2906#issuecomment-973230074",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2906",
    "id": 973230074,
    "node_id": "IC_kwDOA9tCBs46Ak_6",
    "user": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-11-18T20:20:39Z",
    "updated_at": "2021-11-18T20:20:39Z",
    "author_association": "MEMBER",
    "body": "I think a big number library would make sense, but we would like to see a variety of use cases that would benefit from it.\r\n\r\nThe motivation given here in the issue has some problems, because it assumes `stabilityFee` is a decimal number, and that is also something that we don't currently have a library for.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/973230074/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1140215672",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2906#issuecomment-1140215672",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2906",
    "id": 1140215672,
    "node_id": "IC_kwDOA9tCBs5D9k94",
    "user": {
      "login": "barakman",
      "id": 7003246,
      "node_id": "MDQ6VXNlcjcwMDMyNDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7003246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/barakman",
      "html_url": "https://github.com/barakman",
      "followers_url": "https://api.github.com/users/barakman/followers",
      "following_url": "https://api.github.com/users/barakman/following{/other_user}",
      "gists_url": "https://api.github.com/users/barakman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/barakman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/barakman/subscriptions",
      "organizations_url": "https://api.github.com/users/barakman/orgs",
      "repos_url": "https://api.github.com/users/barakman/repos",
      "events_url": "https://api.github.com/users/barakman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/barakman/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-05-28T08:55:47Z",
    "updated_at": "2022-05-28T08:55:47Z",
    "author_association": "CONTRIBUTOR",
    "body": "In case this is still relevant, I posted such utility a few months ago:\r\n- https://github.com/barakman/solidity-big-number\r\n- https://www.npmjs.com/package/solidity-big-number\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1140215672/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
