{
  "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2700",
  "repository_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts",
  "labels_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2700/labels{/name}",
  "comments_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2700/comments",
  "events_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2700/events",
  "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2700",
  "id": 906665669,
  "node_id": "MDU6SXNzdWU5MDY2NjU2Njk=",
  "number": 2700,
  "title": "Probably should assign a new value to the free memory pointer",
  "user": {
    "login": "chiro-hiro",
    "id": 8078873,
    "node_id": "MDQ6VXNlcjgwNzg4NzM=",
    "avatar_url": "https://avatars.githubusercontent.com/u/8078873?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/chiro-hiro",
    "html_url": "https://github.com/chiro-hiro",
    "followers_url": "https://api.github.com/users/chiro-hiro/followers",
    "following_url": "https://api.github.com/users/chiro-hiro/following{/other_user}",
    "gists_url": "https://api.github.com/users/chiro-hiro/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/chiro-hiro/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/chiro-hiro/subscriptions",
    "organizations_url": "https://api.github.com/users/chiro-hiro/orgs",
    "repos_url": "https://api.github.com/users/chiro-hiro/repos",
    "events_url": "https://api.github.com/users/chiro-hiro/events{/privacy}",
    "received_events_url": "https://api.github.com/users/chiro-hiro/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 7,
  "created_at": "2021-05-30T07:33:40Z",
  "updated_at": "2021-06-02T04:16:45Z",
  "closed_at": "2021-05-30T21:17:34Z",
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "**🧐 Motivation**\r\nProbably should assign a new value to the free memory pointer at (`0x40`). I have concern that this code could mess up memory and lead to an unexpected result. \r\n\r\n**📝 Details**\r\n\r\nhttps://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/proxy/Clones.sol#L24-L34\r\n\r\n```solidity\r\n    function clone(address implementation) internal returns (address instance) {\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            let ptr := mload(0x40)\r\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\r\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\r\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\r\n            instance := create(0, ptr, 0x37)\r\n            mstore(0x40, add(ptr, 0x37))\r\n        }\r\n        require(instance != address(0), \"ERC1167: create failed\");\r\n    }\r\n```\r\nI added a new line `mstore(0x40, add(ptr, 0x37))`.\r\n\r\n",
  "closed_by": {
    "login": "frangio",
    "id": 481465,
    "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
    "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/frangio",
    "html_url": "https://github.com/frangio",
    "followers_url": "https://api.github.com/users/frangio/followers",
    "following_url": "https://api.github.com/users/frangio/following{/other_user}",
    "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
    "organizations_url": "https://api.github.com/users/frangio/orgs",
    "repos_url": "https://api.github.com/users/frangio/repos",
    "events_url": "https://api.github.com/users/frangio/events{/privacy}",
    "received_events_url": "https://api.github.com/users/frangio/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2700/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2700/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/851053981",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2700#issuecomment-851053981",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2700",
    "id": 851053981,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg1MTA1Mzk4MQ==",
    "user": {
      "login": "Amxx",
      "id": 2432299,
      "node_id": "MDQ6VXNlcjI0MzIyOTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2432299?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Amxx",
      "html_url": "https://github.com/Amxx",
      "followers_url": "https://api.github.com/users/Amxx/followers",
      "following_url": "https://api.github.com/users/Amxx/following{/other_user}",
      "gists_url": "https://api.github.com/users/Amxx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Amxx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Amxx/subscriptions",
      "organizations_url": "https://api.github.com/users/Amxx/orgs",
      "repos_url": "https://api.github.com/users/Amxx/repos",
      "events_url": "https://api.github.com/users/Amxx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Amxx/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-05-30T20:04:36Z",
    "updated_at": "2021-05-30T20:04:36Z",
    "author_association": "COLLABORATOR",
    "body": "Hello @chiro-hiro, and thank you for raising this issue.\r\n\r\nWe are worried, on the other hand, that increasing the memory ptr would leak memory. It would increase the ptr, and not deallocate it, causing unnecessary gas cost, particularly if this function is called multiple times.\r\n\r\nI'll share this with our security team.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/851053981/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/851062699",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2700#issuecomment-851062699",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2700",
    "id": 851062699,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg1MTA2MjY5OQ==",
    "user": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-05-30T21:17:34Z",
    "updated_at": "2021-05-30T21:17:34Z",
    "author_association": "MEMBER",
    "body": "From the [Solidity documentation](https://docs.soliditylang.org/en/v0.8.4/internals/layout_in_memory.html#layout-in-memory):\r\n\r\n> There are some operations in Solidity that need a temporary memory area larger than 64 bytes and therefore will not fit into the scratch space. They will be placed where the free memory points to, but given their short lifetime, the pointer is not updated. The memory may or may not be zeroed out. Because of this, **one should not expect the free memory to point to zeroed out memory**.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/851062699/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/851114835",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2700#issuecomment-851114835",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2700",
    "id": 851114835,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg1MTExNDgzNQ==",
    "user": {
      "login": "chiro-hiro",
      "id": 8078873,
      "node_id": "MDQ6VXNlcjgwNzg4NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8078873?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chiro-hiro",
      "html_url": "https://github.com/chiro-hiro",
      "followers_url": "https://api.github.com/users/chiro-hiro/followers",
      "following_url": "https://api.github.com/users/chiro-hiro/following{/other_user}",
      "gists_url": "https://api.github.com/users/chiro-hiro/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chiro-hiro/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chiro-hiro/subscriptions",
      "organizations_url": "https://api.github.com/users/chiro-hiro/orgs",
      "repos_url": "https://api.github.com/users/chiro-hiro/repos",
      "events_url": "https://api.github.com/users/chiro-hiro/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chiro-hiro/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-05-31T01:56:02Z",
    "updated_at": "2021-06-01T06:06:53Z",
    "author_association": "NONE",
    "body": "@Amxx In the case where we're going to call this method multiple times, it's better implement a batch clone that perform clone without overwrite minimal proxy, it might be better.\r\n\r\n@frangio Why do you close this issue? In the code which was compiled by Solidity they will point the fee pointer to new location. This issue was created since the free pointer is pointing to minimal proxy code, apparently it wasn't zeroed.\r\n\r\nMay the other developers are expecting the free pointer is pointing to the free memory just like the behaviors of the code which was produced by Solidity compiler.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/851114835/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/851138026",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2700#issuecomment-851138026",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2700",
    "id": 851138026,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg1MTEzODAyNg==",
    "user": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-05-31T03:16:55Z",
    "updated_at": "2021-05-31T03:18:10Z",
    "author_association": "MEMBER",
    "body": "The free memory pointer can't be expected to point to zeroed memory, doing that is a mistake. The compiler doesn't guarantee it, as documented in the part I quoted above, so we don't need to maintain the guarantee either.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/851138026/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/851791667",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2700#issuecomment-851791667",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2700",
    "id": 851791667,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg1MTc5MTY2Nw==",
    "user": {
      "login": "chiro-hiro",
      "id": 8078873,
      "node_id": "MDQ6VXNlcjgwNzg4NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8078873?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chiro-hiro",
      "html_url": "https://github.com/chiro-hiro",
      "followers_url": "https://api.github.com/users/chiro-hiro/followers",
      "following_url": "https://api.github.com/users/chiro-hiro/following{/other_user}",
      "gists_url": "https://api.github.com/users/chiro-hiro/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chiro-hiro/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chiro-hiro/subscriptions",
      "organizations_url": "https://api.github.com/users/chiro-hiro/orgs",
      "repos_url": "https://api.github.com/users/chiro-hiro/repos",
      "events_url": "https://api.github.com/users/chiro-hiro/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chiro-hiro/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-06-01T04:15:14Z",
    "updated_at": "2021-06-01T04:16:24Z",
    "author_association": "NONE",
    "body": "@frangio Please explain this, https://github.com/ethereum/solidity/blob/develop/libsolidity/codegen/CompilerUtils.cpp#L72-L77\r\n\r\nThe memory allocation will be performed by fetching the free memory pointer and adding it with `data.length` then store the result back to the fee memory pointer.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/851791667/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/852439315",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2700#issuecomment-852439315",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2700",
    "id": 852439315,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg1MjQzOTMxNQ==",
    "user": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-06-01T20:56:01Z",
    "updated_at": "2021-06-01T20:56:01Z",
    "author_association": "MEMBER",
    "body": "In that case, they have to bump the free memory pointer because the slice of memory will be \"returned\" in some way to another part of the contract, so it's taking ownership of that slice. In the case pointed out by this issue, we don't need to return the memory slice, we are using it and discarding it.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/852439315/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/852707320",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2700#issuecomment-852707320",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2700",
    "id": 852707320,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg1MjcwNzMyMA==",
    "user": {
      "login": "chiro-hiro",
      "id": 8078873,
      "node_id": "MDQ6VXNlcjgwNzg4NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8078873?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chiro-hiro",
      "html_url": "https://github.com/chiro-hiro",
      "followers_url": "https://api.github.com/users/chiro-hiro/followers",
      "following_url": "https://api.github.com/users/chiro-hiro/following{/other_user}",
      "gists_url": "https://api.github.com/users/chiro-hiro/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chiro-hiro/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chiro-hiro/subscriptions",
      "organizations_url": "https://api.github.com/users/chiro-hiro/orgs",
      "repos_url": "https://api.github.com/users/chiro-hiro/repos",
      "events_url": "https://api.github.com/users/chiro-hiro/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chiro-hiro/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-06-02T04:16:45Z",
    "updated_at": "2021-06-02T04:16:45Z",
    "author_association": "NONE",
    "body": "> In that case, they have to bump the free memory pointer because the slice of memory will be \"returned\" in some way to another part of the contract, so it's taking ownership of that slice\r\n\r\nPlease do actual debug you would find out. it's default behavior of the compiled code with `solc`, even the data wasn't \"returned\" to be used somewhere else.\r\n\r\n>  In the case pointed out by this issue, we don't need to return the memory slice, we are using it and discarding it.\r\n\r\nFollowing the answer of @Amxx, this memory wouldn't be discarded.\r\n\r\nMy point is,\r\n\r\n```solidity\r\nfunction test() external {\r\n   address a;\r\n   a.clone();\r\n   assembly{\r\n       // It's still pointing to minimal proxy\r\n       let b := mload(0x40)\r\n       // even I do this, next 256 bits are still a mess\r\n       mstore(b, 0)\r\n   }\r\n}\r\n```\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/852707320/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
