{
  "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3549",
  "repository_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts",
  "labels_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3549/labels{/name}",
  "comments_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3549/comments",
  "events_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3549/events",
  "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3549",
  "id": 1304848714,
  "node_id": "I_kwDOA9tCBs5NxmlK",
  "number": 3549,
  "title": "Reduce reliance on underlying decimals in ERC4626",
  "user": {
    "login": "thedavidmeister",
    "id": 629710,
    "node_id": "MDQ6VXNlcjYyOTcxMA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/629710?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/thedavidmeister",
    "html_url": "https://github.com/thedavidmeister",
    "followers_url": "https://api.github.com/users/thedavidmeister/followers",
    "following_url": "https://api.github.com/users/thedavidmeister/following{/other_user}",
    "gists_url": "https://api.github.com/users/thedavidmeister/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/thedavidmeister/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/thedavidmeister/subscriptions",
    "organizations_url": "https://api.github.com/users/thedavidmeister/orgs",
    "repos_url": "https://api.github.com/users/thedavidmeister/repos",
    "events_url": "https://api.github.com/users/thedavidmeister/events{/privacy}",
    "received_events_url": "https://api.github.com/users/thedavidmeister/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/milestones/12",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/milestone/12",
    "labels_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/milestones/12/labels",
    "id": 8058901,
    "node_id": "MI_kwDOA9tCBs4AevgV",
    "number": 12,
    "title": "4.8",
    "description": "",
    "creator": {
      "login": "Amxx",
      "id": 2432299,
      "node_id": "MDQ6VXNlcjI0MzIyOTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2432299?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Amxx",
      "html_url": "https://github.com/Amxx",
      "followers_url": "https://api.github.com/users/Amxx/followers",
      "following_url": "https://api.github.com/users/Amxx/following{/other_user}",
      "gists_url": "https://api.github.com/users/Amxx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Amxx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Amxx/subscriptions",
      "organizations_url": "https://api.github.com/users/Amxx/orgs",
      "repos_url": "https://api.github.com/users/Amxx/repos",
      "events_url": "https://api.github.com/users/Amxx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Amxx/received_events",
      "type": "User",
      "site_admin": false
    },
    "open_issues": 0,
    "closed_issues": 22,
    "state": "closed",
    "created_at": "2022-06-07T15:35:04Z",
    "updated_at": "2022-11-08T17:25:45Z",
    "due_on": "2022-08-23T07:00:00Z",
    "closed_at": "2022-11-08T17:25:45Z"
  },
  "comments": 9,
  "created_at": "2022-07-14T14:12:58Z",
  "updated_at": "2022-08-26T07:53:54Z",
  "closed_at": "2022-08-26T07:53:54Z",
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "4626 uses `_asset.decimals()` to calculate initial share/asset conversions\r\n\r\nhttps://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/extensions/ERC4626.sol#L167\r\n\r\nEIP4626 states:\r\n\r\n> All ERC-4626 tokenized Vaults MUST implement ERC-20â€™s optional metadata extensions.\r\n\r\nBut EIP20 states for `decimals`:\r\n\r\n> OPTIONAL - This method can be used to improve usability, but interfaces and other contracts MUST NOT expect these values to be present.\r\n\r\nSo even if the vault exposes `decimals` for shares, the 20 spec says not to expect assets to expose `decimals`.\r\n\r\nEven if both tokens expose `decimals` the method is for usability, not for onchain calculations.\r\n\r\nMaybe a virtual `_initialShareRatio()` function could be exposed that implementing contracts can override without needing to override the entire conversion process",
  "closed_by": {
    "login": "Amxx",
    "id": 2432299,
    "node_id": "MDQ6VXNlcjI0MzIyOTk=",
    "avatar_url": "https://avatars.githubusercontent.com/u/2432299?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/Amxx",
    "html_url": "https://github.com/Amxx",
    "followers_url": "https://api.github.com/users/Amxx/followers",
    "following_url": "https://api.github.com/users/Amxx/following{/other_user}",
    "gists_url": "https://api.github.com/users/Amxx/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/Amxx/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/Amxx/subscriptions",
    "organizations_url": "https://api.github.com/users/Amxx/orgs",
    "repos_url": "https://api.github.com/users/Amxx/repos",
    "events_url": "https://api.github.com/users/Amxx/events{/privacy}",
    "received_events_url": "https://api.github.com/users/Amxx/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3549/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3549/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1184910640",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3549#issuecomment-1184910640",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3549",
    "id": 1184910640,
    "node_id": "IC_kwDOA9tCBs5GoE0w",
    "user": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-07-14T21:26:14Z",
    "updated_at": "2022-07-14T21:26:14Z",
    "author_association": "MEMBER",
    "body": "This is a good point, we can't assume `decimals` is present. For ERC20Wrapper we handled it properly:\r\n\r\nhttps://github.com/OpenZeppelin/openzeppelin-contracts/blob/6ab8d6a67e3281ab062bdbe4df32b95c6409ee6d/contracts/token/ERC20/extensions/ERC20Wrapper.sol#L28-L34\r\n\r\n> Even if both tokens expose decimals the method is for usability, not for onchain calculations.\r\n\r\nThis is also a very good point.\r\n\r\nI agree with adding a function like `_initialShareRatio() returns (uint shares, uint assets)`.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1184910640/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1185500898",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3549#issuecomment-1185500898",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3549",
    "id": 1185500898,
    "node_id": "IC_kwDOA9tCBs5GqU7i",
    "user": {
      "login": "Amxx",
      "id": 2432299,
      "node_id": "MDQ6VXNlcjI0MzIyOTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2432299?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Amxx",
      "html_url": "https://github.com/Amxx",
      "followers_url": "https://api.github.com/users/Amxx/followers",
      "following_url": "https://api.github.com/users/Amxx/following{/other_user}",
      "gists_url": "https://api.github.com/users/Amxx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Amxx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Amxx/subscriptions",
      "organizations_url": "https://api.github.com/users/Amxx/orgs",
      "repos_url": "https://api.github.com/users/Amxx/repos",
      "events_url": "https://api.github.com/users/Amxx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Amxx/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-07-15T12:33:11Z",
    "updated_at": "2022-07-15T12:34:24Z",
    "author_association": "COLLABORATOR",
    "body": "From the ERC:\r\n\r\n> Although the convertTo functions should eliminate the need for any use of an ERC-4626 Vaultâ€™s decimals variable, it is still strongly recommended to mirror the underlying tokenâ€™s decimals if at all possible, to eliminate possible sources of confusion and simplify integration across front-ends and for other off-chain users.\r\n\r\nIt would be easy to just do that, but then what if someone overrides our 4626 with a custom decimal that doesn't not match the underlying asset. Should we make the decimal in 4626 \"non-virtual override\" ?",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1185500898/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1185508994",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3549#issuecomment-1185508994",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3549",
    "id": 1185508994,
    "node_id": "IC_kwDOA9tCBs5GqW6C",
    "user": {
      "login": "Amxx",
      "id": 2432299,
      "node_id": "MDQ6VXNlcjI0MzIyOTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2432299?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Amxx",
      "html_url": "https://github.com/Amxx",
      "followers_url": "https://api.github.com/users/Amxx/followers",
      "following_url": "https://api.github.com/users/Amxx/following{/other_user}",
      "gists_url": "https://api.github.com/users/Amxx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Amxx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Amxx/subscriptions",
      "organizations_url": "https://api.github.com/users/Amxx/orgs",
      "repos_url": "https://api.github.com/users/Amxx/repos",
      "events_url": "https://api.github.com/users/Amxx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Amxx/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-07-15T12:43:39Z",
    "updated_at": "2022-07-15T12:56:32Z",
    "author_association": "COLLABORATOR",
    "body": "So we could do\r\n\r\n```\r\n    function decimals() public view override(IERC20Metadata, ERC20) returns (uint8) {\r\n        try IERC20Metadata(address(_asset)).decimals() returns (uint8 value) {\r\n            return value;\r\n        } catch {\r\n            return super.decimals();\r\n        }\r\n    }\r\n    \r\n    function _convertToShares(uint256 assets, Math.Rounding rounding) internal view virtual returns (uint256 shares) {\r\n        uint256 supply = totalSupply();\r\n        return\r\n            (assets == 0 || supply == 0)\r\n                ? assets\r\n                : assets.mulDiv(supply, totalAssets(), rounding);\r\n    }\r\n\r\n    function _convertToAssets(uint256 shares, Math.Rounding rounding) internal view virtual returns (uint256 assets) {\r\n        uint256 supply = totalSupply();\r\n        return\r\n            (supply == 0)\r\n                ? shares\r\n                : shares.mulDiv(totalAssets(), supply, rounding);\r\n    }\r\n```\r\n\r\nand no possibility to override decimal ... or\r\n\r\n```\r\n    function decimals() public view virtual override(IERC20Metadata, ERC20) returns (uint8) {\r\n        try IERC20Metadata(address(_asset)).decimals() returns (uint8 value) {\r\n            return value;\r\n        } catch {\r\n            return super.decimals();\r\n        }\r\n    }\r\n    \r\n    function _convertToShares(uint256 assets, Math.Rounding rounding) internal view virtual returns (uint256 shares) {\r\n        uint256 supply = totalSupply();\r\n        return\r\n            (assets == 0 || supply == 0)\r\n                ? assets.mulDiv(10**decimals(), 10**ERC4626.decimals(), rounding)\r\n                : assets.mulDiv(supply, totalAssets(), rounding);\r\n    }\r\n\r\n    function _convertToAssets(uint256 shares, Math.Rounding rounding) internal view virtual returns (uint256 assets) {\r\n        uint256 supply = totalSupply();\r\n        return\r\n            (supply == 0)\r\n                ? shares.mulDiv(10**ERC4626.decimals(), 10**decimals(), rounding)\r\n                : shares.mulDiv(totalAssets(), supply, rounding);\r\n    }\r\n```\r\n\r\nThat way devs can still override",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1185508994/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1185766349",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3549#issuecomment-1185766349",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3549",
    "id": 1185766349,
    "node_id": "IC_kwDOA9tCBs5GrVvN",
    "user": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-07-15T17:47:28Z",
    "updated_at": "2022-07-15T17:47:43Z",
    "author_association": "MEMBER",
    "body": "I don't understand the second option, can you explain it in words?\r\n\r\nWe can add the implementation of decimals based on ERC20Wrapper, but I think we should also add `_initialAssetToShareRatio()`.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1185766349/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1186107304",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3549#issuecomment-1186107304",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3549",
    "id": 1186107304,
    "node_id": "IC_kwDOA9tCBs5Gso-o",
    "user": {
      "login": "thedavidmeister",
      "id": 629710,
      "node_id": "MDQ6VXNlcjYyOTcxMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/629710?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/thedavidmeister",
      "html_url": "https://github.com/thedavidmeister",
      "followers_url": "https://api.github.com/users/thedavidmeister/followers",
      "following_url": "https://api.github.com/users/thedavidmeister/following{/other_user}",
      "gists_url": "https://api.github.com/users/thedavidmeister/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/thedavidmeister/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/thedavidmeister/subscriptions",
      "organizations_url": "https://api.github.com/users/thedavidmeister/orgs",
      "repos_url": "https://api.github.com/users/thedavidmeister/repos",
      "events_url": "https://api.github.com/users/thedavidmeister/events{/privacy}",
      "received_events_url": "https://api.github.com/users/thedavidmeister/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-07-16T07:24:11Z",
    "updated_at": "2022-07-16T07:24:11Z",
    "author_association": "NONE",
    "body": "maybe this then:\r\n\r\n```solidity\r\n    function decimals() public view override(IERC20Metadata, ERC20) returns (uint8) {\r\n        try IERC20Metadata(address(_asset)).decimals() returns (uint8 value) {\r\n            return value;\r\n        } catch {\r\n            return super.decimals();\r\n        }\r\n    }\r\n\r\n    function _initialConvertToShares(uint256 assets, Math.Rounding rounding) internal view virtual returns (uint256 shares) {\r\n        shares = assets;\r\n    }\r\n\r\n    function _convertToShares(uint256 assets, Math.Rounding rounding) internal view virtual returns (uint256 shares) {\r\n        uint256 supply = totalSupply();\r\n        return\r\n            (assets == 0 || supply == 0)\r\n                ? _initialConvertToShares(assets, rounding)\r\n                : assets.mulDiv(supply, totalAssets(), rounding);\r\n    }\r\n\r\n    function _initialConvertToAssets(uint256 shares, Math.Rounding rounding) internal view virtual returns (uint256 assets) {\r\n        assets = shares;\r\n    }\r\n\r\n    function _convertToAssets(uint256 shares, Math.Rounding rounding) internal view virtual returns (uint256 assets) {\r\n        uint256 supply = totalSupply();\r\n        return\r\n            (supply == 0)\r\n                ? _initialConvertToAssets(shares, rounding)\r\n                : shares.mulDiv(totalAssets(), supply, rounding);\r\n    }\r\n    ```",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1186107304/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1186125815",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3549#issuecomment-1186125815",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3549",
    "id": 1186125815,
    "node_id": "IC_kwDOA9tCBs5Gstf3",
    "user": {
      "login": "Amxx",
      "id": 2432299,
      "node_id": "MDQ6VXNlcjI0MzIyOTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2432299?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Amxx",
      "html_url": "https://github.com/Amxx",
      "followers_url": "https://api.github.com/users/Amxx/followers",
      "following_url": "https://api.github.com/users/Amxx/following{/other_user}",
      "gists_url": "https://api.github.com/users/Amxx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Amxx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Amxx/subscriptions",
      "organizations_url": "https://api.github.com/users/Amxx/orgs",
      "repos_url": "https://api.github.com/users/Amxx/repos",
      "events_url": "https://api.github.com/users/Amxx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Amxx/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-07-16T09:01:27Z",
    "updated_at": "2022-07-16T09:01:27Z",
    "author_association": "COLLABORATOR",
    "body": "What are the `_initialConvertToXxx` for. They make the code more complexe, and I don't see a reason for that.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1186125815/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1186126886",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3549#issuecomment-1186126886",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3549",
    "id": 1186126886,
    "node_id": "IC_kwDOA9tCBs5Gstwm",
    "user": {
      "login": "Amxx",
      "id": 2432299,
      "node_id": "MDQ6VXNlcjI0MzIyOTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2432299?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Amxx",
      "html_url": "https://github.com/Amxx",
      "followers_url": "https://api.github.com/users/Amxx/followers",
      "following_url": "https://api.github.com/users/Amxx/following{/other_user}",
      "gists_url": "https://api.github.com/users/Amxx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Amxx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Amxx/subscriptions",
      "organizations_url": "https://api.github.com/users/Amxx/orgs",
      "repos_url": "https://api.github.com/users/Amxx/repos",
      "events_url": "https://api.github.com/users/Amxx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Amxx/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-07-16T09:06:19Z",
    "updated_at": "2022-07-16T09:26:10Z",
    "author_association": "COLLABORATOR",
    "body": "> I don't understand the second option, can you explain it in words?\r\n> \r\n> We can add the implementation of decimals based on ERC20Wrapper, but I think we should also add `_initialAssetToShareRatio()`.\r\n\r\nThe second option is:\r\n- By default we use `super.decimals()`\r\n- Unless we `_asset` implements the `decimals()`, in which case we use that â†’ this is `ERC4626.decimals()` and that is our reference for the asset's decimals\r\n- This can still be overridden in the child contract.\r\n\r\nIf the decimals are not overridden, then `decimals` and `ERC4626.decimals()` are equal, and the 4626 vault uses the same decimal as the underlying asset. In that case, the muldiv doesn't change anything (numerator and denominator are equals)\r\n\r\nIf the decimals are overridden, then `decimals` and `ERC4626.decimals()` are not equal. The first one is the decimals or the vault (obviously) while the second one is the decimals of the asset (with the fallback). In that case the muldiv does the scaling just like today.\r\n\r\nIMO this is the most elegant approach.\r\n\r\n\r\nEDIT: it could be rewritten as \r\n\r\n```\r\n    function decimals() public view virtual override(IERC20Metadata, ERC20) returns (uint8) {\r\n        return _assetDecimals();\r\n    }\r\n    \r\n    function _assetDecimals() internal view virtual returns (uint8) {\r\n        try IERC20Metadata(address(_asset)).decimals() returns (uint8 value) {\r\n            return value;\r\n        } catch {\r\n            return super.decimals(); // or 18?\r\n        }\r\n    }\r\n    \r\n    function _convertToShares(uint256 assets, Math.Rounding rounding) internal view virtual returns (uint256 shares) {\r\n        uint256 supply = totalSupply();\r\n        return\r\n            (assets == 0 || supply == 0)\r\n                ? assets.mulDiv(10**decimals(), 10**_assetDecimals(), rounding)\r\n                : assets.mulDiv(supply, totalAssets(), rounding);\r\n    }\r\n\r\n    function _convertToAssets(uint256 shares, Math.Rounding rounding) internal view virtual returns (uint256 assets) {\r\n        uint256 supply = totalSupply();\r\n        return\r\n            (supply == 0)\r\n                ? shares.mulDiv(10**_assetDecimals(), 10**decimals(), rounding)\r\n                : shares.mulDiv(totalAssets(), supply, rounding);\r\n    }\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1186126886/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1186128632",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3549#issuecomment-1186128632",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3549",
    "id": 1186128632,
    "node_id": "IC_kwDOA9tCBs5GsuL4",
    "user": {
      "login": "Amxx",
      "id": 2432299,
      "node_id": "MDQ6VXNlcjI0MzIyOTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2432299?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Amxx",
      "html_url": "https://github.com/Amxx",
      "followers_url": "https://api.github.com/users/Amxx/followers",
      "following_url": "https://api.github.com/users/Amxx/following{/other_user}",
      "gists_url": "https://api.github.com/users/Amxx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Amxx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Amxx/subscriptions",
      "organizations_url": "https://api.github.com/users/Amxx/orgs",
      "repos_url": "https://api.github.com/users/Amxx/repos",
      "events_url": "https://api.github.com/users/Amxx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Amxx/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-07-16T09:15:11Z",
    "updated_at": "2022-07-16T09:15:11Z",
    "author_association": "COLLABORATOR",
    "body": "Also, any approach that makes `decimals()` non virtual would be in violation of our \"make functions virtual\" rule.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1186128632/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1194381618",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3549#issuecomment-1194381618",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3549",
    "id": 1194381618,
    "node_id": "IC_kwDOA9tCBs5HMNEy",
    "user": {
      "login": "pedrommaiaa",
      "id": 100535780,
      "node_id": "U_kgDOBf4N5A",
      "avatar_url": "https://avatars.githubusercontent.com/u/100535780?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pedrommaiaa",
      "html_url": "https://github.com/pedrommaiaa",
      "followers_url": "https://api.github.com/users/pedrommaiaa/followers",
      "following_url": "https://api.github.com/users/pedrommaiaa/following{/other_user}",
      "gists_url": "https://api.github.com/users/pedrommaiaa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pedrommaiaa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pedrommaiaa/subscriptions",
      "organizations_url": "https://api.github.com/users/pedrommaiaa/orgs",
      "repos_url": "https://api.github.com/users/pedrommaiaa/repos",
      "events_url": "https://api.github.com/users/pedrommaiaa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pedrommaiaa/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-07-25T17:22:53Z",
    "updated_at": "2022-07-25T17:22:53Z",
    "author_association": "NONE",
    "body": "> So we could do\r\n> \r\n> ```\r\n>     function decimals() public view override(IERC20Metadata, ERC20) returns (uint8) {\r\n>         try IERC20Metadata(address(_asset)).decimals() returns (uint8 value) {\r\n>             return value;\r\n>         } catch {\r\n>             return super.decimals();\r\n>         }\r\n>     }\r\n>     \r\n>     function _convertToShares(uint256 assets, Math.Rounding rounding) internal view virtual returns (uint256 shares) {\r\n>         uint256 supply = totalSupply();\r\n>         return\r\n>             (assets == 0 || supply == 0)\r\n>                 ? assets\r\n>                 : assets.mulDiv(supply, totalAssets(), rounding);\r\n>     }\r\n> \r\n>     function _convertToAssets(uint256 shares, Math.Rounding rounding) internal view virtual returns (uint256 assets) {\r\n>         uint256 supply = totalSupply();\r\n>         return\r\n>             (supply == 0)\r\n>                 ? shares\r\n>                 : shares.mulDiv(totalAssets(), supply, rounding);\r\n>     }\r\n> ```\r\n> \r\n> and no possibility to override decimal ... or\r\n> \r\n> ```\r\n>     function decimals() public view virtual override(IERC20Metadata, ERC20) returns (uint8) {\r\n>         try IERC20Metadata(address(_asset)).decimals() returns (uint8 value) {\r\n>             return value;\r\n>         } catch {\r\n>             return super.decimals();\r\n>         }\r\n>     }\r\n>     \r\n>     function _convertToShares(uint256 assets, Math.Rounding rounding) internal view virtual returns (uint256 shares) {\r\n>         uint256 supply = totalSupply();\r\n>         return\r\n>             (assets == 0 || supply == 0)\r\n>                 ? assets.mulDiv(10**decimals(), 10**ERC4626.decimals(), rounding)\r\n>                 : assets.mulDiv(supply, totalAssets(), rounding);\r\n>     }\r\n> \r\n>     function _convertToAssets(uint256 shares, Math.Rounding rounding) internal view virtual returns (uint256 assets) {\r\n>         uint256 supply = totalSupply();\r\n>         return\r\n>             (supply == 0)\r\n>                 ? shares.mulDiv(10**ERC4626.decimals(), 10**decimals(), rounding)\r\n>                 : shares.mulDiv(totalAssets(), supply, rounding);\r\n>     }\r\n> ```\r\n> \r\n> That way devs can still override\r\n\r\nReally like the first option @Amxx \r\n",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1194381618/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
