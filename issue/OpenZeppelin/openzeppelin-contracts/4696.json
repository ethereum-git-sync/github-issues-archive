{
  "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4696",
  "repository_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts",
  "labels_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4696/labels{/name}",
  "comments_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4696/comments",
  "events_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4696/events",
  "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/4696",
  "id": 1955580448,
  "node_id": "I_kwDOA9tCBs50j8og",
  "number": 4696,
  "title": "ERC-7201 base contract",
  "user": {
    "login": "aviggiano",
    "id": 3029017,
    "node_id": "MDQ6VXNlcjMwMjkwMTc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/3029017?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/aviggiano",
    "html_url": "https://github.com/aviggiano",
    "followers_url": "https://api.github.com/users/aviggiano/followers",
    "following_url": "https://api.github.com/users/aviggiano/following{/other_user}",
    "gists_url": "https://api.github.com/users/aviggiano/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/aviggiano/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/aviggiano/subscriptions",
    "organizations_url": "https://api.github.com/users/aviggiano/orgs",
    "repos_url": "https://api.github.com/users/aviggiano/repos",
    "events_url": "https://api.github.com/users/aviggiano/events{/privacy}",
    "received_events_url": "https://api.github.com/users/aviggiano/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/milestones/18",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/milestone/18",
    "labels_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/milestones/18/labels",
    "id": 10051174,
    "node_id": "MI_kwDOA9tCBs4AmV5m",
    "number": 18,
    "title": "5.x",
    "description": null,
    "creator": {
      "login": "ernestognw",
      "id": 33379285,
      "node_id": "MDQ6VXNlcjMzMzc5Mjg1",
      "avatar_url": "https://avatars.githubusercontent.com/u/33379285?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ernestognw",
      "html_url": "https://github.com/ernestognw",
      "followers_url": "https://api.github.com/users/ernestognw/followers",
      "following_url": "https://api.github.com/users/ernestognw/following{/other_user}",
      "gists_url": "https://api.github.com/users/ernestognw/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ernestognw/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ernestognw/subscriptions",
      "organizations_url": "https://api.github.com/users/ernestognw/orgs",
      "repos_url": "https://api.github.com/users/ernestognw/repos",
      "events_url": "https://api.github.com/users/ernestognw/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ernestognw/received_events",
      "type": "User",
      "site_admin": false
    },
    "open_issues": 4,
    "closed_issues": 0,
    "state": "open",
    "created_at": "2023-10-14T22:41:08Z",
    "updated_at": "2023-10-24T14:16:03Z",
    "due_on": null,
    "closed_at": null
  },
  "comments": 5,
  "created_at": "2023-10-21T17:01:57Z",
  "updated_at": "2023-10-24T12:56:57Z",
  "closed_at": null,
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "**🧐 Motivation**\r\n\r\nHello\r\n\r\nThe \"Namespaced Storage\" pattern introduced in Contracts v5 is a great feature, and will certainly help mitigate many problems associated with storage layout changes in upgradeable contracts.\r\n\r\nHowever, the general issue still exists.\r\n\r\nSince the implementation of ERC-7201 is only available for the OpenZeppelin library, and not enforced anywhere on users' contracts, developers can still make the same mistakes by messing with inherited contracts' storage variables.\r\n\r\nGiven that the thorough implementation of \"Namespaced Storage\" can be a bit challenging, requiring a little bit of inline assembly to fetch and update the storage, I suggest an ERC-7201 base contract that users can inherit from and use the diamond storage pattern everywhere.\r\n\r\n**📝 Details**\r\n\r\nAs a Solidity developer, I would like to have a `ERC7201BaseContract` that all my custom contracts extend from, with helper methods that make it easy to retrieve and update data from storage.\r\n",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4696/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4696/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1773877544",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/4696#issuecomment-1773877544",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4696",
    "id": 1773877544,
    "node_id": "IC_kwDOA9tCBs5puzko",
    "user": {
      "login": "ernestognw",
      "id": 33379285,
      "node_id": "MDQ6VXNlcjMzMzc5Mjg1",
      "avatar_url": "https://avatars.githubusercontent.com/u/33379285?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ernestognw",
      "html_url": "https://github.com/ernestognw",
      "followers_url": "https://api.github.com/users/ernestognw/followers",
      "following_url": "https://api.github.com/users/ernestognw/following{/other_user}",
      "gists_url": "https://api.github.com/users/ernestognw/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ernestognw/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ernestognw/subscriptions",
      "organizations_url": "https://api.github.com/users/ernestognw/orgs",
      "repos_url": "https://api.github.com/users/ernestognw/repos",
      "events_url": "https://api.github.com/users/ernestognw/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ernestognw/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-10-21T17:53:15Z",
    "updated_at": "2023-10-23T17:29:48Z",
    "author_association": "MEMBER",
    "body": "Hi @aviggiano!\r\n\r\nI agree messing with the storage layout is still a risk when using upgradeable contracts. However, that can be avoided by using [@openzeppelin/upgrades](https://github.com/OpenZeppelin/openzeppelin-upgrades/#how-do-the-plugins-work) since they have upgrade safetiness checks that also support the namespaced storage pattern (soon to be out for Foundry users as well).\r\n\r\n> However, the general issue still exists.\r\n\r\nYes, ideally we would have built-in safety instead of requiring checks. That's why we decided to implement EIP-7201 in upgradeable contracts, which is where the storage layout incompatibilities might happen. Aside from that, I don't see how it might be an issue for regular contract users.\r\n\r\nCan you provide an example of how storage layout incompatibilities are still a risk even after introducing EIP-7201?\r\n\r\nRegarding an ERC7201 base contract implementation, seems possible to do something like:\r\n\r\n```solidity\r\ncontract ERC7201Base {\r\n  bytes private immutable STORAGE;\r\n\r\n  constructor(string memory name) {\r\n    STORAGE = keccak256(abi.encode(uint256(keccak256(name)) - 1)) & ~bytes32(uint256(0xff))\r\n  }\r\n\r\n    function getStorage() internal pure returns (?? storage $) {\r\n        assembly {\r\n            $.slot := STORAGE\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nBut, I think the storage struct should be declared outside and we already have an [storage slot](https://github.com/OpenZeppelin/openzeppelin-contracts/blob/3e6c86392c97fbc30d3d20a378a6f58beba08eba/contracts/utils/StorageSlot.sol) util.\r\n\r\nOverall, EIP-7201 defines a storage-derivation formula, but not actually a general implementation of a namespaced contract.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1773877544/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1773962784",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/4696#issuecomment-1773962784",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4696",
    "id": 1773962784,
    "node_id": "IC_kwDOA9tCBs5pvIYg",
    "user": {
      "login": "aviggiano",
      "id": 3029017,
      "node_id": "MDQ6VXNlcjMwMjkwMTc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3029017?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/aviggiano",
      "html_url": "https://github.com/aviggiano",
      "followers_url": "https://api.github.com/users/aviggiano/followers",
      "following_url": "https://api.github.com/users/aviggiano/following{/other_user}",
      "gists_url": "https://api.github.com/users/aviggiano/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/aviggiano/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/aviggiano/subscriptions",
      "organizations_url": "https://api.github.com/users/aviggiano/orgs",
      "repos_url": "https://api.github.com/users/aviggiano/repos",
      "events_url": "https://api.github.com/users/aviggiano/events{/privacy}",
      "received_events_url": "https://api.github.com/users/aviggiano/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-10-22T01:20:29Z",
    "updated_at": "2023-10-23T01:58:36Z",
    "author_association": "CONTRIBUTOR",
    "body": "Hello @ernestognw \r\n\r\nThank you for your response.\r\n\r\n> Aside from that, I don't see how it might be an issue for regular contract users.\r\n\r\nThe problem I see is that smart contract developers may see the [v5 announcement](https://blog.openzeppelin.com/introducing-openzeppelin-contracts-5.0#Namespaced) as a solution for all their upgradeability woes, when in reality they will still need to follow the same [upgradeable rules](https://docs.openzeppelin.com/upgrades-plugins/1.x/writing-upgradeable) from before. \r\n\r\nThe only guarantee they have is that they don't need to worry about v5 internal updates, since each one of the OpenZeppelin extended contracts has Namespace Storage. \r\n\r\nThe problem is that users' own contracts will still _not_ have Namespaced Storage. Maybe they will have to manage `__gap` by themselves, maybe they will need to manually try to avoid storage clashes, etc. \r\n\r\nThis allows for the same bugs as before to exist:\r\n\r\n```solidity\r\n// MyToken.sol\r\ncontract MyToken is\r\n    GreetingToken,\r\n    HappyToken,\r\n    Initializable,\r\n    ERC20Upgradeable,\r\n    OwnableUpgradeable,\r\n    UUPSUpgradeable\r\n{\r\n    /// @custom:oz-upgrades-unsafe-allow constructor\r\n    constructor() {\r\n        _disableInitializers();\r\n    }\r\n\r\n    function initialize(address initialOwner) public initializer {\r\n        __ERC20_init(\"MyToken\", \"MTK\");\r\n        __Ownable_init(initialOwner);\r\n        __UUPSUpgradeable_init();\r\n\r\n        happy = true;\r\n    }\r\n\r\n    function _authorizeUpgrade(\r\n        address newImplementation\r\n    ) internal override onlyOwner {}\r\n}\r\n\r\n// GreetingToken.sol\r\nabstract contract GreetingToken {\r\n    uint256 public version;\r\n\r\n    function greet() public pure returns (string memory) {\r\n        return \"Hello World!\";\r\n    }\r\n}\r\n\r\n// HappyToken.sol\r\nabstract contract HappyToken {\r\n    bool public happy;\r\n\r\n    function isHappy() public view returns (bool) {\r\n        return happy;\r\n    }\r\n}\r\n```\r\n\r\nNow the developer updates the implementation of an inherited contract that does not follow EIP-7201\r\n\r\n```solidity\r\n// GreetingToken.sol\r\nabstract contract GreetingTokenV2 {\r\n  uint256 public version;\r\n  bool public shouldGreet;\r\n\r\n  function greet() public returns(string memory) {\r\n    return shouldGreet ? \"Hello World!\" : \"Goodbye\";\r\n  }\r\n}\r\n```\r\n\r\nAnd there's a storage collision between `GreetingTokenV2.shouldGreet` and `HappyToken.sad`\r\n\r\n[Full POC here](https://github.com/aviggiano/openzeppelin-contracts-upgradeable-v5-footguns)",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1773962784/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1773963654",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/4696#issuecomment-1773963654",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4696",
    "id": 1773963654,
    "node_id": "IC_kwDOA9tCBs5pvImG",
    "user": {
      "login": "aviggiano",
      "id": 3029017,
      "node_id": "MDQ6VXNlcjMwMjkwMTc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3029017?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/aviggiano",
      "html_url": "https://github.com/aviggiano",
      "followers_url": "https://api.github.com/users/aviggiano/followers",
      "following_url": "https://api.github.com/users/aviggiano/following{/other_user}",
      "gists_url": "https://api.github.com/users/aviggiano/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/aviggiano/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/aviggiano/subscriptions",
      "organizations_url": "https://api.github.com/users/aviggiano/orgs",
      "repos_url": "https://api.github.com/users/aviggiano/repos",
      "events_url": "https://api.github.com/users/aviggiano/events{/privacy}",
      "received_events_url": "https://api.github.com/users/aviggiano/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-10-22T01:26:45Z",
    "updated_at": "2023-10-22T01:28:44Z",
    "author_association": "CONTRIBUTOR",
    "body": "My suggestion is that by providing a `ERC7201Base` contract, EIP-7201 could be enforced *everywhere*.\r\n\r\nI think your proposal is a good initial step, but some helper functions might still be required so that the internal intricacies of dealing with storage can be abstracted away, not sure exactly how.\r\n\r\nFor example, suppose I want to develop `MyToken` with deriving contracts using EIP-7201:\r\n\r\n```solidity\r\nabstract contract GreetingTokenV2 is ERC7201Base {\r\n  struct GreetingTokenStorage {\r\n    uint256 version;\r\n    bool shouldGreet\r\n  }\r\n\r\n  // maybe ERC7201Base uses this user-defined constant?\r\n  bytes32 private constant STORAGE = keccak256(abi.encode(uint256(keccak256(\"storage.GreetingToken\")) - 1)) & ~bytes32(uint256(0xff));\r\n\r\n  function greet() private returns (bool) {\r\n    // some magic happens here, not sure how\r\n    // ideally, ERC7201Base abstracts away the creation of the boilerplate necessary from ERC-7201\r\n    return _getStorage().shouldGreet ? \"Hello World!\" : \"\";\r\n  }\r\n}\r\n\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1773963654/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1775693610",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/4696#issuecomment-1775693610",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4696",
    "id": 1775693610,
    "node_id": "IC_kwDOA9tCBs5p1u8q",
    "user": {
      "login": "ernestognw",
      "id": 33379285,
      "node_id": "MDQ6VXNlcjMzMzc5Mjg1",
      "avatar_url": "https://avatars.githubusercontent.com/u/33379285?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ernestognw",
      "html_url": "https://github.com/ernestognw",
      "followers_url": "https://api.github.com/users/ernestognw/followers",
      "following_url": "https://api.github.com/users/ernestognw/following{/other_user}",
      "gists_url": "https://api.github.com/users/ernestognw/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ernestognw/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ernestognw/subscriptions",
      "organizations_url": "https://api.github.com/users/ernestognw/orgs",
      "repos_url": "https://api.github.com/users/ernestognw/repos",
      "events_url": "https://api.github.com/users/ernestognw/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ernestognw/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-10-23T17:38:12Z",
    "updated_at": "2023-10-23T17:38:12Z",
    "author_association": "MEMBER",
    "body": "Gotcha! Thanks for such a clear example @aviggiano.\r\n\r\nAfter discussing it internally, we agree storage collisions are still something to worry about when using custom contracts and we'd like to provide a good solution.\r\n\r\nIdeally, namespaced storage would be built in Solidity (eg. with a variable flag `struct Storage namespaced(\"...\") { ... }`), but we see this very unlikely to happen in the short term. The alternative you suggest is to build an ERC7201 that abstracts away the initial boilerplate and I personally agree with the approach. However, the main issue is that the storage struct can't be abstracted away.\r\n\r\nHaving Solidity \"generics\" (already [considered for Q3 2024](https://github.com/ethereum/solidity/issues/13776)) would be helpful since we could do:\r\n\r\n```solidity\r\ncontract ERC7201Base {\r\n  bytes private immutable STORAGE;\r\n\r\n  constructor(string memory namespace) {\r\n    STORAGE = keccak256(abi.encode(uint256(keccak256(name)) - 1)) & ~bytes32(uint256(0xff))\r\n  }\r\n\r\n    function getStorage<T>() internal pure returns (T storage $) {\r\n        assembly {\r\n            $.slot := STORAGE\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nBut currently, each user would need to define their own `getStorage` function and I don't think they should reimplement it each time. I don't see an easy workaround for that.\r\n\r\n> ```solidity\r\n> // maybe ERC7201Base uses this user-defined constant?\r\n> bytes32 private constant STORAGE = keccak256(abi.encode(uint256(keccak256(\"storage.GreetingToken\")) - 1)) & ? ~bytes32(uint256(0xff));\r\n> ```\r\n\r\nRegarding a user-defined constant, the EIP is actually the formula. Letting the user bypass it wouldn't be a proper EIP-7201 implementation. I'd stick to the `immutable` variable and a constructor `string memory namespace`.\r\n\r\nNote that a solution for this is not necessarily code in the library but perhaps a guide in the docs. We're still updating the documentation with the newest 5.0 changes so we can also go that way imo. To be clear, not discarding an ERC7201Base contract but I don't see how much value it can provide as an standalone contract.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1775693610/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1777154306",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/4696#issuecomment-1777154306",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4696",
    "id": 1777154306,
    "node_id": "IC_kwDOA9tCBs5p7TkC",
    "user": {
      "login": "aviggiano",
      "id": 3029017,
      "node_id": "MDQ6VXNlcjMwMjkwMTc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3029017?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/aviggiano",
      "html_url": "https://github.com/aviggiano",
      "followers_url": "https://api.github.com/users/aviggiano/followers",
      "following_url": "https://api.github.com/users/aviggiano/following{/other_user}",
      "gists_url": "https://api.github.com/users/aviggiano/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/aviggiano/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/aviggiano/subscriptions",
      "organizations_url": "https://api.github.com/users/aviggiano/orgs",
      "repos_url": "https://api.github.com/users/aviggiano/repos",
      "events_url": "https://api.github.com/users/aviggiano/events{/privacy}",
      "received_events_url": "https://api.github.com/users/aviggiano/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-10-24T12:56:34Z",
    "updated_at": "2023-10-24T12:56:57Z",
    "author_association": "CONTRIBUTOR",
    "body": "Hi @ernestognw \r\n\r\nI'm glad you agree this feature can be beneficial to smart contract developers.\r\n\r\nAbout Solidity's \"generics\", sounds like it would help reduce the boilerplate in the implementation of ERC-7201. Meanwhile, indeed this doesn't need to be a base class included in the library, so maybe a documentation explaining how to implement this standard is enough.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1777154306/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
