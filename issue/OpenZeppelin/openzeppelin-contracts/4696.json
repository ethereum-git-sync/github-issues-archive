{
  "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4696",
  "repository_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts",
  "labels_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4696/labels{/name}",
  "comments_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4696/comments",
  "events_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4696/events",
  "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/4696",
  "id": 1955580448,
  "node_id": "I_kwDOA9tCBs50j8og",
  "number": 4696,
  "title": "ERC-7201 base contract",
  "user": {
    "login": "aviggiano",
    "id": 3029017,
    "node_id": "MDQ6VXNlcjMwMjkwMTc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/3029017?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/aviggiano",
    "html_url": "https://github.com/aviggiano",
    "followers_url": "https://api.github.com/users/aviggiano/followers",
    "following_url": "https://api.github.com/users/aviggiano/following{/other_user}",
    "gists_url": "https://api.github.com/users/aviggiano/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/aviggiano/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/aviggiano/subscriptions",
    "organizations_url": "https://api.github.com/users/aviggiano/orgs",
    "repos_url": "https://api.github.com/users/aviggiano/repos",
    "events_url": "https://api.github.com/users/aviggiano/events{/privacy}",
    "received_events_url": "https://api.github.com/users/aviggiano/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 1,
  "created_at": "2023-10-21T17:01:57Z",
  "updated_at": "2023-10-21T17:54:07Z",
  "closed_at": null,
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "**🧐 Motivation**\r\n\r\nHello\r\n\r\nThe \"Namespaced Storage\" pattern introduced in Contracts v5 is a great feature, and will certainly help mitigate many problems associated with storage layout changes in upgradeable contracts.\r\n\r\nHowever, the general issue still exists.\r\n\r\nSince the implementation of ERC-7201 is only available for the OpenZeppelin library, and not enforced anywhere on users' contracts, developers can still make the same mistakes by messing with inherited contracts' storage variables.\r\n\r\nGiven that the thorough implementation of \"Namespaced Storage\" can be a bit challenging, requiring a little bit of inline assembly to fetch and update the storage, I suggest an ERC-7201 base contract that users can inherit from and use the diamond storage pattern everywhere.\r\n\r\n**📝 Details**\r\n\r\nAs a Solidity developer, I would like to have a `ERC7201BaseContract` that all my custom contracts extend from, with helper methods that make it easy to retrieve and update data from storage.\r\n",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4696/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4696/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1773877544",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/4696#issuecomment-1773877544",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4696",
    "id": 1773877544,
    "node_id": "IC_kwDOA9tCBs5puzko",
    "user": {
      "login": "ernestognw",
      "id": 33379285,
      "node_id": "MDQ6VXNlcjMzMzc5Mjg1",
      "avatar_url": "https://avatars.githubusercontent.com/u/33379285?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ernestognw",
      "html_url": "https://github.com/ernestognw",
      "followers_url": "https://api.github.com/users/ernestognw/followers",
      "following_url": "https://api.github.com/users/ernestognw/following{/other_user}",
      "gists_url": "https://api.github.com/users/ernestognw/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ernestognw/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ernestognw/subscriptions",
      "organizations_url": "https://api.github.com/users/ernestognw/orgs",
      "repos_url": "https://api.github.com/users/ernestognw/repos",
      "events_url": "https://api.github.com/users/ernestognw/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ernestognw/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-10-21T17:53:15Z",
    "updated_at": "2023-10-21T17:54:07Z",
    "author_association": "MEMBER",
    "body": "Hi @aviggiano!\r\n\r\nI agree messing with the storage layout is still a risk when using upgradeable contracts. However, that can be avoided by using [@openzeppelin/upgrades](https://github.com/OpenZeppelin/openzeppelin-upgrades/#how-do-the-plugins-work) since they have upgrade safetiness checks that also support the namespaced storage pattern (soon to be out for Foundry users as well).\r\n\r\n> However, the general issue still exists.\r\n\r\nYes, ideally we would have built-in safety instead of requiring checks. That's why we decided to implement EIP-7201 in upgradeable contracts, which is where the storage layout incompatibilities might happen. Aside from that, I don't see how it might be an issue for regular contract users.\r\n\r\nCan you provide an example of how storage layout incompatibilities are still a risk even after introducing EIP-7201?\r\n\r\nRegarding an ERC7201 base contract implementation, seems possible to do something like:\r\n\r\n```solidity\r\ncontract ERC7201Base {\r\n  bytes private immutable STORAGE;\r\n\r\n  constructor(string memory name) {\r\n    STORAGE = keccak256(abi.encode(uint256(keccak256(name)) - 1)) & ~bytes32(uint256(0xff))\r\n  }\r\n\r\n    function getStorage() internal pure returns (InitializableStorage storage $) {\r\n        assembly {\r\n            $.slot := STORAGE\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nBut, I think the storage struct should be declared outside and we already have an [storage slot](https://github.com/OpenZeppelin/openzeppelin-contracts/blob/3e6c86392c97fbc30d3d20a378a6f58beba08eba/contracts/utils/StorageSlot.sol) util.\r\n\r\nOverall, EIP-7201 defines a storage-derivation formula, but not actually a general implementation of a namespaced contract.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1773877544/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
