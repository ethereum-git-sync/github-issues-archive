{
  "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4459",
  "repository_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts",
  "labels_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4459/labels{/name}",
  "comments_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4459/comments",
  "events_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4459/events",
  "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/4459",
  "id": 1804889789,
  "node_id": "I_kwDOA9tCBs5rlG69",
  "number": 4459,
  "title": "ERC20Capped : do not make _cap private",
  "user": {
    "login": "SvenMeyer",
    "id": 25609,
    "node_id": "MDQ6VXNlcjI1NjA5",
    "avatar_url": "https://avatars.githubusercontent.com/u/25609?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/SvenMeyer",
    "html_url": "https://github.com/SvenMeyer",
    "followers_url": "https://api.github.com/users/SvenMeyer/followers",
    "following_url": "https://api.github.com/users/SvenMeyer/following{/other_user}",
    "gists_url": "https://api.github.com/users/SvenMeyer/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/SvenMeyer/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/SvenMeyer/subscriptions",
    "organizations_url": "https://api.github.com/users/SvenMeyer/orgs",
    "repos_url": "https://api.github.com/users/SvenMeyer/repos",
    "events_url": "https://api.github.com/users/SvenMeyer/events{/privacy}",
    "received_events_url": "https://api.github.com/users/SvenMeyer/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 10,
  "created_at": "2023-07-14T13:29:21Z",
  "updated_at": "2023-07-15T09:16:08Z",
  "closed_at": "2023-07-14T14:38:04Z",
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "I would like to create a token which has 2% inflation per year, based on `ERC20Capped`\r\nI would still use the `_cap` which is initialzed in `ERC20Capped` but would then override `cap()`\r\nSurprisingly, i can not access `_cap` to do the math.\r\n\r\n```solidity\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.9;\r\n\r\n// import \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Capped.sol\";\r\nimport \"@openzeppelin/contracts/security/Pausable.sol\";\r\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\r\n\r\n\r\n\r\ncontract COIN is ERC20Capped, AccessControl {\r\n    bytes32 public constant MINTER_ROLE   = keccak256(\"MINTER_ROLE\");\r\n\r\n    uint256 public constant SECONDS_PER_YEAR = 36525 days / 100;\r\n    uint256 public constant INFLATION = 2000; // 2.000 %\r\n    uint256 public immutable DEPLOYMENT_TIME;\r\n\r\n    constructor() ERC20(\"inflationary COIN\", \"COIN\") ERC20Capped(100000000) {\r\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\r\n        _grantRole(MINTER_ROLE, msg.sender);\r\n        DEPLOYMENT_TIME = block.timestamp;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the cap on the token's total supply\r\n     * @dev ERROR : _cap not accessible here ! - TODO\r\n     */\r\n    function cap() public view override returns (uint256) {\r\n        return _cap + _cap * (block.timestamp - DEPLOYMENT_TIME) * INFLATION / SECONDS_PER_YEAR / 100 / 1000;\r\n    }\r\n\r\n    function mint(address to, uint256 amount) public onlyRole(MINTER_ROLE) {\r\n        _mint(to, amount);\r\n    }\r\n}\r\n```",
  "closed_by": {
    "login": "frangio",
    "id": 481465,
    "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
    "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/frangio",
    "html_url": "https://github.com/frangio",
    "followers_url": "https://api.github.com/users/frangio/followers",
    "following_url": "https://api.github.com/users/frangio/following{/other_user}",
    "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
    "organizations_url": "https://api.github.com/users/frangio/orgs",
    "repos_url": "https://api.github.com/users/frangio/repos",
    "events_url": "https://api.github.com/users/frangio/events{/privacy}",
    "received_events_url": "https://api.github.com/users/frangio/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4459/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4459/timeline",
  "performed_via_github_app": null,
  "state_reason": "not_planned"
}
[
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1635961007",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/4459#issuecomment-1635961007",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4459",
    "id": 1635961007,
    "node_id": "IC_kwDOA9tCBs5hgsiv",
    "user": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-07-14T14:38:04Z",
    "updated_at": "2023-07-14T14:38:31Z",
    "author_association": "MEMBER",
    "body": "See \"All state variables should be private\" in [GUIDELINES.md](https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/GUIDELINES.md#solidity-conventions).\r\n\r\nYou can use `super.cap()` or you can copy-paste the contract and modify it since it's very simple.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1635961007/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1636639612",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/4459#issuecomment-1636639612",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4459",
    "id": 1636639612,
    "node_id": "IC_kwDOA9tCBs5hjSN8",
    "user": {
      "login": "SvenMeyer",
      "id": 25609,
      "node_id": "MDQ6VXNlcjI1NjA5",
      "avatar_url": "https://avatars.githubusercontent.com/u/25609?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/SvenMeyer",
      "html_url": "https://github.com/SvenMeyer",
      "followers_url": "https://api.github.com/users/SvenMeyer/followers",
      "following_url": "https://api.github.com/users/SvenMeyer/following{/other_user}",
      "gists_url": "https://api.github.com/users/SvenMeyer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/SvenMeyer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SvenMeyer/subscriptions",
      "organizations_url": "https://api.github.com/users/SvenMeyer/orgs",
      "repos_url": "https://api.github.com/users/SvenMeyer/repos",
      "events_url": "https://api.github.com/users/SvenMeyer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/SvenMeyer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-07-15T03:16:04Z",
    "updated_at": "2023-07-15T03:16:40Z",
    "author_association": "NONE",
    "body": "@frangio As I prefer to make the upgrade to v5 as easy as possible, I went with your suggestion to use `super.cap()` .. thanks for that !\r\n\r\n```solidity\r\n    import { ERC20, ERC20Capped } from \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Capped.sol\";\r\n~~~~~~~~~~\r\n    function capAt(uint256 t) public view returns (uint256) {\r\n        uint256 initialCap = super.cap();\r\n        if (t < DEPLOYMENT_TIME) return 0;\r\n        return initialCap + ((initialCap * (t - DEPLOYMENT_TIME) * INFLATION) / SECONDS_PER_YEAR / 100 / 1000);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the cap on the token's total supply\r\n     */\r\n    function cap() public view override returns (uint256) {\r\n        return capAt(block.timestamp);\r\n    }\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1636639612/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1636707577",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/4459#issuecomment-1636707577",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4459",
    "id": 1636707577,
    "node_id": "IC_kwDOA9tCBs5hjiz5",
    "user": {
      "login": "barakman",
      "id": 7003246,
      "node_id": "MDQ6VXNlcjcwMDMyNDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7003246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/barakman",
      "html_url": "https://github.com/barakman",
      "followers_url": "https://api.github.com/users/barakman/followers",
      "following_url": "https://api.github.com/users/barakman/following{/other_user}",
      "gists_url": "https://api.github.com/users/barakman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/barakman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/barakman/subscriptions",
      "organizations_url": "https://api.github.com/users/barakman/orgs",
      "repos_url": "https://api.github.com/users/barakman/repos",
      "events_url": "https://api.github.com/users/barakman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/barakman/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-07-15T08:18:42Z",
    "updated_at": "2023-07-15T08:30:50Z",
    "author_association": "CONTRIBUTOR",
    "body": "You are losing quite a bit of precision here; you may as well do something like:\r\n```\r\nreturn initialCap * ((t - DEPLOYMENT_TIME) * INFLATION + FACTOR) / FACTOR;\r\n```\r\nWhere the value of `FACTOR` is `SECONDS_PER_YEAR * 100 * 1000`.\r\n\r\nThe general idea is to rearrange the calculation such that:\r\n1. It includes a single division operation\r\n2. That division operation is the very last operation to take place\r\n\r\nThe only thing which typically prevents applying this solution is an arithmetic overflow which may potentially occur during the computation (i.e., as a result of the intermediate value becoming larger than 256 bits).\r\n\r\nBut your case doesn't seem to fall under this category (unless the initial cap is extremely large, in which case, an arithmetic overflow is likely to occur anyway).\r\n\r\nSo in short, it seems sufficiently safe to do it this way.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1636707577/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1636710386",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/4459#issuecomment-1636710386",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4459",
    "id": 1636710386,
    "node_id": "IC_kwDOA9tCBs5hjjfy",
    "user": {
      "login": "barakman",
      "id": 7003246,
      "node_id": "MDQ6VXNlcjcwMDMyNDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7003246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/barakman",
      "html_url": "https://github.com/barakman",
      "followers_url": "https://api.github.com/users/barakman/followers",
      "following_url": "https://api.github.com/users/barakman/following{/other_user}",
      "gists_url": "https://api.github.com/users/barakman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/barakman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/barakman/subscriptions",
      "organizations_url": "https://api.github.com/users/barakman/orgs",
      "repos_url": "https://api.github.com/users/barakman/repos",
      "events_url": "https://api.github.com/users/barakman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/barakman/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-07-15T08:36:01Z",
    "updated_at": "2023-07-15T08:36:32Z",
    "author_association": "CONTRIBUTOR",
    "body": "BTW, it is not really clear why you use both 100 and 1000 in `/ 100 / 1000`.\r\n\r\nYou should be using only the value which represents the resolution of `INFLATION`.\r\n\r\nFor example:\r\n- If `INFLATION = 25` denotes 25%, then you should use 100\r\n- If `INFLATION = 25` denotes 2.5%, then you should use 1000\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1636710386/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1636713180",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/4459#issuecomment-1636713180",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4459",
    "id": 1636713180,
    "node_id": "IC_kwDOA9tCBs5hjkLc",
    "user": {
      "login": "SvenMeyer",
      "id": 25609,
      "node_id": "MDQ6VXNlcjI1NjA5",
      "avatar_url": "https://avatars.githubusercontent.com/u/25609?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/SvenMeyer",
      "html_url": "https://github.com/SvenMeyer",
      "followers_url": "https://api.github.com/users/SvenMeyer/followers",
      "following_url": "https://api.github.com/users/SvenMeyer/following{/other_user}",
      "gists_url": "https://api.github.com/users/SvenMeyer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/SvenMeyer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SvenMeyer/subscriptions",
      "organizations_url": "https://api.github.com/users/SvenMeyer/orgs",
      "repos_url": "https://api.github.com/users/SvenMeyer/repos",
      "events_url": "https://api.github.com/users/SvenMeyer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/SvenMeyer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-07-15T08:50:52Z",
    "updated_at": "2023-07-15T08:56:32Z",
    "author_association": "NONE",
    "body": "@barakman Thanks for the suggestions ... I was actually aware of the precision problem, thus I do all the multiplications first and then divide at the end. I was thinking about doing it as you suggested, but thought (think) it does not make any difference as the compiler would do it, in my case it would not make any difference, and it would be more readable ... :thinking: \r\n\r\nAs we are dealing with integer math, the `1000` is just to allow fractional percentage with 3 fractional digits , like 1234/1000 = 1.234% , while the `100` does the \"percentage thing\" 2% = 2/100\r\nI was hoping if I write it that way, that it would be clear(er)\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1636713180/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1636713742",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/4459#issuecomment-1636713742",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4459",
    "id": 1636713742,
    "node_id": "IC_kwDOA9tCBs5hjkUO",
    "user": {
      "login": "SvenMeyer",
      "id": 25609,
      "node_id": "MDQ6VXNlcjI1NjA5",
      "avatar_url": "https://avatars.githubusercontent.com/u/25609?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/SvenMeyer",
      "html_url": "https://github.com/SvenMeyer",
      "followers_url": "https://api.github.com/users/SvenMeyer/followers",
      "following_url": "https://api.github.com/users/SvenMeyer/following{/other_user}",
      "gists_url": "https://api.github.com/users/SvenMeyer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/SvenMeyer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SvenMeyer/subscriptions",
      "organizations_url": "https://api.github.com/users/SvenMeyer/orgs",
      "repos_url": "https://api.github.com/users/SvenMeyer/repos",
      "events_url": "https://api.github.com/users/SvenMeyer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/SvenMeyer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-07-15T08:54:05Z",
    "updated_at": "2023-07-15T08:55:17Z",
    "author_association": "NONE",
    "body": "Maybe a good idea anyway ... ;-)\r\n\r\n```solidity\r\nuint256 public constant INFLATION = 2000; // 2.000 %\r\n~~~~~~~~~~~~~~~~~~~~~~~~~~\r\nreturn initialCap + ((initialCap * INFLATION * (t - DEPLOYMENT_TIME)) / (SECONDS_PER_YEAR * 100 * 1000));\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1636713742/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1636714214",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/4459#issuecomment-1636714214",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4459",
    "id": 1636714214,
    "node_id": "IC_kwDOA9tCBs5hjkbm",
    "user": {
      "login": "barakman",
      "id": 7003246,
      "node_id": "MDQ6VXNlcjcwMDMyNDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7003246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/barakman",
      "html_url": "https://github.com/barakman",
      "followers_url": "https://api.github.com/users/barakman/followers",
      "following_url": "https://api.github.com/users/barakman/following{/other_user}",
      "gists_url": "https://api.github.com/users/barakman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/barakman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/barakman/subscriptions",
      "organizations_url": "https://api.github.com/users/barakman/orgs",
      "repos_url": "https://api.github.com/users/barakman/repos",
      "events_url": "https://api.github.com/users/barakman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/barakman/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-07-15T08:57:36Z",
    "updated_at": "2023-07-15T08:57:36Z",
    "author_association": "CONTRIBUTOR",
    "body": "> thus I do all the multiplications first and then divide at the end\r\n\r\nNot in your original code:\r\n```\r\nreturn initialCap + ((initialCap * (t - DEPLOYMENT_TIME) * INFLATION) / SECONDS_PER_YEAR / 100 / 1000);\r\n```\r\nFirst of all, you are dividing 3 times instead of just 1 time.\r\n\r\nSecond, you are not doing it at the end of the computation (despite the fact that it appears at the end of the line).\r\n\r\nIn the line above, the last operation to take place is the addition operation, between these two intermediate values:\r\n- `initialCap`\r\n- `((initialCap * (t - DEPLOYMENT_TIME) * INFLATION) / SECONDS_PER_YEAR / 100 / 1000)`",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1636714214/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1636714750",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/4459#issuecomment-1636714750",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4459",
    "id": 1636714750,
    "node_id": "IC_kwDOA9tCBs5hjkj-",
    "user": {
      "login": "barakman",
      "id": 7003246,
      "node_id": "MDQ6VXNlcjcwMDMyNDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7003246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/barakman",
      "html_url": "https://github.com/barakman",
      "followers_url": "https://api.github.com/users/barakman/followers",
      "following_url": "https://api.github.com/users/barakman/following{/other_user}",
      "gists_url": "https://api.github.com/users/barakman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/barakman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/barakman/subscriptions",
      "organizations_url": "https://api.github.com/users/barakman/orgs",
      "repos_url": "https://api.github.com/users/barakman/repos",
      "events_url": "https://api.github.com/users/barakman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/barakman/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-07-15T09:01:00Z",
    "updated_at": "2023-07-15T09:07:24Z",
    "author_association": "CONTRIBUTOR",
    "body": "> Maybe a good idea anyway ... ;-)\r\n> \r\n> ```solidity\r\n> uint256 public constant INFLATION = 2000; // 2.000 %\r\n> ~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n> return initialCap + ((initialCap * INFLATION * (t - DEPLOYMENT_TIME)) / (SECONDS_PER_YEAR * 100 * 1000));\r\n> ```\r\n\r\nAnd as I've mentioned [above](https://github.com/OpenZeppelin/openzeppelin-contracts/issues/4459#issuecomment-1636710386), it is not clear why you divide by both 100 and 1000.\r\n\r\nPer your example, it seems that the resolution (value of 1 unit) of `INFLATION` is 0.1%, or equivalently - 0.001.\r\n\r\nSo you should divide only by `1000`, not by `100 * 1000`.\r\n\r\n---\r\n\r\n> As we are dealing with integer math, the 1000 is just to allow fractional percentage with 3 fractional digits , like 1234/1000 = 1.234% , while the 100 does the \"percentage thing\" 2% = 2/100\r\nI was hoping if I write it that way, that it would be clear(er)\r\n\r\nThis implies misunderstanding of the concept of 'relative portion'.\r\n\r\nA percentage is a relative portion of 1 out of 100.\r\n\r\nA tenth (1/10) of percentage is thus a relative portion of 0.1 out of 100, or equivalently - 1 out of 1000.\r\n\r\nYou obviously need to choose the SINGLE resolution that you wish to work with, let it be 100 or 1000 or whatever.\r\n\r\nIf you choose to go along with a resolution of 1 unit representing 0.1%, then your resolution factor is 1000.\r\n\r\nThere's no need to apply \"the percentage thing\" (as you've called it) on top of that factor.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1636714750/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1636715585",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/4459#issuecomment-1636715585",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4459",
    "id": 1636715585,
    "node_id": "IC_kwDOA9tCBs5hjkxB",
    "user": {
      "login": "SvenMeyer",
      "id": 25609,
      "node_id": "MDQ6VXNlcjI1NjA5",
      "avatar_url": "https://avatars.githubusercontent.com/u/25609?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/SvenMeyer",
      "html_url": "https://github.com/SvenMeyer",
      "followers_url": "https://api.github.com/users/SvenMeyer/followers",
      "following_url": "https://api.github.com/users/SvenMeyer/following{/other_user}",
      "gists_url": "https://api.github.com/users/SvenMeyer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/SvenMeyer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SvenMeyer/subscriptions",
      "organizations_url": "https://api.github.com/users/SvenMeyer/orgs",
      "repos_url": "https://api.github.com/users/SvenMeyer/repos",
      "events_url": "https://api.github.com/users/SvenMeyer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/SvenMeyer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-07-15T09:05:22Z",
    "updated_at": "2023-07-15T09:05:44Z",
    "author_association": "NONE",
    "body": "> Not in your original code:\r\n\r\n`(initialCap * (t - DEPLOYMENT_TIME) * INFLATION)`\r\n\r\nthat was I was referring to ... so multiplications happen here first\r\nthen we do the division (updated as you suggested)\r\nthen adding the \"base\" `initialCap`\r\n\r\nI think the math is ok (my test confirm that)\r\nIf I want to add 2% to x\r\n`x * 1.02`\r\n`x + 0.02 * x`\r\n`x + 2000 / 1000 / 100 * x`",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1636715585/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1636716472",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/4459#issuecomment-1636716472",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4459",
    "id": 1636716472,
    "node_id": "IC_kwDOA9tCBs5hjk-4",
    "user": {
      "login": "barakman",
      "id": 7003246,
      "node_id": "MDQ6VXNlcjcwMDMyNDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7003246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/barakman",
      "html_url": "https://github.com/barakman",
      "followers_url": "https://api.github.com/users/barakman/followers",
      "following_url": "https://api.github.com/users/barakman/following{/other_user}",
      "gists_url": "https://api.github.com/users/barakman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/barakman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/barakman/subscriptions",
      "organizations_url": "https://api.github.com/users/barakman/orgs",
      "repos_url": "https://api.github.com/users/barakman/repos",
      "events_url": "https://api.github.com/users/barakman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/barakman/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-07-15T09:09:24Z",
    "updated_at": "2023-07-15T09:16:08Z",
    "author_association": "CONTRIBUTOR",
    "body": "Please read the comment above this one again (I've expanded it to address some more of your previous claims).\r\n\r\nTo put it short:\r\n1. The last arithmetic operation in `x + 2000 / 1000 / 100` is addition (`+`), not division (`/`)\r\n2. If your `INFLATION` resolution is 0.1%, then you should divide by 1000, not by 100, and most certainly not by both\r\n\r\n---\r\nNote that:\r\n\r\n> then we do the division (updated as you suggested)\r\nthen adding the \"base\" initialCap\r\n\r\nIs basically the opposite of what I've suggested - `then adding the \"base\" initialCap` means that you're NOT doing the division last, as I have suggested.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1636716472/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
