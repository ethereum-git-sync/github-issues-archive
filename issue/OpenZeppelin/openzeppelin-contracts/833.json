{
  "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/833",
  "repository_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts",
  "labels_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/833/labels{/name}",
  "comments_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/833/comments",
  "events_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/833/events",
  "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/833",
  "id": 308084709,
  "node_id": "MDU6SXNzdWUzMDgwODQ3MDk=",
  "number": 833,
  "title": "Add an atomic swap contract for cross-evm-erc20-chains sending of Tokens",
  "user": {
    "login": "eordano",
    "id": 42750,
    "node_id": "MDQ6VXNlcjQyNzUw",
    "avatar_url": "https://avatars.githubusercontent.com/u/42750?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/eordano",
    "html_url": "https://github.com/eordano",
    "followers_url": "https://api.github.com/users/eordano/followers",
    "following_url": "https://api.github.com/users/eordano/following{/other_user}",
    "gists_url": "https://api.github.com/users/eordano/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/eordano/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/eordano/subscriptions",
    "organizations_url": "https://api.github.com/users/eordano/orgs",
    "repos_url": "https://api.github.com/users/eordano/repos",
    "events_url": "https://api.github.com/users/eordano/events{/privacy}",
    "received_events_url": "https://api.github.com/users/eordano/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 503650860,
      "node_id": "MDU6TGFiZWw1MDM2NTA4NjA=",
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/labels/feature",
      "name": "feature",
      "color": "b9db64",
      "default": false,
      "description": "New contracts, functions, or helpers."
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 6,
  "created_at": "2018-03-23T15:54:29Z",
  "updated_at": "2019-03-08T22:59:06Z",
  "closed_at": "2019-03-08T22:59:05Z",
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "## 🎉 Description\r\n\r\n- [ ] 🐛 This is a bug report.\r\n- [X] 📈 This is a feature request.\r\n\r\n## 📝 Details\r\n\r\nA number of projects are planning to build on their own evm compatible chain. I think we should add an exchange contract that allows secure transaction of tokens from one chain to the other.\r\n\r\nThis would work in 5 steps:\r\n\r\n0. Alice (who has tokens on chain 1) picks a secret value and transmits the hash of it to Bob (who has tokens on chain 2)\r\n1. Alice locks her tokens on chain 2, such that Bob can take out this tokens if he knows the secret\r\n2. Bob sees the confirmation of that transaction, and then proceeds to lock his tokens on chain 2, such that Alice can take out these tokens by revealing the secret\r\n3. Alice takes out the tokens from chain 2, revealing the secret (this should be included in an event log for easy access)\r\n4. Bob sees the transaction on chain 2 and takes out his tokens from chain 1\r\n\r\nRefund scenario:\r\n\r\nIf Bob never locks his tokens on chain 2, then Alice can, after a grace period, execute a refund to recover her tokens.\r\n\r\n## Scribble\r\n\r\n**PLEASE DO NOT USE THIS CODE** as it's just a scribble and it needs A LOT of work.\r\n\r\n```pragma solidity 0.4.21;\r\n\r\ncontract ERC20 {\r\n    function transferFrom(address, address, uint) public;\r\n}\r\n\r\ncontract Atomic {\r\n    // Mapping from receiving address to preimage to amount\r\n    mapping (address => mapping(bytes32 => uint)) public contracts;\r\n    \r\n    // Mapping from sending address to preimage to time\r\n    mapping (address => mapping(bytes32 => uint)) public refundTime;\r\n\r\n    // Only one atomic swap per address at a time (prevents hash reuse)\r\n    mapping (address => bool) public locked;\r\n\r\n    event Execution(address indexed sender, address indexed receiver, bytes32 secret, bytes32 indexed hashed);\r\n    \r\n    uint public GRACE_PERIOD = 5 days;\r\n    \r\n    ERC20 public token;\r\n\r\n    /**\r\n     * Store a given `amount` of ERC20 tokens to be released by `receiver` upon\r\n     * revealing a secret that hashes to `hashedSecret`.\r\n     */\r\n    function store(address receiver, bytes32 hashedSecret, uint amount) public {\r\n        require(!locked[msg.sender]);\r\n        contracts[receiver][hashedSecret] = amount;\r\n        locked[msg.sender] = true;\r\n        refundTime[msg.sender][hashedSecret] = now + GRACE_PERIOD;\r\n        token.transferFrom(msg.sender, this, amount);\r\n    }\r\n\r\n    /**\r\n     * Execute an atomic swap by releasing the preimage\r\n     */\r\n    function execute(address receiver, bytes32 secret, address sender) public {\r\n        bytes32 hash = keccak256(secret);\r\n        uint amount = contracts[receiver][hash];\r\n        delete locked[sender];\r\n        delete contracts[msg.sender][hash];\r\n        delete refundTime[sender][hash];\r\n        token.transferFrom(this, receiver, amount);\r\n        Execution(sender, receiver, secret, hash);\r\n    }\r\n\r\n    /**\r\n     * Fallback in case the counterparty never executed an equivalent transaction\r\n     * in the other chain\r\n     */\r\n    function refund(address receiver, bytes32 hashedSecret, address sender) public {\r\n        require(now > refundTime[sender][hashedSecret]);\r\n        delete locked[sender];\r\n        delete contracts[receiver][hashedSecret];\r\n        delete refundTime[sender][hashedSecret];\r\n        token.transferFrom(this, sender, contracts[receiver][hashedSecret]);\r\n    }\r\n}\r\n```",
  "closed_by": {
    "login": "nventuro",
    "id": 2530770,
    "node_id": "MDQ6VXNlcjI1MzA3NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/2530770?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nventuro",
    "html_url": "https://github.com/nventuro",
    "followers_url": "https://api.github.com/users/nventuro/followers",
    "following_url": "https://api.github.com/users/nventuro/following{/other_user}",
    "gists_url": "https://api.github.com/users/nventuro/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nventuro/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nventuro/subscriptions",
    "organizations_url": "https://api.github.com/users/nventuro/orgs",
    "repos_url": "https://api.github.com/users/nventuro/repos",
    "events_url": "https://api.github.com/users/nventuro/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nventuro/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/833/reactions",
    "total_count": 5,
    "+1": 5,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/833/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/375795039",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/833#issuecomment-375795039",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/833",
    "id": 375795039,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3NTc5NTAzOQ==",
    "user": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-23T20:52:21Z",
    "updated_at": "2018-03-23T20:52:21Z",
    "author_association": "MEMBER",
    "body": "Great idea.\r\n\r\nCan you expand one the reason for the `locked` bit?",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/375795039/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/375812382",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/833#issuecomment-375812382",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/833",
    "id": 375812382,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3NTgxMjM4Mg==",
    "user": {
      "login": "eordano",
      "id": 42750,
      "node_id": "MDQ6VXNlcjQyNzUw",
      "avatar_url": "https://avatars.githubusercontent.com/u/42750?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/eordano",
      "html_url": "https://github.com/eordano",
      "followers_url": "https://api.github.com/users/eordano/followers",
      "following_url": "https://api.github.com/users/eordano/following{/other_user}",
      "gists_url": "https://api.github.com/users/eordano/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/eordano/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/eordano/subscriptions",
      "organizations_url": "https://api.github.com/users/eordano/orgs",
      "repos_url": "https://api.github.com/users/eordano/repos",
      "events_url": "https://api.github.com/users/eordano/events{/privacy}",
      "received_events_url": "https://api.github.com/users/eordano/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-23T22:14:31Z",
    "updated_at": "2018-03-23T22:14:31Z",
    "author_association": "CONTRIBUTOR",
    "body": "That’s just a quick fix for an attack that can happen because of the way I was coding it.\r\n\r\nI can “burn” the tokens for someone if I send twice a request. There are far better ways to solve this.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/375812382/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/378314311",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/833#issuecomment-378314311",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/833",
    "id": 378314311,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3ODMxNDMxMQ==",
    "user": {
      "login": "shrugs",
      "id": 1535001,
      "node_id": "MDQ6VXNlcjE1MzUwMDE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1535001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shrugs",
      "html_url": "https://github.com/shrugs",
      "followers_url": "https://api.github.com/users/shrugs/followers",
      "following_url": "https://api.github.com/users/shrugs/following{/other_user}",
      "gists_url": "https://api.github.com/users/shrugs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shrugs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shrugs/subscriptions",
      "organizations_url": "https://api.github.com/users/shrugs/orgs",
      "repos_url": "https://api.github.com/users/shrugs/repos",
      "events_url": "https://api.github.com/users/shrugs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shrugs/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-03T16:36:44Z",
    "updated_at": "2018-04-03T16:36:44Z",
    "author_association": "CONTRIBUTOR",
    "body": "I like having a canonical implementation for this. Is there a complementary EIP standard? Not sure if there needs to be one, but regardless it'd be good for them all to have the same interface.\r\n\r\nWhich group/individual is working very directly on cross-EVM-chain swaps? It'd be good to get their opinion/involvement.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/378314311/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/403058744",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/833#issuecomment-403058744",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/833",
    "id": 403058744,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwMzA1ODc0NA==",
    "user": {
      "login": "HarryR",
      "id": 303926,
      "node_id": "MDQ6VXNlcjMwMzkyNg==",
      "avatar_url": "https://avatars.githubusercontent.com/u/303926?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/HarryR",
      "html_url": "https://github.com/HarryR",
      "followers_url": "https://api.github.com/users/HarryR/followers",
      "following_url": "https://api.github.com/users/HarryR/following{/other_user}",
      "gists_url": "https://api.github.com/users/HarryR/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/HarryR/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/HarryR/subscriptions",
      "organizations_url": "https://api.github.com/users/HarryR/orgs",
      "repos_url": "https://api.github.com/users/HarryR/repos",
      "events_url": "https://api.github.com/users/HarryR/events{/privacy}",
      "received_events_url": "https://api.github.com/users/HarryR/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-06T14:57:09Z",
    "updated_at": "2018-07-06T17:19:09Z",
    "author_association": "NONE",
    "body": "@shrugs I also have a HTLC implementation \r\n\r\nsee: https://github.com/HarryR/shwop/blob/master/contracts/HTLC.sol\r\n\r\nI think it would be a very good idea to have a standard ERC/EIP for hash-time-locks where the interface is generic enough to transfer any kind of asset, and an abstract implementation can be plugged into any contract.\r\n\r\n@eordano  Do you fancy working together on this together? There are a few other projects I've linked in a ticket: https://github.com/HarryR/shwop/issues/5\r\n\r\nThere are a few issues which need documenting and enforcing, such as unequal timeouts to provide one party enough time to withdraw before a refund.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/403058744/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/403095002",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/833#issuecomment-403095002",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/833",
    "id": 403095002,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwMzA5NTAwMg==",
    "user": {
      "login": "shrugs",
      "id": 1535001,
      "node_id": "MDQ6VXNlcjE1MzUwMDE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1535001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shrugs",
      "html_url": "https://github.com/shrugs",
      "followers_url": "https://api.github.com/users/shrugs/followers",
      "following_url": "https://api.github.com/users/shrugs/following{/other_user}",
      "gists_url": "https://api.github.com/users/shrugs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shrugs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shrugs/subscriptions",
      "organizations_url": "https://api.github.com/users/shrugs/orgs",
      "repos_url": "https://api.github.com/users/shrugs/repos",
      "events_url": "https://api.github.com/users/shrugs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shrugs/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-06T17:14:42Z",
    "updated_at": "2018-07-06T17:14:42Z",
    "author_association": "CONTRIBUTOR",
    "body": "We would certainly welcome an HTLC PR!",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/403095002/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/471105548",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/833#issuecomment-471105548",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/833",
    "id": 471105548,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3MTEwNTU0OA==",
    "user": {
      "login": "nventuro",
      "id": 2530770,
      "node_id": "MDQ6VXNlcjI1MzA3NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2530770?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nventuro",
      "html_url": "https://github.com/nventuro",
      "followers_url": "https://api.github.com/users/nventuro/followers",
      "following_url": "https://api.github.com/users/nventuro/following{/other_user}",
      "gists_url": "https://api.github.com/users/nventuro/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nventuro/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nventuro/subscriptions",
      "organizations_url": "https://api.github.com/users/nventuro/orgs",
      "repos_url": "https://api.github.com/users/nventuro/repos",
      "events_url": "https://api.github.com/users/nventuro/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nventuro/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-03-08T22:59:05Z",
    "updated_at": "2019-03-08T22:59:05Z",
    "author_association": "CONTRIBUTOR",
    "body": "Indeed, a more generic hash-time-lock framework does seem more useful (and could benefit from our intended new escrows: #1099). Closing for now due to a perceived lack of interest.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/471105548/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
