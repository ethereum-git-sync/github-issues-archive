{
  "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2563",
  "repository_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts",
  "labels_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2563/labels{/name}",
  "comments_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2563/comments",
  "events_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2563/events",
  "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2563",
  "id": 822664718,
  "node_id": "MDU6SXNzdWU4MjI2NjQ3MTg=",
  "number": 2563,
  "title": "Where is \"tokenIDForOwnerByIndex\" ?",
  "user": {
    "login": "charlesmarino",
    "id": 7192205,
    "node_id": "MDQ6VXNlcjcxOTIyMDU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/7192205?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/charlesmarino",
    "html_url": "https://github.com/charlesmarino",
    "followers_url": "https://api.github.com/users/charlesmarino/followers",
    "following_url": "https://api.github.com/users/charlesmarino/following{/other_user}",
    "gists_url": "https://api.github.com/users/charlesmarino/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/charlesmarino/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/charlesmarino/subscriptions",
    "organizations_url": "https://api.github.com/users/charlesmarino/orgs",
    "repos_url": "https://api.github.com/users/charlesmarino/repos",
    "events_url": "https://api.github.com/users/charlesmarino/events{/privacy}",
    "received_events_url": "https://api.github.com/users/charlesmarino/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 27,
  "created_at": "2021-03-05T01:52:47Z",
  "updated_at": "2023-02-08T09:21:17Z",
  "closed_at": "2021-03-11T21:41:42Z",
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "So there is really no method to see what NFTs an owner owns? Or Am I missing something here.\r\n\r\nhttps://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC721/ERC721.sol",
  "closed_by": {
    "login": "frangio",
    "id": 481465,
    "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
    "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/frangio",
    "html_url": "https://github.com/frangio",
    "followers_url": "https://api.github.com/users/frangio/followers",
    "following_url": "https://api.github.com/users/frangio/following{/other_user}",
    "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
    "organizations_url": "https://api.github.com/users/frangio/orgs",
    "repos_url": "https://api.github.com/users/frangio/repos",
    "events_url": "https://api.github.com/users/frangio/events{/privacy}",
    "received_events_url": "https://api.github.com/users/frangio/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2563/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2563/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/791255912",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2563#issuecomment-791255912",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2563",
    "id": 791255912,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc5MTI1NTkxMg==",
    "user": {
      "login": "Amxx",
      "id": 2432299,
      "node_id": "MDQ6VXNlcjI0MzIyOTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2432299?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Amxx",
      "html_url": "https://github.com/Amxx",
      "followers_url": "https://api.github.com/users/Amxx/followers",
      "following_url": "https://api.github.com/users/Amxx/following{/other_user}",
      "gists_url": "https://api.github.com/users/Amxx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Amxx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Amxx/subscriptions",
      "organizations_url": "https://api.github.com/users/Amxx/orgs",
      "repos_url": "https://api.github.com/users/Amxx/repos",
      "events_url": "https://api.github.com/users/Amxx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Amxx/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-03-05T08:32:42Z",
    "updated_at": "2021-03-05T08:32:42Z",
    "author_association": "COLLABORATOR",
    "body": "Hello @charlesmarino.\r\n\r\nThere \"enumerability\" functions are very expensive in term of gas, and the corresponding information is easy to rebuild offchain. Several users requested it not being available by default, so they can deploy smaller, erc721 compliant, contract.\r\n\r\nThis feature isn't gone however, it was moved to the ERC721Enumerable extension: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC721/extensions/ERC721Enumerable.sol\r\n\r\nIs you want it, you can just inherit from this extensions, and everything should be good.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/791255912/reactions",
      "total_count": 4,
      "+1": 4,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/791265822",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2563#issuecomment-791265822",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2563",
    "id": 791265822,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc5MTI2NTgyMg==",
    "user": {
      "login": "charlesmarino",
      "id": 7192205,
      "node_id": "MDQ6VXNlcjcxOTIyMDU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7192205?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/charlesmarino",
      "html_url": "https://github.com/charlesmarino",
      "followers_url": "https://api.github.com/users/charlesmarino/followers",
      "following_url": "https://api.github.com/users/charlesmarino/following{/other_user}",
      "gists_url": "https://api.github.com/users/charlesmarino/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/charlesmarino/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/charlesmarino/subscriptions",
      "organizations_url": "https://api.github.com/users/charlesmarino/orgs",
      "repos_url": "https://api.github.com/users/charlesmarino/repos",
      "events_url": "https://api.github.com/users/charlesmarino/events{/privacy}",
      "received_events_url": "https://api.github.com/users/charlesmarino/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-03-05T08:48:44Z",
    "updated_at": "2021-03-05T08:52:57Z",
    "author_association": "NONE",
    "body": "It's important to remember that \"Easy\" is relative here and maybe a compliant contract shouldn't require an offchain service for essential methods. Because with this, Developers have to rely on a centralized service to develop anything with the token. This makes the decentralized aspect a bit pointless to me.\r\n\r\nBeing able to view the tokens an owner has is fundamental. So, is there a way to solve this for the erc721 contract or is the norm to rely on a centralized service or build your own?",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/791265822/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/791406575",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2563#issuecomment-791406575",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2563",
    "id": 791406575,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc5MTQwNjU3NQ==",
    "user": {
      "login": "Amxx",
      "id": 2432299,
      "node_id": "MDQ6VXNlcjI0MzIyOTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2432299?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Amxx",
      "html_url": "https://github.com/Amxx",
      "followers_url": "https://api.github.com/users/Amxx/followers",
      "following_url": "https://api.github.com/users/Amxx/following{/other_user}",
      "gists_url": "https://api.github.com/users/Amxx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Amxx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Amxx/subscriptions",
      "organizations_url": "https://api.github.com/users/Amxx/orgs",
      "repos_url": "https://api.github.com/users/Amxx/repos",
      "events_url": "https://api.github.com/users/Amxx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Amxx/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-03-05T13:03:52Z",
    "updated_at": "2021-03-05T13:03:52Z",
    "author_association": "COLLABORATOR",
    "body": "You have to understand that some people want to lower their gas cost as much as possible, and there is no reason for us to force them having non-standard function as part of their token when we consequence is a non-trivial gas cost increases.\r\n\r\nYou seem to value these function a lot, and be ready to pay the associated gas cost, so I invite you to inherit from `ERC721Enumerable`. Again, this feature is not gone, its just on another file.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/791406575/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/791409027",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2563#issuecomment-791409027",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2563",
    "id": 791409027,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc5MTQwOTAyNw==",
    "user": {
      "login": "Amxx",
      "id": 2432299,
      "node_id": "MDQ6VXNlcjI0MzIyOTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2432299?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Amxx",
      "html_url": "https://github.com/Amxx",
      "followers_url": "https://api.github.com/users/Amxx/followers",
      "following_url": "https://api.github.com/users/Amxx/following{/other_user}",
      "gists_url": "https://api.github.com/users/Amxx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Amxx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Amxx/subscriptions",
      "organizations_url": "https://api.github.com/users/Amxx/orgs",
      "repos_url": "https://api.github.com/users/Amxx/repos",
      "events_url": "https://api.github.com/users/Amxx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Amxx/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-03-05T13:08:21Z",
    "updated_at": "2021-03-05T13:08:21Z",
    "author_association": "COLLABORATOR",
    "body": "Also, rebuilding the historical data (of events) doesn't require much more then an ethereum node and some easy to read/find open source code.\r\n\r\nIf you care about decentralization so much, and run your very own ethereum node because you are afraid infura, alchemy and etherscan might collude, then you should know that it is very easy to run your own graphnode and connect it to your ethereum node.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/791409027/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/791880450",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2563#issuecomment-791880450",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2563",
    "id": 791880450,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc5MTg4MDQ1MA==",
    "user": {
      "login": "charlesmarino",
      "id": 7192205,
      "node_id": "MDQ6VXNlcjcxOTIyMDU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7192205?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/charlesmarino",
      "html_url": "https://github.com/charlesmarino",
      "followers_url": "https://api.github.com/users/charlesmarino/followers",
      "following_url": "https://api.github.com/users/charlesmarino/following{/other_user}",
      "gists_url": "https://api.github.com/users/charlesmarino/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/charlesmarino/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/charlesmarino/subscriptions",
      "organizations_url": "https://api.github.com/users/charlesmarino/orgs",
      "repos_url": "https://api.github.com/users/charlesmarino/repos",
      "events_url": "https://api.github.com/users/charlesmarino/events{/privacy}",
      "received_events_url": "https://api.github.com/users/charlesmarino/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-03-06T06:04:11Z",
    "updated_at": "2021-03-06T08:47:54Z",
    "author_association": "NONE",
    "body": "Creating a standard is not forcing anyone. It's a standard to build decentralized permissionless assets accepted by the community. \r\nAnd Yes I value this \"non-standard\" function \"a lot\" because the most basic functionality of these assets is being able to see which you own. \r\n\r\nLet's say as a developer I want to build something with these assets. To even see what assets the owner has, (which should be a simple method call) I have to create my own centralized service (you suggest graphnode). which is definitely not as trivial as you are suggesting plus a lot of developers don't want to depend on a centralized service. Removing this method increases the barrier to entry to work on these assets and makes it less decentralized. This is a matter of priority. Making the standard a decentralized NFT or making these assets cheaper to use but relying on centralized services. \r\n\r\nDo you really believe that the standard shouldn't allow people to see what assets they own without a third-party service? \r\n",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/791880450/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/791909666",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2563#issuecomment-791909666",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2563",
    "id": 791909666,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc5MTkwOTY2Ng==",
    "user": {
      "login": "Amxx",
      "id": 2432299,
      "node_id": "MDQ6VXNlcjI0MzIyOTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2432299?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Amxx",
      "html_url": "https://github.com/Amxx",
      "followers_url": "https://api.github.com/users/Amxx/followers",
      "following_url": "https://api.github.com/users/Amxx/following{/other_user}",
      "gists_url": "https://api.github.com/users/Amxx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Amxx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Amxx/subscriptions",
      "organizations_url": "https://api.github.com/users/Amxx/orgs",
      "repos_url": "https://api.github.com/users/Amxx/repos",
      "events_url": "https://api.github.com/users/Amxx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Amxx/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-03-06T10:36:22Z",
    "updated_at": "2021-03-06T10:38:00Z",
    "author_association": "COLLABORATOR",
    "body": "> Do you really believe that the standard shouldn't allow people to see what assets they own without a third-party service?\r\n\r\nIts not up to me to decide what the standard should and shouldn't include.\r\n\r\nAlso the standard doesn't restrict anyone from having these function, it doesn't require them, which is different. The standard here is a final ERC, and some users only want to have the functions that are part of this final ERC. This is why be decided to align the base implementation with the standard.\r\n\r\nBut again, if you want to expand your contract, you are free to do so, no one is telling you not to ! And this is exactly what we offer with the extension system. The counter-part is that you shouldn't force other people to have the extensions that they don't see as necessary, or that they consider are to much gas intensive to be worth it.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/791909666/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/791965739",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2563#issuecomment-791965739",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2563",
    "id": 791965739,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc5MTk2NTczOQ==",
    "user": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-03-06T14:50:00Z",
    "updated_at": "2021-03-06T14:50:00Z",
    "author_association": "MEMBER",
    "body": "@charlesmarino Your comments are coming across as angry and pissed of at us. Let's try to keep this a productive conversation.\r\n\r\nThe change we have done here is to make ERC721 enumerability opt-in through the [`ERC721Enumerable`](https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v4.0/contracts/token/ERC721/extensions/ERC721Enumerable.sol) extension. This was not our whim, it was based on requests from users, and is compliant with ERC721 where enumerability has always been optional. If you have an issue with the ERC721 spec this is not the place for that conversation. I'll invite you to create a thread in [ethereum-magicians.org](https://ethereum-magicians.org/) to discuss the problems you see in the ERC and possible ways to solve them.\r\n\r\nAn ERC721 token without enumerability does not require a centralized service to list the tokens owned by an account. The `Transfer` events emitted by the contract are enough to assemble this list of tokens using any of the JSON RPC calls that access logs (e.g. [`eth_getLogs`](https://eth.wiki/json-rpc/API#eth_getlogs)), which are readily available in any high level Ethereum library like Web3.js or Ethers.js. This is no more centralized than using the same node to call an enumeration function on a contract.\r\n\r\nPlease explain the problems that you see in this solution.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/791965739/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/791966479",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2563#issuecomment-791966479",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2563",
    "id": 791966479,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc5MTk2NjQ3OQ==",
    "user": {
      "login": "charlesmarino",
      "id": 7192205,
      "node_id": "MDQ6VXNlcjcxOTIyMDU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7192205?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/charlesmarino",
      "html_url": "https://github.com/charlesmarino",
      "followers_url": "https://api.github.com/users/charlesmarino/followers",
      "following_url": "https://api.github.com/users/charlesmarino/following{/other_user}",
      "gists_url": "https://api.github.com/users/charlesmarino/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/charlesmarino/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/charlesmarino/subscriptions",
      "organizations_url": "https://api.github.com/users/charlesmarino/orgs",
      "repos_url": "https://api.github.com/users/charlesmarino/repos",
      "events_url": "https://api.github.com/users/charlesmarino/events{/privacy}",
      "received_events_url": "https://api.github.com/users/charlesmarino/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-03-06T14:53:00Z",
    "updated_at": "2021-03-06T14:53:00Z",
    "author_association": "NONE",
    "body": "> > Do you really believe that the standard shouldn't allow people to see what assets they own without a third-party service?\r\n> \r\n> Its not up to me to decide what the standard should and shouldn't include.\r\n> \r\n> Also the standard doesn't restrict anyone from having these function, it doesn't require them, which is different. The standard here is a final ERC, and some users only want to have the functions that are part of this final ERC. This is why be decided to align the base implementation with the standard.\r\n> \r\n> But again, if you want to expand your contract, you are free to do so, no one is telling you not to ! And this is exactly what we offer with the extension system. The counter-part is that you shouldn't force other people to have the extensions that they don't see as necessary, or that they consider are to much gas intensive to be worth it.\r\n\r\nMy issue isn't that I don't know how to expand my contract. It's that other developers will follow this standard and believe they are making a decentralized NFT but will then have their community face this problem. I believe it enumerability should be opt-out instead of opt-in. Otherwise, we are requiring users to create or use a centralized service in order view what NFTs a user owns. \r\nHope I'm being clear.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/791966479/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/791968207",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2563#issuecomment-791968207",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2563",
    "id": 791968207,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc5MTk2ODIwNw==",
    "user": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-03-06T15:02:49Z",
    "updated_at": "2021-03-06T15:02:49Z",
    "author_association": "MEMBER",
    "body": "> My issue isn't that I don't know how to expand my contract.\r\n\r\nFor reference, this is the way it's done:\r\n\r\n```solidity\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ncontract MyNFT is ERC721, ERC721Enumerable {\r\n  constructor() ERC721(\"Name\", \"SYM\") {}\r\n}\r\n```\r\n\r\nWe understand that not everyone is comfortable enough to write this bit of code, so we're building an interactive tool to help with it. People will be able to choose the features they want in their contract and the tool will write this code for them. This will be released in the next couple of weeks.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/791968207/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/791968352",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2563#issuecomment-791968352",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2563",
    "id": 791968352,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc5MTk2ODM1Mg==",
    "user": {
      "login": "charlesmarino",
      "id": 7192205,
      "node_id": "MDQ6VXNlcjcxOTIyMDU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7192205?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/charlesmarino",
      "html_url": "https://github.com/charlesmarino",
      "followers_url": "https://api.github.com/users/charlesmarino/followers",
      "following_url": "https://api.github.com/users/charlesmarino/following{/other_user}",
      "gists_url": "https://api.github.com/users/charlesmarino/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/charlesmarino/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/charlesmarino/subscriptions",
      "organizations_url": "https://api.github.com/users/charlesmarino/orgs",
      "repos_url": "https://api.github.com/users/charlesmarino/repos",
      "events_url": "https://api.github.com/users/charlesmarino/events{/privacy}",
      "received_events_url": "https://api.github.com/users/charlesmarino/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-03-06T15:03:49Z",
    "updated_at": "2021-03-06T15:03:49Z",
    "author_association": "NONE",
    "body": "> s emitted by the contract are enough to assemble this list of tokens using any of the JSON RPC calls that acces\r\n\r\nIt's more centralized because the barrier to entry to now read what NFT tokens you have is higher. For example, can you write here the lines of code that someone must now write to fetch the tokens of an Owner? \r\n\r\nBefore it was tokenOfOwnerByIndex(owner, index). \r\n\r\nSorry if I come off angry lol. I'm annoyed that this is the standard for the decentralized NFT and other developers cannot easily fetch what NFT tokens an owner has.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/791968352/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/791968746",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2563#issuecomment-791968746",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2563",
    "id": 791968746,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc5MTk2ODc0Ng==",
    "user": {
      "login": "charlesmarino",
      "id": 7192205,
      "node_id": "MDQ6VXNlcjcxOTIyMDU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7192205?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/charlesmarino",
      "html_url": "https://github.com/charlesmarino",
      "followers_url": "https://api.github.com/users/charlesmarino/followers",
      "following_url": "https://api.github.com/users/charlesmarino/following{/other_user}",
      "gists_url": "https://api.github.com/users/charlesmarino/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/charlesmarino/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/charlesmarino/subscriptions",
      "organizations_url": "https://api.github.com/users/charlesmarino/orgs",
      "repos_url": "https://api.github.com/users/charlesmarino/repos",
      "events_url": "https://api.github.com/users/charlesmarino/events{/privacy}",
      "received_events_url": "https://api.github.com/users/charlesmarino/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-03-06T15:06:55Z",
    "updated_at": "2021-03-06T15:08:03Z",
    "author_association": "NONE",
    "body": "> > My issue isn't that I don't know how to expand my contract.\r\n> \r\n> For reference, this is the way it's done:\r\n> \r\n> ```solidity\r\n> // SPDX-License-Identifier: MIT\r\n> pragma solidity ^0.8.0;\r\n> \r\n> contract MyNFT is ERC721, ERC721Enumerable {\r\n>   constructor() ERC721(\"Name\", \"SYM\") {}\r\n> }\r\n> ```\r\n> \r\n> We understand that not everyone is comfortable enough to write this bit of code, so we're building an interactive tool to help with it. People will be able to choose the features they want in their contract and the tool will write this code for them. This will be released in the next couple of weeks.\r\n\r\nI said \"My issue isn't that I don't know how to expand my contract.\" :'( \r\n\r\nI'm guessing you misread my sentence ? Or you felt like showing me exactly what I said isn't my issue. \r\n\r\nI am very comfortable writing that code. I am discussing fetching what tokens an owner has from the contract that is the standard. ",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/791968746/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/791969026",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2563#issuecomment-791969026",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2563",
    "id": 791969026,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc5MTk2OTAyNg==",
    "user": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-03-06T15:08:37Z",
    "updated_at": "2021-03-06T15:08:37Z",
    "author_association": "MEMBER",
    "body": "Ah, my bad, I misread.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/791969026/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/791979493",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2563#issuecomment-791979493",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2563",
    "id": 791979493,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc5MTk3OTQ5Mw==",
    "user": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-03-06T16:09:58Z",
    "updated_at": "2021-03-06T16:10:53Z",
    "author_association": "MEMBER",
    "body": "> For example, can you write here the lines of code that someone must now write to fetch the tokens of an Owner?\r\n\r\nI wrote this function to list the tokens of an owner using Ethers.js and Hardhat:\r\n\r\n```javascript\r\nasync function listTokensOfOwner({ token: tokenAddress, account }) {\r\n  const token = await ethers.getContractAt(ERC721.abi, tokenAddress, ethers.provider);\r\n\r\n  console.error(await token.name(), 'tokens owned by', account);\r\n\r\n  const sentLogs = await token.queryFilter(\r\n    token.filters.Transfer(account, null),\r\n  );\r\n  const receivedLogs = await token.queryFilter(\r\n    token.filters.Transfer(null, account),\r\n  );\r\n\r\n  const logs = sentLogs.concat(receivedLogs)\r\n    .sort(\r\n      (a, b) =>\r\n        a.blockNumber - b.blockNumber ||\r\n        a.transactionIndex - b.TransactionIndex,\r\n    );\r\n\r\n  const owned = new Set();\r\n\r\n  for (const log of logs) {\r\n    const { from, to, tokenId } = log.args;\r\n    \r\n    if (addressEqual(to, account)) {\r\n      owned.add(tokenId.toString());\r\n    } else if (addressEqual(from, account)) {\r\n      owned.delete(tokenId.toString());\r\n    }\r\n  }\r\n\r\n  console.log([...owned].join('\\n'));\r\n};\r\n```\r\n\r\n![console output](https://user-images.githubusercontent.com/481465/110213055-29122980-7e7d-11eb-87b2-87e4338ea206.png)\r\n\r\nThe code is in [frangio/erc721-list](https://github.com/frangio/erc721-list).",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/791979493/reactions",
      "total_count": 6,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 6,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/797068740",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2563#issuecomment-797068740",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2563",
    "id": 797068740,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc5NzA2ODc0MA==",
    "user": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-03-11T21:41:42Z",
    "updated_at": "2021-03-11T21:41:42Z",
    "author_association": "MEMBER",
    "body": "Closing this as resolved. Let us know if we can help any other way.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/797068740/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/983920129",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2563#issuecomment-983920129",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2563",
    "id": 983920129,
    "node_id": "IC_kwDOA9tCBs46pW4B",
    "user": {
      "login": "benjick",
      "id": 430872,
      "node_id": "MDQ6VXNlcjQzMDg3Mg==",
      "avatar_url": "https://avatars.githubusercontent.com/u/430872?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/benjick",
      "html_url": "https://github.com/benjick",
      "followers_url": "https://api.github.com/users/benjick/followers",
      "following_url": "https://api.github.com/users/benjick/following{/other_user}",
      "gists_url": "https://api.github.com/users/benjick/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/benjick/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/benjick/subscriptions",
      "organizations_url": "https://api.github.com/users/benjick/orgs",
      "repos_url": "https://api.github.com/users/benjick/repos",
      "events_url": "https://api.github.com/users/benjick/events{/privacy}",
      "received_events_url": "https://api.github.com/users/benjick/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-12-01T18:05:47Z",
    "updated_at": "2021-12-01T18:05:47Z",
    "author_association": "NONE",
    "body": "@frangio thanks for the solution, but how would I do that with IERC1155?",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/983920129/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/989304871",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2563#issuecomment-989304871",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2563",
    "id": 989304871,
    "node_id": "IC_kwDOA9tCBs4695gn",
    "user": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-12-08T23:16:48Z",
    "updated_at": "2021-12-08T23:16:48Z",
    "author_association": "MEMBER",
    "body": "@benjick You'd do something similar but using ERC1155 events. An additional complication is the presence of both \"TransferSingle\" and \"TransferBatch\" events.\r\n\r\nAt this point I think the best recommendation is to use TheGraph for querying. We have schemas for ERC1155 in [OpenZeppelin Subgraphs](https://github.com/OpenZeppelin/openzeppelin-subgraphs/).",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/989304871/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/989613555",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2563#issuecomment-989613555",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2563",
    "id": 989613555,
    "node_id": "IC_kwDOA9tCBs46_E3z",
    "user": {
      "login": "Amxx",
      "id": 2432299,
      "node_id": "MDQ6VXNlcjI0MzIyOTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2432299?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Amxx",
      "html_url": "https://github.com/Amxx",
      "followers_url": "https://api.github.com/users/Amxx/followers",
      "following_url": "https://api.github.com/users/Amxx/following{/other_user}",
      "gists_url": "https://api.github.com/users/Amxx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Amxx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Amxx/subscriptions",
      "organizations_url": "https://api.github.com/users/Amxx/orgs",
      "repos_url": "https://api.github.com/users/Amxx/repos",
      "events_url": "https://api.github.com/users/Amxx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Amxx/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-12-09T08:16:27Z",
    "updated_at": "2021-12-09T08:16:27Z",
    "author_association": "COLLABORATOR",
    "body": "I would add that there is a generic subgraph for ERC1155 already deployed (for mainnet)\r\nhttps://thegraph.com/hosted-service/subgraph/amxx/eip1155-subgraph",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/989613555/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/990219694",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2563#issuecomment-990219694",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2563",
    "id": 990219694,
    "node_id": "IC_kwDOA9tCBs47BY2u",
    "user": {
      "login": "benjick",
      "id": 430872,
      "node_id": "MDQ6VXNlcjQzMDg3Mg==",
      "avatar_url": "https://avatars.githubusercontent.com/u/430872?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/benjick",
      "html_url": "https://github.com/benjick",
      "followers_url": "https://api.github.com/users/benjick/followers",
      "following_url": "https://api.github.com/users/benjick/following{/other_user}",
      "gists_url": "https://api.github.com/users/benjick/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/benjick/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/benjick/subscriptions",
      "organizations_url": "https://api.github.com/users/benjick/orgs",
      "repos_url": "https://api.github.com/users/benjick/repos",
      "events_url": "https://api.github.com/users/benjick/events{/privacy}",
      "received_events_url": "https://api.github.com/users/benjick/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-12-09T20:25:26Z",
    "updated_at": "2021-12-09T20:25:26Z",
    "author_association": "NONE",
    "body": "@frangio @Amxx thanks, I will look into this!",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/990219694/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1156927911",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2563#issuecomment-1156927911",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2563",
    "id": 1156927911,
    "node_id": "IC_kwDOA9tCBs5E9VGn",
    "user": {
      "login": "0xhiro",
      "id": 90010840,
      "node_id": "MDQ6VXNlcjkwMDEwODQw",
      "avatar_url": "https://avatars.githubusercontent.com/u/90010840?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/0xhiro",
      "html_url": "https://github.com/0xhiro",
      "followers_url": "https://api.github.com/users/0xhiro/followers",
      "following_url": "https://api.github.com/users/0xhiro/following{/other_user}",
      "gists_url": "https://api.github.com/users/0xhiro/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/0xhiro/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/0xhiro/subscriptions",
      "organizations_url": "https://api.github.com/users/0xhiro/orgs",
      "repos_url": "https://api.github.com/users/0xhiro/repos",
      "events_url": "https://api.github.com/users/0xhiro/events{/privacy}",
      "received_events_url": "https://api.github.com/users/0xhiro/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-06-15T21:00:09Z",
    "updated_at": "2022-06-15T21:00:09Z",
    "author_association": "NONE",
    "body": "Wow! This was an issue i had for a while. This discussion was informative. thanks!",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1156927911/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1158083267",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2563#issuecomment-1158083267",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2563",
    "id": 1158083267,
    "node_id": "IC_kwDOA9tCBs5FBvLD",
    "user": {
      "login": "0xhiro",
      "id": 90010840,
      "node_id": "MDQ6VXNlcjkwMDEwODQw",
      "avatar_url": "https://avatars.githubusercontent.com/u/90010840?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/0xhiro",
      "html_url": "https://github.com/0xhiro",
      "followers_url": "https://api.github.com/users/0xhiro/followers",
      "following_url": "https://api.github.com/users/0xhiro/following{/other_user}",
      "gists_url": "https://api.github.com/users/0xhiro/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/0xhiro/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/0xhiro/subscriptions",
      "organizations_url": "https://api.github.com/users/0xhiro/orgs",
      "repos_url": "https://api.github.com/users/0xhiro/repos",
      "events_url": "https://api.github.com/users/0xhiro/events{/privacy}",
      "received_events_url": "https://api.github.com/users/0xhiro/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-06-16T20:05:54Z",
    "updated_at": "2022-06-16T20:05:54Z",
    "author_association": "NONE",
    "body": "> > For example, can you write here the lines of code that someone must now write to fetch the tokens of an Owner?\r\n> \r\n> I wrote this function to list the tokens of an owner using Ethers.js and Hardhat:\r\n> \r\n> ```js\r\n> async function listTokensOfOwner({ token: tokenAddress, account }) {\r\n>   const token = await ethers.getContractAt(ERC721.abi, tokenAddress, ethers.provider);\r\n> \r\n>   console.error(await token.name(), 'tokens owned by', account);\r\n> \r\n>   const sentLogs = await token.queryFilter(\r\n>     token.filters.Transfer(account, null),\r\n>   );\r\n>   const receivedLogs = await token.queryFilter(\r\n>     token.filters.Transfer(null, account),\r\n>   );\r\n> \r\n>   const logs = sentLogs.concat(receivedLogs)\r\n>     .sort(\r\n>       (a, b) =>\r\n>         a.blockNumber - b.blockNumber ||\r\n>         a.transactionIndex - b.TransactionIndex,\r\n>     );\r\n> \r\n>   const owned = new Set();\r\n> \r\n>   for (const log of logs) {\r\n>     const { from, to, tokenId } = log.args;\r\n>     \r\n>     if (addressEqual(to, account)) {\r\n>       owned.add(tokenId.toString());\r\n>     } else if (addressEqual(from, account)) {\r\n>       owned.delete(tokenId.toString());\r\n>     }\r\n>   }\r\n> \r\n>   console.log([...owned].join('\\n'));\r\n> };\r\n> ```\r\n> \r\n> ![console output](https://user-images.githubusercontent.com/481465/110213055-29122980-7e7d-11eb-87b2-87e4338ea206.png)\r\n> \r\n> The code is in [frangio/erc721-list](https://github.com/frangio/erc721-list).\r\n\r\nHow efficient is this? Is there a more efficient way?",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1158083267/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1241440506",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2563#issuecomment-1241440506",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2563",
    "id": 1241440506,
    "node_id": "IC_kwDOA9tCBs5J_uD6",
    "user": {
      "login": "moscarelli",
      "id": 39997204,
      "node_id": "MDQ6VXNlcjM5OTk3MjA0",
      "avatar_url": "https://avatars.githubusercontent.com/u/39997204?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/moscarelli",
      "html_url": "https://github.com/moscarelli",
      "followers_url": "https://api.github.com/users/moscarelli/followers",
      "following_url": "https://api.github.com/users/moscarelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/moscarelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/moscarelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/moscarelli/subscriptions",
      "organizations_url": "https://api.github.com/users/moscarelli/orgs",
      "repos_url": "https://api.github.com/users/moscarelli/repos",
      "events_url": "https://api.github.com/users/moscarelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/moscarelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-09-09T02:56:23Z",
    "updated_at": "2022-09-09T02:57:03Z",
    "author_association": "NONE",
    "body": "Well as @charlesmarino  mentioned, this change made impossible (or at least very hard) to follow simple examples that already exists in the web. They all use tokenIDForOwnerByIndex and if you try follow the implementation on  the ethereum site (https://ethereum.org/en/developers/tutorials/how-to-write-and-deploy-an-nft/ ) for contract example and you try inherit ERC721Enumerable several issues start showup.  Any sugestion on how use ERC721Enumerable without get errors like \r\n\r\nDeclarationError: Undeclared identifier.\r\n  --> contracts/nftNews.sol:25:9:\r\n   |\r\n25 |         _setTokenURI(newItemId, tokenURI);\r\n   |         ^^^^^^^^^^^^\r\n\r\n\r\nError HH600: Compilation failed\r\n\r\nor \r\n\r\nDerived contract must override function \"_beforeTokenTransfer\". Two or more base classes define function with same name and parameter types.\r\nDerived contract must override function \"_burn\". Two or more base classes define function with same name and parameter types.\r\nDerived contract must override function \"supportsInterface\". Two or more base classes define function with same name and parameter types.\r\nDerived contract must override function \"tokenURI\". Two or more base classes define function with same name and parameter types.\r\n\r\nif I remove any of the itens from the extension I ge errors if I add I get other type of erros. \r\n\r\nIf anyone can clarify I would apreciate.\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1241440506/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1241682045",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2563#issuecomment-1241682045",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2563",
    "id": 1241682045,
    "node_id": "IC_kwDOA9tCBs5KApB9",
    "user": {
      "login": "Amxx",
      "id": 2432299,
      "node_id": "MDQ6VXNlcjI0MzIyOTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2432299?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Amxx",
      "html_url": "https://github.com/Amxx",
      "followers_url": "https://api.github.com/users/Amxx/followers",
      "following_url": "https://api.github.com/users/Amxx/following{/other_user}",
      "gists_url": "https://api.github.com/users/Amxx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Amxx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Amxx/subscriptions",
      "organizations_url": "https://api.github.com/users/Amxx/orgs",
      "repos_url": "https://api.github.com/users/Amxx/repos",
      "events_url": "https://api.github.com/users/Amxx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Amxx/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-09-09T08:41:27Z",
    "updated_at": "2022-09-09T08:41:27Z",
    "author_association": "COLLABORATOR",
    "body": "@moscarelli As we said previously, using Enumerability is generally a bad idea. Tutorial use it because its easy ... but unfortunatelly the easy solutions are often not the right ones.\r\n\r\nRegardless, if you really want to deploy an enumerable ERC721 instance, the [wizard](https://wizard.openzeppelin.com/#erc721) will show you how to.\r\n\r\nI would also argue that it would be a good idea for you to learn about function override and inheritance before pushing any code to production.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1241682045/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1241903802",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2563#issuecomment-1241903802",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2563",
    "id": 1241903802,
    "node_id": "IC_kwDOA9tCBs5KBfK6",
    "user": {
      "login": "moscarelli",
      "id": 39997204,
      "node_id": "MDQ6VXNlcjM5OTk3MjA0",
      "avatar_url": "https://avatars.githubusercontent.com/u/39997204?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/moscarelli",
      "html_url": "https://github.com/moscarelli",
      "followers_url": "https://api.github.com/users/moscarelli/followers",
      "following_url": "https://api.github.com/users/moscarelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/moscarelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/moscarelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/moscarelli/subscriptions",
      "organizations_url": "https://api.github.com/users/moscarelli/orgs",
      "repos_url": "https://api.github.com/users/moscarelli/repos",
      "events_url": "https://api.github.com/users/moscarelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/moscarelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-09-09T12:14:05Z",
    "updated_at": "2022-09-09T13:32:13Z",
    "author_association": "NONE",
    "body": "Hello and Thanks :) \r\n    I understand override and inheritance, is just very frustrating to follow a tutorial to learn something, but the tutorial is no longer valid  :/ .  I also understand the necessity of not wasting gas on stuff is not needed, but as a tutorial and as a test for people that are trying to learn this stuff facing this kind of issue right at the beginning might be complicated :D \r\n\r\n In the end, I came across https://wizard.openzeppelin.com/  by myself.\r\n\r\n   So, to be able to use the contract example on Ethereum tutorials and have access to the method tokenOfOwnerByIndex we also need to import ERC721URIStorage.sol.sol, otherwise, we get the error of missing _setTokenURI method.\r\n\r\nBut for the sake of the ones that get to this conversation, knowing how much time they might take for a simple answer, I will let the base implementation I'm using with the tutorials. \r\n\r\n```\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@openzeppelin/contracts/utils/Counters.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\n\r\n\r\ncontract MyNFT is ERC721URIStorage, Ownable, ERC721Enumerable {\r\n    using Counters for Counters.Counter;\r\n    Counters.Counter private _tokenIds;\r\n\r\n    constructor() ERC721(\"MyNFT \", \"MNFT\") {}\r\n\r\n    function mintNFT(address recipient, string memory tokenURI)\r\n        public onlyOwner\r\n        returns (uint256)\r\n    {\r\n        _tokenIds.increment();\r\n\r\n        uint256 newItemId = _tokenIds.current();\r\n        _mint(recipient, newItemId);\r\n        _setTokenURI(newItemId, tokenURI);\r\n\r\n        return newItemId;\r\n    }   \r\n    function _beforeTokenTransfer(address from, address to, uint256 tokenId)\r\n        internal\r\n        override(ERC721, ERC721Enumerable)\r\n    {\r\n        super._beforeTokenTransfer(from, to, tokenId);\r\n    }\r\n\r\n    function _burn(uint256 tokenId) internal override(ERC721, ERC721URIStorage) {\r\n        super._burn(tokenId);\r\n    }\r\n\r\n    function tokenURI(uint256 tokenId)\r\n        public\r\n        View\r\n        override(ERC721, ERC721URIStorage)\r\n        returns (string memory)\r\n    {\r\n        return super.tokenURI(tokenId);\r\n    }\r\n\r\n    function supportsInterface(bytes4 interfaceId)\r\n        public\r\n        View\r\n        override(ERC721, ERC721Enumerable)\r\n        returns (bool)\r\n    {\r\n        return super.supportsInterface(interfaceId);\r\n    }\r\n}\r\n```\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1241903802/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1241988094",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2563#issuecomment-1241988094",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2563",
    "id": 1241988094,
    "node_id": "IC_kwDOA9tCBs5KBzv-",
    "user": {
      "login": "Amxx",
      "id": 2432299,
      "node_id": "MDQ6VXNlcjI0MzIyOTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2432299?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Amxx",
      "html_url": "https://github.com/Amxx",
      "followers_url": "https://api.github.com/users/Amxx/followers",
      "following_url": "https://api.github.com/users/Amxx/following{/other_user}",
      "gists_url": "https://api.github.com/users/Amxx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Amxx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Amxx/subscriptions",
      "organizations_url": "https://api.github.com/users/Amxx/orgs",
      "repos_url": "https://api.github.com/users/Amxx/repos",
      "events_url": "https://api.github.com/users/Amxx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Amxx/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-09-09T13:39:02Z",
    "updated_at": "2022-09-09T13:39:02Z",
    "author_association": "COLLABORATOR",
    "body": "If you \"just\" want enumerability, you don't need to include anything but ERC721 & ERC721Enumerable.\r\n\r\nThis will compile:\r\n```\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.4;\r\n\r\nimport \"[@openzeppelin/contracts/token/ERC721/ERC721.sol](https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v4.7.3/contracts/token/ERC721/ERC721.sol)\";\r\nimport \"[@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol](https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v4.7.3/contracts/token/ERC721/extensions/ERC721Enumerable.sol)\";\r\n\r\ncontract MyToken is ERC721, ERC721Enumerable {\r\n    constructor() ERC721(\"MyToken\", \"MTK\") {}\r\n\r\n    // The following functions are overrides required by Solidity.\r\n\r\n    function _beforeTokenTransfer(address from, address to, uint256 tokenId)\r\n        internal\r\n        override(ERC721, ERC721Enumerable)\r\n    {\r\n        super._beforeTokenTransfer(from, to, tokenId);\r\n    }\r\n\r\n    function supportsInterface(bytes4 interfaceId)\r\n        public\r\n        view\r\n        override(ERC721, ERC721Enumerable)\r\n        returns (bool)\r\n    {\r\n        return super.supportsInterface(interfaceId);\r\n    }\r\n}\r\n```\r\n\r\nIf, like in your code example, you also want URIStorage & mintable with incremental Ids, you can check that two boxes and you'll get \r\n```\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.4;\r\n\r\nimport \"[@openzeppelin/contracts/token/ERC721/ERC721.sol](https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v4.7.3/contracts/token/ERC721/ERC721.sol)\";\r\nimport \"[@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol](https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v4.7.3/contracts/token/ERC721/extensions/ERC721Enumerable.sol)\";\r\nimport \"[@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol](https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v4.7.3/contracts/token/ERC721/extensions/ERC721URIStorage.sol)\";\r\nimport \"[@openzeppelin/contracts/access/Ownable.sol](https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v4.7.3/contracts/access/Ownable.sol)\";\r\nimport \"[@openzeppelin/contracts/utils/Counters.sol](https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v4.7.3/contracts/utils/Counters.sol)\";\r\n\r\ncontract MyToken is ERC721, ERC721Enumerable, ERC721URIStorage, Ownable {\r\n    using Counters for Counters.Counter;\r\n\r\n    Counters.Counter private _tokenIdCounter;\r\n\r\n    constructor() ERC721(\"MyToken\", \"MTK\") {}\r\n\r\n    function safeMint(address to, string memory uri) public onlyOwner {\r\n        uint256 tokenId = _tokenIdCounter.current();\r\n        _tokenIdCounter.increment();\r\n        _safeMint(to, tokenId);\r\n        _setTokenURI(tokenId, uri);\r\n    }\r\n\r\n    // The following functions are overrides required by Solidity.\r\n\r\n    function _beforeTokenTransfer(address from, address to, uint256 tokenId)\r\n        internal\r\n        override(ERC721, ERC721Enumerable)\r\n    {\r\n        super._beforeTokenTransfer(from, to, tokenId);\r\n    }\r\n\r\n    function _burn(uint256 tokenId) internal override(ERC721, ERC721URIStorage) {\r\n        super._burn(tokenId);\r\n    }\r\n\r\n    function tokenURI(uint256 tokenId)\r\n        public\r\n        view\r\n        override(ERC721, ERC721URIStorage)\r\n        returns (string memory)\r\n    {\r\n        return super.tokenURI(tokenId);\r\n    }\r\n\r\n    function supportsInterface(bytes4 interfaceId)\r\n        public\r\n        view\r\n        override(ERC721, ERC721Enumerable)\r\n        returns (bool)\r\n    {\r\n        return super.supportsInterface(interfaceId);\r\n    }\r\n}\r\n```\r\n\r\nAgain, the wizard should have you covered for most \"simple\" needs",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1241988094/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1241989248",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2563#issuecomment-1241989248",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2563",
    "id": 1241989248,
    "node_id": "IC_kwDOA9tCBs5KB0CA",
    "user": {
      "login": "Amxx",
      "id": 2432299,
      "node_id": "MDQ6VXNlcjI0MzIyOTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2432299?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Amxx",
      "html_url": "https://github.com/Amxx",
      "followers_url": "https://api.github.com/users/Amxx/followers",
      "following_url": "https://api.github.com/users/Amxx/following{/other_user}",
      "gists_url": "https://api.github.com/users/Amxx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Amxx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Amxx/subscriptions",
      "organizations_url": "https://api.github.com/users/Amxx/orgs",
      "repos_url": "https://api.github.com/users/Amxx/repos",
      "events_url": "https://api.github.com/users/Amxx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Amxx/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-09-09T13:40:13Z",
    "updated_at": "2022-09-09T13:40:13Z",
    "author_association": "COLLABORATOR",
    "body": "> is just very frustrating to follow a tutorial to learn something, but the tutorial is no longer valid\r\n\r\nIs that tutorial on an OpenZeppelin website? If so, we can update it! Otherwize, there is unfortunately not much we can do. We try to do as few breaking changes as we can, but at some point they do have to happen.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1241989248/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1242030439",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2563#issuecomment-1242030439",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2563",
    "id": 1242030439,
    "node_id": "IC_kwDOA9tCBs5KB-Fn",
    "user": {
      "login": "moscarelli",
      "id": 39997204,
      "node_id": "MDQ6VXNlcjM5OTk3MjA0",
      "avatar_url": "https://avatars.githubusercontent.com/u/39997204?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/moscarelli",
      "html_url": "https://github.com/moscarelli",
      "followers_url": "https://api.github.com/users/moscarelli/followers",
      "following_url": "https://api.github.com/users/moscarelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/moscarelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/moscarelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/moscarelli/subscriptions",
      "organizations_url": "https://api.github.com/users/moscarelli/orgs",
      "repos_url": "https://api.github.com/users/moscarelli/repos",
      "events_url": "https://api.github.com/users/moscarelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/moscarelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-09-09T14:16:11Z",
    "updated_at": "2022-09-09T14:20:18Z",
    "author_association": "NONE",
    "body": "Hi.\r\n No, not just the enumerability, I was following the tutorial from ethereum site (https://ethereum.org/en/developers/tutorials/how-to-write-and-deploy-an-nft/)   so for that example works I need all the extensions in the original code, and it works but when I was trying to list the tokens following other tutorials code it complained about the missing method, so add enumerability to the ethereum example generated all the issues I listed,  using the generation tool I was able to  use the example code alongise the enumerable, the code I posted is working.  :) . \r\n",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1242030439/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1422282740",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2563#issuecomment-1422282740",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2563",
    "id": 1422282740,
    "node_id": "IC_kwDOA9tCBs5Uxk_0",
    "user": {
      "login": "cryptoBela",
      "id": 111244297,
      "node_id": "U_kgDOBqF0CQ",
      "avatar_url": "https://avatars.githubusercontent.com/u/111244297?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cryptoBela",
      "html_url": "https://github.com/cryptoBela",
      "followers_url": "https://api.github.com/users/cryptoBela/followers",
      "following_url": "https://api.github.com/users/cryptoBela/following{/other_user}",
      "gists_url": "https://api.github.com/users/cryptoBela/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cryptoBela/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cryptoBela/subscriptions",
      "organizations_url": "https://api.github.com/users/cryptoBela/orgs",
      "repos_url": "https://api.github.com/users/cryptoBela/repos",
      "events_url": "https://api.github.com/users/cryptoBela/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cryptoBela/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-02-08T09:21:16Z",
    "updated_at": "2023-02-08T09:21:16Z",
    "author_association": "NONE",
    "body": "> > > For example, can you write here the lines of code that someone must now write to fetch the tokens of an Owner?\r\n> > \r\n> > \r\n> > I wrote this function to list the tokens of an owner using Ethers.js and Hardhat:\r\n> > ```js\r\n> > async function listTokensOfOwner({ token: tokenAddress, account }) {\r\n> >   const token = await ethers.getContractAt(ERC721.abi, tokenAddress, ethers.provider);\r\n> > \r\n> >   console.error(await token.name(), 'tokens owned by', account);\r\n> > \r\n> >   const sentLogs = await token.queryFilter(\r\n> >     token.filters.Transfer(account, null),\r\n> >   );\r\n> >   const receivedLogs = await token.queryFilter(\r\n> >     token.filters.Transfer(null, account),\r\n> >   );\r\n> > \r\n> >   const logs = sentLogs.concat(receivedLogs)\r\n> >     .sort(\r\n> >       (a, b) =>\r\n> >         a.blockNumber - b.blockNumber ||\r\n> >         a.transactionIndex - b.TransactionIndex,\r\n> >     );\r\n> > \r\n> >   const owned = new Set();\r\n> > \r\n> >   for (const log of logs) {\r\n> >     const { from, to, tokenId } = log.args;\r\n> >     \r\n> >     if (addressEqual(to, account)) {\r\n> >       owned.add(tokenId.toString());\r\n> >     } else if (addressEqual(from, account)) {\r\n> >       owned.delete(tokenId.toString());\r\n> >     }\r\n> >   }\r\n> > \r\n> >   console.log([...owned].join('\\n'));\r\n> > };\r\n> > ```\r\n> > \r\n> > \r\n> >     \r\n> >       \r\n> >     \r\n> > \r\n> >       \r\n> >     \r\n> > \r\n> >     \r\n> >   \r\n> > ![console output](https://user-images.githubusercontent.com/481465/110213055-29122980-7e7d-11eb-87b2-87e4338ea206.png)\r\n> > The code is in [frangio/erc721-list](https://github.com/frangio/erc721-list).\r\n> \r\n> How efficient is this? Is there a more efficient way?\r\n\r\nHow does this works with web3 ?",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1422282740/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
