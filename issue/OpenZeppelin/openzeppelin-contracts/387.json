{
  "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/387",
  "repository_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts",
  "labels_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/387/labels{/name}",
  "comments_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/387/comments",
  "events_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/387/events",
  "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/387",
  "id": 251453232,
  "node_id": "MDU6SXNzdWUyNTE0NTMyMzI=",
  "number": 387,
  "title": "Add a deadline for claiming refunds in RefundVault",
  "user": {
    "login": "dmx974",
    "id": 2308123,
    "node_id": "MDQ6VXNlcjIzMDgxMjM=",
    "avatar_url": "https://avatars.githubusercontent.com/u/2308123?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/dmx974",
    "html_url": "https://github.com/dmx974",
    "followers_url": "https://api.github.com/users/dmx974/followers",
    "following_url": "https://api.github.com/users/dmx974/following{/other_user}",
    "gists_url": "https://api.github.com/users/dmx974/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/dmx974/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/dmx974/subscriptions",
    "organizations_url": "https://api.github.com/users/dmx974/orgs",
    "repos_url": "https://api.github.com/users/dmx974/repos",
    "events_url": "https://api.github.com/users/dmx974/events{/privacy}",
    "received_events_url": "https://api.github.com/users/dmx974/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 9,
  "created_at": "2017-08-19T22:25:07Z",
  "updated_at": "2019-03-08T16:39:11Z",
  "closed_at": "2019-03-08T16:39:11Z",
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "Unclaimed funds will be locked in the refund vault (and lost forever) if some contributors never ask for a refund.\r\n\r\nPossible solution: contributors should have a deadline (let's say 365 days) to ask for a refund, then the owner should be able to release the remaining unclaimed funds to the wallet.\r\n\r\nI don't have time to test or make a pull request, but basically it should looks like this:\r\n\r\n```js\r\ncontract RefundVault is Ownable {\r\n  using SafeMath for uint256;\r\n\r\n  enum State { Active, Refunding, Closed }\r\n\r\n  ...\r\n\r\n  /**\r\n    * Contributor have 365 days to ask for a refund, then the\r\n    * the remaining unclaimed funds can be released by the owner \r\n    */\r\n  uint256 public refundDeadline; // refund deadline for contributors\r\n \r\n  ...\r\n\r\n  /*\r\n   * when enableRefunds() is called, set the deadline from now\r\n   */\r\n  function enableRefunds() onlyOwner public {\r\n    require(state == State.Active);\r\n    refundDeadline = now + 365 days;\r\n    state = State.Refunding;\r\n    RefundsEnabled();\r\n  }\r\n\r\n  ...\r\n  ...\r\n\r\n  function closeVault() internal {\r\n    state = State.Closed;\r\n    wallet.transfer(this.balance);\r\n    Closed();\r\n  }\r\n\r\n  function close() onlyOwner public {\r\n    require(state == State.Active);\r\n    closeVault();\r\n  }\r\n\r\n  /*\r\n   * Release and transfer the remaining unclaimed funds when deadline is over\r\n   */\r\n  function releaseUnclaimedFunds() onlyOwner public {\r\n    require(state == State.Refunding && now >= refundDeadline);\r\n    closeVault();\r\n  }\r\n  ...\r\n\r\n}\r\n```",
  "closed_by": {
    "login": "nventuro",
    "id": 2530770,
    "node_id": "MDQ6VXNlcjI1MzA3NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/2530770?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nventuro",
    "html_url": "https://github.com/nventuro",
    "followers_url": "https://api.github.com/users/nventuro/followers",
    "following_url": "https://api.github.com/users/nventuro/following{/other_user}",
    "gists_url": "https://api.github.com/users/nventuro/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nventuro/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nventuro/subscriptions",
    "organizations_url": "https://api.github.com/users/nventuro/orgs",
    "repos_url": "https://api.github.com/users/nventuro/repos",
    "events_url": "https://api.github.com/users/nventuro/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nventuro/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/387/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/387/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/323775393",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/387#issuecomment-323775393",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/387",
    "id": 323775393,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMyMzc3NTM5Mw==",
    "user": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-08-21T15:29:24Z",
    "updated_at": "2017-08-21T15:29:24Z",
    "author_association": "MEMBER",
    "body": "Hi @dmx374! Thanks for reporting.\r\n\r\nThis has been brought up before in #310. I don't agree that the funds are locked or lost forever, because anyone can trigger an investor's refund. It's possible to write a script that will get the investors' addresses from `Crowdsale` events and empty the `RefundVault` completely. I find this behavior to be more investor-friendly than the proposed alternative, would you agree?",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/323775393/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/324753123",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/387#issuecomment-324753123",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/387",
    "id": 324753123,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMyNDc1MzEyMw==",
    "user": {
      "login": "dmx974",
      "id": 2308123,
      "node_id": "MDQ6VXNlcjIzMDgxMjM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2308123?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dmx974",
      "html_url": "https://github.com/dmx974",
      "followers_url": "https://api.github.com/users/dmx974/followers",
      "following_url": "https://api.github.com/users/dmx974/following{/other_user}",
      "gists_url": "https://api.github.com/users/dmx974/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dmx974/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dmx974/subscriptions",
      "organizations_url": "https://api.github.com/users/dmx974/orgs",
      "repos_url": "https://api.github.com/users/dmx974/repos",
      "events_url": "https://api.github.com/users/dmx974/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dmx974/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-08-24T20:47:57Z",
    "updated_at": "2017-09-07T09:51:27Z",
    "author_association": "CONTRIBUTOR",
    "body": "Hmmm, I let me check if we can do something better. I don't really like the refund method mechanism you implemented. People should not be able to refund on the behalf of others.\r\nIn general, I think people should control they own money, so It's best to avoid any method that let someone buy, or sell, or refund on the behalf of others.\r\n\r\nI think the only reason you did this that way is that a guy (or escrow, or a bot/script) can take care of refunding everyone for convenience?\r\n\r\nAnother solution would be to implement the whole thing like this, so people have absolute control over their own funds:\r\n\r\n```js\r\n\r\n/* refund me, and only me */\r\nfunction refund() public {\r\n    require(state == State.Refunding);\r\n    require(deposited[msg.sender] > 0);\r\n\t\t\r\n    uint256 weiAmount = deposited[msg.sender];\r\n\r\n    deposited[msg.sender] = 0;\r\n    msg.sender.transfer(weiAmount);\r\n\r\n    LogRefunded(msg.sender, weiAmount);\r\n}\r\n\r\n/* exit the refund vault and immediately release my funds to the project */\r\n/* OR: I don't want to be refunded, keep my money, I love your project, my 2 cents .. */\r\nfunction release() public {\r\n    require(state != State.Closed);\r\n    require(deposited[msg.sender] > 0);\r\n\t\t\r\n    uint256 weiAmount = deposited[msg.sender];\r\n\r\n    deposited[msg.sender] = 0;\r\n    wallet.transfer(weiAmount);\r\n\r\n    LogReleased(msg.sender, weiAmount);\r\n}\r\n\r\n```\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/324753123/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/324772793",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/387#issuecomment-324772793",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/387",
    "id": 324772793,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMyNDc3Mjc5Mw==",
    "user": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-08-24T22:18:25Z",
    "updated_at": "2017-08-24T22:18:25Z",
    "author_association": "MEMBER",
    "body": "> In general, I think people should control they own money, so It's best to avoid any method that let someone buy, or sell, or refund on the behalf of others.\r\n\r\nCan you explain this further? Why is it best to avoid such things? Because of security, legal reasons, or something else? We implemented refunds in this way because we saw no problem with it.\r\n\r\nI think the `release` functionality you proposed is quite interesting, but I don't see how it's a solution or relates to the problem of stuck funds.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/324772793/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/327751483",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/387#issuecomment-327751483",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/387",
    "id": 327751483,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMyNzc1MTQ4Mw==",
    "user": {
      "login": "dmx974",
      "id": 2308123,
      "node_id": "MDQ6VXNlcjIzMDgxMjM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2308123?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dmx974",
      "html_url": "https://github.com/dmx974",
      "followers_url": "https://api.github.com/users/dmx974/followers",
      "following_url": "https://api.github.com/users/dmx974/following{/other_user}",
      "gists_url": "https://api.github.com/users/dmx974/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dmx974/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dmx974/subscriptions",
      "organizations_url": "https://api.github.com/users/dmx974/orgs",
      "repos_url": "https://api.github.com/users/dmx974/repos",
      "events_url": "https://api.github.com/users/dmx974/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dmx974/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-09-07T09:50:29Z",
    "updated_at": "2017-09-07T11:11:26Z",
    "author_association": "CONTRIBUTOR",
    "body": "I understand your point of view, but it might cause multiple problems (legal, and technical).\r\nIt's like someone can get access to your bank account and transactions, and decide to refund something on your behalf without your consent.\r\n\r\nWorst: imagine a guy buy tokens from a crowdsale. Then, a few days later he lost his private key and had to create another wallet. This case is rare but with your public \"auto-refund\" mechanism, his funds will be lost forever in his old wallet. I think the best compromise (and the more elegant solution) is to just add these 2 methods to your implementation so people can get maximum control over their funds.\r\n\r\n```js\r\n\r\n/* refund me (and only me) and send the funds to the provided address */\r\nfunction refundMeTo(address beneficiary) public {\r\n    require(state == State.Refunding);\r\n    require(beneficiary != address(0));\r\n    require(deposited[msg.sender] > 0);\r\n\t\t\r\n    uint256 weiAmount = deposited[msg.sender];\r\n\r\n    deposited[msg.sender] = 0;\r\n    beneficiary.transfer(weiAmount);\r\n\r\n    LogRefunded(beneficiary, weiAmount);\r\n}\r\n\r\n/* exit the refund vault and immediately release my funds to the project */\r\n/* OR: I don't want to be refunded, keep my money, I love your project, my 2 cents .. */\r\nfunction release() public {\r\n    require(state != State.Closed);\r\n    require(deposited[msg.sender] > 0);\r\n\t\t\r\n    uint256 weiAmount = deposited[msg.sender];\r\n\r\n    deposited[msg.sender] = 0;\r\n    wallet.transfer(weiAmount);\r\n\r\n    LogReleased(msg.sender, weiAmount);\r\n}\r\n\r\n```\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/327751483/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/328369425",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/387#issuecomment-328369425",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/387",
    "id": 328369425,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMyODM2OTQyNQ==",
    "user": {
      "login": "SylTi",
      "id": 1770876,
      "node_id": "MDQ6VXNlcjE3NzA4NzY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1770876?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/SylTi",
      "html_url": "https://github.com/SylTi",
      "followers_url": "https://api.github.com/users/SylTi/followers",
      "following_url": "https://api.github.com/users/SylTi/following{/other_user}",
      "gists_url": "https://api.github.com/users/SylTi/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/SylTi/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SylTi/subscriptions",
      "organizations_url": "https://api.github.com/users/SylTi/orgs",
      "repos_url": "https://api.github.com/users/SylTi/repos",
      "events_url": "https://api.github.com/users/SylTi/events{/privacy}",
      "received_events_url": "https://api.github.com/users/SylTi/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-09-10T20:25:27Z",
    "updated_at": "2017-09-10T20:25:27Z",
    "author_association": "CONTRIBUTOR",
    "body": "You could also do something like this:\r\nif msg.sender == owner => allow refund to any address (as existing)\r\nif investor == 0x0 => send balance of msg.sender to sender\r\nif investor != 0x0 => send balance of msg.sender to investor address ",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/328369425/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/330996961",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/387#issuecomment-330996961",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/387",
    "id": 330996961,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzMDk5Njk2MQ==",
    "user": {
      "login": "MaxDinman",
      "id": 17766745,
      "node_id": "MDQ6VXNlcjE3NzY2NzQ1",
      "avatar_url": "https://avatars.githubusercontent.com/u/17766745?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MaxDinman",
      "html_url": "https://github.com/MaxDinman",
      "followers_url": "https://api.github.com/users/MaxDinman/followers",
      "following_url": "https://api.github.com/users/MaxDinman/following{/other_user}",
      "gists_url": "https://api.github.com/users/MaxDinman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MaxDinman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MaxDinman/subscriptions",
      "organizations_url": "https://api.github.com/users/MaxDinman/orgs",
      "repos_url": "https://api.github.com/users/MaxDinman/repos",
      "events_url": "https://api.github.com/users/MaxDinman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MaxDinman/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-09-20T22:18:46Z",
    "updated_at": "2017-09-20T22:18:46Z",
    "author_association": "NONE",
    "body": "@dmx374 Let's imagine an investor lost his private key, how come the refundMeTo function could help in this case? He won't be able to call from his wallet.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/330996961/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/331002662",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/387#issuecomment-331002662",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/387",
    "id": 331002662,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzMTAwMjY2Mg==",
    "user": {
      "login": "SylTi",
      "id": 1770876,
      "node_id": "MDQ6VXNlcjE3NzA4NzY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1770876?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/SylTi",
      "html_url": "https://github.com/SylTi",
      "followers_url": "https://api.github.com/users/SylTi/followers",
      "following_url": "https://api.github.com/users/SylTi/following{/other_user}",
      "gists_url": "https://api.github.com/users/SylTi/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/SylTi/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SylTi/subscriptions",
      "organizations_url": "https://api.github.com/users/SylTi/orgs",
      "repos_url": "https://api.github.com/users/SylTi/repos",
      "events_url": "https://api.github.com/users/SylTi/events{/privacy}",
      "received_events_url": "https://api.github.com/users/SylTi/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-09-20T22:49:46Z",
    "updated_at": "2017-09-20T22:51:07Z",
    "author_association": "CONTRIBUTOR",
    "body": "@MaxDinman it doesn't.\r\n how does he prove he owns that key, in the first place? ",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/331002662/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/388255900",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/387#issuecomment-388255900",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/387",
    "id": 388255900,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4ODI1NTkwMA==",
    "user": {
      "login": "come-maiz",
      "id": 617831,
      "node_id": "MDQ6VXNlcjYxNzgzMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/617831?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/come-maiz",
      "html_url": "https://github.com/come-maiz",
      "followers_url": "https://api.github.com/users/come-maiz/followers",
      "following_url": "https://api.github.com/users/come-maiz/following{/other_user}",
      "gists_url": "https://api.github.com/users/come-maiz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/come-maiz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/come-maiz/subscriptions",
      "organizations_url": "https://api.github.com/users/come-maiz/orgs",
      "repos_url": "https://api.github.com/users/come-maiz/repos",
      "events_url": "https://api.github.com/users/come-maiz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/come-maiz/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-11T04:23:35Z",
    "updated_at": "2018-05-11T04:23:35Z",
    "author_association": "CONTRIBUTOR",
    "body": "The good thing is that we can have both, the current implementation of the RefundVault and another that returns all remaining funds to the contract after a while. @dmx374 are you still interested in this? It would be nice to continue discussing it with a PR :)",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/388255900/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/470992940",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/387#issuecomment-470992940",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/387",
    "id": 470992940,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3MDk5Mjk0MA==",
    "user": {
      "login": "nventuro",
      "id": 2530770,
      "node_id": "MDQ6VXNlcjI1MzA3NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2530770?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nventuro",
      "html_url": "https://github.com/nventuro",
      "followers_url": "https://api.github.com/users/nventuro/followers",
      "following_url": "https://api.github.com/users/nventuro/following{/other_user}",
      "gists_url": "https://api.github.com/users/nventuro/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nventuro/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nventuro/subscriptions",
      "organizations_url": "https://api.github.com/users/nventuro/orgs",
      "repos_url": "https://api.github.com/users/nventuro/repos",
      "events_url": "https://api.github.com/users/nventuro/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nventuro/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-03-08T16:39:11Z",
    "updated_at": "2019-03-08T16:39:11Z",
    "author_association": "CONTRIBUTOR",
    "body": ">I understand your point of view, but it might cause multiple problems (legal, and technical). It's like someone can get access to your bank account and transactions, and decide to refund something on your behalf without your consent.\r\n\r\nWe do this all the time: my bank transfers money automatically to my credit card, ISP, etc. on a monthly basis, Amazon refunds me money if a seller cancels a purchase, Kickstarter does refunds if a goal is not met, etc. You're not giving random people access to your money, you're saying \"if this doesn't go through, I want my money back\".\r\n\r\n>Worst: imagine a guy buy tokens from a crowdsale. Then, a few days later he lost his private key and had to create another wallet. This case is rare but with your public \"auto-refund\" mechanism, his funds will be lost forever in his old wallet. \r\n\r\nIf you lose the private key, how could you possibly reclaim the money that was going to be sent to your old address?\r\n\r\nClosing due to inactivity.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/470992940/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
