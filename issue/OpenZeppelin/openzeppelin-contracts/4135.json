{
  "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4135",
  "repository_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts",
  "labels_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4135/labels{/name}",
  "comments_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4135/comments",
  "events_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4135/events",
  "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/4135",
  "id": 1639759164,
  "node_id": "I_kwDOA9tCBs5hvL08",
  "number": 4135,
  "title": "Letting know the users that the contract is using reentrancy guard and other hack proof modifiers",
  "user": {
    "login": "SteveHarrington0",
    "id": 107838189,
    "node_id": "U_kgDOBm167Q",
    "avatar_url": "https://avatars.githubusercontent.com/u/107838189?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/SteveHarrington0",
    "html_url": "https://github.com/SteveHarrington0",
    "followers_url": "https://api.github.com/users/SteveHarrington0/followers",
    "following_url": "https://api.github.com/users/SteveHarrington0/following{/other_user}",
    "gists_url": "https://api.github.com/users/SteveHarrington0/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/SteveHarrington0/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/SteveHarrington0/subscriptions",
    "organizations_url": "https://api.github.com/users/SteveHarrington0/orgs",
    "repos_url": "https://api.github.com/users/SteveHarrington0/repos",
    "events_url": "https://api.github.com/users/SteveHarrington0/events{/privacy}",
    "received_events_url": "https://api.github.com/users/SteveHarrington0/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 1,
  "created_at": "2023-03-24T17:09:44Z",
  "updated_at": "2023-03-29T04:10:53Z",
  "closed_at": null,
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "Many users interact with smartcontracts on a daily basis and very less people will checkout the source code of that particular project(i.e smartcontract). And without even knowing the consequences of the hacks that happens due to attacks like reentrancy they deposit assets to projects that are vulnerable.\r\n\r\nso a contract with the function of showing the users that this project have taken the hack proof measures will be a good feature.\r\nif a contract is not using reentrancy guard and it has to deal with money a user should know that the contract not using the hack proof measure and if the contract using the reentrancy guard we should let the users know that this contract is using the hack proof measures.\r\n\r\nwe can make it happen by xor ing the all functions in contracts like reentrancy and comparing it to the value of them with the possible output and will return the result.\r\n\r\n \r\n",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4135/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4135/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1487919012",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/4135#issuecomment-1487919012",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4135",
    "id": 1487919012,
    "node_id": "IC_kwDOA9tCBs5Yr9ek",
    "user": {
      "login": "ernestognw",
      "id": 33379285,
      "node_id": "MDQ6VXNlcjMzMzc5Mjg1",
      "avatar_url": "https://avatars.githubusercontent.com/u/33379285?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ernestognw",
      "html_url": "https://github.com/ernestognw",
      "followers_url": "https://api.github.com/users/ernestognw/followers",
      "following_url": "https://api.github.com/users/ernestognw/following{/other_user}",
      "gists_url": "https://api.github.com/users/ernestognw/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ernestognw/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ernestognw/subscriptions",
      "organizations_url": "https://api.github.com/users/ernestognw/orgs",
      "repos_url": "https://api.github.com/users/ernestognw/repos",
      "events_url": "https://api.github.com/users/ernestognw/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ernestognw/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-03-29T04:10:23Z",
    "updated_at": "2023-03-29T04:10:53Z",
    "author_association": "MEMBER",
    "body": "Hello @SteveHarrington0, I see your point, and although your concerns are reasonable, the way the contracts are composed may require intentional reentrancy patterns as in the PullPayment pattern [referenced in our blog](https://forum.openzeppelin.com/t/reentrancy-after-istanbul/1742), and it's also [referenced in the code](https://github.com/OpenZeppelin/openzeppelin-contracts/blob/7c5f6bc2c8743d83443fa46395d75f2f3f99054a/contracts/security/ReentrancyGuard.sol)\r\n\r\nUnfortunately (or fortunately), a contract can still be secure even if it doesn't implement a `nonReentrant` modifier. It also adds gas consumption if it's used without discretion, so we'd recommend avoiding its usage when it's not needed.\r\n\r\nDo you think there's something we can add to the docs?\r\n\r\n> we can make it happen by xor ing the all functions in contracts\r\n\r\nThis is similar to [ERC165](https://docs.openzeppelin.com/contracts/4.x/api/utils#ERC165), although it only considers the public interface, so modifiers wouldn't be considered, and neither would be a guarantee of security because it requires developer discretion.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1487919012/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
