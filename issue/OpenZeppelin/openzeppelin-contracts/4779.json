{
  "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4779",
  "repository_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts",
  "labels_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4779/labels{/name}",
  "comments_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4779/comments",
  "events_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4779/events",
  "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/4779",
  "id": 2025601962,
  "node_id": "I_kwDOA9tCBs54vDuq",
  "number": 4779,
  "title": "Add `signum` Function to `SignedMath`",
  "user": {
    "login": "pcaversaccio",
    "id": 25297591,
    "node_id": "MDQ6VXNlcjI1Mjk3NTkx",
    "avatar_url": "https://avatars.githubusercontent.com/u/25297591?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/pcaversaccio",
    "html_url": "https://github.com/pcaversaccio",
    "followers_url": "https://api.github.com/users/pcaversaccio/followers",
    "following_url": "https://api.github.com/users/pcaversaccio/following{/other_user}",
    "gists_url": "https://api.github.com/users/pcaversaccio/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/pcaversaccio/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/pcaversaccio/subscriptions",
    "organizations_url": "https://api.github.com/users/pcaversaccio/orgs",
    "repos_url": "https://api.github.com/users/pcaversaccio/repos",
    "events_url": "https://api.github.com/users/pcaversaccio/events{/privacy}",
    "received_events_url": "https://api.github.com/users/pcaversaccio/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 6,
  "created_at": "2023-12-05T08:33:01Z",
  "updated_at": "2023-12-13T16:45:30Z",
  "closed_at": null,
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "I was wondering, whether OZ should offer a proper `signum` (`sign` might be too confusing due to cryptographic functions) function that returns the indication (`-1`, `0`, or `1`) of the sign of a 32-byte signed integer. Thoughts?\r\n\r\n## Example Implementation\r\n\r\n```solidity\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.20;\r\n\r\nlibrary SignedMath {\r\n    /**\r\n     * @dev Returns the indication of the sign of a 32-byte signed integer.\r\n     * @notice The function returns `-1` if `x < 0`, `0` if `x == 0`, and `1` if `x > 0`.\r\n     * For more details on finding the sign of a signed integer, please refer to:\r\n     * https://graphics.stanford.edu/~seander/bithacks.html#CopyIntegerSign.\r\n     */\r\n    function signum(int256 a) internal pure returns (int256 b) {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            b := sub(sgt(a, 0), slt(a, 0))\r\n        }\r\n    }\r\n}\r\n```",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4779/reactions",
    "total_count": 1,
    "+1": 1,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4779/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1841103952",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/4779#issuecomment-1841103952",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4779",
    "id": 1841103952,
    "node_id": "IC_kwDOA9tCBs5tvQRQ",
    "user": {
      "login": "Tigersame",
      "id": 47494274,
      "node_id": "MDQ6VXNlcjQ3NDk0Mjc0",
      "avatar_url": "https://avatars.githubusercontent.com/u/47494274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Tigersame",
      "html_url": "https://github.com/Tigersame",
      "followers_url": "https://api.github.com/users/Tigersame/followers",
      "following_url": "https://api.github.com/users/Tigersame/following{/other_user}",
      "gists_url": "https://api.github.com/users/Tigersame/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Tigersame/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Tigersame/subscriptions",
      "organizations_url": "https://api.github.com/users/Tigersame/orgs",
      "repos_url": "https://api.github.com/users/Tigersame/repos",
      "events_url": "https://api.github.com/users/Tigersame/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Tigersame/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-12-05T16:07:36Z",
    "updated_at": "2023-12-05T16:07:36Z",
    "author_association": "NONE",
    "body": "nice\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1841103952/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1853666896",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/4779#issuecomment-1853666896",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4779",
    "id": 1853666896,
    "node_id": "IC_kwDOA9tCBs5ufLZQ",
    "user": {
      "login": "Amxx",
      "id": 2432299,
      "node_id": "MDQ6VXNlcjI0MzIyOTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2432299?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Amxx",
      "html_url": "https://github.com/Amxx",
      "followers_url": "https://api.github.com/users/Amxx/followers",
      "following_url": "https://api.github.com/users/Amxx/following{/other_user}",
      "gists_url": "https://api.github.com/users/Amxx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Amxx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Amxx/subscriptions",
      "organizations_url": "https://api.github.com/users/Amxx/orgs",
      "repos_url": "https://api.github.com/users/Amxx/repos",
      "events_url": "https://api.github.com/users/Amxx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Amxx/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-12-13T10:38:15Z",
    "updated_at": "2023-12-13T10:38:15Z",
    "author_association": "COLLABORATOR",
    "body": "@pcaversaccio What are the use cases for that function? Why return a `int256` and not an Enum ?",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1853666896/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1853682145",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/4779#issuecomment-1853682145",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4779",
    "id": 1853682145,
    "node_id": "IC_kwDOA9tCBs5ufPHh",
    "user": {
      "login": "pcaversaccio",
      "id": 25297591,
      "node_id": "MDQ6VXNlcjI1Mjk3NTkx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25297591?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pcaversaccio",
      "html_url": "https://github.com/pcaversaccio",
      "followers_url": "https://api.github.com/users/pcaversaccio/followers",
      "following_url": "https://api.github.com/users/pcaversaccio/following{/other_user}",
      "gists_url": "https://api.github.com/users/pcaversaccio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pcaversaccio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pcaversaccio/subscriptions",
      "organizations_url": "https://api.github.com/users/pcaversaccio/orgs",
      "repos_url": "https://api.github.com/users/pcaversaccio/repos",
      "events_url": "https://api.github.com/users/pcaversaccio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pcaversaccio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-12-13T10:48:22Z",
    "updated_at": "2023-12-13T10:48:22Z",
    "author_association": "CONTRIBUTOR",
    "body": "> @pcaversaccio What are the use cases for that function? Why return a `int256` and not an Enum ?\r\n\r\nI remember some Curve code that ensures that a partial derivative must be negative and thereafter multiplies it by the sign (`-1`) to make it again a positive number since they needed the `abs` value. About the `int256` vs. `Enum`: good question, first, I thought to follow the conventions from other programming languages / frameworks that use the `-1`, `0`, `1` (not all define `0` as a separate return) (see e.g. [`numpy.sign`](https://numpy.org/doc/stable/reference/generated/numpy.sign.html)). Second, an `Enum` is an `uint8` under the hood and if you're interested in the sign, you will work on the `int` domain usually. So it naturally translates into the same type domain.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1853682145/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1854237242",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/4779#issuecomment-1854237242",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4779",
    "id": 1854237242,
    "node_id": "IC_kwDOA9tCBs5uhWo6",
    "user": {
      "login": "Amxx",
      "id": 2432299,
      "node_id": "MDQ6VXNlcjI0MzIyOTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2432299?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Amxx",
      "html_url": "https://github.com/Amxx",
      "followers_url": "https://api.github.com/users/Amxx/followers",
      "following_url": "https://api.github.com/users/Amxx/following{/other_user}",
      "gists_url": "https://api.github.com/users/Amxx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Amxx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Amxx/subscriptions",
      "organizations_url": "https://api.github.com/users/Amxx/orgs",
      "repos_url": "https://api.github.com/users/Amxx/repos",
      "events_url": "https://api.github.com/users/Amxx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Amxx/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-12-13T16:13:44Z",
    "updated_at": "2023-12-13T16:13:44Z",
    "author_association": "COLLABORATOR",
    "body": "> I remember some Curve code that ensures that a partial derivative must be negative and thereafter multiplies it by the sign (-1) to make it again a positive number since they needed the abs value.\r\n\r\nI'm not sure `signum` really helps with that. You can check that the value is negative by directly comparing it 0 ... and if that passes you negate it.\r\n\r\nI don't have any stong opinion against that proposal, but I also want to make sure we don't add code would end up unused, and that would affect the discoverability of the other code.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1854237242/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1854242716",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/4779#issuecomment-1854242716",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4779",
    "id": 1854242716,
    "node_id": "IC_kwDOA9tCBs5uhX-c",
    "user": {
      "login": "Amxx",
      "id": 2432299,
      "node_id": "MDQ6VXNlcjI0MzIyOTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2432299?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Amxx",
      "html_url": "https://github.com/Amxx",
      "followers_url": "https://api.github.com/users/Amxx/followers",
      "following_url": "https://api.github.com/users/Amxx/following{/other_user}",
      "gists_url": "https://api.github.com/users/Amxx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Amxx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Amxx/subscriptions",
      "organizations_url": "https://api.github.com/users/Amxx/orgs",
      "repos_url": "https://api.github.com/users/Amxx/repos",
      "events_url": "https://api.github.com/users/Amxx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Amxx/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-12-13T16:16:53Z",
    "updated_at": "2023-12-13T16:16:53Z",
    "author_association": "COLLABORATOR",
    "body": "I can't find this helper in PRBMath. I would expect people to need that for the actual math that PRBMath addresses before they need that for the \"basic\" math we provide.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1854242716/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1854312599",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/4779#issuecomment-1854312599",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4779",
    "id": 1854312599,
    "node_id": "IC_kwDOA9tCBs5uhpCX",
    "user": {
      "login": "pcaversaccio",
      "id": 25297591,
      "node_id": "MDQ6VXNlcjI1Mjk3NTkx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25297591?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pcaversaccio",
      "html_url": "https://github.com/pcaversaccio",
      "followers_url": "https://api.github.com/users/pcaversaccio/followers",
      "following_url": "https://api.github.com/users/pcaversaccio/following{/other_user}",
      "gists_url": "https://api.github.com/users/pcaversaccio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pcaversaccio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pcaversaccio/subscriptions",
      "organizations_url": "https://api.github.com/users/pcaversaccio/orgs",
      "repos_url": "https://api.github.com/users/pcaversaccio/repos",
      "events_url": "https://api.github.com/users/pcaversaccio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pcaversaccio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-12-13T16:45:29Z",
    "updated_at": "2023-12-13T16:45:29Z",
    "author_association": "CONTRIBUTOR",
    "body": "> I can't find this helper in PRBMath. I would expect people to need that for the actual math that PRBMath addresses before they need that for the \"basic\" math we provide.\r\n\r\nThat makes perfect sense to me, that's why I opened an issue for discussion first (instead of directly doing a PR). Let's see if it's added to `PRBMath` first.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1854312599/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
