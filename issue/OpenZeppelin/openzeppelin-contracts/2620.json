{
  "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2620",
  "repository_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts",
  "labels_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2620/labels{/name}",
  "comments_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2620/comments",
  "events_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2620/events",
  "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2620",
  "id": 843492356,
  "node_id": "MDU6SXNzdWU4NDM0OTIzNTY=",
  "number": 2620,
  "title": "Deprecate ERC777 implementation",
  "user": {
    "login": "k06a",
    "id": 702124,
    "node_id": "MDQ6VXNlcjcwMjEyNA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/702124?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/k06a",
    "html_url": "https://github.com/k06a",
    "followers_url": "https://api.github.com/users/k06a/followers",
    "following_url": "https://api.github.com/users/k06a/following{/other_user}",
    "gists_url": "https://api.github.com/users/k06a/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/k06a/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/k06a/subscriptions",
    "organizations_url": "https://api.github.com/users/k06a/orgs",
    "repos_url": "https://api.github.com/users/k06a/repos",
    "events_url": "https://api.github.com/users/k06a/events{/privacy}",
    "received_events_url": "https://api.github.com/users/k06a/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/milestones/14",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/milestone/14",
    "labels_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/milestones/14/labels",
    "id": 8383880,
    "node_id": "MI_kwDOA9tCBs4Af-2I",
    "number": 14,
    "title": "4.9",
    "description": "",
    "creator": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "open_issues": 0,
    "closed_issues": 24,
    "state": "closed",
    "created_at": "2022-09-05T16:36:05Z",
    "updated_at": "2023-05-16T01:45:32Z",
    "due_on": null,
    "closed_at": "2023-05-16T01:45:32Z"
  },
  "comments": 54,
  "created_at": "2021-03-29T15:34:35Z",
  "updated_at": "2023-07-21T16:31:35Z",
  "closed_at": "2023-02-23T23:06:24Z",
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "**üßê Motivation**\r\n\r\nThere is an opinion that ERC777 is over-engineered and is a bad practice to follow. Moreover it introduces bad abstractions to rely on and requires very important checks to be implemented by every integrator.\r\n\r\nLet's switch to EIP2612 (Permit) to deprecate dangerous infinite approve behavior and make it mainstream ASAP: https://github.com/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC20/extensions/draft-ERC20Permit.sol\r\n\r\n**üìù Details**\r\n\r\nDo we need to collect list of issues? Starting here:\r\n\r\n1. Whole idea of avoiding spam tokens by having hook function is wrong. It is not possible to protect from spam tokens because developers of these tokens will always modify their tokens to allow spamming ‚Äì just ignore them.\r\n2. Token fallback concept is wrong because the callback is being called from token smart contract and there is no way to verify who was the original `msg.sender`. There are so many possible ways to abuse `ERC777Receiver`. The only way to solve it I see ‚Äì work with whitelisted tokens only ‚Äì DeFi deserves better approach. Imagine you have DEX and wanna deposit token and do custom action (swap):\r\n\r\n    ```solidity\r\n    function tokensReceived(\r\n        address operator,\r\n        address from,\r\n        address to,\r\n        uint256 amount,\r\n        bytes calldata userData,\r\n        bytes calldata operatorData\r\n    ) external override {\r\n        address token = msg.sender;\r\n        balances[token][operator] += amount;\r\n        _performSwap(operator, operatorData); // <- `operator` is not trustworthy, due `msg.sender` can be malicious smart contract\r\n    }\r\n\r\n    function _performSwap(address user, bytes memory data) internal {\r\n        // ...\r\n    }\r\n    ```",
  "closed_by": {
    "login": "frangio",
    "id": 481465,
    "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
    "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/frangio",
    "html_url": "https://github.com/frangio",
    "followers_url": "https://api.github.com/users/frangio/followers",
    "following_url": "https://api.github.com/users/frangio/following{/other_user}",
    "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
    "organizations_url": "https://api.github.com/users/frangio/orgs",
    "repos_url": "https://api.github.com/users/frangio/repos",
    "events_url": "https://api.github.com/users/frangio/events{/privacy}",
    "received_events_url": "https://api.github.com/users/frangio/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2620/reactions",
    "total_count": 15,
    "+1": 14,
    "-1": 1,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2620/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/809491989",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2620#issuecomment-809491989",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2620",
    "id": 809491989,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgwOTQ5MTk4OQ==",
    "user": {
      "login": "Amxx",
      "id": 2432299,
      "node_id": "MDQ6VXNlcjI0MzIyOTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2432299?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Amxx",
      "html_url": "https://github.com/Amxx",
      "followers_url": "https://api.github.com/users/Amxx/followers",
      "following_url": "https://api.github.com/users/Amxx/following{/other_user}",
      "gists_url": "https://api.github.com/users/Amxx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Amxx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Amxx/subscriptions",
      "organizations_url": "https://api.github.com/users/Amxx/orgs",
      "repos_url": "https://api.github.com/users/Amxx/repos",
      "events_url": "https://api.github.com/users/Amxx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Amxx/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-03-29T15:51:05Z",
    "updated_at": "2021-03-29T15:51:05Z",
    "author_association": "COLLABORATOR",
    "body": "Hello @k06a,\r\nAs a developper working with ERC777 during hackathon, I can only agree that this standard creates a lot of frustration ... and can result in very gas-extensive transactions.\r\n\r\nHowever, deprecating contract breaks backward compatibility. This is not something we would consider doing during a \"minor\" release. The latest major release was v4.0, less then a month ago. Thus, we wouldn't move with anything like that before a while.\r\n\r\nStill, I'd love to build a case for/against ERC777 (and other contract that might not be relevant). This will help us taking decision whenever we fell like moving to the next major version.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/809491989/reactions",
      "total_count": 6,
      "+1": 5,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 1,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/809623575",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2620#issuecomment-809623575",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2620",
    "id": 809623575,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgwOTYyMzU3NQ==",
    "user": {
      "login": "rstormsf",
      "id": 9360827,
      "node_id": "MDQ6VXNlcjkzNjA4Mjc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9360827?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rstormsf",
      "html_url": "https://github.com/rstormsf",
      "followers_url": "https://api.github.com/users/rstormsf/followers",
      "following_url": "https://api.github.com/users/rstormsf/following{/other_user}",
      "gists_url": "https://api.github.com/users/rstormsf/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rstormsf/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rstormsf/subscriptions",
      "organizations_url": "https://api.github.com/users/rstormsf/orgs",
      "repos_url": "https://api.github.com/users/rstormsf/repos",
      "events_url": "https://api.github.com/users/rstormsf/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rstormsf/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-03-29T18:47:28Z",
    "updated_at": "2021-03-29T18:49:08Z",
    "author_association": "CONTRIBUTOR",
    "body": "I definitely support this, so new solidity developers won't inherit this broken token design pattern. We have seen enough exploits/hacks with this approach. ",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/809623575/reactions",
      "total_count": 4,
      "+1": 4,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/810003460",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2620#issuecomment-810003460",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2620",
    "id": 810003460,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgxMDAwMzQ2MA==",
    "user": {
      "login": "k06a",
      "id": 702124,
      "node_id": "MDQ6VXNlcjcwMjEyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/702124?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/k06a",
      "html_url": "https://github.com/k06a",
      "followers_url": "https://api.github.com/users/k06a/followers",
      "following_url": "https://api.github.com/users/k06a/following{/other_user}",
      "gists_url": "https://api.github.com/users/k06a/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/k06a/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/k06a/subscriptions",
      "organizations_url": "https://api.github.com/users/k06a/orgs",
      "repos_url": "https://api.github.com/users/k06a/repos",
      "events_url": "https://api.github.com/users/k06a/events{/privacy}",
      "received_events_url": "https://api.github.com/users/k06a/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-03-30T07:57:04Z",
    "updated_at": "2021-03-30T07:57:22Z",
    "author_association": "CONTRIBUTOR",
    "body": "@Amxx @rstormsf thanks for your support, added 2 cases to the [OP](https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2620#issue-843492356).",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/810003460/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/817210609",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2620#issuecomment-817210609",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2620",
    "id": 817210609,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgxNzIxMDYwOQ==",
    "user": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-04-10T22:28:17Z",
    "updated_at": "2021-04-10T22:31:04Z",
    "author_association": "MEMBER",
    "body": "Just to clarify, we can't remove the contract until the next major release, but if there is consensus we can deprecate it, in the sense of announcing its deprecation, not recommending or promoting it anymore, possibly hiding it from the documentation site, etc.\r\n\r\nThank you all for raising this.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/817210609/reactions",
      "total_count": 3,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/841321231",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2620#issuecomment-841321231",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2620",
    "id": 841321231,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg0MTMyMTIzMQ==",
    "user": {
      "login": "phbdias",
      "id": 32040171,
      "node_id": "MDQ6VXNlcjMyMDQwMTcx",
      "avatar_url": "https://avatars.githubusercontent.com/u/32040171?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/phbdias",
      "html_url": "https://github.com/phbdias",
      "followers_url": "https://api.github.com/users/phbdias/followers",
      "following_url": "https://api.github.com/users/phbdias/following{/other_user}",
      "gists_url": "https://api.github.com/users/phbdias/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/phbdias/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/phbdias/subscriptions",
      "organizations_url": "https://api.github.com/users/phbdias/orgs",
      "repos_url": "https://api.github.com/users/phbdias/repos",
      "events_url": "https://api.github.com/users/phbdias/events{/privacy}",
      "received_events_url": "https://api.github.com/users/phbdias/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-05-14T15:38:22Z",
    "updated_at": "2021-05-14T15:42:01Z",
    "author_association": "NONE",
    "body": "I agree that there are some issues with ERC777, however I don't see any alternative to avoid the ERC20 behavior of 'approve' then 'transferFrom' (opposing to the one-step transfer that the ERC777 proposes). There are any safer alternative  to ERC777 (already implemented) that I am missing out?\r\n\r\nThanks in advance!",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/841321231/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/841327879",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2620#issuecomment-841327879",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2620",
    "id": 841327879,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg0MTMyNzg3OQ==",
    "user": {
      "login": "k06a",
      "id": 702124,
      "node_id": "MDQ6VXNlcjcwMjEyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/702124?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/k06a",
      "html_url": "https://github.com/k06a",
      "followers_url": "https://api.github.com/users/k06a/followers",
      "following_url": "https://api.github.com/users/k06a/following{/other_user}",
      "gists_url": "https://api.github.com/users/k06a/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/k06a/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/k06a/subscriptions",
      "organizations_url": "https://api.github.com/users/k06a/orgs",
      "repos_url": "https://api.github.com/users/k06a/repos",
      "events_url": "https://api.github.com/users/k06a/events{/privacy}",
      "received_events_url": "https://api.github.com/users/k06a/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-05-14T15:47:10Z",
    "updated_at": "2021-05-14T15:47:10Z",
    "author_association": "CONTRIBUTOR",
    "body": "@phbdias sure, check out ERC20Permit.sol",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/841327879/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/841626113",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2620#issuecomment-841626113",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2620",
    "id": 841626113,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg0MTYyNjExMw==",
    "user": {
      "login": "Amxx",
      "id": 2432299,
      "node_id": "MDQ6VXNlcjI0MzIyOTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2432299?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Amxx",
      "html_url": "https://github.com/Amxx",
      "followers_url": "https://api.github.com/users/Amxx/followers",
      "following_url": "https://api.github.com/users/Amxx/following{/other_user}",
      "gists_url": "https://api.github.com/users/Amxx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Amxx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Amxx/subscriptions",
      "organizations_url": "https://api.github.com/users/Amxx/orgs",
      "repos_url": "https://api.github.com/users/Amxx/repos",
      "events_url": "https://api.github.com/users/Amxx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Amxx/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-05-15T09:00:22Z",
    "updated_at": "2021-05-15T09:00:22Z",
    "author_association": "COLLABORATOR",
    "body": "@phbdias [ERC1363](https://eips.ethereum.org/EIPS/eip-1363), which is not yet part of OZ contracts, but can easily be added is there is a request for it, is also good to know !",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/841626113/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/852425729",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2620#issuecomment-852425729",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2620",
    "id": 852425729,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg1MjQyNTcyOQ==",
    "user": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-06-01T20:31:20Z",
    "updated_at": "2021-06-01T20:31:37Z",
    "author_association": "MEMBER",
    "body": "We don't think it should be OpenZeppelin Contracts making the decision to deprecate the ERC.\r\n\r\nWe're happy to include comments in our documentation about the downsides and alternatives.\r\n\r\nFor actual deprecation, we're happy to host the discussion here, but ultimately we feel that a deprecation requires a more ecosystem-wide consensus.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/852425729/reactions",
      "total_count": 7,
      "+1": 7,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1035894472",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2620#issuecomment-1035894472",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2620",
    "id": 1035894472,
    "node_id": "IC_kwDOA9tCBs49vn7I",
    "user": {
      "login": "jeffreyscholz",
      "id": 6095539,
      "node_id": "MDQ6VXNlcjYwOTU1Mzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6095539?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jeffreyscholz",
      "html_url": "https://github.com/jeffreyscholz",
      "followers_url": "https://api.github.com/users/jeffreyscholz/followers",
      "following_url": "https://api.github.com/users/jeffreyscholz/following{/other_user}",
      "gists_url": "https://api.github.com/users/jeffreyscholz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jeffreyscholz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jeffreyscholz/subscriptions",
      "organizations_url": "https://api.github.com/users/jeffreyscholz/orgs",
      "repos_url": "https://api.github.com/users/jeffreyscholz/repos",
      "events_url": "https://api.github.com/users/jeffreyscholz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jeffreyscholz/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-02-11T05:26:55Z",
    "updated_at": "2022-02-11T05:26:55Z",
    "author_association": "NONE",
    "body": "@Amxx as rough as the transition is, I think some token that supports a receiver hook needs to be supported. If it isn't ERC777, then by all means ERC1363. Having to approve tokens first is counterintuitive to newcomers and it introduces attack vectors. I don't have strong opinions about the ERC777, but ERC1363 does seem more intuitive to me. Regardless, I'm 100% behind moving to a new token standard away from ERC20. It needs to happen at some point.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1035894472/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 1,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1035947642",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2620#issuecomment-1035947642",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2620",
    "id": 1035947642,
    "node_id": "IC_kwDOA9tCBs49v056",
    "user": {
      "login": "k06a",
      "id": 702124,
      "node_id": "MDQ6VXNlcjcwMjEyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/702124?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/k06a",
      "html_url": "https://github.com/k06a",
      "followers_url": "https://api.github.com/users/k06a/followers",
      "following_url": "https://api.github.com/users/k06a/following{/other_user}",
      "gists_url": "https://api.github.com/users/k06a/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/k06a/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/k06a/subscriptions",
      "organizations_url": "https://api.github.com/users/k06a/orgs",
      "repos_url": "https://api.github.com/users/k06a/repos",
      "events_url": "https://api.github.com/users/k06a/events{/privacy}",
      "received_events_url": "https://api.github.com/users/k06a/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-02-11T07:38:35Z",
    "updated_at": "2022-02-11T07:38:35Z",
    "author_association": "CONTRIBUTOR",
    "body": "We can have better EIP which would allow receiver contract to do `transferFrom(msg.sender, ‚Ä¶)`, during `transferAndCall` where `msg.sender` will be token contract. But this flow would make it fully compatible with ERC20. Except `msg.sender` will not be beneficiary of the call anymore.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1035947642/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1041395842",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2620#issuecomment-1041395842",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2620",
    "id": 1041395842,
    "node_id": "IC_kwDOA9tCBs4-EnCC",
    "user": {
      "login": "k06a",
      "id": 702124,
      "node_id": "MDQ6VXNlcjcwMjEyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/702124?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/k06a",
      "html_url": "https://github.com/k06a",
      "followers_url": "https://api.github.com/users/k06a/followers",
      "following_url": "https://api.github.com/users/k06a/following{/other_user}",
      "gists_url": "https://api.github.com/users/k06a/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/k06a/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/k06a/subscriptions",
      "organizations_url": "https://api.github.com/users/k06a/orgs",
      "repos_url": "https://api.github.com/users/k06a/repos",
      "events_url": "https://api.github.com/users/k06a/events{/privacy}",
      "received_events_url": "https://api.github.com/users/k06a/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-02-16T11:34:17Z",
    "updated_at": "2022-02-16T11:34:17Z",
    "author_association": "CONTRIBUTOR",
    "body": "Here is the concept of CREATE2-based factory for arbitrary calls, where the receiver of the call still can do `transferFrom(msg.sender, ..., ...)` to have ultimate compatibility with ERC20: https://gist.github.com/k06a/0ea02ecd824bd3d44c760825b62bc264\r\n\r\nPros:\r\n- Smart contract ownership role is not exposed anymore. It uses the factory to have a separate \"caller\" smart contract for each user.\r\n- The receiver can be ultimately compatible with ERC20\r\n\r\nCons:\r\n- The call receiver should not consider `msg.sender` as beneficiary, we should use methods like `depositFor` and similar. But even if it was used, create2-based proxy factory would allow users to reclaim their ownership.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1041395842/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1043518243",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2620#issuecomment-1043518243",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2620",
    "id": 1043518243,
    "node_id": "IC_kwDOA9tCBs4-MtMj",
    "user": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-02-17T22:06:31Z",
    "updated_at": "2022-02-17T22:06:31Z",
    "author_association": "MEMBER",
    "body": "@k06a I was going to mention [ERC827](https://github.com/ethereum/EIPs/issues/827) but I see you were involved in that discussion already!\r\n\r\nI think the approach with CREATE2 is interesting but isn't it an important security practice to always invoke `transferFrom` with `msg.sender` as the argument? For example, as seen [here](https://github.com/Uniswap/v2-periphery/blob/2efa12e0f2d808d9b49737927f0e416fafa5af68/contracts/UniswapV2Router01.sol#L70) for Uniswap.\r\n\r\nDoesn't this make that approach useless? Because msg.sender would not be the owner of the tokens.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1043518243/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1045979780",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2620#issuecomment-1045979780",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2620",
    "id": 1045979780,
    "node_id": "IC_kwDOA9tCBs4-WGKE",
    "user": {
      "login": "k06a",
      "id": 702124,
      "node_id": "MDQ6VXNlcjcwMjEyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/702124?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/k06a",
      "html_url": "https://github.com/k06a",
      "followers_url": "https://api.github.com/users/k06a/followers",
      "following_url": "https://api.github.com/users/k06a/following{/other_user}",
      "gists_url": "https://api.github.com/users/k06a/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/k06a/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/k06a/subscriptions",
      "organizations_url": "https://api.github.com/users/k06a/orgs",
      "repos_url": "https://api.github.com/users/k06a/repos",
      "events_url": "https://api.github.com/users/k06a/events{/privacy}",
      "received_events_url": "https://api.github.com/users/k06a/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-02-19T09:48:51Z",
    "updated_at": "2022-02-19T09:48:51Z",
    "author_association": "CONTRIBUTOR",
    "body": "@frangio I agree, check my example, it is fully compatible with tranferFrom(msg.sender, ‚Ä¶)",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1045979780/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1046128998",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2620#issuecomment-1046128998",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2620",
    "id": 1046128998,
    "node_id": "IC_kwDOA9tCBs4-Wqlm",
    "user": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-02-20T00:11:00Z",
    "updated_at": "2022-02-20T00:11:00Z",
    "author_association": "MEMBER",
    "body": "Oh I hadn't noticed that. It's a pretty interesting idea, but I don't think I'd feel comfortable recommending it. `transferFrom` is not the only thing the receiver may use `msg.sender` for. For example, the auxiliary `Caller` contract may be granted an LP NFT in return, and some of these assets or rights may not be transferable from the auxiliary contract back to the \"real\" `msg.sender`.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1046128998/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1046129928",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2620#issuecomment-1046129928",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2620",
    "id": 1046129928,
    "node_id": "IC_kwDOA9tCBs4-Wq0I",
    "user": {
      "login": "k06a",
      "id": 702124,
      "node_id": "MDQ6VXNlcjcwMjEyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/702124?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/k06a",
      "html_url": "https://github.com/k06a",
      "followers_url": "https://api.github.com/users/k06a/followers",
      "following_url": "https://api.github.com/users/k06a/following{/other_user}",
      "gists_url": "https://api.github.com/users/k06a/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/k06a/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/k06a/subscriptions",
      "organizations_url": "https://api.github.com/users/k06a/orgs",
      "repos_url": "https://api.github.com/users/k06a/repos",
      "events_url": "https://api.github.com/users/k06a/events{/privacy}",
      "received_events_url": "https://api.github.com/users/k06a/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-02-20T00:16:50Z",
    "updated_at": "2022-02-20T00:16:50Z",
    "author_association": "CONTRIBUTOR",
    "body": "@frangio exactly, that‚Äôs why I use create2 based factory, where salt is equal to user address. This makes users to own this address of msg.sender in the call üòÅ",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1046129928/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1139696882",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2620#issuecomment-1139696882",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2620",
    "id": 1139696882,
    "node_id": "IC_kwDOA9tCBs5D7mTy",
    "user": {
      "login": "Pandapip1",
      "id": 45835846,
      "node_id": "MDQ6VXNlcjQ1ODM1ODQ2",
      "avatar_url": "https://avatars.githubusercontent.com/u/45835846?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Pandapip1",
      "html_url": "https://github.com/Pandapip1",
      "followers_url": "https://api.github.com/users/Pandapip1/followers",
      "following_url": "https://api.github.com/users/Pandapip1/following{/other_user}",
      "gists_url": "https://api.github.com/users/Pandapip1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Pandapip1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Pandapip1/subscriptions",
      "organizations_url": "https://api.github.com/users/Pandapip1/orgs",
      "repos_url": "https://api.github.com/users/Pandapip1/repos",
      "events_url": "https://api.github.com/users/Pandapip1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Pandapip1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-05-27T14:55:54Z",
    "updated_at": "2022-05-27T14:55:54Z",
    "author_association": "CONTRIBUTOR",
    "body": "Not sure if this issue is still active, but how about https://eips.ethereum.org/EIPS/eip-4524?",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1139696882/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1156118047",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2620#issuecomment-1156118047",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2620",
    "id": 1156118047,
    "node_id": "IC_kwDOA9tCBs5E6PYf",
    "user": {
      "login": "lukehutch",
      "id": 811305,
      "node_id": "MDQ6VXNlcjgxMTMwNQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/811305?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lukehutch",
      "html_url": "https://github.com/lukehutch",
      "followers_url": "https://api.github.com/users/lukehutch/followers",
      "following_url": "https://api.github.com/users/lukehutch/following{/other_user}",
      "gists_url": "https://api.github.com/users/lukehutch/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lukehutch/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lukehutch/subscriptions",
      "organizations_url": "https://api.github.com/users/lukehutch/orgs",
      "repos_url": "https://api.github.com/users/lukehutch/repos",
      "events_url": "https://api.github.com/users/lukehutch/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lukehutch/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-06-15T07:51:19Z",
    "updated_at": "2022-06-15T07:51:47Z",
    "author_association": "NONE",
    "body": "Beyond all the over-engineering, the biggest issue with ERC777 is that it is insecure as defined, because the sender notification interface is called before state is updated: #3463 \r\n\r\n@Amxx I agree that ERC1363 is a good standard (simple and secure), as is ERC4524. An implementation of both of these should be in OpenZeppelin, and the two implementations could both share a lot of common code.\r\n\r\nDifferences: ERC1363 does not allow sending to EOAs or using an EOA as the spender/operator; ERC4524 allows both. ERC1363 allows notification of both spender/operator and recipient; ERC4524 only notifies recipients. Both declare their notification interface(s) via ERC165, which is simpler than ERC1820 used by ERC777.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1156118047/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1156246151",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2620#issuecomment-1156246151",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2620",
    "id": 1156246151,
    "node_id": "IC_kwDOA9tCBs5E6uqH",
    "user": {
      "login": "Amxx",
      "id": 2432299,
      "node_id": "MDQ6VXNlcjI0MzIyOTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2432299?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Amxx",
      "html_url": "https://github.com/Amxx",
      "followers_url": "https://api.github.com/users/Amxx/followers",
      "following_url": "https://api.github.com/users/Amxx/following{/other_user}",
      "gists_url": "https://api.github.com/users/Amxx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Amxx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Amxx/subscriptions",
      "organizations_url": "https://api.github.com/users/Amxx/orgs",
      "repos_url": "https://api.github.com/users/Amxx/repos",
      "events_url": "https://api.github.com/users/Amxx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Amxx/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-06-15T09:43:48Z",
    "updated_at": "2022-06-15T09:43:54Z",
    "author_association": "COLLABORATOR",
    "body": "> ERC1363 does not allow sending to EOAs or using an EOA as the spender/operator\r\n\r\nWhere do you get that from? AFAIK this is not true.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1156246151/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1156257156",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2620#issuecomment-1156257156",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2620",
    "id": 1156257156,
    "node_id": "IC_kwDOA9tCBs5E6xWE",
    "user": {
      "login": "Amxx",
      "id": 2432299,
      "node_id": "MDQ6VXNlcjI0MzIyOTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2432299?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Amxx",
      "html_url": "https://github.com/Amxx",
      "followers_url": "https://api.github.com/users/Amxx/followers",
      "following_url": "https://api.github.com/users/Amxx/following{/other_user}",
      "gists_url": "https://api.github.com/users/Amxx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Amxx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Amxx/subscriptions",
      "organizations_url": "https://api.github.com/users/Amxx/orgs",
      "repos_url": "https://api.github.com/users/Amxx/repos",
      "events_url": "https://api.github.com/users/Amxx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Amxx/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-06-15T09:54:13Z",
    "updated_at": "2022-06-15T09:54:13Z",
    "author_association": "COLLABORATOR",
    "body": "> ERC1363 allows notification of both spender/operator and recipient;\r\n\r\nHow is that an issue ?\r\n\r\n- When calling `transferAndCall` or `transferFromAndCall`, the recipient is notified. Recipient must implement the `ERC1363Receiver` interface.\r\n- When calling `approveAndCall`, the spender (the one that is approved) is notified. Spender must implement the `ERC1363Spender` interface.\r\n\r\nIn both cases, only one address is notified, and that is the address of the entity that could possibly want to react to either receiving tokens, or being approved to transfer tokens.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1156257156/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1156274361",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2620#issuecomment-1156274361",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2620",
    "id": 1156274361,
    "node_id": "IC_kwDOA9tCBs5E61i5",
    "user": {
      "login": "Amxx",
      "id": 2432299,
      "node_id": "MDQ6VXNlcjI0MzIyOTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2432299?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Amxx",
      "html_url": "https://github.com/Amxx",
      "followers_url": "https://api.github.com/users/Amxx/followers",
      "following_url": "https://api.github.com/users/Amxx/following{/other_user}",
      "gists_url": "https://api.github.com/users/Amxx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Amxx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Amxx/subscriptions",
      "organizations_url": "https://api.github.com/users/Amxx/orgs",
      "repos_url": "https://api.github.com/users/Amxx/repos",
      "events_url": "https://api.github.com/users/Amxx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Amxx/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-06-15T10:10:23Z",
    "updated_at": "2022-06-15T10:10:23Z",
    "author_association": "COLLABORATOR",
    "body": "> the biggest issue with ERC777 is that it is insecure as defined, because the sender notification interface is called before state is updated\r\n\r\nThis is not necessarily an issue if handled properly. Our implementation of ERC4626 show how being aware of that, we can make sure it doesn't become a liability",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1156274361/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1156422782",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2620#issuecomment-1156422782",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2620",
    "id": 1156422782,
    "node_id": "IC_kwDOA9tCBs5E7Zx-",
    "user": {
      "login": "lukehutch",
      "id": 811305,
      "node_id": "MDQ6VXNlcjgxMTMwNQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/811305?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lukehutch",
      "html_url": "https://github.com/lukehutch",
      "followers_url": "https://api.github.com/users/lukehutch/followers",
      "following_url": "https://api.github.com/users/lukehutch/following{/other_user}",
      "gists_url": "https://api.github.com/users/lukehutch/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lukehutch/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lukehutch/subscriptions",
      "organizations_url": "https://api.github.com/users/lukehutch/orgs",
      "repos_url": "https://api.github.com/users/lukehutch/repos",
      "events_url": "https://api.github.com/users/lukehutch/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lukehutch/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-06-15T12:41:47Z",
    "updated_at": "2022-06-15T12:41:47Z",
    "author_association": "NONE",
    "body": "> > ERC1363 does not allow sending to EOAs or using an EOA as the spender/operator\r\n> \r\n> Where do you get that from? AFAIK this is not true.\r\n\r\nFrom [the spec](https://eips.ethereum.org/EIPS/eip-1363) (search for \"MUST implement\"), and from the reference implementation: [1](https://github.com/vittominacori/erc1363-payable-token/blob/master/contracts/token/ERC1363/ERC1363.sol#L51) [2](https://github.com/vittominacori/erc1363-payable-token/blob/master/contracts/token/ERC1363/ERC1363.sol#L131).\r\n\r\nMaybe you're thinking of using the ERC20 `approve`/`transferFrom` methods from an ERC1363-capable token, because ERC1363 is a superset of ERC20. I'm referring to the ERC1363-specific methods, `approveAndCall`/`transferFromAndCall`.\r\n\r\n> > ERC1363 allows notification of both spender/operator and recipient;\r\n> \r\n> How is that an issue ?\r\n\r\nI wasn't saying it was an issue. I was only pointing out differences between the APIs, to show that there are reasons to implement more than one of these standards or proposals.\r\n\r\nOne of the primary reasons for the existence of ERC777, ERC1363, ERC4524, etc. is to prevent tokens being sent to contracts that do not know what to do with them, especially non-proxied contracts that cannot be modified (because it causes any received tokens to be lost forever). All of these standards prevent sending to contracts that do not define or declare the right interface. ERC777 and ERC4524 also transparently degrade to a standard transfer when sending to an EOA. ERC1363 doesn't allow that, so it's technically the strongest of all three standards in terms of guaranteeing that you're only sending to the desired address. But being able to send to an EOA using the ERC777 or ERC4524 API, without having to switch back to the ERC20 API, has the benefit of convenience.\r\n\r\nAnother slightly more esoteric issue with ERC777, by the way, is that if the receiver declares the correct ERC1820 interface but somehow incorrectly defines the receiver notification hook, so that the function signature is wrong, and if that contract defines a fallback function that does not revert, then the ERC777 token contract will think it successfully notified the receiver even though the receiver notification hook never got called. Therefore the fallback function feature of Solidity actually breaks the ERC777 standard, for improperly implemented receivers. ERC1363 and ERC4524 don't have this issue, because they require the hooks they call to return their own function selector as a return value.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1156422782/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1156429058",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2620#issuecomment-1156429058",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2620",
    "id": 1156429058,
    "node_id": "IC_kwDOA9tCBs5E7bUC",
    "user": {
      "login": "Amxx",
      "id": 2432299,
      "node_id": "MDQ6VXNlcjI0MzIyOTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2432299?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Amxx",
      "html_url": "https://github.com/Amxx",
      "followers_url": "https://api.github.com/users/Amxx/followers",
      "following_url": "https://api.github.com/users/Amxx/following{/other_user}",
      "gists_url": "https://api.github.com/users/Amxx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Amxx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Amxx/subscriptions",
      "organizations_url": "https://api.github.com/users/Amxx/orgs",
      "repos_url": "https://api.github.com/users/Amxx/repos",
      "events_url": "https://api.github.com/users/Amxx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Amxx/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-06-15T12:47:41Z",
    "updated_at": "2022-06-15T12:52:21Z",
    "author_association": "COLLABORATOR",
    "body": "> > > ERC1363 does not allow sending to EOAs or using an EOA as the spender/operator\r\n> > \r\n> > \r\n> > Where do you get that from? AFAIK this is not true.\r\n> \r\n> From [the spec](https://eips.ethereum.org/EIPS/eip-1363) (search for \"MUST implement\"), and from the reference implementation: [1](https://github.com/vittominacori/erc1363-payable-token/blob/master/contracts/token/ERC1363/ERC1363.sol#L51) [2](https://github.com/vittominacori/erc1363-payable-token/blob/master/contracts/token/ERC1363/ERC1363.sol#L131).\r\n> \r\n> Maybe you're thinking of using the ERC20 `approve`/`transferFrom` methods from an ERC1363-capable token, because ERC1363 is a superset of ERC20. I'm referring to the ERC1363-specific methods, `approveAndCall`/`transferFromAndCall`.\r\n\r\nIt says that\r\n> A **contract** that wants to accept token payments via transferAndCall or transferFromAndCall MUST implement the following interface:\r\n\r\nIt also says that \r\n\r\n> This proposal has been inspired by the [ERC-721](https://eips.ethereum.org/EIPS/eip-721) onERC721Received and ERC721TokenReceiver behaviours.\r\n\r\nMy understanding is that, just like in the case of 721, you should be able to `transferAndCall` (or similar) to an address that has no code ... the call will be successful, and we should accept the empty returndata if the target has no code.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1156429058/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1156431870",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2620#issuecomment-1156431870",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2620",
    "id": 1156431870,
    "node_id": "IC_kwDOA9tCBs5E7b_-",
    "user": {
      "login": "lukehutch",
      "id": 811305,
      "node_id": "MDQ6VXNlcjgxMTMwNQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/811305?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lukehutch",
      "html_url": "https://github.com/lukehutch",
      "followers_url": "https://api.github.com/users/lukehutch/followers",
      "following_url": "https://api.github.com/users/lukehutch/following{/other_user}",
      "gists_url": "https://api.github.com/users/lukehutch/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lukehutch/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lukehutch/subscriptions",
      "organizations_url": "https://api.github.com/users/lukehutch/orgs",
      "repos_url": "https://api.github.com/users/lukehutch/repos",
      "events_url": "https://api.github.com/users/lukehutch/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lukehutch/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-06-15T12:50:19Z",
    "updated_at": "2022-06-15T12:50:19Z",
    "author_association": "NONE",
    "body": "Yes but look at the reference implementation. It cannot send to EOAs, or allow EOAs to act as spender.\r\n\r\nTherefore, it's clear that the total omission of any mention of EOAs in ERC1363 actually originates from the author's intent that \"A contract that wants to accept\" means \"A contract (and only a contract) that wants to accept\"...",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1156431870/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1156431981",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2620#issuecomment-1156431981",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2620",
    "id": 1156431981,
    "node_id": "IC_kwDOA9tCBs5E7cBt",
    "user": {
      "login": "Amxx",
      "id": 2432299,
      "node_id": "MDQ6VXNlcjI0MzIyOTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2432299?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Amxx",
      "html_url": "https://github.com/Amxx",
      "followers_url": "https://api.github.com/users/Amxx/followers",
      "following_url": "https://api.github.com/users/Amxx/following{/other_user}",
      "gists_url": "https://api.github.com/users/Amxx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Amxx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Amxx/subscriptions",
      "organizations_url": "https://api.github.com/users/Amxx/orgs",
      "repos_url": "https://api.github.com/users/Amxx/repos",
      "events_url": "https://api.github.com/users/Amxx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Amxx/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-06-15T12:50:26Z",
    "updated_at": "2022-06-15T12:53:01Z",
    "author_association": "COLLABORATOR",
    "body": "> One of the primary reasons for the existence of ERC777, ERC1363, ERC4524, etc. is to prevent tokens being sent to contracts that do not know what to do with them\r\n\r\nThat may be the goal of 4524, but it is not the reason for 777 or 1363. I'm particularly sure of that in the context of 1363. The reason is for the contract to react to a token transfer, which simplifies the \"approve + transferFrom\" workflow, allow the target to \"prepare\", to send events, ...",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1156431981/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1156433192",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2620#issuecomment-1156433192",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2620",
    "id": 1156433192,
    "node_id": "IC_kwDOA9tCBs5E7cUo",
    "user": {
      "login": "Amxx",
      "id": 2432299,
      "node_id": "MDQ6VXNlcjI0MzIyOTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2432299?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Amxx",
      "html_url": "https://github.com/Amxx",
      "followers_url": "https://api.github.com/users/Amxx/followers",
      "following_url": "https://api.github.com/users/Amxx/following{/other_user}",
      "gists_url": "https://api.github.com/users/Amxx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Amxx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Amxx/subscriptions",
      "organizations_url": "https://api.github.com/users/Amxx/orgs",
      "repos_url": "https://api.github.com/users/Amxx/repos",
      "events_url": "https://api.github.com/users/Amxx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Amxx/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-06-15T12:51:38Z",
    "updated_at": "2022-06-15T12:51:38Z",
    "author_association": "COLLABORATOR",
    "body": "> Yes but look at the reference implementation\r\n\r\nDo you have a link? Its not in the ERC. (Also the reference implementation could technically be wrong, it does not replace the specs)",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1156433192/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1156435202",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2620#issuecomment-1156435202",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2620",
    "id": 1156435202,
    "node_id": "IC_kwDOA9tCBs5E7c0C",
    "user": {
      "login": "lukehutch",
      "id": 811305,
      "node_id": "MDQ6VXNlcjgxMTMwNQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/811305?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lukehutch",
      "html_url": "https://github.com/lukehutch",
      "followers_url": "https://api.github.com/users/lukehutch/followers",
      "following_url": "https://api.github.com/users/lukehutch/following{/other_user}",
      "gists_url": "https://api.github.com/users/lukehutch/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lukehutch/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lukehutch/subscriptions",
      "organizations_url": "https://api.github.com/users/lukehutch/orgs",
      "repos_url": "https://api.github.com/users/lukehutch/repos",
      "events_url": "https://api.github.com/users/lukehutch/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lukehutch/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-06-15T12:53:40Z",
    "updated_at": "2022-06-15T12:54:55Z",
    "author_association": "NONE",
    "body": "> > One of the primary reasons for the existence of ERC777, ERC1363, ERC4524, etc. is to prevent tokens being sent to contracts that do not know what to do with them\r\n> \r\n> That may be the goal of 4524, but it is not the reason for 777 or 1363. I'm particularly sure of that in the context of 1363. The reason is for the contract to react to a token transfer, which simplifies the \"approve + transferFrom\" workflow.\r\n\r\nI pointed this out in my comparison of these standards. ERC1363 is the only one that is capable of notifying the spender, and that's quite interesting and unique. But the whole purpose of notifying the recipient originated from the fact that hundreds of millions of dollars have been lost already because of ERC20 tokens being sent to contracts that couldn't handle them.\r\n\r\n> Do you have a link? Its not in the ERC. (Also the reference implementation could technically be wrong, it does not replace the specs)\r\n\r\nI provided the link already. Here it is (here they are) again: [1](https://github.com/vittominacori/erc1363-payable-token/blob/master/contracts/token/ERC1363/ERC1363.sol#L51), [2](https://github.com/vittominacori/erc1363-payable-token/blob/master/contracts/token/ERC1363/ERC1363.sol#L131)",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1156435202/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1156435919",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2620#issuecomment-1156435919",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2620",
    "id": 1156435919,
    "node_id": "IC_kwDOA9tCBs5E7c_P",
    "user": {
      "login": "lukehutch",
      "id": 811305,
      "node_id": "MDQ6VXNlcjgxMTMwNQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/811305?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lukehutch",
      "html_url": "https://github.com/lukehutch",
      "followers_url": "https://api.github.com/users/lukehutch/followers",
      "following_url": "https://api.github.com/users/lukehutch/following{/other_user}",
      "gists_url": "https://api.github.com/users/lukehutch/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lukehutch/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lukehutch/subscriptions",
      "organizations_url": "https://api.github.com/users/lukehutch/orgs",
      "repos_url": "https://api.github.com/users/lukehutch/repos",
      "events_url": "https://api.github.com/users/lukehutch/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lukehutch/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-06-15T12:54:22Z",
    "updated_at": "2022-06-15T12:55:24Z",
    "author_association": "NONE",
    "body": ">  (Also the reference implementation could technically be wrong, it does not replace the specs)\r\n\r\nThe specs are simply ambiguous. They do not even address the issue of what happens if an EOA is a recipient or spender.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1156435919/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1156440978",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2620#issuecomment-1156440978",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2620",
    "id": 1156440978,
    "node_id": "IC_kwDOA9tCBs5E7eOS",
    "user": {
      "login": "Amxx",
      "id": 2432299,
      "node_id": "MDQ6VXNlcjI0MzIyOTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2432299?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Amxx",
      "html_url": "https://github.com/Amxx",
      "followers_url": "https://api.github.com/users/Amxx/followers",
      "following_url": "https://api.github.com/users/Amxx/following{/other_user}",
      "gists_url": "https://api.github.com/users/Amxx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Amxx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Amxx/subscriptions",
      "organizations_url": "https://api.github.com/users/Amxx/orgs",
      "repos_url": "https://api.github.com/users/Amxx/repos",
      "events_url": "https://api.github.com/users/Amxx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Amxx/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-06-15T12:59:18Z",
    "updated_at": "2022-06-15T12:59:18Z",
    "author_association": "COLLABORATOR",
    "body": "That is unfortunately true of many ERC. The fact that it explicitly mentions being inspired by 721 makes me think that the behavior should be the same, but that is just an interpretation.\r\n\r\nThat should indeed be clarified. Without clarification, I guess any implementation is free to do what they consider best ... (which is not great).\r\nI don't think however that this ambiguity justifies starting another ERC from scratch. ERC4626 is ambiguous ... even ERC20 is ambiguous about some things (events emitted on mint/burn) ... but we manage to live with it.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1156440978/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1156442812",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2620#issuecomment-1156442812",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2620",
    "id": 1156442812,
    "node_id": "IC_kwDOA9tCBs5E7eq8",
    "user": {
      "login": "Amxx",
      "id": 2432299,
      "node_id": "MDQ6VXNlcjI0MzIyOTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2432299?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Amxx",
      "html_url": "https://github.com/Amxx",
      "followers_url": "https://api.github.com/users/Amxx/followers",
      "following_url": "https://api.github.com/users/Amxx/following{/other_user}",
      "gists_url": "https://api.github.com/users/Amxx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Amxx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Amxx/subscriptions",
      "organizations_url": "https://api.github.com/users/Amxx/orgs",
      "repos_url": "https://api.github.com/users/Amxx/repos",
      "events_url": "https://api.github.com/users/Amxx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Amxx/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-06-15T13:01:11Z",
    "updated_at": "2022-06-15T13:01:11Z",
    "author_association": "COLLABORATOR",
    "body": "For the record, we have a PR for adding 1363: #3017",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1156442812/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1156444781",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2620#issuecomment-1156444781",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2620",
    "id": 1156444781,
    "node_id": "IC_kwDOA9tCBs5E7fJt",
    "user": {
      "login": "lukehutch",
      "id": 811305,
      "node_id": "MDQ6VXNlcjgxMTMwNQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/811305?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lukehutch",
      "html_url": "https://github.com/lukehutch",
      "followers_url": "https://api.github.com/users/lukehutch/followers",
      "following_url": "https://api.github.com/users/lukehutch/following{/other_user}",
      "gists_url": "https://api.github.com/users/lukehutch/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lukehutch/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lukehutch/subscriptions",
      "organizations_url": "https://api.github.com/users/lukehutch/orgs",
      "repos_url": "https://api.github.com/users/lukehutch/repos",
      "events_url": "https://api.github.com/users/lukehutch/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lukehutch/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-06-15T13:03:05Z",
    "updated_at": "2022-06-15T13:03:05Z",
    "author_association": "NONE",
    "body": "When I look to implement a spec, I take the combination of the spec plus the reference implementation as the standard (particularly if the reference implementation was written by the same person or people as the spec).\r\n\r\nTaking that combination and reimplementing from scratch in a different context has led me to find and report issues (either inconsistencies, ambiguities, or security vulnerabilities) with several EIPs/ERCs. Of course these never get fixed once an ERC is finalized.\r\n\r\nIn the case of ERC1363, the spec is so short and terse that I don't think it can be taken as a spec without consulting the reference implementation.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1156444781/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
