{
  "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4186",
  "repository_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts",
  "labels_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4186/labels{/name}",
  "comments_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4186/comments",
  "events_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4186/events",
  "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/4186",
  "id": 1673160347,
  "node_id": "I_kwDOA9tCBs5jumab",
  "number": 4186,
  "title": "Add a chain detection library",
  "user": {
    "login": "CodeSandwich",
    "id": 26183680,
    "node_id": "MDQ6VXNlcjI2MTgzNjgw",
    "avatar_url": "https://avatars.githubusercontent.com/u/26183680?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/CodeSandwich",
    "html_url": "https://github.com/CodeSandwich",
    "followers_url": "https://api.github.com/users/CodeSandwich/followers",
    "following_url": "https://api.github.com/users/CodeSandwich/following{/other_user}",
    "gists_url": "https://api.github.com/users/CodeSandwich/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/CodeSandwich/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/CodeSandwich/subscriptions",
    "organizations_url": "https://api.github.com/users/CodeSandwich/orgs",
    "repos_url": "https://api.github.com/users/CodeSandwich/repos",
    "events_url": "https://api.github.com/users/CodeSandwich/events{/privacy}",
    "received_events_url": "https://api.github.com/users/CodeSandwich/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 3,
  "created_at": "2023-04-18T13:40:38Z",
  "updated_at": "2023-05-23T09:05:49Z",
  "closed_at": "2023-05-23T09:05:49Z",
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "**üßê Motivation**\r\nSome contracts need to act differently depending on the chain they're deployed on. E.g. the ecosystem may have different addresses. If you don't want to outsource all these differences to a deployment script, you can always look up `block.chainid`, but that's fragile with a new magic value per blockchain.\r\n\r\n**üìù Details**\r\nIt'd be great to have a library for detecting chains. Just a bunch of constants like `ETHEREUM = 1` would be a good bare minimum to avoid magic numbers. On top of that there may or may not be convenience functions like `isEthereum() returns (bool)`. There may or may not be constants with string chain names, it could be useful for dynamic generation of URLs and if unused, shouldn't bloat the bytecode. There may or may not be a function `chainName() returns (string memory)` to streamline names handling, but it may unavoidably bloat the bytecode with all the available names.\r\n",
  "closed_by": {
    "login": "Amxx",
    "id": 2432299,
    "node_id": "MDQ6VXNlcjI0MzIyOTk=",
    "avatar_url": "https://avatars.githubusercontent.com/u/2432299?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/Amxx",
    "html_url": "https://github.com/Amxx",
    "followers_url": "https://api.github.com/users/Amxx/followers",
    "following_url": "https://api.github.com/users/Amxx/following{/other_user}",
    "gists_url": "https://api.github.com/users/Amxx/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/Amxx/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/Amxx/subscriptions",
    "organizations_url": "https://api.github.com/users/Amxx/orgs",
    "repos_url": "https://api.github.com/users/Amxx/repos",
    "events_url": "https://api.github.com/users/Amxx/events{/privacy}",
    "received_events_url": "https://api.github.com/users/Amxx/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4186/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4186/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1518630073",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/4186#issuecomment-1518630073",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4186",
    "id": 1518630073,
    "node_id": "IC_kwDOA9tCBs5ahHS5",
    "user": {
      "login": "ernestognw",
      "id": 33379285,
      "node_id": "MDQ6VXNlcjMzMzc5Mjg1",
      "avatar_url": "https://avatars.githubusercontent.com/u/33379285?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ernestognw",
      "html_url": "https://github.com/ernestognw",
      "followers_url": "https://api.github.com/users/ernestognw/followers",
      "following_url": "https://api.github.com/users/ernestognw/following{/other_user}",
      "gists_url": "https://api.github.com/users/ernestognw/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ernestognw/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ernestognw/subscriptions",
      "organizations_url": "https://api.github.com/users/ernestognw/orgs",
      "repos_url": "https://api.github.com/users/ernestognw/repos",
      "events_url": "https://api.github.com/users/ernestognw/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ernestognw/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-04-22T12:06:26Z",
    "updated_at": "2023-04-22T12:06:26Z",
    "author_association": "MEMBER",
    "body": "Hey @CodeSandwich, do you have a specific use case in which `block.chainid` doesn't serve the purpose you're looking for? I know some chains may report a different `CHAINID` inside their virtual machine implementation to the returned via `eth_chainId` JSON-RPC call so this may also become a liability to deal with in the future because it'll require support.\r\n\r\nHaving an example in which is clearly better to use the proposed `chainName()` could help to the discussion.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1518630073/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1518831129",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/4186#issuecomment-1518831129",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4186",
    "id": 1518831129,
    "node_id": "IC_kwDOA9tCBs5ah4YZ",
    "user": {
      "login": "CodeSandwich",
      "id": 26183680,
      "node_id": "MDQ6VXNlcjI2MTgzNjgw",
      "avatar_url": "https://avatars.githubusercontent.com/u/26183680?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CodeSandwich",
      "html_url": "https://github.com/CodeSandwich",
      "followers_url": "https://api.github.com/users/CodeSandwich/followers",
      "following_url": "https://api.github.com/users/CodeSandwich/following{/other_user}",
      "gists_url": "https://api.github.com/users/CodeSandwich/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CodeSandwich/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CodeSandwich/subscriptions",
      "organizations_url": "https://api.github.com/users/CodeSandwich/orgs",
      "repos_url": "https://api.github.com/users/CodeSandwich/repos",
      "events_url": "https://api.github.com/users/CodeSandwich/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CodeSandwich/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-04-22T21:46:04Z",
    "updated_at": "2023-04-25T12:26:50Z",
    "author_association": "CONTRIBUTOR",
    "body": "Sure! Just to be clear, the core of this proposal are the **constants with chain IDs**, the rest like `chainName` are nice extras which may or may not be worth adding.\r\n\r\n### Use case for constants with chain IDs\r\nThe real world use case I have is an integration with Chainlink, but other multi chain protocols will benefit similarly. On each chain the Link token has a different address. In order to pick the correct one I have this section in the constructor:\r\n```solidity\r\nif (block.chainid == 1) _linkToken = 0x514910771AF9Ca656af840dff83E8264EcF986CA;\r\nelse if (block.chainid == 5) _linkToken = 0x326C977E6efc84E512bB9C30f76E30c160eD06FB;\r\nelse revert(\"Unsupported chain\");\r\n```\r\nIn order to review the code one needs to look up the chain IDs of the mainnet (1) and Goerli (5). Sure, `1` and `5` can be stored as nicely named constants, but then one needs to trust these constants. The perfect solution would be to have them in OpenZeppelin, something along these lines:\r\n```solidity\r\nimport {ChainIds} from \"openzeppelin-contracts/utils/ChainIds.sol\";\r\n...\r\nif (block.chainid == ChainIds.Ethereum) _linkToken = 0x514910771AF9Ca656af840dff83E8264EcF986CA;\r\nelse if (block.chainid == ChainIds.Goerli) _linkToken = 0x326C977E6efc84E512bB9C30f76E30c160eD06FB;\r\nelse revert(\"Unsupported chain\");\r\n```\r\nThis may be further cleaned up if we have helper functions (a nice-to-have extra):\r\n```solidity\r\nimport {ChainIds} from \"openzeppelin-contracts/utils/ChainIds.sol\";\r\n...\r\nif (ChainIds.isEthereum()) _linkToken = 0x514910771AF9Ca656af840dff83E8264EcF986CA;\r\nelse if (ChainIds.isGoerli()) _linkToken = 0x326C977E6efc84E512bB9C30f76E30c160eD06FB;\r\nelse revert(\"Unsupported chain\");\r\n```\r\n\r\n### Use case for chain names\r\n\r\nI need to build URLs on-chain for off-chain resources. In my particular case these are paths for retrieving data by a Chainlink oracle:\r\n```solidity\r\nsring memory chainName;\r\nif (block.chainid == 1) chainName = \"ethereum;\r\nelse if (block.chainid == 5) chainName = \"goerli\"\r\nelse revert(\"Unsupported chain\");\r\nreturn string.concat(\"drips,\", chainName, \",ownedBy\");\r\n```\r\nA perfect solution would be to have something like this:\r\n```solidity\r\nimport {ChainIds} from \"openzeppelin-contracts/utils/ChainIds.sol\";\r\n...\r\nreturn string.concat(\"drips,\", ChainIds.chainName(), \",ownedBy\");\r\n```\r\nOther off-chain integrations like NFT's `tokenURI` may need the chain name to cleanly differentiate resources and `chainName` would allow some code cleaning up. This is a nice-to-have extra, I can't stress enough how the constants with chain IDs are the core of this proposal.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1518831129/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1558862802",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/4186#issuecomment-1558862802",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4186",
    "id": 1558862802,
    "node_id": "IC_kwDOA9tCBs5c6lvS",
    "user": {
      "login": "Amxx",
      "id": 2432299,
      "node_id": "MDQ6VXNlcjI0MzIyOTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2432299?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Amxx",
      "html_url": "https://github.com/Amxx",
      "followers_url": "https://api.github.com/users/Amxx/followers",
      "following_url": "https://api.github.com/users/Amxx/following{/other_user}",
      "gists_url": "https://api.github.com/users/Amxx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Amxx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Amxx/subscriptions",
      "organizations_url": "https://api.github.com/users/Amxx/orgs",
      "repos_url": "https://api.github.com/users/Amxx/repos",
      "events_url": "https://api.github.com/users/Amxx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Amxx/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-05-23T09:05:40Z",
    "updated_at": "2023-05-23T09:05:40Z",
    "author_association": "COLLABORATOR",
    "body": "Hello @CodeSandwich\r\n\r\nThere are currently 300 chains listed [here](https://github.com/DefiLlama/chainlist/blob/main/constants/extraRpcs.js) and the number is continuously growing. While maintaining an up to date list in a \"solidity friendly\" format might have some interest, I don't feel it falls in the scope of our contracts.\r\n\r\nThat could be an interesting side project, compile such a list from the file linked above, and distribute it automatically.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1558862802/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
