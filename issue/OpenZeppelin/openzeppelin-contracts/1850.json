{
  "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1850",
  "repository_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts",
  "labels_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1850/labels{/name}",
  "comments_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1850/comments",
  "events_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1850/events",
  "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1850",
  "id": 475246274,
  "node_id": "MDU6SXNzdWU0NzUyNDYyNzQ=",
  "number": 1850,
  "title": "Provide function(s) that verify an address is an EOA",
  "user": {
    "login": "Austin-Williams",
    "id": 8031584,
    "node_id": "MDQ6VXNlcjgwMzE1ODQ=",
    "avatar_url": "https://avatars.githubusercontent.com/u/8031584?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/Austin-Williams",
    "html_url": "https://github.com/Austin-Williams",
    "followers_url": "https://api.github.com/users/Austin-Williams/followers",
    "following_url": "https://api.github.com/users/Austin-Williams/following{/other_user}",
    "gists_url": "https://api.github.com/users/Austin-Williams/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/Austin-Williams/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/Austin-Williams/subscriptions",
    "organizations_url": "https://api.github.com/users/Austin-Williams/orgs",
    "repos_url": "https://api.github.com/users/Austin-Williams/repos",
    "events_url": "https://api.github.com/users/Austin-Williams/events{/privacy}",
    "received_events_url": "https://api.github.com/users/Austin-Williams/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 1000207718,
      "node_id": "MDU6TGFiZWwxMDAwMjA3NzE4",
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/labels/contracts",
      "name": "contracts",
      "color": "1d76db",
      "default": false,
      "description": "Smart contract code."
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 17,
  "created_at": "2019-07-31T16:36:52Z",
  "updated_at": "2021-07-05T19:25:38Z",
  "closed_at": "2021-07-05T19:25:38Z",
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "**🧐 Motivation**\r\nIt can be useful to verify that a given address is:\r\n\r\n1. For-sure an EOA\r\n2. For-sure an EOA that is _not_ a one-time-use EOA\r\n\r\nWe could provide this functionality in the `Address` library.\r\n\r\n**📝 Details**\r\nI suggest adding two functions to the Address library.\r\n\r\nThe first would be: `isEOA(address account, bytes32 hash, bytes memory signature)`. This would accept an arbitrary hash, verify the signature, use `recover` (from the ECDSA library) to recover the account of the signer, and return `true` only if the recovered address matched the `account` parameter. Thus, if `isEOA` returns `true` then we know for-sure that `account` is an EOA because it was able to sign a message. (Though if it returns `false` we get no information at all).\r\n\r\nHowever, there are also important cases where being an EOA is not enough -- and we also want to verify that a given address is not a _one-time-use_ EOA (such as those created using [Nick Johnson's method](https://medium.com/@weka/how-to-send-ether-to-11-440-people-187e332566b7)). So for that I suggest the following general function:\r\n\r\n`isNonOneTimeUseEOA(address account, bytes32 hash1, bytes memory signature1, bytes32 hash2, bytes memory signature2)`. This would verify both signatures, verify that `hash1 != hash2`, use `recover` on both signatures, then return `true` only if the recovered addresses and the `account` parameter were all equal to each other. What this is doing is verifying that the `account` is able to sign two _distinct_ messages -- ensuring that it cannot be a one-time-use EOA (since one-time-use EOAs can only ever create a single signature). Thus, if `isNonOneTimeUseEOA` returns `true` then we know for-sure that `account` is an EOA but not a one-time-use EOA. (Though if it returns `false` we get no information at all).",
  "closed_by": {
    "login": "frangio",
    "id": 481465,
    "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
    "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/frangio",
    "html_url": "https://github.com/frangio",
    "followers_url": "https://api.github.com/users/frangio/followers",
    "following_url": "https://api.github.com/users/frangio/following{/other_user}",
    "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
    "organizations_url": "https://api.github.com/users/frangio/orgs",
    "repos_url": "https://api.github.com/users/frangio/repos",
    "events_url": "https://api.github.com/users/frangio/events{/privacy}",
    "received_events_url": "https://api.github.com/users/frangio/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1850/reactions",
    "total_count": 2,
    "+1": 2,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1850/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/516963201",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1850#issuecomment-516963201",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1850",
    "id": 516963201,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUxNjk2MzIwMQ==",
    "user": {
      "login": "nventuro",
      "id": 2530770,
      "node_id": "MDQ6VXNlcjI1MzA3NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2530770?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nventuro",
      "html_url": "https://github.com/nventuro",
      "followers_url": "https://api.github.com/users/nventuro/followers",
      "following_url": "https://api.github.com/users/nventuro/following{/other_user}",
      "gists_url": "https://api.github.com/users/nventuro/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nventuro/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nventuro/subscriptions",
      "organizations_url": "https://api.github.com/users/nventuro/orgs",
      "repos_url": "https://api.github.com/users/nventuro/repos",
      "events_url": "https://api.github.com/users/nventuro/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nventuro/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-07-31T18:19:27Z",
    "updated_at": "2019-07-31T18:19:27Z",
    "author_association": "CONTRIBUTOR",
    "body": "Hey @Austin-Williams, thanks for this suggestion!\r\n\r\n>The first would be: isEOA(address account, bytes32 hash, bytes memory signature). This would accept an arbitrary hash, verify the signature, use recover (from the ECDSA library)\r\n\r\nA long standing issue with `recover` is that receiving a hash may cause people to think that a hash and signature are proof enough, we should probably change this eventually so that the `recover` call hashes its input. See the warning on [`recover`'s docs](https://docs.openzeppelin.com/contracts/2.x/api/cryptography#ECDSA-recover-bytes32-bytes-).\r\n\r\n>However, there are also important cases where being an EOA is not enough -- and we also want to verify that a given address is not a one-time-use EOA (such as those created using Nick Johnson's method). \r\n\r\nCould you expand a bit on which cases these are?",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/516963201/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/516978762",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1850#issuecomment-516978762",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1850",
    "id": 516978762,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUxNjk3ODc2Mg==",
    "user": {
      "login": "Austin-Williams",
      "id": 8031584,
      "node_id": "MDQ6VXNlcjgwMzE1ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8031584?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Austin-Williams",
      "html_url": "https://github.com/Austin-Williams",
      "followers_url": "https://api.github.com/users/Austin-Williams/followers",
      "following_url": "https://api.github.com/users/Austin-Williams/following{/other_user}",
      "gists_url": "https://api.github.com/users/Austin-Williams/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Austin-Williams/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Austin-Williams/subscriptions",
      "organizations_url": "https://api.github.com/users/Austin-Williams/orgs",
      "repos_url": "https://api.github.com/users/Austin-Williams/repos",
      "events_url": "https://api.github.com/users/Austin-Williams/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Austin-Williams/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-07-31T19:01:20Z",
    "updated_at": "2019-08-15T20:37:43Z",
    "author_association": "NONE",
    "body": "> A long standing issue with recover is that receiving a hash may cause people to think that a hash and signature are proof enough, we should probably change this eventually so that the recover call hashes its input. See the warning on recover's docs.\r\n\r\nOh this is a really good point! For these functions we could use `ecrecover` directly if we aren't ready to change `recover`.\r\n\r\n> However, there are also important cases where [...] we also want to verify that a given address is not a one-time-use EOA [...] Could you expand a bit on which cases these are?\r\n\r\nYes. [Preventing the bypassing of timelock incentive mechanisms](https://blog.openzeppelin.com/bypassing-smart-contract-timelocks/) is an example where if the address you're storing (the `beneficiary` address) is a contract or a one-time-use EOA it can result in the timelock incentive mechanism being bypassed. So you want to be certain that the address you're storing is a non-one-time-use EOA.\r\n\r\nA general, high-level description is: if you want to prevent ETH/tokens from being sent directly to a contract, then you also probably want to prevent the ETH/tokens from being sent directly to a one-time-use EOA that provably can only send its ETH/tokens directly to a contract. Sending ETH/tokens to such an EOA can be _effectively the same_ as sending it directly to the contract.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/516978762/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/520009499",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1850#issuecomment-520009499",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1850",
    "id": 520009499,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUyMDAwOTQ5OQ==",
    "user": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-08-09T17:56:52Z",
    "updated_at": "2019-08-09T17:56:52Z",
    "author_association": "MEMBER",
    "body": ">Sending ETH/tokens to such an EOA can be effectively the same as sending it directly to the contract.\r\n\r\nIt's a great point. One way of thinking about this is that a one-time-use EOA is essentially a counterfactual contract.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/520009499/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/521788732",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1850#issuecomment-521788732",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1850",
    "id": 521788732,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUyMTc4ODczMg==",
    "user": {
      "login": "Austin-Williams",
      "id": 8031584,
      "node_id": "MDQ6VXNlcjgwMzE1ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8031584?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Austin-Williams",
      "html_url": "https://github.com/Austin-Williams",
      "followers_url": "https://api.github.com/users/Austin-Williams/followers",
      "following_url": "https://api.github.com/users/Austin-Williams/following{/other_user}",
      "gists_url": "https://api.github.com/users/Austin-Williams/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Austin-Williams/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Austin-Williams/subscriptions",
      "organizations_url": "https://api.github.com/users/Austin-Williams/orgs",
      "repos_url": "https://api.github.com/users/Austin-Williams/repos",
      "events_url": "https://api.github.com/users/Austin-Williams/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Austin-Williams/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-08-15T20:38:07Z",
    "updated_at": "2019-08-15T20:38:07Z",
    "author_association": "NONE",
    "body": "That's a good way of putting it.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/521788732/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/533152908",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1850#issuecomment-533152908",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1850",
    "id": 533152908,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUzMzE1MjkwOA==",
    "user": {
      "login": "crazyrabbitLTC",
      "id": 1938013,
      "node_id": "MDQ6VXNlcjE5MzgwMTM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1938013?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/crazyrabbitLTC",
      "html_url": "https://github.com/crazyrabbitLTC",
      "followers_url": "https://api.github.com/users/crazyrabbitLTC/followers",
      "following_url": "https://api.github.com/users/crazyrabbitLTC/following{/other_user}",
      "gists_url": "https://api.github.com/users/crazyrabbitLTC/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/crazyrabbitLTC/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/crazyrabbitLTC/subscriptions",
      "organizations_url": "https://api.github.com/users/crazyrabbitLTC/orgs",
      "repos_url": "https://api.github.com/users/crazyrabbitLTC/repos",
      "events_url": "https://api.github.com/users/crazyrabbitLTC/events{/privacy}",
      "received_events_url": "https://api.github.com/users/crazyrabbitLTC/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-09-19T14:20:31Z",
    "updated_at": "2019-09-19T14:20:31Z",
    "author_association": "CONTRIBUTOR",
    "body": "As a question @Austin-Williams what is the purpose of preventing ETH/tokens from being sent directly to a contract? Is there an example case? I'm curious because I've been thinking more of a future where users interact with wallets that are contracts so they can be meta-transaction enabled, rather than using a 'real' wallet like Metamask. I assume this would preclude these types of users from using these kinds of wallets? \r\nOf course, I guess maybe we could think of it in the opposite, like you want to be sure ETH/tokens can only go to contract addresses? ",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/533152908/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/533336085",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1850#issuecomment-533336085",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1850",
    "id": 533336085,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUzMzMzNjA4NQ==",
    "user": {
      "login": "Austin-Williams",
      "id": 8031584,
      "node_id": "MDQ6VXNlcjgwMzE1ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8031584?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Austin-Williams",
      "html_url": "https://github.com/Austin-Williams",
      "followers_url": "https://api.github.com/users/Austin-Williams/followers",
      "following_url": "https://api.github.com/users/Austin-Williams/following{/other_user}",
      "gists_url": "https://api.github.com/users/Austin-Williams/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Austin-Williams/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Austin-Williams/subscriptions",
      "organizations_url": "https://api.github.com/users/Austin-Williams/orgs",
      "repos_url": "https://api.github.com/users/Austin-Williams/repos",
      "events_url": "https://api.github.com/users/Austin-Williams/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Austin-Williams/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-09-19T22:44:47Z",
    "updated_at": "2019-09-19T22:51:32Z",
    "author_association": "NONE",
    "body": "@crazyrabbitLTC I generally agree that sending ETH from to/from contracts is a great thing.\r\n\r\nThere are very special cases when we'd want to prevent it. These are mostly cases where we are designing a mechanism in which we don't want the users to be able to make _strategic commitments_ (aka [strategic moves](https://en.wikipedia.org/wiki/Strategic_move)) that might undermine the mechanism.\r\n\r\nA specific example is when creating token timelocks for incentive-alignment. If the beneficiary of the token timelock is able to make strategic commitments, then they are able to [bypass the token timelock](https://blog.openzeppelin.com/bypassing-smart-contract-timelocks/).\r\n\r\nIn practice, strategic commitments are often very difficult to achieve (in the blockchain setting) without the use of a contract to enforce the commitment. So if, as a mechanism designer, you can prevent the use of contracts (in very particular settings) you can sometimes _effectively_ eliminate large classes of potentially malicious behavior.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/533336085/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/869186717",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1850#issuecomment-869186717",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1850",
    "id": 869186717,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg2OTE4NjcxNw==",
    "user": {
      "login": "AlbertSu123",
      "id": 30268067,
      "node_id": "MDQ6VXNlcjMwMjY4MDY3",
      "avatar_url": "https://avatars.githubusercontent.com/u/30268067?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/AlbertSu123",
      "html_url": "https://github.com/AlbertSu123",
      "followers_url": "https://api.github.com/users/AlbertSu123/followers",
      "following_url": "https://api.github.com/users/AlbertSu123/following{/other_user}",
      "gists_url": "https://api.github.com/users/AlbertSu123/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/AlbertSu123/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/AlbertSu123/subscriptions",
      "organizations_url": "https://api.github.com/users/AlbertSu123/orgs",
      "repos_url": "https://api.github.com/users/AlbertSu123/repos",
      "events_url": "https://api.github.com/users/AlbertSu123/events{/privacy}",
      "received_events_url": "https://api.github.com/users/AlbertSu123/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-06-27T16:03:39Z",
    "updated_at": "2021-06-27T16:03:53Z",
    "author_association": "NONE",
    "body": "Has this issue been resolved? Or is there another newer way to ensure that tokentimelock addresses are externally owned accounts and not contract addresses?",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/869186717/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/869245975",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1850#issuecomment-869245975",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1850",
    "id": 869245975,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg2OTI0NTk3NQ==",
    "user": {
      "login": "nventuro",
      "id": 2530770,
      "node_id": "MDQ6VXNlcjI1MzA3NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2530770?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nventuro",
      "html_url": "https://github.com/nventuro",
      "followers_url": "https://api.github.com/users/nventuro/followers",
      "following_url": "https://api.github.com/users/nventuro/following{/other_user}",
      "gists_url": "https://api.github.com/users/nventuro/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nventuro/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nventuro/subscriptions",
      "organizations_url": "https://api.github.com/users/nventuro/orgs",
      "repos_url": "https://api.github.com/users/nventuro/repos",
      "events_url": "https://api.github.com/users/nventuro/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nventuro/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-06-28T00:05:52Z",
    "updated_at": "2021-06-28T00:06:02Z",
    "author_association": "CONTRIBUTOR",
    "body": "Note that, if [EIP 3074](https://eips.ethereum.org/EIPS/eip-3074) were to come out (and it seems extremely likely that it will), this sort of check would be irrelevant (except to e.g. validate user input by checking addresses expected to be contracts indeed hold code).",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/869245975/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/869277285",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1850#issuecomment-869277285",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1850",
    "id": 869277285,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg2OTI3NzI4NQ==",
    "user": {
      "login": "Austin-Williams",
      "id": 8031584,
      "node_id": "MDQ6VXNlcjgwMzE1ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8031584?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Austin-Williams",
      "html_url": "https://github.com/Austin-Williams",
      "followers_url": "https://api.github.com/users/Austin-Williams/followers",
      "following_url": "https://api.github.com/users/Austin-Williams/following{/other_user}",
      "gists_url": "https://api.github.com/users/Austin-Williams/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Austin-Williams/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Austin-Williams/subscriptions",
      "organizations_url": "https://api.github.com/users/Austin-Williams/orgs",
      "repos_url": "https://api.github.com/users/Austin-Williams/repos",
      "events_url": "https://api.github.com/users/Austin-Williams/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Austin-Williams/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-06-28T01:55:08Z",
    "updated_at": "2021-06-28T18:15:30Z",
    "author_association": "NONE",
    "body": "I agree. As far as I can tell, EIP 3074 would make this class of timelocks always bypassable.\r\n\r\nUPDATE: Actually; no it won’t. Bypass can still be prevented by requiring the receiver is an EOA, even after 3074. The key is that the bypass only works if the receiver address is an *immutable* contract. With 3074, an EOA can always unAUTH whatever they’ve AUTHed, and so an EOA cannot be used to bypass a timelock even after 3074.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/869277285/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/869488435",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1850#issuecomment-869488435",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1850",
    "id": 869488435,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg2OTQ4ODQzNQ==",
    "user": {
      "login": "Amxx",
      "id": 2432299,
      "node_id": "MDQ6VXNlcjI0MzIyOTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2432299?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Amxx",
      "html_url": "https://github.com/Amxx",
      "followers_url": "https://api.github.com/users/Amxx/followers",
      "following_url": "https://api.github.com/users/Amxx/following{/other_user}",
      "gists_url": "https://api.github.com/users/Amxx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Amxx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Amxx/subscriptions",
      "organizations_url": "https://api.github.com/users/Amxx/orgs",
      "repos_url": "https://api.github.com/users/Amxx/repos",
      "events_url": "https://api.github.com/users/Amxx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Amxx/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-06-28T08:34:37Z",
    "updated_at": "2021-06-28T08:35:51Z",
    "author_association": "COLLABORATOR",
    "body": "I might me missing something, but I have a few question\r\n\r\n- Appart from checking tx.origin == msg.origin or doing crazy assumption about gasLimit, is it even possible to distinguish EOA calls from 3074 relayed calls ? They are designed to be indistinguishable\r\n- An address not having any code deployed is no guarantee ... it could very weel be the address of a contract expected to be deploy in the future. The only way to verify that an address is an EOA is to request a ECDSA signature\r\n- What is the issue why users using smart wallets instead of EOA ? Why would you prevent that.\r\n\r\nComposability is an amazing feature of ethereum and I'm not sure how rejecting an entier class of users would be of any benefit.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/869488435/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/869792423",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1850#issuecomment-869792423",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1850",
    "id": 869792423,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg2OTc5MjQyMw==",
    "user": {
      "login": "Austin-Williams",
      "id": 8031584,
      "node_id": "MDQ6VXNlcjgwMzE1ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8031584?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Austin-Williams",
      "html_url": "https://github.com/Austin-Williams",
      "followers_url": "https://api.github.com/users/Austin-Williams/followers",
      "following_url": "https://api.github.com/users/Austin-Williams/following{/other_user}",
      "gists_url": "https://api.github.com/users/Austin-Williams/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Austin-Williams/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Austin-Williams/subscriptions",
      "organizations_url": "https://api.github.com/users/Austin-Williams/orgs",
      "repos_url": "https://api.github.com/users/Austin-Williams/repos",
      "events_url": "https://api.github.com/users/Austin-Williams/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Austin-Williams/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-06-28T15:41:33Z",
    "updated_at": "2021-06-28T15:41:33Z",
    "author_association": "NONE",
    "body": "@Amxx see this article for motivation: https://blog.openzeppelin.com/bypassing-smart-contract-timelocks/\r\n\r\nTl;dr: the ability to require only-EOAs can be used to prevent users from making credible strategic commitments that can be used to bypass some economic mechanisms.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/869792423/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/869798318",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1850#issuecomment-869798318",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1850",
    "id": 869798318,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg2OTc5ODMxOA==",
    "user": {
      "login": "Austin-Williams",
      "id": 8031584,
      "node_id": "MDQ6VXNlcjgwMzE1ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8031584?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Austin-Williams",
      "html_url": "https://github.com/Austin-Williams",
      "followers_url": "https://api.github.com/users/Austin-Williams/followers",
      "following_url": "https://api.github.com/users/Austin-Williams/following{/other_user}",
      "gists_url": "https://api.github.com/users/Austin-Williams/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Austin-Williams/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Austin-Williams/subscriptions",
      "organizations_url": "https://api.github.com/users/Austin-Williams/orgs",
      "repos_url": "https://api.github.com/users/Austin-Williams/repos",
      "events_url": "https://api.github.com/users/Austin-Williams/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Austin-Williams/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-06-28T15:49:03Z",
    "updated_at": "2021-06-28T15:49:03Z",
    "author_association": "NONE",
    "body": "So even after 3074, one can verify whether an address is an EOA by requiring that it pass any two distinct signed messages when interacting with the contract. Then the target contract can verify that the two signed messages are distinct and that they both ecrecover to the same address.\r\n\r\nThis could also be done with a _single_ signed message, as long as the message itself is not chosen by the user (see article for details).",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/869798318/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/869803108",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1850#issuecomment-869803108",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1850",
    "id": 869803108,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg2OTgwMzEwOA==",
    "user": {
      "login": "Austin-Williams",
      "id": 8031584,
      "node_id": "MDQ6VXNlcjgwMzE1ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8031584?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Austin-Williams",
      "html_url": "https://github.com/Austin-Williams",
      "followers_url": "https://api.github.com/users/Austin-Williams/followers",
      "following_url": "https://api.github.com/users/Austin-Williams/following{/other_user}",
      "gists_url": "https://api.github.com/users/Austin-Williams/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Austin-Williams/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Austin-Williams/subscriptions",
      "organizations_url": "https://api.github.com/users/Austin-Williams/orgs",
      "repos_url": "https://api.github.com/users/Austin-Williams/repos",
      "events_url": "https://api.github.com/users/Austin-Williams/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Austin-Williams/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-06-28T15:55:28Z",
    "updated_at": "2021-06-28T15:55:28Z",
    "author_association": "NONE",
    "body": "In any case, I think this issue can be closed.\r\nIn the 2 years since I’ve opened I haven’t seen any demand for token timelocks that cannot be economically bypassed, so it’s probably safe to say that there is no need for this in OZ Contracts.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/869803108/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/870218306",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1850#issuecomment-870218306",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1850",
    "id": 870218306,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg3MDIxODMwNg==",
    "user": {
      "login": "AlbertSu123",
      "id": 30268067,
      "node_id": "MDQ6VXNlcjMwMjY4MDY3",
      "avatar_url": "https://avatars.githubusercontent.com/u/30268067?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/AlbertSu123",
      "html_url": "https://github.com/AlbertSu123",
      "followers_url": "https://api.github.com/users/AlbertSu123/followers",
      "following_url": "https://api.github.com/users/AlbertSu123/following{/other_user}",
      "gists_url": "https://api.github.com/users/AlbertSu123/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/AlbertSu123/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/AlbertSu123/subscriptions",
      "organizations_url": "https://api.github.com/users/AlbertSu123/orgs",
      "repos_url": "https://api.github.com/users/AlbertSu123/repos",
      "events_url": "https://api.github.com/users/AlbertSu123/events{/privacy}",
      "received_events_url": "https://api.github.com/users/AlbertSu123/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-06-29T04:17:18Z",
    "updated_at": "2021-06-29T04:17:18Z",
    "author_association": "NONE",
    "body": "In that case, what would be a possible(temporary) solution to the prevention of token time locks from being bypassed?",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/870218306/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/870247551",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1850#issuecomment-870247551",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1850",
    "id": 870247551,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg3MDI0NzU1MQ==",
    "user": {
      "login": "Austin-Williams",
      "id": 8031584,
      "node_id": "MDQ6VXNlcjgwMzE1ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8031584?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Austin-Williams",
      "html_url": "https://github.com/Austin-Williams",
      "followers_url": "https://api.github.com/users/Austin-Williams/followers",
      "following_url": "https://api.github.com/users/Austin-Williams/following{/other_user}",
      "gists_url": "https://api.github.com/users/Austin-Williams/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Austin-Williams/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Austin-Williams/subscriptions",
      "organizations_url": "https://api.github.com/users/Austin-Williams/orgs",
      "repos_url": "https://api.github.com/users/Austin-Williams/repos",
      "events_url": "https://api.github.com/users/Austin-Williams/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Austin-Williams/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-06-29T05:26:14Z",
    "updated_at": "2021-06-29T05:28:29Z",
    "author_association": "NONE",
    "body": "The simplest way I can think of: When you first register the recipient address with the timelock, make sure you have seen/verified a signed message (of your choosing) from that address before registering it.\r\n\r\nE.g.: Have them sign the message “Chancellor on brink of second bailout for banks”. If the message verifies, then the address that signed it is an EOA that cannot be used to bypass a timelock, and is safe to accept a recipient.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/870247551/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/870584024",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1850#issuecomment-870584024",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1850",
    "id": 870584024,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg3MDU4NDAyNA==",
    "user": {
      "login": "Amxx",
      "id": 2432299,
      "node_id": "MDQ6VXNlcjI0MzIyOTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2432299?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Amxx",
      "html_url": "https://github.com/Amxx",
      "followers_url": "https://api.github.com/users/Amxx/followers",
      "following_url": "https://api.github.com/users/Amxx/following{/other_user}",
      "gists_url": "https://api.github.com/users/Amxx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Amxx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Amxx/subscriptions",
      "organizations_url": "https://api.github.com/users/Amxx/orgs",
      "repos_url": "https://api.github.com/users/Amxx/repos",
      "events_url": "https://api.github.com/users/Amxx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Amxx/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-06-29T13:08:06Z",
    "updated_at": "2021-06-29T13:08:06Z",
    "author_association": "COLLABORATOR",
    "body": "I'd go further and say \"When you first register the recipient address with the timelock, make sure you have either seen/verified a signed message (of your choosing) from that address or verified that it is a legitimate contract to use as a personal smart wallet.\"",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/870584024/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/874293951",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1850#issuecomment-874293951",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1850",
    "id": 874293951,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg3NDI5Mzk1MQ==",
    "user": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-07-05T19:25:38Z",
    "updated_at": "2021-07-05T19:25:38Z",
    "author_association": "MEMBER",
    "body": "I agree with the recommendation to ask for a signed message. This can be encoded in the smart contract by inheriting `TokenTimelock` and checking the signature in the constructor, but we don't intend to have this by default in the library.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/874293951/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
