{
  "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/463",
  "repository_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts",
  "labels_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/463/labels{/name}",
  "comments_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/463/comments",
  "events_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/463/events",
  "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/463",
  "id": 259828391,
  "node_id": "MDU6SXNzdWUyNTk4MjgzOTE=",
  "number": 463,
  "title": "BurnableToken improvements",
  "user": {
    "login": "dani-jozsef",
    "id": 6108136,
    "node_id": "MDQ6VXNlcjYxMDgxMzY=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6108136?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/dani-jozsef",
    "html_url": "https://github.com/dani-jozsef",
    "followers_url": "https://api.github.com/users/dani-jozsef/followers",
    "following_url": "https://api.github.com/users/dani-jozsef/following{/other_user}",
    "gists_url": "https://api.github.com/users/dani-jozsef/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/dani-jozsef/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/dani-jozsef/subscriptions",
    "organizations_url": "https://api.github.com/users/dani-jozsef/orgs",
    "repos_url": "https://api.github.com/users/dani-jozsef/repos",
    "events_url": "https://api.github.com/users/dani-jozsef/events{/privacy}",
    "received_events_url": "https://api.github.com/users/dani-jozsef/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 503650966,
      "node_id": "MDU6TGFiZWw1MDM2NTA5NjY=",
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/labels/good%20first%20issue",
      "name": "good first issue",
      "color": "0e8a16",
      "default": true,
      "description": "Low hanging fruit for new contributors to get involved!"
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": {
    "login": "ajsantander",
    "id": 550409,
    "node_id": "MDQ6VXNlcjU1MDQwOQ==",
    "avatar_url": "https://avatars.githubusercontent.com/u/550409?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/ajsantander",
    "html_url": "https://github.com/ajsantander",
    "followers_url": "https://api.github.com/users/ajsantander/followers",
    "following_url": "https://api.github.com/users/ajsantander/following{/other_user}",
    "gists_url": "https://api.github.com/users/ajsantander/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/ajsantander/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/ajsantander/subscriptions",
    "organizations_url": "https://api.github.com/users/ajsantander/orgs",
    "repos_url": "https://api.github.com/users/ajsantander/repos",
    "events_url": "https://api.github.com/users/ajsantander/events{/privacy}",
    "received_events_url": "https://api.github.com/users/ajsantander/received_events",
    "type": "User",
    "site_admin": false
  },
  "assignees": [
    {
      "login": "spalladino",
      "id": 429604,
      "node_id": "MDQ6VXNlcjQyOTYwNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/429604?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/spalladino",
      "html_url": "https://github.com/spalladino",
      "followers_url": "https://api.github.com/users/spalladino/followers",
      "following_url": "https://api.github.com/users/spalladino/following{/other_user}",
      "gists_url": "https://api.github.com/users/spalladino/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/spalladino/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/spalladino/subscriptions",
      "organizations_url": "https://api.github.com/users/spalladino/orgs",
      "repos_url": "https://api.github.com/users/spalladino/repos",
      "events_url": "https://api.github.com/users/spalladino/events{/privacy}",
      "received_events_url": "https://api.github.com/users/spalladino/received_events",
      "type": "User",
      "site_admin": false
    },
    {
      "login": "ajsantander",
      "id": 550409,
      "node_id": "MDQ6VXNlcjU1MDQwOQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/550409?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajsantander",
      "html_url": "https://github.com/ajsantander",
      "followers_url": "https://api.github.com/users/ajsantander/followers",
      "following_url": "https://api.github.com/users/ajsantander/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajsantander/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajsantander/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajsantander/subscriptions",
      "organizations_url": "https://api.github.com/users/ajsantander/orgs",
      "repos_url": "https://api.github.com/users/ajsantander/repos",
      "events_url": "https://api.github.com/users/ajsantander/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajsantander/received_events",
      "type": "User",
      "site_admin": false
    }
  ],
  "milestone": null,
  "comments": 7,
  "created_at": "2017-09-22T14:13:03Z",
  "updated_at": "2018-04-11T19:15:38Z",
  "closed_at": "2018-04-11T19:15:33Z",
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "In my opinion the _BurnableToken_ implementation is not quite up to the standards of OpenZeppelin. My issues with it are:\r\n\r\n- It inherits from _StandardToken_ as opposed to _BasicToken_, while not using any of the added functionality. I suggest either implementing _burnFrom()_, or changing the ancestor to _BasicToken_.\r\n\r\n- _burn()_ does not have a return value, and misuses _assert()_. Generally, _assert()_ should only be used in cases where a false condition is theoretically impossible, as a guard of last resort. So additional _require()_ statements should be added to check if the amount to be burned is not greater than the amount of token available in the first place. Also, since there is a possibility that the function will throw, a _(bool success)_ should be returned as per solidity best practices.",
  "closed_by": {
    "login": "spalladino",
    "id": 429604,
    "node_id": "MDQ6VXNlcjQyOTYwNA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/429604?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/spalladino",
    "html_url": "https://github.com/spalladino",
    "followers_url": "https://api.github.com/users/spalladino/followers",
    "following_url": "https://api.github.com/users/spalladino/following{/other_user}",
    "gists_url": "https://api.github.com/users/spalladino/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/spalladino/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/spalladino/subscriptions",
    "organizations_url": "https://api.github.com/users/spalladino/orgs",
    "repos_url": "https://api.github.com/users/spalladino/repos",
    "events_url": "https://api.github.com/users/spalladino/events{/privacy}",
    "received_events_url": "https://api.github.com/users/spalladino/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/463/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/463/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/331462304",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/463#issuecomment-331462304",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/463",
    "id": 331462304,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzMTQ2MjMwNA==",
    "user": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-09-22T14:26:45Z",
    "updated_at": "2017-09-22T14:26:45Z",
    "author_association": "MEMBER",
    "body": "Thanks for the feedback @daniel-jozsef!\r\n\r\nAgree with changing the ancestor to `BasicToken`. Do you want to submit a PR with this change?\r\n\r\nWith respect to `assert`, for anyone reading, it's hidden under `SafeMath.sub`. I agree that it doesn't seem correct. I was just discussing yesterday whether `assert` or `require` would be the correct semantics for `SafeMath`. I'm going to open a separate issue for this more general problem.\r\n\r\nI've never heard of the Solidity best practice of returning a `bool success`. Is this written down somewhere? In fact, we consider boolean return values problematic because they often go unchecked. I would agree that it's the pattern in ERC20, but `burn` doesn't necessarily have to be consistent with that.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/331462304/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/331483237",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/463#issuecomment-331483237",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/463",
    "id": 331483237,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzMTQ4MzIzNw==",
    "user": {
      "login": "dani-jozsef",
      "id": 6108136,
      "node_id": "MDQ6VXNlcjYxMDgxMzY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6108136?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dani-jozsef",
      "html_url": "https://github.com/dani-jozsef",
      "followers_url": "https://api.github.com/users/dani-jozsef/followers",
      "following_url": "https://api.github.com/users/dani-jozsef/following{/other_user}",
      "gists_url": "https://api.github.com/users/dani-jozsef/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dani-jozsef/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dani-jozsef/subscriptions",
      "organizations_url": "https://api.github.com/users/dani-jozsef/orgs",
      "repos_url": "https://api.github.com/users/dani-jozsef/repos",
      "events_url": "https://api.github.com/users/dani-jozsef/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dani-jozsef/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-09-22T15:41:06Z",
    "updated_at": "2017-09-22T16:15:42Z",
    "author_association": "NONE",
    "body": "I think assert is correct in SafeMath, as it is checking for under-, and overflows. It's a technical check for a technical limitation.\r\n\r\nBurnableToken, however, relies on the underflow protection to do a _semantic_ check of its inputs, which I see as bad practice. There should either be a require call _in the burn() function_ to validate user input, or logic to _burn the available amount, but not more_ in case the amount requested to be burned is higher than the amount available.\r\n\r\nAs for returning _bool_, correct me if I'm wrong, but afaik Solidity exceptions do not bubble up between smart contracts.\r\n\r\nIf I call into a different contract and it throws, it reverts its own state changes, but not those of its caller. Which means without a return value, there is no way to tell at all whether a call has succeeded or failed.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/331483237/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/331590200",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/463#issuecomment-331590200",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/463",
    "id": 331590200,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzMTU5MDIwMA==",
    "user": {
      "login": "rstormsf",
      "id": 9360827,
      "node_id": "MDQ6VXNlcjkzNjA4Mjc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9360827?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rstormsf",
      "html_url": "https://github.com/rstormsf",
      "followers_url": "https://api.github.com/users/rstormsf/followers",
      "following_url": "https://api.github.com/users/rstormsf/following{/other_user}",
      "gists_url": "https://api.github.com/users/rstormsf/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rstormsf/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rstormsf/subscriptions",
      "organizations_url": "https://api.github.com/users/rstormsf/orgs",
      "repos_url": "https://api.github.com/users/rstormsf/repos",
      "events_url": "https://api.github.com/users/rstormsf/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rstormsf/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-09-23T00:37:23Z",
    "updated_at": "2017-09-23T00:45:26Z",
    "author_association": "CONTRIBUTOR",
    "body": "`assert` vs `require` \r\nAs I understand, based on solidity documentation, `require` should be used for checking external calls.\r\n\r\n`assert` should be used for internal validation checks.\r\n\r\nPlease correct me if I’m wrong.\r\n\r\n\r\n> The assert function should only be used to test for internal errors, and to check invariants. The require function should be used to ensure valid conditions, such as inputs, or contract state variables are met, or to validate return values from calls to external contracts. \r\n\r\n\r\nhttps://solidity.readthedocs.io/en/develop/control-structures.html#error-handling-assert-require-revert-and-exceptions\r\n\r\n@daniel-jozsef \r\n> If I call into a different contract and it throws, it reverts its own state changes, but not those of its caller. Which means without a return value, there is no way to tell at all whether a call has succeeded or failed.\r\n\r\nI believe that the original caller's contract will also be failed.\r\nProof: https://remix.ethereum.org/#gist=86e1275fa3cf42c2dff9f80924e3ea03&version=soljson-v0.4.17+commit.bdeb9e52.js\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/331590200/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/331824774",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/463#issuecomment-331824774",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/463",
    "id": 331824774,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzMTgyNDc3NA==",
    "user": {
      "login": "dani-jozsef",
      "id": 6108136,
      "node_id": "MDQ6VXNlcjYxMDgxMzY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6108136?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dani-jozsef",
      "html_url": "https://github.com/dani-jozsef",
      "followers_url": "https://api.github.com/users/dani-jozsef/followers",
      "following_url": "https://api.github.com/users/dani-jozsef/following{/other_user}",
      "gists_url": "https://api.github.com/users/dani-jozsef/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dani-jozsef/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dani-jozsef/subscriptions",
      "organizations_url": "https://api.github.com/users/dani-jozsef/orgs",
      "repos_url": "https://api.github.com/users/dani-jozsef/repos",
      "events_url": "https://api.github.com/users/dani-jozsef/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dani-jozsef/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-09-25T09:19:05Z",
    "updated_at": "2017-09-25T09:23:46Z",
    "author_association": "NONE",
    "body": "Okay apparently I was misinformed on exception handling in the EVM, so I did some extra reading. (Still confused about a few things, honestly...)\r\n\r\n> When exceptions happen in a sub-call, they “bubble up” (i.e. exceptions are rethrown) automatically. Exceptions to this rule are send and the low-level functions call, delegatecall and callcode – those return false in case of an exception instead of “bubbling up”. (from the Solidity 0.4.18 docs)\r\n\r\nApparently errors do not bubble up through call, delegatecall and callcode. Which, as far as I understand, means all cross-contract calls, ie. the only time an error does bubble up is when calling a function on _this_.\r\n\r\nLet me run this test on a real blockchain, I recall something about the testrpc behaving differently...",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/331824774/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/336267525",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/463#issuecomment-336267525",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/463",
    "id": 336267525,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzNjI2NzUyNQ==",
    "user": {
      "login": "Qqwy",
      "id": 5345745,
      "node_id": "MDQ6VXNlcjUzNDU3NDU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5345745?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Qqwy",
      "html_url": "https://github.com/Qqwy",
      "followers_url": "https://api.github.com/users/Qqwy/followers",
      "following_url": "https://api.github.com/users/Qqwy/following{/other_user}",
      "gists_url": "https://api.github.com/users/Qqwy/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Qqwy/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Qqwy/subscriptions",
      "organizations_url": "https://api.github.com/users/Qqwy/orgs",
      "repos_url": "https://api.github.com/users/Qqwy/repos",
      "events_url": "https://api.github.com/users/Qqwy/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Qqwy/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-10-12T21:04:58Z",
    "updated_at": "2017-10-12T21:04:58Z",
    "author_association": "NONE",
    "body": "> It inherits from StandardToken as opposed to BasicToken, while not using any of the added functionality. I suggest either implementing burnFrom(), or changing the ancestor to BasicToken.\r\n\r\nI think this third option is the most versatile one: Have `BurnableToken` inherit from `BasicToken`, but also have an  `ApprovedBurnableToken` that inherits from both `BurnableToken` and `StandardToken` and implements the `burnFrom()` function.\r\n\r\nThis would allow people that use the library to pick the exact granularity of functionality they require for their projects.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/336267525/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/336268559",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/463#issuecomment-336268559",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/463",
    "id": 336268559,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzNjI2ODU1OQ==",
    "user": {
      "login": "Qqwy",
      "id": 5345745,
      "node_id": "MDQ6VXNlcjUzNDU3NDU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5345745?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Qqwy",
      "html_url": "https://github.com/Qqwy",
      "followers_url": "https://api.github.com/users/Qqwy/followers",
      "following_url": "https://api.github.com/users/Qqwy/following{/other_user}",
      "gists_url": "https://api.github.com/users/Qqwy/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Qqwy/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Qqwy/subscriptions",
      "organizations_url": "https://api.github.com/users/Qqwy/orgs",
      "repos_url": "https://api.github.com/users/Qqwy/repos",
      "events_url": "https://api.github.com/users/Qqwy/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Qqwy/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-10-12T21:07:18Z",
    "updated_at": "2017-10-12T21:07:18Z",
    "author_association": "NONE",
    "body": "@daniel-jozsef Important here (with how thrown errors bubble up) is IIRC also a possible difference with how Solidity/the EVM currently works, and how it is expected to be altered and behave in the near future.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/336268559/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/355324354",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/463#issuecomment-355324354",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/463",
    "id": 355324354,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1NTMyNDM1NA==",
    "user": {
      "login": "ajsantander",
      "id": 550409,
      "node_id": "MDQ6VXNlcjU1MDQwOQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/550409?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajsantander",
      "html_url": "https://github.com/ajsantander",
      "followers_url": "https://api.github.com/users/ajsantander/followers",
      "following_url": "https://api.github.com/users/ajsantander/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajsantander/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajsantander/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajsantander/subscriptions",
      "organizations_url": "https://api.github.com/users/ajsantander/orgs",
      "repos_url": "https://api.github.com/users/ajsantander/repos",
      "events_url": "https://api.github.com/users/ajsantander/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajsantander/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-04T16:13:35Z",
    "updated_at": "2018-01-04T16:13:35Z",
    "author_association": "CONTRIBUTOR",
    "body": "@daniel-jozsef did you manage to implement any of this in a PR?",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/355324354/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
