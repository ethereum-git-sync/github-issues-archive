{
  "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2536",
  "repository_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts",
  "labels_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2536/labels{/name}",
  "comments_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2536/comments",
  "events_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2536/events",
  "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2536",
  "id": 815412164,
  "node_id": "MDU6SXNzdWU4MTU0MTIxNjQ=",
  "number": 2536,
  "title": "ERC1155Supply, an extension that keep track of totalSupply for ERC1155 tokens",
  "user": {
    "login": "Amxx",
    "id": 2432299,
    "node_id": "MDQ6VXNlcjI0MzIyOTk=",
    "avatar_url": "https://avatars.githubusercontent.com/u/2432299?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/Amxx",
    "html_url": "https://github.com/Amxx",
    "followers_url": "https://api.github.com/users/Amxx/followers",
    "following_url": "https://api.github.com/users/Amxx/following{/other_user}",
    "gists_url": "https://api.github.com/users/Amxx/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/Amxx/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/Amxx/subscriptions",
    "organizations_url": "https://api.github.com/users/Amxx/orgs",
    "repos_url": "https://api.github.com/users/Amxx/repos",
    "events_url": "https://api.github.com/users/Amxx/events{/privacy}",
    "received_events_url": "https://api.github.com/users/Amxx/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 1000207718,
      "node_id": "MDU6TGFiZWwxMDAwMjA3NzE4",
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/labels/contracts",
      "name": "contracts",
      "color": "1d76db",
      "default": false,
      "description": "Smart contract code."
    },
    {
      "id": 2725623999,
      "node_id": "MDU6TGFiZWwyNzI1NjIzOTk5",
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/labels/idea",
      "name": "idea",
      "color": "5319e7",
      "default": false,
      "description": ""
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 8,
  "created_at": "2021-02-24T12:01:04Z",
  "updated_at": "2022-01-07T14:50:37Z",
  "closed_at": "2021-07-13T23:37:41Z",
  "author_association": "COLLABORATOR",
  "active_lock_reason": null,
  "body": "**üßê Motivation**\r\nERC1155 supports a middle-ground between ERC20 (fungible) and ERC721 (unfungible) in which token are fungible within the same tokenId. Depending on the sum of all balances for a tokenId, the corresponding token can be seen as fungible or nonfungible. However, there is no on-onchain mechnism to keep track of this.\r\n\r\n**üìù Details**\r\nA `totalSupply(uint256 tokenId)`, similar to ERC20's `totalSupply`, but with a \"per tokenid\" result be provided. This would be usefull to distinguish between fongible and nonfongible assets. It also adds a `exists(uint256 tokenId)` function that returns weither the totalSupply is not null. This would be equivalent to checking weither the corresponding token exists.",
  "closed_by": {
    "login": "frangio",
    "id": 481465,
    "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
    "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/frangio",
    "html_url": "https://github.com/frangio",
    "followers_url": "https://api.github.com/users/frangio/followers",
    "following_url": "https://api.github.com/users/frangio/following{/other_user}",
    "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
    "organizations_url": "https://api.github.com/users/frangio/orgs",
    "repos_url": "https://api.github.com/users/frangio/repos",
    "events_url": "https://api.github.com/users/frangio/events{/privacy}",
    "received_events_url": "https://api.github.com/users/frangio/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2536/reactions",
    "total_count": 3,
    "+1": 2,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 1
  },
  "timeline_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2536/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/785455312",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2536#issuecomment-785455312",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2536",
    "id": 785455312,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc4NTQ1NTMxMg==",
    "user": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-02-24T23:11:17Z",
    "updated_at": "2021-02-24T23:11:17Z",
    "author_association": "MEMBER",
    "body": "This is similar to https://github.com/OpenZeppelin/openzeppelin-contracts/pull/2185, except that PR also offered a way to register a token id as existent even if it had no supply. That PR was motivated by the fact that OpenSea [seems to support](https://twitter.com/xanderatallah/status/1232124941425881089) an `exists(uint tokenId)` function, so I feel that we should do that here as well. It helps to have that concrete motivation to add this functionality.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/785455312/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/786030489",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2536#issuecomment-786030489",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2536",
    "id": 786030489,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc4NjAzMDQ4OQ==",
    "user": {
      "login": "Amxx",
      "id": 2432299,
      "node_id": "MDQ6VXNlcjI0MzIyOTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2432299?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Amxx",
      "html_url": "https://github.com/Amxx",
      "followers_url": "https://api.github.com/users/Amxx/followers",
      "following_url": "https://api.github.com/users/Amxx/following{/other_user}",
      "gists_url": "https://api.github.com/users/Amxx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Amxx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Amxx/subscriptions",
      "organizations_url": "https://api.github.com/users/Amxx/orgs",
      "repos_url": "https://api.github.com/users/Amxx/repos",
      "events_url": "https://api.github.com/users/Amxx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Amxx/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-02-25T16:29:36Z",
    "updated_at": "2021-02-25T16:29:36Z",
    "author_association": "COLLABORATOR",
    "body": "My proposal includes a `exists(uint256 tokenId)` function (I edited it to be more explicit). I did not, however, imagined having an additional `uint256 ‚Üí bool` mapping that would overload the exist function.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/786030489/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/786051275",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2536#issuecomment-786051275",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2536",
    "id": 786051275,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc4NjA1MTI3NQ==",
    "user": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-02-25T16:59:00Z",
    "updated_at": "2021-02-25T16:59:00Z",
    "author_association": "MEMBER",
    "body": "Yeah, I don't think the mapping is necessary, it adds to storage costs and it could be implemented by users by overriding `exists`.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/786051275/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/812518485",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2536#issuecomment-812518485",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2536",
    "id": 812518485,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgxMjUxODQ4NQ==",
    "user": {
      "login": "KaiRo-at",
      "id": 824140,
      "node_id": "MDQ6VXNlcjgyNDE0MA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/824140?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/KaiRo-at",
      "html_url": "https://github.com/KaiRo-at",
      "followers_url": "https://api.github.com/users/KaiRo-at/followers",
      "following_url": "https://api.github.com/users/KaiRo-at/following{/other_user}",
      "gists_url": "https://api.github.com/users/KaiRo-at/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/KaiRo-at/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/KaiRo-at/subscriptions",
      "organizations_url": "https://api.github.com/users/KaiRo-at/orgs",
      "repos_url": "https://api.github.com/users/KaiRo-at/repos",
      "events_url": "https://api.github.com/users/KaiRo-at/events{/privacy}",
      "received_events_url": "https://api.github.com/users/KaiRo-at/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-04-02T12:58:18Z",
    "updated_at": "2021-04-02T12:58:18Z",
    "author_association": "CONTRIBUTOR",
    "body": "> A `totalSupply(uint256 tokenId)`, similar to ERC20's `totalSupply`, but with a \"per tokenid\" result be provided.\r\n\r\nIn our Crypto stamp presale token contracts, we have an assetSupply(tokenId) for that, and a totalSupply() that gives the total amount of all tokens in the whole contract. The latter is interesting for some use cases (like ours), but could be problematic in gas usage in some cases as well. Just wanted to mention it as food for thought.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/812518485/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/812560885",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2536#issuecomment-812560885",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2536",
    "id": 812560885,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgxMjU2MDg4NQ==",
    "user": {
      "login": "Amxx",
      "id": 2432299,
      "node_id": "MDQ6VXNlcjI0MzIyOTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2432299?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Amxx",
      "html_url": "https://github.com/Amxx",
      "followers_url": "https://api.github.com/users/Amxx/followers",
      "following_url": "https://api.github.com/users/Amxx/following{/other_user}",
      "gists_url": "https://api.github.com/users/Amxx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Amxx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Amxx/subscriptions",
      "organizations_url": "https://api.github.com/users/Amxx/orgs",
      "repos_url": "https://api.github.com/users/Amxx/repos",
      "events_url": "https://api.github.com/users/Amxx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Amxx/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-04-02T14:44:28Z",
    "updated_at": "2021-04-02T14:44:28Z",
    "author_association": "COLLABORATOR",
    "body": "well, the beauty of function overloading and hooks makes it that you could, on the same contract, have a `totalSupply(uint256)` and a `totalSupply()`. The first one would return the supply of a particular tokenid, the second one for all token ids.\r\n\r\nI really think we should not include this second option in our codebase (as you said it yourself, it only apply to some specific usecases). But I'm confident our extension (which is optional) would not break your interface.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/812560885/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/877717663",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2536#issuecomment-877717663",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2536",
    "id": 877717663,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg3NzcxNzY2Mw==",
    "user": {
      "login": "SaulMoonves",
      "id": 28464781,
      "node_id": "MDQ6VXNlcjI4NDY0Nzgx",
      "avatar_url": "https://avatars.githubusercontent.com/u/28464781?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/SaulMoonves",
      "html_url": "https://github.com/SaulMoonves",
      "followers_url": "https://api.github.com/users/SaulMoonves/followers",
      "following_url": "https://api.github.com/users/SaulMoonves/following{/other_user}",
      "gists_url": "https://api.github.com/users/SaulMoonves/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/SaulMoonves/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SaulMoonves/subscriptions",
      "organizations_url": "https://api.github.com/users/SaulMoonves/orgs",
      "repos_url": "https://api.github.com/users/SaulMoonves/repos",
      "events_url": "https://api.github.com/users/SaulMoonves/events{/privacy}",
      "received_events_url": "https://api.github.com/users/SaulMoonves/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-07-10T23:43:47Z",
    "updated_at": "2021-07-10T23:43:47Z",
    "author_association": "NONE",
    "body": "The user could mistakenly or purposefully do two large-quantity mints of the same fungible ID to different addresses and have the derived total supply exceed what can be held in a uint256. You would not notice until one of the recipients did a transfer to the other and the quantity overflowed. I quickly looked at the standard and maybe I missed it, but I didn't see anything that said you couldn't mint more of an existing id, which would prevent this undesirable scenario.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/877717663/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/879473860",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2536#issuecomment-879473860",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2536",
    "id": 879473860,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg3OTQ3Mzg2MA==",
    "user": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-07-13T23:37:41Z",
    "updated_at": "2021-07-13T23:37:41Z",
    "author_association": "MEMBER",
    "body": "We forgot to close this issue which was implemented in #2697.\r\n\r\n--- \r\n\r\n@SaulMoonves The scenario you describe seems true, but is a problem only for vanilla `ERC1155`, and in fact `ERC1155Supply` would prevent this scenario as the mint would overflow directly. I'd suggest raising this problem over at https://github.com/ethereum/EIPs/issues/1155. ",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/879473860/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
