{
  "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2896",
  "repository_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts",
  "labels_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2896/labels{/name}",
  "comments_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2896/comments",
  "events_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2896/events",
  "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2896",
  "id": 1014460380,
  "node_id": "I_kwDOA9tCBs48d2_c",
  "number": 2896,
  "title": "Reward splitting proportional to token holdings",
  "user": {
    "login": "SharjeelSafdar",
    "id": 66178522,
    "node_id": "MDQ6VXNlcjY2MTc4NTIy",
    "avatar_url": "https://avatars.githubusercontent.com/u/66178522?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/SharjeelSafdar",
    "html_url": "https://github.com/SharjeelSafdar",
    "followers_url": "https://api.github.com/users/SharjeelSafdar/followers",
    "following_url": "https://api.github.com/users/SharjeelSafdar/following{/other_user}",
    "gists_url": "https://api.github.com/users/SharjeelSafdar/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/SharjeelSafdar/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/SharjeelSafdar/subscriptions",
    "organizations_url": "https://api.github.com/users/SharjeelSafdar/orgs",
    "repos_url": "https://api.github.com/users/SharjeelSafdar/repos",
    "events_url": "https://api.github.com/users/SharjeelSafdar/events{/privacy}",
    "received_events_url": "https://api.github.com/users/SharjeelSafdar/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 5,
  "created_at": "2021-10-03T17:02:30Z",
  "updated_at": "2021-12-26T21:30:11Z",
  "closed_at": null,
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "**üßê Motivation**\r\n\r\nA payment splitter that receives and releases payments in the form of an ERC20 token. While it uses a second ERC20 token to calculate the shares of shareholders instead of fixed shares at construction time.\r\n\r\n**üìù Details**\r\n\r\nCurrently, there is a payment splitter for ETH here in Openzeppelin. There are many people who have implemented an ERC20 payment splitter to split a payment among shareholders in the form of an ERC20 token by modifying OpenZeppelin's payment splitter for ETH. An example is [AirSwap](https://github.com/airswap/airswap-protocols/blob/main/source/converter/contracts/TokenPaymentSplitter.sol). But the list of shareholders and their shares are fixed at construction time.\r\n\r\nThis [ERC20 payment splitter](https://github.com/SharjeelSafdar/dapp-projects/blob/main/p6-erc20-payment-splitter/smartContracts/contracts/ERC20PaymentSplitter.sol) uses two ERC20 tokens. One token is the **Payment Token** which is used for receiving and splitting payments. The other is the **Shares Token**. Shares token ([ERC20Shares](https://github.com/SharjeelSafdar/dapp-projects/blob/main/p6-erc20-payment-splitter/smartContracts/contracts/ERC20Shares.sol)) is also an ERC20 token with some extended functionality. It snapshots its holders' balances and the total supply of the token when they change using [ERC20Snapshot](https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/extensions/ERC20Snapshot.sol). The ERC20 Payment Splitter uses these balance snapshots and the total supply snapshots as the shares held by addresses and the total shares respectively at different points of time. Whenever a payment is received, each user gets a part of the payment in proportion to her/his balance of Shares Token at that point in time. However, the user doesn't receive the payment automatically. The user can get all the accumulated pending payments anytime.\r\n\r\n**Benefits**\r\n\r\n1.  There is no need to add or remove shareholders.\r\n2.  The shareholders can exchange their shares at a DEX.\r\n3.  The same token can be used for both shareholding in a payment splitter and governance on a DAO.\r\n\r\n**Demonstration**\r\n\r\nI have created a [DApp](https://erc20-payment-splitter-demo.netlify.app/) for demonstration purposes. You must be on **Ropsten** network to use it.\r\nThe code for the contracts is [here](https://github.com/SharjeelSafdar/dapp-projects/tree/main/p6-erc20-payment-splitter/smartContracts/contracts).\r\n\r\nI am opening this issue to discuss if this ERC20PaymentSplitter is worth adding to this repo. Please, tell me if you find any problem or there is any room for improvement üòä.\r\n",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2896/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2896/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/933201377",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2896#issuecomment-933201377",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2896",
    "id": 933201377,
    "node_id": "IC_kwDOA9tCBs43n4Xh",
    "user": {
      "login": "Amxx",
      "id": 2432299,
      "node_id": "MDQ6VXNlcjI0MzIyOTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2432299?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Amxx",
      "html_url": "https://github.com/Amxx",
      "followers_url": "https://api.github.com/users/Amxx/followers",
      "following_url": "https://api.github.com/users/Amxx/following{/other_user}",
      "gists_url": "https://api.github.com/users/Amxx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Amxx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Amxx/subscriptions",
      "organizations_url": "https://api.github.com/users/Amxx/orgs",
      "repos_url": "https://api.github.com/users/Amxx/repos",
      "events_url": "https://api.github.com/users/Amxx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Amxx/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-10-04T07:03:10Z",
    "updated_at": "2021-10-04T07:03:10Z",
    "author_association": "COLLABORATOR",
    "body": "Hello @SharjeelSafdar \r\n\r\n[I did prototype something like this a few weeks ago](https://github.com/Amxx/openzeppelin-contracts/blob/archive/paymentsplitter/contracts/finance/TokenizedSplitter.sol).\r\n\r\nThe main difficulty we faces was that we wanted transfers of share tokens to not affect past rewards. This was achieved using release rebalancing during token transfer. I don't see your code doing that, which makes me wonder how your code would behave in such a situation.\r\nThe downside of this rebalancing approach is that it makes the splitter work with a single asset (ETH or one ERC20, ...) but not with multiple assets like your just-released ERC20 splitter. (from what I can see, your contract has a `_paymentToken` so that is similar)\r\n\r\nWe paused the work on this tokenized-splitter because we didn't have any specific user demands. I would love to know more about your usecase.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/933201377/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/935881252",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2896#issuecomment-935881252",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2896",
    "id": 935881252,
    "node_id": "IC_kwDOA9tCBs43yGok",
    "user": {
      "login": "SharjeelSafdar",
      "id": 66178522,
      "node_id": "MDQ6VXNlcjY2MTc4NTIy",
      "avatar_url": "https://avatars.githubusercontent.com/u/66178522?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/SharjeelSafdar",
      "html_url": "https://github.com/SharjeelSafdar",
      "followers_url": "https://api.github.com/users/SharjeelSafdar/followers",
      "following_url": "https://api.github.com/users/SharjeelSafdar/following{/other_user}",
      "gists_url": "https://api.github.com/users/SharjeelSafdar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/SharjeelSafdar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SharjeelSafdar/subscriptions",
      "organizations_url": "https://api.github.com/users/SharjeelSafdar/orgs",
      "repos_url": "https://api.github.com/users/SharjeelSafdar/repos",
      "events_url": "https://api.github.com/users/SharjeelSafdar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/SharjeelSafdar/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-10-06T09:58:27Z",
    "updated_at": "2021-10-06T09:58:27Z",
    "author_association": "NONE",
    "body": "Hi @Amxx,\r\n\r\nIn my use case, I want an ERC20 token that can be used for governance on a DAO. Also, I want to share the revenues among the holders of that governance token. In my case, I want to receive and release payments in the form of a single ERC20 token, specifically DAI.\r\n\r\nMy ERC20Shares token uses [ERC20Snapshot](https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/extensions/ERC20Snapshot.sol) under the hood to take snapshots of `totalSupply` and account balances. `ERC20PaymentSplitter` calls `_snapshot` method of `ERC20Snapshot` whenever it receives or releases a payment.\r\n\r\nMy `ERC20PaymentSplitter` currently supports only a single token for receiving and releasing payments. The other `_sharesToken` is just for tracking shares of accounts. However, it may be extended to support multiple payment tokens. But I think it would be better to create two contracts. One that supports a single payment token and another that can support multiple payment tokens.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/935881252/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/961500585",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2896#issuecomment-961500585",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2896",
    "id": 961500585,
    "node_id": "IC_kwDOA9tCBs45T1Wp",
    "user": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-11-04T23:11:16Z",
    "updated_at": "2021-11-04T23:11:16Z",
    "author_association": "MEMBER",
    "body": "@SharjeelSafdar We're interested in this sort of contract, but we feel we need more input from different real world use cases in order to understand what the best solution could look like.\r\n\r\nThe solution you propose here requires using ERC20Snapshot, and I'm not sure that's sufficiently useful. We're currently focusing our efforts more on ERC20Votes, which is more optimized and checkpoints are opt-in. On the other hand, because of the opt-in nature I don't think it's possible currently to implement proportional rewards for an ERC20Votes contract.\r\n\r\nSo the particular code you shared here is interesting but I don't think it meets the requirements for generality and usefulness that we expect in order to merge. But again, this is a problem space we're interested in and are looking for other ideas so please feel free to keep exploring and sharing!",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/961500585/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/986158417",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2896#issuecomment-986158417",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2896",
    "id": 986158417,
    "node_id": "IC_kwDOA9tCBs46x5VR",
    "user": {
      "login": "a17",
      "id": 11789971,
      "node_id": "MDQ6VXNlcjExNzg5OTcx",
      "avatar_url": "https://avatars.githubusercontent.com/u/11789971?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/a17",
      "html_url": "https://github.com/a17",
      "followers_url": "https://api.github.com/users/a17/followers",
      "following_url": "https://api.github.com/users/a17/following{/other_user}",
      "gists_url": "https://api.github.com/users/a17/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/a17/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/a17/subscriptions",
      "organizations_url": "https://api.github.com/users/a17/orgs",
      "repos_url": "https://api.github.com/users/a17/repos",
      "events_url": "https://api.github.com/users/a17/events{/privacy}",
      "received_events_url": "https://api.github.com/users/a17/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-12-05T03:12:46Z",
    "updated_at": "2021-12-05T03:12:46Z",
    "author_association": "NONE",
    "body": "I consider such ERC20 PaymentSplitter, which can make ERC20 token payments by using ```ERC20Snapshot``` mechanism for shares extraction, useful.\r\nEspecially extended with multiple payment tokens support. In form of any payment ERC20 token arg for ```receivePayment``` method (in @SharjeelSafdar contract).\r\nAnd also with support for one payment token its useful too. As example for building contracts for splitting stablecoins, weth payments and the like.\r\n\r\nI very like ```ERC20Votes```, but consider that ```ERC20Snapshot``` can be useful too. As example for dividend tokens or other token type which dont need voting support.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/986158417/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1001244162",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2896#issuecomment-1001244162",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2896",
    "id": 1001244162,
    "node_id": "IC_kwDOA9tCBs47rcYC",
    "user": {
      "login": "nanaknihal",
      "id": 1316898,
      "node_id": "MDQ6VXNlcjEzMTY4OTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1316898?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nanaknihal",
      "html_url": "https://github.com/nanaknihal",
      "followers_url": "https://api.github.com/users/nanaknihal/followers",
      "following_url": "https://api.github.com/users/nanaknihal/following{/other_user}",
      "gists_url": "https://api.github.com/users/nanaknihal/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nanaknihal/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nanaknihal/subscriptions",
      "organizations_url": "https://api.github.com/users/nanaknihal/orgs",
      "repos_url": "https://api.github.com/users/nanaknihal/repos",
      "events_url": "https://api.github.com/users/nanaknihal/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nanaknihal/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-12-26T21:30:10Z",
    "updated_at": "2021-12-26T21:30:10Z",
    "author_association": "NONE",
    "body": "[I made a contract like this which doesn't use ERC20Snapshot](https://github.com/nanaknihal/openzeppelin-contracts/blob/master/contracts/ERC20Dividends.sol) so is gas-efficient upon transfer. It has a couple tradeoffs which do not matter for my, or likely many other, use cases:\r\n\r\n- When somebody transfers shares and is still owed dividends, the contract pays out all owed dividends to them\r\n- Takes only one type of payment token (ability to take any token may be tough to add)\r\n- Has a fixed supply (this should be easily modifiable; I just didn't do it. Be careful with the _beforeTokenTransfer() function if burning is allowed as 0 token supply will cause a divide by zero error)\r\n\r\nI've tested it but don't guarantee anything (especially as I don't have much experience with automated testing); please don't trust it with a lot of money without doing more diligence!\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1001244162/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
