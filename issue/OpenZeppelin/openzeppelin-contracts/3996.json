{
  "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3996",
  "repository_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts",
  "labels_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3996/labels{/name}",
  "comments_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3996/comments",
  "events_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3996/events",
  "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3996",
  "id": 1556005489,
  "node_id": "I_kwDOA9tCBs5cvsJx",
  "number": 3996,
  "title": "ERC721 voting with dynamic voting power",
  "user": {
    "login": "RitzyDevBox",
    "id": 103006767,
    "node_id": "U_kgDOBiPCLw",
    "avatar_url": "https://avatars.githubusercontent.com/u/103006767?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/RitzyDevBox",
    "html_url": "https://github.com/RitzyDevBox",
    "followers_url": "https://api.github.com/users/RitzyDevBox/followers",
    "following_url": "https://api.github.com/users/RitzyDevBox/following{/other_user}",
    "gists_url": "https://api.github.com/users/RitzyDevBox/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/RitzyDevBox/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/RitzyDevBox/subscriptions",
    "organizations_url": "https://api.github.com/users/RitzyDevBox/orgs",
    "repos_url": "https://api.github.com/users/RitzyDevBox/repos",
    "events_url": "https://api.github.com/users/RitzyDevBox/events{/privacy}",
    "received_events_url": "https://api.github.com/users/RitzyDevBox/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 4953777396,
      "node_id": "LA_kwDOA9tCBs8AAAABJ0Sk9A",
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/labels/area:%20governance",
      "name": "area: governance",
      "color": "E7DA84",
      "default": false,
      "description": ""
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 9,
  "created_at": "2023-01-25T03:35:01Z",
  "updated_at": "2023-11-22T16:29:29Z",
  "closed_at": null,
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "**🧐 Motivation**\r\nI'm working on an NFT based DAO, currently I don't see a way to override the voting power for an individual NFT.  \r\n\r\n\r\n**📝 Details**\r\nExpose an Interface on in the ERC721Votes.sol\r\n\r\n      setVotingPower(uint256 tokenId) {\r\n      }\r\n\r\nUpdate the GetVotes and GetPastVotes to support dynamic voting power \r\n\r\n    function getVotes(address account) public view virtual override returns (uint256) {\r\n        \r\n        uint256[] memory ownedNFTs =_nftOwnerCheckpoints[account];\r\n         //Pseudo code\r\n        return ownedNFTs.sum(n =>_delegateNFTCheckpoints[n].latest())\r\n\r\n    }\r\n\r\n\r\n\r\n",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3996/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3996/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1403640759",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3996#issuecomment-1403640759",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3996",
    "id": 1403640759,
    "node_id": "IC_kwDOA9tCBs5Tqdu3",
    "user": {
      "login": "Amxx",
      "id": 2432299,
      "node_id": "MDQ6VXNlcjI0MzIyOTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2432299?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Amxx",
      "html_url": "https://github.com/Amxx",
      "followers_url": "https://api.github.com/users/Amxx/followers",
      "following_url": "https://api.github.com/users/Amxx/following{/other_user}",
      "gists_url": "https://api.github.com/users/Amxx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Amxx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Amxx/subscriptions",
      "organizations_url": "https://api.github.com/users/Amxx/orgs",
      "repos_url": "https://api.github.com/users/Amxx/repos",
      "events_url": "https://api.github.com/users/Amxx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Amxx/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-01-25T13:42:45Z",
    "updated_at": "2023-01-25T13:42:45Z",
    "author_association": "COLLABORATOR",
    "body": "Hello @RitzyDevBox \r\n\r\n> function getVotes(address account) public view virtual override returns (uint256) {\r\n>     \r\n>     uint256[] memory ownedNFTs =_nftOwnerCheckpoints[account];\r\n>      //Pseudo code\r\n>     return ownedNFTs.sum(n =>_delegateNFTCheckpoints[n].latest())\r\n> \r\n> }\r\n\r\nThe `ownedNFTs` is an unbounded array, that might be arbitrarily expensive to fetch\r\nThe `sum` part is also arbitrarily expensive to read/compute.\r\n\r\nWhile this approach is technically possible, it would result in very expensive voting, and could cause DOS issues when the cost of voting becomes greater then the size of a block.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1403640759/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1403877362",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3996#issuecomment-1403877362",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3996",
    "id": 1403877362,
    "node_id": "IC_kwDOA9tCBs5TrXfy",
    "user": {
      "login": "RitzyDevBox",
      "id": 103006767,
      "node_id": "U_kgDOBiPCLw",
      "avatar_url": "https://avatars.githubusercontent.com/u/103006767?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/RitzyDevBox",
      "html_url": "https://github.com/RitzyDevBox",
      "followers_url": "https://api.github.com/users/RitzyDevBox/followers",
      "following_url": "https://api.github.com/users/RitzyDevBox/following{/other_user}",
      "gists_url": "https://api.github.com/users/RitzyDevBox/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/RitzyDevBox/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/RitzyDevBox/subscriptions",
      "organizations_url": "https://api.github.com/users/RitzyDevBox/orgs",
      "repos_url": "https://api.github.com/users/RitzyDevBox/repos",
      "events_url": "https://api.github.com/users/RitzyDevBox/events{/privacy}",
      "received_events_url": "https://api.github.com/users/RitzyDevBox/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-01-25T16:22:13Z",
    "updated_at": "2023-01-25T16:22:13Z",
    "author_association": "NONE",
    "body": "The DDOS would be user specific, so only that particular user wouldn't be\nable to vote.\n\nPotentially this can be solved by setting a hard cap on the number of NFTs\nowned by the user, and creating it as a configuration parameter, and\nbreaking it out into a separate contract.\n\nI need to think on this more. I may have to write this anyway so I'll\nprobably create a PR for this after I do more research\n\nOn Wed, Jan 25, 2023, 8:42 AM Hadrien Croubois ***@***.***>\nwrote:\n\n> Hello @RitzyDevBox <https://github.com/RitzyDevBox>\n>\n> function getVotes(address account) public view virtual override returns\n> (uint256) {\n>\n> uint256[] memory ownedNFTs =_nftOwnerCheckpoints[account];\n>  //Pseudo code\n> return ownedNFTs.sum(n =>_delegateNFTCheckpoints[n].latest())\n>\n> }\n>\n> The ownedNFTs is an unbounded array, that might be arbitrarily expensive\n> to fetch\n> The sum part is also arbitrarily expensive to read/compute.\n>\n> While this approach is technically possible, it would result in very\n> expensive voting, and could cause DOS issues when the cost of voting\n> becomes greater then the size of a block.\n>\n> —\n> Reply to this email directly, view it on GitHub\n> <https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3996#issuecomment-1403640759>,\n> or unsubscribe\n> <https://github.com/notifications/unsubscribe-auth/AYR4EL2I7YXY7I5W4BSS5ODWUEUWDANCNFSM6AAAAAAUF225VM>\n> .\n> You are receiving this because you were mentioned.Message ID:\n> ***@***.***>\n>\n",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1403877362/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1405375445",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3996#issuecomment-1405375445",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3996",
    "id": 1405375445,
    "node_id": "IC_kwDOA9tCBs5TxFPV",
    "user": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-01-26T17:49:55Z",
    "updated_at": "2023-01-26T17:54:40Z",
    "author_association": "MEMBER",
    "body": "The right way to do this would be to use the `params` system. The user would call `voteWithParams` where the parameters are their owned token IDs they want to vote with. The array of token ids is iterated to check the ownership, compute the voting power, and validate that it hasn't been used to vote for the particular proposal yet.\r\n\r\nThis works because the params array doesn't need to include all owned token IDs, and a token owner can vote multiple times with different batches of tokens if the array is so large that voting would run out of gas.\r\n\r\nThis Governor extension would also be valuable because it allows voting with a standard non vote-enabled ERC721 token, which are cheaper to transfer, and doesn't require an upgrade to pre-existing tokens.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1405375445/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1406007294",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3996#issuecomment-1406007294",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3996",
    "id": 1406007294,
    "node_id": "IC_kwDOA9tCBs5Tzff-",
    "user": {
      "login": "RitzyDevBox",
      "id": 103006767,
      "node_id": "U_kgDOBiPCLw",
      "avatar_url": "https://avatars.githubusercontent.com/u/103006767?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/RitzyDevBox",
      "html_url": "https://github.com/RitzyDevBox",
      "followers_url": "https://api.github.com/users/RitzyDevBox/followers",
      "following_url": "https://api.github.com/users/RitzyDevBox/following{/other_user}",
      "gists_url": "https://api.github.com/users/RitzyDevBox/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/RitzyDevBox/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/RitzyDevBox/subscriptions",
      "organizations_url": "https://api.github.com/users/RitzyDevBox/orgs",
      "repos_url": "https://api.github.com/users/RitzyDevBox/repos",
      "events_url": "https://api.github.com/users/RitzyDevBox/events{/privacy}",
      "received_events_url": "https://api.github.com/users/RitzyDevBox/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-01-27T04:31:34Z",
    "updated_at": "2023-01-27T04:32:08Z",
    "author_association": "NONE",
    "body": "params would work however since voting would potentially be transition to tokenId, the interface for has voted should be updated with a `bytes calldata params` as well\r\n\r\n    `function hasVoted(uint256 proposalId, address account, bytes calldata params) public view virtual returns (bool);`\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1406007294/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1406063458",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3996#issuecomment-1406063458",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3996",
    "id": 1406063458,
    "node_id": "IC_kwDOA9tCBs5TztNi",
    "user": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-01-27T06:08:34Z",
    "updated_at": "2023-01-27T06:08:34Z",
    "author_association": "MEMBER",
    "body": "I see. Changing that breaks compatibility. In my opinion `hasVoted` should be left as is. It's not really used to determine if an account can vote again so it's merely informational.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1406063458/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1407203978",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3996#issuecomment-1407203978",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3996",
    "id": 1407203978,
    "node_id": "IC_kwDOA9tCBs5T4DqK",
    "user": {
      "login": "RitzyDevBox",
      "id": 103006767,
      "node_id": "U_kgDOBiPCLw",
      "avatar_url": "https://avatars.githubusercontent.com/u/103006767?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/RitzyDevBox",
      "html_url": "https://github.com/RitzyDevBox",
      "followers_url": "https://api.github.com/users/RitzyDevBox/followers",
      "following_url": "https://api.github.com/users/RitzyDevBox/following{/other_user}",
      "gists_url": "https://api.github.com/users/RitzyDevBox/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/RitzyDevBox/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/RitzyDevBox/subscriptions",
      "organizations_url": "https://api.github.com/users/RitzyDevBox/orgs",
      "repos_url": "https://api.github.com/users/RitzyDevBox/repos",
      "events_url": "https://api.github.com/users/RitzyDevBox/events{/privacy}",
      "received_events_url": "https://api.github.com/users/RitzyDevBox/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-01-28T00:02:41Z",
    "updated_at": "2023-01-28T00:22:26Z",
    "author_association": "NONE",
    "body": "There are a few more issues related to dynamic voting power.\r\n\r\nThe weight resolution is wrong, since params requires to option of partial votes per NFT\r\n        \r\n        uint256 weight = _getVotes(account, proposal.voteStart.getDeadline(), params);\r\n        _countVote(proposalId, account, support, weight, params);\r\n\r\nAlso this will run into issues for:\r\n\r\n        function _getVotingUnits(address) internal view virtual returns (uint256);\r\n\r\nSince we're required to calculate the voting by the address.  This can lead to Denial of Service, when attempting to delegate votes.\r\n\r\nI think Ideally this might be suited for a better module.   There are a few related issues.\r\n\r\n1.  User's cannot Delegate a single NFT.  (NFT delegation is common for the gaming industry people lend their nfts for a share of the profits)\r\n2.  User voting is currently all or none.\r\n\r\nI've solved this problem by having an external position manager contract.  However that the way I'm doing position management is unique to my case as I do not require the checkpoint history all voting is dependent on the live environment. \r\n\r\nI've also modified _countVote to return the weight instead, (so this emits voting weights properly), internally this is calculated from tokens position instead of the accounts full position.  \r\n",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1407203978/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1407512434",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3996#issuecomment-1407512434",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3996",
    "id": 1407512434,
    "node_id": "IC_kwDOA9tCBs5T5O9y",
    "user": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-01-28T23:39:59Z",
    "updated_at": "2023-01-28T23:39:59Z",
    "author_association": "MEMBER",
    "body": "> The weight resolution is wrong, since params requires to option of partial votes per NFT\r\n\r\nCan you explain this further? I didn't understand.\r\n\r\n> Also this will run into issues for: `_getVotingUnits`\r\n\r\n`_getVotingUnits` is used for vote-tracking in the token itself. The suggestion here is to make a Governor module, not an ERC721 extension.\r\n\r\nFeel free to share links to the code you're talking about.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1407512434/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1407558708",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3996#issuecomment-1407558708",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3996",
    "id": 1407558708,
    "node_id": "IC_kwDOA9tCBs5T5aQ0",
    "user": {
      "login": "RitzyDevBox",
      "id": 103006767,
      "node_id": "U_kgDOBiPCLw",
      "avatar_url": "https://avatars.githubusercontent.com/u/103006767?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/RitzyDevBox",
      "html_url": "https://github.com/RitzyDevBox",
      "followers_url": "https://api.github.com/users/RitzyDevBox/followers",
      "following_url": "https://api.github.com/users/RitzyDevBox/following{/other_user}",
      "gists_url": "https://api.github.com/users/RitzyDevBox/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/RitzyDevBox/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/RitzyDevBox/subscriptions",
      "organizations_url": "https://api.github.com/users/RitzyDevBox/orgs",
      "repos_url": "https://api.github.com/users/RitzyDevBox/repos",
      "events_url": "https://api.github.com/users/RitzyDevBox/events{/privacy}",
      "received_events_url": "https://api.github.com/users/RitzyDevBox/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-01-29T04:28:00Z",
    "updated_at": "2023-01-29T04:28:00Z",
    "author_association": "NONE",
    "body": "Hmm,  I was trying to follow the existing interface too literally. I was treating `GetVotes(account)` as a way to get the total voting power for a user.  However with the current architecture this would lead to DOS\r\n\r\nSome architecture changes may improve gas though: shift count vote to return the weight will this way the params don't have to get parsed twice\r\n\r\n    function _castVote(\r\n        uint256 proposalId,\r\n        address account,\r\n        uint8 support,\r\n        string memory reason,\r\n        bytes memory params\r\n    ) internal virtual returns (uint256) {\r\n        ProposalCore storage proposal = _proposals[proposalId];\r\n        require(state(proposalId) == ProposalState.Active, \"Governor: vote not currently active\");\r\n \r\n        //move the logic for obtaining the weight into _count vote\r\n        //uint256 weight = _getVotes(account, proposal.voteStart.getDeadline(), params);\r\n        uint256 weight = _countVote(proposalId, account, support, weight, params);\r\n\r\n        if (params.length == 0) {\r\n            emit VoteCast(account, proposalId, support, weight , reason);\r\n        } else {\r\n            emit VoteCastWithParams(account, proposalId, support, weight , reason, params);\r\n        }\r\n\r\n        return weight;\r\n    }\r\n\r\nThe vote seems like it might be better to be determined by the vote count instead, since NFT voting is partial voting. and \r\n\r\nThe way I have things working currently is.  Voting Power is loosly coupled from the NFT.  It's \r\n\r\n1. An external position manager which handles voting power.\r\n2. the position manager handles tracking via the User total votes and the NFT itself.\r\n      \r\n\r\n\r\n\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1407558708/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1823095452",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3996#issuecomment-1823095452",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3996",
    "id": 1823095452,
    "node_id": "IC_kwDOA9tCBs5sqjqc",
    "user": {
      "login": "Danielfisseha",
      "id": 148891563,
      "node_id": "U_kgDOCN_nqw",
      "avatar_url": "https://avatars.githubusercontent.com/u/148891563?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Danielfisseha",
      "html_url": "https://github.com/Danielfisseha",
      "followers_url": "https://api.github.com/users/Danielfisseha/followers",
      "following_url": "https://api.github.com/users/Danielfisseha/following{/other_user}",
      "gists_url": "https://api.github.com/users/Danielfisseha/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Danielfisseha/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Danielfisseha/subscriptions",
      "organizations_url": "https://api.github.com/users/Danielfisseha/orgs",
      "repos_url": "https://api.github.com/users/Danielfisseha/repos",
      "events_url": "https://api.github.com/users/Danielfisseha/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Danielfisseha/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-11-22T16:29:28Z",
    "updated_at": "2023-11-22T16:29:28Z",
    "author_association": "NONE",
    "body": "**bold**### title###",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1823095452/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
