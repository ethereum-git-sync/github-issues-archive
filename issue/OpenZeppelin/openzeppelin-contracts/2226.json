{
  "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2226",
  "repository_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts",
  "labels_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2226/labels{/name}",
  "comments_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2226/comments",
  "events_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2226/events",
  "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2226",
  "id": 613296662,
  "node_id": "MDU6SXNzdWU2MTMyOTY2NjI=",
  "number": 2226,
  "title": "ERC777 mint fails when target is a smart contract not ERC1820 registered",
  "user": {
    "login": "Amxx",
    "id": 2432299,
    "node_id": "MDQ6VXNlcjI0MzIyOTk=",
    "avatar_url": "https://avatars.githubusercontent.com/u/2432299?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/Amxx",
    "html_url": "https://github.com/Amxx",
    "followers_url": "https://api.github.com/users/Amxx/followers",
    "following_url": "https://api.github.com/users/Amxx/following{/other_user}",
    "gists_url": "https://api.github.com/users/Amxx/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/Amxx/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/Amxx/subscriptions",
    "organizations_url": "https://api.github.com/users/Amxx/orgs",
    "repos_url": "https://api.github.com/users/Amxx/repos",
    "events_url": "https://api.github.com/users/Amxx/events{/privacy}",
    "received_events_url": "https://api.github.com/users/Amxx/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 2,
  "created_at": "2020-05-06T12:53:43Z",
  "updated_at": "2021-01-06T14:02:07Z",
  "closed_at": "2021-01-06T14:02:06Z",
  "author_association": "COLLABORATOR",
  "active_lock_reason": null,
  "body": "I noticed this behaviour when working with the [pToken contract on ropsten](https://ropsten.etherscan.io/address/0xeb770b1883dcce11781649e8c4f1ac5f4b40c978#code). I'm depositing BTC to the address provided by pToken and their bridge is, in exchange, supposed to deposit pBTC on my account. This operation corresponds to a `_mint`, by the bridge, of token on my account.\r\n\r\nThis operation fails when using smart contracts wallet as a target, despite me implementing a non-reverting `tokensReceived` method on my smart contract. [See trace](https://ethtx.info/ropsten/0x4c39dbbfdba312317e562e3605854739e0634eb697a8569b7604d0fd5cffc388).\r\n\r\nThis is caused by the `_callTokensReceived` method, which searches the ERC1820Registry for a `ERC777Recipient` associated to the account address. In my case the wallet is not registered in the ERC1820Registry so the `getInterfaceImplementer` call returns `address(0)`. The following check is then a verification that the address is not a (deployed) contract, which then causes the transaction to revert.\r\n\r\nMost smart contracts wallets are not ERC1820 registered. My argent wallet is not, and I suspect that most other wallets aren't. Registering all of them would be expensive in terms of gas AND blockchain storage.\r\n\r\nA solution would be, whenever the ERC1820Registry doesn't have an implementer address, to call the targeted address directly rather than reverting.\r\n\r\n```\r\nfunction _callTokensReceived(\r\n        address operator,\r\n        address from,\r\n        address to,\r\n        uint256 amount,\r\n        bytes memory userData,\r\n        bytes memory operatorData,\r\n        bool requireReceptionAck\r\n    )\r\n        internal\r\n    {\r\n        address implementer = ERC1820_REGISTRY.getInterfaceImplementer(to, TOKENS_RECIPIENT_INTERFACE_HASH);\r\n        if (implementer != address(0)) {\r\n            IERC777Recipient(implementer).tokensReceived(operator, from, to, amount, userData, operatorData);\r\n        } else if (requireReceptionAck) {\r\n            require(!to.isContract(), \"ERC777: token recipient contract has no implementer for ERC777TokensRecipient\");\r\n        }\r\n    }\r\n```\r\nbecomes\r\n```\r\nfunction _callTokensReceived(\r\n        address operator,\r\n        address from,\r\n        address to,\r\n        uint256 amount,\r\n        bytes memory userData,\r\n        bytes memory operatorData,\r\n        bool requireReceptionAck\r\n    )\r\n        internal\r\n    {\r\n        address implementer = ERC1820_REGISTRY.getInterfaceImplementer(to, TOKENS_RECIPIENT_INTERFACE_HASH);\r\n        if (implementer != address(0)) {\r\n            IERC777Recipient(implementer).tokensReceived(operator, from, to, amount, userData, operatorData);\r\n        } else if (requireReceptionAck && to.isContract())\r\n            IERC777Recipient(to).tokensReceived(operator, from, to, amount, userData, operatorData);\r\n        }\r\n    }\r\n```\r\n\r\nThis would cause contracts with a non reverting `fallback()` to accept tokens, but would also give a chance for wallets like argents to be made compatible by \"just\" adding a staticcall mechanism for the `tokensReceived` method at the wallet level, without having to go through ERC1820 registration.\r\n\r\nAlso, I believe this limitation should be more publicly discussed, as it is making some of the largest userbases in the DeFi ecosystem incompatible with the \"Money Legos\" people are building using ERC777",
  "closed_by": {
    "login": "Amxx",
    "id": 2432299,
    "node_id": "MDQ6VXNlcjI0MzIyOTk=",
    "avatar_url": "https://avatars.githubusercontent.com/u/2432299?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/Amxx",
    "html_url": "https://github.com/Amxx",
    "followers_url": "https://api.github.com/users/Amxx/followers",
    "following_url": "https://api.github.com/users/Amxx/following{/other_user}",
    "gists_url": "https://api.github.com/users/Amxx/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/Amxx/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/Amxx/subscriptions",
    "organizations_url": "https://api.github.com/users/Amxx/orgs",
    "repos_url": "https://api.github.com/users/Amxx/repos",
    "events_url": "https://api.github.com/users/Amxx/events{/privacy}",
    "received_events_url": "https://api.github.com/users/Amxx/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2226/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2226/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/624848869",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2226#issuecomment-624848869",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2226",
    "id": 624848869,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYyNDg0ODg2OQ==",
    "user": {
      "login": "nventuro",
      "id": 2530770,
      "node_id": "MDQ6VXNlcjI1MzA3NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2530770?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nventuro",
      "html_url": "https://github.com/nventuro",
      "followers_url": "https://api.github.com/users/nventuro/followers",
      "following_url": "https://api.github.com/users/nventuro/following{/other_user}",
      "gists_url": "https://api.github.com/users/nventuro/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nventuro/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nventuro/subscriptions",
      "organizations_url": "https://api.github.com/users/nventuro/orgs",
      "repos_url": "https://api.github.com/users/nventuro/repos",
      "events_url": "https://api.github.com/users/nventuro/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nventuro/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-05-06T19:38:32Z",
    "updated_at": "2020-05-06T19:38:32Z",
    "author_association": "CONTRIBUTOR",
    "body": "Hello @Amxx, thanks for discussing this issue!\r\n\r\nThat check is very much intentional and a non-optional part of the [ERC777 specification](https://eips.ethereum.org/EIPS/eip-777): not having it would make the token contract non-compliant.\r\n\r\nQuoting from the spec:\r\n\r\n>Nonetheless, the rules below MUST be respected when minting for a recipient:\r\n>\r\n>    The token contract MUST call the tokensReceived hook of the recipient if the recipient registers an ERC777TokensRecipient implementation via ERC1820.\r\n>\r\n>\r\n>The token contract MUST revert when minting in any of the following cases:\r\n>    \r\n>The recipient is a contract, and it does not implement the ERC777TokensRecipient interface via ERC1820.\r\n\r\nThis is what `_callTokensReceived` implements: it calls `tokensReceived` if there is an implementation registered, reverting if there isn't one **and** the recipient is a contract.\r\n\r\nThis is a similar mechanism to the one used by [ERC721](https://eips.ethereum.org/EIPS/eip-721) in [`safeTransferFrom`](https://docs.openzeppelin.com/contracts/3.x/api/token/erc721#IERC721-safeTransferFrom-address-address-uint256-bytes-), and serves as a way to prevent tokens from being locked in a contract. Any smart contracts that interact with ERC777 (including the Argent wallet) need to signal this by registering an implementation.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/624848869/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/625136887",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2226#issuecomment-625136887",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2226",
    "id": 625136887,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYyNTEzNjg4Nw==",
    "user": {
      "login": "Amxx",
      "id": 2432299,
      "node_id": "MDQ6VXNlcjI0MzIyOTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2432299?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Amxx",
      "html_url": "https://github.com/Amxx",
      "followers_url": "https://api.github.com/users/Amxx/followers",
      "following_url": "https://api.github.com/users/Amxx/following{/other_user}",
      "gists_url": "https://api.github.com/users/Amxx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Amxx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Amxx/subscriptions",
      "organizations_url": "https://api.github.com/users/Amxx/orgs",
      "repos_url": "https://api.github.com/users/Amxx/repos",
      "events_url": "https://api.github.com/users/Amxx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Amxx/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-05-07T09:22:27Z",
    "updated_at": "2020-05-07T09:26:39Z",
    "author_association": "COLLABORATOR",
    "body": "Most smart contract wallets, Argent included, implement `onERC721Received`, and that's all they need to do. However, to the best of my knowledge, most provider don't do the 1820 registration of 777. I know for a fact that Argent doesn't. I get that 777 specs is different then 721 in the sens that it requires 1820 registration (where 721 just asks the target) ... I get its in the spec, but I can't figure out why. \r\nThis as the direct consequence that projects built on top of ERC777 are NOT compatible with these wallets out of the box, and wallet don't seem to consider this registration as a priority.\r\n\r\nSome people might think this situation is ok, I strongly believe it is NOT. We are talking money legos, but this incompatibility, which is not known by most users, caused me too burn (testnet) BTC, because some project commited to ERC777, and my wallet was not doing the registration. Not fixing that will have bad consequences both for the ERC777 based project and for the smart contract wallets as users will not be ok with losing funds due to over-conservative standards.\r\n\r\nERC777 is already disliked by many people after the latest \"hacks\" caused by the reentry ERC777 enabled (even though 777 is not strictly to blame) ... if you care about 777 you should really make sure you don't give more opportunity for people to blame losing money on it.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/625136887/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
