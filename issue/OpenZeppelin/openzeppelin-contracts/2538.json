{
  "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2538",
  "repository_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts",
  "labels_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2538/labels{/name}",
  "comments_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2538/comments",
  "events_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2538/events",
  "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2538",
  "id": 815523386,
  "node_id": "MDU6SXNzdWU4MTU1MjMzODY=",
  "number": 2538,
  "title": "Use immutable variable to store beacon address in BeaconProxy",
  "user": {
    "login": "Amxx",
    "id": 2432299,
    "node_id": "MDQ6VXNlcjI0MzIyOTk=",
    "avatar_url": "https://avatars.githubusercontent.com/u/2432299?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/Amxx",
    "html_url": "https://github.com/Amxx",
    "followers_url": "https://api.github.com/users/Amxx/followers",
    "following_url": "https://api.github.com/users/Amxx/following{/other_user}",
    "gists_url": "https://api.github.com/users/Amxx/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/Amxx/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/Amxx/subscriptions",
    "organizations_url": "https://api.github.com/users/Amxx/orgs",
    "repos_url": "https://api.github.com/users/Amxx/repos",
    "events_url": "https://api.github.com/users/Amxx/events{/privacy}",
    "received_events_url": "https://api.github.com/users/Amxx/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 1000207718,
      "node_id": "MDU6TGFiZWwxMDAwMjA3NzE4",
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/labels/contracts",
      "name": "contracts",
      "color": "1d76db",
      "default": false,
      "description": "Smart contract code."
    },
    {
      "id": 2725623999,
      "node_id": "MDU6TGFiZWwyNzI1NjIzOTk5",
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/labels/idea",
      "name": "idea",
      "color": "5319e7",
      "default": false,
      "description": ""
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 2,
  "created_at": "2021-02-24T14:21:38Z",
  "updated_at": "2023-07-08T22:24:14Z",
  "closed_at": "2023-07-08T22:24:14Z",
  "author_association": "COLLABORATOR",
  "active_lock_reason": null,
  "body": "**🧐 Motivation**\r\nUnlike the transparent proxy, the `_BEACON_SLOT` that is part of the BeaconProxy design doesn't need to be updated to update the proxy. Its rather the opposite:\r\n- Upgrades are to be performed in the beacon's storage space\r\n- Changed to the `_BEACON_SLOT` could, if performed incorrectly by the implementation, break the proxy.\r\n\r\nIn some cases the ability to update the `_BEACON_SLOT` might be a welcomed feature... but in other cases, it might be a cost (an sload is required) and an eventual security issue.\r\n\r\n**📝 Details**\r\nFor cases where upgradeability of the `_BEACON_SLOT` is not requiered, the beacon address could be stored using an immutable variable. This would provide a new `ImmutableBeaconProxy` implementation\r\n\r\n```\r\ncontract ImmutableBeaconProxy is Proxy {\r\n    IBeacon immutable private _beacon;\r\n\r\n    constructor(address beacon, bytes memory data) payable {\r\n        require(\r\n            Address.isContract(beacon),\r\n            \"BeaconProxy: beacon is not a contract\"\r\n        );\r\n        require(\r\n            Address.isContract(IBeacon(beacon).implementation()),\r\n            \"BeaconProxy: beacon implementation is not a contract\"\r\n        );\r\n\r\n        _beacon = IBeacon(beacon);\r\n\r\n        if (data.length > 0) {\r\n            // cannot call `_implementation()` because immutable variables cannot be read during construction.\r\n            Address.functionDelegateCall(IBeacon(beacon).implementation(), data, \"BeaconProxy: function call failed\");\r\n        }\r\n    }\r\n\r\n    function _implementation() internal view override returns (address) {\r\n        return _beacon.implementation();\r\n    }\r\n}\r\n```",
  "closed_by": {
    "login": "Amxx",
    "id": 2432299,
    "node_id": "MDQ6VXNlcjI0MzIyOTk=",
    "avatar_url": "https://avatars.githubusercontent.com/u/2432299?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/Amxx",
    "html_url": "https://github.com/Amxx",
    "followers_url": "https://api.github.com/users/Amxx/followers",
    "following_url": "https://api.github.com/users/Amxx/following{/other_user}",
    "gists_url": "https://api.github.com/users/Amxx/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/Amxx/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/Amxx/subscriptions",
    "organizations_url": "https://api.github.com/users/Amxx/orgs",
    "repos_url": "https://api.github.com/users/Amxx/repos",
    "events_url": "https://api.github.com/users/Amxx/events{/privacy}",
    "received_events_url": "https://api.github.com/users/Amxx/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2538/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2538/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/785466763",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2538#issuecomment-785466763",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2538",
    "id": 785466763,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc4NTQ2Njc2Mw==",
    "user": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-02-24T23:41:21Z",
    "updated_at": "2021-02-24T23:41:21Z",
    "author_association": "MEMBER",
    "body": "Some people want to have the ability to change the beacon. Imagine that you have a family of contracts sharing the implementation (for easy mass upgrades) but you want to retain the ability to split off one of those contracts to a different beacon.\r\n\r\nIf we make the beacon immutable, would it be possible to extend the contract to make it a storage variable, overriding a virtual function?",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/785466763/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/786035866",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2538#issuecomment-786035866",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2538",
    "id": 786035866,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc4NjAzNTg2Ng==",
    "user": {
      "login": "Amxx",
      "id": 2432299,
      "node_id": "MDQ6VXNlcjI0MzIyOTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2432299?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Amxx",
      "html_url": "https://github.com/Amxx",
      "followers_url": "https://api.github.com/users/Amxx/followers",
      "following_url": "https://api.github.com/users/Amxx/following{/other_user}",
      "gists_url": "https://api.github.com/users/Amxx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Amxx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Amxx/subscriptions",
      "organizations_url": "https://api.github.com/users/Amxx/orgs",
      "repos_url": "https://api.github.com/users/Amxx/repos",
      "events_url": "https://api.github.com/users/Amxx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Amxx/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-02-25T16:37:26Z",
    "updated_at": "2021-02-25T16:37:26Z",
    "author_association": "COLLABORATOR",
    "body": "My idea was to add an additional ImmutableBeaconProxy in addition to the existing BeaconProxy. Not to replace it.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/786035866/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
