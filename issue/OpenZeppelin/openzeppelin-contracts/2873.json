{
  "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2873",
  "repository_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts",
  "labels_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2873/labels{/name}",
  "comments_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2873/comments",
  "events_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2873/events",
  "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2873",
  "id": 1002635601,
  "node_id": "I_kwDOA9tCBs47wwFR",
  "number": 2873,
  "title": "Add the possibility to include ERC721 token voting within OZ Governor module ",
  "user": {
    "login": "ivanminutillo",
    "id": 1852065,
    "node_id": "MDQ6VXNlcjE4NTIwNjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1852065?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/ivanminutillo",
    "html_url": "https://github.com/ivanminutillo",
    "followers_url": "https://api.github.com/users/ivanminutillo/followers",
    "following_url": "https://api.github.com/users/ivanminutillo/following{/other_user}",
    "gists_url": "https://api.github.com/users/ivanminutillo/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/ivanminutillo/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/ivanminutillo/subscriptions",
    "organizations_url": "https://api.github.com/users/ivanminutillo/orgs",
    "repos_url": "https://api.github.com/users/ivanminutillo/repos",
    "events_url": "https://api.github.com/users/ivanminutillo/events{/privacy}",
    "received_events_url": "https://api.github.com/users/ivanminutillo/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 15,
  "created_at": "2021-09-21T14:47:14Z",
  "updated_at": "2022-03-15T16:20:41Z",
  "closed_at": "2021-12-10T21:58:45Z",
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "**üßê Motivation**\r\nAs stated in the [governance introductory article](https://blog.openzeppelin.com/governor-smart-contract/):\r\n> OpenZeppelin Contracts contain the most common requirements out of the box. Beyond these, OpenZeppelin Governor could potentially be configured with ERC721 voting power so certain NFT owners can participate in governance when specified.\r\n\r\nI was wondering if such possibility is already explored somewhere or not yet...\r\nI imagine the customization and usecases could be infinite, but what would imply to have a basic version of the OZ Governor that uses ERC721 tokens to create proposals, delegate and vote?\r\n\r\nThis issue is a continuation of the https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2868 one.\r\nIn [this thread](https://forum.openzeppelin.com/t/using-governor-with-erc721/15824) I explain a little bit more the usecase I'm working on.\r\n\r\n\r\n**üìù Details**\r\nFollowing @Amxx suggestions I drafted 3 new contracts:\r\n- [GovernorERC721Votes](https://github.com/ivanminutillo/openzeppelin-contracts/blob/master/contracts/governance/extensions/GovernorERC721Votes.sol): A new governance flavor extension for voting weight extraction from an ERC721Votes token. \r\n- [ERC721Votes](https://github.com/ivanminutillo/openzeppelin-contracts/blob/master/contracts/token/ERC721/extensions/ERC721Votes.sol): A clone of ERC20Votes, with the same functions - included `getPastVotes` - but that inherits `NFTPermit` instead of `draft-ERC20Permit`\r\n- [NFTPermit](https://github.com/ivanminutillo/openzeppelin-contracts/blob/master/contracts/token/ERC721/extensions/NFTPermit.sol): A draft implementation of Permit for the ERC721 token (taken from [here](https://gist.github.com/Amxx/e3c87476093a6b27d9271b2e54b35292))\r\n\r\nAs I am not really proficient with solidity, I expect there's lot of devil in the details when implementing even the most trivial things, so I was wondering if I'm totally out of track or not?",
  "closed_by": {
    "login": "frangio",
    "id": 481465,
    "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
    "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/frangio",
    "html_url": "https://github.com/frangio",
    "followers_url": "https://api.github.com/users/frangio/followers",
    "following_url": "https://api.github.com/users/frangio/following{/other_user}",
    "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
    "organizations_url": "https://api.github.com/users/frangio/orgs",
    "repos_url": "https://api.github.com/users/frangio/repos",
    "events_url": "https://api.github.com/users/frangio/events{/privacy}",
    "received_events_url": "https://api.github.com/users/frangio/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2873/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2873/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/924657082",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2873#issuecomment-924657082",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2873",
    "id": 924657082,
    "node_id": "IC_kwDOA9tCBs43HSW6",
    "user": {
      "login": "Amxx",
      "id": 2432299,
      "node_id": "MDQ6VXNlcjI0MzIyOTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2432299?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Amxx",
      "html_url": "https://github.com/Amxx",
      "followers_url": "https://api.github.com/users/Amxx/followers",
      "following_url": "https://api.github.com/users/Amxx/following{/other_user}",
      "gists_url": "https://api.github.com/users/Amxx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Amxx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Amxx/subscriptions",
      "organizations_url": "https://api.github.com/users/Amxx/orgs",
      "repos_url": "https://api.github.com/users/Amxx/repos",
      "events_url": "https://api.github.com/users/Amxx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Amxx/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-09-22T07:21:51Z",
    "updated_at": "2021-09-22T07:21:51Z",
    "author_association": "COLLABORATOR",
    "body": "Hello @ivanminutillo \r\n\r\nJust for the records, the link you shared as a reference for NFTPermit is a prototype for [this](https://github.com/amxx/permit), which is not really the idea I would have of porting ERC2612 to ERC721.\r\n\r\n[Uniswap as an implementation of this concept](https://github.com/Uniswap/v3-periphery/blob/main/contracts/base/ERC721Permit.sol) ... but I think it would already be interesting to have a voting ERC721 WITHOUT any of the 712 signature. We can add that later, if there is some consensus around the \"ERC721Permit\" interface.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/924657082/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/935221692",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2873#issuecomment-935221692",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2873",
    "id": 935221692,
    "node_id": "IC_kwDOA9tCBs43vlm8",
    "user": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-10-06T01:35:18Z",
    "updated_at": "2021-11-23T19:24:14Z",
    "author_association": "MEMBER",
    "body": "We want to implement this reusing as much code as possible with `ERC20Votes`. There is a prototype by @Amxx [here](https://github.com/Amxx/amxx-hre/blob/3dbb0ced1e7e411e7e854354787f0f462fc59dd0/contracts/extensions/ERC721Votes.sol).",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/935221692/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/943317193",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2873#issuecomment-943317193",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2873",
    "id": 943317193,
    "node_id": "IC_kwDOA9tCBs44OeDJ",
    "user": {
      "login": "ivanminutillo",
      "id": 1852065,
      "node_id": "MDQ6VXNlcjE4NTIwNjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1852065?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ivanminutillo",
      "html_url": "https://github.com/ivanminutillo",
      "followers_url": "https://api.github.com/users/ivanminutillo/followers",
      "following_url": "https://api.github.com/users/ivanminutillo/following{/other_user}",
      "gists_url": "https://api.github.com/users/ivanminutillo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ivanminutillo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ivanminutillo/subscriptions",
      "organizations_url": "https://api.github.com/users/ivanminutillo/orgs",
      "repos_url": "https://api.github.com/users/ivanminutillo/repos",
      "events_url": "https://api.github.com/users/ivanminutillo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ivanminutillo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-10-14T12:39:47Z",
    "updated_at": "2021-10-14T12:39:47Z",
    "author_association": "NONE",
    "body": "thanks @frangio, is there any updates about it from your side? I'd likely take the time to test it out ",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/943317193/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/947009636",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2873#issuecomment-947009636",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2873",
    "id": 947009636,
    "node_id": "IC_kwDOA9tCBs44cjhk",
    "user": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-10-19T18:47:30Z",
    "updated_at": "2021-10-19T18:47:30Z",
    "author_association": "MEMBER",
    "body": "@ivanminutillo We haven't made progress on the code as we're still finishing up the the 4.4 release. There's nothing to test yet but if you want to contribute we would welcome a PR.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/947009636/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/952411656",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2873#issuecomment-952411656",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2873",
    "id": 952411656,
    "node_id": "IC_kwDOA9tCBs44xKYI",
    "user": {
      "login": "wighawag",
      "id": 790580,
      "node_id": "MDQ6VXNlcjc5MDU4MA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/790580?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wighawag",
      "html_url": "https://github.com/wighawag",
      "followers_url": "https://api.github.com/users/wighawag/followers",
      "following_url": "https://api.github.com/users/wighawag/following{/other_user}",
      "gists_url": "https://api.github.com/users/wighawag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wighawag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wighawag/subscriptions",
      "organizations_url": "https://api.github.com/users/wighawag/orgs",
      "repos_url": "https://api.github.com/users/wighawag/repos",
      "events_url": "https://api.github.com/users/wighawag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wighawag/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-10-26T23:38:13Z",
    "updated_at": "2021-10-26T23:38:13Z",
    "author_association": "NONE",
    "body": "Hey, not familiar with the governor (just started to look) but just noticed that one path taken for erc721 votes was to adapt compound style checkpoints (which checkpoint balance at each transfer) (what Nouns DAO did)\r\n\r\nWhile this work, this add a big overhead to transfer.\r\n\r\nWith NFT we can actually do better than ERC20: we can record the token used at the point of voting\r\n\r\nFrom my initial look this would need a change of signature for `catsVote` where the frontend could inject the list of nft the user owns.\r\n\r\nFor NFT collection where it is common for individual to own many NFT, this method might not be practical but there are NFT collection that are small enough and there might be ways around for owner of many nft, like merkle trees\r\n\r\nMaybe you already thought about this ?\r\n\r\n\r\n\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/952411656/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/952632058",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2873#issuecomment-952632058",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2873",
    "id": 952632058,
    "node_id": "IC_kwDOA9tCBs44yAL6",
    "user": {
      "login": "Amxx",
      "id": 2432299,
      "node_id": "MDQ6VXNlcjI0MzIyOTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2432299?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Amxx",
      "html_url": "https://github.com/Amxx",
      "followers_url": "https://api.github.com/users/Amxx/followers",
      "following_url": "https://api.github.com/users/Amxx/following{/other_user}",
      "gists_url": "https://api.github.com/users/Amxx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Amxx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Amxx/subscriptions",
      "organizations_url": "https://api.github.com/users/Amxx/orgs",
      "repos_url": "https://api.github.com/users/Amxx/repos",
      "events_url": "https://api.github.com/users/Amxx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Amxx/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-10-27T07:49:16Z",
    "updated_at": "2021-10-27T07:49:16Z",
    "author_association": "COLLABORATOR",
    "body": "I can't say we thought about this. \r\n\r\nWe considered that the `uint8 support`, introduced by bravo, could be used in many different ways? It can be an enum, but it could also be a ranking. These \"grades\" would be used to compute the weighted average and decide the outcome of the vote.\r\n\r\nFor maximum bravo compatibility, we wanted our external function to share the same signature, so we couldn't add/remove or even change the types of the existing parameters. That being said, if you want to implement your approach, you can have the `castVote`, `castVoteWithReason` and `castVoteBySig` function disabled (by overriding `_castVote` with an empty function that reverts, and add functions of you own. \r\n\r\nInterfaces that are commonly use to vote on compound like governors will not be able to have users vote, but the rest of the system (proposal / queueing/ execution) should be transparent.\r\n\r\nyou system would have to :\r\n- create new public voting function\r\n- extract the weight of each vote\r\n- prevent double voting\r\n- implement the `_quorumReached` and `_voteSucceeded` function\r\n\r\nNote, the `propose` function requires `getVotes` to exist, so you may need to expose something like the NFT balance even though you don't use that for the actual voting",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/952632058/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 1,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/954175367",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2873#issuecomment-954175367",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2873",
    "id": 954175367,
    "node_id": "IC_kwDOA9tCBs4434-H",
    "user": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-10-28T20:23:58Z",
    "updated_at": "2021-10-28T20:25:13Z",
    "author_association": "MEMBER",
    "body": "Interestingly, that proposal could be implemented by using the `ERC721Enumerable` interface. `castVote` can enumerate the tokens owned and mark them as already used for the proposal. This is a reasonable use case for enumerability on chain. It could still run out of gas if the number of tokens owned by a voter is too large. Not sure how that risk can be mitigated.\r\n\r\nAnd it also doesn't implement vote delegation, which some people have pointed out as an important primitive to increase participation in governance.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/954175367/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/954256250",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2873#issuecomment-954256250",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2873",
    "id": 954256250,
    "node_id": "IC_kwDOA9tCBs444Mt6",
    "user": {
      "login": "wighawag",
      "id": 790580,
      "node_id": "MDQ6VXNlcjc5MDU4MA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/790580?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wighawag",
      "html_url": "https://github.com/wighawag",
      "followers_url": "https://api.github.com/users/wighawag/followers",
      "following_url": "https://api.github.com/users/wighawag/following{/other_user}",
      "gists_url": "https://api.github.com/users/wighawag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wighawag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wighawag/subscriptions",
      "organizations_url": "https://api.github.com/users/wighawag/orgs",
      "repos_url": "https://api.github.com/users/wighawag/repos",
      "events_url": "https://api.github.com/users/wighawag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wighawag/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-10-28T22:01:44Z",
    "updated_at": "2021-10-28T22:02:42Z",
    "author_association": "NONE",
    "body": "Enumerable can help but it has its limit as you say, and so providing the list in the castVote is I think perfectly fine. We can just allow multiple castVote call for higher number of tokens (since now we track vote not per address but per token)\r\nAlso with  delegation, we would need to provide the list of ids anyway.\r\n\r\nWhat I like about this system (using id) is that it does 2 things:\r\n- do not cause overhead for transfer\r\n- move the voting implementation outside of the token, much cleaner in my opinion and easier to experiment  with different mechanism\r\n\r\nOne thing that @crazyrabbitLTC mentioned on twitter is that vote tracking at the point of vote casting do not prevent votes market (which checkpoints do prevent), but we can actually prevent that by saving the blockNumber on every transfer instead (and this is very cheap since we have space to store a uint96 along the owner address).\r\n\r\nNeed to look deeper in Governor but from what @Amxx is saying, this should be doable with minimum interface change, execpt maybe for delegation, which would now live outside of the token contract",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/954256250/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/954341889",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2873#issuecomment-954341889",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2873",
    "id": 954341889,
    "node_id": "IC_kwDOA9tCBs444hoB",
    "user": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-10-29T01:38:57Z",
    "updated_at": "2021-10-29T01:41:07Z",
    "author_association": "MEMBER",
    "body": "Yes I think it's doable with a few changes but I'm not sure it can be cleanly built on top of our current Governor by just extending with inheritance. Seems like the `_castVote` and `getVotes` interface could use an extra argument for arbitrary data.\r\n\r\nOne way to implement it with the current interface is to have a separate function to input the list of NFTs that is then going to be consumed by the next cast vote by that account. The only problem is it needs to be put in storage temporarily. But it can all happen in the same transaction and be cleared up.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/954341889/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/976766073",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2873#issuecomment-976766073",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2873",
    "id": 976766073,
    "node_id": "IC_kwDOA9tCBs46OER5",
    "user": {
      "login": "cygnusv",
      "id": 2564234,
      "node_id": "MDQ6VXNlcjI1NjQyMzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2564234?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cygnusv",
      "html_url": "https://github.com/cygnusv",
      "followers_url": "https://api.github.com/users/cygnusv/followers",
      "following_url": "https://api.github.com/users/cygnusv/following{/other_user}",
      "gists_url": "https://api.github.com/users/cygnusv/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cygnusv/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cygnusv/subscriptions",
      "organizations_url": "https://api.github.com/users/cygnusv/orgs",
      "repos_url": "https://api.github.com/users/cygnusv/repos",
      "events_url": "https://api.github.com/users/cygnusv/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cygnusv/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-11-23T16:00:53Z",
    "updated_at": "2021-11-23T16:00:53Z",
    "author_association": "NONE",
    "body": "> We want to implement this reusing as much code as possible with `ERC20Votes`.\r\n\r\nWhat about the idea I originally mentioned in #2868 about extracting the checkpoint functionality to a separate abstract contract? That way, you would only have to extend from it for `ERC20Votes`, `ERC721Votes`, or whatever other voting power source you need. We already did this extraction in https://github.com/threshold-network/solidity-contracts/pull/19/ and used it not only for an ERC20 token, but also for a staking contract (https://github.com/threshold-network/solidity-contracts/pull/25/). I'd be very happy to contribute this here. BTW, this code has gone already through a security audit, if that's useful",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/976766073/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/977078808",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2873#issuecomment-977078808",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2873",
    "id": 977078808,
    "node_id": "IC_kwDOA9tCBs46PQoY",
    "user": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-11-23T19:42:20Z",
    "updated_at": "2021-11-23T19:42:20Z",
    "author_association": "MEMBER",
    "body": "@cygnusv Nice. That looks similar to @Amxx's prototype [Voting.sol](https://github.com/Amxx/amxx-hre/blob/3dbb0ced1e7e411e7e854354787f0f462fc59dd0/contracts/Voting.sol).\r\n\r\n@JulissaDantes Is currently working on this in #2944, including extracting the checkpoint functionality to a library, so will be using the code as a reference.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/977078808/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1009640590",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2873#issuecomment-1009640590",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2873",
    "id": 1009640590,
    "node_id": "IC_kwDOA9tCBs48LeSO",
    "user": {
      "login": "CrownOfBojji",
      "id": 95317094,
      "node_id": "U_kgDOBa5sZg",
      "avatar_url": "https://avatars.githubusercontent.com/u/95317094?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CrownOfBojji",
      "html_url": "https://github.com/CrownOfBojji",
      "followers_url": "https://api.github.com/users/CrownOfBojji/followers",
      "following_url": "https://api.github.com/users/CrownOfBojji/following{/other_user}",
      "gists_url": "https://api.github.com/users/CrownOfBojji/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CrownOfBojji/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CrownOfBojji/subscriptions",
      "organizations_url": "https://api.github.com/users/CrownOfBojji/orgs",
      "repos_url": "https://api.github.com/users/CrownOfBojji/repos",
      "events_url": "https://api.github.com/users/CrownOfBojji/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CrownOfBojji/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-01-11T06:35:11Z",
    "updated_at": "2022-01-11T06:35:11Z",
    "author_association": "NONE",
    "body": "Hi I‚Äòm trying to follow the threads here, is there any updates to the prototype of ERC721Votes? Our team also has a use case and really want to have something in place. \r\n\r\nIf we need to wait for 0.4.5, can I simply use this [prototype](https://github.com/Amxx/amxx-hre/blob/3dbb0ced1e7e411e7e854354787f0f462fc59dd0/contracts/extensions/ERC721Votes.sol) this one to replace the [draft-ERC721Votes](https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC721/extensions/draft-ERC721Votes.sol)?",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1009640590/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1012455422",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2873#issuecomment-1012455422",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2873",
    "id": 1012455422,
    "node_id": "IC_kwDOA9tCBs48WNf-",
    "user": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-01-13T19:49:04Z",
    "updated_at": "2022-01-13T19:49:04Z",
    "author_association": "MEMBER",
    "body": "@CrownOfBojji We're publishing a release candidate this week that includes ERC721Votes.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1012455422/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1068174618",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2873#issuecomment-1068174618",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2873",
    "id": 1068174618,
    "node_id": "IC_kwDOA9tCBs4_qw0a",
    "user": {
      "login": "omer2307",
      "id": 99732978,
      "node_id": "U_kgDOBfHN8g",
      "avatar_url": "https://avatars.githubusercontent.com/u/99732978?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/omer2307",
      "html_url": "https://github.com/omer2307",
      "followers_url": "https://api.github.com/users/omer2307/followers",
      "following_url": "https://api.github.com/users/omer2307/following{/other_user}",
      "gists_url": "https://api.github.com/users/omer2307/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/omer2307/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/omer2307/subscriptions",
      "organizations_url": "https://api.github.com/users/omer2307/orgs",
      "repos_url": "https://api.github.com/users/omer2307/repos",
      "events_url": "https://api.github.com/users/omer2307/events{/privacy}",
      "received_events_url": "https://api.github.com/users/omer2307/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-03-15T16:12:13Z",
    "updated_at": "2022-03-15T16:12:13Z",
    "author_association": "NONE",
    "body": "Is draft-ERC721Votes.sol placed in the master directory is good to go?\r\nOr is there more updated release(kind of afraid to inherit from file containing \"draft\" in its name)?",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1068174618/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1068184250",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2873#issuecomment-1068184250",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2873",
    "id": 1068184250,
    "node_id": "IC_kwDOA9tCBs4_qzK6",
    "user": {
      "login": "Amxx",
      "id": 2432299,
      "node_id": "MDQ6VXNlcjI0MzIyOTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2432299?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Amxx",
      "html_url": "https://github.com/Amxx",
      "followers_url": "https://api.github.com/users/Amxx/followers",
      "following_url": "https://api.github.com/users/Amxx/following{/other_user}",
      "gists_url": "https://api.github.com/users/Amxx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Amxx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Amxx/subscriptions",
      "organizations_url": "https://api.github.com/users/Amxx/orgs",
      "repos_url": "https://api.github.com/users/Amxx/repos",
      "events_url": "https://api.github.com/users/Amxx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Amxx/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-03-15T16:20:41Z",
    "updated_at": "2022-03-15T16:20:41Z",
    "author_association": "COLLABORATOR",
    "body": "@omer2307 It's marked as draft because it depends on EIP712, which is not final",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1068184250/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
