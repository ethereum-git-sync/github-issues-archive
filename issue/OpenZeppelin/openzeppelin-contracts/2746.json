{
  "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2746",
  "repository_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts",
  "labels_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2746/labels{/name}",
  "comments_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2746/comments",
  "events_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2746/events",
  "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2746",
  "id": 933909265,
  "node_id": "MDU6SXNzdWU5MzM5MDkyNjU=",
  "number": 2746,
  "title": "Ability to Grant Third Party Spend Permissions (NFT Marketplace)",
  "user": {
    "login": "aglawson",
    "id": 36459896,
    "node_id": "MDQ6VXNlcjM2NDU5ODk2",
    "avatar_url": "https://avatars.githubusercontent.com/u/36459896?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/aglawson",
    "html_url": "https://github.com/aglawson",
    "followers_url": "https://api.github.com/users/aglawson/followers",
    "following_url": "https://api.github.com/users/aglawson/following{/other_user}",
    "gists_url": "https://api.github.com/users/aglawson/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/aglawson/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/aglawson/subscriptions",
    "organizations_url": "https://api.github.com/users/aglawson/orgs",
    "repos_url": "https://api.github.com/users/aglawson/repos",
    "events_url": "https://api.github.com/users/aglawson/events{/privacy}",
    "received_events_url": "https://api.github.com/users/aglawson/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 4,
  "created_at": "2021-06-30T16:53:39Z",
  "updated_at": "2021-07-01T13:36:27Z",
  "closed_at": "2021-06-30T18:40:32Z",
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "**🧐 Motivation**\r\nBuilding an NFT Marketplace using ERC1155, I realized there is no mechanism that I've found to grant the marketplace permission to transfer the seller's NFT. I've created a workaround myself but worry about the security of it.\r\n\r\n**📝 Details**\r\nResell Flow\r\n - Seller puts an ERC1155 NFT for sale on the marketplace, granting the marketplace permission to spend their NFT if the desired price is sent in exchange\r\n - Buyer requests to purchase the NFT, sending the required price\r\n - The marketplace transfers the NFT to the Buyer and the price to the Seller (not necessarily in that order)\r\n\r\nCurrent Workaround I have\r\n - Seller puts ERC1155 NFT for sale on the marketplace \r\n * There is a flag to check if the seller is trying to transfer an item that is for sale, and they are prevented from doing so. \r\n\r\n - Buyer requests to purchase the NFT, sending the required price\r\n - Marketplace gives Buyer temporary approval to transfer the NFT to themselves from the seller, immediately revoking permission (with re-entrancy protections).\r\n\r\nAny advice for how to do this better or more securely (if applicable) would be appreciated, along with future work to have a standardized way of handling this type of interaction. Thank you!",
  "closed_by": {
    "login": "Amxx",
    "id": 2432299,
    "node_id": "MDQ6VXNlcjI0MzIyOTk=",
    "avatar_url": "https://avatars.githubusercontent.com/u/2432299?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/Amxx",
    "html_url": "https://github.com/Amxx",
    "followers_url": "https://api.github.com/users/Amxx/followers",
    "following_url": "https://api.github.com/users/Amxx/following{/other_user}",
    "gists_url": "https://api.github.com/users/Amxx/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/Amxx/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/Amxx/subscriptions",
    "organizations_url": "https://api.github.com/users/Amxx/orgs",
    "repos_url": "https://api.github.com/users/Amxx/repos",
    "events_url": "https://api.github.com/users/Amxx/events{/privacy}",
    "received_events_url": "https://api.github.com/users/Amxx/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2746/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2746/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/871616968",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2746#issuecomment-871616968",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2746",
    "id": 871616968,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg3MTYxNjk2OA==",
    "user": {
      "login": "Amxx",
      "id": 2432299,
      "node_id": "MDQ6VXNlcjI0MzIyOTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2432299?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Amxx",
      "html_url": "https://github.com/Amxx",
      "followers_url": "https://api.github.com/users/Amxx/followers",
      "following_url": "https://api.github.com/users/Amxx/following{/other_user}",
      "gists_url": "https://api.github.com/users/Amxx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Amxx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Amxx/subscriptions",
      "organizations_url": "https://api.github.com/users/Amxx/orgs",
      "repos_url": "https://api.github.com/users/Amxx/repos",
      "events_url": "https://api.github.com/users/Amxx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Amxx/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-06-30T18:03:02Z",
    "updated_at": "2021-06-30T18:03:02Z",
    "author_association": "COLLABORATOR",
    "body": "Hello @aglawson,\r\nI'm curious, isn't the `setApprovalForAll` mechanism not enough?  Its similar to ERC721's which appears to be sufficient for most usecases.\r\n\r\nIf ERC1155 doesn't include what you need, I strongly suggest you propose an evolution to this standard, which (if accepted by the community) we would then implement. I don't feel like it is our role at OpenZeppelin to modify/extend standards from our own initiative",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/871616968/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/871623402",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2746#issuecomment-871623402",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2746",
    "id": 871623402,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg3MTYyMzQwMg==",
    "user": {
      "login": "aglawson",
      "id": 36459896,
      "node_id": "MDQ6VXNlcjM2NDU5ODk2",
      "avatar_url": "https://avatars.githubusercontent.com/u/36459896?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/aglawson",
      "html_url": "https://github.com/aglawson",
      "followers_url": "https://api.github.com/users/aglawson/followers",
      "following_url": "https://api.github.com/users/aglawson/following{/other_user}",
      "gists_url": "https://api.github.com/users/aglawson/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/aglawson/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/aglawson/subscriptions",
      "organizations_url": "https://api.github.com/users/aglawson/orgs",
      "repos_url": "https://api.github.com/users/aglawson/repos",
      "events_url": "https://api.github.com/users/aglawson/events{/privacy}",
      "received_events_url": "https://api.github.com/users/aglawson/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-06-30T18:12:52Z",
    "updated_at": "2021-06-30T18:12:52Z",
    "author_association": "NONE",
    "body": "\r\n\r\n\r\n> Hello @aglawson,\r\n> I'm curious, isn't the `setApprovalForAll` mechanism not enough? Its similar to ERC721's which appears to be sufficient for most usecases.\r\n> \r\n> If ERC1155 doesn't include what you need, I strongly suggest you propose an evolution to this standard, which (if accepted by the community) we would then implement. I don't feel like it is our role at OpenZeppelin to modify/extend standards from our own initiative\r\n\r\nThanks for your response! I've tried using setApprovalForAll and maybe I'm just missing how to best use it but it requires the owner of the NFT call that function (for good reason) which means the Seller would have to call that function to approve the Buyer, and then the Buyer would have to call the buy function which contains the transfer function. This seemed to be inconvenient from my perspective and I had one security concern, which is that the Buyer could call the transfer function after being approved without sending the price of the item to the seller. \r\n\r\nMaybe I'm just missing something? \r\n\r\nHow do I propose an evolution? \r\n\r\nThank you again for your time!",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/871623402/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/871640673",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2746#issuecomment-871640673",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2746",
    "id": 871640673,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg3MTY0MDY3Mw==",
    "user": {
      "login": "Amxx",
      "id": 2432299,
      "node_id": "MDQ6VXNlcjI0MzIyOTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2432299?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Amxx",
      "html_url": "https://github.com/Amxx",
      "followers_url": "https://api.github.com/users/Amxx/followers",
      "following_url": "https://api.github.com/users/Amxx/following{/other_user}",
      "gists_url": "https://api.github.com/users/Amxx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Amxx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Amxx/subscriptions",
      "organizations_url": "https://api.github.com/users/Amxx/orgs",
      "repos_url": "https://api.github.com/users/Amxx/repos",
      "events_url": "https://api.github.com/users/Amxx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Amxx/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-06-30T18:40:32Z",
    "updated_at": "2021-06-30T18:40:32Z",
    "author_association": "COLLABORATOR",
    "body": "You indeed do not want the sender to give approval to the buyer!\r\n\r\nWhat you want to do is designed a trustless smart contract that the sender can give approval to, and that will do the transfer whenever the right conditions apply (for example, when a payment is done).\r\n\r\nYou can find an example of such a contract [here](https://github.com/amxx/permit). This flavor will do the transfer based on signed messages, but you could easily add a payment mechanism.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/871640673/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/872254131",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2746#issuecomment-872254131",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2746",
    "id": 872254131,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg3MjI1NDEzMQ==",
    "user": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-07-01T13:36:27Z",
    "updated_at": "2021-07-01T13:36:27Z",
    "author_association": "MEMBER",
    "body": "I'd also mention we have given a workshop on using cryptographic tools for things related to NFTs that you might find interesting. See the recap and video on [our blog](https://blog.openzeppelin.com/workshop-recap-building-an-nft-merkle-drop/).",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/872254131/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
