{
  "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2558",
  "repository_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts",
  "labels_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2558/labels{/name}",
  "comments_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2558/comments",
  "events_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2558/events",
  "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2558",
  "id": 821407330,
  "node_id": "MDU6SXNzdWU4MjE0MDczMzA=",
  "number": 2558,
  "title": "Multicall module",
  "user": {
    "login": "frangio",
    "id": 481465,
    "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
    "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/frangio",
    "html_url": "https://github.com/frangio",
    "followers_url": "https://api.github.com/users/frangio/followers",
    "following_url": "https://api.github.com/users/frangio/following{/other_user}",
    "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
    "organizations_url": "https://api.github.com/users/frangio/orgs",
    "repos_url": "https://api.github.com/users/frangio/repos",
    "events_url": "https://api.github.com/users/frangio/events{/privacy}",
    "received_events_url": "https://api.github.com/users/frangio/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": {
    "login": "martriay",
    "id": 1703831,
    "node_id": "MDQ6VXNlcjE3MDM4MzE=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1703831?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/martriay",
    "html_url": "https://github.com/martriay",
    "followers_url": "https://api.github.com/users/martriay/followers",
    "following_url": "https://api.github.com/users/martriay/following{/other_user}",
    "gists_url": "https://api.github.com/users/martriay/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/martriay/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/martriay/subscriptions",
    "organizations_url": "https://api.github.com/users/martriay/orgs",
    "repos_url": "https://api.github.com/users/martriay/repos",
    "events_url": "https://api.github.com/users/martriay/events{/privacy}",
    "received_events_url": "https://api.github.com/users/martriay/received_events",
    "type": "User",
    "site_admin": false
  },
  "assignees": [
    {
      "login": "martriay",
      "id": 1703831,
      "node_id": "MDQ6VXNlcjE3MDM4MzE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1703831?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/martriay",
      "html_url": "https://github.com/martriay",
      "followers_url": "https://api.github.com/users/martriay/followers",
      "following_url": "https://api.github.com/users/martriay/following{/other_user}",
      "gists_url": "https://api.github.com/users/martriay/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/martriay/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/martriay/subscriptions",
      "organizations_url": "https://api.github.com/users/martriay/orgs",
      "repos_url": "https://api.github.com/users/martriay/repos",
      "events_url": "https://api.github.com/users/martriay/events{/privacy}",
      "received_events_url": "https://api.github.com/users/martriay/received_events",
      "type": "User",
      "site_admin": false
    }
  ],
  "milestone": null,
  "comments": 10,
  "created_at": "2021-03-03T19:16:30Z",
  "updated_at": "2021-04-12T22:35:16Z",
  "closed_at": "2021-04-07T17:26:41Z",
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "This is a very smart piece of code [found in the ENS repository](https://github.com/ensdomains/resolvers/blob/f7d62ab04bfe1692a4344f6f1d31ff81315a98c3/contracts/PublicResolver.sol#L56-L64) that we think could be a useful feature for people to plug into their contracts. I suppose this would be the `utils/Multicall` module, unless we come up with another name!\r\n\r\n```solidity\r\n    function multicall(bytes[] calldata data) external returns(bytes[] memory results) {\r\n        results = new bytes[](data.length);\r\n        for(uint i = 0; i < data.length; i++) {\r\n            (bool success, bytes memory result) = address(this).delegatecall(data[i]);\r\n            require(success);\r\n            results[i] = result;\r\n        }\r\n        return results;\r\n    }\r\n```",
  "closed_by": {
    "login": "frangio",
    "id": 481465,
    "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
    "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/frangio",
    "html_url": "https://github.com/frangio",
    "followers_url": "https://api.github.com/users/frangio/followers",
    "following_url": "https://api.github.com/users/frangio/following{/other_user}",
    "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
    "organizations_url": "https://api.github.com/users/frangio/orgs",
    "repos_url": "https://api.github.com/users/frangio/repos",
    "events_url": "https://api.github.com/users/frangio/events{/privacy}",
    "received_events_url": "https://api.github.com/users/frangio/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2558/reactions",
    "total_count": 6,
    "+1": 6,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2558/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/789998390",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2558#issuecomment-789998390",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2558",
    "id": 789998390,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc4OTk5ODM5MA==",
    "user": {
      "login": "martriay",
      "id": 1703831,
      "node_id": "MDQ6VXNlcjE3MDM4MzE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1703831?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/martriay",
      "html_url": "https://github.com/martriay",
      "followers_url": "https://api.github.com/users/martriay/followers",
      "following_url": "https://api.github.com/users/martriay/following{/other_user}",
      "gists_url": "https://api.github.com/users/martriay/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/martriay/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/martriay/subscriptions",
      "organizations_url": "https://api.github.com/users/martriay/orgs",
      "repos_url": "https://api.github.com/users/martriay/repos",
      "events_url": "https://api.github.com/users/martriay/events{/privacy}",
      "received_events_url": "https://api.github.com/users/martriay/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-03-03T19:31:12Z",
    "updated_at": "2021-03-03T19:31:12Z",
    "author_association": "MEMBER",
    "body": "Interesting, will tackle it!",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/789998390/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/790708533",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2558#issuecomment-790708533",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2558",
    "id": 790708533,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc5MDcwODUzMw==",
    "user": {
      "login": "Amxx",
      "id": 2432299,
      "node_id": "MDQ6VXNlcjI0MzIyOTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2432299?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Amxx",
      "html_url": "https://github.com/Amxx",
      "followers_url": "https://api.github.com/users/Amxx/followers",
      "following_url": "https://api.github.com/users/Amxx/following{/other_user}",
      "gists_url": "https://api.github.com/users/Amxx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Amxx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Amxx/subscriptions",
      "organizations_url": "https://api.github.com/users/Amxx/orgs",
      "repos_url": "https://api.github.com/users/Amxx/repos",
      "events_url": "https://api.github.com/users/Amxx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Amxx/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-03-04T15:39:28Z",
    "updated_at": "2021-03-04T15:39:28Z",
    "author_association": "COLLABORATOR",
    "body": "could be interresting to use `Address.functionDelegateCall` so revert reasons are bubbled",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/790708533/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/792784116",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2558#issuecomment-792784116",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2558",
    "id": 792784116,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc5Mjc4NDExNg==",
    "user": {
      "login": "Amxx",
      "id": 2432299,
      "node_id": "MDQ6VXNlcjI0MzIyOTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2432299?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Amxx",
      "html_url": "https://github.com/Amxx",
      "followers_url": "https://api.github.com/users/Amxx/followers",
      "following_url": "https://api.github.com/users/Amxx/following{/other_user}",
      "gists_url": "https://api.github.com/users/Amxx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Amxx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Amxx/subscriptions",
      "organizations_url": "https://api.github.com/users/Amxx/orgs",
      "repos_url": "https://api.github.com/users/Amxx/repos",
      "events_url": "https://api.github.com/users/Amxx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Amxx/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-03-08T14:16:13Z",
    "updated_at": "2021-03-08T14:24:03Z",
    "author_association": "COLLABORATOR",
    "body": "FYI: There is a proposal that multicall like design could be used to implement callbacks mechanism that are missing to ERC20.\r\nThe idea being to delegate call to self in to do some operation (such as `approve`) and then do a call to a recipent (which could do a subsequent `transferFrom`)\r\n\r\n```\r\ninterface IERCXXXXReceiver {\r\n    function receiveControl(address sender, bytes calldata thisCall) external returns(bytes4);\r\n}\r\n\r\nabstract contract Multicall is Context {\r\n    function chainMulticall(bytes[] calldata localCalls, address receiver,  bytes calldata remoteCall) external {\r\n        for(uint i = 0; i < localCalls.length; ++i) {\r\n            Address.functionDelegateCall(address(this), localCalls[i]);\r\n        }\r\n        require(\r\n            receiver == address(0)\r\n            ||\r\n            IERCXXXXReceiver(receiver).receiveControl(_msgSender(), remoteCall)\r\n            ==\r\n            IERCXXXXReceiver(receiver).receiveControl.selector,\r\n            \"Remote call failed\"\r\n        );\r\n    }\r\n}\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/792784116/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/800561893",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2558#issuecomment-800561893",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2558",
    "id": 800561893,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgwMDU2MTg5Mw==",
    "user": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-03-16T19:58:15Z",
    "updated_at": "2021-03-16T19:58:15Z",
    "author_association": "MEMBER",
    "body": "Everyone seems to easily confuse this contract with a [`MultiSend`](https://github.com/gnosis/safe-contracts/blob/development/contracts/libraries/MultiSend.sol) contract. I'm thinking maybe we should call this module something related to \"batch\" or \"batching\", like `Batch` with a `batch(...)` function?",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/800561893/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/808774529",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2558#issuecomment-808774529",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2558",
    "id": 808774529,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgwODc3NDUyOQ==",
    "user": {
      "login": "alcueca",
      "id": 38806121,
      "node_id": "MDQ6VXNlcjM4ODA2MTIx",
      "avatar_url": "https://avatars.githubusercontent.com/u/38806121?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/alcueca",
      "html_url": "https://github.com/alcueca",
      "followers_url": "https://api.github.com/users/alcueca/followers",
      "following_url": "https://api.github.com/users/alcueca/following{/other_user}",
      "gists_url": "https://api.github.com/users/alcueca/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/alcueca/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/alcueca/subscriptions",
      "organizations_url": "https://api.github.com/users/alcueca/orgs",
      "repos_url": "https://api.github.com/users/alcueca/repos",
      "events_url": "https://api.github.com/users/alcueca/events{/privacy}",
      "received_events_url": "https://api.github.com/users/alcueca/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-03-27T18:10:03Z",
    "updated_at": "2021-03-27T18:10:03Z",
    "author_association": "CONTRIBUTOR",
    "body": "There is `Batchable.sol` from @boringcrypto which I quite like: https://github.com/boringcrypto/BoringSolidity/blob/master/contracts/BoringBatchable.sol\r\n\r\nThe variation with a callback at the end was my idea, but after tinkering with this and with EIP2271 in the horizon I don't think it would be worth it. Too rigid and complex of a pattern. ",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/808774529/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/808791627",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2558#issuecomment-808791627",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2558",
    "id": 808791627,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgwODc5MTYyNw==",
    "user": {
      "login": "zemse",
      "id": 22412996,
      "node_id": "MDQ6VXNlcjIyNDEyOTk2",
      "avatar_url": "https://avatars.githubusercontent.com/u/22412996?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/zemse",
      "html_url": "https://github.com/zemse",
      "followers_url": "https://api.github.com/users/zemse/followers",
      "following_url": "https://api.github.com/users/zemse/following{/other_user}",
      "gists_url": "https://api.github.com/users/zemse/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/zemse/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/zemse/subscriptions",
      "organizations_url": "https://api.github.com/users/zemse/orgs",
      "repos_url": "https://api.github.com/users/zemse/repos",
      "events_url": "https://api.github.com/users/zemse/events{/privacy}",
      "received_events_url": "https://api.github.com/users/zemse/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-03-27T19:36:51Z",
    "updated_at": "2021-03-27T19:40:17Z",
    "author_association": "CONTRIBUTOR",
    "body": "The BoringBatchable seems to have a [better multicall](https://github.com/boringcrypto/BoringSolidity/blob/master/contracts/BoringBatchable.sol#L35). Actually, I'm planning to work on a multicall provider (ethers-io/ethers.js#788). I think it would be helpful if the multicall function allows to not entirely revert if a single call fails.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/808791627/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/814915720",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2558#issuecomment-814915720",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2558",
    "id": 814915720,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgxNDkxNTcyMA==",
    "user": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-04-07T13:30:07Z",
    "updated_at": "2021-04-07T13:30:07Z",
    "author_association": "MEMBER",
    "body": "IMO neither option is better than the other, they offer different semantics that will be more appropriate in different scenarios. It seems to me that calling all functions regardless of reverts is more appropriate for queries.\r\n\r\nGiven that the `multicall` we're adding is not `view`, it will be used to batch mutating function calls. As far as I can tell making the entire batch atomic will be the generally expected behavior and is likely to avoid bugs.\r\n\r\nFor querying it's also not necessary to have multicall embedded in the target contract, a separate \"multisend\" contract can be used as a forwarding proxy.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/814915720/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/815105743",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2558#issuecomment-815105743",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2558",
    "id": 815105743,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgxNTEwNTc0Mw==",
    "user": {
      "login": "mds1",
      "id": 17163988,
      "node_id": "MDQ6VXNlcjE3MTYzOTg4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17163988?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mds1",
      "html_url": "https://github.com/mds1",
      "followers_url": "https://api.github.com/users/mds1/followers",
      "following_url": "https://api.github.com/users/mds1/following{/other_user}",
      "gists_url": "https://api.github.com/users/mds1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mds1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mds1/subscriptions",
      "organizations_url": "https://api.github.com/users/mds1/orgs",
      "repos_url": "https://api.github.com/users/mds1/repos",
      "events_url": "https://api.github.com/users/mds1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mds1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-04-07T17:50:24Z",
    "updated_at": "2021-04-07T17:50:24Z",
    "author_association": "NONE",
    "body": "> Given that the `multicall` we're adding is not `view`, it will be used to batch mutating function calls. As far as I can tell making the entire batch atomic will be the generally expected behavior and is likely to avoid bugs.\r\n\r\nOne counter here is that there are times when you'd want to batch mutating function calls, but don't want everything to revert if one fails. For example, say this was integrated into a system like Compound and I want to batch these three transactions:\r\n\r\n1. Repay my DAI debt on Compound\r\n2. Redeem my supplied ETH collateral\r\n3. Claim my COMP\r\n\r\nBut if claiming COMP fails (e.g. the Comptroller has insufficient balance to give me the COMP I'm owed), I still want transactions 1 and 2 to succeed.\r\n\r\nGiven that, another option I wanted to throw out is a pattern like the below so you can explicitly specify which transaction can be safely ignored on failure:\r\n\r\n```solidity\r\n/// @notice Required parameters for each call\r\nstruct Call {\r\n  bytes data; // calldata to use\r\n  bool requireSuccess; // true if whole tx should revert on failure, false if we ignore when this call fails\r\n}\r\n\r\n/// @notice When a call fails, but has requireSuccess as false, emit a failure log with the call's index\r\nevent CallFailed(uint256 callIndex);\r\n\r\n/// @notice Batch multiple calls to this contract\r\nfunction multicall(Call[] memory calls) external payable returns (bytes[] memory) {\r\n  bytes[] memory returnData = new bytes[](calls.length);\r\n\r\n  for (uint256 i = 0; i < calls.length; i++) {\r\n    (bool success, bytes memory response) = address(this).delegatecall(calls[i].data);\r\n\r\n    if (!success && calls[i].requireSuccess) {\r\n      revert(getRevertMessage(response)); \r\n    } else if (!success) {\r\n      emit CallFailed(i); // don't revert, but emit failure log to make it easier to identify failed calls\r\n    }\r\n    returnData[i] = response;\r\n  }\r\n  return returnData;\r\n}\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/815105743/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/815482480",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2558#issuecomment-815482480",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2558",
    "id": 815482480,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgxNTQ4MjQ4MA==",
    "user": {
      "login": "boringcrypto",
      "id": 993603,
      "node_id": "MDQ6VXNlcjk5MzYwMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/993603?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/boringcrypto",
      "html_url": "https://github.com/boringcrypto",
      "followers_url": "https://api.github.com/users/boringcrypto/followers",
      "following_url": "https://api.github.com/users/boringcrypto/following{/other_user}",
      "gists_url": "https://api.github.com/users/boringcrypto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/boringcrypto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/boringcrypto/subscriptions",
      "organizations_url": "https://api.github.com/users/boringcrypto/orgs",
      "repos_url": "https://api.github.com/users/boringcrypto/repos",
      "events_url": "https://api.github.com/users/boringcrypto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/boringcrypto/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-04-08T06:20:22Z",
    "updated_at": "2021-04-08T06:20:22Z",
    "author_association": "NONE",
    "body": "There are clearly cases in which you want to revert on ANY failure and cases where you want to ignore reverts. BoringBatchable has a `revertOnFail` flag for this. Although I also like the per call approach. Overhead is minimal, so I'd include this. Also the CallFailed event is a nice one. I'll steal these ideas ;)",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/815482480/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/818287459",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2558#issuecomment-818287459",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2558",
    "id": 818287459,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgxODI4NzQ1OQ==",
    "user": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-04-12T22:35:16Z",
    "updated_at": "2021-04-12T22:35:16Z",
    "author_association": "MEMBER",
    "body": "Thanks everyone for the input.\r\n\r\nWe understand that there will be use cases that would benefit from ignoring reverts, but we still think that the default of failing on reverts will be what's needed in most cases, and it is very clearly to us the safest option in general. We evaluated adding a boolean as suggested, but we think this will fall short in many cases, and anything more complex should probably be coded as a smart contract to be used directly or delegating to it from a smart wallet.\r\n\r\nThere is also the fact that this same function is already present in ENS and Uniswap v3 Periphery, and being compatible with those is very appealing to us because this is the kind of contract that we think will benefit from being a widespread standard.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/818287459/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
