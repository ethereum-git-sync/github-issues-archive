{
  "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1308",
  "repository_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts",
  "labels_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1308/labels{/name}",
  "comments_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1308/comments",
  "events_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1308/events",
  "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1308",
  "id": 358135710,
  "node_id": "MDU6SXNzdWUzNTgxMzU3MTA=",
  "number": 1308,
  "title": "Add \"equals\" method to SafeMath",
  "user": {
    "login": "rbval",
    "id": 6399810,
    "node_id": "MDQ6VXNlcjYzOTk4MTA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6399810?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/rbval",
    "html_url": "https://github.com/rbval",
    "followers_url": "https://api.github.com/users/rbval/followers",
    "following_url": "https://api.github.com/users/rbval/following{/other_user}",
    "gists_url": "https://api.github.com/users/rbval/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/rbval/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/rbval/subscriptions",
    "organizations_url": "https://api.github.com/users/rbval/orgs",
    "repos_url": "https://api.github.com/users/rbval/repos",
    "events_url": "https://api.github.com/users/rbval/events{/privacy}",
    "received_events_url": "https://api.github.com/users/rbval/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 503650860,
      "node_id": "MDU6TGFiZWw1MDM2NTA4NjA=",
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/labels/feature",
      "name": "feature",
      "color": "b9db64",
      "default": false,
      "description": "New contracts, functions, or helpers."
    },
    {
      "id": 1000207718,
      "node_id": "MDU6TGFiZWwxMDAwMjA3NzE4",
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/labels/contracts",
      "name": "contracts",
      "color": "1d76db",
      "default": false,
      "description": "Smart contract code."
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 4,
  "created_at": "2018-09-07T16:36:12Z",
  "updated_at": "2018-09-18T20:26:15Z",
  "closed_at": "2018-09-18T20:26:15Z",
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "## üéâ Description\r\n\r\nAdd \"equals\" to SafeMath. Currently mul / div / sub / add create a clean syntax. It would be nice to have an \"equals\" operation that could be added to `require` statements and return values.\r\n\r\n- [x] üìà This is a feature request.\r\n\r\n## üìù Details\r\n\r\nIn detail this could be used for example like this inside methods:\r\n\r\n`require(x.equals(0));`\r\n`return x.equals(0);`\r\n",
  "closed_by": {
    "login": "nventuro",
    "id": 2530770,
    "node_id": "MDQ6VXNlcjI1MzA3NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/2530770?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nventuro",
    "html_url": "https://github.com/nventuro",
    "followers_url": "https://api.github.com/users/nventuro/followers",
    "following_url": "https://api.github.com/users/nventuro/following{/other_user}",
    "gists_url": "https://api.github.com/users/nventuro/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nventuro/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nventuro/subscriptions",
    "organizations_url": "https://api.github.com/users/nventuro/orgs",
    "repos_url": "https://api.github.com/users/nventuro/repos",
    "events_url": "https://api.github.com/users/nventuro/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nventuro/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1308/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1308/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/420292073",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1308#issuecomment-420292073",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1308",
    "id": 420292073,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyMDI5MjA3Mw==",
    "user": {
      "login": "nventuro",
      "id": 2530770,
      "node_id": "MDQ6VXNlcjI1MzA3NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2530770?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nventuro",
      "html_url": "https://github.com/nventuro",
      "followers_url": "https://api.github.com/users/nventuro/followers",
      "following_url": "https://api.github.com/users/nventuro/following{/other_user}",
      "gists_url": "https://api.github.com/users/nventuro/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nventuro/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nventuro/subscriptions",
      "organizations_url": "https://api.github.com/users/nventuro/orgs",
      "repos_url": "https://api.github.com/users/nventuro/repos",
      "events_url": "https://api.github.com/users/nventuro/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nventuro/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-09-11T14:22:19Z",
    "updated_at": "2018-09-11T14:22:19Z",
    "author_association": "CONTRIBUTOR",
    "body": "Hi @rbval! What would the purpose of such a function be? AFAIK, there's no scenario in which `==` may throw or not return the correct value.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/420292073/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/422292515",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1308#issuecomment-422292515",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1308",
    "id": 422292515,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyMjI5MjUxNQ==",
    "user": {
      "login": "barakman",
      "id": 7003246,
      "node_id": "MDQ6VXNlcjcwMDMyNDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7003246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/barakman",
      "html_url": "https://github.com/barakman",
      "followers_url": "https://api.github.com/users/barakman/followers",
      "following_url": "https://api.github.com/users/barakman/following{/other_user}",
      "gists_url": "https://api.github.com/users/barakman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/barakman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/barakman/subscriptions",
      "organizations_url": "https://api.github.com/users/barakman/orgs",
      "repos_url": "https://api.github.com/users/barakman/repos",
      "events_url": "https://api.github.com/users/barakman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/barakman/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-09-18T07:53:26Z",
    "updated_at": "2018-09-18T07:59:34Z",
    "author_association": "CONTRIBUTOR",
    "body": "@rbval:\r\n\r\nMaybe you got the inspiration for this from off-chain code that you have at hand (e.g., Javascript `assert` module, which is often used in Truffle tests), where `equals` may be used for comparison between variables of different types.\r\n\r\nIn the on-chain side, such function would be **absolutely worthless**.\r\nIf you want to compare between variables of different types, then you need to explicitly cast one (or both) of them. A generic cast (such as `template` in C++) is not supported in the Solidity language.\r\n\r\nIn addition to that, all the functions in `SafeMath` are wrappers for the Solidity language arithmetic operators, allowing the user to execute them \"safely\".\r\nA wrapper for the Boolean operator `==` will not provide any additional functionality here, nor will it make the code look \"cleaner\" (if that's what you had in mind).",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/422292515/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/422309372",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1308#issuecomment-422309372",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1308",
    "id": 422309372,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyMjMwOTM3Mg==",
    "user": {
      "login": "rbval",
      "id": 6399810,
      "node_id": "MDQ6VXNlcjYzOTk4MTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399810?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rbval",
      "html_url": "https://github.com/rbval",
      "followers_url": "https://api.github.com/users/rbval/followers",
      "following_url": "https://api.github.com/users/rbval/following{/other_user}",
      "gists_url": "https://api.github.com/users/rbval/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rbval/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rbval/subscriptions",
      "organizations_url": "https://api.github.com/users/rbval/orgs",
      "repos_url": "https://api.github.com/users/rbval/repos",
      "events_url": "https://api.github.com/users/rbval/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rbval/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-09-18T08:45:56Z",
    "updated_at": "2018-09-18T08:48:56Z",
    "author_association": "NONE",
    "body": "I think you are both right. One more poke: in the sub method there‚Äôs a requirement the first number to be greater than the second one. I believe this is due to not getting output of a negative number. Could that be applied here where we could demand both numbers to be greater than zero ( > 0 ) before comparing them as two integer overflowed numbers can be equal and possible currently? I think the compiler throws warnings but it could be a good safe method? @nventuro @barakman",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/422309372/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/422540501",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1308#issuecomment-422540501",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1308",
    "id": 422540501,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyMjU0MDUwMQ==",
    "user": {
      "login": "nventuro",
      "id": 2530770,
      "node_id": "MDQ6VXNlcjI1MzA3NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2530770?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nventuro",
      "html_url": "https://github.com/nventuro",
      "followers_url": "https://api.github.com/users/nventuro/followers",
      "following_url": "https://api.github.com/users/nventuro/following{/other_user}",
      "gists_url": "https://api.github.com/users/nventuro/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nventuro/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nventuro/subscriptions",
      "organizations_url": "https://api.github.com/users/nventuro/orgs",
      "repos_url": "https://api.github.com/users/nventuro/repos",
      "events_url": "https://api.github.com/users/nventuro/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nventuro/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-09-18T20:26:15Z",
    "updated_at": "2018-09-18T20:26:15Z",
    "author_association": "CONTRIBUTOR",
    "body": "If you use `SafeMath.add`, you will never get an overflow (that will cause execution to halt). Other than that, it is not possible to detect if an `uint256` has been overflowed or not, since all values in the domain are equally valid. The one that I'm not sure about is casting a signed integer to unsigned, Solidity may do runtime checks on those.\r\n\r\nClosing the issue.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/422540501/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
