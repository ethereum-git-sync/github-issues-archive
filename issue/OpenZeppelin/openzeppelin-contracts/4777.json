{
  "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4777",
  "repository_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts",
  "labels_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4777/labels{/name}",
  "comments_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4777/comments",
  "events_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4777/events",
  "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/4777",
  "id": 2022265272,
  "node_id": "I_kwDOA9tCBs54iVG4",
  "number": 4777,
  "title": "Add warning/note to ERC20.sol to adhere to EIP20 spec note",
  "user": {
    "login": "mcgrathcoutinho",
    "id": 109625274,
    "node_id": "U_kgDOBoi_ug",
    "avatar_url": "https://avatars.githubusercontent.com/u/109625274?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/mcgrathcoutinho",
    "html_url": "https://github.com/mcgrathcoutinho",
    "followers_url": "https://api.github.com/users/mcgrathcoutinho/followers",
    "following_url": "https://api.github.com/users/mcgrathcoutinho/following{/other_user}",
    "gists_url": "https://api.github.com/users/mcgrathcoutinho/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/mcgrathcoutinho/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/mcgrathcoutinho/subscriptions",
    "organizations_url": "https://api.github.com/users/mcgrathcoutinho/orgs",
    "repos_url": "https://api.github.com/users/mcgrathcoutinho/repos",
    "events_url": "https://api.github.com/users/mcgrathcoutinho/events{/privacy}",
    "received_events_url": "https://api.github.com/users/mcgrathcoutinho/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 2,
  "created_at": "2023-12-03T00:20:46Z",
  "updated_at": "2023-12-29T06:20:59Z",
  "closed_at": null,
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "**üßê Motivation**\r\nThere are 2 reasons for the motivation of this issue:\r\n1. The ERC20.sol does not completely adhere to the EIP20 spec by not adding [the second MUST note proposed at the top of EIP20](https://eips.ethereum.org/EIPS/eip-20#methods).\r\n![](https://github.com/OpenZeppelin/openzeppelin-contracts/assets/109625274/47b1574b-9458-4e4e-9813-ebfe6fa9c6b9)\r\n2. Recently I've observed quite a lot of recurring issues related to the bool return value of transfer() and transferFrom(), where teams developing tokens or contracts through extensions, do not check the return value of these functions assuming it always returns true based on OZ's current implementation and the absence of the warning/note mentioned in point 1 above.\r\n\r\nFYI: These recurring issues were observed in multiple C4 bot reports and also in the [recent ENS contest on C4 - check [M-01]](https://code4rena.com/reports/2023-10-ens).\r\n\r\n**üìù Details**\r\n1. The second point in the note below is from the [EIP20 spec](https://eips.ethereum.org/EIPS/eip-20), which mentions that the CALLER MUST handle false from functions returning bool (i.e. transfer(), transferFrom(), approve()). This is clearly not a direct issue of OZ and depends on the external team.\r\n2. But as mentioned in the second point of the `Motivation`, these external teams assume that the call always succeeds due to the transfer() and transferFrom() functions always returning true based on how the code is currently implemented without the note mentioned in the EIP.\r\n3. This issue extends even beyond the direct use of ERC20 itself i.e. indirect usage of ERC20 functions through extensions such as ERC20Votes.sol (which inherits from ERC20.sol)\r\n![](https://github.com/OpenZeppelin/openzeppelin-contracts/assets/109625274/47b1574b-9458-4e4e-9813-ebfe6fa9c6b9)\r\n\r\n**Conclusion**\r\nAlthough this is a minute addition to the ERC20.sol contract, I believe adding it will:\r\n1. Adhere to the EIP20 spec\r\n2. Decrease the recurring issues\r\n3. Provide more clarity to teams using those functions\r\n4. Raise more awareness among devs around the warning/comment provided by the OZ team, if implemented.\r\n\r\n**Solution**\r\nReplace x() with either transfer(), transferFrom() or approve().\r\n```solidity\r\nWarning/Note: Return value of x() should be checked to handle false\r\n```\r\n",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4777/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4777/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1869719904",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/4777#issuecomment-1869719904",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4777",
    "id": 1869719904,
    "node_id": "IC_kwDOA9tCBs5vcalg",
    "user": {
      "login": "ernestognw",
      "id": 33379285,
      "node_id": "MDQ6VXNlcjMzMzc5Mjg1",
      "avatar_url": "https://avatars.githubusercontent.com/u/33379285?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ernestognw",
      "html_url": "https://github.com/ernestognw",
      "followers_url": "https://api.github.com/users/ernestognw/followers",
      "following_url": "https://api.github.com/users/ernestognw/following{/other_user}",
      "gists_url": "https://api.github.com/users/ernestognw/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ernestognw/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ernestognw/subscriptions",
      "organizations_url": "https://api.github.com/users/ernestognw/orgs",
      "repos_url": "https://api.github.com/users/ernestognw/repos",
      "events_url": "https://api.github.com/users/ernestognw/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ernestognw/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-12-26T18:59:21Z",
    "updated_at": "2023-12-26T18:59:21Z",
    "author_association": "MEMBER",
    "body": "Hey @mcgrathcoutinho, sorry for the late response, and thanks for the thorough explanation.\r\n\r\nAs you mentioned, the ERC20 specification prompts _callers_ to always check the return value, which depends on whoever is using OpenZeppelin contracts, but not directly on us. Note that although some implementations may return false (thus  callers MUST check for their return values), the implementation in our library just don't return `false` and that's not against ERC20 compliance, is just that it returns a subset of the possible values (`true` or revert instead of `true`, `false` and revert).\r\n\r\nWe do offer a solution for this in the [`SafeERC20.sol` contract](https://github.com/OpenZeppelin/openzeppelin-contracts/blob/7bd2b2aaf68c21277097166a9a51eb72ae239b34/contracts/token/ERC20/utils/SafeERC20.sol) by providing the `safeTransfer` and `safeTransferFrom` functions, so I'm not sure if adding a warning will avoid users to make such mistakes.\r\n\r\nRegardless, I'd be fine adding a note, I'm just not sure a note for `transfer`, `transferFrom` and `approve` would help solving the issue. ",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1869719904/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1871778620",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/4777#issuecomment-1871778620",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4777",
    "id": 1871778620,
    "node_id": "IC_kwDOA9tCBs5vkRM8",
    "user": {
      "login": "mcgrathcoutinho",
      "id": 109625274,
      "node_id": "U_kgDOBoi_ug",
      "avatar_url": "https://avatars.githubusercontent.com/u/109625274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mcgrathcoutinho",
      "html_url": "https://github.com/mcgrathcoutinho",
      "followers_url": "https://api.github.com/users/mcgrathcoutinho/followers",
      "following_url": "https://api.github.com/users/mcgrathcoutinho/following{/other_user}",
      "gists_url": "https://api.github.com/users/mcgrathcoutinho/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mcgrathcoutinho/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mcgrathcoutinho/subscriptions",
      "organizations_url": "https://api.github.com/users/mcgrathcoutinho/orgs",
      "repos_url": "https://api.github.com/users/mcgrathcoutinho/repos",
      "events_url": "https://api.github.com/users/mcgrathcoutinho/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mcgrathcoutinho/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-12-29T06:20:58Z",
    "updated_at": "2023-12-29T06:20:58Z",
    "author_association": "NONE",
    "body": "Hey @ernestognw, thank you for the response and clarifying the spec conformity.\r\n\r\nI am aware of the SafeERC20.sol contract, which prevents such issues from occurring on the user end. But I do think adding a note (either in the ERC20 contract or its extension contracts such as ERC20Votes) would be beneficial since the extensions by default inherit the standard ERC20 contract, which shadows the explicit need to use SafeERC20.sol (as seen in the ENS contest issue above + a few C4 bot reports). \r\n\r\nThe note/warning might not be the best solution but I believe it will atleast raise awareness among devs about the recurring issue. Additionally, I am in favour of it because it is a small security consideration/note included in the EIP20 proposal itself.\r\n\r\nExample of the note:\r\n```solidity\r\nCAUTION: Return value of x() should be checked to handle false. This applies when using any of the extension contracts as well. \r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1871778620/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
