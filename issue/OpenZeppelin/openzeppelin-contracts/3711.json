{
  "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3711",
  "repository_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts",
  "labels_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3711/labels{/name}",
  "comments_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3711/comments",
  "events_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3711/events",
  "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3711",
  "id": 1379417365,
  "node_id": "I_kwDOA9tCBs5SOD0V",
  "number": 3711,
  "title": "Review of `ERC721Consecutive` in v4.8.0-rc.0",
  "user": {
    "login": "tinchoabbate",
    "id": 8171248,
    "node_id": "MDQ6VXNlcjgxNzEyNDg=",
    "avatar_url": "https://avatars.githubusercontent.com/u/8171248?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tinchoabbate",
    "html_url": "https://github.com/tinchoabbate",
    "followers_url": "https://api.github.com/users/tinchoabbate/followers",
    "following_url": "https://api.github.com/users/tinchoabbate/following{/other_user}",
    "gists_url": "https://api.github.com/users/tinchoabbate/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tinchoabbate/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tinchoabbate/subscriptions",
    "organizations_url": "https://api.github.com/users/tinchoabbate/orgs",
    "repos_url": "https://api.github.com/users/tinchoabbate/repos",
    "events_url": "https://api.github.com/users/tinchoabbate/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tinchoabbate/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 6,
  "created_at": "2022-09-20T13:23:10Z",
  "updated_at": "2022-09-27T19:13:16Z",
  "closed_at": "2022-09-27T19:13:16Z",
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "Hey folks!\r\nThese days I'm reviewing the `v4.8.0-rc.0` release candidate. I'll drop in this issue my concerns and comments and questions about the [`ERC721Consecutive` contract](https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v4.8.0-rc.0/contracts/token/ERC721/extensions/ERC721Consecutive.sol) and the related functions in the `ERC721` contract.\r\n\r\nI spent only a couple of hours on these, so take these notes just as a contribution from an independent researcher, not as a comprehensive audit ðŸ˜„ And needless to say, feel free to disregard any of the suggestions here as you find best.\r\n\r\nI'll number the notes so that it's easier to reference in comments or other issues or PRs. They're listed in no particular order of priority.\r\n\r\n1. The [EIP 2309](https://eips.ethereum.org/EIPS/eip-2309) is only concerned about the event, and _not_ the creation/transfer of batches of tokens. However, the docstrings for `ERC721Consecutive` state: `Implementation of the ERC2309 \"Consecutive Transfer Extension\" as defined in https://eips.ethereum.org/EIPS/eip-2309`. Which is questionable, because the OZ implementation is adding opinionated features and limitations not indicated by the standard. Two examples:\r\n\r\n    - In `ERC721Consecutive`, the token IDs of minted tokens in batches are limited to a `uint96` type, which is not indicated by this EIP. If I only consider how the event is defined, where it uses a `uint256` for the token IDs, I could argue that this implementation deviates from the standard. In any case, my main concern here is that (as far as I have seen) this limitation is not explicitly documented nor tested.\r\n    - In `ERC721Consecutive`, token IDs of minted tokens are assumed to be consecutive _and_ starting at 0. The former is stated by the EIP (so that's fine), but the latter is not. I'm definitely not familiar with real use-cases for ERC721 implementations, so I wouldn't be appropriate to say what's best here. Just saying that it may be worth thinking whether imposing this on developers is a sensible choice or not. \r\n\r\n2. The hardcoded `5000` maximum batch size could be moved to a contract-level constant. Even better, even if you may consider `5000` the default size, it could be interesting provide a way for it to be overridden by developers to another number that suits them best.\r\n\r\n3. Defining `_beforeConsecutiveTokenTransfer` and `_afterConsecutiveTokenTransfer` in  the `ERC721` contract instead of in `ERC721Consecutive` seems out of place. I understand this is done because `_balances` is private, am I correct ? Doesn't this unnecessarily increase deployment costs of any `ERC721` contract?\r\n\r\n4. When minting a batch using `ERC721Consecutive::_mintConsecutive`, the update of balances (i.e., the write to `_balances`) happens _within_ the `ERC721::_beforeConsecutiveTokenTransfer` hook. This is different to what happens when minting a single token. Because in `ERC721::_mint` the actual update of balances is done _after_ the internal hook `ERC721::_beforeTokenTransfer`. This doesn't seem to be a problem on its own. Though I do wonder whether it'd be cleaner if `ERC721Consecutive` followed the behavior of `ERC721`, which is what developers are already used to.\r\n\r\n5. The docstrings for `_beforeConsecutiveTokenTransfer` and `_afterConsecutiveTokenTransfer` might be misleading, because \"consecutive token transfers\" could be understood as two transfers of the same token in the same transaction. I'd try to be more specific here.\r\n\r\n7. The `ERC721Consecutive::_mintConsecutive` function returns a `uint96` type, but:\r\n        - It's unclear why this is needed. Its counterpart `ERC721::_mint` doesn't return anything. I'd at least try to document the purpose of this returned value.\r\n        - The returned value is never tested.\r\n        - The returned value is called `first`, which does not seem self-explanatory to me.\r\n        - The `uint96` returned is always set to the first token ID to be minted, even if no tokens are minted when `batchSize` is zero. Could this be confusing for a caller contract ? Why not simply revert if `batchSize` is zero ?\r\n      \r\n8. The `ERC721Consecutive::_mintConsecutive` function can only mint tokens to a non-zero address. Therefore, it seems that in `ERC721::_beforeConsecutiveTokenTransfer` the `from != address(0)` and `to != address(0)` checks are not necessary. Perhaps those check are there for future extensions ? Or just as an example ? Not sure. Might be worth documenting why those checks are there.\r\n\r\n9. The hook `onERC721Received` on the receiver of a batch minting operation is never called. The EIP says nothing about it, so it's definitely up to the implementation. Still I'd at least comment that you've decided not to include it, and people should ensure the receiver of a batch mint can handle the tokens.\r\n\r\n10. According to this contract, batch minting can only happen during construction. In an upgradeable setting, this means that a reinitialization of the proxy would not allow minting tokens in batch. In principle I'd say that's fair, because the docs are already saying that minting can only happen _during construction_. Which is a whole different thing than reinitialization of a proxy. I just wonder whether the average developer is fully aware of the distinction. I'm mentioning this because it's unclear whether this is an intended behavior you thought about. In any case, seems worth testing and documenting.\r\n\r\n11. There's an off-by-one error in the `ERC721Consecutive::_afterTokenTransfer` function. If I understand correctly, `tokenId <= _totalConsecutiveSupply()` should be `tokenId < _totalConsecutiveSupply()`.\r\n\r\n12. I found it interesting that in `ERC721Consecutive::_afterTokenTransfer`, the call to `super._afterTokenTransfer` happens _after_ the extended logic. I checked other token extensions and the order is different. Example: in `ERC20Votes::_afterTokenTransfer`, the call to `super._afterTokenTransfer` happens _before_ the extended logic.  Honestly not sure what's best here, because in both cases `_afterTokenTransfer` is empty, so it doesn't seem too relevant at first. Do you follow any guidelines for these cases ?\r\n\r\n13. There's an unused `SafeCast.sol` import.\r\n\r\n14. Two tiny typos. Line [102](https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v4.8.0-rc.0/contracts/token/ERC721/extensions/ERC721Consecutive.sol#L103): \"token\" should say \"tokens\". Line [112](https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v4.8.0-rc.0/contracts/token/ERC721/extensions/ERC721Consecutive.sol#L112): \"is\" should say \"in\".\r\n\r\n15. Have you considered making `ERC721Consecutive::_totalConsecutiveSupply` `internal` instead of `private`? It'd be easier for implementation contracts to access the token ID after a batch mint. I found myself having to manually change it to `internal` to run some custom local tests.",
  "closed_by": {
    "login": "frangio",
    "id": 481465,
    "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
    "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/frangio",
    "html_url": "https://github.com/frangio",
    "followers_url": "https://api.github.com/users/frangio/followers",
    "following_url": "https://api.github.com/users/frangio/following{/other_user}",
    "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
    "organizations_url": "https://api.github.com/users/frangio/orgs",
    "repos_url": "https://api.github.com/users/frangio/repos",
    "events_url": "https://api.github.com/users/frangio/events{/privacy}",
    "received_events_url": "https://api.github.com/users/frangio/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3711/reactions",
    "total_count": 4,
    "+1": 4,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3711/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1253440167",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3711#issuecomment-1253440167",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3711",
    "id": 1253440167,
    "node_id": "IC_kwDOA9tCBs5Ktfqn",
    "user": {
      "login": "Amxx",
      "id": 2432299,
      "node_id": "MDQ6VXNlcjI0MzIyOTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2432299?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Amxx",
      "html_url": "https://github.com/Amxx",
      "followers_url": "https://api.github.com/users/Amxx/followers",
      "following_url": "https://api.github.com/users/Amxx/following{/other_user}",
      "gists_url": "https://api.github.com/users/Amxx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Amxx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Amxx/subscriptions",
      "organizations_url": "https://api.github.com/users/Amxx/orgs",
      "repos_url": "https://api.github.com/users/Amxx/repos",
      "events_url": "https://api.github.com/users/Amxx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Amxx/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-09-21T09:23:50Z",
    "updated_at": "2022-09-21T09:23:50Z",
    "author_association": "COLLABORATOR",
    "body": "Hello @tinchoabbate \r\n\r\nYou raise a lot of interesting points! I'm going to answer including extra description that you may not need, but that would possibly help other readers.\r\n\r\n1. I think the two come together are they are about the difference between the ConsecutiveTransfer event and its use by the NFT community during batch minting. Indeed we are not providing a generic implementation of EIP-2309, but rather a limited feature set that leverage this ERC. We believe the features we implement to align with the needs of the community in terms of batch minting, as seen in many other contracts.\r\n\r\nThat being said, we are possibly missing the point. Maybe we should try go be beyond what already available and feature that no-one else provides (AFAIK). It would be a balance against the complexity of the code, and the resulting costs, but I'd be open to have the discussed in a dedicated issue !\r\n\r\nNote that the uint96 limitation is indeed hidden, and result for data packing for gas optimizations. IMO, its not an issue because of point 2.\r\n\r\n2. This is definitely not a contract limitation. The contract limitation is the use uint96 for storing the \"anchors\". However, we noticed that indexers such as OpenSea have strong limits, since they do store one entry per token. Our goal with this limit is to avoid devs shouting themselves in the foot, minting 100k tokens at once, and being unhappy about the tokens not showing up on opensea.\r\n\r\nWe could use an `internal view virtual` function that devs could override. We would have to be very clear about the consequences of changing that ...\r\n\r\n3. It is because of the balances, and I agree its not nice. We haven't found a way around it. It will not affect the ERC721 instances that do not include this extensions, as non-used internal function are dropped and not included in the actual bytecode.\r\n\r\n4. It actually is an issue we discussed. If someone overrides the hook and inject code after the super call, they would be executing in a context where balances are increassed but ownership is not set. Doing an external call here would be really bad. Again, we don't really have a fix for 4.x. Next breaking change we will possibly refactor some of that (removing the hooks is on the table)\r\n\r\n5. Thanks, we should clarify that. Feel free to open a PR if you have ideas how to word it.\r\n\r\n6. The return value is to optimise possible override of the function. Lets say you want to do X when batches of tokens are minted, you can do\r\n```\r\nfunction _mintConsecutive(address to, uint96 batchSize) internal virtual returns (uint96) {\r\n    uint96 first = super._mintConsecutive(to, batchSize);\r\n    // DO YOU STUFF\r\n    return first;\r\n}\r\n```\r\nIf we did not return the value, you'd have a hard time knowing which tokens were minted. It would require an storage read operation that we can avoid. Note that since this is internal, its only designed for dev building features on top of it, not external users querying it.\r\n\r\nAs for the batch mint of size 0, they are no-ops, and our policy is to accept no-ops to avoid disturbing workflows (just like we accept transferFrom of 0 tokens when approval is 0.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1253440167/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1253441597",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3711#issuecomment-1253441597",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3711",
    "id": 1253441597,
    "node_id": "IC_kwDOA9tCBs5KtgA9",
    "user": {
      "login": "Amxx",
      "id": 2432299,
      "node_id": "MDQ6VXNlcjI0MzIyOTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2432299?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Amxx",
      "html_url": "https://github.com/Amxx",
      "followers_url": "https://api.github.com/users/Amxx/followers",
      "following_url": "https://api.github.com/users/Amxx/following{/other_user}",
      "gists_url": "https://api.github.com/users/Amxx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Amxx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Amxx/subscriptions",
      "organizations_url": "https://api.github.com/users/Amxx/orgs",
      "repos_url": "https://api.github.com/users/Amxx/repos",
      "events_url": "https://api.github.com/users/Amxx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Amxx/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-09-21T09:25:05Z",
    "updated_at": "2022-09-21T09:30:17Z",
    "author_association": "COLLABORATOR",
    "body": "7. it's for sanity/future extensions. Someone else might create a module that calls there hooks somehow ... we want to help making that secure.\r\n\r\n8. Interesting point! IMO calling is off the table as it would make batch minting terribly expensive. Also not that its a mint, and not a safeMint. But sure, we should document that.\r\n\r\n9. The intended behavior was to follow ERC-721 to the letter. ERC-721 says that a contract MUST emit the transfer event for all transfers (including minting and burning) unless they happen during construction. Allowing batch minting during an upgradeable re initialization would not follow ERC-721, so we don't allow it. Should that be better documented?",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1253441597/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1253450571",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3711#issuecomment-1253450571",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3711",
    "id": 1253450571,
    "node_id": "IC_kwDOA9tCBs5KtiNL",
    "user": {
      "login": "Amxx",
      "id": 2432299,
      "node_id": "MDQ6VXNlcjI0MzIyOTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2432299?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Amxx",
      "html_url": "https://github.com/Amxx",
      "followers_url": "https://api.github.com/users/Amxx/followers",
      "following_url": "https://api.github.com/users/Amxx/following{/other_user}",
      "gists_url": "https://api.github.com/users/Amxx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Amxx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Amxx/subscriptions",
      "organizations_url": "https://api.github.com/users/Amxx/orgs",
      "repos_url": "https://api.github.com/users/Amxx/repos",
      "events_url": "https://api.github.com/users/Amxx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Amxx/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-09-21T09:33:09Z",
    "updated_at": "2022-09-21T09:33:09Z",
    "author_association": "COLLABORATOR",
    "body": "10. This is right, we could replace `<=` with `<`. That is not a security issue though. Changing it would only be for gas optimizations.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1253450571/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1253457018",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3711#issuecomment-1253457018",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3711",
    "id": 1253457018,
    "node_id": "IC_kwDOA9tCBs5Ktjx6",
    "user": {
      "login": "Amxx",
      "id": 2432299,
      "node_id": "MDQ6VXNlcjI0MzIyOTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2432299?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Amxx",
      "html_url": "https://github.com/Amxx",
      "followers_url": "https://api.github.com/users/Amxx/followers",
      "following_url": "https://api.github.com/users/Amxx/following{/other_user}",
      "gists_url": "https://api.github.com/users/Amxx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Amxx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Amxx/subscriptions",
      "organizations_url": "https://api.github.com/users/Amxx/orgs",
      "repos_url": "https://api.github.com/users/Amxx/repos",
      "events_url": "https://api.github.com/users/Amxx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Amxx/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-09-21T09:39:09Z",
    "updated_at": "2022-09-21T09:39:09Z",
    "author_association": "COLLABORATOR",
    "body": "11. We do the operation before the super call, because we want the super call to happen in a context were ownership of the token is correctly set. The super call might not be empty. Someone could write\r\n\r\n```\r\nMyContract is ERC721, MyCustomERC721, ERC721Consecutive {\r\n```\r\n\r\nAnd `super._afterTokenTransfer` in `ERC721Consecutive` would include the logic from `MyCustomERC721`. \r\n\r\nInheritance is a pain for us, because we don't control the linearization order of modules in the users contracts... still we try to do our best\r\n\r\n12. Thx for finding that!\r\n\r\n13. Thx for finding that!\r\n\r\n14. This is an interresing idea. When we make things internal, we also try to make them virtual. That is something we should discuss/consider.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1253457018/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1254443049",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3711#issuecomment-1254443049",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3711",
    "id": 1254443049,
    "node_id": "IC_kwDOA9tCBs5KxUgp",
    "user": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-09-22T02:40:20Z",
    "updated_at": "2022-09-22T02:42:45Z",
    "author_association": "MEMBER",
    "body": "2. The recommendation for the upper limit of 5000 came from https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2355#issuecomment-1200144796. I think I feel ok with making that customizable through an overrideable function. Even if OpenSea caps it at 5000, it makes no sense for us to force that limit on everyone. Someone may decide to ignore OpenSea and that's fine as far as I'm concerned. As long as we document the potential consequences it would be ok.\r\n\r\n5) We could rename the hooks from \"consecutive\" to \"batch\".\r\n\r\n14. If we made this function internal, I would not want to make it virtual (so I would just avoid making it internal). To obtain the id of the tokens that were just minted, IMO you should use the return value of `_mintConsecutive`! This is the answer to your point 6 I believe.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1254443049/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1254861116",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3711#issuecomment-1254861116",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3711",
    "id": 1254861116,
    "node_id": "IC_kwDOA9tCBs5Ky6k8",
    "user": {
      "login": "tinchoabbate",
      "id": 8171248,
      "node_id": "MDQ6VXNlcjgxNzEyNDg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8171248?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tinchoabbate",
      "html_url": "https://github.com/tinchoabbate",
      "followers_url": "https://api.github.com/users/tinchoabbate/followers",
      "following_url": "https://api.github.com/users/tinchoabbate/following{/other_user}",
      "gists_url": "https://api.github.com/users/tinchoabbate/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tinchoabbate/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tinchoabbate/subscriptions",
      "organizations_url": "https://api.github.com/users/tinchoabbate/orgs",
      "repos_url": "https://api.github.com/users/tinchoabbate/repos",
      "events_url": "https://api.github.com/users/tinchoabbate/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tinchoabbate/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-09-22T10:56:45Z",
    "updated_at": "2022-09-22T10:56:45Z",
    "author_association": "CONTRIBUTOR",
    "body": "wow, great answers ðŸ™Œ I'll try to summarize the most relevant points here. Everything not included I acknowledged and agreed with you.\r\n\r\n2\\. To different extents, it seems we all agree on making the value customizable and documenting the potential consequences of changing it. This point is already listed in #3712.\r\n\r\n3\\. I wasn't sure whether non-used internal function were dropped or not. That's good to know!\r\n\r\n5\\. I like @frangio's idea to rename hooks to \"batch\". This point is already listed in #3712.\r\n\r\n6\\. Agreed. Still, note the returned value is not tested nor documented. Seems worth including in #3712.\r\n\r\n8\\. Haha agreed, I wasn't expecting to execute a call for each minted token. Perhaps there's room to do something clever with the additional `data` field in the `onERC721Received` hook, to only call once and signal that a batch is being minted. But that's definitely out of scope here. Just mentioning that the minting is _not_ calling the hook would be fair enough. I see this is already listed in #3712.\r\n\r\n9\\. I re-read the docstrings and tests for the `ERC721Consecutive` contract with fresh eyes. They clearly state that minting only happens in _construction_. I think it's enough.\r\n\r\n10\\. Agreed that it's not a security issue. Still worth changing. I see this is already done in #3712.\r\n\r\n14\\. Agreed. Which makes a stronger argument for testing and documenting the return value of `_mintConsecutive` mentioned in point 6.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1254861116/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
