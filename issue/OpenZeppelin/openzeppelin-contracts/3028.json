{
  "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3028",
  "repository_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts",
  "labels_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3028/labels{/name}",
  "comments_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3028/comments",
  "events_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3028/events",
  "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3028",
  "id": 1081635820,
  "node_id": "I_kwDOA9tCBs5AeHPs",
  "number": 3028,
  "title": "Simpler ERC721Enumerable and ERC721 implementations for 5x cheaper mint",
  "user": {
    "login": "syffs",
    "id": 4192037,
    "node_id": "MDQ6VXNlcjQxOTIwMzc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4192037?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/syffs",
    "html_url": "https://github.com/syffs",
    "followers_url": "https://api.github.com/users/syffs/followers",
    "following_url": "https://api.github.com/users/syffs/following{/other_user}",
    "gists_url": "https://api.github.com/users/syffs/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/syffs/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/syffs/subscriptions",
    "organizations_url": "https://api.github.com/users/syffs/orgs",
    "repos_url": "https://api.github.com/users/syffs/repos",
    "events_url": "https://api.github.com/users/syffs/events{/privacy}",
    "received_events_url": "https://api.github.com/users/syffs/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 4,
  "created_at": "2021-12-16T00:20:34Z",
  "updated_at": "2021-12-16T11:57:23Z",
  "closed_at": "2021-12-16T11:55:29Z",
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "**üßê Motivation**\r\nRegular ERC721 minting gas cost is quite high, which leads to huge carbon footprint and high costs\r\n\r\n**üìù Details**\r\nI've come accross a [simplified version of OpenZeppelin ERC721Enumerable](https://etherscan.io/address/0x0f78c6eee3c89ff37fd9ef96bd685830993636f2#code#F4#L1) and [ERC721](https://etherscan.io/address/0x0f78c6eee3c89ff37fd9ef96bd685830993636f2#code#F6#L1)  which roughly divide gas by 3 to 5 or more (depending on the number of token you mint per tx).\r\n\r\nI've performed a benchmark using the below contract:\r\n```solidity\r\ncontract SimplerERC721Test is ERC721Enumerable, Ownable {\r\n    address[] internal _test;\r\n    string public baseURI = \"\";\r\n    uint256 public maxTokensPerWallet = 100;\r\n\r\n    constructor() ERC721(\"SimplerERC721Test\", \"SET\") { }\r\n\r\n    function tokenURI(uint256 tokenId) public view override returns (string memory) {\r\n        require(_exists(tokenId), \"Token does not exist.\");\r\n        return string(abi.encodePacked(baseURI, Strings.toString(tokenId)));\r\n    }\r\n\r\n    function mintFree(uint256 number) public {\r\n        uint256 supply = totalSupply();\r\n        for( uint i; i < number; ++i ) {\r\n            _safeMint(msg.sender, supply + i);\r\n        }\r\n    }\r\n\r\n    function mintLimit(uint256 number) public {\r\n        require(balanceOf(msg.sender) < maxTokensPerWallet, \"Exceeds max per wallet\");\r\n        mintFree(number);\r\n    }\r\n\r\n    function mintLimit10(uint256 number) public {\r\n        mintLimit(number);\r\n    }\r\n\r\n    function mintLimit20(uint256 number) public {\r\n        mintLimit(number);\r\n    }\r\n}\r\n```\r\nand the below test in hardhat:\r\n```ts\r\n  it('should mint a bunch', async () => {\r\n    const helpMintFree = async (number, account, step = 50) => {\r\n      const iter = Math.floor(number / step);\r\n      const rest = number % step;\r\n      for (let i = 0; i < iter; i++) {\r\n        await contract.connect(account).mintFree(step);\r\n      }\r\n      await contract.connect(account).mintFree(rest);\r\n    };\r\n    await helpMintFree(5, accounts[1]);\r\n    await helpMintFree(2000, accounts[2]);\r\n    await helpMintFree(5, accounts[1]);\r\n    await helpMintFree(7000, accounts[2]);\r\n    await helpMintFree(1, accounts[1]);\r\n    const balance = await contract.connect(accounts[1]).balanceOf(accounts[1].address);\r\n    assert(balance.eq(11));\r\n\r\n    await contract.connect(accounts[1]).mintLimit(1);\r\n    await contract.connect(accounts[1]).mintLimit10(10);\r\n    await contract.connect(accounts[1]).mintLimit20(20);\r\n  })\r\n```\r\n\r\nHere is the gas report with OpenZeppelin implementation:\r\n![image](https://user-images.githubusercontent.com/4192037/146284543-6621ff10-ef73-483f-8dcd-d4ca8a5fce37.png)\r\nand now with the simplified implementation:\r\n![image](https://user-images.githubusercontent.com/4192037/146284883-55b3daf3-bdef-4843-ad41-71543b95f58c.png)\r\n\r\n\r\nI only see 2 downsides:\r\n* calling balanceOf in a tx would skyrocket the gas: this is easily fixed by adding back the _balance mapping (which I did in my test)\r\n* tokenIds have to be generated in order from 0: which is the case 99% of the time on NFT collections\r\n\r\nThe difference is huge, so I'm wondering whether there are any security/functional blindspots or considerations that I'm missing ?\r\n",
  "closed_by": {
    "login": "syffs",
    "id": 4192037,
    "node_id": "MDQ6VXNlcjQxOTIwMzc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4192037?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/syffs",
    "html_url": "https://github.com/syffs",
    "followers_url": "https://api.github.com/users/syffs/followers",
    "following_url": "https://api.github.com/users/syffs/following{/other_user}",
    "gists_url": "https://api.github.com/users/syffs/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/syffs/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/syffs/subscriptions",
    "organizations_url": "https://api.github.com/users/syffs/orgs",
    "repos_url": "https://api.github.com/users/syffs/repos",
    "events_url": "https://api.github.com/users/syffs/events{/privacy}",
    "received_events_url": "https://api.github.com/users/syffs/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3028/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3028/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/995617143",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3028#issuecomment-995617143",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3028",
    "id": 995617143,
    "node_id": "IC_kwDOA9tCBs47V-l3",
    "user": {
      "login": "Amxx",
      "id": 2432299,
      "node_id": "MDQ6VXNlcjI0MzIyOTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2432299?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Amxx",
      "html_url": "https://github.com/Amxx",
      "followers_url": "https://api.github.com/users/Amxx/followers",
      "following_url": "https://api.github.com/users/Amxx/following{/other_user}",
      "gists_url": "https://api.github.com/users/Amxx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Amxx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Amxx/subscriptions",
      "organizations_url": "https://api.github.com/users/Amxx/orgs",
      "repos_url": "https://api.github.com/users/Amxx/repos",
      "events_url": "https://api.github.com/users/Amxx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Amxx/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-12-16T10:00:12Z",
    "updated_at": "2021-12-16T10:00:12Z",
    "author_association": "COLLABORATOR",
    "body": "Hello @syffs and thank you for raising this issue.\r\n\r\nGas cost of minting NFTs is indeed very important, and it's something that is certainly worth optimizing. Your number looks very promising.\r\n\r\nWe will definitely experiment to replicate your results, but I would like to point out two things:\r\n\r\n- ERC721Enumerable is known to be very ineffective. That is because it stores a lot of data that is not essential to the life of the NFT. Since 4.0.0 it is no longer part of the core ERC721 contract, and we encourage people not to use this extension if they don't really need it!\r\n\r\n- You say that:\r\n\r\n> tokenIds have to be generated in order from 0: Which is the case 99% of the time on NFT collections\r\n\r\nMy experience tells me otherwise, and I'd love to see statistics about the \"99%\" number.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/995617143/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/995653182",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3028#issuecomment-995653182",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3028",
    "id": 995653182,
    "node_id": "IC_kwDOA9tCBs47WHY-",
    "user": {
      "login": "Amxx",
      "id": 2432299,
      "node_id": "MDQ6VXNlcjI0MzIyOTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2432299?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Amxx",
      "html_url": "https://github.com/Amxx",
      "followers_url": "https://api.github.com/users/Amxx/followers",
      "following_url": "https://api.github.com/users/Amxx/following{/other_user}",
      "gists_url": "https://api.github.com/users/Amxx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Amxx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Amxx/subscriptions",
      "organizations_url": "https://api.github.com/users/Amxx/orgs",
      "repos_url": "https://api.github.com/users/Amxx/repos",
      "events_url": "https://api.github.com/users/Amxx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Amxx/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-12-16T10:45:41Z",
    "updated_at": "2021-12-16T10:45:41Z",
    "author_association": "COLLABORATOR",
    "body": "Upon a further look at the codebase your linked, I am dubious this is the right approach.\r\n\r\nWhile it looks like an Openzeppelin implementation, it is definitely not. If their `ERC721` implementation is much cheaper to use, its because it basically stores nothing more then the owner of the token. It doesn't keep track of the balances and it assumes that tokens are minted sequentially. This has two consequences:\r\n- the complete loss of generality;\r\n- the tremendous cost of querying any \"enumerability\" function.\r\n\r\nAs we often stated, OZ is not shooting for extreme gas optimization, but for modularity and generality. We assume any use that matches the ERC standard should be achievable using our contracts. There is room in this space for other implementations that are optimized for very specific usecases, but it's \"in addition to\" our generic contract, not \"in place of\".\r\n\r\nI would had that I'm worried about the interoperability of this contract. Any third party that would use the return value of \"balanceOf\" would revert for users with too many tokens. This means that in some cases, DoS attacks would be possible by dropping tokens to the target's wallet.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/995653182/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/995701725",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3028#issuecomment-995701725",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3028",
    "id": 995701725,
    "node_id": "IC_kwDOA9tCBs47WTPd",
    "user": {
      "login": "syffs",
      "id": 4192037,
      "node_id": "MDQ6VXNlcjQxOTIwMzc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4192037?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/syffs",
      "html_url": "https://github.com/syffs",
      "followers_url": "https://api.github.com/users/syffs/followers",
      "following_url": "https://api.github.com/users/syffs/following{/other_user}",
      "gists_url": "https://api.github.com/users/syffs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/syffs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/syffs/subscriptions",
      "organizations_url": "https://api.github.com/users/syffs/orgs",
      "repos_url": "https://api.github.com/users/syffs/repos",
      "events_url": "https://api.github.com/users/syffs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/syffs/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-12-16T11:23:45Z",
    "updated_at": "2021-12-16T11:24:57Z",
    "author_association": "NONE",
    "body": "Thanks for the quick response @Amxx !\r\n\r\nI realized ERC721Enumerable was inefficient, but I didn't know you weren't encouraging its usage: good to know\r\n\r\n> My experience tells me otherwise, and I'd love to see statistics about the \"99%\" number.\r\n\r\nI'm clearly getting ahead of myself with the \"99%\" number: I'd usually point out such approximation in someone's else mouth, so I clearly wrote this too fast.. Sorry about that ! And your guess is likely to be much more educated than mine.\r\n\r\nThat said a more accurate wording would be: I feel like most of the popular and/or recent collections are either generating tokens sequentially or could achieve roughly the same result doing so.\r\n\r\nHere are a few examples:\r\n- [BAYC](https://etherscan.io/address/0xbc4ca0eda7647a8ab7c2061c2e118a18a936f13d#code)\r\n- [WorldOfWomen](https://etherscan.io/address/0xe785e82358879f061bc3dcac6f0444462d4b5330#code#F1#L1)\r\n- [Mekaverse](https://etherscan.io/address/0x9a534628b4062e123ce7ee2222ec20b86e16ca8f#code#F3#L1)\r\n- [NuclearNerds](https://etherscan.io/address/0x0f78c6eee3c89ff37fd9ef96bd685830993636f2#code#F1#L1)\r\n\r\n> It doesn't keep track of the balances\r\n\r\nIndeed, I initially pointed this out, and suggested to add the _balance mapping back, which should keep us safe from the points you mentioned above ?\r\n\r\n> it assumes that tokens are minted sequentially\r\n\r\nThe contract I listed above either use Enumerable for its `totalSupply` method or some kind of counter to keep track of ids. So I feel that if your contract is intended to do that, defining _owners as an array makes it simpler for enumerability than using the whole ERC721Enumerable. \r\n\r\n> As we often stated, OZ is not shooting for extreme gas optimization, but for modularity and generality. We assume any use that matches the ERC standard should be achievable using our contracts. There is room in this space for other implementations that are optimized for very specific usecases, but it's \"in addition to\" our generic contract, not \"in place of\".\r\n\r\nOf course, I agree 100% with that, and this is why it's a feature request ! Now, for  a number of contracts generating tokenIds sequentially, wouldn't a dedicated implementation make sense ?",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/995701725/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/995732190",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3028#issuecomment-995732190",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3028",
    "id": 995732190,
    "node_id": "IC_kwDOA9tCBs47Ware",
    "user": {
      "login": "syffs",
      "id": 4192037,
      "node_id": "MDQ6VXNlcjQxOTIwMzc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4192037?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/syffs",
      "html_url": "https://github.com/syffs",
      "followers_url": "https://api.github.com/users/syffs/followers",
      "following_url": "https://api.github.com/users/syffs/following{/other_user}",
      "gists_url": "https://api.github.com/users/syffs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/syffs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/syffs/subscriptions",
      "organizations_url": "https://api.github.com/users/syffs/orgs",
      "repos_url": "https://api.github.com/users/syffs/repos",
      "events_url": "https://api.github.com/users/syffs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/syffs/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-12-16T11:55:29Z",
    "updated_at": "2021-12-16T11:57:23Z",
    "author_association": "NONE",
    "body": "To be fair, I'm quite new to solidity and smart contract development ! I assumed that ERC721Enumerable was the way to go to keep track of your supply. Which is clearly wrong.\r\n\r\nAfter testing the OZ ERC721 + Counter implementation:\r\n![image](https://user-images.githubusercontent.com/4192037/146366460-b192304a-26d2-4ff0-8a5d-89fe08a4105f.png)\r\nWhich is fairly close to the previous results with the custom ERC721Enumerable.\r\n\r\nMy conclusion is to ban ERC721Enumerable from any future implementation.\r\n\r\nI'll close this, but maybe it should be made more clear that ERC721Enumerable is to be avoided ?",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/995732190/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
