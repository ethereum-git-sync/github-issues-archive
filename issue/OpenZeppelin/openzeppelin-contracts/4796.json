{
  "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4796",
  "repository_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts",
  "labels_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4796/labels{/name}",
  "comments_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4796/comments",
  "events_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4796/events",
  "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/4796",
  "id": 2044326627,
  "node_id": "I_kwDOA9tCBs552fLj",
  "number": 4796,
  "title": "Change _checkedOnReceived to internal in NFT tokens.",
  "user": {
    "login": "DaigaroCota",
    "id": 32775237,
    "node_id": "MDQ6VXNlcjMyNzc1MjM3",
    "avatar_url": "https://avatars.githubusercontent.com/u/32775237?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/DaigaroCota",
    "html_url": "https://github.com/DaigaroCota",
    "followers_url": "https://api.github.com/users/DaigaroCota/followers",
    "following_url": "https://api.github.com/users/DaigaroCota/following{/other_user}",
    "gists_url": "https://api.github.com/users/DaigaroCota/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/DaigaroCota/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/DaigaroCota/subscriptions",
    "organizations_url": "https://api.github.com/users/DaigaroCota/orgs",
    "repos_url": "https://api.github.com/users/DaigaroCota/repos",
    "events_url": "https://api.github.com/users/DaigaroCota/events{/privacy}",
    "received_events_url": "https://api.github.com/users/DaigaroCota/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 3,
  "created_at": "2023-12-15T20:23:53Z",
  "updated_at": "2024-01-02T19:09:10Z",
  "closed_at": null,
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "I am requesting to change the visibility of the method: `_checkedOnERC721Received` from private to internal.\r\n\r\nShown below:\r\n\r\nhttps://github.com/OpenZeppelin/openzeppelin-contracts/blob/01ef448981be9d20ca85f2faf6ebdf591ce409f3/contracts/token/ERC721/ERC721.sol#L465\r\n\r\nThe reason why is that you may have cases in where you override the _safeTransfer(...) function to perform actions/checks on the `data` param in `safeTransferFrom(...)`. \r\nThe _beforeTransfer(...) hook is further down the logic and cannot be used to perform the checks on `data`.\r\nIn my particular case this `data` param is needed to be passed so that the receiving contract of the NFT emits some application specific events.\r\n\r\nThis also applies to 1155.\r\nhttps://github.com/OpenZeppelin/openzeppelin-contracts/blob/d155600d554d28b583a8ab36dee0849215d48a20/contracts/token/ERC1155/ERC1155.sol#L388\r\n",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4796/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4796/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1858929948",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/4796#issuecomment-1858929948",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4796",
    "id": 1858929948,
    "node_id": "IC_kwDOA9tCBs5uzQUc",
    "user": {
      "login": "Amxx",
      "id": 2432299,
      "node_id": "MDQ6VXNlcjI0MzIyOTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2432299?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Amxx",
      "html_url": "https://github.com/Amxx",
      "followers_url": "https://api.github.com/users/Amxx/followers",
      "following_url": "https://api.github.com/users/Amxx/following{/other_user}",
      "gists_url": "https://api.github.com/users/Amxx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Amxx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Amxx/subscriptions",
      "organizations_url": "https://api.github.com/users/Amxx/orgs",
      "repos_url": "https://api.github.com/users/Amxx/repos",
      "events_url": "https://api.github.com/users/Amxx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Amxx/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-12-16T21:03:43Z",
    "updated_at": "2023-12-16T21:03:43Z",
    "author_association": "COLLABORATOR",
    "body": "Hello @DaigaroCota \r\n\r\nI understand the usecase here is to be able to perform the check without actually calling the transfer logic.\r\n\r\nI'm curious however on the justification. Can you give details as to what the override of `_safeTransfer` looks like ? I'm thinking that would probably call super anyway (in particular because the balances and ownership mappings are private).\r\n\r\nAn interresting option would be to take the receive checks from ERC-721 (and ERC-1155), and implement them in libraries, instead of directly in the contracts. The contract would then fecth that logic from the library. That way, it would not be possible to override the logic (by overriding an internal function) ... but the logic would be available for everyone to use. @ernestognw WDYT?",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1858929948/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1859003812",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/4796#issuecomment-1859003812",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4796",
    "id": 1859003812,
    "node_id": "IC_kwDOA9tCBs5uziWk",
    "user": {
      "login": "DaigaroCota",
      "id": 32775237,
      "node_id": "MDQ6VXNlcjMyNzc1MjM3",
      "avatar_url": "https://avatars.githubusercontent.com/u/32775237?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/DaigaroCota",
      "html_url": "https://github.com/DaigaroCota",
      "followers_url": "https://api.github.com/users/DaigaroCota/followers",
      "following_url": "https://api.github.com/users/DaigaroCota/following{/other_user}",
      "gists_url": "https://api.github.com/users/DaigaroCota/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/DaigaroCota/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/DaigaroCota/subscriptions",
      "organizations_url": "https://api.github.com/users/DaigaroCota/orgs",
      "repos_url": "https://api.github.com/users/DaigaroCota/repos",
      "events_url": "https://api.github.com/users/DaigaroCota/events{/privacy}",
      "received_events_url": "https://api.github.com/users/DaigaroCota/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-12-17T01:06:35Z",
    "updated_at": "2023-12-17T01:17:08Z",
    "author_association": "NONE",
    "body": "At a very high level, we have an \"Escrow\" contract that inherits IERC721Receiver (also IERC1155Receiver but lets focus on 721). The idea is that when you transfer your NFT to this Escrow contract, (using canonical bridge communication) you are cleared to mint a L2 representation (another NFT in a L2). \r\n\r\nTo mint the L2 representation (called voucher) I am sending the hash of the NFT marketplace information.  To give some example of this data:\r\n- the artist collaborators of the NFT (artpiece) and their royalty distribution in percentages\r\n- if its an edition or unique piece\r\n- in case of edition how many editions have been sold\r\n- to determine fees we would also need to know if it the NFT is in primary or secondary sale\r\n- ..etc. \r\nHowever, to simplify this explanation let's just call all these collectively the  struct \"nftMarketData\".\r\n\r\nMoving on, when a user is transferring their NFT to the Esrow address, we wanted to ensure the right \"nftMarketData\" is being passed. In the case of ERC721, they are several methods to pick-from if interacting directly with the contracts. These are: `transferFrom(...)`, `safeTransferFrom(...)`, and `safeTransferFrom(... , bytes data)`.\r\nTo ensure the user includes the correct \"nftMarketData\"  when transferring to: `to == escrow.address`, my first intuition was to use the _beforeTransfer hook. However, as you realized the _checkOnReceive happens earlier. \r\n    \r\nTherefore, we considered the following override \"_checkOnERC721Received\" since all the \"transfer\" methods will call it:\r\n```sol\r\nfunction _checkOnERC721Received(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory data\r\n    ) internal override returns (bool) {\r\n        if (escrow != address(0) && to == escrow) {\r\n              // override the data to ensure it is the correct\r\n              data = getTokenIdMarketData(id, amount);\r\n        }\r\n\r\n        if (to.isContract()) {\r\n            try IERC721ReceiverUpgradeable(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\r\n                return retval == IERC721ReceiverUpgradeable.onERC721Received.selector;\r\n            } catch (bytes memory reason) {\r\n                if (reason.length == 0) {\r\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\r\n                } else {\r\n                    /// @solidity memory-safe-assembly\r\n                    assembly {\r\n                        revert(add(32, reason), mload(reason))\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n```\r\n   \r\nYou could alternatively do something similar with the `_safeTransfer(...)`, overriding the \"data\" with the correct data called within the function. However, for that to be possible `_checkOnERC721Received` needs to be visible.\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1859003812/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1874432480",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/4796#issuecomment-1874432480",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4796",
    "id": 1874432480,
    "node_id": "IC_kwDOA9tCBs5vuZHg",
    "user": {
      "login": "ernestognw",
      "id": 33379285,
      "node_id": "MDQ6VXNlcjMzMzc5Mjg1",
      "avatar_url": "https://avatars.githubusercontent.com/u/33379285?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ernestognw",
      "html_url": "https://github.com/ernestognw",
      "followers_url": "https://api.github.com/users/ernestognw/followers",
      "following_url": "https://api.github.com/users/ernestognw/following{/other_user}",
      "gists_url": "https://api.github.com/users/ernestognw/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ernestognw/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ernestognw/subscriptions",
      "organizations_url": "https://api.github.com/users/ernestognw/orgs",
      "repos_url": "https://api.github.com/users/ernestognw/repos",
      "events_url": "https://api.github.com/users/ernestognw/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ernestognw/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2024-01-02T19:08:42Z",
    "updated_at": "2024-01-02T19:09:10Z",
    "author_association": "MEMBER",
    "body": "Interesting! \r\n\r\nI'm not a fan of making `_checkOnERC721Received` internal and virtual because of how sensitive the function is. However, I see the main issue in your use case is that you either:\r\n\r\n1. Override `_checkOnERC721Received` with the `data` customization\r\n2. Override `_safeMint`, `_safeTransfer`, and `safeTransferFrom` with the data customization.\r\n\r\nSo the problem relies in that there's not a single place to the `data = getTokenIdMarketData(id, amount);` instruction, is that correct? If so, perhaps this is not about making `_checkOnERC721Received` internal but adding a mechanism to place logic before and after it.\r\n\r\nAdditionally, I've seen protocols purposefully skipping the acceptance check (e.g. [Ocean Protocol](https://github.com/code-423n4/2023-08-shell/blob/5a996367cc9e9a3920577ecab6183e7c9991ee7c/src/ocean/Ocean.sol#L1255) skips the acceptance checks in very specific yet valid scenarios) so I recognize there might be legitimate use cases where it's useful.\r\n\r\nAs a library that prioritizes security, my current standpoint is the following:\r\n\r\n- The `_checkOnERC721Received` should not be `virtual` to avoid security mistakes when overriding it.\r\n- There's a need for a mechanism to put logic _around_ the acceptance check\r\n- Putting the acceptance checks in a library makes it easy to insert the logic multiple times where needed, but doesn't solve the issue of only overriding a single function instead of `_safeMint`, `_safeTransfer`, and `safeTransferFrom`.\r\n\r\nI don't have a conclusion yet. I'd say this requires discussion, I'm open to making changes but I wouldn't rush into making it `virtual` before getting more support requests.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1874432480/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
