{
  "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1015",
  "repository_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts",
  "labels_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1015/labels{/name}",
  "comments_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1015/comments",
  "events_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1015/events",
  "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1015",
  "id": 332953751,
  "node_id": "MDU6SXNzdWUzMzI5NTM3NTE=",
  "number": 1015,
  "title": "Consider supporting payable ERC721's safeTransferFrom, transferFrom, and approve",
  "user": {
    "login": "cwhinfrey",
    "id": 11652019,
    "node_id": "MDQ6VXNlcjExNjUyMDE5",
    "avatar_url": "https://avatars.githubusercontent.com/u/11652019?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/cwhinfrey",
    "html_url": "https://github.com/cwhinfrey",
    "followers_url": "https://api.github.com/users/cwhinfrey/followers",
    "following_url": "https://api.github.com/users/cwhinfrey/following{/other_user}",
    "gists_url": "https://api.github.com/users/cwhinfrey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/cwhinfrey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/cwhinfrey/subscriptions",
    "organizations_url": "https://api.github.com/users/cwhinfrey/orgs",
    "repos_url": "https://api.github.com/users/cwhinfrey/repos",
    "events_url": "https://api.github.com/users/cwhinfrey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/cwhinfrey/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 503650860,
      "node_id": "MDU6TGFiZWw1MDM2NTA4NjA=",
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/labels/feature",
      "name": "feature",
      "color": "b9db64",
      "default": false,
      "description": "New contracts, functions, or helpers."
    },
    {
      "id": 805777215,
      "node_id": "MDU6TGFiZWw4MDU3NzcyMTU=",
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/labels/on%20hold",
      "name": "on hold",
      "color": "5319e7",
      "default": false,
      "description": "Put on hold for some reason that must be specified in a comment."
    },
    {
      "id": 1000207718,
      "node_id": "MDU6TGFiZWwxMDAwMjA3NzE4",
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/labels/contracts",
      "name": "contracts",
      "color": "1d76db",
      "default": false,
      "description": "Smart contract code."
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 20,
  "created_at": "2018-06-16T02:25:29Z",
  "updated_at": "2023-05-21T00:30:45Z",
  "closed_at": null,
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "## üéâ Description\r\n\r\nThe [ERC721 EIP](https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md) lists:\r\n\r\n- `safeTransferFrom(address, address, uint256, bytes)`\r\n- `safeTransferFrom(address, address, uint256)`\r\n- `transferFrom(address, address, uint256)`\r\n- `approve(address, uint256)` \r\n\r\nas `payable` functions. The `payable` modifier should be added to these functions in `ERC721Basic.sol` and `ERC721BasicToken.sol`.\r\n\r\n- [x] üêõ This is a bug report.\r\n- [ ] üìà This is a feature request.\r\n\r\n## üíª Environment\r\n\r\nOpenZeppelin v1.10.0",
  "closed_by": {
    "login": "cwhinfrey",
    "id": 11652019,
    "node_id": "MDQ6VXNlcjExNjUyMDE5",
    "avatar_url": "https://avatars.githubusercontent.com/u/11652019?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/cwhinfrey",
    "html_url": "https://github.com/cwhinfrey",
    "followers_url": "https://api.github.com/users/cwhinfrey/followers",
    "following_url": "https://api.github.com/users/cwhinfrey/following{/other_user}",
    "gists_url": "https://api.github.com/users/cwhinfrey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/cwhinfrey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/cwhinfrey/subscriptions",
    "organizations_url": "https://api.github.com/users/cwhinfrey/orgs",
    "repos_url": "https://api.github.com/users/cwhinfrey/repos",
    "events_url": "https://api.github.com/users/cwhinfrey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/cwhinfrey/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1015/reactions",
    "total_count": 1,
    "+1": 1,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1015/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/399720962",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1015#issuecomment-399720962",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1015",
    "id": 399720962,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5OTcyMDk2Mg==",
    "user": {
      "login": "shrugs",
      "id": 1535001,
      "node_id": "MDQ6VXNlcjE1MzUwMDE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1535001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shrugs",
      "html_url": "https://github.com/shrugs",
      "followers_url": "https://api.github.com/users/shrugs/followers",
      "following_url": "https://api.github.com/users/shrugs/following{/other_user}",
      "gists_url": "https://api.github.com/users/shrugs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shrugs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shrugs/subscriptions",
      "organizations_url": "https://api.github.com/users/shrugs/orgs",
      "repos_url": "https://api.github.com/users/shrugs/repos",
      "events_url": "https://api.github.com/users/shrugs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shrugs/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-06-24T00:58:54Z",
    "updated_at": "2018-06-24T00:58:54Z",
    "author_association": "CONTRIBUTOR",
    "body": "The reason that payable was not added by default is that non-payable functions are still standard-compliant, as of the last time I read the standard. In solidity it's much easier to make a non-payable function payable than it is to do the reverse, which I expect is why we went this directly (least specificity). Let me know if you think that should be interpreted differently.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/399720962/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/400060610",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1015#issuecomment-400060610",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1015",
    "id": 400060610,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwMDA2MDYxMA==",
    "user": {
      "login": "cwhinfrey",
      "id": 11652019,
      "node_id": "MDQ6VXNlcjExNjUyMDE5",
      "avatar_url": "https://avatars.githubusercontent.com/u/11652019?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cwhinfrey",
      "html_url": "https://github.com/cwhinfrey",
      "followers_url": "https://api.github.com/users/cwhinfrey/followers",
      "following_url": "https://api.github.com/users/cwhinfrey/following{/other_user}",
      "gists_url": "https://api.github.com/users/cwhinfrey/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cwhinfrey/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cwhinfrey/subscriptions",
      "organizations_url": "https://api.github.com/users/cwhinfrey/orgs",
      "repos_url": "https://api.github.com/users/cwhinfrey/repos",
      "events_url": "https://api.github.com/users/cwhinfrey/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cwhinfrey/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-06-25T19:02:29Z",
    "updated_at": "2018-06-25T19:02:39Z",
    "author_association": "CONTRIBUTOR",
    "body": "@shrugs Makes sense. Looks like I missed this part in the standard. \r\n```Solidity issue #3412: The above interfaces include explicit mutability guarantees for each function. Mutability guarantees are, in order weak to strong: payable, implicit nonpayable, view, and pure. Your implementation MUST meet the mutability guarantee in this interface and you MAY meet a stronger guarantee. For example, a payable function in this interface may be implemented as nonpayble (no state mutability specified) in your contract. We expect a later Solidity release will allow your stricter contract to inherit from this interface, but a workaround for version 0.4.20 is that you can edit this interface to add stricter mutability before inheriting from your contract.```\r\nI'm going to close this.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/400060610/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/426134118",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1015#issuecomment-426134118",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1015",
    "id": 426134118,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyNjEzNDExOA==",
    "user": {
      "login": "robertmagier",
      "id": 34715949,
      "node_id": "MDQ6VXNlcjM0NzE1OTQ5",
      "avatar_url": "https://avatars.githubusercontent.com/u/34715949?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/robertmagier",
      "html_url": "https://github.com/robertmagier",
      "followers_url": "https://api.github.com/users/robertmagier/followers",
      "following_url": "https://api.github.com/users/robertmagier/following{/other_user}",
      "gists_url": "https://api.github.com/users/robertmagier/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/robertmagier/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/robertmagier/subscriptions",
      "organizations_url": "https://api.github.com/users/robertmagier/orgs",
      "repos_url": "https://api.github.com/users/robertmagier/repos",
      "events_url": "https://api.github.com/users/robertmagier/events{/privacy}",
      "received_events_url": "https://api.github.com/users/robertmagier/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-02T03:12:33Z",
    "updated_at": "2018-10-02T03:12:33Z",
    "author_association": "NONE",
    "body": "I check today and ERC721 standard defines those functions as payable. Is it possible to reopen the ticket and modify it ? ",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/426134118/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/426137074",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1015#issuecomment-426137074",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1015",
    "id": 426137074,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyNjEzNzA3NA==",
    "user": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-02T03:28:57Z",
    "updated_at": "2018-10-02T03:29:04Z",
    "author_association": "MEMBER",
    "body": "@robertmagier For the reasons explained above so far we've decided to keep the functions non-payable. Have you run into a situation where you need them to be payable? If so, please open a new issue and explain the situation so we can discuss possible solutions.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/426137074/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/426145101",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1015#issuecomment-426145101",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1015",
    "id": 426145101,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyNjE0NTEwMQ==",
    "user": {
      "login": "robertmagier",
      "id": 34715949,
      "node_id": "MDQ6VXNlcjM0NzE1OTQ5",
      "avatar_url": "https://avatars.githubusercontent.com/u/34715949?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/robertmagier",
      "html_url": "https://github.com/robertmagier",
      "followers_url": "https://api.github.com/users/robertmagier/followers",
      "following_url": "https://api.github.com/users/robertmagier/following{/other_user}",
      "gists_url": "https://api.github.com/users/robertmagier/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/robertmagier/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/robertmagier/subscriptions",
      "organizations_url": "https://api.github.com/users/robertmagier/orgs",
      "repos_url": "https://api.github.com/users/robertmagier/repos",
      "events_url": "https://api.github.com/users/robertmagier/events{/privacy}",
      "received_events_url": "https://api.github.com/users/robertmagier/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-02T04:25:22Z",
    "updated_at": "2018-10-02T04:25:22Z",
    "author_association": "NONE",
    "body": "@frangio Thank you for your kind reply. I decided to comment on that because of @shrugs  comment \r\n\r\n> The reason that payable was not added by default is that non-payable functions are still standard-compliant, as of the last time I read the standard. \r\n\r\nSince standard has changed I thought it is a good enough reason to reopen. I have a case where we implement transferFrom function which has to be payable and we can't overwrite your function because it is giving an error message: \r\n\r\n```\r\nTypeError: Overriding function changes state mutability from \"nonpayable\" to \"payable\".\r\n    function safeTransferFrom(\r\n```\r\n\r\nSo we can either modify openzeppelin-solidity library on our own or simply violate ERC721 Standard. \r\n\r\nI will of course create another issues as required. Thank you. ",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/426145101/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/426215498",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1015#issuecomment-426215498",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1015",
    "id": 426215498,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyNjIxNTQ5OA==",
    "user": {
      "login": "nventuro",
      "id": 2530770,
      "node_id": "MDQ6VXNlcjI1MzA3NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2530770?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nventuro",
      "html_url": "https://github.com/nventuro",
      "followers_url": "https://api.github.com/users/nventuro/followers",
      "following_url": "https://api.github.com/users/nventuro/following{/other_user}",
      "gists_url": "https://api.github.com/users/nventuro/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nventuro/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nventuro/subscriptions",
      "organizations_url": "https://api.github.com/users/nventuro/orgs",
      "repos_url": "https://api.github.com/users/nventuro/repos",
      "events_url": "https://api.github.com/users/nventuro/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nventuro/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-02T09:51:02Z",
    "updated_at": "2018-10-02T09:51:02Z",
    "author_association": "CONTRIBUTOR",
    "body": "@robertmagier I've just checked the standard in its final form, and it still contains the section described above (see [here](https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md#caveats). It references the [Solidity compiler issue #3412](https://github.com/ethereum/solidity/issues/3412), where removing the error you encountered is described. From that discussion, however, it looks like it'll be a long time before the feature is implemented (_if_ they decide to implement it): I wouldn't expect it to come out before 0.6.0.\r\n\r\nSo, I'm not sure what's the right call. As it is, it looks like the only way to get those functions to be `payable` is to manually edit the original interface, which is of course not what we want. Could you please share some more detail as to why you need that function to be `payable`, so we can see if we can find a temporary workaround? Thanks!",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/426215498/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/426662690",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1015#issuecomment-426662690",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1015",
    "id": 426662690,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyNjY2MjY5MA==",
    "user": {
      "login": "ImmuneGit",
      "id": 25203571,
      "node_id": "MDQ6VXNlcjI1MjAzNTcx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25203571?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ImmuneGit",
      "html_url": "https://github.com/ImmuneGit",
      "followers_url": "https://api.github.com/users/ImmuneGit/followers",
      "following_url": "https://api.github.com/users/ImmuneGit/following{/other_user}",
      "gists_url": "https://api.github.com/users/ImmuneGit/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ImmuneGit/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ImmuneGit/subscriptions",
      "organizations_url": "https://api.github.com/users/ImmuneGit/orgs",
      "repos_url": "https://api.github.com/users/ImmuneGit/repos",
      "events_url": "https://api.github.com/users/ImmuneGit/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ImmuneGit/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-03T14:40:19Z",
    "updated_at": "2018-10-03T14:40:19Z",
    "author_association": "NONE",
    "body": "Let me describe a use case I've stumbled across. I have to do some post processing after selling tokens (let say get a tax fee). And we want to do the same in case if tokens sell on other platforms. I suppose in this case other platforms will just use our ERC721 contract to interact with our tokens. To realise it all \"transfer\" functions have to be \"payable\".",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/426662690/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/426732006",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1015#issuecomment-426732006",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1015",
    "id": 426732006,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyNjczMjAwNg==",
    "user": {
      "login": "robertmagier",
      "id": 34715949,
      "node_id": "MDQ6VXNlcjM0NzE1OTQ5",
      "avatar_url": "https://avatars.githubusercontent.com/u/34715949?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/robertmagier",
      "html_url": "https://github.com/robertmagier",
      "followers_url": "https://api.github.com/users/robertmagier/followers",
      "following_url": "https://api.github.com/users/robertmagier/following{/other_user}",
      "gists_url": "https://api.github.com/users/robertmagier/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/robertmagier/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/robertmagier/subscriptions",
      "organizations_url": "https://api.github.com/users/robertmagier/orgs",
      "repos_url": "https://api.github.com/users/robertmagier/repos",
      "events_url": "https://api.github.com/users/robertmagier/events{/privacy}",
      "received_events_url": "https://api.github.com/users/robertmagier/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-03T17:48:30Z",
    "updated_at": "2018-10-03T17:48:30Z",
    "author_association": "NONE",
    "body": "@nventuro I think I am more than confused. Standard your linked is still describing function as payable. \r\n\r\n`   function transferFrom(address _from, address _to, uint256 _tokenId) external payable;`\r\n\r\nHowever I think you are talking about mutability guarantees which says that you can implement payable function as non payable. This is what you did in your implementation - implemented those functions as non payable. This works for you, but @ImmuneGit  and I want to use your library but overwrite transferFrom function as payable.\r\n\r\nI also checked on Remix and it seems that there is really no good solution to it as you can't overwrite payable function as nonpayable and also it is not possible to overwrite nonpayable function as payable. \r\n\r\nBoth implemenations below will fail: \r\n\r\n```\r\npragma solidity ^0.4.24;\r\n\r\ncontract A \r\n{\r\n    function transfer() public   returns (uint) {\r\n        return 7;\r\n    }\r\n}\r\n\r\ncontract B is A {\r\n    function transfer() public payable   returns (uint)\r\n    {\r\n        return msg.value;\r\n    }\r\n}\r\n```\r\n\r\n`browser/test.sol:13:5: TypeError: Overriding function changes state mutability from \"nonpayable\" to \"payable\".`\r\n\r\n```\r\npragma solidity ^0.4.24;\r\n\r\ncontract A \r\n{\r\n    function transfer() public payable  returns (uint) {\r\n        return 7;\r\n    }\r\n}\r\ncontract B is A {\r\n    \r\n    function transfer() public  returns (uint)\r\n    {\r\n        return msg.value;\r\n    }\r\n}\r\n```\r\n\r\n`TypeError: Overriding function changes state mutability from \"payable\" to \"nonpayable\".`\r\n\r\nSo I think if you implement your function as payable then people who want to have as nonpayble will have a problem and same for opposite scenario.  \r\n\r\nThe only thing I can say in favor of implementing those functions as payable is that standard define them that way and that it will work for  me :) \r\n\r\n```\r\n function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes data) external payable;\r\n function safeTransferFrom(address _from, address _to, uint256 _tokenId) external payable;\r\n function transferFrom(address _from, address _to, uint256 _tokenId) external payable;\r\n function approve(address _approved, uint256 _tokenId) external payable;\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/426732006/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/426821225",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1015#issuecomment-426821225",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1015",
    "id": 426821225,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyNjgyMTIyNQ==",
    "user": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-03T22:12:05Z",
    "updated_at": "2018-10-03T22:12:54Z",
    "author_association": "MEMBER",
    "body": "I do understand your use cases and would like OpenZeppelin to cater to them, so I'm reopening the issue to keep the discussion going and to consider different options for implementation. But to kickstart the discussion I'll share why our implementation's functions are not payable at the moment.\r\n\r\nFunctions being non-payable by default is a Solidity security feature that prevents people accidentally sending ether to contracts where it is unrecoverable. Developers have to be very careful when they make a function payable, and ensure that the ether that will enter the contract is somehow used or retrievable later.\r\n\r\nA custom ERC721 contract with payable functions can ensure the ether is not lost, e.g. by forwarding it somewhere. While OpenZeppelin can provide a base ERC721 implementation with payable functions, it can't provide a generic mechanism to ensure the ether is put to good use because it would be entirely implementation specific. Naive users of OpenZeppelin ERC721 would not be adding any such mechanism, and all those OpenZeppelin ERC721 tokens would become sinks of unrecoverable ether.\r\n\r\nThere are some things that come to mind that we could do, but the developer experience of using them would not be very good. Feel free to share any ideas!",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/426821225/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/427157482",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1015#issuecomment-427157482",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1015",
    "id": 427157482,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyNzE1NzQ4Mg==",
    "user": {
      "login": "robertmagier",
      "id": 34715949,
      "node_id": "MDQ6VXNlcjM0NzE1OTQ5",
      "avatar_url": "https://avatars.githubusercontent.com/u/34715949?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/robertmagier",
      "html_url": "https://github.com/robertmagier",
      "followers_url": "https://api.github.com/users/robertmagier/followers",
      "following_url": "https://api.github.com/users/robertmagier/following{/other_user}",
      "gists_url": "https://api.github.com/users/robertmagier/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/robertmagier/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/robertmagier/subscriptions",
      "organizations_url": "https://api.github.com/users/robertmagier/orgs",
      "repos_url": "https://api.github.com/users/robertmagier/repos",
      "events_url": "https://api.github.com/users/robertmagier/events{/privacy}",
      "received_events_url": "https://api.github.com/users/robertmagier/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-04T20:26:32Z",
    "updated_at": "2018-10-04T20:26:32Z",
    "author_association": "NONE",
    "body": "Thank you for reopening. For the moment we have copied your library and modified you transfer function to be payable. It works for us ( of course ). \r\n\r\nMaybe you can make this functions payable and implement internal preTransferValidation function which will be called in transferFrom ( and other functions ). In default implementation this function would only  have one line \r\n`\r\nrequire (msg.value == 0); `\r\n\r\nKind of doesn't make sense a bit to make function payable and require value to be 0, but it will guarantee that there is no ETH being send by mistake. From user perspective it would work exactly same as sending ETH to non payable function. \r\n\r\nThe other solution is to create postTransferUpdate function and send all ETH back to the sender. \r\nThis is not so good because I think it is better to fail and let user know that ETH is not accepted. ",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/427157482/reactions",
      "total_count": 4,
      "+1": 4,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/454653662",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1015#issuecomment-454653662",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1015",
    "id": 454653662,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1NDY1MzY2Mg==",
    "user": {
      "login": "3esmit",
      "id": 224810,
      "node_id": "MDQ6VXNlcjIyNDgxMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/224810?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/3esmit",
      "html_url": "https://github.com/3esmit",
      "followers_url": "https://api.github.com/users/3esmit/followers",
      "following_url": "https://api.github.com/users/3esmit/following{/other_user}",
      "gists_url": "https://api.github.com/users/3esmit/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/3esmit/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/3esmit/subscriptions",
      "organizations_url": "https://api.github.com/users/3esmit/orgs",
      "repos_url": "https://api.github.com/users/3esmit/repos",
      "events_url": "https://api.github.com/users/3esmit/events{/privacy}",
      "received_events_url": "https://api.github.com/users/3esmit/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-16T05:08:29Z",
    "updated_at": "2019-01-16T05:08:29Z",
    "author_association": "NONE",
    "body": "Making a function payable tells that msg.value should be considered in the call, which is not desirable in that functions. Are those functions expecting any msg.value?",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/454653662/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 1,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/553125328",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1015#issuecomment-553125328",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1015",
    "id": 553125328,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1MzEyNTMyOA==",
    "user": {
      "login": "spalladino",
      "id": 429604,
      "node_id": "MDQ6VXNlcjQyOTYwNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/429604?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/spalladino",
      "html_url": "https://github.com/spalladino",
      "followers_url": "https://api.github.com/users/spalladino/followers",
      "following_url": "https://api.github.com/users/spalladino/following{/other_user}",
      "gists_url": "https://api.github.com/users/spalladino/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/spalladino/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/spalladino/subscriptions",
      "organizations_url": "https://api.github.com/users/spalladino/orgs",
      "repos_url": "https://api.github.com/users/spalladino/repos",
      "events_url": "https://api.github.com/users/spalladino/events{/privacy}",
      "received_events_url": "https://api.github.com/users/spalladino/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-11-12T21:33:50Z",
    "updated_at": "2019-11-12T21:33:50Z",
    "author_association": "CONTRIBUTOR",
    "body": "A use case I've been referred to is charging a small fee per transfer. In this scenario, tokens represent the right to access a resource. To prevent people sharing this access back and forth whenever they need to access it, the minter enforces a small fee.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/553125328/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/553530412",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1015#issuecomment-553530412",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1015",
    "id": 553530412,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1MzUzMDQxMg==",
    "user": {
      "login": "nventuro",
      "id": 2530770,
      "node_id": "MDQ6VXNlcjI1MzA3NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2530770?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nventuro",
      "html_url": "https://github.com/nventuro",
      "followers_url": "https://api.github.com/users/nventuro/followers",
      "following_url": "https://api.github.com/users/nventuro/following{/other_user}",
      "gists_url": "https://api.github.com/users/nventuro/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nventuro/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nventuro/subscriptions",
      "organizations_url": "https://api.github.com/users/nventuro/orgs",
      "repos_url": "https://api.github.com/users/nventuro/repos",
      "events_url": "https://api.github.com/users/nventuro/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nventuro/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-11-13T18:08:30Z",
    "updated_at": "2019-11-13T18:08:30Z",
    "author_association": "CONTRIBUTOR",
    "body": "@spalladino would the fee be charged on transfer? Who gets the fee? Wouldn't it be easier to simply limit transfers?",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/553530412/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/553896324",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1015#issuecomment-553896324",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1015",
    "id": 553896324,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1Mzg5NjMyNA==",
    "user": {
      "login": "spalladino",
      "id": 429604,
      "node_id": "MDQ6VXNlcjQyOTYwNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/429604?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/spalladino",
      "html_url": "https://github.com/spalladino",
      "followers_url": "https://api.github.com/users/spalladino/followers",
      "following_url": "https://api.github.com/users/spalladino/following{/other_user}",
      "gists_url": "https://api.github.com/users/spalladino/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/spalladino/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/spalladino/subscriptions",
      "organizations_url": "https://api.github.com/users/spalladino/orgs",
      "repos_url": "https://api.github.com/users/spalladino/repos",
      "events_url": "https://api.github.com/users/spalladino/events{/privacy}",
      "received_events_url": "https://api.github.com/users/spalladino/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-11-14T13:50:57Z",
    "updated_at": "2019-11-14T13:50:57Z",
    "author_association": "CONTRIBUTOR",
    "body": "> would the fee be charged on transfer? \r\n\r\nYes\r\n\r\n> Who gets the fee? \r\n\r\nThe minter of the token. Not sure if there can be more than one minter per contract in this model.\r\n\r\n> Wouldn't it be easier to simply limit transfers?\r\n\r\nThe question is how much to limit them. They are considering alternative methods, such as burning part of the _time_ left for accessing a resource (think of a token representing a year-long subscription, transferring it could burn a few days out of it) but it'd be interesting to support ETH-based fees.\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/553896324/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/553897657",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1015#issuecomment-553897657",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1015",
    "id": 553897657,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1Mzg5NzY1Nw==",
    "user": {
      "login": "spalladino",
      "id": 429604,
      "node_id": "MDQ6VXNlcjQyOTYwNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/429604?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/spalladino",
      "html_url": "https://github.com/spalladino",
      "followers_url": "https://api.github.com/users/spalladino/followers",
      "following_url": "https://api.github.com/users/spalladino/following{/other_user}",
      "gists_url": "https://api.github.com/users/spalladino/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/spalladino/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/spalladino/subscriptions",
      "organizations_url": "https://api.github.com/users/spalladino/orgs",
      "repos_url": "https://api.github.com/users/spalladino/repos",
      "events_url": "https://api.github.com/users/spalladino/events{/privacy}",
      "received_events_url": "https://api.github.com/users/spalladino/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-11-14T13:54:15Z",
    "updated_at": "2019-11-14T13:54:15Z",
    "author_association": "CONTRIBUTOR",
    "body": "Another data point: https://twitter.com/DennisonBertram/status/1194655772455690241",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/553897657/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/909267069",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1015#issuecomment-909267069",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1015",
    "id": 909267069,
    "node_id": "IC_kwDOA9tCBs42MlB9",
    "user": {
      "login": "enzoferey",
      "id": 10673347,
      "node_id": "MDQ6VXNlcjEwNjczMzQ3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10673347?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/enzoferey",
      "html_url": "https://github.com/enzoferey",
      "followers_url": "https://api.github.com/users/enzoferey/followers",
      "following_url": "https://api.github.com/users/enzoferey/following{/other_user}",
      "gists_url": "https://api.github.com/users/enzoferey/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/enzoferey/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/enzoferey/subscriptions",
      "organizations_url": "https://api.github.com/users/enzoferey/orgs",
      "repos_url": "https://api.github.com/users/enzoferey/repos",
      "events_url": "https://api.github.com/users/enzoferey/events{/privacy}",
      "received_events_url": "https://api.github.com/users/enzoferey/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-08-31T14:01:51Z",
    "updated_at": "2021-08-31T14:02:32Z",
    "author_association": "NONE",
    "body": "Sorry to bump this issue a few years later. I'm new to Ethereum development and I have stumbled upon the same problem described by other people. I would like users to pay a certain amount for transferring tokens from one to another so the contract itself acts like a marketplace taking a certain commission. I guess it's a very similar use case than @ImmuneGit described.\r\n\r\nThe solution proposed to @robertmagier seems to cover the security concerns you had, but no answer was given to it.\r\n\r\nWhat's the status on this issue ? Is there a better way to achieve this type of uses cases?",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/909267069/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1032148796",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1015#issuecomment-1032148796",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1015",
    "id": 1032148796,
    "node_id": "IC_kwDOA9tCBs49hVc8",
    "user": {
      "login": "Schachte",
      "id": 7055226,
      "node_id": "MDQ6VXNlcjcwNTUyMjY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7055226?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Schachte",
      "html_url": "https://github.com/Schachte",
      "followers_url": "https://api.github.com/users/Schachte/followers",
      "following_url": "https://api.github.com/users/Schachte/following{/other_user}",
      "gists_url": "https://api.github.com/users/Schachte/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Schachte/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Schachte/subscriptions",
      "organizations_url": "https://api.github.com/users/Schachte/orgs",
      "repos_url": "https://api.github.com/users/Schachte/repos",
      "events_url": "https://api.github.com/users/Schachte/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Schachte/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-02-08T02:29:31Z",
    "updated_at": "2022-02-08T02:29:31Z",
    "author_association": "NONE",
    "body": "@enzoferey You might be interested in EIP-2981 spec. This is NFT with Royalties standard. However, I don't know if all marketplaces support the spec yet (IE OpenSea)",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1032148796/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1033125115",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1015#issuecomment-1033125115",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1015",
    "id": 1033125115,
    "node_id": "IC_kwDOA9tCBs49lDz7",
    "user": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-02-08T22:26:02Z",
    "updated_at": "2022-02-08T22:26:02Z",
    "author_association": "MEMBER",
    "body": "Note that we have an implementation of EIP-2981 now: [ERC2981](https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v4.5/contracts/token/common/ERC2981.sol) and [ERC721Royalty](https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v4.5/contracts/token/ERC721/extensions/ERC721Royalty.sol) which is just a thin wrapper.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1033125115/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 1,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1033209998",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1015#issuecomment-1033209998",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1015",
    "id": 1033209998,
    "node_id": "IC_kwDOA9tCBs49lYiO",
    "user": {
      "login": "enzoferey",
      "id": 10673347,
      "node_id": "MDQ6VXNlcjEwNjczMzQ3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10673347?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/enzoferey",
      "html_url": "https://github.com/enzoferey",
      "followers_url": "https://api.github.com/users/enzoferey/followers",
      "following_url": "https://api.github.com/users/enzoferey/following{/other_user}",
      "gists_url": "https://api.github.com/users/enzoferey/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/enzoferey/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/enzoferey/subscriptions",
      "organizations_url": "https://api.github.com/users/enzoferey/orgs",
      "repos_url": "https://api.github.com/users/enzoferey/repos",
      "events_url": "https://api.github.com/users/enzoferey/events{/privacy}",
      "received_events_url": "https://api.github.com/users/enzoferey/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-02-09T00:45:53Z",
    "updated_at": "2022-02-09T00:45:53Z",
    "author_association": "NONE",
    "body": "Thanks to both of you @Schachte and @frangio üôåüèª ",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1033209998/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1556043909",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1015#issuecomment-1556043909",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1015",
    "id": 1556043909,
    "node_id": "IC_kwDOA9tCBs5cv1iF",
    "user": {
      "login": "sullof",
      "id": 108464,
      "node_id": "MDQ6VXNlcjEwODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/108464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sullof",
      "html_url": "https://github.com/sullof",
      "followers_url": "https://api.github.com/users/sullof/followers",
      "following_url": "https://api.github.com/users/sullof/following{/other_user}",
      "gists_url": "https://api.github.com/users/sullof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sullof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sullof/subscriptions",
      "organizations_url": "https://api.github.com/users/sullof/orgs",
      "repos_url": "https://api.github.com/users/sullof/repos",
      "events_url": "https://api.github.com/users/sullof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sullof/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-05-20T23:46:22Z",
    "updated_at": "2023-05-21T00:30:45Z",
    "author_association": "NONE",
    "body": "> Note that we have an implementation of EIP-2981 now: [ERC2981](https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v4.5/contracts/token/common/ERC2981.sol) and [ERC721Royalty](https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v4.5/contracts/token/ERC721/extensions/ERC721Royalty.sol) which is just a thin wrapper.\r\n\r\nI used that in a contract but it does not really solve the problem of royalties, it just suggests royalties to marketplaces if they decide to support the standard.\r\n\r\nInstead, making the transfer functions payable would allow the contract to manage royalties and fees on chain.\r\n\r\nAnyway, I started a discussion about this issue on https://ethereum-magicians.org/t/proposed-solution-for-nft-royalties-addressing-erc-721-payability/14368 before noticing this issue.\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1556043909/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
