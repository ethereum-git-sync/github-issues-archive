{
  "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1651",
  "repository_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts",
  "labels_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1651/labels{/name}",
  "comments_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1651/comments",
  "events_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1651/events",
  "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1651",
  "id": 414721898,
  "node_id": "MDU6SXNzdWU0MTQ3MjE4OTg=",
  "number": 1651,
  "title": "Add CREATE2 contract factory with support for meta transactions",
  "user": {
    "login": "marekkirejczyk",
    "id": 197522,
    "node_id": "MDQ6VXNlcjE5NzUyMg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/197522?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/marekkirejczyk",
    "html_url": "https://github.com/marekkirejczyk",
    "followers_url": "https://api.github.com/users/marekkirejczyk/followers",
    "following_url": "https://api.github.com/users/marekkirejczyk/following{/other_user}",
    "gists_url": "https://api.github.com/users/marekkirejczyk/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/marekkirejczyk/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/marekkirejczyk/subscriptions",
    "organizations_url": "https://api.github.com/users/marekkirejczyk/orgs",
    "repos_url": "https://api.github.com/users/marekkirejczyk/repos",
    "events_url": "https://api.github.com/users/marekkirejczyk/events{/privacy}",
    "received_events_url": "https://api.github.com/users/marekkirejczyk/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 503650860,
      "node_id": "MDU6TGFiZWw1MDM2NTA4NjA=",
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/labels/feature",
      "name": "feature",
      "color": "b9db64",
      "default": false,
      "description": "New contracts, functions, or helpers."
    },
    {
      "id": 1000207718,
      "node_id": "MDU6TGFiZWwxMDAwMjA3NzE4",
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/labels/contracts",
      "name": "contracts",
      "color": "1d76db",
      "default": false,
      "description": "Smart contract code."
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 5,
  "created_at": "2019-02-26T17:09:52Z",
  "updated_at": "2020-08-26T15:14:42Z",
  "closed_at": "2020-08-26T15:14:42Z",
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "**üßê Motivation**\r\nThis is in connection to #1644. We would like to have a CREATE2 factory that supports meta-transactions. We expect that CREATE2 & meta-transaction will be a common combination. \r\n\r\nI expect interface and implementation for the factory with and without meta-transaction to differ a lot.\r\n\r\n**üìù Details**\r\nProposed interface:\r\n```\r\ncontract Create2MetaTransactionFactory {\r\n\r\n    /* Creates factory with fixed code */\r\n    function constructor(bytes memory _contractCode) public;\r\n\r\n    /* Deploys a contract, required salt and factory address to be signed by signer */\r\n    function deployContract(address _signer, bytes32 _salt, bytes memory _signature) public;\r\n    \r\n    /* Gets an address before contract deployment */\r\n    function computeContractAddress(bytes32 _salt, address _signer) public view \r\n        returns (address _contractAddress);\r\n}\r\n```\r\n\r\nAn example implementation is in universal login repository on ETHDenver [hackathon branch](https://github.com/UniversalLogin/UniversalLoginSDK/blob/hackathon/universal-login-wallet/contracts/contracts/Create2Factory.sol).\r\n\r\n Code created by @cwhinfrey as he was helping our team during the hacking time.\r\n\r\n",
  "closed_by": {
    "login": "frangio",
    "id": 481465,
    "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
    "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/frangio",
    "html_url": "https://github.com/frangio",
    "followers_url": "https://api.github.com/users/frangio/followers",
    "following_url": "https://api.github.com/users/frangio/following{/other_user}",
    "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
    "organizations_url": "https://api.github.com/users/frangio/orgs",
    "repos_url": "https://api.github.com/users/frangio/repos",
    "events_url": "https://api.github.com/users/frangio/events{/privacy}",
    "received_events_url": "https://api.github.com/users/frangio/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1651/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1651/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/467562624",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1651#issuecomment-467562624",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1651",
    "id": 467562624,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ2NzU2MjYyNA==",
    "user": {
      "login": "nventuro",
      "id": 2530770,
      "node_id": "MDQ6VXNlcjI1MzA3NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2530770?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nventuro",
      "html_url": "https://github.com/nventuro",
      "followers_url": "https://api.github.com/users/nventuro/followers",
      "following_url": "https://api.github.com/users/nventuro/following{/other_user}",
      "gists_url": "https://api.github.com/users/nventuro/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nventuro/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nventuro/subscriptions",
      "organizations_url": "https://api.github.com/users/nventuro/orgs",
      "repos_url": "https://api.github.com/users/nventuro/repos",
      "events_url": "https://api.github.com/users/nventuro/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nventuro/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-02-26T18:46:41Z",
    "updated_at": "2019-02-26T18:46:41Z",
    "author_association": "CONTRIBUTOR",
    "body": "Hey there @marekkirejczyk, thanks for contributing to this discussion!\r\n\r\nI've been taking a look at your proposed interface and have a couple questions: from what I can tell, the only difference between it and the one mentioned in #1644 is the presence of the `signer` argument (along with a valid signature for deployment), which is hashed together with the salt to produce the actual salt that is used for `CREATE2`. What is the purpose of this argument?\r\n\r\nThe only scenario that I can think of is a user that wants to reserve an address and make sure no other account will be able to deploy a contract there, even if the salt is leaked. Said scenario wouldn't make much sense at a first glance, since the bytecode of the deployed contract is known (worst case, the 'attacker' would've paid for our user's deployment), _unless_ the contract has some sort of one-off initialization function (in the style of [ZeppelinOS's `Initializable`](https://github.com/zeppelinos/zos/blob/v2.2.0/packages/lib/contracts/Initializable.sol)) that is meant to be called right after contract creation.\r\n\r\nIn that case, I'd expect the actual flow to look like this: user calls contract A with salt, signature, and initialization data, which then deploys a new contract using the factory, and immediately initializes it with the provided data. This could, however, be simplified by including an optional `data` argument in your proposed `deployContract` function, which would conditionally call the created contract with this value (again, see [how ZeppelinOS does this](https://github.com/zeppelinos/zos/blob/v2.2.0/packages/lib/contracts/upgradeability/UpgradeabilityProxy.sol#L34)).\r\n\r\nPlease share your thoughts!",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/467562624/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/467642690",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1651#issuecomment-467642690",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1651",
    "id": 467642690,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ2NzY0MjY5MA==",
    "user": {
      "login": "cwhinfrey",
      "id": 11652019,
      "node_id": "MDQ6VXNlcjExNjUyMDE5",
      "avatar_url": "https://avatars.githubusercontent.com/u/11652019?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cwhinfrey",
      "html_url": "https://github.com/cwhinfrey",
      "followers_url": "https://api.github.com/users/cwhinfrey/followers",
      "following_url": "https://api.github.com/users/cwhinfrey/following{/other_user}",
      "gists_url": "https://api.github.com/users/cwhinfrey/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cwhinfrey/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cwhinfrey/subscriptions",
      "organizations_url": "https://api.github.com/users/cwhinfrey/orgs",
      "repos_url": "https://api.github.com/users/cwhinfrey/repos",
      "events_url": "https://api.github.com/users/cwhinfrey/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cwhinfrey/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-02-26T22:35:02Z",
    "updated_at": "2019-02-26T22:35:02Z",
    "author_association": "CONTRIBUTOR",
    "body": "@nventuro The purpose of including the signer when creating the `actualSalt` (salt passed into create2, open to different names for this) is exactly what you mentioned, contracts with one off `initialize()` functions.\r\n\r\nWe do need to either: 1) Prevent other accounts from deploying the contract by using the signer to calculate the salt or 2) use the initialization data when calculating the salt to ensure different initialization data can't be used.\r\n\r\nThe reason is that we don't want third parties to be able to deploy the contract and initialize it with different data than was intended. For example, there might be ETH sitting in the future address of a wallet contract that is initialized with an owner. We want to make sure a third party can't deploy the contract and set themselves as the owner. On top of that, the salt will _always_ be leaked because deployments can be front run.\r\n\r\nI like the second option listed above where the `actualSalt` is based on a user determined salt and the initialization data like this:\r\n```solidity\r\nbytes32 actualSalt = keccak256(abi.encodePacked(salt, initData))\r\n```\r\nThat way changing the initialization data will change the contract address. It's more flexible than the first option because any account can deploy the contract. I might have some time tonight to write up a quick gist of this.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/467642690/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/467746446",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1651#issuecomment-467746446",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1651",
    "id": 467746446,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ2Nzc0NjQ0Ng==",
    "user": {
      "login": "cwhinfrey",
      "id": 11652019,
      "node_id": "MDQ6VXNlcjExNjUyMDE5",
      "avatar_url": "https://avatars.githubusercontent.com/u/11652019?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cwhinfrey",
      "html_url": "https://github.com/cwhinfrey",
      "followers_url": "https://api.github.com/users/cwhinfrey/followers",
      "following_url": "https://api.github.com/users/cwhinfrey/following{/other_user}",
      "gists_url": "https://api.github.com/users/cwhinfrey/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cwhinfrey/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cwhinfrey/subscriptions",
      "organizations_url": "https://api.github.com/users/cwhinfrey/orgs",
      "repos_url": "https://api.github.com/users/cwhinfrey/repos",
      "events_url": "https://api.github.com/users/cwhinfrey/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cwhinfrey/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-02-27T06:55:27Z",
    "updated_at": "2019-02-27T06:55:27Z",
    "author_association": "CONTRIBUTOR",
    "body": "Haven't tested this but here's one way it could possibly look when computing the salt with the initialization data: https://gist.github.com/cwhinfrey/380d2d073b122f7903bd9acb060d470a\r\n`Create2FactroyBase` is based on @stanislaw-glogowski's [ContractCreator](https://github.com/archanova/solidity/blob/08f8f6bedc6e71c24758d20219b7d0749d75919d/contracts/contractCreator/ContractCreator.sol). The contracts could also be combined into a single contract instead of having a base contract. No signed message handling for meta-transactions needed because anyone can deploy the contract.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/467746446/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/467892881",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1651#issuecomment-467892881",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1651",
    "id": 467892881,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ2Nzg5Mjg4MQ==",
    "user": {
      "login": "nventuro",
      "id": 2530770,
      "node_id": "MDQ6VXNlcjI1MzA3NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2530770?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nventuro",
      "html_url": "https://github.com/nventuro",
      "followers_url": "https://api.github.com/users/nventuro/followers",
      "following_url": "https://api.github.com/users/nventuro/following{/other_user}",
      "gists_url": "https://api.github.com/users/nventuro/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nventuro/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nventuro/subscriptions",
      "organizations_url": "https://api.github.com/users/nventuro/orgs",
      "repos_url": "https://api.github.com/users/nventuro/repos",
      "events_url": "https://api.github.com/users/nventuro/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nventuro/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-02-27T14:55:54Z",
    "updated_at": "2019-02-27T15:07:10Z",
    "author_association": "CONTRIBUTOR",
    "body": "Thanks @cwhinfrey! That clarified a lot.\r\n\r\n>On top of that, the salt will _always_ be leaked because deployments can be front run.\r\n\r\nWouldn't the signing of the message prevent front-running though?\r\n\r\nI like both options you described, there's a flexibility trade-off: either only a single account does the deployment, with arbitrary initialization data (the `actualSalt = hash(salt, signer)` approach), or any arbitrary account does the deployment, with single pre-defined initialization data (the `actualSalt = hash(salt, data)` approach). We could of course have the salt include both signer and data, but I don't see much benefit in that.\r\n\r\nNone of the approaches strike me as objectively better than the other, I can think of scenarios in which they could all be useful. Perhaps we should support them both?",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/467892881/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/680943816",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1651#issuecomment-680943816",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1651",
    "id": 680943816,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY4MDk0MzgxNg==",
    "user": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-08-26T15:14:42Z",
    "updated_at": "2020-08-26T15:14:42Z",
    "author_association": "MEMBER",
    "body": "Fixed in https://github.com/OpenZeppelin/openzeppelin-contracts/pull/2013.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/680943816/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
