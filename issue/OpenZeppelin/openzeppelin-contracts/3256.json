{
  "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3256",
  "repository_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts",
  "labels_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3256/labels{/name}",
  "comments_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3256/comments",
  "events_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3256/events",
  "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3256",
  "id": 1165003843,
  "node_id": "I_kwDOA9tCBs5FcIxD",
  "number": 3256,
  "title": "EnumerableSet.clear()",
  "user": {
    "login": "olehmisar",
    "id": 29802592,
    "node_id": "MDQ6VXNlcjI5ODAyNTky",
    "avatar_url": "https://avatars.githubusercontent.com/u/29802592?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/olehmisar",
    "html_url": "https://github.com/olehmisar",
    "followers_url": "https://api.github.com/users/olehmisar/followers",
    "following_url": "https://api.github.com/users/olehmisar/following{/other_user}",
    "gists_url": "https://api.github.com/users/olehmisar/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/olehmisar/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/olehmisar/subscriptions",
    "organizations_url": "https://api.github.com/users/olehmisar/orgs",
    "repos_url": "https://api.github.com/users/olehmisar/repos",
    "events_url": "https://api.github.com/users/olehmisar/events{/privacy}",
    "received_events_url": "https://api.github.com/users/olehmisar/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 5,
  "created_at": "2022-03-10T09:59:01Z",
  "updated_at": "2022-11-15T05:27:49Z",
  "closed_at": null,
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "**üßê Motivation**\r\nUse case:\r\nI need to store a bunch of approvals in a set and once the number of approvals reach a specific length, I need to execute an operation and clear all the approvals. \r\n\r\n<!-- Is your feature request related to a specific problem? Is it just a crazy idea? Tell us about it! -->\r\n\r\n**üìù Details**\r\n<!-- Please describe your feature request in detail. -->\r\n\r\nRight now, it is possible to clear the set with this code:\r\n```solidity\r\naddress[] memory values = approvals.values();\r\nfor (uint256 i = 0; i < values.length; i++) {\r\n  approvals.remove(values[i]);\r\n}\r\n```\r\nbut it is rather inefficient because each call to `.remove()` does `.pop()` and multiple storage reads/writes.\r\n\r\nThe implementation of `.clear()` might look like this:\r\n```solidity\r\nfunction clear(Set storage set) private {\r\n  for (uint256 i = 0; i < set._values.length; i++) {\r\n    set._indexes[set._values[i]] = 0;\r\n  }\r\n  // this line is dangerous as it might consume unbounded amount of gas\r\n  set._values = new bytes32[](0); \r\n}\r\n```\r\n\r\nIf `set._values = new bytes32[](0);` is too dangerous, another way to implement `.clear()` is to make another `struct` with `.clear()` method:\r\n```solidity\r\nstruct ClearableAddressSet {\r\n  uint256 _setId;\r\n  // setId => AddressSet\r\n  mapping(uint256 => AddressSet) _sets;\r\n}\r\n\r\n// delegate all functions\r\nfunction add(ClearableAddressSet storage set, address value) internal returns (bool) {\r\n  return set._sets[set._setId].add(value);\r\n}\r\n\r\nfunction clear() internal {\r\n  // by incrementing `_setId`, a new set is \"created\".\r\n  set._setId++;\r\n}\r\n```\r\n\r\n<!-- Make sure that you have reviewed the OpenZeppelin Contracts Contributor Guidelines. -->\r\n<!-- https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/CONTRIBUTING.md -->\r\n",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3256/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3256/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1064571468",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3256#issuecomment-1064571468",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3256",
    "id": 1064571468,
    "node_id": "IC_kwDOA9tCBs4_dBJM",
    "user": {
      "login": "Amxx",
      "id": 2432299,
      "node_id": "MDQ6VXNlcjI0MzIyOTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2432299?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Amxx",
      "html_url": "https://github.com/Amxx",
      "followers_url": "https://api.github.com/users/Amxx/followers",
      "following_url": "https://api.github.com/users/Amxx/following{/other_user}",
      "gists_url": "https://api.github.com/users/Amxx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Amxx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Amxx/subscriptions",
      "organizations_url": "https://api.github.com/users/Amxx/orgs",
      "repos_url": "https://api.github.com/users/Amxx/repos",
      "events_url": "https://api.github.com/users/Amxx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Amxx/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-03-10T22:29:23Z",
    "updated_at": "2022-03-10T22:29:23Z",
    "author_association": "COLLABORATOR",
    "body": "Hello @olehmisar \r\n\r\n> If `set._values = new bytes32[](0);` is too dangerous, another way to implement `.clear()` is to make another `struct` with `.clear()` method\r\n\r\nThis is what we have been recommending.\r\n\r\nAs you showed, clearing a mapping is not trivial, and includes an unbounded loop. This means that the clear() method might become unusable, because of gas limitations, if the size of the set is too big. We fear that some users will not notice that, and shot themselves in the foot. Having a contract locked/unusable because a clear cannot be performed would be terrible.\r\n\r\nThe only way to ensure that you contract can get a fresh start, with a fresh set, regardless of the size of its predecessor, it unfortunately to use a new storage location.\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1064571468/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1075670855",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3256#issuecomment-1075670855",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3256",
    "id": 1075670855,
    "node_id": "IC_kwDOA9tCBs5AHW9H",
    "user": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-03-22T21:39:47Z",
    "updated_at": "2022-03-22T21:39:47Z",
    "author_association": "MEMBER",
    "body": "Yeah I think the best option is to use an array of EnumerableSet and just move on to the next one when you clear.\r\n\r\n```solidity\r\n// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.12;\r\n\r\nimport \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\r\n\r\ncontract Example {\r\n    using EnumerableSet for EnumerableSet.AddressSet;\r\n\r\n    EnumerableSet.AddressSet[] private sets;\r\n    uint setIndex;\r\n\r\n    function _getCurrentSet() internal view returns (EnumerableSet.AddressSet storage) {\r\n        return sets[setIndex];\r\n    }\r\n\r\n    function _clearSet() internal {\r\n        setIndex += 1;\r\n    }\r\n}\r\n```\r\n\r\nI don't think it makes sense for us to provide this pattern out of the box.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1075670855/reactions",
      "total_count": 3,
      "+1": 2,
      "-1": 1,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1306694129",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3256#issuecomment-1306694129",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3256",
    "id": 1306694129,
    "node_id": "IC_kwDOA9tCBs5N4pHx",
    "user": {
      "login": "envatic",
      "id": 48434697,
      "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ4NDM0Njk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/48434697?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/envatic",
      "html_url": "https://github.com/envatic",
      "followers_url": "https://api.github.com/users/envatic/followers",
      "following_url": "https://api.github.com/users/envatic/following{/other_user}",
      "gists_url": "https://api.github.com/users/envatic/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/envatic/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/envatic/subscriptions",
      "organizations_url": "https://api.github.com/users/envatic/orgs",
      "repos_url": "https://api.github.com/users/envatic/repos",
      "events_url": "https://api.github.com/users/envatic/events{/privacy}",
      "received_events_url": "https://api.github.com/users/envatic/received_events",
      "type": "Organization",
      "site_admin": false
    },
    "created_at": "2022-11-08T06:20:54Z",
    "updated_at": "2022-11-08T06:20:54Z",
    "author_association": "NONE",
    "body": "Seems not work for upgradeable contracts that never hit constructor. always panic code 032",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1306694129/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1312393722",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3256#issuecomment-1312393722",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3256",
    "id": 1312393722,
    "node_id": "IC_kwDOA9tCBs5OOYn6",
    "user": {
      "login": "nth-commit",
      "id": 6957926,
      "node_id": "MDQ6VXNlcjY5NTc5MjY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6957926?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nth-commit",
      "html_url": "https://github.com/nth-commit",
      "followers_url": "https://api.github.com/users/nth-commit/followers",
      "following_url": "https://api.github.com/users/nth-commit/following{/other_user}",
      "gists_url": "https://api.github.com/users/nth-commit/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nth-commit/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nth-commit/subscriptions",
      "organizations_url": "https://api.github.com/users/nth-commit/orgs",
      "repos_url": "https://api.github.com/users/nth-commit/repos",
      "events_url": "https://api.github.com/users/nth-commit/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nth-commit/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-11-12T07:04:09Z",
    "updated_at": "2022-11-12T07:04:09Z",
    "author_association": "NONE",
    "body": "@envatic Try using a mapping instead.\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1312393722/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1314794454",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3256#issuecomment-1314794454",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3256",
    "id": 1314794454,
    "node_id": "IC_kwDOA9tCBs5OXivW",
    "user": {
      "login": "emizzle",
      "id": 5089238,
      "node_id": "MDQ6VXNlcjUwODkyMzg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5089238?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/emizzle",
      "html_url": "https://github.com/emizzle",
      "followers_url": "https://api.github.com/users/emizzle/followers",
      "following_url": "https://api.github.com/users/emizzle/following{/other_user}",
      "gists_url": "https://api.github.com/users/emizzle/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/emizzle/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/emizzle/subscriptions",
      "organizations_url": "https://api.github.com/users/emizzle/orgs",
      "repos_url": "https://api.github.com/users/emizzle/repos",
      "events_url": "https://api.github.com/users/emizzle/events{/privacy}",
      "received_events_url": "https://api.github.com/users/emizzle/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-11-15T05:27:49Z",
    "updated_at": "2022-11-15T05:27:49Z",
    "author_association": "NONE",
    "body": "Agree with @envatic, using an array panics, though wasn't necessarily in the case of an upgradable contract. Panic exception is:\r\n> Error: VM Exception while processing transaction: reverted with panic code 0x32 (Array accessed at an out-of-bounds or negative index)\r\n\r\nUsing a mapping instead worked üëç  ",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1314794454/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
