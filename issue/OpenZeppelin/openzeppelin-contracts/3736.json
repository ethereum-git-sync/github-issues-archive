{
  "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3736",
  "repository_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts",
  "labels_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3736/labels{/name}",
  "comments_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3736/comments",
  "events_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3736/events",
  "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3736",
  "id": 1388631024,
  "node_id": "I_kwDOA9tCBs5SxNPw",
  "number": 3736,
  "title": "EIP-1363 support",
  "user": {
    "login": "TrejGun",
    "id": 185285,
    "node_id": "MDQ6VXNlcjE4NTI4NQ==",
    "avatar_url": "https://avatars.githubusercontent.com/u/185285?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/TrejGun",
    "html_url": "https://github.com/TrejGun",
    "followers_url": "https://api.github.com/users/TrejGun/followers",
    "following_url": "https://api.github.com/users/TrejGun/following{/other_user}",
    "gists_url": "https://api.github.com/users/TrejGun/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/TrejGun/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/TrejGun/subscriptions",
    "organizations_url": "https://api.github.com/users/TrejGun/orgs",
    "repos_url": "https://api.github.com/users/TrejGun/repos",
    "events_url": "https://api.github.com/users/TrejGun/events{/privacy}",
    "received_events_url": "https://api.github.com/users/TrejGun/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 9,
  "created_at": "2022-09-28T02:36:43Z",
  "updated_at": "2023-07-26T03:04:32Z",
  "closed_at": null,
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "**üßê Motivation**\r\n<!-- Is your feature request related to a specific problem? Is it just a crazy idea? Tell us about it! -->\r\nI was using ERC223 for some time with ERC998 but it seems to be obsolete and superseded by EIP-1363. It would be good to have the out-of-the-box implementation of a notification mechanism for receiving ERC20 tokens, the same as you have for ERC721 and ERC1155. We would like to use this standard for ERC998 tokens and for OZ VestingWallet contract.\r\n\r\n**üìù Details**\r\n<!-- Please describe your feature request in detail. -->\r\n\r\n<!-- Make sure that you have reviewed the OpenZeppelin Contracts Contributor Guidelines. -->\r\n<!-- https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/CONTRIBUTING.md -->\r\n",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3736/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3736/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1260311795",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3736#issuecomment-1260311795",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3736",
    "id": 1260311795,
    "node_id": "IC_kwDOA9tCBs5LHtTz",
    "user": {
      "login": "TrejGun",
      "id": 185285,
      "node_id": "MDQ6VXNlcjE4NTI4NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/185285?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TrejGun",
      "html_url": "https://github.com/TrejGun",
      "followers_url": "https://api.github.com/users/TrejGun/followers",
      "following_url": "https://api.github.com/users/TrejGun/following{/other_user}",
      "gists_url": "https://api.github.com/users/TrejGun/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TrejGun/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TrejGun/subscriptions",
      "organizations_url": "https://api.github.com/users/TrejGun/orgs",
      "repos_url": "https://api.github.com/users/TrejGun/repos",
      "events_url": "https://api.github.com/users/TrejGun/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TrejGun/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-09-28T02:37:21Z",
    "updated_at": "2022-09-28T14:26:32Z",
    "author_association": "NONE",
    "body": "related discussion \r\nhttps://github.com/OpenZeppelin/openzeppelin-contracts/issues/3575",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1260311795/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1260998584",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3736#issuecomment-1260998584",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3736",
    "id": 1260998584,
    "node_id": "IC_kwDOA9tCBs5LKU-4",
    "user": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-09-28T14:27:29Z",
    "updated_at": "2022-09-28T14:27:29Z",
    "author_association": "MEMBER",
    "body": "There is advanced work to do this in https://github.com/OpenZeppelin/openzeppelin-contracts/pull/3017. It's been delayed due to issues around interpretation of the spec. We'll get back to it as soon as priorities allow.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1260998584/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1648404823",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3736#issuecomment-1648404823",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3736",
    "id": 1648404823,
    "node_id": "IC_kwDOA9tCBs5iQKlX",
    "user": {
      "login": "Dexaran",
      "id": 26142412,
      "node_id": "MDQ6VXNlcjI2MTQyNDEy",
      "avatar_url": "https://avatars.githubusercontent.com/u/26142412?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Dexaran",
      "html_url": "https://github.com/Dexaran",
      "followers_url": "https://api.github.com/users/Dexaran/followers",
      "following_url": "https://api.github.com/users/Dexaran/following{/other_user}",
      "gists_url": "https://api.github.com/users/Dexaran/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Dexaran/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Dexaran/subscriptions",
      "organizations_url": "https://api.github.com/users/Dexaran/orgs",
      "repos_url": "https://api.github.com/users/Dexaran/repos",
      "events_url": "https://api.github.com/users/Dexaran/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Dexaran/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-07-24T18:35:27Z",
    "updated_at": "2023-07-25T18:39:47Z",
    "author_association": "NONE",
    "body": "@ernestognw \r\n\r\nI did my research on [EIP-1363](https://eips.ethereum.org/EIPS/eip-1363) and I'd like to provide my feedback.\r\n\r\n## Response to the creator of the issue #3736\r\n\r\n<details>\r\n\r\n>I was using ERC223 for some time with ERC998 but it seems to be obsolete and superseded by EIP-1363. \r\n\r\nIt is not true.\r\n\r\n[ERC-223](https://eips.ethereum.org/EIPS/eip-223) is not superseded by EIP-1363 - those are two different standards that define different approach of implementing tokens.\r\n\r\nThe main idea of ERC-223 is to create a token that will work exactly as Ether (native currency of Ethereum chain) works. There can be only one standard that behaves identical to Ether because Ether is Ether and it has only one logic.\r\n\r\nThe problem of ERC-20 standard is now evident:\r\n\r\n- The standard contains known security vulnerabilities that remain in wontfix state\r\n- There are three sub-types of ERC-20 tokens: (1) tokens that return `false` instead of reverting() a transaction on error during transfer like DAO token, (2) tokens that return `true` on successful transfer and revert() on error like it is described in the EIP-20 specification, (3) tokens that return nothing and revert() on error like USDT or BNB token. In fact that means that the most popular tokens (USDT and BNB) directly violate ERC-20 specification and these are not compatible with ERC-20 standard.\r\n- The standard implements \"approvals\" mechanism which is potentially insecure and poses a threat to safety of users funds. Authorizing someone to spend funds on your behalf involves trust. It can't work in a trustless system without problems. This method was introduced to address the [1024 call stack depth problem](https://ethereum.stackexchange.com/questions/142102/solidity-1024-call-stack-depth) that was fixed in 2016. Now \"approvals\" must be considered a deprecated method of transferring digital assets and never be used in decentralized payment systems.\r\n\r\n### I am a security expert ([proof of expertise](https://gist.github.com/Dexaran/58fe581e59ded8b746ab7331c3d498d1)) and the main goal of ERC-223 is to create the most secure and mistake-proof token as possible. At the same time it solves the problem of uniformity by making token behavior identical to Ether behavior.\r\n\r\n</details>\r\n\r\n## What goes wrong with ERC-223? Why is it not an adopted standard now?\r\n\r\n<details>\r\n\r\nThis is just an issue of adoption. ERC-223 could solve all the problems of ERC-20 in 2017, it is still completely sufficient to solve this problems today.\r\n\r\n**I left the standard \"as is\" in 2018 and that was a mistake.** I have created EIP-223, I wrote the reference implementation code and I thought \"I will leave it here. Ethereum is full of smart guys, eventually they will solve the problem of token standards. My job is done!\"\r\n\r\nI was building a lot of things on EOS after 2018 and changed the focus from Ethereum. EOS token standard for example inherits the logic of ERC-223 https://github.com/EOSIO/eosio.contracts/blob/master/contracts/eosio.token/src/eosio.token.cpp\r\n\r\nIn particular this lines of code `require_recipient( <name> )` are invocations of transaction handling functions: https://github.com/EOSIO/eosio.contracts/blob/master/contracts/eosio.token/src/eosio.token.cpp#L89-L90\r\n\r\nEOS tokens don't have any approvals at all because those are not necessary if you implement transaction handling logic.\r\n\r\nRecently I realized my job is definitely not done with Ethereum tokens - because the amount of lost funds increased significantly and there is no consensus about \"what good standard looks like\". A lot of new standards emerged and most of them implement some kind of transaction handling logic but they do it in so wrong way that they create even more problems without solving existing ones.\r\n\r\n**This is probably because these implementations were designed without involving any security engineers.**\r\n\r\nI also realized that ERC-223 is abandoned and considered \"Draft which is not safe to work with\" because nobody championed it. Now I understand that submitting a solution is far from enough - a strong champion in the community is absolutely necessary to push the adoption.\r\n\r\n</details>\r\n\r\n## What practices should we adhere to when designing token standards?\r\n\r\n- **Pull transactions are very bad choice from security point of view**. I wrote an article about [Pull transactions vs Push transactions](https://dexaran820.medium.com/erc-20-approve-transferfrom-asset-transfer-method-poses-a-threat-to-users-funds-safety-ff7195127018) recently. Pull transactions are not applicable to decentralized trustless systems at all. They are not designed for it. *We can't remove approvals right now, I understand, but at least the standard must not contain them as a musthave feature. They are supposed to be deprecated eventually.*\r\n\r\n- **Minimalistic design. Less code.** The more code and features a program has - the harder it is for a developer to understand it correctly and implement without mistakes. We must not focus on multitool solutions that have 30 versions of functions for everything - we must focus on implementations that are viable with as few code as possible to reduce the number of hacks in the industry. Elon said \"write less code\". Elon is correct because he works with rockets and \"security\" makes sense there: https://twitter.com/elonmusk/status/1211557592125857793\r\n\r\n- Error handling / transaction handling.\r\n\r\n- **There is no point in redefining existing function signatures or adding new functions that do exactly the same as existing ones.** What needs to be redefined is transferring method logic, not function signatures. If a standards does not redefine the logic of `transfer` ERC-20 function then it is a security vulnerability. If it does redefine the logic of `transfer` function similar to how ERC-223 does this - then there is no point in adding new functions like `transferAndCall` as the basic transfer() will be sufficient.\r\n\r\n## ERC-1363 will not be a good solution\r\n\r\n- ERC-1363 logic is inherently misleading. This token standard declares 10 functions that can transfer tokens. EOS token has only one transferring function and there is only one method of transferring a token. ERC-223 has only one method of transferring a token (but it is overloaded for backwards compatibility with ERC-20 UIs). Ether has only one way of transferring.\r\n\r\n- Because it requires a champion to be adopted as I said earlier. And the champion of ERC-1363 is not here it seems.\r\n\r\n- It has approvals as a core part of the standard. It is a security flaw (that I described in the article above). Approvals must be an optional feature because they are totally unnecessary if you implement transaction handling. Eventually approvals must be deprecated as they pose a threat to safety of users funds.\r\n\r\n- It redefines transferring function names and ABI. This will be extremely hard to convince wallet devs and UI devs to restandardize their services. With ERC-223 you don't need to do anything because its ABI is the same as ERC-20 and every UI that works with ERC-20 will work with ERC-223 by default and it will be already auto-secure because the ERC-223 solves most problems of ERC-20 tokens on standard level.\r\n\r\n## ERC-1155 will not be a good solution\r\n\r\n<details>\r\n- Too much unnecessary code. Batch transfers can be a decent feature but we are talking about digital assets. Bitcoin exists. Ether exists. Tesla stock ($TSLA) exist. All those classes of assets do not require any batch transferring features to work. What ERC-1155 introduces is a very specific set of extensions that may be helpful in very specific situations but it is not a \"standard for everyone to use\".\r\n\r\n- Overcomplicated logic. If you understand how Ether transfer works and you look at the token contract code and it doesn't work the same as Ether -  that's bad design. The idea of ERC-223 was to create a token that would be intuitive for developers even BEFORE THEY LOOK AT THE CODE.\r\n\r\n- Pull transactions = security threat for users.\r\n\r\nNOTE: I'm not saying ERC-1155 is a bad standard. Among other standards it is the one that has some real utility behind it that other standards are missing. I'm saying that it is not suitable to become the global standard. My position regarding ERC-1155 is that we must aim for cross-standard operability by creating Token Converters - contracts that exchange 1:1 tokens of one standard for another and vice versa.\r\n\r\n</details>\r\n\r\n## ERC-777 will not be a good solution\r\n\r\n<details>\r\n\r\n- It doesn't solve the problem of \"frozen ERC-20 tokens\" to start with and it is affected by the same exact problem.\r\n\r\n- No champion.\r\n\r\n- Unnecessary logic that is standardized and everyone has to support it to be compatible with the standard.\r\n\r\n</details>\r\n\r\n## ERC-223 authors comment\r\n\r\n<details>\r\n\r\nI don't see any standard that solves the existing problems better than the one that I created 6 years ago. Most of the standard rely on deprecated transferring methods that should have been removed in 2016.\r\n\r\nI am planning to champion the ERC-223 and bring it to the final status and pursue its adoption because I don't see any viable alternatives emerging in the past 6 years.\r\n\r\n- I have resurrected EIP-223 and resubmitted it according to the current Ethereum standards: https://eips.ethereum.org/EIPS/eip-223\r\n\r\n- I am updating Ethereum documentation to include it as an \"official\" standard and PR is merged: https://github.com/ethereum/ethereum-org-website/pull/9651\r\n\r\n- ERC-223 is moving to review https://github.com/ethereum/EIPs/pull/7339\r\n\r\n- I have created a ERC20-to-223 Token Converter contract. I will introduce a clear migration process that will allow to seamlessly swap ERC-20 tokens for ERC-223 tokens and back to ERC-20 at any time. This will be submitted as a new EIP as soon as I will test the code: https://github.com/Dexaran/TokenStandardConverter\r\n\r\n- This time we will have a full-scale campaign for token standard adoption. I will create an open organization to coordinate the efforts of developing the ERC-223 ecosystem. We will write the required guidelines, tutorials, explanations, code samples and templates.\r\n\r\n- I will put Token Converter in action.\r\n\r\n- I will create a ERC-223 compatible DEX. For example there is one: https://app.soy.finance/swap but it lacks the proper ERC-223 support in its UI.\r\n</details>\r\n\r\n## ERC-223 Compatible DEX\r\n\r\n### ERC-20 swap\r\n\r\n<details>\r\n\r\nHere is `approve`: https://explorer.callisto.network/tx/0xa20d2838ea371759f92e7d4ae9700d2de96cf65de738b518dea1753db7180377\r\n\r\nHere is `swapExactTokenForCLO`: https://explorer.callisto.network/tx/0xedf726375e86b2e1df80a614049ab5e1a797174fb762d81471e3379e98497d36\r\n</details>\r\n\r\n### ERC-223 swap\r\n\r\n<details>\r\n\r\n- A transfer of ERC-223 token that encodes `swapExactTokenForCLO` function invocation in its `_data`: https://explorer.callisto.network/tx/0x8cf1d1454723c2c4e0d57b1f7d202bccd47d780de1ffb1482de377a4ae1bef9b\r\n\r\nIt takes only one transaction to swap ERC-223 tokens without approvals. And there is no need to worry about revoking approvals that were issued before.\r\n\r\nIt should be noted that this is exactly the same contract that works with both ERC-20 and ERC-223 tokens at the same time  and supports both methods of swap function invocation.\r\n</details>\r\n\r\n## Disclaimer\r\n\r\n<details>\r\n\r\n>\"Dex, you are advocating ERC-223 because you are the author of this standard and you want your standard to be adopted.\"\r\n\r\nIf I wanted ‚Äúmy standard to be recognized‚Äù, then I would have done it in 2017. I don't get paid for it, I don't earn anything from it other than headache. I am a dedicated security expert who wants the problem solved. People are losing money.\r\n\r\nAnd a lot of guys proposed their versions of \"token standards\" that do not solve any problems for the above mentioned reasons.\r\n</details>\r\n\r\n## References\r\n\r\n<details>\r\n\r\n1. [Known problems of ERC-20 standard](https://dexaran820.medium.com/known-problems-of-erc20-token-standard-e98887b9532c)\r\n\r\n2. [Why approvals are a threat for the safety of users funds and why approvals exist](https://dexaran820.medium.com/erc-20-approve-transferfrom-asset-transfer-method-poses-a-threat-to-users-funds-safety-ff7195127018)\r\n\r\n3. [ERC-223 original discussion thread](https://github.com/ethereum/eips/issues/223)\r\n\r\n4. I was talking to developers in Ethereum discord. There is a good illustration of how misleading the specification of ERC-20 is for most of the token developers: https://discord.com/channels/435685690936786944/435685690936786946/1129853369654186044\r\n\r\n![photo_5321180269329370084_w](https://user-images.githubusercontent.com/26142412/255680416-2b4596ba-56e7-4800-a0d1-bfb1d3c51dcd.jpg)\r\n\r\nThe most common questions are:\r\n\r\n- How can a contract receive ERC-20?\r\n- Why it is not the same as it receives Ether?\r\n- How to prevent a contract from receiving ERC-20 that it is not intended to receive?\r\n- Why it doesn't work the same as with Ether?\r\n\r\n5. Another good example of how people perceive crypto security level and why I think minimalistic contracts are much more secure https://discord.com/channels/435685690936786944/435685690936786946/1132722420311134359\r\n\r\n![Ether_grandma](https://user-images.githubusercontent.com/26142412/255682131-53aa69df-c7ba-422a-8c25-955632faa5ad.png)\r\n</details>\r\n\r\n ",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1648404823/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1649237096",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3736#issuecomment-1649237096",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3736",
    "id": 1649237096,
    "node_id": "IC_kwDOA9tCBs5iTVxo",
    "user": {
      "login": "TrejGun",
      "id": 185285,
      "node_id": "MDQ6VXNlcjE4NTI4NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/185285?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TrejGun",
      "html_url": "https://github.com/TrejGun",
      "followers_url": "https://api.github.com/users/TrejGun/followers",
      "following_url": "https://api.github.com/users/TrejGun/following{/other_user}",
      "gists_url": "https://api.github.com/users/TrejGun/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TrejGun/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TrejGun/subscriptions",
      "organizations_url": "https://api.github.com/users/TrejGun/orgs",
      "repos_url": "https://api.github.com/users/TrejGun/repos",
      "events_url": "https://api.github.com/users/TrejGun/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TrejGun/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-07-25T06:59:11Z",
    "updated_at": "2023-07-25T06:59:11Z",
    "author_association": "NONE",
    "body": "Hey @Dexaran I'm very excited to see you here\r\n\r\nFirst of all, let me point out some facts:\r\n\r\n1. your repository had no commits for two years until recently\r\n2. people need easy-to-use, proven, and compatible solutions\r\n3. there is unmerged PR for https://github.com/OpenZeppelin/openzeppelin-contracts/pull/3017\r\n\r\nusing these statements it's easy to come to the conclusion that people will use standard at the final stage integrated into their favorite framework.\r\n\r\nwhile all of your arguments seem to be reasonable, the fact of the existence of erc1363 (and eip4524) means they are not enough\r\n\r\non the other hand:\r\n\r\n1. erc998 is far from the final stage too (greetings to @mudgen, man you are ahead of the curve with your technology, the thing is - it is just too complicated for 99% of developers)\r\n2. DEXes does not support any of those standards\r\n3. USDT is the major exception giving me a headache\r\n4. nobody can stop me from using whatever I like\r\n\r\nThis basically means you should not worry about my custom implementation of erc998. I can easily switch back to erc223 when:\r\n\r\n1. ERC223 is at the final stage\r\n2. ERC223 integrated into OZ framework\r\n\r\nSo I wish you luck, strength, and lots of community support to finish what was started back in the days",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1649237096/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1649905959",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3736#issuecomment-1649905959",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3736",
    "id": 1649905959,
    "node_id": "IC_kwDOA9tCBs5iV5En",
    "user": {
      "login": "Dexaran",
      "id": 26142412,
      "node_id": "MDQ6VXNlcjI2MTQyNDEy",
      "avatar_url": "https://avatars.githubusercontent.com/u/26142412?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Dexaran",
      "html_url": "https://github.com/Dexaran",
      "followers_url": "https://api.github.com/users/Dexaran/followers",
      "following_url": "https://api.github.com/users/Dexaran/following{/other_user}",
      "gists_url": "https://api.github.com/users/Dexaran/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Dexaran/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Dexaran/subscriptions",
      "organizations_url": "https://api.github.com/users/Dexaran/orgs",
      "repos_url": "https://api.github.com/users/Dexaran/repos",
      "events_url": "https://api.github.com/users/Dexaran/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Dexaran/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-07-25T14:01:33Z",
    "updated_at": "2023-07-25T17:48:38Z",
    "author_association": "NONE",
    "body": ">while all of your arguments seem to be reasonable, the fact of the existence of erc1363 (and eip4524) means they are not enough\r\n\r\nI have pointed out what was not enough - marketing component of advertising the new standard.\r\n\r\nAnd I also pointed out why ERC-1363 and other existing standards are not a solution to the problem that ERC-223 solves.\r\n\r\n>This basically means you should not worry about my custom implementation of erc998.\r\n\r\nMy comment was mostly for OpenZeppelin staff as we discussed a critical vulnerability of [ERC-20.sol](https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol) implementation and they pointed me here stating that this proposal can be a solution. And I'm saying that in my opinion it is not a viable solution in its current state.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1649905959/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1650283880",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3736#issuecomment-1650283880",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3736",
    "id": 1650283880,
    "node_id": "IC_kwDOA9tCBs5iXVVo",
    "user": {
      "login": "Dexaran",
      "id": 26142412,
      "node_id": "MDQ6VXNlcjI2MTQyNDEy",
      "avatar_url": "https://avatars.githubusercontent.com/u/26142412?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Dexaran",
      "html_url": "https://github.com/Dexaran",
      "followers_url": "https://api.github.com/users/Dexaran/followers",
      "following_url": "https://api.github.com/users/Dexaran/following{/other_user}",
      "gists_url": "https://api.github.com/users/Dexaran/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Dexaran/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Dexaran/subscriptions",
      "organizations_url": "https://api.github.com/users/Dexaran/orgs",
      "repos_url": "https://api.github.com/users/Dexaran/repos",
      "events_url": "https://api.github.com/users/Dexaran/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Dexaran/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-07-25T17:50:53Z",
    "updated_at": "2023-07-25T17:50:53Z",
    "author_association": "NONE",
    "body": "I personally have no objections against ERC-1363 but if it is going to be supported I would recommend to re-define the logic of `transfer` function of ERC-20 so that in a basic ERC-1363 implementation it would not allow transferring to contract addresses.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1650283880/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1650369528",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3736#issuecomment-1650369528",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3736",
    "id": 1650369528,
    "node_id": "IC_kwDOA9tCBs5iXqP4",
    "user": {
      "login": "ernestognw",
      "id": 33379285,
      "node_id": "MDQ6VXNlcjMzMzc5Mjg1",
      "avatar_url": "https://avatars.githubusercontent.com/u/33379285?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ernestognw",
      "html_url": "https://github.com/ernestognw",
      "followers_url": "https://api.github.com/users/ernestognw/followers",
      "following_url": "https://api.github.com/users/ernestognw/following{/other_user}",
      "gists_url": "https://api.github.com/users/ernestognw/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ernestognw/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ernestognw/subscriptions",
      "organizations_url": "https://api.github.com/users/ernestognw/orgs",
      "repos_url": "https://api.github.com/users/ernestognw/repos",
      "events_url": "https://api.github.com/users/ernestognw/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ernestognw/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-07-25T18:56:18Z",
    "updated_at": "2023-07-25T18:56:18Z",
    "author_association": "MEMBER",
    "body": "This thread is about EIP-1363 support and it's best to keep it that way. The [standard](https://eips.ethereum.org/EIPS/eip-1363) is already finalized so there's no way to make changes to it, even by the [original author](https://github.com/ethereum/EIPs/pull/5167).\r\n\r\nThe EIP process is about ecosystem consensus and there seems to be demand for EIP-1363 while others are not yet finalized. We can see a significant amount of verified contracts including \"ERC1363\"\r\n\r\n<img width=\"975\" alt=\"Captura de pantalla 2023-07-25 a la(s) 12 48 17\" src=\"https://github.com/OpenZeppelin/openzeppelin-contracts/assets/33379285/6edfce68-921f-423e-8b6e-672e5d0a7507\">\r\n\r\nThe current issue with EIP-1363 is that the return value of `onTransferReceived` can't be returned by an EOA. We'd like to asses community consensus around this particular ambiguity.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1650369528/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1650501175",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3736#issuecomment-1650501175",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3736",
    "id": 1650501175,
    "node_id": "IC_kwDOA9tCBs5iYKY3",
    "user": {
      "login": "Dexaran",
      "id": 26142412,
      "node_id": "MDQ6VXNlcjI2MTQyNDEy",
      "avatar_url": "https://avatars.githubusercontent.com/u/26142412?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Dexaran",
      "html_url": "https://github.com/Dexaran",
      "followers_url": "https://api.github.com/users/Dexaran/followers",
      "following_url": "https://api.github.com/users/Dexaran/following{/other_user}",
      "gists_url": "https://api.github.com/users/Dexaran/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Dexaran/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Dexaran/subscriptions",
      "organizations_url": "https://api.github.com/users/Dexaran/orgs",
      "repos_url": "https://api.github.com/users/Dexaran/repos",
      "events_url": "https://api.github.com/users/Dexaran/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Dexaran/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-07-25T20:22:12Z",
    "updated_at": "2023-07-25T20:22:12Z",
    "author_association": "NONE",
    "body": ">The EIP process is about ecosystem consensus and there seems to be demand for EIP-1363 while others are not yet finalized.\r\n\r\nThat's great but it's as insecure as ERC-20. So there must be a clear restriction on `transfer` function that would prevent it from sending tokens to contracts. Otherwise it will be compatible with the (insecure) standard and will inevitably result in a permanent freeze of tokens in exactly the same way as it can happen with ERC-20.\r\n\r\nSo this standard inherits all the security problems of ERC-20 and I recommend:\r\n\r\n- highlighting it in the documentation\r\n- implement a restriction on `transfer` function\r\n\r\n>The current issue with EIP-1363 is that the return value of `onTransferReceived` can't be returned by an EOA. \r\n\r\nCan't speak on the behalf of the \"majority\" but it is logical to examine the recipient and not to send via `transferAndCall` to EOA. If the expected return of `onTransferReceived` is not returned - consider transfer invalid and `revert()` the transaction.\r\n\r\nThe specification of the EIP-1363 does not provide reference implementation or any description that declares token behavior in such scenarios.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1650501175/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1650905170",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3736#issuecomment-1650905170",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3736",
    "id": 1650905170,
    "node_id": "IC_kwDOA9tCBs5iZtBS",
    "user": {
      "login": "TrejGun",
      "id": 185285,
      "node_id": "MDQ6VXNlcjE4NTI4NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/185285?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TrejGun",
      "html_url": "https://github.com/TrejGun",
      "followers_url": "https://api.github.com/users/TrejGun/followers",
      "following_url": "https://api.github.com/users/TrejGun/following{/other_user}",
      "gists_url": "https://api.github.com/users/TrejGun/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TrejGun/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TrejGun/subscriptions",
      "organizations_url": "https://api.github.com/users/TrejGun/orgs",
      "repos_url": "https://api.github.com/users/TrejGun/repos",
      "events_url": "https://api.github.com/users/TrejGun/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TrejGun/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-07-26T03:04:32Z",
    "updated_at": "2023-07-26T03:04:32Z",
    "author_association": "NONE",
    "body": "@Dexaran if you are serious about reviving erc223 please open a new thread, make an RP with implementation and I promise to test it against my codebase and give you feedback\r\n\r\nmeanwhile, you can check how erc1363 is used in my system.\r\n\r\n```solidity\r\n\r\nbytes4 constant IERC1363_RECEIVER_ID = 0x88a7ca5c;\r\nbytes4 constant IERC1363_ID = 0xb0202a11;\r\n\r\nlibrary ExchangeUtils {\r\n  using Address for address;\r\n  using SafeERC20 for IERC20;\r\n  \r\n  function spendFrom(\r\n    address token,\r\n    uint256 amount,\r\n    address spender,\r\n    address receiver\r\n  ) internal {\r\n    if (_isERC1363Supported(receiver, token)) {\r\n      IERC1363(item.token).transferFromAndCall(spender, receiver, amount);\r\n    } else {\r\n      SafeERC20.safeTransferFrom(IERC20(token), spender, receiver, amount);\r\n    }\r\n  }\r\n\r\n  function _isERC1363Supported(address receiver, address token) internal view returns (bool) {\r\n    return\r\n      (receiver == address(this) ||\r\n        (receiver.isContract() && _tryGetSupportedInterface(receiver, IERC1363_RECEIVER_ID))) &&\r\n      _tryGetSupportedInterface(token, IERC1363_ID);\r\n  }\r\n\r\n  function _tryGetSupportedInterface(address account, bytes4 interfaceId) internal view returns (bool) {\r\n    try IERC165(account).supportsInterface(interfaceId) returns (bool isSupported) {\r\n      return isSupported;\r\n    } catch (bytes memory) {\r\n      return false;\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n@ernestognw that comment about EOA, man you just can't prevent people from shooting their foot",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1650905170/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
