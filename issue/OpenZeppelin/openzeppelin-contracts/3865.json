{
  "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3865",
  "repository_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts",
  "labels_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3865/labels{/name}",
  "comments_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3865/comments",
  "events_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3865/events",
  "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3865",
  "id": 1486105300,
  "node_id": "I_kwDOA9tCBs5YlCrU",
  "number": 3865,
  "title": "ERC4626 enriched with Liabilities and Equity",
  "user": {
    "login": "TChairman",
    "id": 98551945,
    "node_id": "U_kgDOBd_IiQ",
    "avatar_url": "https://avatars.githubusercontent.com/u/98551945?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/TChairman",
    "html_url": "https://github.com/TChairman",
    "followers_url": "https://api.github.com/users/TChairman/followers",
    "following_url": "https://api.github.com/users/TChairman/following{/other_user}",
    "gists_url": "https://api.github.com/users/TChairman/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/TChairman/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/TChairman/subscriptions",
    "organizations_url": "https://api.github.com/users/TChairman/orgs",
    "repos_url": "https://api.github.com/users/TChairman/repos",
    "events_url": "https://api.github.com/users/TChairman/events{/privacy}",
    "received_events_url": "https://api.github.com/users/TChairman/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 4976342503,
      "node_id": "LA_kwDOA9tCBs8AAAABKJz15w",
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/labels/area:%20erc4626",
      "name": "area: erc4626",
      "color": "E7DA84",
      "default": false,
      "description": ""
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 5,
  "created_at": "2022-12-09T06:15:58Z",
  "updated_at": "2023-05-09T13:53:19Z",
  "closed_at": null,
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "**🧐 Motivation**\r\nOne of the most fundamental tools of accounting is the balance sheet. And the basis of the balance sheet is that Assets = Liabilities + Equity. The two sides must balance. Obviously if there are no liabilities, then Assets = Equity, but this should not be assumed. ERC4626 should include these concepts.\r\n\r\n**📝 Details**\r\nIn the default ERC4626 implementation, the conversion functions use totalAssets() to compute share values. This is semantically incorrect, from an accounting standpoint; the correct divisor should be totalEquity(). These are no longer the same thing if the vault has liabilities of any kind. Liabilities could include accrued fees, loans to the portfolio, or even senior tranches.\r\n\r\nI propose a new abstract contract ERC4626Accounting that fixes this issue, and adds three more nonstandard but useful functions: totalEquity(), totalNAV(), and totalLiabilities(). totalAssets() is redefined to be totalNAV() plus the actual assets in the vault, this allows it to be useful in more real-world implementations. totalLiabilities() and totalNAV() default to zero, and totalEquity() is totalAssets() - totalLiabilities(). The conversion functions have been rewritten to use totalEquity() instead of totalAssets().\r\n\r\nCode is pasted below, and ready to be submitted as PR, so happy for constructive feedback. Also happy to write tests and/or docs to get it to completion. Wanted to see if there was any discussion before submitting.\r\n\r\n```\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./ERC4626.sol\";\r\nimport \"../../../interfaces/IERC20.sol\";\r\nimport \"../../../utils/math/Math.sol\";\r\n/**\r\n * @dev Extension of the ERC4626 \"Tokenized Vault Standard\" as defined in\r\n * https://eips.ethereum.org/EIPS/eip-4626[EIP-4626].\r\n *\r\n * This extension provides basic balance sheet accounting functions that are required\r\n * for many real-world implementations of ERC4626 vaults, including:\r\n * - totalEquity()\r\n * - totalLiabilities() and\r\n * - totalNAV()\r\n * \r\n * This implementation redefines the share price functions to be in terms of totalEquity() instead of totalAssets()\r\n *\r\n * CAUTION: see ERC4626.sol to learn about the donation attack and potential mitigations\r\n *\r\n */\r\nabstract contract ERC4626Acounting is ERC4626 {\r\n    using Math for uint256;\r\n    \r\n    /** @dev See {IERC4626-totalAssets}. */\r\n    function totalAssets() public view virtual override returns (uint256) {\r\n        return IERC20(asset()).balanceOf(address(this)) + totalNAV();\r\n    }\r\n\r\n     // total asset value of outside investments\r\n    function totalNAV() public virtual view returns (uint256) {\r\n        return 0;\r\n    }\r\n\r\n    // total liabilities, e.g. accrued fees, or loans to the vault\r\n    function totalLiabilities() public view virtual returns (uint256) {\r\n        return 0;\r\n    }\r\n\r\n    // total equity value of the shareholders\r\n    function totalEquity() public view virtual returns (uint256) {\r\n        uint256 assets = totalAssets();\r\n        uint256 liabilities = totalLiabilities();\r\n        return (liabilities > assets) ? 0 : assets - liabilities;\r\n    }\r\n    \r\n    /**\r\n     * @dev Internal conversion function (from assets to shares) with support for rounding direction. Usees totalEquity() instead of totalAssets().\r\n     *\r\n     * Will revert if assets > 0, totalSupply > 0 and totalAssets = 0. That corresponds to a case where any asset\r\n     * would represent an infinite amount of shares.\r\n     */\r\n    function _convertToShares(uint256 assets, Math.Rounding rounding) internal view virtual override returns (uint256) {\r\n        uint256 supply = totalSupply();\r\n        return\r\n            (assets == 0 || supply == 0)\r\n                ? _initialConvertToShares(assets, rounding)\r\n                : assets.mulDiv(supply, totalEquity(), rounding);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal conversion function (from shares to assets) with support for rounding direction. Usees totalEquity() instead of totalAssets().\r\n     */\r\n    function _convertToAssets(uint256 shares, Math.Rounding rounding) internal view virtual override returns (uint256) {\r\n        uint256 supply = totalSupply();\r\n        return\r\n            (supply == 0) ? _initialConvertToAssets(shares, rounding) : shares.mulDiv(totalEquity(), supply, rounding);\r\n    }\r\n\r\n}\r\n```",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3865/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3865/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1370492588",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3865#issuecomment-1370492588",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3865",
    "id": 1370492588,
    "node_id": "IC_kwDOA9tCBs5RsA6s",
    "user": {
      "login": "TChairman",
      "id": 98551945,
      "node_id": "U_kgDOBd_IiQ",
      "avatar_url": "https://avatars.githubusercontent.com/u/98551945?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TChairman",
      "html_url": "https://github.com/TChairman",
      "followers_url": "https://api.github.com/users/TChairman/followers",
      "following_url": "https://api.github.com/users/TChairman/following{/other_user}",
      "gists_url": "https://api.github.com/users/TChairman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TChairman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TChairman/subscriptions",
      "organizations_url": "https://api.github.com/users/TChairman/orgs",
      "repos_url": "https://api.github.com/users/TChairman/repos",
      "events_url": "https://api.github.com/users/TChairman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TChairman/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-01-04T05:04:10Z",
    "updated_at": "2023-01-04T05:04:10Z",
    "author_association": "NONE",
    "body": "Any comments @frangio or @Amxx? Should I submit a PR?",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1370492588/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1438647618",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3865#issuecomment-1438647618",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3865",
    "id": 1438647618,
    "node_id": "IC_kwDOA9tCBs5VwAVC",
    "user": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-02-21T15:09:37Z",
    "updated_at": "2023-02-21T15:09:37Z",
    "author_association": "MEMBER",
    "body": "You make good points, but I wouldn't want us to add additional public functions (`totalEquity`, etc.) without standardization.\r\n\r\n> the conversion functions use totalAssets() to compute share values. This is semantically incorrect, from an accounting standpoint\r\n\r\nI would also note that even though this might be true \"from an accounting standpoint\", it is not necessarily the EIP's interpretation of `totalAssets`.\r\n\r\n\r\nI'm interested in exploring something like your proposal here as an internal interface if it helps implement concrete ERC4626 vaults. However, it's very important to us that any proposed changes should be motivated by real-world use cases and concerns, with examples of how it applies to existing projects. I'd love to see some of that around this topic.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1438647618/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1446805621",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3865#issuecomment-1446805621",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3865",
    "id": 1446805621,
    "node_id": "IC_kwDOA9tCBs5WPIB1",
    "user": {
      "login": "TChairman",
      "id": 98551945,
      "node_id": "U_kgDOBd_IiQ",
      "avatar_url": "https://avatars.githubusercontent.com/u/98551945?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TChairman",
      "html_url": "https://github.com/TChairman",
      "followers_url": "https://api.github.com/users/TChairman/followers",
      "following_url": "https://api.github.com/users/TChairman/following{/other_user}",
      "gists_url": "https://api.github.com/users/TChairman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TChairman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TChairman/subscriptions",
      "organizations_url": "https://api.github.com/users/TChairman/orgs",
      "repos_url": "https://api.github.com/users/TChairman/repos",
      "events_url": "https://api.github.com/users/TChairman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TChairman/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-02-27T18:06:30Z",
    "updated_at": "2023-02-27T18:06:30Z",
    "author_association": "NONE",
    "body": "Good points, and thanks for the response. As far as I can tell, nobody else has tried to implement a vault that has liabilities, so this issue hasn't really come up for anyone but me. My sense is if we want this standard to be used by firms that are moving real-world assets to the blockchain, we should probably use the terms correctly from an accounting standpoint. This feels a little like when finance people mix up \"disk\" and \"memory\" - they're sorta the same, but when you use them interchangeably, it's clear you don't really understand what you're talking about. I regret that I was not able to make these points during the relatively short comment period ERC4626 had, but I think my solution is reasonable in that it does not break the standard, and allows for a safer and more correct implementation. Similar to SafeTransfer not being in ERC20, but. basically everyone uses it. In any case, I'm happy to wait and see if anyone else uses ERC4626 to implement vaults with liabilities, and then re-propose.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1446805621/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1484234068",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3865#issuecomment-1484234068",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3865",
    "id": 1484234068,
    "node_id": "IC_kwDOA9tCBs5Yd51U",
    "user": {
      "login": "lhemerly",
      "id": 10237960,
      "node_id": "MDQ6VXNlcjEwMjM3OTYw",
      "avatar_url": "https://avatars.githubusercontent.com/u/10237960?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lhemerly",
      "html_url": "https://github.com/lhemerly",
      "followers_url": "https://api.github.com/users/lhemerly/followers",
      "following_url": "https://api.github.com/users/lhemerly/following{/other_user}",
      "gists_url": "https://api.github.com/users/lhemerly/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lhemerly/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lhemerly/subscriptions",
      "organizations_url": "https://api.github.com/users/lhemerly/orgs",
      "repos_url": "https://api.github.com/users/lhemerly/repos",
      "events_url": "https://api.github.com/users/lhemerly/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lhemerly/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-03-26T21:48:45Z",
    "updated_at": "2023-03-26T21:48:45Z",
    "author_association": "NONE",
    "body": "Hello, being an experienced accountant in IFRS I believe I can shed some lights in the real world use of this and potential differences to the blockchain. It will be a long text, but I believe it will be of great use for this discussion.\r\n\r\nIn accounting we usually use the _accrual accounting_, that is, we register our rights and obligation (assets and liabilities) when they occur, which can be before the actual payment. There are a few exemples that make this clear:\r\n\r\n1. You sold goods which can be returned in 7 days. You usually have a return rate of 5%. You should register a liability of 5% of your sales, and recognize it as revenue (that goes to equity later) when the 7 days pass.\r\n2. You have a debt that accruals interest. Corporate bonds, for example, can have payments every six months. You accrual those interest monthly (affecting your liabilities and P&L) even though the payment is not due yet\r\n3. You sell and buy with payment in 30 days. You register those rights and obligations at the time of buying or selling, but the payment is much later.\r\n\r\nWith accrual accounting you eventualy have a balance sheet with assets and liabilities and the shareholder's share of the company is the difference between the two, which is usually called equity. If you want to value the shareholder's share of the company you should divide the equity by the shareholder shares. It is important to notice that accounting basis of value, with a few exceptions, is the cost, so if we do a that calculation we would have the book value of the shareholder's equity share. The market value could be a lot different.\r\n\r\nWhen we go to the blockchain, even though it could be seen as a huge decentralized ledger, things go a bit different as, usually, the basis for accounting in the blockchain is not accrual, its cash. In that way, **accounting in the blockchain is closer to a cash book than to an accounting book**. This occurs, between other things, because in the blockchain you usually work with **zero trust**.\r\n\r\nThat being said, the payment splitter contract, in my point of view, should only be used to split payments after all things considered. It is the same that happens after a company declares dividends for example. When a company declares dividends it takes the company's P&L and apply a percentage, after constituting reserves. The resulting dividends payable then goes through the same logic of payment splitter, considering amount of shares, and not shares value. \r\n\r\nSo, if I had any logic to reduce shareholder's payments, I would do that in another contract, and send the payment splitter only the amount due.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1484234068/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1540170989",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3865#issuecomment-1540170989",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3865",
    "id": 1540170989,
    "node_id": "IC_kwDOA9tCBs5bzSTt",
    "user": {
      "login": "TChairman",
      "id": 98551945,
      "node_id": "U_kgDOBd_IiQ",
      "avatar_url": "https://avatars.githubusercontent.com/u/98551945?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TChairman",
      "html_url": "https://github.com/TChairman",
      "followers_url": "https://api.github.com/users/TChairman/followers",
      "following_url": "https://api.github.com/users/TChairman/following{/other_user}",
      "gists_url": "https://api.github.com/users/TChairman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TChairman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TChairman/subscriptions",
      "organizations_url": "https://api.github.com/users/TChairman/orgs",
      "repos_url": "https://api.github.com/users/TChairman/repos",
      "events_url": "https://api.github.com/users/TChairman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TChairman/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-05-09T13:53:19Z",
    "updated_at": "2023-05-09T13:53:19Z",
    "author_association": "NONE",
    "body": "Thanks @lhemerly for the comment, but I'm not sure thinking of ERC4626 vaults as mere payment splitters is the right frame. Many vaults (think Yearn, etc) have ongoing investments and redemptions, so the concept of having the accounting in a separate contract and sending the payment splitter the amount due seems over complicated, and is not in fact how many implementations work right now. If you look at the code above, it's pretty straightforward, and seems to be supported by your description of accrual accounting.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1540170989/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
