{
  "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/599",
  "repository_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts",
  "labels_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/599/labels{/name}",
  "comments_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/599/comments",
  "events_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/599/events",
  "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/599",
  "id": 279265384,
  "node_id": "MDU6SXNzdWUyNzkyNjUzODQ=",
  "number": 599,
  "title": "ERC20 StandardToken approve front-running attack",
  "user": {
    "login": "hayeah",
    "id": 50120,
    "node_id": "MDQ6VXNlcjUwMTIw",
    "avatar_url": "https://avatars.githubusercontent.com/u/50120?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/hayeah",
    "html_url": "https://github.com/hayeah",
    "followers_url": "https://api.github.com/users/hayeah/followers",
    "following_url": "https://api.github.com/users/hayeah/following{/other_user}",
    "gists_url": "https://api.github.com/users/hayeah/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/hayeah/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/hayeah/subscriptions",
    "organizations_url": "https://api.github.com/users/hayeah/orgs",
    "repos_url": "https://api.github.com/users/hayeah/repos",
    "events_url": "https://api.github.com/users/hayeah/events{/privacy}",
    "received_events_url": "https://api.github.com/users/hayeah/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 1,
  "created_at": "2017-12-05T06:52:40Z",
  "updated_at": "2017-12-05T18:14:46Z",
  "closed_at": "2017-12-05T18:14:46Z",
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "The standard recommendation to prevent front-running `approve` is to set it to 0, then set it to the new value.\r\n\r\nAccording to the original reporter of this vulnerability, this is not enough, because the attacker could still front-run the transaction that sets the approval value to 0.\r\n\r\nSome sort of compare-and-set is required to patch this problem properly.\r\n\r\n* * *\r\n\r\nOne backward compatible hack to solve this problem is to allowthe approved `_value` argument to be negative. If `_value` is negative, consider it a decrement to the approval value.\r\n\r\nTo safely set the approved value to 0, the token holder should approve the negative value of the current known approved value. The transaction should fail if the resulting value is not zero (i.e. another transaction had modified the approval value).\r\n\r\nBut the ERC20 interface requires an uint256 value, the hack is to unsafely cast that number to an int256... like so:\r\n\r\n```\r\nfunction approve(address _spender, uint256 _value) public returns (bool success) {\r\n  int256 signedValue = int256(_value);\r\n  if (signedValue < 0) {\r\n    allowed[msg.sender][_spender] += signedValue;\r\n    require(allowed[msg.sender][_spender] == 0);\r\n    return true;\r\n  }\r\n  allowed[msg.sender][_spender] = _value;\r\n  Approval(msg.sender, _spender, _value);\r\n  return true;\r\n}\r\n```\r\n\r\nNot sure if this \"fix\" is more evil than the problem itself. Thoughts?",
  "closed_by": {
    "login": "frangio",
    "id": 481465,
    "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
    "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/frangio",
    "html_url": "https://github.com/frangio",
    "followers_url": "https://api.github.com/users/frangio/followers",
    "following_url": "https://api.github.com/users/frangio/following{/other_user}",
    "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
    "organizations_url": "https://api.github.com/users/frangio/orgs",
    "repos_url": "https://api.github.com/users/frangio/repos",
    "events_url": "https://api.github.com/users/frangio/events{/privacy}",
    "received_events_url": "https://api.github.com/users/frangio/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/599/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/599/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/349392248",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/599#issuecomment-349392248",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/599",
    "id": 349392248,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0OTM5MjI0OA==",
    "user": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-05T18:14:45Z",
    "updated_at": "2017-12-05T18:14:45Z",
    "author_association": "MEMBER",
    "body": "Thanks for the suggestion @hayeah!\r\n\r\nSadly, casting a `uint256` to `int256` renders it non backwards compatible.\r\n\r\nThere are already alternatives to `approve` in OpenZeppelin's `StandardToken` meant to mitigate the front-running attack.\r\nhttps://github.com/OpenZeppelin/zeppelin-solidity/blob/83b941c76cb08b7c95b45fd046116e7a70d72a1f/contracts/token/StandardToken.sol#L76-L85\r\nHowever this is still vulnerable as you pointed out and as discussed in #437.\r\n\r\nI am beginning to think that `decreaseApproval` should fail as proposed in #437, similar to the functionality you described for `approve`.\r\n\r\nClosing this issue to continue the discussion there.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/349392248/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
