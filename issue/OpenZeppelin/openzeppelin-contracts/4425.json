{
  "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4425",
  "repository_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts",
  "labels_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4425/labels{/name}",
  "comments_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4425/comments",
  "events_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4425/events",
  "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/4425",
  "id": 1789065446,
  "node_id": "I_kwDOA9tCBs5qovjm",
  "number": 4425,
  "title": "EIP-712 nonces unification discussion",
  "user": {
    "login": "k06a",
    "id": 702124,
    "node_id": "MDQ6VXNlcjcwMjEyNA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/702124?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/k06a",
    "html_url": "https://github.com/k06a",
    "followers_url": "https://api.github.com/users/k06a/followers",
    "following_url": "https://api.github.com/users/k06a/following{/other_user}",
    "gists_url": "https://api.github.com/users/k06a/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/k06a/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/k06a/subscriptions",
    "organizations_url": "https://api.github.com/users/k06a/orgs",
    "repos_url": "https://api.github.com/users/k06a/repos",
    "events_url": "https://api.github.com/users/k06a/events{/privacy}",
    "received_events_url": "https://api.github.com/users/k06a/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 1,
  "created_at": "2023-07-05T08:37:28Z",
  "updated_at": "2023-07-05T09:19:16Z",
  "closed_at": null,
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "Related PR: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/3850\r\n\r\nCurrent `nonces()` are incremental sequences per owner (signer) and they interfere for `Votes` and `ERC20Permit`:\r\n```solidity\r\ncontract Nonces {\r\n    function nonces(address owner) public view virtual returns (uint256);\r\n}\r\n\r\ncontract ERC20Permit is Nonces {\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n}\r\n\r\ncontract Votes is Nonces {\r\n    function delegateBySig(address delegatee, uint256 nonce, uint256 expiry, uint8 v, bytes32 r, bytes32 s) external;\r\n}\r\n```",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4425/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4425/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1621360676",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/4425#issuecomment-1621360676",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4425",
    "id": 1621360676,
    "node_id": "IC_kwDOA9tCBs5gpAAk",
    "user": {
      "login": "k06a",
      "id": 702124,
      "node_id": "MDQ6VXNlcjcwMjEyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/702124?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/k06a",
      "html_url": "https://github.com/k06a",
      "followers_url": "https://api.github.com/users/k06a/followers",
      "following_url": "https://api.github.com/users/k06a/following{/other_user}",
      "gists_url": "https://api.github.com/users/k06a/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/k06a/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/k06a/subscriptions",
      "organizations_url": "https://api.github.com/users/k06a/orgs",
      "repos_url": "https://api.github.com/users/k06a/repos",
      "events_url": "https://api.github.com/users/k06a/events{/privacy}",
      "received_events_url": "https://api.github.com/users/k06a/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-07-05T09:19:16Z",
    "updated_at": "2023-07-05T09:19:16Z",
    "author_association": "CONTRIBUTOR",
    "body": "Proposing following changes:\r\n\r\n1. Use top bit of nonce to indicate nonces are related to pair of **owner (signer)** and **beneficiary** (aka parallel nonces)\r\n2. Introduce replacement for `nonces(address owner)`:\r\n    - `operationNonces(bytes32 typehash, address owner)`\r\n    - `advanceOperationNonce(bytes32 typehash, uint64 count)`\r\n3. Introduce extension to support invalidation per pair of owner and beneficiary:\r\n    - `operationNoncesPerBeneficiary(bytes32 typehash, address owner, address beneficiary)` \r\n    - `advanceOperationNoncePerBeneficiery(bytes32 typehash, address beneficiary, uint64 count)`\r\n    - These nonces top bit should be equal to 1\r\n4. Introduce extension to support invalidation per operation:\r\n    - `useOperationHash(bytes32 hash)` to invalidate specific operation by it's hash\r\n\r\nLet's discuss something like this:\r\n```solidity\r\ncontract Nonces {\r\n    mapping(bytes32 typehash => mapping(address owner => uint256 nonce)) public operationNonces;\r\n    mapping(bytes32 typehash => mapping(address owner => mapping(address beneficiary => uint256 nonce))) private _operationNoncesPerBeneficiary;\r\n\r\n    // Deprecated and kind of backward compatible\r\n    function nonces(address owner) public view returns(uint256) {\r\n        return operationNonces[ERC20Permit.TYPEHASH][owner];\r\n    }\r\n\r\n    function operationNoncesPerBeneficiary(bytes32 typehash, address owner, address beneficiary) public view returns(uint256) {\r\n        return (1 << 255) | _operationNoncesPerBeneficiary[typehash][owner][beneficiary];\r\n    }\r\n\r\n    function advanceOperationNonce(bytes32 typehash, uint64 count) public {\r\n        _advanceOperationNonce(typehash, msg.sender, count);\r\n    }\r\n\r\n    function advanceOperationNoncesPerBeneficiary(bytes32 typehash, address beneficiary, uint256 count) public {\r\n        _advanceOperationNoncesPerBeneficiary(typehash, msg.sender, beneficiary, count);\r\n    }\r\n\r\n    function useNonce(bytes32 typehash, address owner, address beneficiary, uint256 nonce) public {\r\n        if ((nonce >> 255) > 0) {\r\n            require(nonce == _advanceOperationNoncesPerBeneficiary(typehash, owner, 1), \"Wrong nonce\");\r\n        } else {\r\n            require(nonce == _advanceOperationNonces(typehash, owner, proposal, 1), \"Wrong nonce\");\r\n        }\r\n    }\r\n\r\n    function _advanceOperationNonce(bytes32 typehash, address owner, uint64 count) internal returns(uint256 nonce) {\r\n        nonce = operationNonces[typehash][owner];\r\n        operationNonces[typehash][owner] = nonce + 1;\r\n    }\r\n\r\n    function _advanceOperationNoncesPerBeneficiary(bytes32 typehash, address owner, address beneficiary, uint256 count) internal returns(uint256 nonce) {\r\n        nonce = _operationNoncesPerBeneficiary[typehash][owner][beneficiary] | (1 << 255);\r\n        _operationNoncesPerBeneficiary[typehash][owner][beneficiary] = nonce & (type(uint256).max >> 1) + 1;\r\n    }\r\n}\r\n\r\ncontract ERC20Permit is Nonces {\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external {\r\n        uint256 nonce = nonces(owner);\r\n        // …\r\n        _advanceOperationNonce(owner, TYPEHASH, 1);\r\n    }\r\n}\r\n\r\ncontract Votes is Nonces {\r\n    function delegateBySig(address delegatee, uint256 nonce, uint256 expiry, uint8 v, bytes32 r, bytes32 s) external {\r\n        address owner = ecrecover(…);\r\n        require(nonce == nonces(owner), \"Wrong nonce\");\r\n        // …\r\n        _advanceOperationNonce(owner, TYPEHASH, 1);\r\n    }\r\n}\r\n\r\n// Example of usage\r\ncontract MyContract is Nonces {\r\n    // Nonce as arg could be used per owner or per pair of owner and proposal\r\n    function voteBySig(address proposal, uint256 nonce, uint256 expiry, uint8 v, bytes32 r, bytes32 s) external {\r\n        address owner = ecrecover(…);\r\n        useNonce(TYPEHASH, owner, proposal, nonce);\r\n        // …\r\n    }\r\n}\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1621360676/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
