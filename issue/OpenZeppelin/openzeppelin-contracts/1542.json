{
  "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1542",
  "repository_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts",
  "labels_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1542/labels{/name}",
  "comments_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1542/comments",
  "events_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1542/events",
  "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1542",
  "id": 388061648,
  "node_id": "MDU6SXNzdWUzODgwNjE2NDg=",
  "number": 1542,
  "title": "Ownable with OTP",
  "user": {
    "login": "OFRBG",
    "id": 8671781,
    "node_id": "MDQ6VXNlcjg2NzE3ODE=",
    "avatar_url": "https://avatars.githubusercontent.com/u/8671781?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/OFRBG",
    "html_url": "https://github.com/OFRBG",
    "followers_url": "https://api.github.com/users/OFRBG/followers",
    "following_url": "https://api.github.com/users/OFRBG/following{/other_user}",
    "gists_url": "https://api.github.com/users/OFRBG/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/OFRBG/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/OFRBG/subscriptions",
    "organizations_url": "https://api.github.com/users/OFRBG/orgs",
    "repos_url": "https://api.github.com/users/OFRBG/repos",
    "events_url": "https://api.github.com/users/OFRBG/events{/privacy}",
    "received_events_url": "https://api.github.com/users/OFRBG/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 503650860,
      "node_id": "MDU6TGFiZWw1MDM2NTA4NjA=",
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/labels/feature",
      "name": "feature",
      "color": "b9db64",
      "default": false,
      "description": "New contracts, functions, or helpers."
    },
    {
      "id": 1000207718,
      "node_id": "MDU6TGFiZWwxMDAwMjA3NzE4",
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/labels/contracts",
      "name": "contracts",
      "color": "1d76db",
      "default": false,
      "description": "Smart contract code."
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 5,
  "created_at": "2018-12-06T05:26:33Z",
  "updated_at": "2021-11-29T10:42:08Z",
  "closed_at": "2021-11-29T10:42:00Z",
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "**🧐 Motivation**\r\nStrong addition to the `Ownable` implementation. This is an \"advanced\" user version of Ownable with high-risk if not used correctly.\r\n\r\n**📝 Details**\r\nI've included a sample implementation below. I'm not a security auditor, but the basics should be there. Think of it as the Big Red Button of ownership. I've excluded the unmodified functions of `Ownable.sol` for readability.\r\n\r\nOnce again, this is an advanced-user contract that could be easily misused by basic users. Any feedback or improved implementation is appreciated.\r\n\r\n```\r\npragma solidity ^0.5.1;\r\n\r\n/**\r\n * @title OwnableOTP\r\n * @dev The OwnableOTP contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\". It also includes a OTP recovery option.\r\n */\r\ncontract OwnableOTP {\r\n    address payable private _owner;\r\n    \r\n    address private recoveryEngaged;\r\n    uint private blockEngaged;\r\n    uint private dosTrap;\r\n\r\n    \r\n    uint256 private blockOrigin;\r\n    bytes32 private OTPHash;\r\n    \r\n    bool burnedOTP;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     * @param _OTPHash The OTPHash with keccak256(keccak256(password), block.number). The creators need to correnctly guess\r\n     * the block in which the transaction will be mined with a 1 hour window (or 240 blocks).\r\n     */\r\n    constructor (bytes32 _OTPHash) internal {\r\n        _owner = msg.sender;\r\n        \r\n        blockOrigin = block.number;\r\n        blockEngaged = block.number;\r\n        dosTrap = 0;\r\n        \r\n        burnedOTP = false;\r\n        OTPHash = _OTPHash;\r\n\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    \r\n    /**\r\n     * @dev Starts a 1-day exclusive access to the OTP recovery. This lets the users recovering the address\r\n     * send the transaction without a race condition.\r\n     */\r\n    function beginOTPRecovery() public {\r\n        require(block.number > blockEngaged + 5800);\r\n        require(!burnedOTP);\r\n        require(msg.value >= 10 finney);\r\n\r\n        dosTrap = dosTrap + msg.value;\r\n        recoveryEngaged = msg.sender;\r\n        blockEngaged = block.number;\r\n    }\r\n    \r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner with a OTP.\r\n     * @param newOwner The address to transfer ownership to.\r\n     * @param OTP The OTP with a 1 hour window.\r\n     */\r\n    function transferOwnershipOTP(address payable newOwner, string memory OTP) public {\r\n        require(msg.sender == recoveryEngaged);\r\n        bool isValid = false;\r\n        for(uint b = blockOrigin - 120; b <= blockOrigin + 120; b++) {\r\n            if(keccak256(abi.encodePacked(keccak256(abi.encodePacked(OTP)), blockOrigin+b)) == OTPHash) {\r\n                isValid = true;\r\n                break;\r\n            }\r\n        }\r\n\r\n        require(isValid);\r\n        \r\n        burnedOTP = true;\r\n        _transferOwnership(newOwner);\r\n       newOwner.transfer(dosTrap);\r\n    }\r\n}\r\n```",
  "closed_by": {
    "login": "Amxx",
    "id": 2432299,
    "node_id": "MDQ6VXNlcjI0MzIyOTk=",
    "avatar_url": "https://avatars.githubusercontent.com/u/2432299?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/Amxx",
    "html_url": "https://github.com/Amxx",
    "followers_url": "https://api.github.com/users/Amxx/followers",
    "following_url": "https://api.github.com/users/Amxx/following{/other_user}",
    "gists_url": "https://api.github.com/users/Amxx/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/Amxx/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/Amxx/subscriptions",
    "organizations_url": "https://api.github.com/users/Amxx/orgs",
    "repos_url": "https://api.github.com/users/Amxx/repos",
    "events_url": "https://api.github.com/users/Amxx/events{/privacy}",
    "received_events_url": "https://api.github.com/users/Amxx/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1542/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1542/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/444754573",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1542#issuecomment-444754573",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1542",
    "id": 444754573,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0NDc1NDU3Mw==",
    "user": {
      "login": "OFRBG",
      "id": 8671781,
      "node_id": "MDQ6VXNlcjg2NzE3ODE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8671781?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/OFRBG",
      "html_url": "https://github.com/OFRBG",
      "followers_url": "https://api.github.com/users/OFRBG/followers",
      "following_url": "https://api.github.com/users/OFRBG/following{/other_user}",
      "gists_url": "https://api.github.com/users/OFRBG/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/OFRBG/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/OFRBG/subscriptions",
      "organizations_url": "https://api.github.com/users/OFRBG/orgs",
      "repos_url": "https://api.github.com/users/OFRBG/repos",
      "events_url": "https://api.github.com/users/OFRBG/events{/privacy}",
      "received_events_url": "https://api.github.com/users/OFRBG/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-12-06T05:38:58Z",
    "updated_at": "2018-12-06T05:40:52Z",
    "author_association": "NONE",
    "body": "Event Table:\r\n\r\n1. Off-chain OTP creation. The block number in which the transaction will be mined needs to be guessed. The OTP hash supplied should be `keccak256[keccak256[rawOTP],guessedBlockNumber]`.\r\n\r\n2. The code is deployed with the hashed OTP. The block number is registered.\r\n\r\n3. Recovery begins by calling `beginOTPRecovery`.\r\n\r\n4. The caller has exclusive access to `transferOwnershipOTP` for approximately 1 day. After 5800 blocks, another address can call `beginOTPRecovery` and go to step 3 and booting the user in step 4.\r\n\r\n5. The original, raw OTP is sent to the `transferOwnershipOTP` function. The function tests `keccak256[keccak256[rawOTP], b]` over a symmetrical range of 240 blocks (approx. 1 hour) around the deployment block.\r\n\r\n6. The OTP flag is switched and the option to transfer ownership with the OTP is permanently burned.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/444754573/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/444855878",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1542#issuecomment-444855878",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1542",
    "id": 444855878,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0NDg1NTg3OA==",
    "user": {
      "login": "nventuro",
      "id": 2530770,
      "node_id": "MDQ6VXNlcjI1MzA3NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2530770?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nventuro",
      "html_url": "https://github.com/nventuro",
      "followers_url": "https://api.github.com/users/nventuro/followers",
      "following_url": "https://api.github.com/users/nventuro/following{/other_user}",
      "gists_url": "https://api.github.com/users/nventuro/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nventuro/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nventuro/subscriptions",
      "organizations_url": "https://api.github.com/users/nventuro/orgs",
      "repos_url": "https://api.github.com/users/nventuro/repos",
      "events_url": "https://api.github.com/users/nventuro/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nventuro/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-12-06T12:31:39Z",
    "updated_at": "2018-12-06T12:31:39Z",
    "author_association": "CONTRIBUTOR",
    "body": "Hi @OFRBG, thanks for this request!\r\n\r\nI'm not sure I followed your explanation correctly, where does the 'high risk' come from? Losing the OTP?\r\n\r\nAlso, note that the proposed implementation is vulnerable to a sort of Denial of Service attack: `beginOTPRecovery` can be continuously called by an attacker.\r\n\r\n```\r\nfunction beginOTPRecovery() public {\r\n    require(block.number > blockEngaged + 5800);\r\n    require(!burnedOTP);\r\n    recoveryEngaged = msg.sender;\r\n}\r\n```\r\n\r\nNot only that: if an attacker spots a `transferOwnershipOTP` transaction and manages to front-run the user with a `beginOTPRecovery` call, they will be able to then use the password provided by the user to transfer ownership to themselves.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/444855878/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/445037792",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1542#issuecomment-445037792",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1542",
    "id": 445037792,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0NTAzNzc5Mg==",
    "user": {
      "login": "OFRBG",
      "id": 8671781,
      "node_id": "MDQ6VXNlcjg2NzE3ODE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8671781?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/OFRBG",
      "html_url": "https://github.com/OFRBG",
      "followers_url": "https://api.github.com/users/OFRBG/followers",
      "following_url": "https://api.github.com/users/OFRBG/following{/other_user}",
      "gists_url": "https://api.github.com/users/OFRBG/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/OFRBG/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/OFRBG/subscriptions",
      "organizations_url": "https://api.github.com/users/OFRBG/orgs",
      "repos_url": "https://api.github.com/users/OFRBG/repos",
      "events_url": "https://api.github.com/users/OFRBG/events{/privacy}",
      "received_events_url": "https://api.github.com/users/OFRBG/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-12-06T21:35:10Z",
    "updated_at": "2018-12-06T21:37:15Z",
    "author_association": "NONE",
    "body": "> Not only that: if an attacker spots a transferOwnershipOTP transaction and manages to front-run the user with a beginOTPRecovery call, they will be able to then use the password provided by the user to transfer ownership to themselves.\r\n\r\nThat is the high risk part. Users need to be experienced to follow the protocol correctly. I am aware that `beginOTPRecovery` is vulnerable to a DoS attack, and I forgot to update `blockEngaged` after the conditions are met. I'll fix it now.\r\n\r\n```\r\n    function beginOTPRecovery() public {\r\n        require(block.number > blockEngaged + 5800);\r\n        require(!burnedOTP);\r\n        recoveryEngaged = msg.sender;\r\n        blockEngaged = block.number;\r\n    }\r\n```\r\n\r\nBy updating `blockEngaged`, the call to `transferOwnershipOTP` can't be front-run by an attack for 5800 blocks. ",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/445037792/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/450615505",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1542#issuecomment-450615505",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1542",
    "id": 450615505,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1MDYxNTUwNQ==",
    "user": {
      "login": "OFRBG",
      "id": 8671781,
      "node_id": "MDQ6VXNlcjg2NzE3ODE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8671781?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/OFRBG",
      "html_url": "https://github.com/OFRBG",
      "followers_url": "https://api.github.com/users/OFRBG/followers",
      "following_url": "https://api.github.com/users/OFRBG/following{/other_user}",
      "gists_url": "https://api.github.com/users/OFRBG/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/OFRBG/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/OFRBG/subscriptions",
      "organizations_url": "https://api.github.com/users/OFRBG/orgs",
      "repos_url": "https://api.github.com/users/OFRBG/repos",
      "events_url": "https://api.github.com/users/OFRBG/events{/privacy}",
      "received_events_url": "https://api.github.com/users/OFRBG/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-12-31T07:20:53Z",
    "updated_at": "2018-12-31T07:20:53Z",
    "author_association": "NONE",
    "body": "It occurred to me that DoS attacks can be mitigated by adding a minimum `msg.value` added. There are extra checks and the code needs to be adapted for 0.5 `payable` changes. For the user finding 10 finney shouldn't be a big problem, while keeping the address denied has a ramping cost. The parameters could/might be adjusted for each case. ",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/450615505/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/981512429",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1542#issuecomment-981512429",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1542",
    "id": 981512429,
    "node_id": "IC_kwDOA9tCBs46gLDt",
    "user": {
      "login": "Amxx",
      "id": 2432299,
      "node_id": "MDQ6VXNlcjI0MzIyOTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2432299?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Amxx",
      "html_url": "https://github.com/Amxx",
      "followers_url": "https://api.github.com/users/Amxx/followers",
      "following_url": "https://api.github.com/users/Amxx/following{/other_user}",
      "gists_url": "https://api.github.com/users/Amxx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Amxx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Amxx/subscriptions",
      "organizations_url": "https://api.github.com/users/Amxx/orgs",
      "repos_url": "https://api.github.com/users/Amxx/repos",
      "events_url": "https://api.github.com/users/Amxx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Amxx/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-11-29T10:42:00Z",
    "updated_at": "2021-11-29T10:42:08Z",
    "author_association": "COLLABORATOR",
    "body": "Closing this for inactivity.\r\n\r\nIMO any new Ownable-like or Ownable-extending contracts should be validated by the community (through an ERC) before we implement them.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/981512429/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
