{
  "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2271",
  "repository_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts",
  "labels_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2271/labels{/name}",
  "comments_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2271/comments",
  "events_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2271/events",
  "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2271",
  "id": 634449877,
  "node_id": "MDU6SXNzdWU2MzQ0NDk4Nzc=",
  "number": 2271,
  "title": "requireReceptionAck parameter is required when _mint for ERC20 compatible",
  "user": {
    "login": "bruce-eljovist",
    "id": 40590633,
    "node_id": "MDQ6VXNlcjQwNTkwNjMz",
    "avatar_url": "https://avatars.githubusercontent.com/u/40590633?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/bruce-eljovist",
    "html_url": "https://github.com/bruce-eljovist",
    "followers_url": "https://api.github.com/users/bruce-eljovist/followers",
    "following_url": "https://api.github.com/users/bruce-eljovist/following{/other_user}",
    "gists_url": "https://api.github.com/users/bruce-eljovist/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/bruce-eljovist/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/bruce-eljovist/subscriptions",
    "organizations_url": "https://api.github.com/users/bruce-eljovist/orgs",
    "repos_url": "https://api.github.com/users/bruce-eljovist/repos",
    "events_url": "https://api.github.com/users/bruce-eljovist/events{/privacy}",
    "received_events_url": "https://api.github.com/users/bruce-eljovist/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 503650860,
      "node_id": "MDU6TGFiZWw1MDM2NTA4NjA=",
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/labels/feature",
      "name": "feature",
      "color": "b9db64",
      "default": false,
      "description": "New contracts, functions, or helpers."
    },
    {
      "id": 1000230196,
      "node_id": "MDU6TGFiZWwxMDAwMjMwMTk2",
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/labels/breaking%20change",
      "name": "breaking change",
      "color": "b60205",
      "default": false,
      "description": "Changes that break backwards compatibility of the public API."
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 7,
  "created_at": "2020-06-08T09:38:59Z",
  "updated_at": "2021-03-08T19:44:31Z",
  "closed_at": "2021-03-08T19:44:31Z",
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "I’m developing ERC20 and ERC777 compatible token. \r\nI’m experiencing a hard time implementing mint for ERC20.\r\nIn order to be fully compatible with ERC20 in ERC777, an account that does not implement IERC777Recipient must be able to mint.\r\n\r\nBut,  in the _mint methods, _callTokensReceived’s last parameter is hardcoded to true. \r\nI can’t make ERC20 compatible mint method.\r\n\r\n\r\nWhat about changing\r\n  `_callTokensReceived(operator, address(0), account, amount, userData, operatorData, true); `\r\nto\r\n  `_callTokensReceived(operator, address(0), account, amount, userData, operatorData, requireReceptionAck); \r\n`\r\nand take requireReceptionAck as a parameter.\r\n\r\n",
  "closed_by": {
    "login": "frangio",
    "id": 481465,
    "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
    "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/frangio",
    "html_url": "https://github.com/frangio",
    "followers_url": "https://api.github.com/users/frangio/followers",
    "following_url": "https://api.github.com/users/frangio/following{/other_user}",
    "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
    "organizations_url": "https://api.github.com/users/frangio/orgs",
    "repos_url": "https://api.github.com/users/frangio/repos",
    "events_url": "https://api.github.com/users/frangio/events{/privacy}",
    "received_events_url": "https://api.github.com/users/frangio/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2271/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2271/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/640918047",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2271#issuecomment-640918047",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2271",
    "id": 640918047,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY0MDkxODA0Nw==",
    "user": {
      "login": "nventuro",
      "id": 2530770,
      "node_id": "MDQ6VXNlcjI1MzA3NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2530770?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nventuro",
      "html_url": "https://github.com/nventuro",
      "followers_url": "https://api.github.com/users/nventuro/followers",
      "following_url": "https://api.github.com/users/nventuro/following{/other_user}",
      "gists_url": "https://api.github.com/users/nventuro/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nventuro/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nventuro/subscriptions",
      "organizations_url": "https://api.github.com/users/nventuro/orgs",
      "repos_url": "https://api.github.com/users/nventuro/repos",
      "events_url": "https://api.github.com/users/nventuro/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nventuro/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-06-08T22:21:38Z",
    "updated_at": "2020-06-08T22:21:38Z",
    "author_association": "CONTRIBUTOR",
    "body": "Hello @bruce-eljovist, thank your for raising this!\r\n\r\nThis is an interesting point, I did not find explicit guidelines on [the specification](https://eips.ethereum.org/EIPS/eip-777#backward-compatibility) as to how this situation should be handled.\r\n\r\nI'd be wary of introducing this additional complexity to `_mint` and have the user make such a decision. It is also possible to sidestep this check by first minting the tokens and then transferring them using ERC20 functions to the intended recipient. \r\n\r\nIs this a pattern you can follow in your application? Can you share more information about your use case, and how the recipient checks are causing you trouble? Thanks!",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/640918047/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/641077278",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2271#issuecomment-641077278",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2271",
    "id": 641077278,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY0MTA3NzI3OA==",
    "user": {
      "login": "bruce-eljovist",
      "id": 40590633,
      "node_id": "MDQ6VXNlcjQwNTkwNjMz",
      "avatar_url": "https://avatars.githubusercontent.com/u/40590633?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bruce-eljovist",
      "html_url": "https://github.com/bruce-eljovist",
      "followers_url": "https://api.github.com/users/bruce-eljovist/followers",
      "following_url": "https://api.github.com/users/bruce-eljovist/following{/other_user}",
      "gists_url": "https://api.github.com/users/bruce-eljovist/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bruce-eljovist/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bruce-eljovist/subscriptions",
      "organizations_url": "https://api.github.com/users/bruce-eljovist/orgs",
      "repos_url": "https://api.github.com/users/bruce-eljovist/repos",
      "events_url": "https://api.github.com/users/bruce-eljovist/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bruce-eljovist/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-06-09T07:03:30Z",
    "updated_at": "2020-06-09T07:03:30Z",
    "author_association": "NONE",
    "body": "Thank you. \r\nI rewrote code like below.\r\n\r\n```\r\ncontract MintHelperForERC20 is Context, Ownable, IERC777Recipient {\r\n    IERC1820Registry private _erc1820 = IERC1820Registry(0x1820a4B7618BdE71Dce8cdc73aAB6C95905faD24);\r\n    IERC20 private token;\r\n    bytes32 constant private _TOKENS_RECIPIENT_INTERFACE_HASH = keccak256(\"ERC777TokensRecipient\");\r\n\r\n    constructor() public\r\n    {\r\n        _erc1820.setInterfaceImplementer(address(this), _TOKENS_RECIPIENT_INTERFACE_HASH, address(this));\r\n        token = IERC20(_msgSender());\r\n    }\r\n\r\n    function tokensReceived(address operator, address from, address to, uint256 amount, bytes calldata userData, bytes calldata operatorData)\r\n        external override\r\n    {\r\n    }\r\n\r\n    function transfer(address to, uint256 amount) external onlyOwner {\r\n        token.transfer(to, amount);\r\n    }\r\n}\r\n```\r\n```\r\ncontract Token777_2 is ERC777 {\r\n    MintHelperForERC20 mintHelper;\r\n\r\n    constructor(string memory name, string memory symbol, address[] memory defaultOperators)\r\n        public\r\n        ERC777(name, symbol, defaultOperators)\r\n    {\r\n        mintHelper = new MintHelperForERC20();\r\n    }\r\n\r\n    function mint777(address account, uint256 amount, bytes calldata userData)\r\n        external\r\n    {\r\n        _mint(account, amount, userData, \"\");\r\n    }\r\n\r\n    function mintErc20(address account, uint256 amount)\r\n        external\r\n    {\r\n        _mint(address(mintHelper), amount, \"\", \"\");\r\n        mintHelper.transfer(account, amount);\r\n    }\r\n}\r\n\r\n```\r\n\r\nThe new version can mint when recipient is no IERC777Recipient implemented contract.\r\nBut there remains a small event log problem. Minted eventlog’s **to** field is not recipient.\r\n\r\n```\r\n[ Minted 0x4CfE78BD9EaEfE7D042855568C9b0531862a72FD 0x78168DD3E10ABA3c42E07E417fd88ea43F6d1E43 1000000000000000000 {null} {null} ]\r\n[ Transfer 0x0000000000000000000000000000000000000000 0x78168DD3E10ABA3c42E07E417fd88ea43F6d1E43 1000000000000000000 ]\r\n[ Sent 0x78168DD3E10ABA3c42E07E417fd88ea43F6d1E43 0x78168DD3E10ABA3c42E07E417fd88ea43F6d1E43 0x873f0eE6A4Dfd4c48163Fe493551A912a66a6979 1000000000000000000 {null} {null} ]\r\n[ Transfer 0x78168DD3E10ABA3c42E07E417fd88ea43F6d1E43 0x873f0eE6A4Dfd4c48163Fe493551A912a66a6979 1000000000000000000 ]\r\n```\r\n\r\nDo you have better ERC20 compatible mint implementation idea?\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/641077278/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/641418675",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2271#issuecomment-641418675",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2271",
    "id": 641418675,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY0MTQxODY3NQ==",
    "user": {
      "login": "nventuro",
      "id": 2530770,
      "node_id": "MDQ6VXNlcjI1MzA3NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2530770?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nventuro",
      "html_url": "https://github.com/nventuro",
      "followers_url": "https://api.github.com/users/nventuro/followers",
      "following_url": "https://api.github.com/users/nventuro/following{/other_user}",
      "gists_url": "https://api.github.com/users/nventuro/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nventuro/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nventuro/subscriptions",
      "organizations_url": "https://api.github.com/users/nventuro/orgs",
      "repos_url": "https://api.github.com/users/nventuro/repos",
      "events_url": "https://api.github.com/users/nventuro/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nventuro/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-06-09T16:33:22Z",
    "updated_at": "2020-06-09T16:33:22Z",
    "author_association": "CONTRIBUTOR",
    "body": "Do you need the `Minted` event to have that address? I find that a bit strange, since `Minted` is ERC777 specific - if working with the contract as an ERC20, you should use `Transfer` instead.\r\n\r\nIt'd be great if you could share more details of what you're trying to achieve. Perhaps it makes sense for your contract to initially mint supply for itself, and then transfer it to recipients when you're now calling `_mint`?",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/641418675/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/641674324",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2271#issuecomment-641674324",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2271",
    "id": 641674324,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY0MTY3NDMyNA==",
    "user": {
      "login": "bruce-eljovist",
      "id": 40590633,
      "node_id": "MDQ6VXNlcjQwNTkwNjMz",
      "avatar_url": "https://avatars.githubusercontent.com/u/40590633?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bruce-eljovist",
      "html_url": "https://github.com/bruce-eljovist",
      "followers_url": "https://api.github.com/users/bruce-eljovist/followers",
      "following_url": "https://api.github.com/users/bruce-eljovist/following{/other_user}",
      "gists_url": "https://api.github.com/users/bruce-eljovist/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bruce-eljovist/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bruce-eljovist/subscriptions",
      "organizations_url": "https://api.github.com/users/bruce-eljovist/orgs",
      "repos_url": "https://api.github.com/users/bruce-eljovist/repos",
      "events_url": "https://api.github.com/users/bruce-eljovist/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bruce-eljovist/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-06-10T02:01:08Z",
    "updated_at": "2020-06-10T02:01:08Z",
    "author_association": "NONE",
    "body": "Our native token has an underlying token.\r\nThe native token’s initial totalSupply will be zero because it has no underlying value.\r\nTotalSupply changes when someone mints and redeems the native token in underlying token.\r\nI think Mint and Redeem event is crucial for this use case and it would be better to define it our own Mint event",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/641674324/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/642126339",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2271#issuecomment-642126339",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2271",
    "id": 642126339,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY0MjEyNjMzOQ==",
    "user": {
      "login": "nventuro",
      "id": 2530770,
      "node_id": "MDQ6VXNlcjI1MzA3NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2530770?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nventuro",
      "html_url": "https://github.com/nventuro",
      "followers_url": "https://api.github.com/users/nventuro/followers",
      "following_url": "https://api.github.com/users/nventuro/following{/other_user}",
      "gists_url": "https://api.github.com/users/nventuro/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nventuro/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nventuro/subscriptions",
      "organizations_url": "https://api.github.com/users/nventuro/orgs",
      "repos_url": "https://api.github.com/users/nventuro/repos",
      "events_url": "https://api.github.com/users/nventuro/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nventuro/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-06-10T16:38:15Z",
    "updated_at": "2020-06-10T16:38:15Z",
    "author_association": "CONTRIBUTOR",
    "body": "I see, that makes sense. Is there a particular reason why you chose to implement this using ERC777? Part of the idea behind it is preventing recipient contracts that are not aware of the protocol from holding tokens that would be forever locked in that account. If you're bypassing that mechanism, it might make sense to just use ERC20 directly.\r\n\r\nAlternatively, you could go ahead with the ERC777 checks and make sure the recipients implement the ERC777Recipient interface. Is there a reason why that is not feasible?",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/642126339/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/642402282",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2271#issuecomment-642402282",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2271",
    "id": 642402282,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY0MjQwMjI4Mg==",
    "user": {
      "login": "bruce-eljovist",
      "id": 40590633,
      "node_id": "MDQ6VXNlcjQwNTkwNjMz",
      "avatar_url": "https://avatars.githubusercontent.com/u/40590633?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bruce-eljovist",
      "html_url": "https://github.com/bruce-eljovist",
      "followers_url": "https://api.github.com/users/bruce-eljovist/followers",
      "following_url": "https://api.github.com/users/bruce-eljovist/following{/other_user}",
      "gists_url": "https://api.github.com/users/bruce-eljovist/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bruce-eljovist/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bruce-eljovist/subscriptions",
      "organizations_url": "https://api.github.com/users/bruce-eljovist/orgs",
      "repos_url": "https://api.github.com/users/bruce-eljovist/repos",
      "events_url": "https://api.github.com/users/bruce-eljovist/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bruce-eljovist/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-06-11T04:42:07Z",
    "updated_at": "2020-06-11T04:42:07Z",
    "author_association": "NONE",
    "body": "Of course, ERC777 has a recipient checking function, but it is applicable only to the contract. For the EOA, locking is not prevented. I think it is not a core function but a mistake reducing set up.\r\nCurrently, openzepplin’s ERC777 can also be used to send to a contract through erc20 compatible transfer, so I don’t think our erc20 compatible mint will increase the risk compared to not having one.\r\nBecause our token will be used in multiple DApps in the future, it should be fully operational as ERC20 and  ERC777 as well.\r\nI think the biggest potential for ERC777 is that it calls the tokensReceived of the contract that received the token.\r\nIf there is a DApp that uses ERC777, the customer of this DApp can just send a token so that the DApp can take an appropriate action.\r\nIt means that user does not need to sign two transactions, one for approving and the other one for transfer. In terms of UI, ERC777 is better. \r\nIn terms of transaction atomicity, ERC777 is also superior.\r\nIn the current web application, the approve is often set to max, but if the user approves it to max in this way, security becomes a serious risk.\r\nI think making users to approve it like this is a big problem. Therefore, in the future, I think this purpose of approve will be less widely used.\r\nThat’s why we want to use ERC777. At the same time, we  consider ERC20 mint compatible function is important.  In many cases, existing contract-based wallets do not implement IERC777Recipient. And there is  a probability that ERC777 is not going to become popularized despite our  expectations. So in order to prepare for both scenarios, our token should be fully compatible to ERC20.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/642402282/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/789327267",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2271#issuecomment-789327267",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2271",
    "id": 789327267,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc4OTMyNzI2Nw==",
    "user": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-03-03T00:34:21Z",
    "updated_at": "2021-03-03T00:34:21Z",
    "author_association": "MEMBER",
    "body": "We want to resolve this before the stable 4.0 release in about a week.\r\n\r\n@SCBuergel suggested as an alternative solution to disable `requireReceptionAck` by default.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/789327267/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
