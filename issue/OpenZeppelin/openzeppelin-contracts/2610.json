{
  "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2610",
  "repository_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts",
  "labels_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2610/labels{/name}",
  "comments_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2610/comments",
  "events_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2610/events",
  "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2610",
  "id": 840656021,
  "node_id": "MDU6SXNzdWU4NDA2NTYwMjE=",
  "number": 2610,
  "title": "ERC721 payable transferFrom",
  "user": {
    "login": "olegabr",
    "id": 2850808,
    "node_id": "MDQ6VXNlcjI4NTA4MDg=",
    "avatar_url": "https://avatars.githubusercontent.com/u/2850808?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/olegabr",
    "html_url": "https://github.com/olegabr",
    "followers_url": "https://api.github.com/users/olegabr/followers",
    "following_url": "https://api.github.com/users/olegabr/following{/other_user}",
    "gists_url": "https://api.github.com/users/olegabr/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/olegabr/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/olegabr/subscriptions",
    "organizations_url": "https://api.github.com/users/olegabr/orgs",
    "repos_url": "https://api.github.com/users/olegabr/repos",
    "events_url": "https://api.github.com/users/olegabr/events{/privacy}",
    "received_events_url": "https://api.github.com/users/olegabr/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 805777215,
      "node_id": "MDU6TGFiZWw4MDU3NzcyMTU=",
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/labels/on%20hold",
      "name": "on hold",
      "color": "5319e7",
      "default": false,
      "description": "Put on hold for some reason that must be specified in a comment."
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 13,
  "created_at": "2021-03-25T07:44:14Z",
  "updated_at": "2023-05-05T18:46:31Z",
  "closed_at": null,
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/378531b70906c906461fa14e5631f0569b938257/contracts/token/ERC721/IERC721.sol#L70\r\n\r\nHello,\r\n\r\nI'm trying to implement royalty in ERC721 token. The idea is to have a `wantToSell` method to set a price for a token, if you want to allow someone to buy it, and a `transferFrom payable` method to allow buyer to call it providing enough value ETH.\r\nThe royalty is distributed to the token contract owner and token ID author in all subsequent re-sells.\r\n\r\nThe problem is that the `transferFrom` function declared without the `payable` modifier and the solidity compiler complains if I try to override the `transferFrom` function adding the `payable` modifier myself.\r\n\r\nThe standard declares the `transferFrom` method as a `payable` https://eips.ethereum.org/EIPS/eip-721\r\n\r\n```solidity\r\nfunction transferFrom(address _from, address _to, uint256 _tokenId) external payable;\r\n``` \r\n\r\n1. Is there some reason why openzeppelin implementation deviate from the standard in this regard?\r\n2. Is there some workaround I can use to implement the royalty functionality in the current openzeppelin implementation?\r\n3. Is there a better way to implement the royalty functionality that would not suffer from this issue?",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2610/reactions",
    "total_count": 3,
    "+1": 3,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2610/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/806758501",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2610#issuecomment-806758501",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2610",
    "id": 806758501,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgwNjc1ODUwMQ==",
    "user": {
      "login": "Amxx",
      "id": 2432299,
      "node_id": "MDQ6VXNlcjI0MzIyOTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2432299?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Amxx",
      "html_url": "https://github.com/Amxx",
      "followers_url": "https://api.github.com/users/Amxx/followers",
      "following_url": "https://api.github.com/users/Amxx/following{/other_user}",
      "gists_url": "https://api.github.com/users/Amxx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Amxx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Amxx/subscriptions",
      "organizations_url": "https://api.github.com/users/Amxx/orgs",
      "repos_url": "https://api.github.com/users/Amxx/repos",
      "events_url": "https://api.github.com/users/Amxx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Amxx/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-03-25T13:38:23Z",
    "updated_at": "2021-03-25T13:38:23Z",
    "author_association": "COLLABORATOR",
    "body": "Hello @olegabr and thanks for the notice.\r\n\r\nA reason why we did not make them payable in our implementation is to avoid funds getting stuck since there is no mechanism to withdraw any fund that might be sent by mistake ...\r\nStill, and regardless of whether there is a better way to implement royalties, the fact that the IERC721 we provide is not strictly compatible with the ERC's is disturbing.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/806758501/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/808021641",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2610#issuecomment-808021641",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2610",
    "id": 808021641,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgwODAyMTY0MQ==",
    "user": {
      "login": "olegabr",
      "id": 2850808,
      "node_id": "MDQ6VXNlcjI4NTA4MDg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2850808?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/olegabr",
      "html_url": "https://github.com/olegabr",
      "followers_url": "https://api.github.com/users/olegabr/followers",
      "following_url": "https://api.github.com/users/olegabr/following{/other_user}",
      "gists_url": "https://api.github.com/users/olegabr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/olegabr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/olegabr/subscriptions",
      "organizations_url": "https://api.github.com/users/olegabr/orgs",
      "repos_url": "https://api.github.com/users/olegabr/repos",
      "events_url": "https://api.github.com/users/olegabr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/olegabr/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-03-26T08:04:50Z",
    "updated_at": "2021-03-26T08:04:50Z",
    "author_association": "NONE",
    "body": "@Amxx Thank you for your prompt response!",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/808021641/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/819006037",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2610#issuecomment-819006037",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2610",
    "id": 819006037,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgxOTAwNjAzNw==",
    "user": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-04-13T19:44:37Z",
    "updated_at": "2021-04-13T19:44:37Z",
    "author_association": "MEMBER",
    "body": "There is no clean way for us to make the interface `payable`, given that our implementation has to remain non-payable (because we can't define a particular way of handling msg.value).\r\n\r\nI believe this is a limitation of the language so I've opened an issue about it. https://github.com/ethereum/solidity/issues/11253 \r\n\r\nIn the mean time, I'm going to close the PR because it doesn't allow child contracts to cleanly remove the `require(msg.value == 0)` check, and we'll resume this issue when Solidity allows us to make the interface function payable.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/819006037/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/847485971",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2610#issuecomment-847485971",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2610",
    "id": 847485971,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg0NzQ4NTk3MQ==",
    "user": {
      "login": "fulldecent",
      "id": 382183,
      "node_id": "MDQ6VXNlcjM4MjE4Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/382183?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fulldecent",
      "html_url": "https://github.com/fulldecent",
      "followers_url": "https://api.github.com/users/fulldecent/followers",
      "following_url": "https://api.github.com/users/fulldecent/following{/other_user}",
      "gists_url": "https://api.github.com/users/fulldecent/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fulldecent/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fulldecent/subscriptions",
      "organizations_url": "https://api.github.com/users/fulldecent/orgs",
      "repos_url": "https://api.github.com/users/fulldecent/repos",
      "events_url": "https://api.github.com/users/fulldecent/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fulldecent/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-05-25T02:37:43Z",
    "updated_at": "2021-05-25T02:37:43Z",
    "author_association": "CONTRIBUTOR",
    "body": "Related issue in the ERC-721 reference implementation: https://github.com/0xcert/ethereum-erc721/issues/144\r\n\r\n---\r\n\r\nBecause this is a known issue (read the caveats section in ERC-721 if you want to see a bunch of known Solidity issues), and because we are using Solidity, I recommend this work plan for this issue:\r\n\r\n- [ ] Acknowledge the upstream Solidity issue in IERC721.sol\r\n- [ ] Add a `@dev` note on each `payable` function about this\r\n- [ ] Close this issue",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/847485971/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/848380612",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2610#issuecomment-848380612",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2610",
    "id": 848380612,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg0ODM4MDYxMg==",
    "user": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-05-26T01:03:14Z",
    "updated_at": "2021-05-26T01:03:14Z",
    "author_association": "MEMBER",
    "body": "Thanks for the suggestion @fulldecent. We will keep the issue open with the tag `on hold` until https://github.com/ethereum/solidity/issues/11253 is resolved.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/848380612/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/898966961",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2610#issuecomment-898966961",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2610",
    "id": 898966961,
    "node_id": "IC_kwDOA9tCBs41lSWx",
    "user": {
      "login": "n00b21337",
      "id": 8969767,
      "node_id": "MDQ6VXNlcjg5Njk3Njc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8969767?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/n00b21337",
      "html_url": "https://github.com/n00b21337",
      "followers_url": "https://api.github.com/users/n00b21337/followers",
      "following_url": "https://api.github.com/users/n00b21337/following{/other_user}",
      "gists_url": "https://api.github.com/users/n00b21337/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/n00b21337/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/n00b21337/subscriptions",
      "organizations_url": "https://api.github.com/users/n00b21337/orgs",
      "repos_url": "https://api.github.com/users/n00b21337/repos",
      "events_url": "https://api.github.com/users/n00b21337/events{/privacy}",
      "received_events_url": "https://api.github.com/users/n00b21337/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-08-14T22:38:02Z",
    "updated_at": "2021-08-17T23:56:03Z",
    "author_association": "NONE",
    "body": "@olegabr \r\nwhat have you decide to do in the end? I would also like to add royalties to transferFrom and safeTransfer so users cant bypass royalties, what would be good way to do it?",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/898966961/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/898991685",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2610#issuecomment-898991685",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2610",
    "id": 898991685,
    "node_id": "IC_kwDOA9tCBs41lYZF",
    "user": {
      "login": "olegabr",
      "id": 2850808,
      "node_id": "MDQ6VXNlcjI4NTA4MDg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2850808?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/olegabr",
      "html_url": "https://github.com/olegabr",
      "followers_url": "https://api.github.com/users/olegabr/followers",
      "following_url": "https://api.github.com/users/olegabr/following{/other_user}",
      "gists_url": "https://api.github.com/users/olegabr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/olegabr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/olegabr/subscriptions",
      "organizations_url": "https://api.github.com/users/olegabr/orgs",
      "repos_url": "https://api.github.com/users/olegabr/repos",
      "events_url": "https://api.github.com/users/olegabr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/olegabr/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-08-15T03:58:05Z",
    "updated_at": "2021-08-15T03:58:05Z",
    "author_association": "NONE",
    "body": "@adriadrop ETH can not be used because of this issue. But ERC20 can :-)",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/898991685/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/899021016",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2610#issuecomment-899021016",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2610",
    "id": 899021016,
    "node_id": "IC_kwDOA9tCBs41lfjY",
    "user": {
      "login": "n00b21337",
      "id": 8969767,
      "node_id": "MDQ6VXNlcjg5Njk3Njc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8969767?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/n00b21337",
      "html_url": "https://github.com/n00b21337",
      "followers_url": "https://api.github.com/users/n00b21337/followers",
      "following_url": "https://api.github.com/users/n00b21337/following{/other_user}",
      "gists_url": "https://api.github.com/users/n00b21337/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/n00b21337/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/n00b21337/subscriptions",
      "organizations_url": "https://api.github.com/users/n00b21337/orgs",
      "repos_url": "https://api.github.com/users/n00b21337/repos",
      "events_url": "https://api.github.com/users/n00b21337/events{/privacy}",
      "received_events_url": "https://api.github.com/users/n00b21337/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-08-15T09:15:36Z",
    "updated_at": "2021-08-15T09:15:36Z",
    "author_association": "NONE",
    "body": "Ok, but ETH could been use seemlesly, with weth you have UX problem, people\nneeding to have weth or you needing to transact it for them.\n\nned, 15. kol 2021. 05:58 Oleg Abrosimov ***@***.***> je\nnapisao:\n\n> @adriadrop <https://github.com/adriadrop> ETH can not be used because of\n> this issue. But ERC20 can :-)\n>\n> —\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2610#issuecomment-898991685>,\n> or unsubscribe\n> <https://github.com/notifications/unsubscribe-auth/ACEN4J2FKNTI5PWDTEA7XODT443NPANCNFSM4ZYZ5NLQ>\n> .\n> Triage notifications on the go with GitHub Mobile for iOS\n> <https://apps.apple.com/app/apple-store/id1477376905?ct=notification-email&mt=8&pt=524675>\n> or Android\n> <https://play.google.com/store/apps/details?id=com.github.android&utm_campaign=notification-email>\n> .\n>\n",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/899021016/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/899292263",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2610#issuecomment-899292263",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2610",
    "id": 899292263,
    "node_id": "IC_kwDOA9tCBs41mhxn",
    "user": {
      "login": "olegabr",
      "id": 2850808,
      "node_id": "MDQ6VXNlcjI4NTA4MDg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2850808?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/olegabr",
      "html_url": "https://github.com/olegabr",
      "followers_url": "https://api.github.com/users/olegabr/followers",
      "following_url": "https://api.github.com/users/olegabr/following{/other_user}",
      "gists_url": "https://api.github.com/users/olegabr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/olegabr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/olegabr/subscriptions",
      "organizations_url": "https://api.github.com/users/olegabr/orgs",
      "repos_url": "https://api.github.com/users/olegabr/repos",
      "events_url": "https://api.github.com/users/olegabr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/olegabr/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-08-16T07:37:33Z",
    "updated_at": "2021-08-16T07:37:33Z",
    "author_association": "NONE",
    "body": "The whole crypto space has a huge UI/UX issue. That is why I'm developing tools to hide crypto from users altogether, and let them pay with fiat if they want: https://ethereumico.io/shop/",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/899292263/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/968091891",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2610#issuecomment-968091891",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2610",
    "id": 968091891,
    "node_id": "IC_kwDOA9tCBs45s-jz",
    "user": {
      "login": "alexroat",
      "id": 5105912,
      "node_id": "MDQ6VXNlcjUxMDU5MTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5105912?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/alexroat",
      "html_url": "https://github.com/alexroat",
      "followers_url": "https://api.github.com/users/alexroat/followers",
      "following_url": "https://api.github.com/users/alexroat/following{/other_user}",
      "gists_url": "https://api.github.com/users/alexroat/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/alexroat/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/alexroat/subscriptions",
      "organizations_url": "https://api.github.com/users/alexroat/orgs",
      "repos_url": "https://api.github.com/users/alexroat/repos",
      "events_url": "https://api.github.com/users/alexroat/events{/privacy}",
      "received_events_url": "https://api.github.com/users/alexroat/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-11-13T16:08:19Z",
    "updated_at": "2021-11-13T16:08:19Z",
    "author_association": "NONE",
    "body": "Hello. Can you offer an alternative or suggest a pattern ?\r\nIt seems so weird that there is no payable support in the whole ERC 721 source set.\r\nUsing a token on a platform I'm developing without payable in transferTo is not a big issue at all because I can simply implement a \"buy\" payable method in order to get the royalties or transfer a payment to the old owner through the contract itself. But .... what about when I \"delegate\" an operator with approve ?  without a payable transferFrom you simply give away the tokens tracked by the contract to another external entity -> this is is why I'm planning to implement the ERC 721 interface but with a locked approve.\r\nCouldn't you simply provide an implementation more compliant to the standard with payable support and another one (let's call it SafeERC721) with the non payable support ?\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/968091891/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/968095629",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2610#issuecomment-968095629",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2610",
    "id": 968095629,
    "node_id": "IC_kwDOA9tCBs45s_eN",
    "user": {
      "login": "fulldecent",
      "id": 382183,
      "node_id": "MDQ6VXNlcjM4MjE4Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/382183?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fulldecent",
      "html_url": "https://github.com/fulldecent",
      "followers_url": "https://api.github.com/users/fulldecent/followers",
      "following_url": "https://api.github.com/users/fulldecent/following{/other_user}",
      "gists_url": "https://api.github.com/users/fulldecent/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fulldecent/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fulldecent/subscriptions",
      "organizations_url": "https://api.github.com/users/fulldecent/orgs",
      "repos_url": "https://api.github.com/users/fulldecent/repos",
      "events_url": "https://api.github.com/users/fulldecent/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fulldecent/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-11-13T16:31:14Z",
    "updated_at": "2021-11-13T16:31:14Z",
    "author_association": "CONTRIBUTOR",
    "body": "This issue here can track upstream Solidity support for payable/nonayable override. And @frangio is doing a great job advocating over there. \n\nBut for all this discussion about royalty (which *is* a supported NFT use case) perhaps Stack Exchange or similar is a better place to discuss. ",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/968095629/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/968338904",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2610#issuecomment-968338904",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2610",
    "id": 968338904,
    "node_id": "IC_kwDOA9tCBs45t63Y",
    "user": {
      "login": "alexroat",
      "id": 5105912,
      "node_id": "MDQ6VXNlcjUxMDU5MTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5105912?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/alexroat",
      "html_url": "https://github.com/alexroat",
      "followers_url": "https://api.github.com/users/alexroat/followers",
      "following_url": "https://api.github.com/users/alexroat/following{/other_user}",
      "gists_url": "https://api.github.com/users/alexroat/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/alexroat/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/alexroat/subscriptions",
      "organizations_url": "https://api.github.com/users/alexroat/orgs",
      "repos_url": "https://api.github.com/users/alexroat/repos",
      "events_url": "https://api.github.com/users/alexroat/events{/privacy}",
      "received_events_url": "https://api.github.com/users/alexroat/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-11-14T18:10:30Z",
    "updated_at": "2021-11-14T18:11:04Z",
    "author_association": "NONE",
    "body": "It was in my opinion that you cannot call payable function from non payable function, but it is possible.\r\nThis is a pattern that is simply an overloading of _transfer and _mint function in order to let them call a payable function to handle, for example, a fee payout when the token is transfered.\r\nIt seems to be working:\r\n```\r\nfunction _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) internal virtual override {\r\n        payToken(tokenId);\r\n        return super._transfer(from,to,tokenId);\r\n    }\r\n\r\n    function _mint(address to, uint256 tokenId) internal virtual override {\r\n         payToken(tokenId);\r\n        return super._mint(to,tokenId);\r\n    }\r\n    \r\n    function payToken(uint256 id) public payable {\r\n        payable(_exists(id)?ownerOf(id):contractOwner).transfer(getTokenPrice(id));\r\n        contractOwner.transfer(getTokenFee(id));\r\n    }\r\n```\r\n\r\nSo, the lack of payable version of the transferFrom is no more a problem.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/968338904/reactions",
      "total_count": 2,
      "+1": 1,
      "-1": 1,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1536639696",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2610#issuecomment-1536639696",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2610",
    "id": 1536639696,
    "node_id": "IC_kwDOA9tCBs5bl0LQ",
    "user": {
      "login": "felixakiragreen",
      "id": 1843672,
      "node_id": "MDQ6VXNlcjE4NDM2NzI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1843672?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/felixakiragreen",
      "html_url": "https://github.com/felixakiragreen",
      "followers_url": "https://api.github.com/users/felixakiragreen/followers",
      "following_url": "https://api.github.com/users/felixakiragreen/following{/other_user}",
      "gists_url": "https://api.github.com/users/felixakiragreen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/felixakiragreen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/felixakiragreen/subscriptions",
      "organizations_url": "https://api.github.com/users/felixakiragreen/orgs",
      "repos_url": "https://api.github.com/users/felixakiragreen/repos",
      "events_url": "https://api.github.com/users/felixakiragreen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/felixakiragreen/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-05-05T18:46:31Z",
    "updated_at": "2023-05-05T18:46:31Z",
    "author_association": "NONE",
    "body": "I had to make my own `IERC721Payable.sol`. Sharing here so others can use it:\r\n\r\n```solidity\r\n// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport '@openzeppelin/contracts/utils/introspection/IERC165.sol';\r\n\r\n/**\r\n * @dev Required interface of an ERC721 compliant contract.\r\n */\r\ninterface IERC721Payable is IERC165 {\r\n\t/**\r\n\t * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\r\n\t */\r\n\tevent Transfer(\r\n\t\taddress indexed from,\r\n\t\taddress indexed to,\r\n\t\tuint256 indexed tokenId\r\n\t);\r\n\r\n\t/**\r\n\t * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n\t */\r\n\tevent Approval(\r\n\t\taddress indexed owner,\r\n\t\taddress indexed approved,\r\n\t\tuint256 indexed tokenId\r\n\t);\r\n\r\n\t/**\r\n\t * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\r\n\t */\r\n\tevent ApprovalForAll(\r\n\t\taddress indexed owner,\r\n\t\taddress indexed operator,\r\n\t\tbool approved\r\n\t);\r\n\r\n\t/**\r\n\t * @dev Returns the number of tokens in ``owner``'s account.\r\n\t */\r\n\tfunction balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n\t/**\r\n\t * @dev Returns the owner of the `tokenId` token.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - `tokenId` must exist.\r\n\t */\r\n\tfunction ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n\t/**\r\n\t * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - `from` cannot be the zero address.\r\n\t * - `to` cannot be the zero address.\r\n\t * - `tokenId` token must exist and be owned by `from`.\r\n\t * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n\t * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n\t *\r\n\t * Emits a {Transfer} event.\r\n\t */\r\n\tfunction safeTransferFrom(\r\n\t\taddress from,\r\n\t\taddress to,\r\n\t\tuint256 tokenId,\r\n\t\tbytes calldata data\r\n\t) external payable;\r\n\r\n\t/**\r\n\t * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n\t * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - `from` cannot be the zero address.\r\n\t * - `to` cannot be the zero address.\r\n\t * - `tokenId` token must exist and be owned by `from`.\r\n\t * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\r\n\t * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n\t *\r\n\t * Emits a {Transfer} event.\r\n\t */\r\n\tfunction safeTransferFrom(\r\n\t\taddress from,\r\n\t\taddress to,\r\n\t\tuint256 tokenId\r\n\t) external payable;\r\n\r\n\t/**\r\n\t * @dev Transfers `tokenId` token from `from` to `to`.\r\n\t *\r\n\t * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\r\n\t * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\r\n\t * understand this adds an external call which potentially creates a reentrancy vulnerability.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - `from` cannot be the zero address.\r\n\t * - `to` cannot be the zero address.\r\n\t * - `tokenId` token must be owned by `from`.\r\n\t * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n\t *\r\n\t * Emits a {Transfer} event.\r\n\t */\r\n\tfunction transferFrom(\r\n\t\taddress from,\r\n\t\taddress to,\r\n\t\tuint256 tokenId\r\n\t) external payable;\r\n\r\n\t/**\r\n\t * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n\t * The approval is cleared when the token is transferred.\r\n\t *\r\n\t * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - The caller must own the token or be an approved operator.\r\n\t * - `tokenId` must exist.\r\n\t *\r\n\t * Emits an {Approval} event.\r\n\t */\r\n\tfunction approve(address to, uint256 tokenId) external;\r\n\r\n\t/**\r\n\t * @dev Approve or remove `operator` as an operator for the caller.\r\n\t * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - The `operator` cannot be the caller.\r\n\t *\r\n\t * Emits an {ApprovalForAll} event.\r\n\t */\r\n\tfunction setApprovalForAll(address operator, bool _approved) external;\r\n\r\n\t/**\r\n\t * @dev Returns the account approved for `tokenId` token.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - `tokenId` must exist.\r\n\t */\r\n\tfunction getApproved(\r\n\t\tuint256 tokenId\r\n\t) external view returns (address operator);\r\n\r\n\t/**\r\n\t * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n\t *\r\n\t * See {setApprovalForAll}\r\n\t */\r\n\tfunction isApprovedForAll(\r\n\t\taddress owner,\r\n\t\taddress operator\r\n\t) external view returns (bool);\r\n}\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1536639696/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
