{
  "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2390",
  "repository_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts",
  "labels_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2390/labels{/name}",
  "comments_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2390/comments",
  "events_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2390/events",
  "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2390",
  "id": 725012557,
  "node_id": "MDU6SXNzdWU3MjUwMTI1NTc=",
  "number": 2390,
  "title": "Add 'paginated' getters for EnumerableSet and Map",
  "user": {
    "login": "nventuro",
    "id": 2530770,
    "node_id": "MDQ6VXNlcjI1MzA3NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/2530770?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nventuro",
    "html_url": "https://github.com/nventuro",
    "followers_url": "https://api.github.com/users/nventuro/followers",
    "following_url": "https://api.github.com/users/nventuro/following{/other_user}",
    "gists_url": "https://api.github.com/users/nventuro/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nventuro/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nventuro/subscriptions",
    "organizations_url": "https://api.github.com/users/nventuro/orgs",
    "repos_url": "https://api.github.com/users/nventuro/repos",
    "events_url": "https://api.github.com/users/nventuro/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nventuro/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 503650860,
      "node_id": "MDU6TGFiZWw1MDM2NTA4NjA=",
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/labels/feature",
      "name": "feature",
      "color": "b9db64",
      "default": false,
      "description": "New contracts, functions, or helpers."
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 5,
  "created_at": "2020-10-19T22:10:21Z",
  "updated_at": "2022-09-30T21:19:06Z",
  "closed_at": null,
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "The current API only provides access via `.length()` and `.at()`. It'd be great to have a `.list(start, end)` that returned a _partial_ view of the set's elements.\r\n\r\nThe reasoning behind making this a non-complete view is to let the caller decide how much gas they want to spend. Calls to `view` functions from off-chain sources (i.e. `eth_call`) are _also_ [capped in gas](https://infura.io/docs/ethereum/json-rpc/eth-call#eth_call), and a large enough set can cause them to fail.\r\n\r\nThe implementation should be quite simple:\r\n```solidity\r\nfunction list(\r\n    EnumerableSet.AddressSet storage set,\r\n    uint256 start,\r\n    uint256 end\r\n) internal view returns (address[] memory) {\r\n    address[] memory elements = new address[](end - start);\r\n\r\n    for (uint256 i = 0; i < elements.length; ++i) {\r\n        elements[i] = set.at(i + start);\r\n    }\r\n\r\n    return elements;\r\n}\r\n```",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2390/reactions",
    "total_count": 3,
    "+1": 3,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2390/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/712529135",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2390#issuecomment-712529135",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2390",
    "id": 712529135,
    "node_id": "MDEyOklzc3VlQ29tbWVudDcxMjUyOTEzNQ==",
    "user": {
      "login": "abcoathup",
      "id": 28278242,
      "node_id": "MDQ6VXNlcjI4Mjc4MjQy",
      "avatar_url": "https://avatars.githubusercontent.com/u/28278242?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/abcoathup",
      "html_url": "https://github.com/abcoathup",
      "followers_url": "https://api.github.com/users/abcoathup/followers",
      "following_url": "https://api.github.com/users/abcoathup/following{/other_user}",
      "gists_url": "https://api.github.com/users/abcoathup/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/abcoathup/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/abcoathup/subscriptions",
      "organizations_url": "https://api.github.com/users/abcoathup/orgs",
      "repos_url": "https://api.github.com/users/abcoathup/repos",
      "events_url": "https://api.github.com/users/abcoathup/events{/privacy}",
      "received_events_url": "https://api.github.com/users/abcoathup/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-10-20T01:20:02Z",
    "updated_at": "2020-10-20T01:20:02Z",
    "author_association": "CONTRIBUTOR",
    "body": "Hi @nventuro !  Thanks for the suggestion, it is really appreciated.\r\n\r\nThe project owner will review your suggestion as soon as they can. \r\n\r\nPlease wait until we have discussed this idea before writing any code or submitting a Pull Request, so we can go through the design beforehand.  We donâ€™t want you to waste your time!",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/712529135/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/878762047",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2390#issuecomment-878762047",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2390",
    "id": 878762047,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg3ODc2MjA0Nw==",
    "user": {
      "login": "ducquangkstn",
      "id": 18111512,
      "node_id": "MDQ6VXNlcjE4MTExNTEy",
      "avatar_url": "https://avatars.githubusercontent.com/u/18111512?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ducquangkstn",
      "html_url": "https://github.com/ducquangkstn",
      "followers_url": "https://api.github.com/users/ducquangkstn/followers",
      "following_url": "https://api.github.com/users/ducquangkstn/following{/other_user}",
      "gists_url": "https://api.github.com/users/ducquangkstn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ducquangkstn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ducquangkstn/subscriptions",
      "organizations_url": "https://api.github.com/users/ducquangkstn/orgs",
      "repos_url": "https://api.github.com/users/ducquangkstn/repos",
      "events_url": "https://api.github.com/users/ducquangkstn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ducquangkstn/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-07-13T04:10:07Z",
    "updated_at": "2021-07-13T04:10:07Z",
    "author_association": "NONE",
    "body": "I would like to have some kind of listAll function\r\n```solidity\r\nfunction listAll(\r\n    EnumerableSet.AddressSet storage set\r\n) internal view returns (address[] memory);\r\n```\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/878762047/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/879168572",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2390#issuecomment-879168572",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2390",
    "id": 879168572,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg3OTE2ODU3Mg==",
    "user": {
      "login": "Amxx",
      "id": 2432299,
      "node_id": "MDQ6VXNlcjI0MzIyOTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2432299?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Amxx",
      "html_url": "https://github.com/Amxx",
      "followers_url": "https://api.github.com/users/Amxx/followers",
      "following_url": "https://api.github.com/users/Amxx/following{/other_user}",
      "gists_url": "https://api.github.com/users/Amxx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Amxx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Amxx/subscriptions",
      "organizations_url": "https://api.github.com/users/Amxx/orgs",
      "repos_url": "https://api.github.com/users/Amxx/repos",
      "events_url": "https://api.github.com/users/Amxx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Amxx/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-07-13T15:06:13Z",
    "updated_at": "2021-07-13T15:06:13Z",
    "author_association": "COLLABORATOR",
    "body": "Hello @ducquangkstn \r\n\r\nThis was already requested many times, but the issue remains the same. AddressSet, and all the other sets, use a `bytes32[]` based underlying storage. This means that the values are stored as a `bytes32[]`. Unfortunatelly, it is not possible to cast a `bytes32[]` to a `address[]` easily. This casting would require creating a new array, and casting all the elements one by one.\r\n\r\nThis would very gas expensive to do it onchain, and it feels like gettings elements on request using the `.at()` function is a better option, with no hidden costs. If you really need the array of values, you can access the bytes32[]  version, but you'll have to process it accordingly.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/879168572/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/879311787",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2390#issuecomment-879311787",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2390",
    "id": 879311787,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg3OTMxMTc4Nw==",
    "user": {
      "login": "nventuro",
      "id": 2530770,
      "node_id": "MDQ6VXNlcjI1MzA3NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2530770?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nventuro",
      "html_url": "https://github.com/nventuro",
      "followers_url": "https://api.github.com/users/nventuro/followers",
      "following_url": "https://api.github.com/users/nventuro/following{/other_user}",
      "gists_url": "https://api.github.com/users/nventuro/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nventuro/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nventuro/subscriptions",
      "organizations_url": "https://api.github.com/users/nventuro/orgs",
      "repos_url": "https://api.github.com/users/nventuro/repos",
      "events_url": "https://api.github.com/users/nventuro/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nventuro/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-07-13T18:36:09Z",
    "updated_at": "2021-07-13T18:36:09Z",
    "author_association": "CONTRIBUTOR",
    "body": ">Unfortunatelly, it is not possible to cast a bytes32[] to a address[] easily\r\n\r\nActually I think this is not that difficult using inline assembly:\r\n\r\n```\r\npragma solidity ^0.8.0;\r\n\r\ncontract A {\r\n    bytes32[] private _foo;\r\n    \r\n    function foo() internal view returns (bytes32[] storage) {\r\n        return _foo;\r\n    }\r\n    \r\n    function fooAsAddress() internal view returns (address[] storage) {\r\n        this; // Silence state mutability warning, as this should be view\r\n        \r\n        address[] storage fooAddress;\r\n        \r\n        \r\n        assembly {\r\n            fooAddress.slot := _foo.slot\r\n        }\r\n        \r\n        return fooAddress;\r\n    }\r\n}    \r\n```\r\n\r\nFrom [the docs](https://docs.soliditylang.org/en/v0.7.1/assembly.html#access-to-external-variables-functions-and-libraries), a storage array should always have an offset of 0, so we don't need to assign that. I did a quick test on remix and it seems to work.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/879311787/reactions",
      "total_count": 4,
      "+1": 4,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1264029708",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2390#issuecomment-1264029708",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2390",
    "id": 1264029708,
    "node_id": "IC_kwDOA9tCBs5LV5AM",
    "user": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-09-30T21:14:16Z",
    "updated_at": "2022-09-30T21:19:06Z",
    "author_association": "MEMBER",
    "body": "Bumping this. Contracts with EnumerableSet/Map variables that want to expose that data through getters currently have two options:\r\n1. Use `values()`\r\n2. Use `at(i)` and `length()`\r\n\r\nOption 1 is not recommended because `values()` returns an array of unbounded length. However, option 2 has some downsides:\r\n\r\n- It potentially requires more boilerplate if you want to know the length prior to getting all indices. Alternatively, you can just use `at(i)` until you get a revert from being past the end of the array, but for this to be reliable we probably should add a custom error for out of bounds (and it's not a nice solution).\r\n- It's inefficient because it requires many more function calls.\r\n\r\nNote that I'm mainly thinking about off-chain purposes but the same downsides apply on-chain.\r\n\r\nA paginated getter would be the best of both worlds. You have to expose just one function, you can bound the array to whatever length you want, and you can just keep going until the array you get has shorter length than the page size that was requested. _And_ you can safely and efficiently use it on-chain.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1264029708/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
