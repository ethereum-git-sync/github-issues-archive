{
  "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/644",
  "repository_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts",
  "labels_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/644/labels{/name}",
  "comments_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/644/comments",
  "events_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/644/events",
  "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/644",
  "id": 286210359,
  "node_id": "MDU6SXNzdWUyODYyMTAzNTk=",
  "number": 644,
  "title": "Possible critical bug in ECRecovery",
  "user": {
    "login": "sullof",
    "id": 108464,
    "node_id": "MDQ6VXNlcjEwODQ2NA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/108464?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/sullof",
    "html_url": "https://github.com/sullof",
    "followers_url": "https://api.github.com/users/sullof/followers",
    "following_url": "https://api.github.com/users/sullof/following{/other_user}",
    "gists_url": "https://api.github.com/users/sullof/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/sullof/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/sullof/subscriptions",
    "organizations_url": "https://api.github.com/users/sullof/orgs",
    "repos_url": "https://api.github.com/users/sullof/repos",
    "events_url": "https://api.github.com/users/sullof/events{/privacy}",
    "received_events_url": "https://api.github.com/users/sullof/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 417782817,
      "node_id": "MDU6TGFiZWw0MTc3ODI4MTc=",
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/labels/bug",
      "name": "bug",
      "color": "b60205",
      "default": true,
      "description": null
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 10,
  "created_at": "2018-01-05T07:22:14Z",
  "updated_at": "2018-10-04T18:26:35Z",
  "closed_at": "2018-01-05T14:35:51Z",
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "I am building a contract which checks the signer of a certain message.\r\nFor my tests I signed the string `sullof` using MyEtherWallet and Metamask at ([https://www.myetherwallet.com/signmsg.html](https://www.myetherwallet.com/signmsg.html)). \r\nThe result is:\r\n```\r\n{\r\n      \"address\": \"0x41bdd852d3618dc5d6338279f373bf7935dc0242\",\r\n        \"msg\": \"sullof\",\r\n        \"sig\": \"0x335473213ac39fb66c74e8b23523583544389eef70e8bce4cc455cb41662083b1fe6981161e68c29e25fe65fb40f49f2c8adecfb0a1eda8d1c55a0c127e50cb01c\",\r\n        \"version\": \"2\"\r\n    }\r\n```\r\nUnfortunately `ECRecovery.recover` returns the wrong address.\r\n\r\nI added the following test to ECRecovery.test.js:\r\n```\r\nit('recover signer', async function () {\r\n    // Signature generated outside testrpc with MyEtherWallet and Metamask\r\n\r\n    let signer = '0x41bdd852d3618dc5d6338279f373bf7935dc0242';\r\n\r\n    let message = '0x47c322ba85ab101b25573c9262d399b6e619f434298f6c1e593d2612a935264c';\r\n\r\n    assert.equal(web3.sha3('sullof'), message);\r\n\r\n    // eslint-disable-next-line max-len\r\n    let signature = '0x335473213ac39fb66c74e8b23523583544389eef70e8bce4cc455cb41662083b1fe6981161e68c29e25fe65fb40f49f2c8adecfb0a1eda8d1c55a0c127e50cb01c';\r\n    assert.equal(signer, await ecrecovery.recover(message, signature));\r\n\r\n  });\r\n```\r\nIt fails with the error\r\n```\r\n1) Contract: ECRecovery recover signer:\r\n     AssertionError: expected '0x41bdd852d3618dc5d6338279f373bf7935dc0242' \r\n     to equal '0x730720a38c98b59be484b1021e350c3183696c93'\r\n```\r\nTo be sure that it was not a problem with Metamask, I exported my private key and I tried directly inside MyEtherWallet and the signature is definitely correct.\r\n\r\nAny idea?\r\n\r\nPS > You can check the added test at [https://github.com/sullof/zeppelin-solidity/blob/testing-RCRecovery/test/ECRecovery.test.js](https://github.com/sullof/zeppelin-solidity/blob/testing-RCRecovery/test/ECRecovery.test.js)\r\n",
  "closed_by": {
    "login": "frangio",
    "id": 481465,
    "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
    "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/frangio",
    "html_url": "https://github.com/frangio",
    "followers_url": "https://api.github.com/users/frangio/followers",
    "following_url": "https://api.github.com/users/frangio/following{/other_user}",
    "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
    "organizations_url": "https://api.github.com/users/frangio/orgs",
    "repos_url": "https://api.github.com/users/frangio/repos",
    "events_url": "https://api.github.com/users/frangio/events{/privacy}",
    "received_events_url": "https://api.github.com/users/frangio/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/644/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/644/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/355555022",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/644#issuecomment-355555022",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/644",
    "id": 355555022,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1NTU1NTAyMg==",
    "user": {
      "login": "AugustoL",
      "id": 7763867,
      "node_id": "MDQ6VXNlcjc3NjM4Njc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7763867?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/AugustoL",
      "html_url": "https://github.com/AugustoL",
      "followers_url": "https://api.github.com/users/AugustoL/followers",
      "following_url": "https://api.github.com/users/AugustoL/following{/other_user}",
      "gists_url": "https://api.github.com/users/AugustoL/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/AugustoL/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/AugustoL/subscriptions",
      "organizations_url": "https://api.github.com/users/AugustoL/orgs",
      "repos_url": "https://api.github.com/users/AugustoL/repos",
      "events_url": "https://api.github.com/users/AugustoL/events{/privacy}",
      "received_events_url": "https://api.github.com/users/AugustoL/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-05T13:30:54Z",
    "updated_at": "2018-01-05T13:30:54Z",
    "author_association": "CONTRIBUTOR",
    "body": "Hello @sullof I think the function that uses testrpc to sign messages is different to the one used by metamask and myetherwallet, that should be why you test is failing, check the https://github.com/OpenZeppelin/zeppelin-solidity/blob/master/test/helpers/hashMessage.js file\r\n\r\ntestrpc adds a prefix to the message that will be signed, I think myEtherWallet and Metamask dont.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/355555022/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/355568980",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/644#issuecomment-355568980",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/644",
    "id": 355568980,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1NTU2ODk4MA==",
    "user": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-05T14:35:51Z",
    "updated_at": "2018-01-05T14:42:48Z",
    "author_association": "MEMBER",
    "body": "Agree with @AugustoL.\r\n\r\nTestrpc is using [`eth_sign`](https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign) which prefixes the signed message for security reasons. And from https://github.com/ethereum/go-ethereum/issues/14794#issuecomment-314815863:\r\n>It seems that MyEtherWallet and Etherscan.io do not use prefixes at all\r\n\r\nLet us know if this is not the cause of the problem and we can reopen!",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/355568980/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/355637833",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/644#issuecomment-355637833",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/644",
    "id": 355637833,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1NTYzNzgzMw==",
    "user": {
      "login": "sullof",
      "id": 108464,
      "node_id": "MDQ6VXNlcjEwODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/108464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sullof",
      "html_url": "https://github.com/sullof",
      "followers_url": "https://api.github.com/users/sullof/followers",
      "following_url": "https://api.github.com/users/sullof/following{/other_user}",
      "gists_url": "https://api.github.com/users/sullof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sullof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sullof/subscriptions",
      "organizations_url": "https://api.github.com/users/sullof/orgs",
      "repos_url": "https://api.github.com/users/sullof/repos",
      "events_url": "https://api.github.com/users/sullof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sullof/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-05T19:04:19Z",
    "updated_at": "2018-01-05T19:04:19Z",
    "author_association": "NONE",
    "body": "Thanks. Actually, that is what I was thinking.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/355637833/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/355639532",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/644#issuecomment-355639532",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/644",
    "id": 355639532,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1NTYzOTUzMg==",
    "user": {
      "login": "sullof",
      "id": 108464,
      "node_id": "MDQ6VXNlcjEwODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/108464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sullof",
      "html_url": "https://github.com/sullof",
      "followers_url": "https://api.github.com/users/sullof/followers",
      "following_url": "https://api.github.com/users/sullof/following{/other_user}",
      "gists_url": "https://api.github.com/users/sullof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sullof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sullof/subscriptions",
      "organizations_url": "https://api.github.com/users/sullof/orgs",
      "repos_url": "https://api.github.com/users/sullof/repos",
      "events_url": "https://api.github.com/users/sullof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sullof/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-05T19:11:26Z",
    "updated_at": "2018-01-05T19:24:07Z",
    "author_association": "NONE",
    "body": "@AugustoL, in a real scenario I have a contract which has to verify a signature generated by Metamask or MEW or whatever. I guess that I should check the two cases, with or without prefix. But anyway, I have to do the check in the contract, and there that helper is useless.\r\nWhat I am saying is that ECRecovery is nice but is not enough because it's basically applicable only when I have everything in the expected format. But if my contract receives the signature from outside and I have to format the message within the contract, it would be very useful to have a contract ECRecover with some additional function, instead of the library ECRecovery. \r\nWhat do you think?\r\n  ",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/355639532/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/355644307",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/644#issuecomment-355644307",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/644",
    "id": 355644307,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1NTY0NDMwNw==",
    "user": {
      "login": "sullof",
      "id": 108464,
      "node_id": "MDQ6VXNlcjEwODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/108464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sullof",
      "html_url": "https://github.com/sullof",
      "followers_url": "https://api.github.com/users/sullof/followers",
      "following_url": "https://api.github.com/users/sullof/following{/other_user}",
      "gists_url": "https://api.github.com/users/sullof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sullof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sullof/subscriptions",
      "organizations_url": "https://api.github.com/users/sullof/orgs",
      "repos_url": "https://api.github.com/users/sullof/repos",
      "events_url": "https://api.github.com/users/sullof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sullof/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-05T19:31:23Z",
    "updated_at": "2018-01-05T21:56:33Z",
    "author_association": "NONE",
    "body": "BTW, I added two more tests. The first using `hashMessage` and it fails, the second building the message myself [https://github.com/sullof/zeppelin-solidity/blob/testing-RCRecovery/test/ECRecovery.test.js](https://github.com/sullof/zeppelin-solidity/blob/testing-RCRecovery/test/ECRecovery.test.js).\r\n```\r\nit('should recover signer but fails', async function () {\r\n    // Signature generated outside testrpc with MyEtherWallet and Metamask\r\n\r\n    let signer = '0x41bdd852d3618dc5d6338279f373bf7935dc0242';\r\n\r\n    let baseMessage = 'sullof';\r\n\r\n    let message = hashMessage(baseMessage);\r\n\r\n\r\n    // eslint-disable-next-line max-len\r\n    let signature = '0x335473213ac39fb66c74e8b23523583544389eef70e8bce4cc455cb41662083b1fe6981161e68c29e25fe65fb40f49f2c8adecfb0a1eda8d1c55a0c127e50cb01c';\r\n\r\n    assert.notEqual(signer, await ecrecovery.recover(message, signature));\r\n\r\n  });\r\n\r\n  it('recover signer', async function () {\r\n    // Signature generated outside testrpc with MyEtherWallet and Metamask\r\n\r\n    let signer = '0x41bdd852d3618dc5d6338279f373bf7935dc0242';\r\n\r\n    let baseMessage = 'sullof';\r\n\r\n    let fullMessage = `\\x19Ethereum Signed Message:\\n${baseMessage.length}${baseMessage}`\r\n\r\n    let message = web3.sha3(fullMessage)\r\n\r\n    // eslint-disable-next-line max-len\r\n    let signature = '0x335473213ac39fb66c74e8b23523583544389eef70e8bce4cc455cb41662083b1fe6981161e68c29e25fe65fb40f49f2c8adecfb0a1eda8d1c55a0c127e50cb01c';\r\n    \r\n    assert.equal(signer, await ecrecovery.recover(message, signature));\r\n\r\n  });\r\n```\r\nThe second works. This means that in any case `hashMessage` does not implement that in the way MEW and Metamask do. ",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/355644307/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/355675928",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/644#issuecomment-355675928",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/644",
    "id": 355675928,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1NTY3NTkyOA==",
    "user": {
      "login": "sullof",
      "id": 108464,
      "node_id": "MDQ6VXNlcjEwODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/108464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sullof",
      "html_url": "https://github.com/sullof",
      "followers_url": "https://api.github.com/users/sullof/followers",
      "following_url": "https://api.github.com/users/sullof/following{/other_user}",
      "gists_url": "https://api.github.com/users/sullof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sullof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sullof/subscriptions",
      "organizations_url": "https://api.github.com/users/sullof/orgs",
      "repos_url": "https://api.github.com/users/sullof/repos",
      "events_url": "https://api.github.com/users/sullof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sullof/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-05T21:55:30Z",
    "updated_at": "2018-01-05T21:55:30Z",
    "author_association": "NONE",
    "body": "@frangio The problem was quite the opposite. In fact adding the prefix it works, see above. But I don't understand how the test at [https://github.com/sullof/ethereumjs-util/blob/master/index.js#L359](https://github.com/sullof/ethereumjs-util/blob/master/index.js#L359) can work, since it does a simple `web3.sha3('OpenZeppelin')`.\r\nActually, my first test was a duplicate of that one, and this is why it was failing.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/355675928/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/355677421",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/644#issuecomment-355677421",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/644",
    "id": 355677421,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1NTY3NzQyMQ==",
    "user": {
      "login": "sullof",
      "id": 108464,
      "node_id": "MDQ6VXNlcjEwODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/108464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sullof",
      "html_url": "https://github.com/sullof",
      "followers_url": "https://api.github.com/users/sullof/followers",
      "following_url": "https://api.github.com/users/sullof/following{/other_user}",
      "gists_url": "https://api.github.com/users/sullof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sullof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sullof/subscriptions",
      "organizations_url": "https://api.github.com/users/sullof/orgs",
      "repos_url": "https://api.github.com/users/sullof/repos",
      "events_url": "https://api.github.com/users/sullof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sullof/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-05T22:02:14Z",
    "updated_at": "2018-01-05T22:02:14Z",
    "author_association": "NONE",
    "body": "MyEtherWallet for sure prefixes the message (the way I did) because it uses `hashPersonalMessage` from `ethereymjs-util` for that.\r\n\r\n[https://github.com/kvhnuke/etherwallet/blob/mercury/app/scripts/controllers/signMsgCtrl.js#L80](https://github.com/kvhnuke/etherwallet/blob/mercury/app/scripts/controllers/signMsgCtrl.js#L80)\r\n\r\n[https://github.com/sullof/ethereumjs-util/blob/master/index.js#L359](https://github.com/sullof/ethereumjs-util/blob/master/index.js#L359)",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/355677421/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/355687032",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/644#issuecomment-355687032",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/644",
    "id": 355687032,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1NTY4NzAzMg==",
    "user": {
      "login": "AugustoL",
      "id": 7763867,
      "node_id": "MDQ6VXNlcjc3NjM4Njc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7763867?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/AugustoL",
      "html_url": "https://github.com/AugustoL",
      "followers_url": "https://api.github.com/users/AugustoL/followers",
      "following_url": "https://api.github.com/users/AugustoL/following{/other_user}",
      "gists_url": "https://api.github.com/users/AugustoL/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/AugustoL/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/AugustoL/subscriptions",
      "organizations_url": "https://api.github.com/users/AugustoL/orgs",
      "repos_url": "https://api.github.com/users/AugustoL/repos",
      "events_url": "https://api.github.com/users/AugustoL/events{/privacy}",
      "received_events_url": "https://api.github.com/users/AugustoL/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-05T22:50:55Z",
    "updated_at": "2018-01-05T22:50:55Z",
    "author_association": "CONTRIBUTOR",
    "body": "@sullof I dont understand where is the problem, I used this library successfully with the `eth-utils` libs that uses secp256k1 for signatures.\r\n\r\nPlease check the tests of LifChannels contracts that I did, it is a simple implementation of state channels for a ERC20 token, it uses the ECRecovery library.\r\n\r\nhttps://github.com/windingtree/LifToken/blob/master/test/LifChannels.js\r\n\r\nhttps://github.com/windingtree/LifToken/blob/master/contracts/LifChannels.sol\r\n\r\necsign function used in the tests:\r\nhttps://github.com/ethereumjs/ethereumjs-util/blob/0bc0616c2de0de0723f87c3b64923bb9f962a8e1/index.js#L339-L347\r\n\r\nIt does not matter what you use to generate the signature, if you add a prefix or not, the signer is recovered successfully if you provide the right hash of the message signed.\r\n\r\nI hope the LifChannels test and contract helps.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/355687032/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/355692073",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/644#issuecomment-355692073",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/644",
    "id": 355692073,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1NTY5MjA3Mw==",
    "user": {
      "login": "sullof",
      "id": 108464,
      "node_id": "MDQ6VXNlcjEwODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/108464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sullof",
      "html_url": "https://github.com/sullof",
      "followers_url": "https://api.github.com/users/sullof/followers",
      "following_url": "https://api.github.com/users/sullof/following{/other_user}",
      "gists_url": "https://api.github.com/users/sullof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sullof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sullof/subscriptions",
      "organizations_url": "https://api.github.com/users/sullof/orgs",
      "repos_url": "https://api.github.com/users/sullof/repos",
      "events_url": "https://api.github.com/users/sullof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sullof/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-05T23:20:53Z",
    "updated_at": "2018-01-05T23:20:53Z",
    "author_association": "NONE",
    "body": "> It does not matter what you use to generate the signature, if you add a prefix or not, the signer is recovered successfully if you provide the right hash of the message signed.\r\n\r\nOf course, but here I am talking about how the original message is formatted, before hashing it. The [two tests that I added to ECRecovery.test.js in my fork](https://github.com/sullof/zeppelin-solidity/blob/testing-RCRecovery/test/ECRecovery.test.js) show the problem.\r\n\r\nAnyway, I will take a look at LifChannels. Thanks.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/355692073/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/427100343",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/644#issuecomment-427100343",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/644",
    "id": 427100343,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyNzEwMDM0Mw==",
    "user": {
      "login": "passionofvc",
      "id": 23724965,
      "node_id": "MDQ6VXNlcjIzNzI0OTY1",
      "avatar_url": "https://avatars.githubusercontent.com/u/23724965?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/passionofvc",
      "html_url": "https://github.com/passionofvc",
      "followers_url": "https://api.github.com/users/passionofvc/followers",
      "following_url": "https://api.github.com/users/passionofvc/following{/other_user}",
      "gists_url": "https://api.github.com/users/passionofvc/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/passionofvc/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/passionofvc/subscriptions",
      "organizations_url": "https://api.github.com/users/passionofvc/orgs",
      "repos_url": "https://api.github.com/users/passionofvc/repos",
      "events_url": "https://api.github.com/users/passionofvc/events{/privacy}",
      "received_events_url": "https://api.github.com/users/passionofvc/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-04T17:19:07Z",
    "updated_at": "2018-10-04T18:26:35Z",
    "author_association": "NONE",
    "body": "hi @sullof \r\nI found why it not work with from MyEtherWallet signature,\r\nyour hashMessage method hash message with sha3,\r\nbut[hashPersonalMessage]( https://github.com/ethereumjs/ethereumjs-util/blob/54aa41ccb5c09de626ee358499e2efab535bc0bf/index.js#L373-376\r\n) directly convert to byte buffer, just not hash, so it can not verify.\r\nuse hashPersonalMessage it work fine I tested it.\r\n\r\n[ECRecovery.test.js](https://github.com/passionofvc/blockchain-passion.github.io/blob/master/eth/eth-debug-SC/test/ECRecovery.test.js\r\n)\r\n\r\n\r\n```\r\n   it('should recover signer but fails', async function () {\r\n     // Signature generated outside testrpc with MyEtherWallet and Metamask\r\n \r\n     let signer = '0x41BDD852d3618Dc5D6338279F373Bf7935dc0242';\r\n \r\n     let baseMessage = 'sullof';\r\n     const messageHex =ethUtils.sha3(baseMessage).toString('hex');\r\n \r\n     //let message = hashMessage(baseMessage);\r\n     let message = ethUtils.hashPersonalMessage( ethUtils.toBuffer(baseMessage) );\r\n     message = ethUtils.bufferToHex(message)\r\n \r\n     console.log(messageHex, message)\r\n     // eslint-disable-next-line max-len\r\n     let signature =                                                                                                                 ‘0x335473213ac39fb66c74e8b23523583544389eef70e8bce4cc455cb41662083b1fe6981161e68c29e25fe65fb40f49f2c8adecfb0a1eda8d1c55a0c127e50cb01c';\r\n     var address = await ecrecovery.recover(message, signature)\r\n     console.log(signer, address )\r\n     //assert.notEqual(signer, address)\r\n     assert.equal(signer, address)\r\n \r\n   });\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/427100343/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
