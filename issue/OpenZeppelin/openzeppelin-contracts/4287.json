{
  "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4287",
  "repository_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts",
  "labels_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4287/labels{/name}",
  "comments_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4287/comments",
  "events_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4287/events",
  "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/4287",
  "id": 1730415103,
  "node_id": "I_kwDOA9tCBs5nJAn_",
  "number": 4287,
  "title": "Feature request: `Base64.decode`",
  "user": {
    "login": "PaulRBerg",
    "id": 8782666,
    "node_id": "MDQ6VXNlcjg3ODI2NjY=",
    "avatar_url": "https://avatars.githubusercontent.com/u/8782666?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/PaulRBerg",
    "html_url": "https://github.com/PaulRBerg",
    "followers_url": "https://api.github.com/users/PaulRBerg/followers",
    "following_url": "https://api.github.com/users/PaulRBerg/following{/other_user}",
    "gists_url": "https://api.github.com/users/PaulRBerg/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/PaulRBerg/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/PaulRBerg/subscriptions",
    "organizations_url": "https://api.github.com/users/PaulRBerg/orgs",
    "repos_url": "https://api.github.com/users/PaulRBerg/repos",
    "events_url": "https://api.github.com/users/PaulRBerg/events{/privacy}",
    "received_events_url": "https://api.github.com/users/PaulRBerg/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 3,
  "created_at": "2023-05-29T09:27:49Z",
  "updated_at": "2023-05-29T21:13:06Z",
  "closed_at": null,
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "The current `Base64` library offers support only for base64 encoding:\r\n\r\nhttps://github.com/OpenZeppelin/openzeppelin-contracts/blob/5420879d9b834a0579423d668fb60c5fc13b60cc/contracts/utils/Base64.sol\r\n\r\nHowever, with the advent of Foundry, there's also the need for decoding base64-encoded strings in test files.\r\n\r\nAt the moment, OpenZeppelin users are forced to go look for a solution elsewhere, e.g. in [Solady](https://github.com/Vectorized/solady/blob/8d868a936ec1a45be294e26de1a64ebfb73c6c20/src/utils/Base64.sol), which provides both encoding and decoding.\r\n\r\nIt would thus be helpful to provide a `decode` function on top of `encode`.\r\n",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4287/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4287/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1567147934",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/4287#issuecomment-1567147934",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4287",
    "id": 1567147934,
    "node_id": "IC_kwDOA9tCBs5daMee",
    "user": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-05-29T13:34:49Z",
    "updated_at": "2023-05-29T13:34:49Z",
    "author_association": "MEMBER",
    "body": "Interesting, thanks for sharing.\r\n\r\n> However, with the advent of Foundry, there's also the need for decoding base64-encoded strings in test files.\r\n\r\nIs the idea that you would do this to test the output of one of your functions that uses `Base64.encode`? Or is there some other reason you would use `decode`?",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1567147934/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1567479955",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/4287#issuecomment-1567479955",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4287",
    "id": 1567479955,
    "node_id": "IC_kwDOA9tCBs5dbdiT",
    "user": {
      "login": "PaulRBerg",
      "id": 8782666,
      "node_id": "MDQ6VXNlcjg3ODI2NjY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8782666?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/PaulRBerg",
      "html_url": "https://github.com/PaulRBerg",
      "followers_url": "https://api.github.com/users/PaulRBerg/followers",
      "following_url": "https://api.github.com/users/PaulRBerg/following{/other_user}",
      "gists_url": "https://api.github.com/users/PaulRBerg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/PaulRBerg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/PaulRBerg/subscriptions",
      "organizations_url": "https://api.github.com/users/PaulRBerg/orgs",
      "repos_url": "https://api.github.com/users/PaulRBerg/repos",
      "events_url": "https://api.github.com/users/PaulRBerg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/PaulRBerg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-05-29T20:10:26Z",
    "updated_at": "2023-05-29T20:10:26Z",
    "author_association": "CONTRIBUTOR",
    "body": "> Interesting, thanks for sharing.\r\n\r\nHappy to give back to the community.\r\n\r\n> Is the idea that you would do this to test the output of one of your functions that uses `Base64.encode`?\r\n\r\nYes; this is the use case:\r\n\r\n```solidity\r\n/// @dev Extracts the SVG from a base-64 encoded token URI.\r\nfunction extractSVG(string memory uri) internal returns (string memory) {\r\n    string memory decodedURI = string(Base64.decode(uri));\r\n    string memory sanitizedURI = decodedURI.replace({ search: \"data:application/json;base64,\", replacement: \"\" });\r\n    string memory image = vm.parseJsonString(sanitizedURI, \".image\");\r\n    string memory sanitizedImage = image.replace({ search: \"data:image/svg+xml;base64,\", replacement: \"\" });\r\n    string memory svg = string(Base64.decode(sanitizedImage));\r\n    return svg;\r\n}\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1567479955/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1567522366",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/4287#issuecomment-1567522366",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4287",
    "id": 1567522366,
    "node_id": "IC_kwDOA9tCBs5dbn4-",
    "user": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-05-29T21:13:05Z",
    "updated_at": "2023-05-29T21:13:05Z",
    "author_association": "MEMBER",
    "body": "I see. We will consider this request, but in the meantime I want to share a thought.\r\n\r\nThe main goal of OpenZeppelin Contracts is to provide secure code for production use, and achieving that goal requires heavy investment and focus. As Solidity becomes more used as a language for Foundry testing and scripting, there are new use cases for Solidity libraries (like the one in this issue) that have less strict security requirements. It isn't practical or necessary to make the same level of investment into that kind of code, so I wonder if those should coexist in the same library.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1567522366/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
