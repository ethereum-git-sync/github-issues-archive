{
  "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4209",
  "repository_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts",
  "labels_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4209/labels{/name}",
  "comments_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4209/comments",
  "events_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4209/events",
  "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/4209",
  "id": 1693579844,
  "node_id": "I_kwDOA9tCBs5k8fpE",
  "number": 4209,
  "title": "Add internal view method for _baseURI in ERC1155URIStorage.sol",
  "user": {
    "login": "PierDev",
    "id": 82221632,
    "node_id": "MDQ6VXNlcjgyMjIxNjMy",
    "avatar_url": "https://avatars.githubusercontent.com/u/82221632?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/PierDev",
    "html_url": "https://github.com/PierDev",
    "followers_url": "https://api.github.com/users/PierDev/followers",
    "following_url": "https://api.github.com/users/PierDev/following{/other_user}",
    "gists_url": "https://api.github.com/users/PierDev/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/PierDev/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/PierDev/subscriptions",
    "organizations_url": "https://api.github.com/users/PierDev/orgs",
    "repos_url": "https://api.github.com/users/PierDev/repos",
    "events_url": "https://api.github.com/users/PierDev/events{/privacy}",
    "received_events_url": "https://api.github.com/users/PierDev/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 4,
  "created_at": "2023-05-03T07:59:26Z",
  "updated_at": "2023-12-12T18:42:59Z",
  "closed_at": null,
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "**🧐 Motivation**\r\nHi, My contract inherit from ERC1155URIStorage.\r\nIn _baseURI I store the ipfs access url: \"https://ipfs.io/ipfs/\" and then in _tokenURIs, all CID of my token.\r\nBut on top of that, all tokens need to access to an other ipfs resource, and, because I can't access to _baseURI, I have to store \"https://ipfs.io/ipfs/\" a new time?\r\n\r\n**📝 Details**\r\nA solution could be to add this view function add the end of the contract.\r\n /*\r\n @dev Get `_baseURI` \r\n */\r\nfunction _getBaseURI() internal view returns (string memory) {\r\n    return _baseURI;\r\n}\r\n\r\nIt can be useful for other use case, is not risky because it's only a view method ...",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4209/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4209/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1532701083",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/4209#issuecomment-1532701083",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4209",
    "id": 1532701083,
    "node_id": "IC_kwDOA9tCBs5bWymb",
    "user": {
      "login": "Amxx",
      "id": 2432299,
      "node_id": "MDQ6VXNlcjI0MzIyOTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2432299?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Amxx",
      "html_url": "https://github.com/Amxx",
      "followers_url": "https://api.github.com/users/Amxx/followers",
      "following_url": "https://api.github.com/users/Amxx/following{/other_user}",
      "gists_url": "https://api.github.com/users/Amxx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Amxx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Amxx/subscriptions",
      "organizations_url": "https://api.github.com/users/Amxx/orgs",
      "repos_url": "https://api.github.com/users/Amxx/repos",
      "events_url": "https://api.github.com/users/Amxx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Amxx/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-05-03T09:18:21Z",
    "updated_at": "2023-05-03T09:18:21Z",
    "author_association": "COLLABORATOR",
    "body": "Hello @PierDev \r\n\r\nI don't understand this part \r\n> But on top of that, all tokens need to access to an other ipfs resource\r\n\r\nCan you give more details about that part.\r\n\r\nAlso, please keep in mind that using a centralised web2 provider for IPFS is not recommanded. It is recommanded to do use `ipfs://<ipfshash>` instead",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1532701083/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1533141279",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/4209#issuecomment-1533141279",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4209",
    "id": 1533141279,
    "node_id": "IC_kwDOA9tCBs5bYeEf",
    "user": {
      "login": "PierDev",
      "id": 82221632,
      "node_id": "MDQ6VXNlcjgyMjIxNjMy",
      "avatar_url": "https://avatars.githubusercontent.com/u/82221632?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/PierDev",
      "html_url": "https://github.com/PierDev",
      "followers_url": "https://api.github.com/users/PierDev/followers",
      "following_url": "https://api.github.com/users/PierDev/following{/other_user}",
      "gists_url": "https://api.github.com/users/PierDev/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/PierDev/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/PierDev/subscriptions",
      "organizations_url": "https://api.github.com/users/PierDev/orgs",
      "repos_url": "https://api.github.com/users/PierDev/repos",
      "events_url": "https://api.github.com/users/PierDev/events{/privacy}",
      "received_events_url": "https://api.github.com/users/PierDev/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-05-03T14:37:00Z",
    "updated_at": "2023-05-03T14:39:09Z",
    "author_association": "NONE",
    "body": "Hi @Amxx,\r\nThanks for your quick response!\r\nHere are some details to clarify, I hope it's understandable:\r\nIn my use, all tokens give access to a resource, represented by an IPFS link (it can be a text for example) which will be accessible by a method (getText in the example)\r\nBut they have different \"levels\", gold, silver, iron etc... And therefore a different \"presentation\" image.\r\nSo I have:\r\n_baseURI: \"ipfs://\" //thanks for the info\r\n_tokenURIs = [\"Q1...\", \"Q2...\"...]\r\nand\r\ncommon_URI: \"ipfs://QCommon...\"\r\n\r\nFor my contract I modified ERC1155 URI Storage.sol by adding this so that i do not have to store \"ipfs://\" an other time:\r\n`    /**\r\n     * @dev Get _baseURI \r\n     */\r\n    function _getBaseURI() internal view returns (string memory) {\r\n        return _baseURI;\r\n    }\r\n`\r\nMaybe it can be useful for other projects, especialy if it's a biggest URI?",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1533141279/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1558893850",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/4209#issuecomment-1558893850",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4209",
    "id": 1558893850,
    "node_id": "IC_kwDOA9tCBs5c6tUa",
    "user": {
      "login": "Amxx",
      "id": 2432299,
      "node_id": "MDQ6VXNlcjI0MzIyOTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2432299?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Amxx",
      "html_url": "https://github.com/Amxx",
      "followers_url": "https://api.github.com/users/Amxx/followers",
      "following_url": "https://api.github.com/users/Amxx/following{/other_user}",
      "gists_url": "https://api.github.com/users/Amxx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Amxx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Amxx/subscriptions",
      "organizations_url": "https://api.github.com/users/Amxx/orgs",
      "repos_url": "https://api.github.com/users/Amxx/repos",
      "events_url": "https://api.github.com/users/Amxx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Amxx/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-05-23T09:24:14Z",
    "updated_at": "2023-05-23T09:27:02Z",
    "author_association": "COLLABORATOR",
    "body": "Hello again\r\n\r\n2 things:\r\n- I still don't understand why \"_getBaseURI\" is needed. My understanding is that you can do\r\n  - `_setBaseURI(\"ipfs://\")`\r\n  - `_setURI(1, \"Q1...\")` \r\n  - `_setURI(2, \"Q2...\")`\r\n  - ...\r\n  \r\n---\r\n\r\nAlso, you might be missing an obvious optimization here:\r\n\r\nYou can create a folder (lets call it \"metadata\" for the sake of the explanation, actual name is irrelevant). In this folder you would put the files (or folders) that correspond to your tokens metadata\r\n```\r\nmetadata/1\r\nmetadata/2\r\nmetadata/3\r\n...\r\nmetadata/X\r\n```\r\nIf you \"upload\" this folder to IPFS, the folder will have a hash of its own (lets call that hash `<Qmetadata>`)\r\nYou can then access any of the token info by looking up the token id. For example: `ipfs://<Qmetadata>/3`\r\n\r\nThis means you could use a simple ERC1155Uri (not the expensive uri storage) by setting the \"gobal\" uri to `ipfs://<Qmetadata>/{id}` ([see this](https://eips.ethereum.org/EIPS/eip-1155#metadata))\r\n\r\n**Example:**\r\n[This ERC721 contract](https://etherscan.io/address/0x7ffd2171b10c134ca9de94df09d4f9adfeb096f3#code) (its an implementation for an upgradeable design) does:\r\n```solidity\r\n  function _baseURI() internal view virtual override returns (string memory) {\r\n    return string(bytes.concat(\"ipfs://\", bytes(_ipfsHash), \"/\"));\r\n  }\r\n```\r\nand then ERC721 does\r\n```solidity\r\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\r\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\r\n\r\n        string memory baseURI = _baseURI();\r\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\r\n    }\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1558893850/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1852609508",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/4209#issuecomment-1852609508",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4209",
    "id": 1852609508,
    "node_id": "IC_kwDOA9tCBs5ubJPk",
    "user": {
      "login": "astorAtUST",
      "id": 114920027,
      "node_id": "U_kgDOBtmKWw",
      "avatar_url": "https://avatars.githubusercontent.com/u/114920027?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/astorAtUST",
      "html_url": "https://github.com/astorAtUST",
      "followers_url": "https://api.github.com/users/astorAtUST/followers",
      "following_url": "https://api.github.com/users/astorAtUST/following{/other_user}",
      "gists_url": "https://api.github.com/users/astorAtUST/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/astorAtUST/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/astorAtUST/subscriptions",
      "organizations_url": "https://api.github.com/users/astorAtUST/orgs",
      "repos_url": "https://api.github.com/users/astorAtUST/repos",
      "events_url": "https://api.github.com/users/astorAtUST/events{/privacy}",
      "received_events_url": "https://api.github.com/users/astorAtUST/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-12-12T18:42:58Z",
    "updated_at": "2023-12-12T18:42:58Z",
    "author_association": "NONE",
    "body": "Hi and apologies if it comes off-topic. I've been reviewing this issue as it seemed valid for an implementation I was doing, but, with current implementation of v5.x, it seems that the _exists(tokenId) modifier is no longer available.\r\n\r\nIs there any other recommended check to ensure token metadata available or it does need to be implemented adhoc since now?",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1852609508/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
