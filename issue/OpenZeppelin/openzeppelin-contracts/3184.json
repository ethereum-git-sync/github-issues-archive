{
  "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3184",
  "repository_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts",
  "labels_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3184/labels{/name}",
  "comments_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3184/comments",
  "events_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3184/events",
  "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3184",
  "id": 1131231578,
  "node_id": "I_kwDOA9tCBs5DbTla",
  "number": 3184,
  "title": "GovernorPreventLateQuorum extends the proposalDeadline() as expected, but the proposal is not active past the original voteEnd deadline",
  "user": {
    "login": "DINDX",
    "id": 84874430,
    "node_id": "MDQ6VXNlcjg0ODc0NDMw",
    "avatar_url": "https://avatars.githubusercontent.com/u/84874430?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/DINDX",
    "html_url": "https://github.com/DINDX",
    "followers_url": "https://api.github.com/users/DINDX/followers",
    "following_url": "https://api.github.com/users/DINDX/following{/other_user}",
    "gists_url": "https://api.github.com/users/DINDX/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/DINDX/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/DINDX/subscriptions",
    "organizations_url": "https://api.github.com/users/DINDX/orgs",
    "repos_url": "https://api.github.com/users/DINDX/repos",
    "events_url": "https://api.github.com/users/DINDX/events{/privacy}",
    "received_events_url": "https://api.github.com/users/DINDX/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 6,
  "created_at": "2022-02-10T23:28:11Z",
  "updated_at": "2022-02-13T14:09:28Z",
  "closed_at": "2022-02-11T17:10:23Z",
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "<!-- Briefly describe the issue you're experiencing. Tell us what you were trying to do and what happened instead. -->\r\nHello, I believe I have found a bug with the GovernorPreventLateQuorum contract. In my Mocha/Chai tests I first created a proposal and saved the default proposalDeadline() block number. Just before the default voting period was over, I cast a vote that exceeded the quorum set, and when I called proposalDeadline() again after this it showed the expected extension of lateQuorumVoteExtension() being added to the default deadline block number. When I mined blocks past the original proposalDeadline() block number and tried to castVote() in the extension period, I kept getting the error: \"Governor: vote not currently active\". \r\n\r\n<!-- Remember, this is not a place to ask for help debugging code. For that, we welcome you in the OpenZeppelin Community Forum: https://forum.openzeppelin.com/. -->\r\n\r\n**üíª Environment**\r\nHardhat & Waffle\r\n\r\n<!-- Tell us what version of OpenZeppelin Contracts you're using, and how you're using it: Truffle, Remix, etc. -->\r\n\r\n**üìù Details**\r\nOpenZeppelin npm contracts version 4.4.1 (I copied GovernorPreventLateQuorum to the node_modules directory manually)\r\n\r\n<!-- Describe the problem you have been experiencing in more detail. Include as much information as you think is relevant. Keep in mind that transactions can fail for many reasons; context is key here. -->\r\n\r\n**üî¢ Code to reproduce bug**\r\n\"Governor: vote not currently active\". This error was due to GovernorPreventLateQuorum's overridden _castVotes() function calling that of Governor.sol via this line:\r\n`uint256 result = super._castVote(proposalId, account, support, reason);`\r\nThis then triggers the following line in super._castVote():\r\n`require(state(proposalId) == ProposalState.Active, \"Governor: vote not currently active\");`\r\nWhen looking at what causes the failure, state() makes comparisons with the deadline from proposalDeadline(),\r\n`uint256 deadline = proposalDeadline(proposalId);`\r\nWhere proposalDeadline() gets the deadline value from the ProposalCore struct from the mapping _proposals:\r\n`return _proposals[proposalId].voteEnd.getDeadline();`\r\nThis appears to use the default deadline value to end the proposal on, not the updated value set in GovernorPreventLateQuorum as follows:\r\n`Timers.BlockNumber storage extendedDeadline = _extendedDeadlines[proposalId];`\r\n\r\nI am still learning your contracts so I may be missing something here, in which case sorry! But if not, I have found a potential fix for this that now works as expected in my own testing. I copied state() from Governor into GovernorPreventLateQuorum, adding the following check to see if an extension has been created. If so, then use that and if not use the default deadline:\r\n```\r\n    uint256 deadline;\r\n        if (_extendedDeadlines[proposalId].getDeadline() > 0) {\r\n            deadline = _extendedDeadlines[proposalId].getDeadline();\r\n        } else {\r\n            deadline = proposalDeadline(proposalId);\r\n        }\r\n```\r\nI combined the two _castVote() functions into one function in GovernorPreventLateQuorum:\r\n```\r\n    function _castVote(\r\n        uint256 proposalId,\r\n        address account,\r\n        uint8 support,\r\n        string memory reason\r\n    ) internal virtual override returns (uint256) {\r\n        ProposalCore storage proposal = _proposals[proposalId];                                                                                                             \r\n        require(state(proposalId) == ProposalState.Active, \"Governor: vote not currently active\");\r\n\r\n        uint256 weight = getVotes(account, proposal.voteStart.getDeadline());\r\n        _countVote(proposalId, account, support, weight);\r\n\r\n        emit VoteCast(account, proposalId, support, weight, reason);\r\n\r\n        Timers.BlockNumber storage extendedDeadline = _extendedDeadlines[proposalId];\r\n\r\n        if (extendedDeadline.isUnset() && _quorumReached(proposalId)) {\r\n            uint64 extendedDeadlineValue = block.number.toUint64() + lateQuorumVoteExtension();\r\n\r\n            if (extendedDeadlineValue > proposalDeadline(proposalId)) {\r\n                emit ProposalExtended(proposalId, extendedDeadlineValue);\r\n            }\r\n\r\n            extendedDeadline.setDeadline(extendedDeadlineValue);\r\n        }\r\n\r\n        return weight;\r\n    }\r\n```\r\n\r\nTo access _proposals from Governor I then converted the mapping to public:\r\n`mapping(uint256 => ProposalCore) public _proposals;`\r\nLastly, I overrode state() in my own governor file, as _castVote() was already overridden by GovernorPreventLateQuorum. These changes allow my tests to pass as expected. I would like to create a pull request with these changes , if you would like me to do so?\r\n<!-- We will be able to better help if you provide a minimal example that triggers the bug. -->\r\n",
  "closed_by": {
    "login": "frangio",
    "id": 481465,
    "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
    "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/frangio",
    "html_url": "https://github.com/frangio",
    "followers_url": "https://api.github.com/users/frangio/followers",
    "following_url": "https://api.github.com/users/frangio/following{/other_user}",
    "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
    "organizations_url": "https://api.github.com/users/frangio/orgs",
    "repos_url": "https://api.github.com/users/frangio/repos",
    "events_url": "https://api.github.com/users/frangio/events{/privacy}",
    "received_events_url": "https://api.github.com/users/frangio/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3184/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3184/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1036342702",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3184#issuecomment-1036342702",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3184",
    "id": 1036342702,
    "node_id": "IC_kwDOA9tCBs49xVWu",
    "user": {
      "login": "Amxx",
      "id": 2432299,
      "node_id": "MDQ6VXNlcjI0MzIyOTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2432299?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Amxx",
      "html_url": "https://github.com/Amxx",
      "followers_url": "https://api.github.com/users/Amxx/followers",
      "following_url": "https://api.github.com/users/Amxx/following{/other_user}",
      "gists_url": "https://api.github.com/users/Amxx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Amxx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Amxx/subscriptions",
      "organizations_url": "https://api.github.com/users/Amxx/orgs",
      "repos_url": "https://api.github.com/users/Amxx/repos",
      "events_url": "https://api.github.com/users/Amxx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Amxx/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-02-11T15:38:53Z",
    "updated_at": "2022-02-11T15:38:53Z",
    "author_association": "COLLABORATOR",
    "body": "Hello @DINDX and thank you for this issue that we absolutely need to investigate!\r\n\r\nYou say:\r\n> When looking at what causes the failure, state() makes comparisons with the deadline from proposalDeadline(),\r\n> `uint256 deadline = proposalDeadline(proposalId);`\r\n> Where proposalDeadline() gets the deadline value from the ProposalCore struct from the mapping _proposals:\r\n> return _proposals[proposalId].voteEnd.getDeadline();\r\n\r\nIf you use the `GovernorPreventLateQuorum` module, the `proposalDeadline` should be overridden: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/governance/extensions/GovernorPreventLateQuorum.sol#L46-L48\r\n\r\nThis should use the `_extendedDeadlines[proposalId]` (if set) to extend the duration and allow voting.\r\n\r\nI'll have check to see if our tests missed this, and write additional tests to confirm that.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1036342702/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1036344975",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3184#issuecomment-1036344975",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3184",
    "id": 1036344975,
    "node_id": "IC_kwDOA9tCBs49xV6P",
    "user": {
      "login": "Amxx",
      "id": 2432299,
      "node_id": "MDQ6VXNlcjI0MzIyOTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2432299?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Amxx",
      "html_url": "https://github.com/Amxx",
      "followers_url": "https://api.github.com/users/Amxx/followers",
      "following_url": "https://api.github.com/users/Amxx/following{/other_user}",
      "gists_url": "https://api.github.com/users/Amxx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Amxx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Amxx/subscriptions",
      "organizations_url": "https://api.github.com/users/Amxx/orgs",
      "repos_url": "https://api.github.com/users/Amxx/repos",
      "events_url": "https://api.github.com/users/Amxx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Amxx/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-02-11T15:41:20Z",
    "updated_at": "2022-02-11T15:41:20Z",
    "author_association": "COLLABORATOR",
    "body": "This test is supposed to check that it is still possible to vote after the vote original deadline if it was extended:\r\nhttps://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/test/governance/extensions/GovernorPreventLateQuorum.test.js#L136-L196\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1036344975/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1036347301",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3184#issuecomment-1036347301",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3184",
    "id": 1036347301,
    "node_id": "IC_kwDOA9tCBs49xWel",
    "user": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-02-11T15:43:57Z",
    "updated_at": "2022-02-11T15:43:57Z",
    "author_association": "MEMBER",
    "body": "@DINDX Can you share the source of the full contract that you tested and didn't behave as expected?",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1036347301/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1036350001",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3184#issuecomment-1036350001",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3184",
    "id": 1036350001,
    "node_id": "IC_kwDOA9tCBs49xXIx",
    "user": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-02-11T15:46:48Z",
    "updated_at": "2022-02-11T15:46:48Z",
    "author_association": "MEMBER",
    "body": "> OpenZeppelin npm contracts version 4.4.1 **(I copied GovernorPreventLateQuorum to the node_modules directory manually)**\r\n\r\nI'm pretty sure this is the source of the issue. You can't mix different versions of the contract. Please install the latest version from npm and run your tests again.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1036350001/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1036399016",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3184#issuecomment-1036399016",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3184",
    "id": 1036399016,
    "node_id": "IC_kwDOA9tCBs49xjGo",
    "user": {
      "login": "DINDX",
      "id": 84874430,
      "node_id": "MDQ6VXNlcjg0ODc0NDMw",
      "avatar_url": "https://avatars.githubusercontent.com/u/84874430?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/DINDX",
      "html_url": "https://github.com/DINDX",
      "followers_url": "https://api.github.com/users/DINDX/followers",
      "following_url": "https://api.github.com/users/DINDX/following{/other_user}",
      "gists_url": "https://api.github.com/users/DINDX/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/DINDX/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/DINDX/subscriptions",
      "organizations_url": "https://api.github.com/users/DINDX/orgs",
      "repos_url": "https://api.github.com/users/DINDX/repos",
      "events_url": "https://api.github.com/users/DINDX/events{/privacy}",
      "received_events_url": "https://api.github.com/users/DINDX/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-02-11T16:40:07Z",
    "updated_at": "2022-02-11T16:40:07Z",
    "author_association": "NONE",
    "body": "> > OpenZeppelin npm contracts version 4.4.1 **(I copied GovernorPreventLateQuorum to the node_modules directory manually)**\r\n> \r\n> I'm pretty sure this is the source of the issue. You can't mix different versions of the contract. Please install the latest version from npm and run your tests again.\r\n\r\nI am so sorry for wasting your time @Amxx and @frangio, this was in fact my issue and I should have figured it out myself. All of my tests are working perfectly now with all contracts on version 4.5.0. I was not aware until yesterday that there was a separate way to download the contracts still in the 'draft' phase through npm- which I saw in a thread- though I should have known.\r\n\r\n> If you use the `GovernorPreventLateQuorum` module, the `proposalDeadline` should be overridden: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/governance/extensions/GovernorPreventLateQuorum.sol#L46-L48\r\n> \r\n> This should use the `_extendedDeadlines[proposalId]` (if set) to extend the duration and allow voting.\r\n> \r\n> I'll have check to see if our tests missed this, and write additional tests to confirm that.\r\n\r\nI somehow overlooked this even though I had acknowledged it in the past, you are absolutely correct that my issue shouldn't have existed if I would have downloaded your contracts properly through npm.\r\n\r\n> This test is supposed to check that it is still possible to vote after the vote original deadline if it was extended:\r\n> https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/test/governance/extensions/GovernorPreventLateQuorum.test.js#L136-L196\r\n\r\nI had looked through this test and saw that it was testing the same thing that I was, but I do not use test-helpers so I wrongly thought that perhaps there was some issue with that. \r\n\r\nAgain, my apologies to both of you @Amxx and @frangio, and thank you very much for the quick responses. My issue is solved.\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1036399016/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1038143867",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3184#issuecomment-1038143867",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3184",
    "id": 1038143867,
    "node_id": "IC_kwDOA9tCBs494NF7",
    "user": {
      "login": "Amxx",
      "id": 2432299,
      "node_id": "MDQ6VXNlcjI0MzIyOTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2432299?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Amxx",
      "html_url": "https://github.com/Amxx",
      "followers_url": "https://api.github.com/users/Amxx/followers",
      "following_url": "https://api.github.com/users/Amxx/following{/other_user}",
      "gists_url": "https://api.github.com/users/Amxx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Amxx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Amxx/subscriptions",
      "organizations_url": "https://api.github.com/users/Amxx/orgs",
      "repos_url": "https://api.github.com/users/Amxx/repos",
      "events_url": "https://api.github.com/users/Amxx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Amxx/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-02-13T14:09:28Z",
    "updated_at": "2022-02-13T14:09:28Z",
    "author_association": "COLLABORATOR",
    "body": "Just wanted to say that it's ok, and that you don't have to apologize.\r\n\r\nIt's actually valuable for us to know what the process (good or wrong) or our users are, so we can improve documentation.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1038143867/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
