{
  "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3491",
  "repository_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts",
  "labels_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3491/labels{/name}",
  "comments_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3491/comments",
  "events_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3491/events",
  "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3491",
  "id": 1275320988,
  "node_id": "I_kwDOA9tCBs5MA9qc",
  "number": 3491,
  "title": "Add a function for shrinking memory arrays",
  "user": {
    "login": "CodeSandwich",
    "id": 26183680,
    "node_id": "MDQ6VXNlcjI2MTgzNjgw",
    "avatar_url": "https://avatars.githubusercontent.com/u/26183680?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/CodeSandwich",
    "html_url": "https://github.com/CodeSandwich",
    "followers_url": "https://api.github.com/users/CodeSandwich/followers",
    "following_url": "https://api.github.com/users/CodeSandwich/following{/other_user}",
    "gists_url": "https://api.github.com/users/CodeSandwich/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/CodeSandwich/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/CodeSandwich/subscriptions",
    "organizations_url": "https://api.github.com/users/CodeSandwich/orgs",
    "repos_url": "https://api.github.com/users/CodeSandwich/repos",
    "events_url": "https://api.github.com/users/CodeSandwich/events{/privacy}",
    "received_events_url": "https://api.github.com/users/CodeSandwich/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 13,
  "created_at": "2022-06-17T17:58:49Z",
  "updated_at": "2022-06-24T00:34:32Z",
  "closed_at": "2022-06-23T20:25:29Z",
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "**üßê Motivation**\r\nSolidity in-memory arrays can't grow, because reallocation would be expensive and difficult to perform safely. But they can safely shrink. \r\n\r\nQuite often a memory array needs to be passed around with a `length` variable to simulate a dynamic data structure. In some cases it's only ever decreasing, e.g. when items are popped and consumed. This is both inefficient and dangerous, because Solidity only checks `array.length` when sanity-checking accessed indexes, it doesn't know about the other variable.\r\n\r\n**üìù Details**\r\nAdd a function to `library Arrays`:\r\n```solidity\r\nfunction shrinkArray(uint256[] memory array, uint newLength) internal pure returns (uint256[] memory) {\r\n    require(newLength <= array.length, \"Array: length after shrinking larger than before\");\r\n    /// @solidity memory-safe-assembly\r\n    assembly {\r\n        mstore(array, newLength)\r\n    }\r\n    return array;\r\n}\r\n```\r\n\r\nEdit:\r\nI think that `shrinkArray` is too verbose, just `shrink` would be a better name, it'd be called by `Array.shrink(myArray, len);` or when `using Array for uint256[]`, just by `myArray.shrink(len)`.",
  "closed_by": {
    "login": "CodeSandwich",
    "id": 26183680,
    "node_id": "MDQ6VXNlcjI2MTgzNjgw",
    "avatar_url": "https://avatars.githubusercontent.com/u/26183680?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/CodeSandwich",
    "html_url": "https://github.com/CodeSandwich",
    "followers_url": "https://api.github.com/users/CodeSandwich/followers",
    "following_url": "https://api.github.com/users/CodeSandwich/following{/other_user}",
    "gists_url": "https://api.github.com/users/CodeSandwich/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/CodeSandwich/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/CodeSandwich/subscriptions",
    "organizations_url": "https://api.github.com/users/CodeSandwich/orgs",
    "repos_url": "https://api.github.com/users/CodeSandwich/repos",
    "events_url": "https://api.github.com/users/CodeSandwich/events{/privacy}",
    "received_events_url": "https://api.github.com/users/CodeSandwich/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3491/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3491/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1159534942",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3491#issuecomment-1159534942",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3491",
    "id": 1159534942,
    "node_id": "IC_kwDOA9tCBs5FHRle",
    "user": {
      "login": "Amxx",
      "id": 2432299,
      "node_id": "MDQ6VXNlcjI0MzIyOTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2432299?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Amxx",
      "html_url": "https://github.com/Amxx",
      "followers_url": "https://api.github.com/users/Amxx/followers",
      "following_url": "https://api.github.com/users/Amxx/following{/other_user}",
      "gists_url": "https://api.github.com/users/Amxx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Amxx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Amxx/subscriptions",
      "organizations_url": "https://api.github.com/users/Amxx/orgs",
      "repos_url": "https://api.github.com/users/Amxx/repos",
      "events_url": "https://api.github.com/users/Amxx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Amxx/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-06-18T18:42:04Z",
    "updated_at": "2022-06-18T18:42:04Z",
    "author_association": "COLLABORATOR",
    "body": "Hello @CodeSandwich \r\n\r\nDo you have any concrete examples of functions/usecases that need this feature?",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1159534942/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1160741124",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3491#issuecomment-1160741124",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3491",
    "id": 1160741124,
    "node_id": "IC_kwDOA9tCBs5FL4EE",
    "user": {
      "login": "CodeSandwich",
      "id": 26183680,
      "node_id": "MDQ6VXNlcjI2MTgzNjgw",
      "avatar_url": "https://avatars.githubusercontent.com/u/26183680?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CodeSandwich",
      "html_url": "https://github.com/CodeSandwich",
      "followers_url": "https://api.github.com/users/CodeSandwich/followers",
      "following_url": "https://api.github.com/users/CodeSandwich/following{/other_user}",
      "gists_url": "https://api.github.com/users/CodeSandwich/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CodeSandwich/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CodeSandwich/subscriptions",
      "organizations_url": "https://api.github.com/users/CodeSandwich/orgs",
      "repos_url": "https://api.github.com/users/CodeSandwich/repos",
      "events_url": "https://api.github.com/users/CodeSandwich/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CodeSandwich/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-06-20T18:35:51Z",
    "updated_at": "2022-06-20T18:43:58Z",
    "author_association": "CONTRIBUTOR",
    "body": "Sure!\r\n\r\nTake a look here: https://github.com/radicle-dev/drips-contracts/blob/189d4bfefa633733576303a8d01b58e3ea8f412e/src/Drips.sol#L363 We're consuming items from a memory array. The array is allocated to hold a certain number of items, but usually it's not entirely filled, so the consuming function needs a `length` parameter. With `shrinkArray` we could shrink out the unused entries and rely on the array's `.length` instead of a separate variable.\r\n\r\nAnother example from the same contract: https://github.com/radicle-dev/drips-contracts/blob/189d4bfefa633733576303a8d01b58e3ea8f412e/src/Drips.sol#L445 We're iterating 2 memory arrays, `currReceivers` and `newReceivers`, in a lockstep. They're sorted and we're trying to find matching items from each of the lists to consume them together or separately if there's no match. That requires maintaining 2 variables: `currIdx` and `newIdx`, which act as iterators, they tell us which item from each of the arrays is being consumed. Each of them must be checked against the length of the respective array to prevent out of bonds reads. This function is also constantly fighting the stack depth, there are too many items. With `shrinkArray` iteration could be done in reverse and these variables could be dropped entirely, all we'd need to do is check if `.length == 0`. It'd be also impossible to accidentally ready an already consumed item.\r\n\r\nI know that they are NOT working on `uint256`s, but with Solidity's current lack of generics I find myself sometimes copy-pasting code from OZ and updating the code for my types. That'd be a good template even if types wouldn't match.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1160741124/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1160746425",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3491#issuecomment-1160746425",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3491",
    "id": 1160746425,
    "node_id": "IC_kwDOA9tCBs5FL5W5",
    "user": {
      "login": "CodeSandwich",
      "id": 26183680,
      "node_id": "MDQ6VXNlcjI2MTgzNjgw",
      "avatar_url": "https://avatars.githubusercontent.com/u/26183680?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CodeSandwich",
      "html_url": "https://github.com/CodeSandwich",
      "followers_url": "https://api.github.com/users/CodeSandwich/followers",
      "following_url": "https://api.github.com/users/CodeSandwich/following{/other_user}",
      "gists_url": "https://api.github.com/users/CodeSandwich/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CodeSandwich/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CodeSandwich/subscriptions",
      "organizations_url": "https://api.github.com/users/CodeSandwich/orgs",
      "repos_url": "https://api.github.com/users/CodeSandwich/repos",
      "events_url": "https://api.github.com/users/CodeSandwich/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CodeSandwich/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-06-20T18:43:27Z",
    "updated_at": "2022-06-20T19:17:33Z",
    "author_association": "CONTRIBUTOR",
    "body": "When I'm thinking about it, a function `popArray` could be s very useful tool built on top :thinking: \r\n\r\n```solidity\r\nfunction popArray(uint256[] memory array) internal pure returns (uint256 value) {\r\n    require(array.length > 0, \"Array: zero length arrays can't be popped\");\r\n    uint256 newLen = array.length - 1;\r\n    value = array[newLen];\r\n    shrinkArray(array, newLen);\r\n}\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1160746425/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1161676592",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3491#issuecomment-1161676592",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3491",
    "id": 1161676592,
    "node_id": "IC_kwDOA9tCBs5FPccw",
    "user": {
      "login": "Amxx",
      "id": 2432299,
      "node_id": "MDQ6VXNlcjI0MzIyOTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2432299?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Amxx",
      "html_url": "https://github.com/Amxx",
      "followers_url": "https://api.github.com/users/Amxx/followers",
      "following_url": "https://api.github.com/users/Amxx/following{/other_user}",
      "gists_url": "https://api.github.com/users/Amxx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Amxx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Amxx/subscriptions",
      "organizations_url": "https://api.github.com/users/Amxx/orgs",
      "repos_url": "https://api.github.com/users/Amxx/repos",
      "events_url": "https://api.github.com/users/Amxx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Amxx/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-06-21T12:22:44Z",
    "updated_at": "2022-06-21T12:22:44Z",
    "author_association": "COLLABORATOR",
    "body": "> The array is allocated to hold a certain number of items, but usually it's not entirely filled, so the consuming function needs a `length` parameter. With `shrinkArray` we could shrink out the unused entries and rely on the array's `.length` instead of a separate variable.\r\n\r\nOnce shrunk, you would not now it it can be expanded back though :/\r\nAlso, storing the length in a variable is possibly cheaper than having to mstore it and mload it.\r\nIts definitely a design decision, but IMO having a length param is not a bad thing.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1161676592/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1161679068",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3491#issuecomment-1161679068",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3491",
    "id": 1161679068,
    "node_id": "IC_kwDOA9tCBs5FPdDc",
    "user": {
      "login": "Amxx",
      "id": 2432299,
      "node_id": "MDQ6VXNlcjI0MzIyOTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2432299?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Amxx",
      "html_url": "https://github.com/Amxx",
      "followers_url": "https://api.github.com/users/Amxx/followers",
      "following_url": "https://api.github.com/users/Amxx/following{/other_user}",
      "gists_url": "https://api.github.com/users/Amxx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Amxx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Amxx/subscriptions",
      "organizations_url": "https://api.github.com/users/Amxx/orgs",
      "repos_url": "https://api.github.com/users/Amxx/repos",
      "events_url": "https://api.github.com/users/Amxx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Amxx/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-06-21T12:24:59Z",
    "updated_at": "2022-06-21T12:24:59Z",
    "author_association": "COLLABORATOR",
    "body": "> When I'm thinking about it, a function `popArray` could be s very useful tool built on top thinking\r\n> \r\n> ```solidity\r\n> function popArray(uint256[] memory array) internal pure returns (uint256 value) {\r\n>     require(array.length > 0, \"Array: zero length arrays can't be popped\");\r\n>     uint256 newLen = array.length - 1;\r\n>     value = array[newLen];\r\n>     shrinkArray(array, newLen);\r\n> }\r\n> ```\r\n\r\nBut then you can't push ... and you are losing track of memory pretty fast :/\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1161679068/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1161684812",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3491#issuecomment-1161684812",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3491",
    "id": 1161684812,
    "node_id": "IC_kwDOA9tCBs5FPedM",
    "user": {
      "login": "Amxx",
      "id": 2432299,
      "node_id": "MDQ6VXNlcjI0MzIyOTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2432299?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Amxx",
      "html_url": "https://github.com/Amxx",
      "followers_url": "https://api.github.com/users/Amxx/followers",
      "following_url": "https://api.github.com/users/Amxx/following{/other_user}",
      "gists_url": "https://api.github.com/users/Amxx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Amxx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Amxx/subscriptions",
      "organizations_url": "https://api.github.com/users/Amxx/orgs",
      "repos_url": "https://api.github.com/users/Amxx/repos",
      "events_url": "https://api.github.com/users/Amxx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Amxx/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-06-21T12:30:09Z",
    "updated_at": "2022-06-21T12:30:09Z",
    "author_association": "COLLABORATOR",
    "body": "I'm honestly not comfortable with this idea of using the array length as a solution to avoid an \"iterator\" variable, mostly because it loses data that can't be recovered, and possibly because it might be more expensive (we should benchmark that).\r\n\r\nI'm curious what @frangio thinks.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1161684812/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1161728811",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3491#issuecomment-1161728811",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3491",
    "id": 1161728811,
    "node_id": "IC_kwDOA9tCBs5FPpMr",
    "user": {
      "login": "CodeSandwich",
      "id": 26183680,
      "node_id": "MDQ6VXNlcjI2MTgzNjgw",
      "avatar_url": "https://avatars.githubusercontent.com/u/26183680?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CodeSandwich",
      "html_url": "https://github.com/CodeSandwich",
      "followers_url": "https://api.github.com/users/CodeSandwich/followers",
      "following_url": "https://api.github.com/users/CodeSandwich/following{/other_user}",
      "gists_url": "https://api.github.com/users/CodeSandwich/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CodeSandwich/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CodeSandwich/subscriptions",
      "organizations_url": "https://api.github.com/users/CodeSandwich/orgs",
      "repos_url": "https://api.github.com/users/CodeSandwich/repos",
      "events_url": "https://api.github.com/users/CodeSandwich/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CodeSandwich/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-06-21T13:11:21Z",
    "updated_at": "2022-06-21T13:11:21Z",
    "author_association": "CONTRIBUTOR",
    "body": "I wrote a tiny benchmark of `shrinkArray` and the result is 82 gas:\r\n```solidity\r\nuint256[] memory array = new uint256[](123);\r\nuint gas = gasleft();\r\nshrinkArray(array, 122);\r\ngas -= gasleft();\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1161728811/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1161753658",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3491#issuecomment-1161753658",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3491",
    "id": 1161753658,
    "node_id": "IC_kwDOA9tCBs5FPvQ6",
    "user": {
      "login": "Amxx",
      "id": 2432299,
      "node_id": "MDQ6VXNlcjI0MzIyOTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2432299?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Amxx",
      "html_url": "https://github.com/Amxx",
      "followers_url": "https://api.github.com/users/Amxx/followers",
      "following_url": "https://api.github.com/users/Amxx/following{/other_user}",
      "gists_url": "https://api.github.com/users/Amxx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Amxx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Amxx/subscriptions",
      "organizations_url": "https://api.github.com/users/Amxx/orgs",
      "repos_url": "https://api.github.com/users/Amxx/repos",
      "events_url": "https://api.github.com/users/Amxx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Amxx/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-06-21T13:31:19Z",
    "updated_at": "2022-06-21T13:34:36Z",
    "author_association": "COLLABORATOR",
    "body": "That sounds like is a lot compared to updating an iterator.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1161753658/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1161837957",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3491#issuecomment-1161837957",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3491",
    "id": 1161837957,
    "node_id": "IC_kwDOA9tCBs5FQD2F",
    "user": {
      "login": "CodeSandwich",
      "id": 26183680,
      "node_id": "MDQ6VXNlcjI2MTgzNjgw",
      "avatar_url": "https://avatars.githubusercontent.com/u/26183680?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CodeSandwich",
      "html_url": "https://github.com/CodeSandwich",
      "followers_url": "https://api.github.com/users/CodeSandwich/followers",
      "following_url": "https://api.github.com/users/CodeSandwich/following{/other_user}",
      "gists_url": "https://api.github.com/users/CodeSandwich/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CodeSandwich/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CodeSandwich/subscriptions",
      "organizations_url": "https://api.github.com/users/CodeSandwich/orgs",
      "repos_url": "https://api.github.com/users/CodeSandwich/repos",
      "events_url": "https://api.github.com/users/CodeSandwich/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CodeSandwich/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-06-21T14:39:07Z",
    "updated_at": "2022-06-21T14:49:59Z",
    "author_association": "CONTRIBUTOR",
    "body": "Iteration is not the only use case, any place where an array is being drained or built in an excessively allocated region can benefit from shrinking and prevent out of bounds access.\r\n\r\nBut ok, let's go with the iteration use case. I've optimized the proposed `popArray`, it's still as safe to use as regular array access:\r\n```solidity\r\nfunction popArray(uint256[] memory array) internal pure returns (uint256 value) {\r\n    uint256 length = array.length;\r\n    require(length > 0, \"Array: zero length arrays can't be popped\");\r\n    /// @solidity memory-safe-assembly\r\n    assembly {\r\n        value := mload(add(array, mul(length, 32)))\r\n        mstore(array, sub(length, 1))\r\n    }\r\n}\r\n```\r\nHere's the benchmark, `array` :\r\n```solidity\r\nuint256[] memory array = new uint256[](100);\r\n\r\nuint gas1 = gasleft();\r\nfor(uint i = 0; i < array.length; i++) {\r\n    sum1 += array[i];\r\n}\r\ngas1 -= gasleft();\r\n\r\nuint256 sum2;\r\nuint gas2 = gasleft();\r\nwhile(array.length > 0) {\r\n    sum2 += popArray(array);\r\n}\r\ngas2 -= gasleft();\r\n```\r\nThe results are:\r\n- Iteration: 24442 gas\r\n- Popping 21131 gas\r\n\r\nWithout `mload` in Yul but with regular `value = array[length-1]` popping is 25831 gas, still very much comparable with 14 gas more per iteration.\r\n\r\nI don't want to sound like a maniac, it's not like my life depends on this feature. If you don't want to add it, then you won't and I don't have any saying in this matter. The only thing I'm arguing with here are the specific statements.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1161837957/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1162142324",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3491#issuecomment-1162142324",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3491",
    "id": 1162142324,
    "node_id": "IC_kwDOA9tCBs5FROJ0",
    "user": {
      "login": "Amxx",
      "id": 2432299,
      "node_id": "MDQ6VXNlcjI0MzIyOTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2432299?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Amxx",
      "html_url": "https://github.com/Amxx",
      "followers_url": "https://api.github.com/users/Amxx/followers",
      "following_url": "https://api.github.com/users/Amxx/following{/other_user}",
      "gists_url": "https://api.github.com/users/Amxx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Amxx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Amxx/subscriptions",
      "organizations_url": "https://api.github.com/users/Amxx/orgs",
      "repos_url": "https://api.github.com/users/Amxx/repos",
      "events_url": "https://api.github.com/users/Amxx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Amxx/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-06-21T18:14:34Z",
    "updated_at": "2022-06-21T19:10:59Z",
    "author_association": "COLLABORATOR",
    "body": "You are bechmarking a lot of extra stuff\r\n\r\n```\r\n        uint256[] memory array = new uint256[](100);\r\n        uint256 sum1;\r\n        uint256 sum2;\r\n        uint256 sum3;\r\n\r\n        uint gas1 = gasleft();\r\n        for(uint i = 0; i < array.length; i++) {\r\n            sum1 += array[i];\r\n        }\r\n        gas1 -= gasleft();\r\n\r\n        uint gas2 = gasleft();\r\n        unchecked {\r\n            uint length = array.length;\r\n            for(uint i = 0; i < length; i++) {\r\n                sum2 += array[i];\r\n            }\r\n        }\r\n        gas2 -= gasleft();\r\n\r\n        uint gas3 = gasleft();\r\n        while(array.length > 0) {\r\n            sum3 += popArray(array);\r\n        }\r\n        gas3 -= gasleft();\r\n```\r\n\r\nWith my compiler settings I get:\r\n- iteration: 24442\r\n- iteration with unchecked + caching: 11950\r\n- popping: 21431\r\n\r\n---\r\n\r\nThe basic iteration mload the length for every loop (and so does the popping) ... that cost a lot.\r\nThe basic iteration does safe math on `i++` and bound checks on `array[i]` ... that also cost a lot.\r\nthere two account for more than half of the total cost.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1162142324/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1164824552",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3491#issuecomment-1164824552",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3491",
    "id": 1164824552,
    "node_id": "IC_kwDOA9tCBs5Fbc_o",
    "user": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-06-23T20:13:11Z",
    "updated_at": "2022-06-23T20:13:11Z",
    "author_association": "MEMBER",
    "body": "I don't think this function is a good idea. It's not like shrinking the array will free up memory. For iteration I'm pretty sure using a variable in the stack will be more efficient. And for use cases that relate to allocating an array that is too large and then shrinking it to size, I think that's pretty advanced and it can be written using assembly. I'm also reluctant to manipulate memory in this way, I'd rather people did it explicitly using assembly so that they can be more aware of the risks.\r\n\r\n@Amxx Note that your benchmark is also using `unchecked` for `sum2 += array[i]` in your second case. This is messing up the comparison, it's not what we want to measure.\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1164824552/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1164841418",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3491#issuecomment-1164841418",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3491",
    "id": 1164841418,
    "node_id": "IC_kwDOA9tCBs5FbhHK",
    "user": {
      "login": "CodeSandwich",
      "id": 26183680,
      "node_id": "MDQ6VXNlcjI2MTgzNjgw",
      "avatar_url": "https://avatars.githubusercontent.com/u/26183680?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CodeSandwich",
      "html_url": "https://github.com/CodeSandwich",
      "followers_url": "https://api.github.com/users/CodeSandwich/followers",
      "following_url": "https://api.github.com/users/CodeSandwich/following{/other_user}",
      "gists_url": "https://api.github.com/users/CodeSandwich/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CodeSandwich/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CodeSandwich/subscriptions",
      "organizations_url": "https://api.github.com/users/CodeSandwich/orgs",
      "repos_url": "https://api.github.com/users/CodeSandwich/repos",
      "events_url": "https://api.github.com/users/CodeSandwich/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CodeSandwich/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-06-23T20:25:29Z",
    "updated_at": "2022-06-23T20:25:29Z",
    "author_association": "CONTRIBUTOR",
    "body": "That's fair, thank you for looking into this.\r\n\r\nWhat risks are you seeing? My main goal was to fool-proof non-full arrays, do you see a way for a user to harm themselves by using a function like this?",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1164841418/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1165044062",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3491#issuecomment-1165044062",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3491",
    "id": 1165044062,
    "node_id": "IC_kwDOA9tCBs5FcSle",
    "user": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-06-24T00:34:32Z",
    "updated_at": "2022-06-24T00:34:32Z",
    "author_association": "MEMBER",
    "body": "I'm concerned about the interaction with Solidity optimizations. I think that as long as the assembly block isn't marked \"memory-safe\" things should be fine, but there is some risk... See the recent compiler bug related to [memory and assembly](https://blog.soliditylang.org/2022/06/15/inline-assembly-memory-side-effects-bug/).",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1165044062/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
