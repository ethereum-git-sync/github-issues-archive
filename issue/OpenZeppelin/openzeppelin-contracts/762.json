{
  "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/762",
  "repository_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts",
  "labels_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/762/labels{/name}",
  "comments_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/762/comments",
  "events_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/762/events",
  "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/762",
  "id": 298639093,
  "node_id": "MDU6SXNzdWUyOTg2MzkwOTM=",
  "number": 762,
  "title": "ERC827Token's method `transfer` not properly overridden ",
  "user": {
    "login": "carloschida",
    "id": 979600,
    "node_id": "MDQ6VXNlcjk3OTYwMA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/979600?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/carloschida",
    "html_url": "https://github.com/carloschida",
    "followers_url": "https://api.github.com/users/carloschida/followers",
    "following_url": "https://api.github.com/users/carloschida/following{/other_user}",
    "gists_url": "https://api.github.com/users/carloschida/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/carloschida/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/carloschida/subscriptions",
    "organizations_url": "https://api.github.com/users/carloschida/orgs",
    "repos_url": "https://api.github.com/users/carloschida/repos",
    "events_url": "https://api.github.com/users/carloschida/events{/privacy}",
    "received_events_url": "https://api.github.com/users/carloschida/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 2,
  "created_at": "2018-02-20T15:35:24Z",
  "updated_at": "2018-02-22T18:40:33Z",
  "closed_at": "2018-02-22T18:40:33Z",
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "## 🎉 Description\r\n\r\nAssuming that the intention of the method `transfer(address _to, uint256 _value, bytes _data) public returns (bool)` of the `ERC827Token` interface is to handle ultimately the transfer of a token, and therefore its approval as well, I override it in my implementation but the behaviour does not math the expected result.\r\nMy guess is that it has to do with the inheritance of the contract.\r\n\r\n- [X ] 🐛 This is a bug report.\r\n- [ ] 📈 This is a feature request.\r\n\r\n`Tutorial Token inheritance (simple).png`:\r\n![tutorial token inheritance simple](https://user-images.githubusercontent.com/979600/36432845-768d4830-165b-11e8-809b-4b967601bc44.png)\r\n\r\nSee also `./UML/Tutorial Token inheritance.png`  of the repository [carloschida/oz-workspace](https://github.com/carloschida/oz-workspace) for the extended, annotated version with the method declarations in each contract.\r\n\r\n## 💻 Environment\r\n\r\nzeppelin-solidity: 1.6.0\r\nGanache 1.0.2\r\nTruffle v4.0.6 (core: 4.0.6)\r\nSolidity v0.4.19 (solc-js)\r\n\r\n## 📝 Details\r\n\r\nConsider the final stage of the tutorial [Robust Smart Contracts with OpenZeppelin](http://truffleframework.com/boxes/tutorialtoken) that employs the [tutorialtoken truffle box](http://truffleframework.com/boxes/tutorialtoken).\r\nSo far everything works; truffle compiles it and migrates it.\r\n\r\nAdd properties to the contract such that tokens can be only transferred to pre-authorised addresses. For replicability I use the addresses generated by Ganache with the default mnemonic `candy maple cake sugar pudding cream honey rich smooth crumble sweet treat`.\r\n\r\nAddresses of interest:\r\n- A0 `0x627306090abaB3A6e1400e9345bC60c78a8BEf57` (contract deployer)\r\n- A1 `0xf17f52151EbEF6C7334FAD080c5704D77216b732` (authorised address)\r\n- A2 `0xC5fdf4076b8F3A5357c5E395ab970B5B54098Fef` (authorised address)\r\n- A3 `0x821aEa9a577a9b44299B9c15c88cf3087F3b5544` (non-authorised address)\r\n\r\nOverride the method `transfer(address _to, uint256 _value, bytes _data) public returns (bool)` with the corresponding logic, ie, implement somewhere in the method `require(isAuthorized[_to])`.\r\n\r\nNote that line 63 `./src/js/app.js` is the one that makes the call to the method\r\n``return tutorialTokenInstance.transfer(toAddress, amount, {from: account});``\r\n\r\nTransfers:\r\n- A0 -> A1 (works and it should work)\r\n- A0 -> A3 (works but it should **not** work)\r\n\r\n## 🔢 Code To Reproduce Issue [ Good To Have ]\r\n\r\nThis code is what should be added/modified to the latest state of the [Robust Smart Contracts with OpenZeppelin](http://truffleframework.com/boxes/tutorialtoken).\r\nA **repository containing the full code** can be found [here](https://github.com/carloschida/oz-workspace) but I still leave the additions for them to be more easily readable.\r\n\r\n`TutorialToken.sol`:\r\n```\r\n pragma solidity ^0.4.4;\r\n\r\nimport 'zeppelin-solidity/contracts/token/ERC827/ERC827Token.sol';\r\n\r\ncontract TutorialToken is ERC827Token { // No longer (only) `StandardToken`\r\n    string public name = 'TutorialToken';\r\n    string public symbol = 'TT';\r\n    uint8 public decimals = 0;\r\n    uint public INITIAL_SUPPLY = 1000000;\r\n\r\n    mapping(address => bool) public isAuthorized;\r\n\r\n    address[2] authorizedAddresses = [\r\n        // 0x627306090abaB3A6e1400e9345bC60c78a8BEf57, // A0 (contract deployer also non-authorised address)\r\n        0xf17f52151EbEF6C7334FAD080c5704D77216b732,    // A1 (authorised address)\r\n        0xC5fdf4076b8F3A5357c5E395ab970B5B54098Fef     // A2 (authorised address)\r\n        // 0x821aEa9a577a9b44299B9c15c88cf3087F3b5544  // A3 (non-authorised address)\r\n    ];\r\n\r\n    function TutorialToken() public {\r\n        totalSupply_ = INITIAL_SUPPLY;\r\n        balances[msg.sender] = INITIAL_SUPPLY;\r\n        // Authorise addresses A1 and A2\r\n        isAuthorized[authorizedAddresses[0]] = true;\r\n        isAuthorized[authorizedAddresses[1]] = true;\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value, bytes _data) public returns (bool) {\r\n        require(_to != address(this));\r\n        require(isAuthorized[_to]); // <- CRITICAL\r\n        super.transfer(_to, _value);\r\n        require(_to.call(_data));\r\n        return true;\r\n    }\r\n}\r\n```\r\n\r\n## 👍 Other Information\r\n\r\nNote that if you additionally override the method `function transfer(address _to, uint256 _value) public returns (bool)` (attention to the signature) as follows, you obtain the desired result, ie, not being able to transfer to the non-authorised address A3.\r\n\r\n```\r\nfunction transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(this));\r\n    require(isAuthorized[_to]);\r\n    super.transfer(_to, _value);\r\n    return true;\r\n}\r\n```\r\nThis is why my guess is that something with inheritance is wrong.",
  "closed_by": {
    "login": "carloschida",
    "id": 979600,
    "node_id": "MDQ6VXNlcjk3OTYwMA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/979600?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/carloschida",
    "html_url": "https://github.com/carloschida",
    "followers_url": "https://api.github.com/users/carloschida/followers",
    "following_url": "https://api.github.com/users/carloschida/following{/other_user}",
    "gists_url": "https://api.github.com/users/carloschida/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/carloschida/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/carloschida/subscriptions",
    "organizations_url": "https://api.github.com/users/carloschida/orgs",
    "repos_url": "https://api.github.com/users/carloschida/repos",
    "events_url": "https://api.github.com/users/carloschida/events{/privacy}",
    "received_events_url": "https://api.github.com/users/carloschida/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/762/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/762/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/367032888",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/762#issuecomment-367032888",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/762",
    "id": 367032888,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2NzAzMjg4OA==",
    "user": {
      "login": "carloschida",
      "id": 979600,
      "node_id": "MDQ6VXNlcjk3OTYwMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/979600?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/carloschida",
      "html_url": "https://github.com/carloschida",
      "followers_url": "https://api.github.com/users/carloschida/followers",
      "following_url": "https://api.github.com/users/carloschida/following{/other_user}",
      "gists_url": "https://api.github.com/users/carloschida/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/carloschida/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/carloschida/subscriptions",
      "organizations_url": "https://api.github.com/users/carloschida/orgs",
      "repos_url": "https://api.github.com/users/carloschida/repos",
      "events_url": "https://api.github.com/users/carloschida/events{/privacy}",
      "received_events_url": "https://api.github.com/users/carloschida/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-20T16:24:42Z",
    "updated_at": "2018-02-20T16:28:00Z",
    "author_association": "NONE",
    "body": "On the Slack channel, @vidorge commented that [L63](https://github.com/carloschida/oz-workspace/blob/master/src/js/app.js#L63) of `app.js` actually invokes [L31](https://github.com/OpenZeppelin/zeppelin-solidity/blob/master/contracts/token/ERC20/BasicToken.sol#L31) of `BasicToken.sol`, ie `function transfer(address _to, uint256 _value) public returns (bool)`.\r\n\r\nMy confusion came from the fact that call in L31 of `app.js` has 3 parameters but the last one is not meant to reach the contract.\r\n\r\nHe also said that one must always duplicate the logic for both methods and that my overriding of the three-parameter method should not be\r\n```\r\nfunction transfer(address _to, uint256 _value, bytes _data) public returns (bool) {\r\n        require(_to != address(this));\r\n        require(isAuthorized[_to]); // <- CRITICAL\r\n        super.transfer(_to, _value);\r\n        require(_to.call(_data));\r\n        return true;\r\n    }\r\n```\r\nbut rather look like\r\n```\r\nfunction transfer(address _to, uint256 _value, bytes _data) public returns (bool) {\r\n        require(_to != address(this));\r\n        require(isAuthorized[_to]);\r\n        super.transfer(_to, _value, _data); // Change here\r\n        // require(_to.call(_data));\r\n        return true;\r\n    }\r\n```\r\nI'm trying it out now.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/367032888/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/367043812",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/762#issuecomment-367043812",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/762",
    "id": 367043812,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2NzA0MzgxMg==",
    "user": {
      "login": "carloschida",
      "id": 979600,
      "node_id": "MDQ6VXNlcjk3OTYwMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/979600?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/carloschida",
      "html_url": "https://github.com/carloschida",
      "followers_url": "https://api.github.com/users/carloschida/followers",
      "following_url": "https://api.github.com/users/carloschida/following{/other_user}",
      "gists_url": "https://api.github.com/users/carloschida/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/carloschida/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/carloschida/subscriptions",
      "organizations_url": "https://api.github.com/users/carloschida/orgs",
      "repos_url": "https://api.github.com/users/carloschida/repos",
      "events_url": "https://api.github.com/users/carloschida/events{/privacy}",
      "received_events_url": "https://api.github.com/users/carloschida/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-20T16:57:30Z",
    "updated_at": "2018-02-21T08:12:12Z",
    "author_association": "NONE",
    "body": "My issue was solved, although I still need to understand `web3`'s tricky way of forcing the inclusion of an extra parameter.\r\n\r\nI updated both branches of my repository accordingly:\r\n- `master` [(here)](https://github.com/carloschida/oz-workspace/tree/master) stays as intended to reproduce the issue and/or future reference.\r\n- `resolution` [(here)](https://github.com/carloschida/oz-workspace/tree/resolution) was added to show the resolution of the problem in `TutorialToken.sol`.\r\n\r\nThank you, once again, @vidorge!\r\n\r\nI leave the issue open though should anyone be so kind to comment a bit on:\r\n- why both functions must contains the desired logic;\r\n- why `web3` forces a contract's methods to be called with that extra parameter;\r\n- what `_to.call(_data)` does and whether it is needed in the overriding.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/367043812/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
