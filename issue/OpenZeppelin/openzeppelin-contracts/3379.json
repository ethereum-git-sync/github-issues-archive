{
  "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3379",
  "repository_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts",
  "labels_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3379/labels{/name}",
  "comments_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3379/comments",
  "events_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3379/events",
  "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3379",
  "id": 1220109706,
  "node_id": "I_kwDOA9tCBs5IuWWK",
  "number": 3379,
  "title": "ERC2981 - Let royaltyFraction (royalty fee) accessible for each tokens",
  "user": {
    "login": "DoDzilla-ai",
    "id": 55047718,
    "node_id": "MDQ6VXNlcjU1MDQ3NzE4",
    "avatar_url": "https://avatars.githubusercontent.com/u/55047718?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/DoDzilla-ai",
    "html_url": "https://github.com/DoDzilla-ai",
    "followers_url": "https://api.github.com/users/DoDzilla-ai/followers",
    "following_url": "https://api.github.com/users/DoDzilla-ai/following{/other_user}",
    "gists_url": "https://api.github.com/users/DoDzilla-ai/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/DoDzilla-ai/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/DoDzilla-ai/subscriptions",
    "organizations_url": "https://api.github.com/users/DoDzilla-ai/orgs",
    "repos_url": "https://api.github.com/users/DoDzilla-ai/repos",
    "events_url": "https://api.github.com/users/DoDzilla-ai/events{/privacy}",
    "received_events_url": "https://api.github.com/users/DoDzilla-ai/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 7,
  "created_at": "2022-04-29T07:32:48Z",
  "updated_at": "2022-05-05T08:53:01Z",
  "closed_at": "2022-05-05T08:53:01Z",
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "**üßê Motivation**\r\nI want to display the royalty percentage/fee (royaltyFraction) on NFTs that are listed on my marketplace app. I want my users to be acknowledged for the price cuts. \r\n\r\n**üìù Details**\r\nThe royalty fraction information is already recorded in a struct for each tokens' with royalty set inside the  [ERC2981.sol](https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/common/ERC2981.sol). I want to access that information and show it on my marketplace app. Currently, I have modified the [royaltyInfo](https://github.com/OpenZeppelin/openzeppelin-contracts/blob/fcf35e5722847f5eadaaee052968a8a54d03622a/contracts/token/common/ERC2981.sol#L43) function to return the `royaltyFraction` like this:\r\n\r\n```\r\n/**\r\n     * @inheritdoc IERC2981\r\n     */\r\n    function royaltyInfo(uint256 _tokenId, uint256 _salePrice) public view virtual override returns (address, uint256, uint96) {\r\n        RoyaltyInfo memory royalty = _tokenRoyaltyInfo[_tokenId];\r\n\r\n        if (royalty.receiver == address(0)) {\r\n            royalty = _defaultRoyaltyInfo;\r\n        }\r\n\r\n        uint256 royaltyAmount = (_salePrice * royalty.royaltyFraction) / _feeDenominator();\r\n\r\n        return (royalty.receiver, royaltyAmount, royalty.royaltyFraction);\r\n    }\r\n```\r\nI have also modified the related function inside the [IERC2981](https://github.com/OpenZeppelin/openzeppelin-contracts/blob/fcf35e5722847f5eadaaee052968a8a54d03622a/contracts/interfaces/IERC2981.sol#L16) to return the royaltyInfo as follows:\r\n\r\n```\r\ninterface IERC2981 is IERC165 {\r\n    /**\r\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\r\n     * exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\r\n     */\r\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\r\n        external\r\n        view\r\n        returns (address receiver, uint256 royaltyAmount, uint96 royaltyFraction);\r\n}\r\n```\r\n\r\nThere could be a better way to achieve this. Please let us access `royaltyFraction` so users of my marketplace can also see the royalty fee (royaltyFraction) information.",
  "closed_by": {
    "login": "DoDzilla-ai",
    "id": 55047718,
    "node_id": "MDQ6VXNlcjU1MDQ3NzE4",
    "avatar_url": "https://avatars.githubusercontent.com/u/55047718?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/DoDzilla-ai",
    "html_url": "https://github.com/DoDzilla-ai",
    "followers_url": "https://api.github.com/users/DoDzilla-ai/followers",
    "following_url": "https://api.github.com/users/DoDzilla-ai/following{/other_user}",
    "gists_url": "https://api.github.com/users/DoDzilla-ai/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/DoDzilla-ai/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/DoDzilla-ai/subscriptions",
    "organizations_url": "https://api.github.com/users/DoDzilla-ai/orgs",
    "repos_url": "https://api.github.com/users/DoDzilla-ai/repos",
    "events_url": "https://api.github.com/users/DoDzilla-ai/events{/privacy}",
    "received_events_url": "https://api.github.com/users/DoDzilla-ai/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3379/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3379/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1113182976",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3379#issuecomment-1113182976",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3379",
    "id": 1113182976,
    "node_id": "IC_kwDOA9tCBs5CWdMA",
    "user": {
      "login": "Amxx",
      "id": 2432299,
      "node_id": "MDQ6VXNlcjI0MzIyOTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2432299?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Amxx",
      "html_url": "https://github.com/Amxx",
      "followers_url": "https://api.github.com/users/Amxx/followers",
      "following_url": "https://api.github.com/users/Amxx/following{/other_user}",
      "gists_url": "https://api.github.com/users/Amxx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Amxx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Amxx/subscriptions",
      "organizations_url": "https://api.github.com/users/Amxx/orgs",
      "repos_url": "https://api.github.com/users/Amxx/repos",
      "events_url": "https://api.github.com/users/Amxx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Amxx/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-04-29T11:11:13Z",
    "updated_at": "2022-04-29T11:11:13Z",
    "author_association": "COLLABORATOR",
    "body": "Hello @DoDzilla-ai \r\n\r\nThe `royaltyInfo()` function is defined in the [ERC2981 standard](https://eips.ethereum.org/EIPS/eip-2981). I strongly advise you do NOT change the return type, as it could possibly break things.\r\n\r\nI'm not sure what you don't like with the current `royaltyInfo()` implementation:\r\n- it returns the address of the fee recipient\r\n- it returns the amount of fees for a given sale price that you can set arbitrarily.\r\n\r\nIf you know, or are ready to assume, that the fees are linear, then you can very easily ask `royaltyInfo(_tokenId, 1000000)`, and divide the resulting price by 10000 to get a fee in percetages.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1113182976/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1113643181",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3379#issuecomment-1113643181",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3379",
    "id": 1113643181,
    "node_id": "IC_kwDOA9tCBs5CYNit",
    "user": {
      "login": "DoDzilla-ai",
      "id": 55047718,
      "node_id": "MDQ6VXNlcjU1MDQ3NzE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/55047718?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/DoDzilla-ai",
      "html_url": "https://github.com/DoDzilla-ai",
      "followers_url": "https://api.github.com/users/DoDzilla-ai/followers",
      "following_url": "https://api.github.com/users/DoDzilla-ai/following{/other_user}",
      "gists_url": "https://api.github.com/users/DoDzilla-ai/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/DoDzilla-ai/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/DoDzilla-ai/subscriptions",
      "organizations_url": "https://api.github.com/users/DoDzilla-ai/orgs",
      "repos_url": "https://api.github.com/users/DoDzilla-ai/repos",
      "events_url": "https://api.github.com/users/DoDzilla-ai/events{/privacy}",
      "received_events_url": "https://api.github.com/users/DoDzilla-ai/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-04-29T19:16:17Z",
    "updated_at": "2022-04-29T19:16:17Z",
    "author_association": "NONE",
    "body": "Hello @Amxx \r\n\r\nI am aware and agree with your warning about changing the return parameters in the interface. There is nothing that I don't like about the `royaltyInfo()` function. \r\n\r\nAs I explained, I only need the royalty fraction information (percentage) without feeding any function with a `_salePrice`. Current ERC2981.sol has this information stored in it but there is no direct way to access it. It would be inefficient for smart contracts (like mine) to recalculate information that is already stored in a different contract (ERC2981.sol). And finally, that's why I am looking for a \"...   better way to achieve this. Please let us access royaltyFraction so users of my marketplace can also see the royalty fee (royaltyFraction) information.\"\r\n\r\nThank you.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1113643181/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1113764234",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3379#issuecomment-1113764234",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3379",
    "id": 1113764234,
    "node_id": "IC_kwDOA9tCBs5CYrGK",
    "user": {
      "login": "Amxx",
      "id": 2432299,
      "node_id": "MDQ6VXNlcjI0MzIyOTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2432299?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Amxx",
      "html_url": "https://github.com/Amxx",
      "followers_url": "https://api.github.com/users/Amxx/followers",
      "following_url": "https://api.github.com/users/Amxx/following{/other_user}",
      "gists_url": "https://api.github.com/users/Amxx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Amxx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Amxx/subscriptions",
      "organizations_url": "https://api.github.com/users/Amxx/orgs",
      "repos_url": "https://api.github.com/users/Amxx/repos",
      "events_url": "https://api.github.com/users/Amxx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Amxx/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-04-29T21:37:53Z",
    "updated_at": "2022-04-29T21:38:22Z",
    "author_association": "COLLABORATOR",
    "body": "I might be misunderstanding your use-case. What is it that needs the fee as a percentage? The contract itself? Another contract? A frontend?",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1113764234/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1113971127",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3379#issuecomment-1113971127",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3379",
    "id": 1113971127,
    "node_id": "IC_kwDOA9tCBs5CZdm3",
    "user": {
      "login": "DoDzilla-ai",
      "id": 55047718,
      "node_id": "MDQ6VXNlcjU1MDQ3NzE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/55047718?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/DoDzilla-ai",
      "html_url": "https://github.com/DoDzilla-ai",
      "followers_url": "https://api.github.com/users/DoDzilla-ai/followers",
      "following_url": "https://api.github.com/users/DoDzilla-ai/following{/other_user}",
      "gists_url": "https://api.github.com/users/DoDzilla-ai/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/DoDzilla-ai/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/DoDzilla-ai/subscriptions",
      "organizations_url": "https://api.github.com/users/DoDzilla-ai/orgs",
      "repos_url": "https://api.github.com/users/DoDzilla-ai/repos",
      "events_url": "https://api.github.com/users/DoDzilla-ai/events{/privacy}",
      "received_events_url": "https://api.github.com/users/DoDzilla-ai/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-04-30T11:23:25Z",
    "updated_at": "2022-04-30T11:23:25Z",
    "author_association": "NONE",
    "body": "If you check [this NFT](https://rarible.com/token/0xd7503e03d35acac4068fc7068ab0f8db7976441f:607?tab=details) on Rarible, you would see (on the right side) the \"5% royalties\".  This can be either calculated as you said or it could be gotten from the ERC2981.sol, which is stored as `royaltyFraction`. I want to display this percentage by getting the `royaltyFraction` without feeding the royaltyInfo with a sale price. There is no direct way to get only the royaltyFraction in the ERC2981.sol. I believe this is a missed feature (function, a getter) in ERC2981.sol.  \r\n\r\nPS: I know royaltyFraction is not a percentage but using `royaltyInfo` with a dummy sale price is also not a direct way. \r\n\r\n ",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1113971127/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1115006688",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3379#issuecomment-1115006688",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3379",
    "id": 1115006688,
    "node_id": "IC_kwDOA9tCBs5Cdabg",
    "user": {
      "login": "Amxx",
      "id": 2432299,
      "node_id": "MDQ6VXNlcjI0MzIyOTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2432299?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Amxx",
      "html_url": "https://github.com/Amxx",
      "followers_url": "https://api.github.com/users/Amxx/followers",
      "following_url": "https://api.github.com/users/Amxx/following{/other_user}",
      "gists_url": "https://api.github.com/users/Amxx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Amxx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Amxx/subscriptions",
      "organizations_url": "https://api.github.com/users/Amxx/orgs",
      "repos_url": "https://api.github.com/users/Amxx/repos",
      "events_url": "https://api.github.com/users/Amxx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Amxx/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-05-02T15:03:49Z",
    "updated_at": "2022-05-02T15:03:49Z",
    "author_association": "COLLABORATOR",
    "body": "What I don't understand is why you specifically DON'T want to call `royaltyInfo` with a dummy sale price? It would work just fine, and its already available as part of ERC2981.\r\n\r\nAsking for another function to do that means that you will only be compatible with token that have this non standard function (when you could be compatible with all ERC2981 implementing contract). Its also requesting the deployer of the contract to put more bytecode onchain (which has a cost).\r\n\r\nERC2981 was standardized specifically so that everyone would be interoperable. I'd love to know why you want to build non-interoprable things.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1115006688/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1116273058",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3379#issuecomment-1116273058",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3379",
    "id": 1116273058,
    "node_id": "IC_kwDOA9tCBs5CiPmi",
    "user": {
      "login": "DoDzilla-ai",
      "id": 55047718,
      "node_id": "MDQ6VXNlcjU1MDQ3NzE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/55047718?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/DoDzilla-ai",
      "html_url": "https://github.com/DoDzilla-ai",
      "followers_url": "https://api.github.com/users/DoDzilla-ai/followers",
      "following_url": "https://api.github.com/users/DoDzilla-ai/following{/other_user}",
      "gists_url": "https://api.github.com/users/DoDzilla-ai/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/DoDzilla-ai/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/DoDzilla-ai/subscriptions",
      "organizations_url": "https://api.github.com/users/DoDzilla-ai/orgs",
      "repos_url": "https://api.github.com/users/DoDzilla-ai/repos",
      "events_url": "https://api.github.com/users/DoDzilla-ai/events{/privacy}",
      "received_events_url": "https://api.github.com/users/DoDzilla-ai/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-05-03T16:06:48Z",
    "updated_at": "2022-05-03T16:17:51Z",
    "author_association": "NONE",
    "body": "- For your first and second paragraphs: I cannot make a gas cost comparison but calling `royaltyInfo` for each NFT listed on my marketplace with a dummy sale price will also run some calculations (like royalty amount) that I don't need and thus I believe this would cause unnecessary gas consumption. This is mainly what I am trying to get away from. \r\n- For the 3rd paragraph: I don't understand how adding a getter would break the interoperability since any other marketplace implementing the [ERC2981](https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/common/ERC2981.sol) (or anything with EIP2981) would work just fine. Additionally, the ERC2981.sol already has functions that were not **specially** defined within the [EIP-2981](https://eips.ethereum.org/EIPS/eip-2981) and it is OK since `ERC2981.sol `follows the \"The key words ‚ÄúMUST‚Äù, ‚ÄúMUST NOT‚Äù, ‚ÄúREQUIRED‚Äù, ‚ÄúSHALL‚Äù, ‚ÄúSHALL NOT‚Äù, ‚ÄúSHOULD‚Äù, ‚ÄúSHOULD NOT‚Äù, ‚ÄúRECOMMENDED‚Äù, ‚ÄúMAY‚Äù, and ‚ÄúOPTIONAL‚Äù in this document are to be interpreted as described in RFC 2119.\" And I  (as a junior) believe adding a getter for the percentage would break any of these.\r\n\r\nWith the addition of a simple getter, marketplaces would be able to display the royalty percentage (for sellers and buyers) without additional gas consumption of royalty amount calculation and it would be much more clean from the perspective of developers. \r\n\r\nSorry If am missing something with my logic.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1116273058/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1117714338",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3379#issuecomment-1117714338",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3379",
    "id": 1117714338,
    "node_id": "IC_kwDOA9tCBs5Cnvei",
    "user": {
      "login": "Amxx",
      "id": 2432299,
      "node_id": "MDQ6VXNlcjI0MzIyOTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2432299?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Amxx",
      "html_url": "https://github.com/Amxx",
      "followers_url": "https://api.github.com/users/Amxx/followers",
      "following_url": "https://api.github.com/users/Amxx/following{/other_user}",
      "gists_url": "https://api.github.com/users/Amxx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Amxx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Amxx/subscriptions",
      "organizations_url": "https://api.github.com/users/Amxx/orgs",
      "repos_url": "https://api.github.com/users/Amxx/repos",
      "events_url": "https://api.github.com/users/Amxx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Amxx/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-05-04T19:08:49Z",
    "updated_at": "2022-05-04T19:09:07Z",
    "author_association": "COLLABORATOR",
    "body": "> * For your first and second paragraphs: I cannot make a gas cost comparison but calling `royaltyInfo` for each NFT listed on my marketplace with a dummy sale price will also run some calculations (like royalty amount) that I don't need and thus I believe this would cause unnecessary gas consumption. This is mainly what I am trying to get away from.\r\n\r\nI am going to assume you are building a website marketplace. Something similar to OpenSea. You did not say it clearly, but I guess the most logical \"marketplace\" case.\r\n\r\nCalling the royaltyInfo for each NFT might indeed be a pain, but that is the design of the ERC that each NFT can have a different fee. The good thing here is that if a backend server or a website front does this call, the call is free (as far as gas is concerned). You don't pay gas when you want to check the state of the blockchain.\r\n\r\nNow you can use the existing `royaltyInfo()` function with a dummy price ... or you could call another non standard function ... in both cases the cost will be the same.\r\n\r\nThe difference in gas cost is for whoever is going to deploy the contract. The more features there are, the most expensive it is, so you definitely don't want to deploy features that you don't need.\r\n\r\n> * For the 3rd paragraph: I don't understand how adding a getter would break the interoperability since any other marketplace implementing the [ERC2981](https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/common/ERC2981.sol) (or anything with EIP2981) would work just fine. Additionally, the ERC2981.sol already has functions that were not **specially** defined within the [EIP-2981](https://eips.ethereum.org/EIPS/eip-2981) and it is OK since `ERC2981.sol `follows the \"The key words ‚ÄúMUST‚Äù, ‚ÄúMUST NOT‚Äù, ‚ÄúREQUIRED‚Äù, ‚ÄúSHALL‚Äù, ‚ÄúSHALL NOT‚Äù, ‚ÄúSHOULD‚Äù, ‚ÄúSHOULD NOT‚Äù, ‚ÄúRECOMMENDED‚Äù, ‚ÄúMAY‚Äù, and ‚ÄúOPTIONAL‚Äù in this document are to be interpreted as described in RFC 2119.\" And I  (as a junior) believe adding a getter for the percentage would break any of these.\r\n\r\nI was probably not clear to what I'm meaning by interoperability here. Its true that adding an additional function will not remove anything from the contract. Contracts would remain ERC2981 compliant, so that is not the issue.\r\n\r\nMy concern is with your marketplace relying on a specific function being present. By doing so, you are not making your marketplace ERC2981 compliant, and you will incorrectly interact with contracts that are \"only\" ERC2981. IMO it would be better if your marketplace doesn't make any assumptions about the contract interface beyond what is standardized in ERCs.\r\n\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1117714338/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
