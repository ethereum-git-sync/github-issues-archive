{
  "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4857",
  "repository_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts",
  "labels_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4857/labels{/name}",
  "comments_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4857/comments",
  "events_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4857/events",
  "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/4857",
  "id": 2101987448,
  "node_id": "I_kwDOA9tCBs59Sch4",
  "number": 4857,
  "title": "Improve function `Math.tryAdd`",
  "user": {
    "login": "barakman",
    "id": 7003246,
    "node_id": "MDQ6VXNlcjcwMDMyNDY=",
    "avatar_url": "https://avatars.githubusercontent.com/u/7003246?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/barakman",
    "html_url": "https://github.com/barakman",
    "followers_url": "https://api.github.com/users/barakman/followers",
    "following_url": "https://api.github.com/users/barakman/following{/other_user}",
    "gists_url": "https://api.github.com/users/barakman/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/barakman/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/barakman/subscriptions",
    "organizations_url": "https://api.github.com/users/barakman/orgs",
    "repos_url": "https://api.github.com/users/barakman/repos",
    "events_url": "https://api.github.com/users/barakman/events{/privacy}",
    "received_events_url": "https://api.github.com/users/barakman/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 3,
  "created_at": "2024-01-26T10:41:01Z",
  "updated_at": "2024-01-26T13:53:32Z",
  "closed_at": null,
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "**üßê Motivation**\r\n- Reduce the gas consumption of function `Math.tryAdd`\r\n- Consolidate the output of function `Math.tryAdd`\r\n- Expand the usability of function `Math.tryAdd`\r\n \r\n**üìù Details**\r\n\r\nIn addition to the sum of two input values, this function returns an indication of whether or not the calculation is safe:\r\n- True if an overflow does not occur during the calculation\r\n- False if an overflow does occur during the calculation\r\n\r\nHowever, in the case of an overflow, it also returns the calculated sum as zero instead of as the actual (overflowing) result.\r\n\r\nThe implications of this are:\r\n1. Output redundancy, as both returned values provide the exact same information, namely - an overflow has occurred\r\n2. Output deficiency, as the 2nd returned value does not provide the overflowing result, which may nevertheless be useful\r\n3. Increased gas consumption\r\n\r\nMy point in bullet 2 above is that the information has already been calculated, so why not return it to the user and let them decide what to do with it? Perhaps you've decided to return 0 as some sort of \"safety net\" in case of erroneous usage by the caller of the function, but under such scenario, I cannot quite see how 0 would be \"safer\" than any other value.\r\n\r\nThis is [your current implementation](https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/math/Math.sol#L25-L31):\r\n```\r\nfunction tryAdd(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\r\n    unchecked {\r\n        uint256 c = a + b;\r\n        if (c < a) return (false, 0);\r\n        return (true, c);\r\n    }\r\n}\r\n```\r\nAnd this is my suggested implementation:\r\n```\r\nfunction tryAdd(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\r\n    unchecked {\r\n        result = a + b;\r\n        success = result >= a;\r\n     }\r\n}\r\n```\r\nGas measurement conducted as follows:\r\n- Compiler version 0.8.20\r\n- Optimizer enabled with 200 runs\r\n\r\nContract code:\r\n```\r\n// SPDX-License-Identifier: SEE LICENSE IN LICENSE\r\npragma solidity 0.8.20;\r\n\r\nabstract contract Contract {\r\n    uint256 public gasUsed;\r\n\r\n    function test(uint256 a, uint256 b) external returns (bool success, uint256 result) {\r\n        uint256 gasLeft = gasleft();\r\n        (success, result) = tryAdd(a, b);\r\n        gasUsed = gasLeft - gasleft();\r\n    }\r\n\r\n    function tryAdd(uint256, uint256) internal virtual pure returns (bool, uint256);\r\n}\r\n\r\ncontract Contract1 is Contract {\r\n    function tryAdd(uint256 a, uint256 b) internal override pure returns (bool success, uint256 result) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n}\r\n\r\ncontract Contract2 is Contract {\r\n    function tryAdd(uint256 a, uint256 b) internal override pure returns (bool success, uint256 result) {\r\n        unchecked {\r\n            result = a + b;\r\n            success = result >= a;\r\n        }\r\n    }\r\n}\r\n```\r\nTruffle test code:\r\n```\r\nconst Contract1 = artifacts.require(\"Contract1\");\r\nconst Contract2 = artifacts.require(\"Contract2\");\r\n\r\nconst MAX = web3.utils.toBN(1).shln(256);\r\n\r\ndescribe(\"test\", () => {\r\n    it(\"test\", async () => {\r\n        console.log();\r\n        for (let i = 0; i < 5; i++) {\r\n            for (let j = 0; j < 5; j++) {\r\n                await test(MAX.addn(i).mod(MAX), MAX.addn(j).mod(MAX));\r\n                await test(MAX.addn(i).mod(MAX), MAX.subn(j).mod(MAX));\r\n                await test(MAX.subn(i).mod(MAX), MAX.addn(j).mod(MAX));\r\n                await test(MAX.subn(i).mod(MAX), MAX.subn(j).mod(MAX));\r\n            }\r\n        }\r\n    });\r\n\r\n    async function test(a, b) {\r\n        const gasUsed = [];\r\n        for (const Contract of [Contract1, Contract2]) {\r\n            const contract = await Contract.new();\r\n            const receipt = await contract.test(a, b);\r\n            gasUsed.push(await contract.gasUsed());\r\n        }\r\n        console.log(`${gasUsed[0]}, ${gasUsed[1]} (a = ${a}, b = ${b})`);\r\n        assert(gasUsed[0].gte(gasUsed[1]));\r\n    }\r\n});\r\n```\r\nI've also tested with `[Contract2, Contract1]`, in order to make sure that the order of execution doesn't impact the results.\r\n\r\nTLDR gas measurement:\r\n- Your current implementation: either 117 or 131 gas per function call\r\n- My suggested implementation: 38 gas per function call\r\n\r\nIt is slightly surprising, since my implementation replaces your implementation's usage of `<` with `>=`.\r\nLast time I checked, the latter was slightly more expensive than the former (5 gas vs 3 gas).\r\nPerhaps it is your forcing of `0` which makes your implementation ultimately more expensive than my implementation.\r\nOr perhaps it is because you are not using the function-declaration's return variables `(bool success, uint256 result)`.\r\n\r\nOne important note to point out is that if you choose to accept this suggestion, then it will break any code which happens to rely on both returned value for detecting an overflow, i.e., `if (success == false && result == 0)`.\r\n\r\nAnd despite the fact that such logic is generally wrong, it should probably be emphasized in the related release notes.\r\n\r\nA similar approach can probably be used also for function `trySub` and for function `tryMul`.\r\n\r\nThank you :)",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4857/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4857/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1912078619",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/4857#issuecomment-1912078619",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4857",
    "id": 1912078619,
    "node_id": "IC_kwDOA9tCBs5x-AEb",
    "user": {
      "login": "Amxx",
      "id": 2432299,
      "node_id": "MDQ6VXNlcjI0MzIyOTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2432299?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Amxx",
      "html_url": "https://github.com/Amxx",
      "followers_url": "https://api.github.com/users/Amxx/followers",
      "following_url": "https://api.github.com/users/Amxx/following{/other_user}",
      "gists_url": "https://api.github.com/users/Amxx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Amxx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Amxx/subscriptions",
      "organizations_url": "https://api.github.com/users/Amxx/orgs",
      "repos_url": "https://api.github.com/users/Amxx/repos",
      "events_url": "https://api.github.com/users/Amxx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Amxx/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2024-01-26T13:34:38Z",
    "updated_at": "2024-01-26T13:42:45Z",
    "author_association": "COLLABORATOR",
    "body": "Hello @barakman and thank you for this interresting proposal\r\n\r\n> One important note to point out is that if you choose to accept this suggestion, then it will break any code which happens to rely on both returned value for detecting an overflow, i.e., `if (success == false && result == 0)`.\r\n\r\nI think this is an issue. We care a lot about backward compatibility, and even though we don't know if anyone relies on the result being 0, some users may rely on that. \r\n\r\nThis check could make sens if the some project does\r\n```solidity\r\n(uint256 result, bool success) = tryAdd(x, y);\r\nif (result > 0) {\r\n    // do stuff with result\r\n} else require(success, \"overflow\");\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1912078619/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1912088217",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/4857#issuecomment-1912088217",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4857",
    "id": 1912088217,
    "node_id": "IC_kwDOA9tCBs5x-CaZ",
    "user": {
      "login": "Amxx",
      "id": 2432299,
      "node_id": "MDQ6VXNlcjI0MzIyOTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2432299?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Amxx",
      "html_url": "https://github.com/Amxx",
      "followers_url": "https://api.github.com/users/Amxx/followers",
      "following_url": "https://api.github.com/users/Amxx/following{/other_user}",
      "gists_url": "https://api.github.com/users/Amxx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Amxx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Amxx/subscriptions",
      "organizations_url": "https://api.github.com/users/Amxx/orgs",
      "repos_url": "https://api.github.com/users/Amxx/repos",
      "events_url": "https://api.github.com/users/Amxx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Amxx/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2024-01-26T13:41:54Z",
    "updated_at": "2024-01-26T13:41:54Z",
    "author_association": "COLLABORATOR",
    "body": "If there is a way to reduce the gas cost while keeping the current behavior (result == 0 in case of overflow), we would obviously be open to that.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1912088217/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1912097560",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/4857#issuecomment-1912097560",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4857",
    "id": 1912097560,
    "node_id": "IC_kwDOA9tCBs5x-EsY",
    "user": {
      "login": "barakman",
      "id": 7003246,
      "node_id": "MDQ6VXNlcjcwMDMyNDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7003246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/barakman",
      "html_url": "https://github.com/barakman",
      "followers_url": "https://api.github.com/users/barakman/followers",
      "following_url": "https://api.github.com/users/barakman/following{/other_user}",
      "gists_url": "https://api.github.com/users/barakman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/barakman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/barakman/subscriptions",
      "organizations_url": "https://api.github.com/users/barakman/orgs",
      "repos_url": "https://api.github.com/users/barakman/repos",
      "events_url": "https://api.github.com/users/barakman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/barakman/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2024-01-26T13:48:43Z",
    "updated_at": "2024-01-26T13:53:32Z",
    "author_association": "CONTRIBUTOR",
    "body": "> Hello @barakman and thank you for this interresting proposal\r\n> \r\n> > One important note to point out is that if you choose to accept this suggestion, then it will break any code which happens to rely on both returned value for detecting an overflow, i.e., `if (success == false && result == 0)`.\r\n> \r\n> I think this is an issue. We care a lot about backward compatibility, and even though we don't know if anyone relies on the result being 0, some users may rely on that.\r\n> \r\n> This check could make sens if the some project does\r\n> \r\n> ```solidity\r\n> (uint256 result, bool success) = tryAdd(x, y);\r\n> if (result > 0) {\r\n>     // do stuff\r\n> } else require(success, \"overflow\");\r\n> ```\r\n\r\nAs I explained, relying on \"False AND Zero\" as an indication of overflow, is generally wrong.\r\nEven more wrong, is to rely only on \"Zero\" as an indication of overflow, and that's **regardless** of my suggestion.\r\nThis is because 0 + 0 does not overflow.\r\n\r\nIn other words, the function may return `(true, 0)` and it may return `(false, 0)`.\r\nThe latter indicates an overflow, while the former indicates no overflow.\r\n\r\nYour code snippet above is actually a good example of how wrong it is to rely on 0 alone as an indication of overflow.\r\nAnyone using such pattern **at this moment** (i.e., under the current implementation) is subjected to erroneous behavior.\r\n\r\nThank you for your quick response :)",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1912097560/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
