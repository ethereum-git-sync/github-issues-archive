{
  "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2339",
  "repository_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts",
  "labels_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2339/labels{/name}",
  "comments_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2339/comments",
  "events_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2339/events",
  "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2339",
  "id": 688162603,
  "node_id": "MDU6SXNzdWU2ODgxNjI2MDM=",
  "number": 2339,
  "title": "Provide a proxy factory library",
  "user": {
    "login": "frangio",
    "id": 481465,
    "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
    "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/frangio",
    "html_url": "https://github.com/frangio",
    "followers_url": "https://api.github.com/users/frangio/followers",
    "following_url": "https://api.github.com/users/frangio/following{/other_user}",
    "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
    "organizations_url": "https://api.github.com/users/frangio/orgs",
    "repos_url": "https://api.github.com/users/frangio/repos",
    "events_url": "https://api.github.com/users/frangio/events{/privacy}",
    "received_events_url": "https://api.github.com/users/frangio/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 13,
  "created_at": "2020-08-28T15:39:18Z",
  "updated_at": "2020-12-14T14:24:59Z",
  "closed_at": "2020-12-14T14:24:59Z",
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "We should provide functionality to make it simple to create proxy instances at runtime. Creating a single proxy instance is simple using the proxy contracts provided, but it's worth providing something on top of that that implements a common pattern when the implementation contract needs to be reused. This pattern should be simple and not opinionated.\r\n\r\nThe proposed design is a library with a `ProxyFactory` \"object\" that would be used as in the following snippet.\r\n\r\n```solidity\r\ncontract MyFactory {\r\n    using Proxies for Proxies.ProxyFactory;\r\n\r\n    // This struct contains the address of the implementation that is\r\n    // used for the proxies it creates.\r\n    struct Proxies.ProxyFactory factory;\r\n\r\n    constructor() public {\r\n        // Initializes the factory struct by deploying the implementation\r\n        // and storing its address.\r\n        factory = Proxies.newFactory(FooUpgradeable.creationCode);\r\n    }\r\n\r\n    // initializerData is the encoded call to the initializer function.\r\n    function deployInstance(address admin, bytes initializerData) public {\r\n        factory.deploy(admin, initializerData);\r\n    }\r\n}\r\n```\r\n\r\nIn this case the factory creates instances of `TransparentUpgradeableProxy`, but the same pattern could be offered for other kinds of proxies. We should think about this as it will affect naming.",
  "closed_by": {
    "login": "frangio",
    "id": 481465,
    "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
    "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/frangio",
    "html_url": "https://github.com/frangio",
    "followers_url": "https://api.github.com/users/frangio/followers",
    "following_url": "https://api.github.com/users/frangio/following{/other_user}",
    "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
    "organizations_url": "https://api.github.com/users/frangio/orgs",
    "repos_url": "https://api.github.com/users/frangio/repos",
    "events_url": "https://api.github.com/users/frangio/events{/privacy}",
    "received_events_url": "https://api.github.com/users/frangio/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2339/reactions",
    "total_count": 2,
    "+1": 2,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2339/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/683086890",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2339#issuecomment-683086890",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2339",
    "id": 683086890,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY4MzA4Njg5MA==",
    "user": {
      "login": "julianmrodri",
      "id": 56316686,
      "node_id": "MDQ6VXNlcjU2MzE2Njg2",
      "avatar_url": "https://avatars.githubusercontent.com/u/56316686?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/julianmrodri",
      "html_url": "https://github.com/julianmrodri",
      "followers_url": "https://api.github.com/users/julianmrodri/followers",
      "following_url": "https://api.github.com/users/julianmrodri/following{/other_user}",
      "gists_url": "https://api.github.com/users/julianmrodri/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/julianmrodri/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/julianmrodri/subscriptions",
      "organizations_url": "https://api.github.com/users/julianmrodri/orgs",
      "repos_url": "https://api.github.com/users/julianmrodri/repos",
      "events_url": "https://api.github.com/users/julianmrodri/events{/privacy}",
      "received_events_url": "https://api.github.com/users/julianmrodri/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-08-28T19:00:47Z",
    "updated_at": "2020-08-28T19:00:47Z",
    "author_association": "CONTRIBUTOR",
    "body": "Really cool. Will find some time early next week to give it a shot if you are ok.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/683086890/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/684211999",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2339#issuecomment-684211999",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2339",
    "id": 684211999,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY4NDIxMTk5OQ==",
    "user": {
      "login": "julianmrodri",
      "id": 56316686,
      "node_id": "MDQ6VXNlcjU2MzE2Njg2",
      "avatar_url": "https://avatars.githubusercontent.com/u/56316686?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/julianmrodri",
      "html_url": "https://github.com/julianmrodri",
      "followers_url": "https://api.github.com/users/julianmrodri/followers",
      "following_url": "https://api.github.com/users/julianmrodri/following{/other_user}",
      "gists_url": "https://api.github.com/users/julianmrodri/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/julianmrodri/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/julianmrodri/subscriptions",
      "organizations_url": "https://api.github.com/users/julianmrodri/orgs",
      "repos_url": "https://api.github.com/users/julianmrodri/repos",
      "events_url": "https://api.github.com/users/julianmrodri/events{/privacy}",
      "received_events_url": "https://api.github.com/users/julianmrodri/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-09-01T04:37:12Z",
    "updated_at": "2020-09-01T04:37:12Z",
    "author_association": "CONTRIBUTOR",
    "body": "@frangio a couple of questions. Would you use `create2` for deploying the implementation code? Also should this library emit any events? (maybe when an instance is deployed?)",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/684211999/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/685047266",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2339#issuecomment-685047266",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2339",
    "id": 685047266,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY4NTA0NzI2Ng==",
    "user": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-09-01T18:16:42Z",
    "updated_at": "2020-09-01T18:17:07Z",
    "author_association": "MEMBER",
    "body": "I don't think libraries can emit events so that wouldn't be an option unfortunately.\r\n\r\nUsing `create2` sounds interesting, although I think there would be some extra storage cost to manage the salt and I don't think that cost would be worth it. Do you see any particularly compelling reasons?",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/685047266/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/685073464",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2339#issuecomment-685073464",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2339",
    "id": 685073464,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY4NTA3MzQ2NA==",
    "user": {
      "login": "julianmrodri",
      "id": 56316686,
      "node_id": "MDQ6VXNlcjU2MzE2Njg2",
      "avatar_url": "https://avatars.githubusercontent.com/u/56316686?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/julianmrodri",
      "html_url": "https://github.com/julianmrodri",
      "followers_url": "https://api.github.com/users/julianmrodri/followers",
      "following_url": "https://api.github.com/users/julianmrodri/following{/other_user}",
      "gists_url": "https://api.github.com/users/julianmrodri/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/julianmrodri/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/julianmrodri/subscriptions",
      "organizations_url": "https://api.github.com/users/julianmrodri/orgs",
      "repos_url": "https://api.github.com/users/julianmrodri/repos",
      "events_url": "https://api.github.com/users/julianmrodri/events{/privacy}",
      "received_events_url": "https://api.github.com/users/julianmrodri/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-09-01T19:05:35Z",
    "updated_at": "2020-09-01T23:00:57Z",
    "author_association": "CONTRIBUTOR",
    "body": "I think libraries can emit events, but its true they dont have their own event log, they use the one of the caller contract but at the same time they are not included in the ABI so its not a good way to go.\r\n\r\nNo, no compelling reason wanted to confirm because is one of the options I considered and in that case i was wondering about the `salt`. ",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/685073464/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/690834718",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2339#issuecomment-690834718",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2339",
    "id": 690834718,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY5MDgzNDcxOA==",
    "user": {
      "login": "abcoathup",
      "id": 28278242,
      "node_id": "MDQ6VXNlcjI4Mjc4MjQy",
      "avatar_url": "https://avatars.githubusercontent.com/u/28278242?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/abcoathup",
      "html_url": "https://github.com/abcoathup",
      "followers_url": "https://api.github.com/users/abcoathup/followers",
      "following_url": "https://api.github.com/users/abcoathup/following{/other_user}",
      "gists_url": "https://api.github.com/users/abcoathup/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/abcoathup/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/abcoathup/subscriptions",
      "organizations_url": "https://api.github.com/users/abcoathup/orgs",
      "repos_url": "https://api.github.com/users/abcoathup/repos",
      "events_url": "https://api.github.com/users/abcoathup/events{/privacy}",
      "received_events_url": "https://api.github.com/users/abcoathup/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-09-11T02:25:31Z",
    "updated_at": "2020-09-11T02:25:31Z",
    "author_association": "CONTRIBUTOR",
    "body": "There is a potential need for a MinimalProxyFactory which includes calculation of the address\r\nhttps://forum.openzeppelin.com/t/how-to-compute-the-create2-address-for-a-minimal-proxy/3595",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/690834718/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/691140664",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2339#issuecomment-691140664",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2339",
    "id": 691140664,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY5MTE0MDY2NA==",
    "user": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-09-11T14:49:05Z",
    "updated_at": "2020-09-11T14:49:22Z",
    "author_association": "MEMBER",
    "body": "I do think that if the design proposed in this issue works well we should apply it to other kinds of proxies. I'm still undecided on the role of `create2`! Maybe it makes sense for the library to expose a function that uses `create2` but accepts the salt as an argument, without having to keep itself track of the salt.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/691140664/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/697488523",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2339#issuecomment-697488523",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2339",
    "id": 697488523,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY5NzQ4ODUyMw==",
    "user": {
      "login": "julianmrodri",
      "id": 56316686,
      "node_id": "MDQ6VXNlcjU2MzE2Njg2",
      "avatar_url": "https://avatars.githubusercontent.com/u/56316686?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/julianmrodri",
      "html_url": "https://github.com/julianmrodri",
      "followers_url": "https://api.github.com/users/julianmrodri/followers",
      "following_url": "https://api.github.com/users/julianmrodri/following{/other_user}",
      "gists_url": "https://api.github.com/users/julianmrodri/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/julianmrodri/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/julianmrodri/subscriptions",
      "organizations_url": "https://api.github.com/users/julianmrodri/orgs",
      "repos_url": "https://api.github.com/users/julianmrodri/repos",
      "events_url": "https://api.github.com/users/julianmrodri/events{/privacy}",
      "received_events_url": "https://api.github.com/users/julianmrodri/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-09-23T14:54:32Z",
    "updated_at": "2020-09-23T14:54:32Z",
    "author_association": "CONTRIBUTOR",
    "body": "Submitted a PR with a bare bones implementation to kickoff discussions. I can certainly add the function that internally uses `create2` if required. Im not happy at all about importing the Proxy code in the library. Im pretty sure theres a better way. ",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/697488523/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/736789852",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2339#issuecomment-736789852",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2339",
    "id": 736789852,
    "node_id": "MDEyOklzc3VlQ29tbWVudDczNjc4OTg1Mg==",
    "user": {
      "login": "0xTimepunk",
      "id": 45543880,
      "node_id": "MDQ6VXNlcjQ1NTQzODgw",
      "avatar_url": "https://avatars.githubusercontent.com/u/45543880?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/0xTimepunk",
      "html_url": "https://github.com/0xTimepunk",
      "followers_url": "https://api.github.com/users/0xTimepunk/followers",
      "following_url": "https://api.github.com/users/0xTimepunk/following{/other_user}",
      "gists_url": "https://api.github.com/users/0xTimepunk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/0xTimepunk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/0xTimepunk/subscriptions",
      "organizations_url": "https://api.github.com/users/0xTimepunk/orgs",
      "repos_url": "https://api.github.com/users/0xTimepunk/repos",
      "events_url": "https://api.github.com/users/0xTimepunk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/0xTimepunk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-12-01T20:10:20Z",
    "updated_at": "2020-12-01T20:10:20Z",
    "author_association": "NONE",
    "body": "Is there a minimal, safe implementation of the Proxy Factory that could be used?",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/736789852/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/736842242",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2339#issuecomment-736842242",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2339",
    "id": 736842242,
    "node_id": "MDEyOklzc3VlQ29tbWVudDczNjg0MjI0Mg==",
    "user": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-12-01T21:49:41Z",
    "updated_at": "2020-12-01T21:49:41Z",
    "author_association": "MEMBER",
    "body": "@j-mars This is not necessarily minimal, but you may be able to adapt the [`ProxyFactory` from OpenZeppelin SDK](https://github.com/OpenZeppelin/openzeppelin-sdk/blob/master/packages/lib/contracts/upgradeability/ProxyFactory.sol).\r\n\r\nCan you share what are your requirements so we can consider offering something in OpenZeppelin Contracts?\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/736842242/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/736846082",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2339#issuecomment-736846082",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2339",
    "id": 736846082,
    "node_id": "MDEyOklzc3VlQ29tbWVudDczNjg0NjA4Mg==",
    "user": {
      "login": "bonedaddy",
      "id": 17089485,
      "node_id": "MDQ6VXNlcjE3MDg5NDg1",
      "avatar_url": "https://avatars.githubusercontent.com/u/17089485?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bonedaddy",
      "html_url": "https://github.com/bonedaddy",
      "followers_url": "https://api.github.com/users/bonedaddy/followers",
      "following_url": "https://api.github.com/users/bonedaddy/following{/other_user}",
      "gists_url": "https://api.github.com/users/bonedaddy/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bonedaddy/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bonedaddy/subscriptions",
      "organizations_url": "https://api.github.com/users/bonedaddy/orgs",
      "repos_url": "https://api.github.com/users/bonedaddy/repos",
      "events_url": "https://api.github.com/users/bonedaddy/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bonedaddy/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-12-01T21:57:47Z",
    "updated_at": "2020-12-01T21:57:47Z",
    "author_association": "NONE",
    "body": "> Is there a minimal, safe implementation of the Proxy Factory that could be used?\r\n\r\nYou can use the following, which is what I'm currently using\r\n\r\n\r\n```Solidity\r\n// import TransparentUpgradeableProxy here\r\n\r\n/**\r\n * @dev Proxy Factory library to create multiple proxy instances at runtime\r\n *\r\n * @notice i modified this to use a contract instead of a library as it was causing errors\r\n *\r\n * These functions implement a simple Factory pattern that can be used to deploy\r\n * multiple proxy instances when the implementation contract needs to be reused. \r\n */\r\ncontract Proxies {\r\n  // Contains the address of the implementation used for the proxies it creates.\r\n  struct ProxyFactory { address implementation; }\r\n\r\n  /**\r\n   * @dev Returns the ProxyFactory struct with the impementation contract address.\r\n   * \r\n   * Initializes the factory struct by deploying the implementation contract and\r\n   * storing its address.\r\n  */\r\n  function newFactory(bytes memory creationCode) internal returns (ProxyFactory memory) {\r\n    address implementationAddr = _deployImplementation(creationCode);\r\n    ProxyFactory memory factory = ProxyFactory(implementationAddr);\r\n    return factory;\r\n  }\r\n\r\n  /**\r\n   * @dev Deploys a Proxy instance with `admin` and initialized with `initializerData\r\n   *\r\n  */\r\n  function deploy(ProxyFactory storage self,address admin, bytes memory initializerData) internal returns (address) {\r\n    TransparentUpgradeableProxy prox = new TransparentUpgradeableProxy(self.implementation, admin, initializerData);\r\n    return address(prox);\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the address of the deployed implementation contract.\r\n   *\r\n   * Creates the implementation contract with `creationCode`.\r\n  */\r\n  function _deployImplementation(bytes memory creationCode) private returns (address) {\r\n    address payable addr;\r\n    // solhint-disable-next-line no-inline-assembly\r\n    assembly {\r\n      addr := create(0, add(creationCode, 0x20), mload(creationCode))\r\n      if iszero(extcodesize(addr)) {\r\n        revert(0, 0)\r\n      }\r\n    }\r\n    return addr;\r\n  }\r\n}\r\n\r\ncontract Factory is Proxies {\r\n\r\n    // This struct contains the address of the implementation that is\r\n    // used for the proxies it creates.\r\n    ProxyFactory factory;\r\n\r\n    constructor(bytes memory _creationCode) {\r\n        // Initializes the factory struct by deploying the implementation\r\n        // and storing its address.\r\n        factory = Proxies.newFactory(_creationCode);\r\n    }\r\n\r\n    // initializerData is the encoded call to the initializer function.\r\n    function deployInstance(address admin, bytes memory initializerData) public returns (address) {\r\n        return deploy(factory, admin, initializerData);\r\n    }\r\n}\r\n```\r\n\r\nExample usage\r\n\r\n\r\n```Solidity\r\ncontract StructAssignTest {\r\n    struct numbers {\r\n        uint256 a;\r\n        uint256 b;\r\n        uint256 c;\r\n    }\r\n\r\n    mapping (uint256 => numbers) public structs;\r\n\r\n    function setMany() public returns (bool) {\r\n        structs[block.number].a = 1;\r\n        structs[block.number].b = 2;\r\n        structs[block.number].c = 3;\r\n        return true;\r\n    }\r\n\r\n    // cheaper than setMany by about 150 gas\r\n    function setSingle() public returns (bool) {\r\n        structs[block.number] = numbers({\r\n            a: 1,\r\n            b: 2,\r\n            c: 3\r\n        });\r\n    }\r\n}\r\n\r\ncontract TestProxyFactory is Factory {\r\n    uint256 public numProxies;\r\n    address[] public proxies;\r\n    event ProxyCreated(address _proxy);\r\n\r\n    constructor() Factory(type(StructAssignTest).creationCode) {}\r\n\r\n    // initializerData is the encoded call to the initializer function.\r\n    function deployProxyContract(address admin, bytes memory initializerData) public returns (address) {\r\n        address prox = deploy(factory, admin, initializerData);\r\n        emit ProxyCreated(prox);\r\n        proxies.push(prox);\r\n        numProxies += 1;\r\n    }\r\n}\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/736846082/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/737167163",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2339#issuecomment-737167163",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2339",
    "id": 737167163,
    "node_id": "MDEyOklzc3VlQ29tbWVudDczNzE2NzE2Mw==",
    "user": {
      "login": "0xTimepunk",
      "id": 45543880,
      "node_id": "MDQ6VXNlcjQ1NTQzODgw",
      "avatar_url": "https://avatars.githubusercontent.com/u/45543880?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/0xTimepunk",
      "html_url": "https://github.com/0xTimepunk",
      "followers_url": "https://api.github.com/users/0xTimepunk/followers",
      "following_url": "https://api.github.com/users/0xTimepunk/following{/other_user}",
      "gists_url": "https://api.github.com/users/0xTimepunk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/0xTimepunk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/0xTimepunk/subscriptions",
      "organizations_url": "https://api.github.com/users/0xTimepunk/orgs",
      "repos_url": "https://api.github.com/users/0xTimepunk/repos",
      "events_url": "https://api.github.com/users/0xTimepunk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/0xTimepunk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-12-02T11:19:31Z",
    "updated_at": "2020-12-02T11:19:31Z",
    "author_association": "NONE",
    "body": "Thank you both @frangio  @bonedaddy ",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/737167163/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/737337261",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2339#issuecomment-737337261",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2339",
    "id": 737337261,
    "node_id": "MDEyOklzc3VlQ29tbWVudDczNzMzNzI2MQ==",
    "user": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-12-02T16:20:11Z",
    "updated_at": "2020-12-02T16:20:11Z",
    "author_association": "MEMBER",
    "body": "@j-mars Can you still share your requirements so we can consider offering something in the library?",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/737337261/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/744474543",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2339#issuecomment-744474543",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2339",
    "id": 744474543,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc0NDQ3NDU0Mw==",
    "user": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-12-14T14:24:59Z",
    "updated_at": "2020-12-14T14:24:59Z",
    "author_association": "MEMBER",
    "body": "I'm no longer a fan of the interface I proposed in this issue, since it requires storing the implementation address in storage (structs can't be `immutable`). This is fine in some cases but people should use `immutable` whenever possible so our pattern should encourage that as the first option.\r\n\r\nWe can revisit this pattern if structs can ever be made immutable.\r\n\r\nFor a minimal proxy factory see https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2437.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/744474543/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
