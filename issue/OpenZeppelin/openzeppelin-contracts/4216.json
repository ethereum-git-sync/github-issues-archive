{
  "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4216",
  "repository_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts",
  "labels_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4216/labels{/name}",
  "comments_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4216/comments",
  "events_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4216/events",
  "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/4216",
  "id": 1696680820,
  "node_id": "I_kwDOA9tCBs5lIUt0",
  "number": 4216,
  "title": "`TimelockController` contract's constructor takes input parameters as `memory` instead of `calldata`",
  "user": {
    "login": "luislucena16",
    "id": 86749595,
    "node_id": "MDQ6VXNlcjg2NzQ5NTk1",
    "avatar_url": "https://avatars.githubusercontent.com/u/86749595?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/luislucena16",
    "html_url": "https://github.com/luislucena16",
    "followers_url": "https://api.github.com/users/luislucena16/followers",
    "following_url": "https://api.github.com/users/luislucena16/following{/other_user}",
    "gists_url": "https://api.github.com/users/luislucena16/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/luislucena16/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/luislucena16/subscriptions",
    "organizations_url": "https://api.github.com/users/luislucena16/orgs",
    "repos_url": "https://api.github.com/users/luislucena16/repos",
    "events_url": "https://api.github.com/users/luislucena16/events{/privacy}",
    "received_events_url": "https://api.github.com/users/luislucena16/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 7,
  "created_at": "2023-05-04T20:49:19Z",
  "updated_at": "2023-06-23T21:35:28Z",
  "closed_at": null,
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "- Location of the smart contract:\r\n\r\nhttps://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/governance/TimelockController.sol#L81\r\n\r\nReason:\r\n- Optimize the smart contract as follows:\r\n```\r\nconstructor(\r\n    uint256 minDelay,\r\n    address[] calldata proponents,\r\n    address[] calldata executors,\r\n    address admin\r\n)\r\n```\r\nReplacing `memory` by `calldata` \r\n",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4216/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4216/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1539420528",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/4216#issuecomment-1539420528",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4216",
    "id": 1539420528,
    "node_id": "IC_kwDOA9tCBs5bwbFw",
    "user": {
      "login": "ernestognw",
      "id": 33379285,
      "node_id": "MDQ6VXNlcjMzMzc5Mjg1",
      "avatar_url": "https://avatars.githubusercontent.com/u/33379285?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ernestognw",
      "html_url": "https://github.com/ernestognw",
      "followers_url": "https://api.github.com/users/ernestognw/followers",
      "following_url": "https://api.github.com/users/ernestognw/following{/other_user}",
      "gists_url": "https://api.github.com/users/ernestognw/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ernestognw/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ernestognw/subscriptions",
      "organizations_url": "https://api.github.com/users/ernestognw/orgs",
      "repos_url": "https://api.github.com/users/ernestognw/repos",
      "events_url": "https://api.github.com/users/ernestognw/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ernestognw/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-05-09T05:14:23Z",
    "updated_at": "2023-05-11T22:24:00Z",
    "author_association": "MEMBER",
    "body": "From @barakman, adding more information:\r\n\r\n> Following [this discussion](https://forum.openzeppelin.com/t/error-in-timelock-using-timelockcrontroller/36007/3?u=barakman) on OZ Forum, [here is the prototype of the TimelockController contract's constructor](https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/governance/TimelockController.sol#L81):\r\n> ```\r\n> constructor(\r\n>     uint256 minDelay,\r\n>     address[] memory proposers,\r\n>     address[] memory executors,\r\n>     address admin\r\n> )\r\n> ```\r\n> You can somewhat reduce the gas consumption of this function, by changing each occurrence of `memory` to `calldata`.\r\n> \r\n> Note that this **may** pose an API-breaking change for:\r\n> - Anyone inheriting from `TimelockController`\r\n> - Anyone creating an instance of this contract onchain (i.e., via `new TimelockController`)",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1539420528/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1544607694",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/4216#issuecomment-1544607694",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4216",
    "id": 1544607694,
    "node_id": "IC_kwDOA9tCBs5cENfO",
    "user": {
      "login": "0xIchigo",
      "id": 96965321,
      "node_id": "U_kgDOBceSyQ",
      "avatar_url": "https://avatars.githubusercontent.com/u/96965321?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/0xIchigo",
      "html_url": "https://github.com/0xIchigo",
      "followers_url": "https://api.github.com/users/0xIchigo/followers",
      "following_url": "https://api.github.com/users/0xIchigo/following{/other_user}",
      "gists_url": "https://api.github.com/users/0xIchigo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/0xIchigo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/0xIchigo/subscriptions",
      "organizations_url": "https://api.github.com/users/0xIchigo/orgs",
      "repos_url": "https://api.github.com/users/0xIchigo/repos",
      "events_url": "https://api.github.com/users/0xIchigo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/0xIchigo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-05-11T20:07:39Z",
    "updated_at": "2023-05-11T20:07:39Z",
    "author_association": "NONE",
    "body": "@ernestognw I'd be interested in opening up a PR to implement this change!\r\n\r\nIn addition to setting the contract's constructor input parameters to `calldata`, there are a few other simple optimizations that can be made to TimelockController.sol to help reduce gas consumption, including:\r\n\r\n- Cache the array's length for the loop condition\r\n    * https://github.com/OpenZeppelin/openzeppelin-contracts/blob/3ec4307c8a79ddfee9bbaf1f26435c908fae0cae/contracts/governance/TimelockController.sol#L96\r\n    * https://github.com/OpenZeppelin/openzeppelin-contracts/blob/3ec4307c8a79ddfee9bbaf1f26435c908fae0cae/contracts/governance/TimelockController.sol#L102\r\n    * https://github.com/OpenZeppelin/openzeppelin-contracts/blob/3ec4307c8a79ddfee9bbaf1f26435c908fae0cae/contracts/governance/TimelockController.sol#L257\r\n    * https://github.com/OpenZeppelin/openzeppelin-contracts/blob/3ec4307c8a79ddfee9bbaf1f26435c908fae0cae/contracts/governance/TimelockController.sol#L340\r\n- With for loops, increment the variable  `i` in an unchecked block\r\n    * Same instances as above\r\n    * Reasonable to assume that these arrays of addresses provided will not overflow before exceeding the block gas limit \r\n- Use custom errors to save [~50 gas](https://gist.github.com/IllIllI000/ad1bd0d29a0101b25e57c293b4b0c746) each time they are reached\r\n    * https://github.com/OpenZeppelin/openzeppelin-contracts/blob/3ec4307c8a79ddfee9bbaf1f26435c908fae0cae/contracts/governance/TimelockController.sol#L252\r\n    * https://github.com/OpenZeppelin/openzeppelin-contracts/blob/3ec4307c8a79ddfee9bbaf1f26435c908fae0cae/contracts/governance/TimelockController.sol#L253\r\n    * https://github.com/OpenZeppelin/openzeppelin-contracts/blob/3ec4307c8a79ddfee9bbaf1f26435c908fae0cae/contracts/governance/TimelockController.sol#L269\r\n    * https://github.com/OpenZeppelin/openzeppelin-contracts/blob/3ec4307c8a79ddfee9bbaf1f26435c908fae0cae/contracts/governance/TimelockController.sol#L270\r\n    * https://github.com/OpenZeppelin/openzeppelin-contracts/blob/3ec4307c8a79ddfee9bbaf1f26435c908fae0cae/contracts/governance/TimelockController.sol#L282\r\n    * https://github.com/OpenZeppelin/openzeppelin-contracts/blob/3ec4307c8a79ddfee9bbaf1f26435c908fae0cae/contracts/governance/TimelockController.sol#L334\r\n    * https://github.com/OpenZeppelin/openzeppelin-contracts/blob/3ec4307c8a79ddfee9bbaf1f26435c908fae0cae/contracts/governance/TimelockController.sol#L335\r\n    * https://github.com/OpenZeppelin/openzeppelin-contracts/blob/3ec4307c8a79ddfee9bbaf1f26435c908fae0cae/contracts/governance/TimelockController.sol#L355\r\n    * https://github.com/OpenZeppelin/openzeppelin-contracts/blob/3ec4307c8a79ddfee9bbaf1f26435c908fae0cae/contracts/governance/TimelockController.sol#L362\r\n    * https://github.com/OpenZeppelin/openzeppelin-contracts/blob/3ec4307c8a79ddfee9bbaf1f26435c908fae0cae/contracts/governance/TimelockController.sol#L363\r\n    * https://github.com/OpenZeppelin/openzeppelin-contracts/blob/3ec4307c8a79ddfee9bbaf1f26435c908fae0cae/contracts/governance/TimelockController.sol#L370\r\n    * https://github.com/OpenZeppelin/openzeppelin-contracts/blob/3ec4307c8a79ddfee9bbaf1f26435c908fae0cae/contracts/governance/TimelockController.sol#L385\r\n\r\nThese are pretty low-hanging fruit and won't pose huge change to, or a complete overhaul of, `TimelockController`. Please let me know what you think about these optimizations! I am very eager to help out",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1544607694/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1544790399",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/4216#issuecomment-1544790399",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4216",
    "id": 1544790399,
    "node_id": "IC_kwDOA9tCBs5cE6F_",
    "user": {
      "login": "ernestognw",
      "id": 33379285,
      "node_id": "MDQ6VXNlcjMzMzc5Mjg1",
      "avatar_url": "https://avatars.githubusercontent.com/u/33379285?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ernestognw",
      "html_url": "https://github.com/ernestognw",
      "followers_url": "https://api.github.com/users/ernestognw/followers",
      "following_url": "https://api.github.com/users/ernestognw/following{/other_user}",
      "gists_url": "https://api.github.com/users/ernestognw/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ernestognw/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ernestognw/subscriptions",
      "organizations_url": "https://api.github.com/users/ernestognw/orgs",
      "repos_url": "https://api.github.com/users/ernestognw/repos",
      "events_url": "https://api.github.com/users/ernestognw/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ernestognw/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-05-11T22:50:04Z",
    "updated_at": "2023-05-11T22:50:04Z",
    "author_association": "MEMBER",
    "body": "Hey @0xIchigo, you can go ahead and create a PR for solving the issue this thread is about: `calldata` vs `memory` in the `TimelockController` constructor, the others might require more discussion from our side.\r\n\r\nHowever, this is my perspective on each one of them:\r\n\r\n> - Cache the array's length for the loop condition\r\n>     ...\r\n\r\nI don't see reasons for not doing these and it's not breaking so it should be fine.\r\n\r\n> With for loops, increment the variable i in an unchecked block\r\n> - Same instances as above\r\n> - Reasonable to assume that these arrays of addresses provided will not overflow before exceeding the block gas limit\r\n\r\nThese are a little bit risky since they involve readability, I think we'd overall prefer not to do them since:\r\n\r\n1. The operations are not called a significant amount of times over the lifecycle of the contract\r\n2. The gas savings might be very small unless you're looping thousands of proposals/proposers/executors, which seems unlikely\r\n\r\nCorrect me if I'm wrong on number 2 but both reasons together make a good reason to make a discussion first.\r\n\r\n> Use custom errors to save [~50 gas](https://gist.github.com/IllIllI000/ad1bd0d29a0101b25e57c293b4b0c746) each time they are reached\r\n> ...\r\n\r\nWe're already working on a major migration to custom errors. You can see the discussion in #2839. The TLDR is that we proposed EIP ([6093](https://eips.ethereum.org/EIPS/eip-6093)) for standard tokens and we'll use the same rationale to design the custom errors for the whole library.\r\n\r\nA big nuance we're currently facing is deciding how many parameters to add to a custom error so that they're useful enough without sacrificing the optimization itself. Consider that a change in parameters to a custom error could be considered a breaking change, so once Contracts 5.0 is released, we may be locked. We'd appreciate feedback (if any) on how to design the errors. The discussion for that [is here](https://ethereum-magicians.org/t/eip-6093-custom-errors-for-commonly-used-tokens/12043).\r\n\r\nWill wait for input from @frangio on this before giving you the green light. Thank you for your willingness to contribute!",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1544790399/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1545072027",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/4216#issuecomment-1545072027",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4216",
    "id": 1545072027,
    "node_id": "IC_kwDOA9tCBs5cF-2b",
    "user": {
      "login": "0xIchigo",
      "id": 96965321,
      "node_id": "U_kgDOBceSyQ",
      "avatar_url": "https://avatars.githubusercontent.com/u/96965321?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/0xIchigo",
      "html_url": "https://github.com/0xIchigo",
      "followers_url": "https://api.github.com/users/0xIchigo/followers",
      "following_url": "https://api.github.com/users/0xIchigo/following{/other_user}",
      "gists_url": "https://api.github.com/users/0xIchigo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/0xIchigo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/0xIchigo/subscriptions",
      "organizations_url": "https://api.github.com/users/0xIchigo/orgs",
      "repos_url": "https://api.github.com/users/0xIchigo/repos",
      "events_url": "https://api.github.com/users/0xIchigo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/0xIchigo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-05-12T03:58:54Z",
    "updated_at": "2023-05-12T03:58:54Z",
    "author_association": "NONE",
    "body": "Hey @ernestognw, I appreciate your quick response! I'll go ahead and create a PR for solving the `calldata` vs `memory` issue in the `TimelockController` constructor.\r\n\r\nWith respect to incrementing the variable `i` in an unchecked block, I've drawn up this [test contract](https://gist.github.com/0xIchigo/f3533c2cd70bfffcce6bbdc5ab5e44d7) in Remix. Incrementing in an unchecked block can save roughly 30-40 gas per iteration, which can be quite significant for lengthy loops. Even with smaller loops, like in the test case of five iterations, incrementing in an unchecked block cut gas costs by 28.7%. Incrementing in an unchecked block for 100 iterations cut gas costs by 32.2%. Incrementing in an unchecked block for 1000 iterations cut gas costs by 32.6%.\r\n\r\nWith respect to readability, the unchecked block can be placed at the bottom of the for loop instead of being placed inline with the initialization and condition. Instead of having a hard to read for loop header, the complexity is abstracted away with the unchecked block at bottom of the loop. I'd argue that a reduction of roughly 28.7% - 32.2% for iterations <= 100 would warrant this optimization, although I see how this is not 100% ideal in terms of readability since you'd be splitting up the loop's initialization, condition, and iteration. Regardless, I am a firm believer that any optimizations, irrespective of their size, that can be easily implemented without posing too great of an impact to the contract's structure, functionality, and adoption should be implemented.  \r\n\r\nI'll checkout the discussion regarding EIP 6093, and see if I have any feedback on designing the errors, thanks!",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1545072027/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1545085494",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/4216#issuecomment-1545085494",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4216",
    "id": 1545085494,
    "node_id": "IC_kwDOA9tCBs5cGCI2",
    "user": {
      "login": "0xIchigo",
      "id": 96965321,
      "node_id": "U_kgDOBceSyQ",
      "avatar_url": "https://avatars.githubusercontent.com/u/96965321?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/0xIchigo",
      "html_url": "https://github.com/0xIchigo",
      "followers_url": "https://api.github.com/users/0xIchigo/followers",
      "following_url": "https://api.github.com/users/0xIchigo/following{/other_user}",
      "gists_url": "https://api.github.com/users/0xIchigo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/0xIchigo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/0xIchigo/subscriptions",
      "organizations_url": "https://api.github.com/users/0xIchigo/orgs",
      "repos_url": "https://api.github.com/users/0xIchigo/repos",
      "events_url": "https://api.github.com/users/0xIchigo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/0xIchigo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-05-12T04:16:00Z",
    "updated_at": "2023-05-12T04:16:00Z",
    "author_association": "NONE",
    "body": "Hey @ernestognw, sorry for the double ping but I just realized that we cannot optimize the `TimelockController` contract's constructor as the input parameters must either be of type `storage` or `memory`, given that the contract is written to the chain immediately followed by the constructor parameter data. The constructor then reads the values by looking them up at that offset, so constructor parameters can not be of type `calldata`.\r\n\r\nIf possible, I'd still like to go ahead with creating a PR to optimize the for loops found within `TimelockController`",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1545085494/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1545368340",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/4216#issuecomment-1545368340",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4216",
    "id": 1545368340,
    "node_id": "IC_kwDOA9tCBs5cHHMU",
    "user": {
      "login": "barakman",
      "id": 7003246,
      "node_id": "MDQ6VXNlcjcwMDMyNDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7003246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/barakman",
      "html_url": "https://github.com/barakman",
      "followers_url": "https://api.github.com/users/barakman/followers",
      "following_url": "https://api.github.com/users/barakman/following{/other_user}",
      "gists_url": "https://api.github.com/users/barakman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/barakman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/barakman/subscriptions",
      "organizations_url": "https://api.github.com/users/barakman/orgs",
      "repos_url": "https://api.github.com/users/barakman/repos",
      "events_url": "https://api.github.com/users/barakman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/barakman/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-05-12T08:22:53Z",
    "updated_at": "2023-05-12T08:23:11Z",
    "author_association": "CONTRIBUTOR",
    "body": "> > With for loops, increment the variable i in an unchecked block\r\n> > \r\n> > * Same instances as above\r\n> > * Reasonable to assume that these arrays of addresses provided will not overflow before exceeding the block gas limit\r\n\r\nFYI, the length of dynamic arrays is bounded by `2**64-1` (following [this memory-creation-overflow-bug](https://blog.soliditylang.org/2020/04/06/memory-creation-overflow-bug/)).\r\n\r\nSo an overflow in the loop counter could not occur here even theoretically, regardless of the block gas limit.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1545368340/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1605007478",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/4216#issuecomment-1605007478",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4216",
    "id": 1605007478,
    "node_id": "IC_kwDOA9tCBs5fqnh2",
    "user": {
      "login": "hiroshitash",
      "id": 1159921,
      "node_id": "MDQ6VXNlcjExNTk5MjE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1159921?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hiroshitash",
      "html_url": "https://github.com/hiroshitash",
      "followers_url": "https://api.github.com/users/hiroshitash/followers",
      "following_url": "https://api.github.com/users/hiroshitash/following{/other_user}",
      "gists_url": "https://api.github.com/users/hiroshitash/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hiroshitash/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hiroshitash/subscriptions",
      "organizations_url": "https://api.github.com/users/hiroshitash/orgs",
      "repos_url": "https://api.github.com/users/hiroshitash/repos",
      "events_url": "https://api.github.com/users/hiroshitash/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hiroshitash/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-06-23T21:35:28Z",
    "updated_at": "2023-06-23T21:35:28Z",
    "author_association": "NONE",
    "body": "https://ethereum.stackexchange.com/questions/125100/the-reason-why-cant-i-use-calldata-as-a-data-location-for-constructor-parameter#:~:text=It's%20because%20the%20constructor%20is,them%20up%20at%20that%20offset.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1605007478/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
