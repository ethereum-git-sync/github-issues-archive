{
  "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4107",
  "repository_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts",
  "labels_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4107/labels{/name}",
  "comments_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4107/comments",
  "events_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4107/events",
  "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/4107",
  "id": 1619971603,
  "node_id": "I_kwDOA9tCBs5gjs4T",
  "number": 4107,
  "title": "Redundant check in ERC20",
  "user": {
    "login": "grGred",
    "id": 81467635,
    "node_id": "MDQ6VXNlcjgxNDY3NjM1",
    "avatar_url": "https://avatars.githubusercontent.com/u/81467635?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/grGred",
    "html_url": "https://github.com/grGred",
    "followers_url": "https://api.github.com/users/grGred/followers",
    "following_url": "https://api.github.com/users/grGred/following{/other_user}",
    "gists_url": "https://api.github.com/users/grGred/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/grGred/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/grGred/subscriptions",
    "organizations_url": "https://api.github.com/users/grGred/orgs",
    "repos_url": "https://api.github.com/users/grGred/repos",
    "events_url": "https://api.github.com/users/grGred/events{/privacy}",
    "received_events_url": "https://api.github.com/users/grGred/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/milestones/11",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/milestone/11",
    "labels_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/milestones/11/labels",
    "id": 7990184,
    "node_id": "MI_kwDOA9tCBs4Aeeuo",
    "number": 11,
    "title": "5.0",
    "description": null,
    "creator": {
      "login": "Amxx",
      "id": 2432299,
      "node_id": "MDQ6VXNlcjI0MzIyOTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2432299?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Amxx",
      "html_url": "https://github.com/Amxx",
      "followers_url": "https://api.github.com/users/Amxx/followers",
      "following_url": "https://api.github.com/users/Amxx/following{/other_user}",
      "gists_url": "https://api.github.com/users/Amxx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Amxx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Amxx/subscriptions",
      "organizations_url": "https://api.github.com/users/Amxx/orgs",
      "repos_url": "https://api.github.com/users/Amxx/repos",
      "events_url": "https://api.github.com/users/Amxx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Amxx/received_events",
      "type": "User",
      "site_admin": false
    },
    "open_issues": 43,
    "closed_issues": 21,
    "state": "open",
    "created_at": "2022-05-17T19:52:44Z",
    "updated_at": "2023-06-02T17:21:01Z",
    "due_on": null,
    "closed_at": null
  },
  "comments": 6,
  "created_at": "2023-03-11T11:15:50Z",
  "updated_at": "2023-05-31T18:42:33Z",
  "closed_at": null,
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "**üßê Motivation**\r\nIn the [`ERC20`](https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol#L223) token contract the validation:\r\n```Solidity\r\n require(from != address(0), \"ERC20: transfer from the zero address\");\r\n```\r\nis redundant.\r\nThis `require` may fail only in case, when address(0) calls the `transfer` function, which is unreal circumstances.\r\n<!-- Is your feature request related to a specific problem? Is it just a crazy idea? Tell us about it! -->\r\n\r\n**üìù Details**\r\nThe only time, when this `require` may fail is when `transferFrom` function is called where `owner` address is `address(0)`.\r\nBut before the `_transfer` call there is a [`_spendAllowance`](https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol#L160) call, after which [`_approve`](https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol#L329) is called.\r\nSo, finally, the transaction will revert in [`_approve`](https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol#L309) function with error message: \"ERC20: approve from the zero address\".\r\n\r\nI think:\r\n* Validation in `_transfer` function of zero address is redundant.\r\n* The case, when user tries to make `transferFrom` from zero address has very strange reason of the revert. I made transfer - but the error is about approve.\r\n<!-- Please describe your feature request in detail. -->\r\n\r\n<!-- Make sure that you have reviewed the OpenZeppelin Contracts Contributor Guidelines. -->\r\n<!-- https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/CONTRIBUTING.md -->\r\n",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4107/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4107/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1467191707",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/4107#issuecomment-1467191707",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4107",
    "id": 1467191707,
    "node_id": "IC_kwDOA9tCBs5Xc5Gb",
    "user": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-03-14T01:08:24Z",
    "updated_at": "2023-03-14T01:08:24Z",
    "author_association": "MEMBER",
    "body": "Thanks for the suggestions. We need to explore this a bit more. Personally I think relying on the check in `_spendAllowance` is too indirect.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1467191707/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1564190415",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/4107#issuecomment-1564190415",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4107",
    "id": 1564190415,
    "node_id": "IC_kwDOA9tCBs5dO6bP",
    "user": {
      "login": "balajipachai",
      "id": 32358081,
      "node_id": "MDQ6VXNlcjMyMzU4MDgx",
      "avatar_url": "https://avatars.githubusercontent.com/u/32358081?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/balajipachai",
      "html_url": "https://github.com/balajipachai",
      "followers_url": "https://api.github.com/users/balajipachai/followers",
      "following_url": "https://api.github.com/users/balajipachai/following{/other_user}",
      "gists_url": "https://api.github.com/users/balajipachai/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/balajipachai/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/balajipachai/subscriptions",
      "organizations_url": "https://api.github.com/users/balajipachai/orgs",
      "repos_url": "https://api.github.com/users/balajipachai/repos",
      "events_url": "https://api.github.com/users/balajipachai/events{/privacy}",
      "received_events_url": "https://api.github.com/users/balajipachai/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-05-26T10:40:22Z",
    "updated_at": "2023-05-26T10:40:22Z",
    "author_association": "CONTRIBUTOR",
    "body": "@frangio \r\n**A few more redundant address zero checks in ERC20 are as follows:**\r\n\r\n```\r\nfunction increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        address owner = _msgSender(); =====> owner will never be address(0)\r\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\r\n        return true;\r\n}\r\n\r\nfunction decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        address owner = _msgSender(); =====> owner will never be address(0)\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        unchecked {\r\n            _approve(owner, spender, currentAllowance - subtractedValue);\r\n}\r\n\r\nfunction _approve(address owner, address spender, uint256 amount) internal virtual {\r\n**THE BELOW CHECK owner != address(0) BECOME USELESS WHEN APPROVE IS BEING \r\nCALLED FROM increaseAllowance & decreaseAllowance**\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n}\r\n\r\nHENCE IN THIS CASE, IN BOTH increaseAllowance & decreaseAllowance the \r\nrequire(spender != address(0), \"ERC20: approve to the zero address\"); statement must be moved from\r\n_approve() to these functions respectively. This ensures only one require statement is executed.\r\n ```\r\n\r\n**Let us consider `transferFrom(address from, address to, uint256 amount)`**\r\n\r\n```\r\nfunction transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\r\n        address spender = _msgSender(); =====>  spender will never be address(0)\r\n        _spendAllowance(from, spender, amount); **THIS INTERNALLY CALLS _approve()**\r\n        _transfer(from, to, amount);\r\n        return true;\r\n}\r\n\r\nHence, here from != address(0) & to != address(0) check must be performed in transferFrom function itself,\r\nthis would remove both redundant checks from `_approve` & `_transfer`.\r\n```\r\n**Let us consider `approve(address spender, uint256 amount)`**\r\n\r\n```\r\nfunction approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        address owner = _msgSender(); =====> owner will never be address(0)\r\n        _approve(owner, spender, amount);\r\n        return true;\r\n}\r\n\r\nTHIS INTERNALLY CALLS _approve(), and again the redundant check in _approve,\r\nthus, here we can check spender != address(0) and the redundant checks from _approve()\r\ncan be removed safely\r\n```\r\n\r\n**Let us consider `transfer(address to, uint256 amount)`**\r\n\r\n```\r\nfunction transfer(address to, uint256 amount) public virtual override returns (bool) {\r\n        address owner = _msgSender(); =====> owner will never be address(0)\r\n        _transfer(owner, to, amount);\r\n        return true;\r\n}\r\n\r\nTHIS INTERNALLY CALLS _transfer() which does redundant address(0) checks for\r\nfrom & to not equal to address(0), if we add to != address(0) check in this function\r\nitself then the from & to check can be safely removed from the _transfer function\r\n```\r\n\r\nSummary:\r\n\r\n- Redundant address(0) checks from _approve can be safely removed.\r\n- Redundant address(0) checks from _transfer can be safely removed.\r\n- This would bring down the transaction cost as well.\r\n\r\nLet me know your inputs, if all seems good, I will get started with it and update the code and tests and submit a PR.\r\n\r\n       ",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1564190415/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1564485879",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/4107#issuecomment-1564485879",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4107",
    "id": 1564485879,
    "node_id": "IC_kwDOA9tCBs5dQCj3",
    "user": {
      "login": "Amxx",
      "id": 2432299,
      "node_id": "MDQ6VXNlcjI0MzIyOTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2432299?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Amxx",
      "html_url": "https://github.com/Amxx",
      "followers_url": "https://api.github.com/users/Amxx/followers",
      "following_url": "https://api.github.com/users/Amxx/following{/other_user}",
      "gists_url": "https://api.github.com/users/Amxx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Amxx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Amxx/subscriptions",
      "organizations_url": "https://api.github.com/users/Amxx/orgs",
      "repos_url": "https://api.github.com/users/Amxx/repos",
      "events_url": "https://api.github.com/users/Amxx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Amxx/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-05-26T14:32:05Z",
    "updated_at": "2023-05-26T14:33:29Z",
    "author_association": "COLLABORATOR",
    "body": "> Validation in `_transfer` function of zero address is redundant.\r\n\r\nYou may be missing that `_transfer` is an internal function that may be used by devs to plug into the contracts. We want to make it clear that using 0 as a `from` address is invalid. Keep in mind that a `0` address could be generated by an unsafe call to `ecrecover`.\r\n\r\nSame goes for `_approve`.\r\n\r\nWe are not designing this function just for our own use, but also for devs to plug into. If they were private, then yes, the check would not be strictly necessary ... but they are internal and they could be called in all sorts of way we don't control.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1564485879/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1564489454",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/4107#issuecomment-1564489454",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4107",
    "id": 1564489454,
    "node_id": "IC_kwDOA9tCBs5dQDbu",
    "user": {
      "login": "Amxx",
      "id": 2432299,
      "node_id": "MDQ6VXNlcjI0MzIyOTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2432299?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Amxx",
      "html_url": "https://github.com/Amxx",
      "followers_url": "https://api.github.com/users/Amxx/followers",
      "following_url": "https://api.github.com/users/Amxx/following{/other_user}",
      "gists_url": "https://api.github.com/users/Amxx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Amxx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Amxx/subscriptions",
      "organizations_url": "https://api.github.com/users/Amxx/orgs",
      "repos_url": "https://api.github.com/users/Amxx/repos",
      "events_url": "https://api.github.com/users/Amxx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Amxx/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-05-26T14:34:27Z",
    "updated_at": "2023-05-26T14:34:27Z",
    "author_association": "COLLABORATOR",
    "body": "Also, please note that we are currently working on the `next-v5.0` branch in preparation of the next major release, and that the transfer logic is very different on that branch.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1564489454/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1565175341",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/4107#issuecomment-1565175341",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4107",
    "id": 1565175341,
    "node_id": "IC_kwDOA9tCBs5dSq4t",
    "user": {
      "login": "balajipachai",
      "id": 32358081,
      "node_id": "MDQ6VXNlcjMyMzU4MDgx",
      "avatar_url": "https://avatars.githubusercontent.com/u/32358081?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/balajipachai",
      "html_url": "https://github.com/balajipachai",
      "followers_url": "https://api.github.com/users/balajipachai/followers",
      "following_url": "https://api.github.com/users/balajipachai/following{/other_user}",
      "gists_url": "https://api.github.com/users/balajipachai/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/balajipachai/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/balajipachai/subscriptions",
      "organizations_url": "https://api.github.com/users/balajipachai/orgs",
      "repos_url": "https://api.github.com/users/balajipachai/repos",
      "events_url": "https://api.github.com/users/balajipachai/events{/privacy}",
      "received_events_url": "https://api.github.com/users/balajipachai/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-05-27T02:53:03Z",
    "updated_at": "2023-05-27T02:53:03Z",
    "author_association": "CONTRIBUTOR",
    "body": "Perfect, I would love to be part of the development process of `next-v5.0`, could you help me with those tasks, s.t. I can target their completion?",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1565175341/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1570733876",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/4107#issuecomment-1570733876",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4107",
    "id": 1570733876,
    "node_id": "IC_kwDOA9tCBs5dn380",
    "user": {
      "login": "balajipachai",
      "id": 32358081,
      "node_id": "MDQ6VXNlcjMyMzU4MDgx",
      "avatar_url": "https://avatars.githubusercontent.com/u/32358081?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/balajipachai",
      "html_url": "https://github.com/balajipachai",
      "followers_url": "https://api.github.com/users/balajipachai/followers",
      "following_url": "https://api.github.com/users/balajipachai/following{/other_user}",
      "gists_url": "https://api.github.com/users/balajipachai/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/balajipachai/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/balajipachai/subscriptions",
      "organizations_url": "https://api.github.com/users/balajipachai/orgs",
      "repos_url": "https://api.github.com/users/balajipachai/repos",
      "events_url": "https://api.github.com/users/balajipachai/events{/privacy}",
      "received_events_url": "https://api.github.com/users/balajipachai/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-05-31T18:42:33Z",
    "updated_at": "2023-05-31T18:42:33Z",
    "author_association": "CONTRIBUTOR",
    "body": "@Amxx Any updates on this?",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1570733876/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
