{
  "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2108",
  "repository_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts",
  "labels_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2108/labels{/name}",
  "comments_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2108/comments",
  "events_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2108/events",
  "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2108",
  "id": 575538192,
  "node_id": "MDU6SXNzdWU1NzU1MzgxOTI=",
  "number": 2108,
  "title": "ECDSA recover for EIP-155 transaction signatures",
  "user": {
    "login": "forshtat",
    "id": 40541447,
    "node_id": "MDQ6VXNlcjQwNTQxNDQ3",
    "avatar_url": "https://avatars.githubusercontent.com/u/40541447?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/forshtat",
    "html_url": "https://github.com/forshtat",
    "followers_url": "https://api.github.com/users/forshtat/followers",
    "following_url": "https://api.github.com/users/forshtat/following{/other_user}",
    "gists_url": "https://api.github.com/users/forshtat/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/forshtat/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/forshtat/subscriptions",
    "organizations_url": "https://api.github.com/users/forshtat/orgs",
    "repos_url": "https://api.github.com/users/forshtat/repos",
    "events_url": "https://api.github.com/users/forshtat/events{/privacy}",
    "received_events_url": "https://api.github.com/users/forshtat/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 3,
  "created_at": "2020-03-04T16:06:02Z",
  "updated_at": "2020-03-04T19:34:42Z",
  "closed_at": "2020-03-04T16:53:40Z",
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "**üßê Motivation**\r\nWe have been using the ECDSA.sol in the RelayHub to do an ecrecover of transaction signatures, not message signatures (in the 'penalize()' method).\r\nThis does work for pre-eip155 transaction signatures, but for post-155 signature, the 'v' parameter has to be calculated separately before passing the signature to 'recover'.\r\nAlso, I think in some similar cases, it may be necessary for 'ecrecover' to also check if the signature is valid for the current chainID. What do you think?\r\n\r\n**üìù Details**\r\n<!-- Please describe your feature request in detail. -->\r\n\r\n<!-- Make sure that you have reviewed the OpenZeppelin Contributor Guidelines. -->\r\n<!-- https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/CONTRIBUTING.md -->\r\n",
  "closed_by": {
    "login": "forshtat",
    "id": 40541447,
    "node_id": "MDQ6VXNlcjQwNTQxNDQ3",
    "avatar_url": "https://avatars.githubusercontent.com/u/40541447?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/forshtat",
    "html_url": "https://github.com/forshtat",
    "followers_url": "https://api.github.com/users/forshtat/followers",
    "following_url": "https://api.github.com/users/forshtat/following{/other_user}",
    "gists_url": "https://api.github.com/users/forshtat/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/forshtat/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/forshtat/subscriptions",
    "organizations_url": "https://api.github.com/users/forshtat/orgs",
    "repos_url": "https://api.github.com/users/forshtat/repos",
    "events_url": "https://api.github.com/users/forshtat/events{/privacy}",
    "received_events_url": "https://api.github.com/users/forshtat/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2108/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2108/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/594730692",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2108#issuecomment-594730692",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2108",
    "id": 594730692,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU5NDczMDY5Mg==",
    "user": {
      "login": "nventuro",
      "id": 2530770,
      "node_id": "MDQ6VXNlcjI1MzA3NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2530770?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nventuro",
      "html_url": "https://github.com/nventuro",
      "followers_url": "https://api.github.com/users/nventuro/followers",
      "following_url": "https://api.github.com/users/nventuro/following{/other_user}",
      "gists_url": "https://api.github.com/users/nventuro/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nventuro/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nventuro/subscriptions",
      "organizations_url": "https://api.github.com/users/nventuro/orgs",
      "repos_url": "https://api.github.com/users/nventuro/repos",
      "events_url": "https://api.github.com/users/nventuro/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nventuro/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-03-04T18:28:19Z",
    "updated_at": "2020-03-04T18:28:19Z",
    "author_association": "CONTRIBUTOR",
    "body": "I believe I had considered EIP155 signatures for RelayHub, and there was a way to craft a `penalize` call even if those were used, though I'm fuzzy on the details. The chainID would require using the [specialized opcode](https://eips.ethereum.org/EIPS/eip-1344) (is this available in Solidity?), but it should be doable. \r\n\r\nWhat sort of interface did you have in mind for this?",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/594730692/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/594775076",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2108#issuecomment-594775076",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2108",
    "id": 594775076,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU5NDc3NTA3Ng==",
    "user": {
      "login": "forshtat",
      "id": 40541447,
      "node_id": "MDQ6VXNlcjQwNTQxNDQ3",
      "avatar_url": "https://avatars.githubusercontent.com/u/40541447?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/forshtat",
      "html_url": "https://github.com/forshtat",
      "followers_url": "https://api.github.com/users/forshtat/followers",
      "following_url": "https://api.github.com/users/forshtat/following{/other_user}",
      "gists_url": "https://api.github.com/users/forshtat/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/forshtat/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/forshtat/subscriptions",
      "organizations_url": "https://api.github.com/users/forshtat/orgs",
      "repos_url": "https://api.github.com/users/forshtat/repos",
      "events_url": "https://api.github.com/users/forshtat/events{/privacy}",
      "received_events_url": "https://api.github.com/users/forshtat/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-03-04T19:26:22Z",
    "updated_at": "2020-03-04T19:28:17Z",
    "author_association": "NONE",
    "body": "@nventuro I gave it some more thought and realized it is not as simple or useful as I thought, so I closed the issue. \r\n\r\nI now realize that as it is only applicable to entire transactions, which sounds like an edge-case, and the required interface for this would be something like this:\r\n```function recover(bytes  memory unsignedRlpEncodedTx, bytes memory signature) internal pure returns (address) {...}```\r\nSo that if V == 38, the code can read the ChainID from the transaction, compare it to the current ChainID,  and either fail if these don't match or compute ```actualV = v - (chainId * 2 + 8 )``` and proceed with the recover. \r\n\r\nRelayHub can live without it, we don't need to care whether the transaction was targeting this particular chain in 'penalize' flow.\r\n\r\nP.S. Solidity allows chainID opcode in assembly.\r\nP.S.S. If you think this can in fact be useful I can make a PR in no time",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/594775076/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/594781454",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2108#issuecomment-594781454",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2108",
    "id": 594781454,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU5NDc4MTQ1NA==",
    "user": {
      "login": "nventuro",
      "id": 2530770,
      "node_id": "MDQ6VXNlcjI1MzA3NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2530770?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nventuro",
      "html_url": "https://github.com/nventuro",
      "followers_url": "https://api.github.com/users/nventuro/followers",
      "following_url": "https://api.github.com/users/nventuro/following{/other_user}",
      "gists_url": "https://api.github.com/users/nventuro/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nventuro/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nventuro/subscriptions",
      "organizations_url": "https://api.github.com/users/nventuro/orgs",
      "repos_url": "https://api.github.com/users/nventuro/repos",
      "events_url": "https://api.github.com/users/nventuro/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nventuro/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-03-04T19:34:42Z",
    "updated_at": "2020-03-04T19:34:42Z",
    "author_association": "CONTRIBUTOR",
    "body": "Indeed, I'd say computing the signer for an Ethereum transaction is quite a strange scenario for a smart contract, I'd be interested to learn about applications that need to do this.\r\n\r\nGiven that RelayHub is not one of these, we can keep this closed. Thanks!",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/594781454/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
