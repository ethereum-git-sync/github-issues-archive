{
  "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4201",
  "repository_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts",
  "labels_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4201/labels{/name}",
  "comments_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4201/comments",
  "events_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4201/events",
  "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/4201",
  "id": 1687869830,
  "node_id": "I_kwDOA9tCBs5kmtmG",
  "number": 4201,
  "title": "[governance] Gas optimization in state function of Governor contract",
  "user": {
    "login": "TheSnakeWitcher",
    "id": 70303003,
    "node_id": "MDQ6VXNlcjcwMzAzMDAz",
    "avatar_url": "https://avatars.githubusercontent.com/u/70303003?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/TheSnakeWitcher",
    "html_url": "https://github.com/TheSnakeWitcher",
    "followers_url": "https://api.github.com/users/TheSnakeWitcher/followers",
    "following_url": "https://api.github.com/users/TheSnakeWitcher/following{/other_user}",
    "gists_url": "https://api.github.com/users/TheSnakeWitcher/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/TheSnakeWitcher/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/TheSnakeWitcher/subscriptions",
    "organizations_url": "https://api.github.com/users/TheSnakeWitcher/orgs",
    "repos_url": "https://api.github.com/users/TheSnakeWitcher/repos",
    "events_url": "https://api.github.com/users/TheSnakeWitcher/events{/privacy}",
    "received_events_url": "https://api.github.com/users/TheSnakeWitcher/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 2,
  "created_at": "2023-04-28T04:15:53Z",
  "updated_at": "2023-04-28T13:25:42Z",
  "closed_at": "2023-04-28T13:25:41Z",
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "Maybe there is something that I am not aware of, but I think that\r\nthe line\r\n\r\n```solidity\r\nProposalCore storage proposal = _proposals[proposalId]\r\n```\r\n\r\ncan be substituted by\r\n\r\n```solidity\r\nProposalCore memory proposal = _proposals[proposalId]\r\n```\r\n\r\nRationale is that `proposal` is never mutated, and we are reading\r\nunnecessarily from storage here\r\n\r\n```solidity\r\n        if (proposal.executed) {\r\n            return ProposalState.Executed;\r\n        }\r\n\r\n        if (proposal.canceled) {\r\n            return ProposalState.Canceled;\r\n        }\r\n```\r\n\r\nFull code next\r\n\r\n```solidity\r\n    /**\r\n     * @dev See {IGovernor-state}.\r\n     */\r\n    function state(uint256 proposalId) public view virtual override returns (ProposalState) {\r\n        ProposalCore storage proposal = _proposals[proposalId];\r\n\r\n        if (proposal.executed) {\r\n            return ProposalState.Executed;\r\n        }\r\n\r\n        if (proposal.canceled) {\r\n            return ProposalState.Canceled;\r\n        }\r\n\r\n        uint256 snapshot = proposalSnapshot(proposalId);\r\n\r\n        if (snapshot == 0) {\r\n            revert(\"Governor: unknown proposal id\");\r\n        }\r\n\r\n        uint256 currentTimepoint = clock();\r\n\r\n        if (snapshot >= currentTimepoint) {\r\n            return ProposalState.Pending;\r\n        }\r\n\r\n        uint256 deadline = proposalDeadline(proposalId);\r\n\r\n        if (deadline >= currentTimepoint) {\r\n            return ProposalState.Active;\r\n        }\r\n\r\n        if (_quorumReached(proposalId) && _voteSucceeded(proposalId)) {\r\n            return ProposalState.Succeeded;\r\n        } else {\r\n            return ProposalState.Defeated;\r\n        }\r\n    }\r\n```",
  "closed_by": {
    "login": "TheSnakeWitcher",
    "id": 70303003,
    "node_id": "MDQ6VXNlcjcwMzAzMDAz",
    "avatar_url": "https://avatars.githubusercontent.com/u/70303003?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/TheSnakeWitcher",
    "html_url": "https://github.com/TheSnakeWitcher",
    "followers_url": "https://api.github.com/users/TheSnakeWitcher/followers",
    "following_url": "https://api.github.com/users/TheSnakeWitcher/following{/other_user}",
    "gists_url": "https://api.github.com/users/TheSnakeWitcher/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/TheSnakeWitcher/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/TheSnakeWitcher/subscriptions",
    "organizations_url": "https://api.github.com/users/TheSnakeWitcher/orgs",
    "repos_url": "https://api.github.com/users/TheSnakeWitcher/repos",
    "events_url": "https://api.github.com/users/TheSnakeWitcher/events{/privacy}",
    "received_events_url": "https://api.github.com/users/TheSnakeWitcher/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4201/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4201/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1527469851",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/4201#issuecomment-1527469851",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4201",
    "id": 1527469851,
    "node_id": "IC_kwDOA9tCBs5bC1cb",
    "user": {
      "login": "Amxx",
      "id": 2432299,
      "node_id": "MDQ6VXNlcjI0MzIyOTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2432299?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Amxx",
      "html_url": "https://github.com/Amxx",
      "followers_url": "https://api.github.com/users/Amxx/followers",
      "following_url": "https://api.github.com/users/Amxx/following{/other_user}",
      "gists_url": "https://api.github.com/users/Amxx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Amxx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Amxx/subscriptions",
      "organizations_url": "https://api.github.com/users/Amxx/orgs",
      "repos_url": "https://api.github.com/users/Amxx/repos",
      "events_url": "https://api.github.com/users/Amxx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Amxx/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-04-28T12:07:16Z",
    "updated_at": "2023-04-28T12:07:16Z",
    "author_association": "COLLABORATOR",
    "body": "Hello\r\n\r\nThe rational for using storage instead of memory is that we don't want to load all the slots unless it is necessary.\r\n\r\nA proposal currently uses 3 slots:\r\n- one for `voteStart` and `proposer`\r\n- one for `voteEnd`\r\n- one for `executed` and `cancelled`.\r\n\r\nCurrently, we indeed have to sload the last one twice. Once for checking execute and once for checking canceled.\r\nBut if we used memory as your propose we would read all 3 slots. Sure we would avoid one \"hot\" sload (which would save 100 gas) ... but we would also be causing 2 unecessary sloads. That is (200 ~ 4000) more gas depending on the situation.\r\n\r\nWe are planning to improve packing of the proposal details in 5.0, but until then there is no real room for optimisations.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1527469851/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1527561926",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/4201#issuecomment-1527561926",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4201",
    "id": 1527561926,
    "node_id": "IC_kwDOA9tCBs5bDL7G",
    "user": {
      "login": "TheSnakeWitcher",
      "id": 70303003,
      "node_id": "MDQ6VXNlcjcwMzAzMDAz",
      "avatar_url": "https://avatars.githubusercontent.com/u/70303003?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheSnakeWitcher",
      "html_url": "https://github.com/TheSnakeWitcher",
      "followers_url": "https://api.github.com/users/TheSnakeWitcher/followers",
      "following_url": "https://api.github.com/users/TheSnakeWitcher/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheSnakeWitcher/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheSnakeWitcher/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheSnakeWitcher/subscriptions",
      "organizations_url": "https://api.github.com/users/TheSnakeWitcher/orgs",
      "repos_url": "https://api.github.com/users/TheSnakeWitcher/repos",
      "events_url": "https://api.github.com/users/TheSnakeWitcher/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheSnakeWitcher/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-04-28T13:25:41Z",
    "updated_at": "2023-04-28T13:25:41Z",
    "author_association": "NONE",
    "body": "Oh, cool, thanks for the explanation",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1527561926/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
