{
  "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2928",
  "repository_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts",
  "labels_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2928/labels{/name}",
  "comments_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2928/comments",
  "events_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2928/events",
  "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2928",
  "id": 1038891804,
  "node_id": "I_kwDOA9tCBs497Dsc",
  "number": 2928,
  "title": "Simpler and cheaper version of ERC721Enumerable for projects minting sequentially",
  "user": {
    "login": "Lcressot",
    "id": 12514349,
    "node_id": "MDQ6VXNlcjEyNTE0MzQ5",
    "avatar_url": "https://avatars.githubusercontent.com/u/12514349?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/Lcressot",
    "html_url": "https://github.com/Lcressot",
    "followers_url": "https://api.github.com/users/Lcressot/followers",
    "following_url": "https://api.github.com/users/Lcressot/following{/other_user}",
    "gists_url": "https://api.github.com/users/Lcressot/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/Lcressot/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/Lcressot/subscriptions",
    "organizations_url": "https://api.github.com/users/Lcressot/orgs",
    "repos_url": "https://api.github.com/users/Lcressot/repos",
    "events_url": "https://api.github.com/users/Lcressot/events{/privacy}",
    "received_events_url": "https://api.github.com/users/Lcressot/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 2,
  "created_at": "2021-10-28T19:44:23Z",
  "updated_at": "2021-10-29T00:39:59Z",
  "closed_at": "2021-10-28T20:29:55Z",
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "**üßê Motivation**\r\n<!-- Is your feature request related to a specific problem? Is it just a crazy idea? Tell us about it! -->\r\nI noticed that ERC721Enumerable is great for keeping track of each owner items in a list, but it is quite expensive as there are several mappings. In the case of sequentially minted NFTs, only one mapping is required, which reduces drastically the fees. (NOTE : I used uint16 to lower gas slightly in my code but it should be uint256).\r\n\r\n**üìù Details**\r\n<!-- Please describe your feature request in detail. -->\r\n\r\n<!-- Make sure that you have reviewed the OpenZeppelin Contracts Contributor Guidelines. -->\r\n<!-- https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/CONTRIBUTING.md -->\r\nBelow is my proposal, keeping only this mapping `mapping(address => uint16[]) private _ownedTokens;`. I also kept trace of minted and burnt tokens for the `totalSupply()` function.\r\n\r\n```\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport '@openzeppelin/contracts/token/ERC721/ERC721.sol';\r\n\r\n/**\r\n * @dev A simplified version of ERC721Enumerable to only keep the _ownedTokens and save gas\r\n */\r\nabstract contract ERC721SimpleEnumerable is ERC721 {\r\n    // Mapping from owner to list of owned token IDs\r\n    mapping(address => uint16[]) private _ownedTokens;\r\n\r\n    uint256 public tokensMinted;\r\n    uint256 public tokensBurnt;\r\n\r\n    function totalSupply() public view returns (uint256){\r\n        return tokensMinted - tokensBurnt;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\r\n     */\r\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual returns (uint16) {\r\n        require(index < ERC721.balanceOf(owner), \"ERC721SimpleEnumerable: owner index out of bounds\");\r\n        return _ownedTokens[owner][index];\r\n    }\r\n\r\n    /**\r\n     * @dev Get list of tokens ids owned by an owner\r\n     */\r\n    function tokenListOfOwner(address owner) public view virtual returns (uint16[] memory) {\r\n        return _ownedTokens[owner];\r\n    }    \r\n\r\n    /**\r\n     * @dev Hook that is called before any token transfer. This includes minting\r\n     * and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\r\n     * transferred to `to`.\r\n     * - When `from` is zero, `tokenId` will be minted for `to`.\r\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) internal virtual override {\r\n        super._beforeTokenTransfer(from, to, tokenId);\r\n\r\n        if (to != from) {\r\n            _addTokenToOwnerEnumeration(to, tokenId); // also keeps trace of burnt tokens\r\n            if (from!=address(0)) {\r\n                _removeTokenFromOwnerEnumeration(from, tokenId);\r\n            }else{ // minting\r\n                tokensMinted++;\r\n            }\r\n            if (to==address(0)){ // burning\r\n                tokensBurnt++;\r\n            }\r\n        }      \r\n    }\r\n\r\n    /**\r\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\r\n     * @param to address representing the new owner of the given token ID\r\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\r\n     */\r\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\r\n        _ownedTokens[to].push(uint16(tokenId));\r\n    }\r\n\r\n    /**\r\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures.\r\n     * @param from address representing the previous owner of the given token ID\r\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\r\n     */\r\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\r\n        uint16[] storage ownerList = _ownedTokens[from];\r\n        uint tokenIndex = ownerList.length;\r\n        for(uint i=0; i<ownerList.length; i++){\r\n            if(ownerList[i] == uint16(tokenId)){\r\n                tokenIndex = i;\r\n                break;\r\n            }\r\n        }\r\n        require(tokenIndex < ownerList.length, \"ERC721SimpleEnumerable: tokenId not found in owner list\");\r\n        for (uint i = tokenIndex; i<ownerList.length-1; i++){\r\n            ownerList[i] = ownerList[i+1];\r\n        }\r\n        ownerList.pop();\r\n    }\r\n\r\n}\r\n```\r\n",
  "closed_by": {
    "login": "Amxx",
    "id": 2432299,
    "node_id": "MDQ6VXNlcjI0MzIyOTk=",
    "avatar_url": "https://avatars.githubusercontent.com/u/2432299?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/Amxx",
    "html_url": "https://github.com/Amxx",
    "followers_url": "https://api.github.com/users/Amxx/followers",
    "following_url": "https://api.github.com/users/Amxx/following{/other_user}",
    "gists_url": "https://api.github.com/users/Amxx/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/Amxx/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/Amxx/subscriptions",
    "organizations_url": "https://api.github.com/users/Amxx/orgs",
    "repos_url": "https://api.github.com/users/Amxx/repos",
    "events_url": "https://api.github.com/users/Amxx/events{/privacy}",
    "received_events_url": "https://api.github.com/users/Amxx/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2928/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2928/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/954179373",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2928#issuecomment-954179373",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2928",
    "id": 954179373,
    "node_id": "IC_kwDOA9tCBs44358t",
    "user": {
      "login": "Amxx",
      "id": 2432299,
      "node_id": "MDQ6VXNlcjI0MzIyOTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2432299?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Amxx",
      "html_url": "https://github.com/Amxx",
      "followers_url": "https://api.github.com/users/Amxx/followers",
      "following_url": "https://api.github.com/users/Amxx/following{/other_user}",
      "gists_url": "https://api.github.com/users/Amxx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Amxx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Amxx/subscriptions",
      "organizations_url": "https://api.github.com/users/Amxx/orgs",
      "repos_url": "https://api.github.com/users/Amxx/repos",
      "events_url": "https://api.github.com/users/Amxx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Amxx/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-10-28T20:29:52Z",
    "updated_at": "2021-10-28T20:29:52Z",
    "author_association": "COLLABORATOR",
    "body": "Hello @Lcressot \r\n\r\nWhile this might work for you, there is absolutely no guarantee that the tokens ids are fit inside a uint16. If you mint tokens sequentially that might be good, but many projects do not do that. The ERC721 standard says nothing about sequentially, and described the token Ids as uint256.\r\n\r\nWe understand this might save gas and not cause issues in your particular case, but it is not generic, and we wouldn't want to ship something like that which will be error prone.\r\n\r\nALso, we always insist that on-chain enumerability is expensive and should be considered carefully. Even if your option saves you some gas, there really is no point in paying any enumerability gas unless it's really needed. AFAIK, most project only use that for things like \"user gallery\", which do not require onchain enumerability in the first place. Subgraphs (or other similar solutions) like [this one](https://thegraph.com/explorer/subgraph?id=0x7859821024e633c5dc8a4fcf86fc52e7720ce525-0&view=Playground) are often way better solutions. ",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/954179373/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/954322013",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2928#issuecomment-954322013",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2928",
    "id": 954322013,
    "node_id": "IC_kwDOA9tCBs444cxd",
    "user": {
      "login": "Lcressot",
      "id": 12514349,
      "node_id": "MDQ6VXNlcjEyNTE0MzQ5",
      "avatar_url": "https://avatars.githubusercontent.com/u/12514349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Lcressot",
      "html_url": "https://github.com/Lcressot",
      "followers_url": "https://api.github.com/users/Lcressot/followers",
      "following_url": "https://api.github.com/users/Lcressot/following{/other_user}",
      "gists_url": "https://api.github.com/users/Lcressot/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Lcressot/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Lcressot/subscriptions",
      "organizations_url": "https://api.github.com/users/Lcressot/orgs",
      "repos_url": "https://api.github.com/users/Lcressot/repos",
      "events_url": "https://api.github.com/users/Lcressot/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Lcressot/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-10-29T00:39:59Z",
    "updated_at": "2021-10-29T00:39:59Z",
    "author_association": "NONE",
    "body": "@Amxx Thanks you are right, I should use graphs instead !",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/954322013/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
