{
  "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3201",
  "repository_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts",
  "labels_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3201/labels{/name}",
  "comments_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3201/comments",
  "events_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3201/events",
  "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3201",
  "id": 1143812205,
  "node_id": "I_kwDOA9tCBs5ELTBt",
  "number": 3201,
  "title": "ERC721PaymentSplitter Extension Contract Proposal",
  "user": {
    "login": "hanselb",
    "id": 5930195,
    "node_id": "MDQ6VXNlcjU5MzAxOTU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/5930195?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/hanselb",
    "html_url": "https://github.com/hanselb",
    "followers_url": "https://api.github.com/users/hanselb/followers",
    "following_url": "https://api.github.com/users/hanselb/following{/other_user}",
    "gists_url": "https://api.github.com/users/hanselb/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/hanselb/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/hanselb/subscriptions",
    "organizations_url": "https://api.github.com/users/hanselb/orgs",
    "repos_url": "https://api.github.com/users/hanselb/repos",
    "events_url": "https://api.github.com/users/hanselb/events{/privacy}",
    "received_events_url": "https://api.github.com/users/hanselb/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 15,
  "created_at": "2022-02-18T21:44:56Z",
  "updated_at": "2022-04-16T16:30:42Z",
  "closed_at": null,
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "**üßê Motivation**\r\n<!-- Is your feature request related to a specific problem? Is it just a crazy idea? Tell us about it! -->\r\nWe are trying to find an official way to discretely/transparently distribute rewards among token holders. I am certain we can accomplish this by combining the **ERC721**,  **ERC721Enumerable**,  **PaymentSplitter** contracts. This would allow creators to share ETH or ERC-20 tokens proportionally among holders. \r\n\r\n**üìù Details**\r\nI have extended **ERC721Enumerable** and used most of the functions of **PaymentSplitter** but removed `payees[]` and made `_totalShares` a function that returns the **ERC721Enumerable**'s `totalSupply` _(or override to `maxSupply` if we want to save shares for future token holders)_.\r\n\r\nThis allows me to add two public methods to the ERC721, ` release(tokenId)` and `release(account)` to distribute payment using `ownerOf(tokenId)` and `tokenOfOwnerByIndex(account)` internally. \r\n\r\nI also added  `_pendingPayment(account)` and `_pendingPayment(tokenId)` and use it to check on before token transfer for release to owner _(or leaving it for future claim by changing `_releaseOnTranser` to false which can be set in the constructor)_ \r\n\r\nI am adding this to start the dialog while I work on cleaning my code and tests before submitting my PR.  I have a working prototype of this concept here [0x68ddddc10323f8b8e3fe3514dcdb70381af12e85](https://rinkeby.etherscan.io/address/0x68ddddc10323f8b8e3fe3514dcdb70381af12e85)\r\n\r\n\r\n<!-- Make sure that you have reviewed the OpenZeppelin Contracts Contributor Guidelines. -->\r\n<!-- https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/CONTRIBUTING.md -->\r\n",
  "closed_by": {
    "login": "hanselb",
    "id": 5930195,
    "node_id": "MDQ6VXNlcjU5MzAxOTU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/5930195?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/hanselb",
    "html_url": "https://github.com/hanselb",
    "followers_url": "https://api.github.com/users/hanselb/followers",
    "following_url": "https://api.github.com/users/hanselb/following{/other_user}",
    "gists_url": "https://api.github.com/users/hanselb/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/hanselb/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/hanselb/subscriptions",
    "organizations_url": "https://api.github.com/users/hanselb/orgs",
    "repos_url": "https://api.github.com/users/hanselb/repos",
    "events_url": "https://api.github.com/users/hanselb/events{/privacy}",
    "received_events_url": "https://api.github.com/users/hanselb/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3201/reactions",
    "total_count": 1,
    "+1": 1,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3201/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1079762747",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3201#issuecomment-1079762747",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3201",
    "id": 1079762747,
    "node_id": "IC_kwDOA9tCBs5AW987",
    "user": {
      "login": "mw2000",
      "id": 11898068,
      "node_id": "MDQ6VXNlcjExODk4MDY4",
      "avatar_url": "https://avatars.githubusercontent.com/u/11898068?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mw2000",
      "html_url": "https://github.com/mw2000",
      "followers_url": "https://api.github.com/users/mw2000/followers",
      "following_url": "https://api.github.com/users/mw2000/following{/other_user}",
      "gists_url": "https://api.github.com/users/mw2000/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mw2000/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mw2000/subscriptions",
      "organizations_url": "https://api.github.com/users/mw2000/orgs",
      "repos_url": "https://api.github.com/users/mw2000/repos",
      "events_url": "https://api.github.com/users/mw2000/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mw2000/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-03-26T19:47:38Z",
    "updated_at": "2022-03-26T19:47:38Z",
    "author_association": "CONTRIBUTOR",
    "body": "@hanselb have you been able to clean the code and add tests yet? If not I can go ahead and submit a PR for this.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1079762747/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1079776615",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3201#issuecomment-1079776615",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3201",
    "id": 1079776615,
    "node_id": "IC_kwDOA9tCBs5AXBVn",
    "user": {
      "login": "hanselb",
      "id": 5930195,
      "node_id": "MDQ6VXNlcjU5MzAxOTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5930195?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hanselb",
      "html_url": "https://github.com/hanselb",
      "followers_url": "https://api.github.com/users/hanselb/followers",
      "following_url": "https://api.github.com/users/hanselb/following{/other_user}",
      "gists_url": "https://api.github.com/users/hanselb/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hanselb/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hanselb/subscriptions",
      "organizations_url": "https://api.github.com/users/hanselb/orgs",
      "repos_url": "https://api.github.com/users/hanselb/repos",
      "events_url": "https://api.github.com/users/hanselb/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hanselb/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-03-26T21:18:55Z",
    "updated_at": "2022-03-26T21:18:55Z",
    "author_association": "NONE",
    "body": "@mw2000 I have not been able to work on it too much. Please let me know if you do create a PR that way I can take a look at it üôè",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1079776615/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1083660404",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3201#issuecomment-1083660404",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3201",
    "id": 1083660404,
    "node_id": "IC_kwDOA9tCBs5Al1h0",
    "user": {
      "login": "hanselb",
      "id": 5930195,
      "node_id": "MDQ6VXNlcjU5MzAxOTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5930195?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hanselb",
      "html_url": "https://github.com/hanselb",
      "followers_url": "https://api.github.com/users/hanselb/followers",
      "following_url": "https://api.github.com/users/hanselb/following{/other_user}",
      "gists_url": "https://api.github.com/users/hanselb/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hanselb/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hanselb/subscriptions",
      "organizations_url": "https://api.github.com/users/hanselb/orgs",
      "repos_url": "https://api.github.com/users/hanselb/repos",
      "events_url": "https://api.github.com/users/hanselb/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hanselb/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-03-30T21:51:25Z",
    "updated_at": "2022-03-30T21:51:25Z",
    "author_association": "NONE",
    "body": "@mw2000 would you benefit from me posting what I have in this thread to use as reference? I would love to collaborate and get this done as soon as we can üôåüèΩ",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1083660404/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1083662198",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3201#issuecomment-1083662198",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3201",
    "id": 1083662198,
    "node_id": "IC_kwDOA9tCBs5Al192",
    "user": {
      "login": "mw2000",
      "id": 11898068,
      "node_id": "MDQ6VXNlcjExODk4MDY4",
      "avatar_url": "https://avatars.githubusercontent.com/u/11898068?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mw2000",
      "html_url": "https://github.com/mw2000",
      "followers_url": "https://api.github.com/users/mw2000/followers",
      "following_url": "https://api.github.com/users/mw2000/following{/other_user}",
      "gists_url": "https://api.github.com/users/mw2000/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mw2000/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mw2000/subscriptions",
      "organizations_url": "https://api.github.com/users/mw2000/orgs",
      "repos_url": "https://api.github.com/users/mw2000/repos",
      "events_url": "https://api.github.com/users/mw2000/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mw2000/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-03-30T21:53:01Z",
    "updated_at": "2022-03-30T21:53:01Z",
    "author_association": "CONTRIBUTOR",
    "body": "Hey @hanselb yup that could be really helpful! I haven't begun work on this yet, but this would be a good starting point.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1083662198/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1083662751",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3201#issuecomment-1083662751",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3201",
    "id": 1083662751,
    "node_id": "IC_kwDOA9tCBs5Al2Gf",
    "user": {
      "login": "mw2000",
      "id": 11898068,
      "node_id": "MDQ6VXNlcjExODk4MDY4",
      "avatar_url": "https://avatars.githubusercontent.com/u/11898068?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mw2000",
      "html_url": "https://github.com/mw2000",
      "followers_url": "https://api.github.com/users/mw2000/followers",
      "following_url": "https://api.github.com/users/mw2000/following{/other_user}",
      "gists_url": "https://api.github.com/users/mw2000/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mw2000/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mw2000/subscriptions",
      "organizations_url": "https://api.github.com/users/mw2000/orgs",
      "repos_url": "https://api.github.com/users/mw2000/repos",
      "events_url": "https://api.github.com/users/mw2000/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mw2000/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-03-30T21:53:32Z",
    "updated_at": "2022-03-30T21:53:32Z",
    "author_association": "CONTRIBUTOR",
    "body": "I also would want to tag @Amxx snd @frangio to this thread to hear their thoughts about it.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1083662751/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 1,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1084058728",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3201#issuecomment-1084058728",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3201",
    "id": 1084058728,
    "node_id": "IC_kwDOA9tCBs5AnWxo",
    "user": {
      "login": "hanselb",
      "id": 5930195,
      "node_id": "MDQ6VXNlcjU5MzAxOTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5930195?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hanselb",
      "html_url": "https://github.com/hanselb",
      "followers_url": "https://api.github.com/users/hanselb/followers",
      "following_url": "https://api.github.com/users/hanselb/following{/other_user}",
      "gists_url": "https://api.github.com/users/hanselb/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hanselb/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hanselb/subscriptions",
      "organizations_url": "https://api.github.com/users/hanselb/orgs",
      "repos_url": "https://api.github.com/users/hanselb/repos",
      "events_url": "https://api.github.com/users/hanselb/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hanselb/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-03-31T04:22:30Z",
    "updated_at": "2022-03-31T04:51:45Z",
    "author_association": "NONE",
    "body": "Just got this to compile on remix but I have not tested this structure a lot. My original design didn't include the release functions for ERC20 tokens I have added those back to keep it matched in features to the current PaymentSplitter.\r\n\r\n@mw2000 please feel free to optimize/refactor this as needed. As long as we have the same logic I don't mind making big changes to the structure of this. Or if you find any issues with my design, of course, please let me know so I can help.\r\n\r\nI was also thinking about a model where we could create an ERC721PaymentSplitter for an existing ERC721 collection. Maybe one where we would pass the address of the collection to the constructor and we ask the questions to the contract.  Let me know if you guys would benefit from that pattern too üôåüèΩ\r\n\r\nAdding @Amxx and @frangio as requested . Thank you so much guys.\r\n\r\n```solidity\r\n// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (token/ERC721/extensions/ERC721PaymentSplitter.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\nimport \"@openzeppelin/contracts/utils/Address.sol\";\r\n\r\n/**\r\n * @dev Extension of ERC721 with the PaymentSplitter, a standardized way to split Ether and ERC20 payments\r\n * among a group of accounts, split can be  in equal parts and based on {totalSupply} and {ownerOf}.\r\n *\r\n * In this Extension PaymentSplitter {_totalShares} is a funciton which returns ERC721Enumerable\r\n * {totalSupply}, each token owner receives `1` share. {tokenOfOwnerByIndex} is used at the time of\r\n * release to get the current owner to release the payments.\r\n *\r\n * IMPORTANT: On transfer, any pending payment will be released to the previous owner or kept in the token.\r\n * This can be modified by setting property {_releaseOnTransfer} to false.\r\n *\r\n */\r\nabstract contract ERC721PaymentSplitter is ERC721, ERC721Enumerable {\r\n    event PaymentReleased(address to, uint256 amount);\r\n    event ERC20PaymentReleased(IERC20 indexed token, address to, uint256 amount);\r\n    event PaymentReceived(address from, uint256 amount);\r\n\r\n    uint256 private _totalReleased;\r\n    bool private _releaseOnTransfer = true;\r\n    mapping(uint256 => uint256) private _released;\r\n\r\n    mapping(IERC20 => uint256) private _erc20TotalReleased;\r\n    mapping(IERC20 => mapping(uint256 => uint256)) private _erc20Released;\r\n\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) internal virtual override(ERC721, ERC721Enumerable) {\r\n        super._beforeTokenTransfer(from, to, tokenId);\r\n        if (from != address(0) && _pendingPayment(tokenId) > 0 && _releaseOnTransfer) {\r\n            release(tokenId);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev The Ether received will be logged with {PaymentReceived} events. Note that these events are not fully\r\n     * reliable: it's possible for a contract to receive Ether without triggering this function. This only affects the\r\n     * reliability of the events, and not the actual splitting of Ether.\r\n     *\r\n     * To learn more about this see the Solidity documentation for\r\n     * https://solidity.readthedocs.io/en/latest/contracts.html#fallback-function[fallback\r\n     * functions].\r\n     */\r\n    receive() external payable virtual {\r\n        emit PaymentReceived(_msgSender(), msg.value);\r\n    }\r\n\r\n    function supportsInterface(bytes4 interfaceId) public view override(ERC721, ERC721Enumerable) returns (bool) {\r\n        return super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    function release(IERC20 token, address payable account) public virtual {\r\n        uint256 _ownedTokens = balanceOf(account);\r\n        require(_ownedTokens > 0, \"ERC721PaymentSplitter: account has no tokens\");\r\n        uint256 totalPayment = _pendingPayment(token, account);\r\n        require(totalPayment > 0, \"ERC721PaymentSplitter: account is not due payment\");\r\n\r\n        Address.sendValue(account, totalPayment);\r\n\r\n        _totalReleased += totalPayment;\r\n        for (uint256 i = 0; i < (_ownedTokens); i++) {\r\n            uint256 currentToken = tokenOfOwnerByIndex(account, i);\r\n            uint256 paymentForToken = _pendingPayment(token,currentToken);\r\n            _released[currentToken] += paymentForToken;\r\n        }\r\n        emit PaymentReleased(account, totalPayment);\r\n    }\r\n\r\n    function release(address payable account) public virtual {\r\n        uint256 _ownedTokens = balanceOf(account);\r\n        require(_ownedTokens > 0, \"ERC721PaymentSplitter: account has no tokens\");\r\n        uint256 totalPayment = _pendingPayment(account);\r\n        require(totalPayment > 0, \"ERC721PaymentSplitter: account is not due payment\");\r\n\r\n        Address.sendValue(account, totalPayment);\r\n\r\n        _totalReleased += totalPayment;\r\n        for (uint256 i = 0; i < (_ownedTokens); i++) {\r\n            uint256 currentToken = tokenOfOwnerByIndex(account, i);\r\n            uint256 paymentForToken = _pendingPayment(currentToken);\r\n            _released[currentToken] += paymentForToken;\r\n        }\r\n        emit PaymentReleased(account, totalPayment);\r\n    }\r\n\r\n    function release(uint256 tokenId) public virtual {\r\n        address tokenOwner = ownerOf(tokenId);\r\n        require(tokenOwner != address(0), \"ERC721PaymentSplitter: tokenId owner is the zero address\");\r\n\r\n        uint256 _tokenPendingPayment = _pendingPayment(tokenId);\r\n        require(_tokenPendingPayment > 0, \"ERC721PaymentSplitter: tokenId is not due any payments\");\r\n        Address.sendValue(payable(tokenOwner), _tokenPendingPayment);\r\n        _totalReleased += _tokenPendingPayment;\r\n        _released[tokenId] += _tokenPendingPayment;\r\n        emit PaymentReleased(tokenOwner, _tokenPendingPayment);\r\n    }\r\n\r\n    /**\r\n     * @dev Triggers a transfer to `account` of the amount of `token` tokens they are owed, according to their\r\n     * percentage of the total shares and their previous withdrawals. `token` must be the address of an IERC20\r\n     * contract.\r\n     */\r\n    function release(IERC20 token, uint256 tokenId) public virtual {\r\n        address tokenOwner = ownerOf(tokenId);\r\n        require(tokenOwner != address(0), \"ERC721PaymentSplitter: tokenId owner is the zero address\");\r\n\r\n        uint256 payment = _pendingPayment(token, tokenId);\r\n\r\n        uint256 _tokenPendingPayment = _pendingPayment(token, tokenId);\r\n        require(_tokenPendingPayment > 0, \"ERC721PaymentSplitter: tokenId is not due any payments\");\r\n\r\n        _erc20Released[token][tokenId] += payment;\r\n        _erc20TotalReleased[token] += payment;\r\n\r\n        SafeERC20.safeTransfer(token, tokenOwner, payment);\r\n        emit ERC20PaymentReleased(token, tokenOwner, payment);\r\n    }\r\n\r\n    function _pendingPayment(IERC20 token, uint256 tokenId) private view returns (uint256) {\r\n        return (token.balanceOf(address(this)) + totalReleased(token)) / totalSupply() - released(token, tokenId);\r\n    }\r\n\r\n    function _pendingPayment(uint256 tokenId) private view returns (uint256) {\r\n        return (address(this).balance + totalReleased()) / totalSupply() - _released[tokenId];\r\n    }\r\n\r\n    function _pendingPayment(address account) private view returns (uint256) {\r\n        uint256 totalPayment = 0;\r\n        uint256 _ownedTokens = balanceOf(account);\r\n\r\n        for (uint256 i = 0; i < (_ownedTokens); i++) {\r\n            uint256 currentToken = tokenOfOwnerByIndex(account, i);\r\n            uint256 paymentForToken = _pendingPayment(currentToken);\r\n            totalPayment += paymentForToken;\r\n        }\r\n        return totalPayment;\r\n    }\r\n\r\n    function _pendingPayment(IERC20 token, address account) private view returns (uint256) {\r\n        uint256 totalPayment = 0;\r\n        uint256 _ownedTokens = balanceOf(account);\r\n\r\n        for (uint256 i = 0; i < (_ownedTokens); i++) {\r\n            uint256 currentToken = tokenOfOwnerByIndex(account, i);\r\n            uint256 paymentForToken = _pendingPayment(token, currentToken);\r\n            totalPayment += paymentForToken;\r\n        }\r\n        return totalPayment;\r\n    }\r\n\r\n    function totalReleased() public view returns (uint256) {\r\n        return _totalReleased;\r\n    }\r\n\r\n    /**\r\n     * @dev Getter for the amount of `token` tokens already released to a payee. `token` should be the address of an\r\n     * IERC20 contract.\r\n     */\r\n    function released(IERC20 token, uint256 tokenId) public view returns (uint256) {\r\n        return _erc20Released[token][tokenId];\r\n    }\r\n\r\n    /**\r\n     * @dev Getter for the total amount of `token` already released. `token` should be the address of an IERC20\r\n     * contract.\r\n     */\r\n    function totalReleased(IERC20 token) public view returns (uint256) {\r\n        return _erc20TotalReleased[token];\r\n    }\r\n}\r\n\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1084058728/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1084073155",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3201#issuecomment-1084073155",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3201",
    "id": 1084073155,
    "node_id": "IC_kwDOA9tCBs5AnaTD",
    "user": {
      "login": "hanselb",
      "id": 5930195,
      "node_id": "MDQ6VXNlcjU5MzAxOTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5930195?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hanselb",
      "html_url": "https://github.com/hanselb",
      "followers_url": "https://api.github.com/users/hanselb/followers",
      "following_url": "https://api.github.com/users/hanselb/following{/other_user}",
      "gists_url": "https://api.github.com/users/hanselb/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hanselb/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hanselb/subscriptions",
      "organizations_url": "https://api.github.com/users/hanselb/orgs",
      "repos_url": "https://api.github.com/users/hanselb/repos",
      "events_url": "https://api.github.com/users/hanselb/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hanselb/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-03-31T04:53:08Z",
    "updated_at": "2022-03-31T04:53:08Z",
    "author_association": "NONE",
    "body": "using it\r\n```solidity\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.4;\r\n\r\nimport \"./ERC721PaymentSplitter.sol\";\r\n\r\ncontract MyToken is ERC721PaymentSplitter {\r\n    constructor() ERC721(\"MyToken\", \"MTK\") {}   \r\n}\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1084073155/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1084248140",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3201#issuecomment-1084248140",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3201",
    "id": 1084248140,
    "node_id": "IC_kwDOA9tCBs5AoFBM",
    "user": {
      "login": "Amxx",
      "id": 2432299,
      "node_id": "MDQ6VXNlcjI0MzIyOTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2432299?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Amxx",
      "html_url": "https://github.com/Amxx",
      "followers_url": "https://api.github.com/users/Amxx/followers",
      "following_url": "https://api.github.com/users/Amxx/following{/other_user}",
      "gists_url": "https://api.github.com/users/Amxx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Amxx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Amxx/subscriptions",
      "organizations_url": "https://api.github.com/users/Amxx/orgs",
      "repos_url": "https://api.github.com/users/Amxx/repos",
      "events_url": "https://api.github.com/users/Amxx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Amxx/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-03-31T08:15:37Z",
    "updated_at": "2022-03-31T08:15:37Z",
    "author_association": "COLLABORATOR",
    "body": "Hello,\r\n\r\nWe usually try to separate concerns and avoid code duplication. What you are doing doesn't really fit into this philosophy. Also, this code relies on unbounded loops (which is always a big no to us) and on ERC721Enumerable (which we discourage people from using).\r\n\r\nIf you want to look into a \"cleaner\" approach, I worked on an [AbstractPaymentSplitter](https://github.com/Amxx/openzeppelin-contracts/tree/archive/paymentsplitter/contracts/finance) a few month ago. It would be very easy to take the code in `TokenizedSplitter` and to adapt it to use with an ERC721 core.\r\n\r\n... we don't plan on publishing that soon, but if we ever want to provide that code, we will go with the more modular/light solution.\r\n\r\nBe aware that this code is not audited. We don't recommend using it in production without a deep review first.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1084248140/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1084739077",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3201#issuecomment-1084739077",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3201",
    "id": 1084739077,
    "node_id": "IC_kwDOA9tCBs5Ap84F",
    "user": {
      "login": "hanselb",
      "id": 5930195,
      "node_id": "MDQ6VXNlcjU5MzAxOTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5930195?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hanselb",
      "html_url": "https://github.com/hanselb",
      "followers_url": "https://api.github.com/users/hanselb/followers",
      "following_url": "https://api.github.com/users/hanselb/following{/other_user}",
      "gists_url": "https://api.github.com/users/hanselb/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hanselb/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hanselb/subscriptions",
      "organizations_url": "https://api.github.com/users/hanselb/orgs",
      "repos_url": "https://api.github.com/users/hanselb/repos",
      "events_url": "https://api.github.com/users/hanselb/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hanselb/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-03-31T15:20:21Z",
    "updated_at": "2022-03-31T15:20:21Z",
    "author_association": "NONE",
    "body": "Hi @Amxx \r\n\r\nI‚Äôm trying to solve a problem that most creators/artist have out here which is giving back to their community. At a high level how would you design this and make it available for mass adoption?\r\n\r\nI would love to work with you guys to come up with a clean design for this.\r\n\r\nI would also love to know why you guys don‚Äôt find this needed to be made public to help people. There is so much dirtier code out there to accomplish this that I felt compelled to submit this. I believe it is a crucial thing to solve.\r\n\r\nThe more transparent and elegant solution, the better, but I would love to not push this on the back burner if possible. I believe some kind of standard pattern would allow people to deliver splits on their tokens for their community without using platforms like 0xSplits etc which is another point of trust and it‚Äôs picking up momentum.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1084739077/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1084917933",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3201#issuecomment-1084917933",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3201",
    "id": 1084917933,
    "node_id": "IC_kwDOA9tCBs5Aqoit",
    "user": {
      "login": "hanselb",
      "id": 5930195,
      "node_id": "MDQ6VXNlcjU5MzAxOTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5930195?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hanselb",
      "html_url": "https://github.com/hanselb",
      "followers_url": "https://api.github.com/users/hanselb/followers",
      "following_url": "https://api.github.com/users/hanselb/following{/other_user}",
      "gists_url": "https://api.github.com/users/hanselb/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hanselb/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hanselb/subscriptions",
      "organizations_url": "https://api.github.com/users/hanselb/orgs",
      "repos_url": "https://api.github.com/users/hanselb/repos",
      "events_url": "https://api.github.com/users/hanselb/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hanselb/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-03-31T17:44:52Z",
    "updated_at": "2022-03-31T17:44:52Z",
    "author_association": "NONE",
    "body": "I‚Äôm afraid my understanding is limited to be able surgically pull from the abstract payment splitter @Amxx provided. I just started solidity programming this year so I am still learning.\r\n\r\n@mw2000 are you be able to combine these ideas for a clean design? I would love to get your input. \r\n",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1084917933/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1085535802",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3201#issuecomment-1085535802",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3201",
    "id": 1085535802,
    "node_id": "IC_kwDOA9tCBs5As_Y6",
    "user": {
      "login": "hanselb",
      "id": 5930195,
      "node_id": "MDQ6VXNlcjU5MzAxOTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5930195?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hanselb",
      "html_url": "https://github.com/hanselb",
      "followers_url": "https://api.github.com/users/hanselb/followers",
      "following_url": "https://api.github.com/users/hanselb/following{/other_user}",
      "gists_url": "https://api.github.com/users/hanselb/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hanselb/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hanselb/subscriptions",
      "organizations_url": "https://api.github.com/users/hanselb/orgs",
      "repos_url": "https://api.github.com/users/hanselb/repos",
      "events_url": "https://api.github.com/users/hanselb/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hanselb/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-04-01T07:35:08Z",
    "updated_at": "2022-04-01T07:35:08Z",
    "author_association": "NONE",
    "body": "The problem I had using the original PaymentSplitter is that you cannot rely on `mapping(address => uint256) private _released;` because tokenId needs to be the main tracker (since owner can change)\r\n\r\nI had to change to `mapping(uint256 => uint256) private _released;` for tokenId => amount. ",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1085535802/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1085554338",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3201#issuecomment-1085554338",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3201",
    "id": 1085554338,
    "node_id": "IC_kwDOA9tCBs5AtD6i",
    "user": {
      "login": "Amxx",
      "id": 2432299,
      "node_id": "MDQ6VXNlcjI0MzIyOTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2432299?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Amxx",
      "html_url": "https://github.com/Amxx",
      "followers_url": "https://api.github.com/users/Amxx/followers",
      "following_url": "https://api.github.com/users/Amxx/following{/other_user}",
      "gists_url": "https://api.github.com/users/Amxx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Amxx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Amxx/subscriptions",
      "organizations_url": "https://api.github.com/users/Amxx/orgs",
      "repos_url": "https://api.github.com/users/Amxx/repos",
      "events_url": "https://api.github.com/users/Amxx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Amxx/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-04-01T07:57:57Z",
    "updated_at": "2022-04-01T07:57:57Z",
    "author_association": "COLLABORATOR",
    "body": "> The problem I had using the original PaymentSplitter is that you cannot rely on `mapping(address => uint256) private _released;` because tokenId needs to be the main tracker (since owner can change)\r\n> \r\n> I had to change to `mapping(uint256 => uint256) private _released;` for tokenId => amount.\r\n\r\nThis has the downside that, if a user owns 1000 tokens, he must do 1000 claims (one per token). This would be super expensive.\r\nYou can keep a `mapping(address => uint256) private _released;` if you rebalance token transfers with virtual releases. This is what I do in the AbstractPaymentSplitter linked above.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1085554338/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1086352932",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3201#issuecomment-1086352932",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3201",
    "id": 1086352932,
    "node_id": "IC_kwDOA9tCBs5AwG4k",
    "user": {
      "login": "hanselb",
      "id": 5930195,
      "node_id": "MDQ6VXNlcjU5MzAxOTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5930195?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hanselb",
      "html_url": "https://github.com/hanselb",
      "followers_url": "https://api.github.com/users/hanselb/followers",
      "following_url": "https://api.github.com/users/hanselb/following{/other_user}",
      "gists_url": "https://api.github.com/users/hanselb/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hanselb/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hanselb/subscriptions",
      "organizations_url": "https://api.github.com/users/hanselb/orgs",
      "repos_url": "https://api.github.com/users/hanselb/repos",
      "events_url": "https://api.github.com/users/hanselb/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hanselb/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-04-01T21:44:17Z",
    "updated_at": "2022-04-01T21:59:24Z",
    "author_association": "NONE",
    "body": "Hi @Amxx thank you for replying. I look some more through the AbstractPaymentSplitter and I see that you use Distribution. AddressToIntWithTotal to handle the  releases and adjustments. From what I can understand, this is still based on address being the main axis for the PaymentSplitter. Is the default behavior to transfer anything owed to previous owner on transfer? How can we ensure that multiple owners for the same token don't drain the contract? how do we keep track of what has been released per token? Does the contract ensures that every token is empty at the point of transfer?\r\n\r\nUsing the unbounded loops inside release(account) is to cover a single owner that wants to cash out from multiple tokens, making them pay for this made sense to me.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1086352932/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1090760445",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3201#issuecomment-1090760445",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3201",
    "id": 1090760445,
    "node_id": "IC_kwDOA9tCBs5BA679",
    "user": {
      "login": "Amxx",
      "id": 2432299,
      "node_id": "MDQ6VXNlcjI0MzIyOTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2432299?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Amxx",
      "html_url": "https://github.com/Amxx",
      "followers_url": "https://api.github.com/users/Amxx/followers",
      "following_url": "https://api.github.com/users/Amxx/following{/other_user}",
      "gists_url": "https://api.github.com/users/Amxx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Amxx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Amxx/subscriptions",
      "organizations_url": "https://api.github.com/users/Amxx/orgs",
      "repos_url": "https://api.github.com/users/Amxx/repos",
      "events_url": "https://api.github.com/users/Amxx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Amxx/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-04-06T20:30:54Z",
    "updated_at": "2022-04-06T20:30:54Z",
    "author_association": "COLLABORATOR",
    "body": "> From what I can understand, this is still based on address being the main axis for the PaymentSplitter.\r\n\r\nYes, this allows a user to release the funds corresponding to alls its token in a single operation. This was designed to work with ERC20 balances, but it would also work with ERC721 balances.\r\n\r\n> how do we keep track of what has been released per token?\r\n\r\nWhen a transfer (of token) happens, a hook must be triggered that creates \"virtual\" release to compensate in case the payment asset has not been released.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1090760445/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1100701616",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3201#issuecomment-1100701616",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3201",
    "id": 1100701616,
    "node_id": "IC_kwDOA9tCBs5Bm1-w",
    "user": {
      "login": "hanselb",
      "id": 5930195,
      "node_id": "MDQ6VXNlcjU5MzAxOTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5930195?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hanselb",
      "html_url": "https://github.com/hanselb",
      "followers_url": "https://api.github.com/users/hanselb/followers",
      "following_url": "https://api.github.com/users/hanselb/following{/other_user}",
      "gists_url": "https://api.github.com/users/hanselb/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hanselb/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hanselb/subscriptions",
      "organizations_url": "https://api.github.com/users/hanselb/orgs",
      "repos_url": "https://api.github.com/users/hanselb/repos",
      "events_url": "https://api.github.com/users/hanselb/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hanselb/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-04-16T16:30:42Z",
    "updated_at": "2022-04-16T16:30:42Z",
    "author_association": "NONE",
    "body": "I understand now. Thank you so much @Amxx for the explanation, I can see now why you made those tradeoffs. This has given me much to think about while I come up with better designs.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1100701616/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
