{
  "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1240",
  "repository_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts",
  "labels_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1240/labels{/name}",
  "comments_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1240/comments",
  "events_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1240/events",
  "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1240",
  "id": 353896422,
  "node_id": "MDU6SXNzdWUzNTM4OTY0MjI=",
  "number": 1240,
  "title": "Add an Enumerable Set data structure",
  "user": {
    "login": "spalladino",
    "id": 429604,
    "node_id": "MDQ6VXNlcjQyOTYwNA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/429604?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/spalladino",
    "html_url": "https://github.com/spalladino",
    "followers_url": "https://api.github.com/users/spalladino/followers",
    "following_url": "https://api.github.com/users/spalladino/following{/other_user}",
    "gists_url": "https://api.github.com/users/spalladino/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/spalladino/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/spalladino/subscriptions",
    "organizations_url": "https://api.github.com/users/spalladino/orgs",
    "repos_url": "https://api.github.com/users/spalladino/repos",
    "events_url": "https://api.github.com/users/spalladino/events{/privacy}",
    "received_events_url": "https://api.github.com/users/spalladino/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 503650860,
      "node_id": "MDU6TGFiZWw1MDM2NTA4NjA=",
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/labels/feature",
      "name": "feature",
      "color": "b9db64",
      "default": false,
      "description": "New contracts, functions, or helpers."
    },
    {
      "id": 1000207718,
      "node_id": "MDU6TGFiZWwxMDAwMjA3NzE4",
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/labels/contracts",
      "name": "contracts",
      "color": "1d76db",
      "default": false,
      "description": "Smart contract code."
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 24,
  "created_at": "2018-08-24T19:09:48Z",
  "updated_at": "2020-01-24T17:50:25Z",
  "closed_at": "2020-01-24T17:50:25Z",
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "The [OwnerManager contract from Gnosis safe](https://github.com/gnosis/safe-contracts/blob/development/contracts/base/OwnerManager.sol) is basically an implementation for a LinkedList with O(1) check for `contains(item)`. It's a mapping with the same type for keys and values (addresses in this case), where each item points to the next one in the mapping. \r\n\r\nCould be interesting to abstract this and build it into OZ. Note that, given the lack of generics in Solidity, we may need to provide the same contract for different data types.\r\n\r\n- ðŸ“ˆ This is a feature request.\r\n\r\n",
  "closed_by": {
    "login": "nventuro",
    "id": 2530770,
    "node_id": "MDQ6VXNlcjI1MzA3NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/2530770?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nventuro",
    "html_url": "https://github.com/nventuro",
    "followers_url": "https://api.github.com/users/nventuro/followers",
    "following_url": "https://api.github.com/users/nventuro/following{/other_user}",
    "gists_url": "https://api.github.com/users/nventuro/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nventuro/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nventuro/subscriptions",
    "organizations_url": "https://api.github.com/users/nventuro/orgs",
    "repos_url": "https://api.github.com/users/nventuro/repos",
    "events_url": "https://api.github.com/users/nventuro/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nventuro/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1240/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1240/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/415879659",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1240#issuecomment-415879659",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1240",
    "id": 415879659,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxNTg3OTY1OQ==",
    "user": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-08-24T20:53:52Z",
    "updated_at": "2018-08-24T20:54:07Z",
    "author_association": "MEMBER",
    "body": "I think we should start by providing the linked list for addresses only (likewise for other data structures). It should cover most use cases.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/415879659/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/434485094",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1240#issuecomment-434485094",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1240",
    "id": 434485094,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzNDQ4NTA5NA==",
    "user": {
      "login": "andy8052",
      "id": 6354666,
      "node_id": "MDQ6VXNlcjYzNTQ2NjY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6354666?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/andy8052",
      "html_url": "https://github.com/andy8052",
      "followers_url": "https://api.github.com/users/andy8052/followers",
      "following_url": "https://api.github.com/users/andy8052/following{/other_user}",
      "gists_url": "https://api.github.com/users/andy8052/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/andy8052/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/andy8052/subscriptions",
      "organizations_url": "https://api.github.com/users/andy8052/orgs",
      "repos_url": "https://api.github.com/users/andy8052/repos",
      "events_url": "https://api.github.com/users/andy8052/events{/privacy}",
      "received_events_url": "https://api.github.com/users/andy8052/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-30T21:57:57Z",
    "updated_at": "2018-10-30T21:57:57Z",
    "author_association": "NONE",
    "body": "I think this is a pretty cool idea. Has anyone worked on this yet?",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/434485094/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/571550427",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1240#issuecomment-571550427",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1240",
    "id": 571550427,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU3MTU1MDQyNw==",
    "user": {
      "login": "alcueca",
      "id": 38806121,
      "node_id": "MDQ6VXNlcjM4ODA2MTIx",
      "avatar_url": "https://avatars.githubusercontent.com/u/38806121?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/alcueca",
      "html_url": "https://github.com/alcueca",
      "followers_url": "https://api.github.com/users/alcueca/followers",
      "following_url": "https://api.github.com/users/alcueca/following{/other_user}",
      "gists_url": "https://api.github.com/users/alcueca/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/alcueca/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/alcueca/subscriptions",
      "organizations_url": "https://api.github.com/users/alcueca/orgs",
      "repos_url": "https://api.github.com/users/alcueca/repos",
      "events_url": "https://api.github.com/users/alcueca/events{/privacy}",
      "received_events_url": "https://api.github.com/users/alcueca/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-01-07T11:34:46Z",
    "updated_at": "2020-01-07T11:34:46Z",
    "author_association": "CONTRIBUTOR",
    "body": "Hi guys,\r\n\r\nI did an implementation for Singly and Doubly Linked Lists, which I would be happy to transfer to your repo. These contracts have been thoroughly tested:\r\n\r\nhttps://github.com/HQ20/contracts/tree/dev/contracts/lists\r\n\r\nI have also an implementation for an Ordered Doubly Linked list in the same directory, but one of the methods is O(N) so it might not be safe enough for normal use.\r\n\r\nI also have an implementation of a Linked List using OOP principles, with each element in the list being a contract. Nice and clear implementation, with horrid gas costs. I can point you to it as well if you are interested.\r\n\r\nI'd love to hear your feedback, thanks.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/571550427/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/574331958",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1240#issuecomment-574331958",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1240",
    "id": 574331958,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU3NDMzMTk1OA==",
    "user": {
      "login": "nventuro",
      "id": 2530770,
      "node_id": "MDQ6VXNlcjI1MzA3NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2530770?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nventuro",
      "html_url": "https://github.com/nventuro",
      "followers_url": "https://api.github.com/users/nventuro/followers",
      "following_url": "https://api.github.com/users/nventuro/following{/other_user}",
      "gists_url": "https://api.github.com/users/nventuro/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nventuro/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nventuro/subscriptions",
      "organizations_url": "https://api.github.com/users/nventuro/orgs",
      "repos_url": "https://api.github.com/users/nventuro/repos",
      "events_url": "https://api.github.com/users/nventuro/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nventuro/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-01-14T19:24:20Z",
    "updated_at": "2020-01-14T19:24:20Z",
    "author_association": "CONTRIBUTOR",
    "body": "Interesting, thanks @albertocuestacanada! We've seen many projects roll out their own collections, sometimes with bad results (@elopio mind chiming in on this?).\r\n\r\nAbout your specific implementation, we'd probably prefer to have the collections be a library that operates on some custom struct, like `Roles` does, letting users have multiple collections in the same contract.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/574331958/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/574357458",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1240#issuecomment-574357458",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1240",
    "id": 574357458,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU3NDM1NzQ1OA==",
    "user": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-01-14T20:26:07Z",
    "updated_at": "2020-01-14T20:26:37Z",
    "author_association": "MEMBER",
    "body": "Thank you @albertocuestacanada!\r\n\r\nWe've defined clearer requirements for this feature for whoever wants to open a pull request. The focus of the issue is on building an _enumerable set_, rather than a generic linked list. The linked list is simply the way the set should be implemented.\r\n\r\n- Since there are no generics we should first build an enumerable _address_ set, which should cover most uses cases.\r\n- We want this to be built as a library with a struct so that a contract can have multiple sets.\r\n- The available operations should be: `append(addr)` (insert at the end of the list), `remove(addr)`, `contains(addr)`, and `enumerate` (returning all the elements as an array).",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/574357458/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/574404435",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1240#issuecomment-574404435",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1240",
    "id": 574404435,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU3NDQwNDQzNQ==",
    "user": {
      "login": "alcueca",
      "id": 38806121,
      "node_id": "MDQ6VXNlcjM4ODA2MTIx",
      "avatar_url": "https://avatars.githubusercontent.com/u/38806121?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/alcueca",
      "html_url": "https://github.com/alcueca",
      "followers_url": "https://api.github.com/users/alcueca/followers",
      "following_url": "https://api.github.com/users/alcueca/following{/other_user}",
      "gists_url": "https://api.github.com/users/alcueca/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/alcueca/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/alcueca/subscriptions",
      "organizations_url": "https://api.github.com/users/alcueca/orgs",
      "repos_url": "https://api.github.com/users/alcueca/repos",
      "events_url": "https://api.github.com/users/alcueca/events{/privacy}",
      "received_events_url": "https://api.github.com/users/alcueca/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-01-14T22:29:10Z",
    "updated_at": "2020-01-14T22:30:06Z",
    "author_association": "CONTRIBUTOR",
    "body": "An enumerable address set implemented as a library was not too far from what I've got already. It's drafted already (I'll need to write tests for two functions).\r\n\r\nDo I need permissions to create a branch in your repo and push the code?",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/574404435/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/574426980",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1240#issuecomment-574426980",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1240",
    "id": 574426980,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU3NDQyNjk4MA==",
    "user": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-01-14T23:43:43Z",
    "updated_at": "2020-01-14T23:43:43Z",
    "author_association": "MEMBER",
    "body": "Cool! Fork this repo and create a branch in the fork, then open a PR from there.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/574426980/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/574587064",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1240#issuecomment-574587064",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1240",
    "id": 574587064,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU3NDU4NzA2NA==",
    "user": {
      "login": "alcueca",
      "id": 38806121,
      "node_id": "MDQ6VXNlcjM4ODA2MTIx",
      "avatar_url": "https://avatars.githubusercontent.com/u/38806121?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/alcueca",
      "html_url": "https://github.com/alcueca",
      "followers_url": "https://api.github.com/users/alcueca/followers",
      "following_url": "https://api.github.com/users/alcueca/following{/other_user}",
      "gists_url": "https://api.github.com/users/alcueca/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/alcueca/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/alcueca/subscriptions",
      "organizations_url": "https://api.github.com/users/alcueca/orgs",
      "repos_url": "https://api.github.com/users/alcueca/repos",
      "events_url": "https://api.github.com/users/alcueca/events{/privacy}",
      "received_events_url": "https://api.github.com/users/alcueca/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-01-15T10:04:07Z",
    "updated_at": "2020-01-15T10:05:18Z",
    "author_association": "CONTRIBUTOR",
    "body": "Apologies for missing that critical line in CONTRIBUTING.md @frangio \r\n\r\nHere is the [draft of Enumerable.sol](https://github.com/HQ20/openzeppelin-contracts/blob/fix/enumerable-%231240/contracts/drafts/Enumerable.sol).\r\n\r\nI left it in drafts, not sure where would you prefer to put it.\r\n\r\nCheck if it is what you are after. If so I'll write the tests and have a think about performance.\r\n\r\nIt was developed from a Doubly Linked List, but since you need less features there is probably stuff to optimize.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/574587064/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/575248051",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1240#issuecomment-575248051",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1240",
    "id": 575248051,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU3NTI0ODA1MQ==",
    "user": {
      "login": "come-maiz",
      "id": 617831,
      "node_id": "MDQ6VXNlcjYxNzgzMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/617831?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/come-maiz",
      "html_url": "https://github.com/come-maiz",
      "followers_url": "https://api.github.com/users/come-maiz/followers",
      "following_url": "https://api.github.com/users/come-maiz/following{/other_user}",
      "gists_url": "https://api.github.com/users/come-maiz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/come-maiz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/come-maiz/subscriptions",
      "organizations_url": "https://api.github.com/users/come-maiz/orgs",
      "repos_url": "https://api.github.com/users/come-maiz/repos",
      "events_url": "https://api.github.com/users/come-maiz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/come-maiz/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-01-16T17:02:13Z",
    "updated_at": "2020-01-16T17:02:13Z",
    "author_association": "CONTRIBUTOR",
    "body": "@nventuro yes, we have seen many projects copying or reimplementing their own collections. It would be nice to start a do-group to list all of these, maybe in a wiki topic in our forum, to analyze the different approaches and maybe even get people working together. In the ideal case, this would be a push to get generics into the language.\r\n\r\nAbout the road forward, I agree with @frangio's approach to start with a set of addresses. This is immediately useful to many use cases, and will teach us about limitations and possible ways to generalize to other types and underlying structures.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/575248051/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/575278244",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1240#issuecomment-575278244",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1240",
    "id": 575278244,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU3NTI3ODI0NA==",
    "user": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-01-16T18:15:28Z",
    "updated_at": "2020-01-16T18:15:28Z",
    "author_association": "MEMBER",
    "body": "@albertocuestacanada Is it possible to use addresses as ids? I was imagining something much simpler than what you shared, but I don't know if there are reasons why it can't be as simple as a `mapping (address => address)` (plus `head` and `tail`), as opposed to also having ids and `Object`s.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/575278244/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/575354890",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1240#issuecomment-575354890",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1240",
    "id": 575354890,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU3NTM1NDg5MA==",
    "user": {
      "login": "alcueca",
      "id": 38806121,
      "node_id": "MDQ6VXNlcjM4ODA2MTIx",
      "avatar_url": "https://avatars.githubusercontent.com/u/38806121?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/alcueca",
      "html_url": "https://github.com/alcueca",
      "followers_url": "https://api.github.com/users/alcueca/followers",
      "following_url": "https://api.github.com/users/alcueca/following{/other_user}",
      "gists_url": "https://api.github.com/users/alcueca/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/alcueca/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/alcueca/subscriptions",
      "organizations_url": "https://api.github.com/users/alcueca/orgs",
      "repos_url": "https://api.github.com/users/alcueca/repos",
      "events_url": "https://api.github.com/users/alcueca/events{/privacy}",
      "received_events_url": "https://api.github.com/users/alcueca/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-01-16T21:27:26Z",
    "updated_at": "2020-01-16T21:33:23Z",
    "author_association": "CONTRIBUTOR",
    "body": "Hi @frangio, as long as you use a linked list implementation I don't think that you can use addresses as ids in a meaningful way.\r\n\r\n**addresses as ids**\r\n\r\nIn a linked list you need to record at least two data points per element: the data that needs to be stored and some way of retrieving the next element. This usually points to using a struct and mapping like these:\r\n\r\n```\r\nstruct Element {\r\n    address data;\r\n    uint256 next\r\n}\r\n\r\nmapping (uint256 => Element)\r\n```\r\n\r\n`next` is an identifier to retrieve the next struct from the mapping, since we can't have recursive structs. Using an address for ids instead of an uint256 would mean that when someone appends a new element in the list they need to come up with an unique address as an id, or we need to have the contract generate the address used as an id randomly. Neither case is very usable.\r\n\r\nI'm using uint256 because I need ids and to generate them the easiest is to use a counter (I can reuse Counters from your library, btw).\r\n\r\n**complex implementation**\r\n\r\nUsing a doubly linked list for an enumerable set _might be_ overkill, since you don't need arbitrary insertion.\r\n\r\nFor the Enumerable Set that you requested, there are two implementations that are simpler.\r\n\r\n1. If you can live with some fragmentation you can use [this implementation](https://github.com/HQ20/contracts/blob/dev/contracts/drafts/lists/LinkedListAsArray.sol). It only needs to implement an `enumerate` function out of repeated calls to `next`.\r\n\r\n2. If you don't need to keep the elements in the insertion order, you can use the [this implementation](https://github.com/HQ20/contracts/blob/dev/contracts/drafts/lists/LinkedListAsArray.sol) again, but this time also modify the `remove` function to do something like [this](https://ethereum.stackexchange.com/questions/35790/efficient-approach-to-delete-element-from-array-in-solidity) and avoid fragmentation.\r\n\r\nThe implementation also becomes more complex from the requirement of coding it as a library.\r\n\r\n**next steps**\r\n\r\nI think that we need to think a bit on the requirements:\r\n- Do we just want an enumerable set, where the elements might be returned in a different order each time we enumerate them?. `contains` and `enumerate` will be O(N) where N is the number of elements in the set.\r\n- Do we want an enumerable set that respects the insertion order? Then `enumerate` and `contains` are O(N*) where N* is potentially the number of elements that have ever been added to the set.\r\n- Do we want an enumerable set that respects the insertion order, and where all functions are O(1)? Then we use a Doubly Linked List, we force the user to call `next` instead of implementing enumerate, and implement an index for `contains` using a mapping.\r\n\r\n@elopio, if you give me some time I'm writing an article comparing the different implementations, it might be useful. I've got already [some](https://hackernoon.com/how-much-can-i-do-in-a-block-163q3xp2) [of](https://github.com/HQ20/contracts/tree/dev/contracts/lists) [the](https://github.com/HQ20/contracts/tree/dev/contracts/drafts/lists) [work](https://github.com/HQ20/contracts/blob/new/enumerable/contracts/drafts/lists/Enumerables.sol) [done](https://docs.google.com/document/d/1y-E-6wuftLBJcZAA8DrSNdw229J2JqqTTrYZIuOZVQM/edit?usp=sharing).\r\n\r\n@frangio, also, what do you guys use to deploy contracts and link artifacts in this repo? There is nothing in the migrations or .openzeppelin folders.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/575354890/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/575680838",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1240#issuecomment-575680838",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1240",
    "id": 575680838,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU3NTY4MDgzOA==",
    "user": {
      "login": "nventuro",
      "id": 2530770,
      "node_id": "MDQ6VXNlcjI1MzA3NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2530770?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nventuro",
      "html_url": "https://github.com/nventuro",
      "followers_url": "https://api.github.com/users/nventuro/followers",
      "following_url": "https://api.github.com/users/nventuro/following{/other_user}",
      "gists_url": "https://api.github.com/users/nventuro/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nventuro/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nventuro/subscriptions",
      "organizations_url": "https://api.github.com/users/nventuro/orgs",
      "repos_url": "https://api.github.com/users/nventuro/repos",
      "events_url": "https://api.github.com/users/nventuro/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nventuro/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-01-17T15:50:01Z",
    "updated_at": "2020-01-17T15:50:01Z",
    "author_association": "CONTRIBUTOR",
    "body": ">In a linked list you need to record at least two data points per element: the data that needs to be stored and some way of retrieving the next element. This usually points to using a struct and mapping like these:\r\n>\r\n>```\r\n>struct Element {\r\n>    address data;\r\n>    uint256 next\r\n>}\r\n>\r\n>mapping (uint256 => Element)\r\n>```\r\n>\r\n>next is an identifier to retrieve the next struct from the mapping, since we can't have recursive structs. Using an address for ids instead of an uint256 would mean that when someone appends a new element in the list they need to come up with an unique address as an id, or we need to have the contract generate the address used as an id randomly. Neither case is very usable.\r\n>\r\n>I'm using uint256 because I need ids and to generate them the easiest is to use a counter (I can reuse Counters from your library, btw).\r\n\r\nI think @frangio wasn't proposing a regular `Node { data, next }` structure where `next` is of type `address`, but instead have `next` itself be `data`. This fits nicely with the idea of the set: each address can only be stored once. Additionally, you'd get O(1) `contains`, since instead of searching through the whole list, you can access it's entry directly. `enumerate` and friends will obviously continue to be O(n).\r\n\r\nIn this sense, what we aren't building isn't a list, but rather an enumerable set: the list is simply the tool we use to get ordering. This is similar to what you mention here:\r\n\r\n>Do we want an enumerable set that respects the insertion order, and where all functions are O(1)? Then we use a Doubly Linked List, we force the user to call next instead of implementing enumerate, and implement an index for contains using a mapping.\r\n\r\nThinking out loud, we may need a sentinel value to handle the `tail` element, since a value would be considered to be in set if its entry is not empty, but this value is also `next`.\r\n\r\n---- \r\n\r\nRegarding ordering, as far as I know the term _enumerable_ implies sorting, so I'd say yes.\r\n\r\n>@frangio, also, what do you guys use to deploy contracts and link artifacts in this repo? There is nothing in the migrations or .openzeppelin folders.\r\n\r\nI'm not sure what you mean by deployments: all of OpenZeppelin Contracts `libraries` have only `internal` functions, which means they don't need to be deployed and linked. Their code is instead inlined when used.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/575680838/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/575695265",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1240#issuecomment-575695265",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1240",
    "id": 575695265,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU3NTY5NTI2NQ==",
    "user": {
      "login": "alcueca",
      "id": 38806121,
      "node_id": "MDQ6VXNlcjM4ODA2MTIx",
      "avatar_url": "https://avatars.githubusercontent.com/u/38806121?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/alcueca",
      "html_url": "https://github.com/alcueca",
      "followers_url": "https://api.github.com/users/alcueca/followers",
      "following_url": "https://api.github.com/users/alcueca/following{/other_user}",
      "gists_url": "https://api.github.com/users/alcueca/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/alcueca/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/alcueca/subscriptions",
      "organizations_url": "https://api.github.com/users/alcueca/orgs",
      "repos_url": "https://api.github.com/users/alcueca/repos",
      "events_url": "https://api.github.com/users/alcueca/events{/privacy}",
      "received_events_url": "https://api.github.com/users/alcueca/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-01-17T16:23:55Z",
    "updated_at": "2020-01-17T16:23:55Z",
    "author_association": "CONTRIBUTOR",
    "body": "Ok, I understand how you want to implement the EnumerableSet with `mapping(address => address)`. That just means that all values in the set are unique, so we can have [a, b, c] but not [a, a, b].\r\n\r\nWe can either have a sentinel value for `tail`, or specify that no set can contain `address(0)`.\r\n\r\n`contains` and `append` would be O(1), `enumerate` and `remove` O(N).\r\n\r\nAn `insertAfter` function can also be implemented, with O(1). You don't need to restrict yourself to appending at the end.\r\n\r\nFinally, you can have `remove` to be O(1) if you have two mappings:\r\n```\r\nmapping(address => address) forward\r\nmapping(address => address) backward\r\n```\r\nIt would double the gas cost of `append` (and `insert` if implemented), but the behaviour would be more predictable. Implementation will also be easier.\r\n\r\nMy only question at this point would be: **Do we use a `tail` variable, or forbid adding `address(0)` to the set?**\r\n\r\nI can do this next week, no problem.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/575695265/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/575832981",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1240#issuecomment-575832981",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1240",
    "id": 575832981,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU3NTgzMjk4MQ==",
    "user": {
      "login": "alcueca",
      "id": 38806121,
      "node_id": "MDQ6VXNlcjM4ODA2MTIx",
      "avatar_url": "https://avatars.githubusercontent.com/u/38806121?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/alcueca",
      "html_url": "https://github.com/alcueca",
      "followers_url": "https://api.github.com/users/alcueca/followers",
      "following_url": "https://api.github.com/users/alcueca/following{/other_user}",
      "gists_url": "https://api.github.com/users/alcueca/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/alcueca/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/alcueca/subscriptions",
      "organizations_url": "https://api.github.com/users/alcueca/orgs",
      "repos_url": "https://api.github.com/users/alcueca/repos",
      "events_url": "https://api.github.com/users/alcueca/events{/privacy}",
      "received_events_url": "https://api.github.com/users/alcueca/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-01-17T23:24:50Z",
    "updated_at": "2020-01-17T23:25:19Z",
    "author_association": "CONTRIBUTOR",
    "body": "It took me a bit less to do than expected: [Library](https://github.com/HQ20/contracts/blob/new/enumerable-v2/contracts/drafts/lists/EnumerableSet.sol), [mock](https://github.com/HQ20/contracts/blob/new/enumerable-v2/contracts/drafts/lists/mocks/EnumerableSetMock.sol) and [tests](https://github.com/HQ20/contracts/blob/new/enumerable-v2/test/drafts/lists/EnumerableSet.test.ts).\r\n\r\nI've got to move the contract to a fork of your repo, and convert the tests to your framework, but for now I've done it where I'm most comfortable.\r\n\r\nWhat do you guys think?",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/575832981/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/575838493",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1240#issuecomment-575838493",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1240",
    "id": 575838493,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU3NTgzODQ5Mw==",
    "user": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-01-17T23:53:19Z",
    "updated_at": "2020-01-17T23:53:19Z",
    "author_association": "MEMBER",
    "body": "It looks good! It's definitely what I had in mind. Keep in mind that library functions should be `internal`, and the helpers used for implementation should be `private`.\r\n\r\nI have a few items I'd like to discuss though.\r\n\r\n@nventuro and I have an intuition that the library shouldn't emit any built-in events. Events should be left up to the user of the library. What do you think?\r\n\r\nI also don't like that `enumerate` requires iterating two times. It feels like we could also keep track of the length to avoid that extra iteration. I'm not sure what is the better tradeoff.\r\n\r\nAnother thing that I think is worth discussing a bit more is whether to make it doubly linked or not. Something interesting about the Gnosis Safe posted in OP is that it is singly linked and `remove` has an argument for specifying the previous element so that you can do the removal in O(1) without iterating from the head. The same API can be generalized to providing a \"hint\" that can be any element that is before in the list, and in the worst case you can provide the head and remove in O(n). I find this part of the design space very interesting and uniquely suited to blockchain because the magnitude of the `n` will be insignificant when seen off-chain. The feasibility of this approach depends on the off-chain components being able to find the previous element efficiently though, and I'm not sure about that. Events sound like the ideal way to do this but on the other hand I'm proposing to remove the built-in events... I'm interested in hearing your thoughts on this. Particularly @spalladino, you may be able to provide a more full-stack view.\r\n\r\nLastly, this one is a bit more radical but there is another pattern for implementing enumerable sets which is using an array `address[]` and a mapping `address => uint` where you store the index for each address. I haven't had time to compare these two but it seems to me like they provide the same functionality, and this one may have better characteristics.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/575838493/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/575941353",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1240#issuecomment-575941353",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1240",
    "id": 575941353,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU3NTk0MTM1Mw==",
    "user": {
      "login": "alcueca",
      "id": 38806121,
      "node_id": "MDQ6VXNlcjM4ODA2MTIx",
      "avatar_url": "https://avatars.githubusercontent.com/u/38806121?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/alcueca",
      "html_url": "https://github.com/alcueca",
      "followers_url": "https://api.github.com/users/alcueca/followers",
      "following_url": "https://api.github.com/users/alcueca/following{/other_user}",
      "gists_url": "https://api.github.com/users/alcueca/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/alcueca/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/alcueca/subscriptions",
      "organizations_url": "https://api.github.com/users/alcueca/orgs",
      "repos_url": "https://api.github.com/users/alcueca/repos",
      "events_url": "https://api.github.com/users/alcueca/events{/privacy}",
      "received_events_url": "https://api.github.com/users/alcueca/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-01-18T21:48:56Z",
    "updated_at": "2020-01-18T21:48:56Z",
    "author_association": "CONTRIBUTOR",
    "body": "@frangio, I've [corrected](https://github.com/HQ20/contracts/blob/new/enumerable-v2/contracts/drafts/lists/EnumerableSet.sol) the visibility, and also managed to get rid of everything related to the `head` and `tail` variables.\r\n\r\nNow `next[address(0)]` points to the head, and `prev[address(0)]` points to the tail, making the whole thing quite elegant.\r\n\r\n**enumerate**\r\n\r\nOn `enumerate` requiring two loops there is indeed a tradeoff. If you keep track of the length each `append` call will store an extra word. Currently there `append` stores 3 words, so that would be a 33% more gas roughly if we keep a length counter, `remove` would cost about twice the gas with the counter.\r\n\r\nApart from that, `append` and `remove` are transactional and `enumerate` is a view. If `enumerate` is going to be mostly called from outside the contract I wouldn't fret about it looping twice.\r\n\r\nOn this tradeoff I have no opinion, it depends on how you envision `enumerate` being used.\r\n\r\n**double or single linked**\r\nIf this is made single linked then I'll need to keep a `tail` variable (to know where to append), so an `append` operation would store two words instead of the current three. The performance of `remove` with hints wouldn't be too bad, but usability of that option would be poor. On this tradeoff I would vote against single linked.\r\n\r\n**address[] and address => uint**\r\nI assume here that `address[]` is where the data is stored, and `address => uint` is the order in which the elements should be placed in the `enumerable` array. `contains` and `append` are O(1), `remove` is O(N) unless you keep another mapping to tell you where in the `address[]` array you can find each specific address. I think that on `remove` you could do [this](https://ethereum.stackexchange.com/questions/35790/efficient-approach-to-delete-element-from-array-in-solidity) to avoid fragmentation, in which case `enumerate` would be the same O(N).\r\n\r\nUp to here, it seems to me that it has the same performance and features as the current implementation.\r\n\r\nA slightly better implementation is using the `address[]` for the items, as before, but using an `address => uint[]` for the indexes. That way you wouldn't be restricted to unique items in your set. I can't think of a downside to this (except code complexity).\r\n\r\nIf you want, I can do an implementation of this pattern as well. It's fun :nerd_face: ",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/575941353/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/576381050",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1240#issuecomment-576381050",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1240",
    "id": 576381050,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU3NjM4MTA1MA==",
    "user": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-01-20T18:05:18Z",
    "updated_at": "2020-01-20T18:05:18Z",
    "author_association": "MEMBER",
    "body": "Great analysis, thank you. I agree that the consideration that `enumerate` is going to be called off-chain is an important one, and looping twice is not a big deal in that context.\r\n\r\nWe should be clear that for this feature we are only interested in storing unique items, and we are not interested in their ordering in the array. In the alternative implementation, `address => uint` maps each address to the index where it can be found in the `address[]` array. This results in O(1) remove by replacing the removed element with the last one and updating its index in the mapping. Based on this, do you still think the linked list is preferable?",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/576381050/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/576423548",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1240#issuecomment-576423548",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1240",
    "id": 576423548,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU3NjQyMzU0OA==",
    "user": {
      "login": "alcueca",
      "id": 38806121,
      "node_id": "MDQ6VXNlcjM4ODA2MTIx",
      "avatar_url": "https://avatars.githubusercontent.com/u/38806121?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/alcueca",
      "html_url": "https://github.com/alcueca",
      "followers_url": "https://api.github.com/users/alcueca/followers",
      "following_url": "https://api.github.com/users/alcueca/following{/other_user}",
      "gists_url": "https://api.github.com/users/alcueca/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/alcueca/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/alcueca/subscriptions",
      "organizations_url": "https://api.github.com/users/alcueca/orgs",
      "repos_url": "https://api.github.com/users/alcueca/repos",
      "events_url": "https://api.github.com/users/alcueca/events{/privacy}",
      "received_events_url": "https://api.github.com/users/alcueca/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-01-20T20:38:42Z",
    "updated_at": "2020-01-20T20:38:42Z",
    "author_association": "CONTRIBUTOR",
    "body": "@frangio, you should have told me that you were just interested in a [canonical implementation of a Set](https://en.wikipedia.org/wiki/Set_(abstract_data_type)). We would have got here a lot faster :)\r\n\r\nFor an unordered data set using a linked list makes no sense. The approach that you mention: storing values in an array, infilling on remove, and using an index to have O(1) for contains seems the right approach.\r\n\r\nBesides, it's a very simple implementation, which is always good.\r\n\r\n[Contract](https://github.com/HQ20/contracts/blob/new/enumerableset/contracts/drafts/lists/EnumerableSet.sol), [mock](https://github.com/HQ20/contracts/blob/new/enumerableset/contracts/drafts/lists/mocks/EnumerableSetMock.sol) and [tests](https://github.com/HQ20/contracts/blob/new/enumerableset/test/drafts/lists/EnumerableSet.test.ts)..",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/576423548/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/576433148",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1240#issuecomment-576433148",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1240",
    "id": 576433148,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU3NjQzMzE0OA==",
    "user": {
      "login": "alcueca",
      "id": 38806121,
      "node_id": "MDQ6VXNlcjM4ODA2MTIx",
      "avatar_url": "https://avatars.githubusercontent.com/u/38806121?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/alcueca",
      "html_url": "https://github.com/alcueca",
      "followers_url": "https://api.github.com/users/alcueca/followers",
      "following_url": "https://api.github.com/users/alcueca/following{/other_user}",
      "gists_url": "https://api.github.com/users/alcueca/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/alcueca/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/alcueca/subscriptions",
      "organizations_url": "https://api.github.com/users/alcueca/orgs",
      "repos_url": "https://api.github.com/users/alcueca/repos",
      "events_url": "https://api.github.com/users/alcueca/events{/privacy}",
      "received_events_url": "https://api.github.com/users/alcueca/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-01-20T21:19:08Z",
    "updated_at": "2020-01-20T21:19:08Z",
    "author_association": "CONTRIBUTOR",
    "body": "Finally I managed to get the tests running on the fork of your repo.\r\n\r\n[Contract](https://github.com/HQ20/openzeppelin-contracts/blob/fix/enumerable-%231240/contracts/drafts/EnumerableSet.sol), [mock](https://github.com/HQ20/openzeppelin-contracts/blob/fix/enumerable-%231240/contracts/mocks/EnumerableSetMock.sol) and [tests](https://github.com/HQ20/openzeppelin-contracts/blob/fix/enumerable-%231240/test/drafts/EnumerableSet.test.js).\r\n\r\nWhere should this go? A `types` folder inside `contracts`?",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/576433148/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/576442068",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1240#issuecomment-576442068",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1240",
    "id": 576442068,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU3NjQ0MjA2OA==",
    "user": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-01-20T21:58:13Z",
    "updated_at": "2020-01-20T21:58:13Z",
    "author_association": "MEMBER",
    "body": "Awesome. I would say let's put it in `utils`.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/576442068/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/576451001",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1240#issuecomment-576451001",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1240",
    "id": 576451001,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU3NjQ1MTAwMQ==",
    "user": {
      "login": "alcueca",
      "id": 38806121,
      "node_id": "MDQ6VXNlcjM4ODA2MTIx",
      "avatar_url": "https://avatars.githubusercontent.com/u/38806121?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/alcueca",
      "html_url": "https://github.com/alcueca",
      "followers_url": "https://api.github.com/users/alcueca/followers",
      "following_url": "https://api.github.com/users/alcueca/following{/other_user}",
      "gists_url": "https://api.github.com/users/alcueca/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/alcueca/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/alcueca/subscriptions",
      "organizations_url": "https://api.github.com/users/alcueca/orgs",
      "repos_url": "https://api.github.com/users/alcueca/repos",
      "events_url": "https://api.github.com/users/alcueca/events{/privacy}",
      "received_events_url": "https://api.github.com/users/alcueca/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-01-20T22:39:47Z",
    "updated_at": "2020-01-20T22:39:47Z",
    "author_association": "CONTRIBUTOR",
    "body": "[Done](https://github.com/HQ20/openzeppelin-contracts/tree/fix/enumerable-%231240).\r\n\r\nI've got a linting error: `Expected an assignment or function call and instead saw an expression`\r\nOn the last line of each test, like this one: `expect(await this.set.testContains(a)).to.be.false;`\r\n\r\nI would think that `expect(...)` is a function call :thinking: ",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/576451001/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/576452220",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1240#issuecomment-576452220",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1240",
    "id": 576452220,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU3NjQ1MjIyMA==",
    "user": {
      "login": "nventuro",
      "id": 2530770,
      "node_id": "MDQ6VXNlcjI1MzA3NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2530770?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nventuro",
      "html_url": "https://github.com/nventuro",
      "followers_url": "https://api.github.com/users/nventuro/followers",
      "following_url": "https://api.github.com/users/nventuro/following{/other_user}",
      "gists_url": "https://api.github.com/users/nventuro/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nventuro/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nventuro/subscriptions",
      "organizations_url": "https://api.github.com/users/nventuro/orgs",
      "repos_url": "https://api.github.com/users/nventuro/repos",
      "events_url": "https://api.github.com/users/nventuro/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nventuro/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-01-20T22:46:39Z",
    "updated_at": "2020-01-20T22:47:10Z",
    "author_association": "CONTRIBUTOR",
    "body": "The issue is `to.be.false`: that's one of the reasons why we prefer `to.equal(false)`.\r\n\r\n@frangio do you think its time to graduate this issue into a PR?",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/576452220/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/576453908",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1240#issuecomment-576453908",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1240",
    "id": 576453908,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU3NjQ1MzkwOA==",
    "user": {
      "login": "alcueca",
      "id": 38806121,
      "node_id": "MDQ6VXNlcjM4ODA2MTIx",
      "avatar_url": "https://avatars.githubusercontent.com/u/38806121?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/alcueca",
      "html_url": "https://github.com/alcueca",
      "followers_url": "https://api.github.com/users/alcueca/followers",
      "following_url": "https://api.github.com/users/alcueca/following{/other_user}",
      "gists_url": "https://api.github.com/users/alcueca/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/alcueca/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/alcueca/subscriptions",
      "organizations_url": "https://api.github.com/users/alcueca/orgs",
      "repos_url": "https://api.github.com/users/alcueca/repos",
      "events_url": "https://api.github.com/users/alcueca/events{/privacy}",
      "received_events_url": "https://api.github.com/users/alcueca/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-01-20T22:55:29Z",
    "updated_at": "2020-01-20T22:55:29Z",
    "author_association": "CONTRIBUTOR",
    "body": "Thanks @nventuro, linting fixed now :+1: ",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/576453908/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/576491237",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1240#issuecomment-576491237",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1240",
    "id": 576491237,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU3NjQ5MTIzNw==",
    "user": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-01-21T02:26:13Z",
    "updated_at": "2020-01-21T02:26:13Z",
    "author_association": "MEMBER",
    "body": "Yes @albertocuestacanada please submit a PR.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/576491237/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
