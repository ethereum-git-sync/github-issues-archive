{
  "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4383",
  "repository_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts",
  "labels_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4383/labels{/name}",
  "comments_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4383/comments",
  "events_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4383/events",
  "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/4383",
  "id": 1770683542,
  "node_id": "I_kwDOA9tCBs5pinyW",
  "number": 4383,
  "title": "5.0 Architecture Thread - Fix Governance Interface Architecture",
  "user": {
    "login": "RitzyDevBox",
    "id": 103006767,
    "node_id": "U_kgDOBiPCLw",
    "avatar_url": "https://avatars.githubusercontent.com/u/103006767?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/RitzyDevBox",
    "html_url": "https://github.com/RitzyDevBox",
    "followers_url": "https://api.github.com/users/RitzyDevBox/followers",
    "following_url": "https://api.github.com/users/RitzyDevBox/following{/other_user}",
    "gists_url": "https://api.github.com/users/RitzyDevBox/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/RitzyDevBox/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/RitzyDevBox/subscriptions",
    "organizations_url": "https://api.github.com/users/RitzyDevBox/orgs",
    "repos_url": "https://api.github.com/users/RitzyDevBox/repos",
    "events_url": "https://api.github.com/users/RitzyDevBox/events{/privacy}",
    "received_events_url": "https://api.github.com/users/RitzyDevBox/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 2,
  "created_at": "2023-06-23T02:36:57Z",
  "updated_at": "2023-06-23T20:37:31Z",
  "closed_at": null,
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "Open Zeppelins Interface makes assumptions about its implentation.\r\n\r\n    abstract contract IGovernorTimelock is IGovernor {\r\n        event ProposalQueued(uint256 proposalId, uint256 eta);\r\n\r\n        function timelock() public view virtual returns (address);\r\n\r\n        function proposalEta(uint256 proposalId) public view virtual returns (uint256);\r\n\r\n        function queue(\r\n            address[] memory targets,\r\n            uint256[] memory values,\r\n            bytes[] memory calldatas,\r\n            bytes32 descriptionHash\r\n        ) public virtual returns (uint256 proposalId);\r\n    }\r\n`\r\nQueue and Execute don't take the proposalId in as a parameter, In OZ Governor, thats fine because the members hash to the Proposal.   However this means that anyone consuming the interface has to use the same proposal.  \r\n\r\nThis is a huge limitation as in other architectures such as GovernorA GovernorB the Proposals are sequential so the interfaces are not compatible for inheritance\r\n\r\nFor Deeper clarification look at the Execute Method:\r\n\r\n    /**\r\n     * @dev See {IGovernor-execute}.\r\n     */\r\n    function execute(\r\n        address[] memory targets,\r\n        uint256[] memory values,\r\n        bytes[] memory calldatas,\r\n        bytes32 descriptionHash\r\n    ) public payable virtual override returns (uint256) {\r\n        uint256 proposalId = hashProposal(targets, values, calldatas, descriptionHash);\r\n\r\n        ProposalState status = state(proposalId);\r\n        require(\r\n            status == ProposalState.Succeeded || status == ProposalState.Queued,\r\n            \"Governor: proposal not successful\"\r\n        );\r\n        _proposals[proposalId].executed = true;\r\n\r\n        emit ProposalExecuted(proposalId);\r\n\r\n        _beforeExecute(proposalId, targets, values, calldatas, descriptionHash);\r\n        _execute(proposalId, targets, values, calldatas, descriptionHash);\r\n        _afterExecute(proposalId, targets, values, calldatas, descriptionHash);\r\n\r\n        return proposalId;\r\n    }\r\n\r\nI would like to inherit from this method in my implemntation, However since my proposalId is not based on your implemtation my code will due to the following lines:\r\n\r\n        uint256 proposalId = hashProposal(targets, values, calldatas, descriptionHash);\r\n",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4383/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4383/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1604911330",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/4383#issuecomment-1604911330",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4383",
    "id": 1604911330,
    "node_id": "IC_kwDOA9tCBs5fqQDi",
    "user": {
      "login": "RitzyDevBox",
      "id": 103006767,
      "node_id": "U_kgDOBiPCLw",
      "avatar_url": "https://avatars.githubusercontent.com/u/103006767?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/RitzyDevBox",
      "html_url": "https://github.com/RitzyDevBox",
      "followers_url": "https://api.github.com/users/RitzyDevBox/followers",
      "following_url": "https://api.github.com/users/RitzyDevBox/following{/other_user}",
      "gists_url": "https://api.github.com/users/RitzyDevBox/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/RitzyDevBox/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/RitzyDevBox/subscriptions",
      "organizations_url": "https://api.github.com/users/RitzyDevBox/orgs",
      "repos_url": "https://api.github.com/users/RitzyDevBox/repos",
      "events_url": "https://api.github.com/users/RitzyDevBox/events{/privacy}",
      "received_events_url": "https://api.github.com/users/RitzyDevBox/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-06-23T20:28:20Z",
    "updated_at": "2023-06-23T20:30:36Z",
    "author_association": "NONE",
    "body": "I'll leave a comment on the full architecture propose for 5.0\r\n1. Change the IGovernor Interface to take in the proposalId.\r\n\r\n        abstract contract IGovernor {  \r\n         // Adjusted to take in params as discussed in previous tickets\r\n            function propose(\r\n                address[] memory targets,\r\n                uint256[] memory values,\r\n                bytes[] memory calldatas,\r\n                string memory description,\r\n                bytes memory params\r\n            ) public virtual returns (uint256 proposalId);\r\n\r\n        /** handles taking care of creating the proposal. \r\n         *       in the OZ Compatibility:\r\n         *           this will just hash the content and add coreProposal\r\n         *       in the GovernorA Compatibility:\r\n         *            it will handle enumerating the proposal Id\r\n         *            this will store the additional required information in ExtendedCoreProposals\r\n        // \r\n        function _createProposal(\r\n            address[] memory targets,\r\n            uint256[] memory values,\r\n            bytes[] memory calldatas,\r\n            string memory description,\r\n            bytes memory params\r\n        ) public internal returns (uint256 proposalId);\r\n\r\n        function execute(\r\n            uint256 proposalId,\r\n            address[] memory targets,\r\n            uint256[] memory values,\r\n            bytes[] memory calldatas,\r\n            bytes32 descriptionHash\r\n        ) public payable virtual returns (uint256);    \r\n    }\r\n\r\nand in the Timelock:\r\n\r\n        abstract contract IGovernorTimelock is IGovernor {\r\n\r\n            function queue(\r\n                uint256 proposalId,\r\n                address[] memory targets,\r\n                uint256[] memory values,\r\n                bytes[] memory calldatas,\r\n                bytes32 descriptionHash\r\n            ) public virtual returns (uint256);\r\n        }\r\n\r\n3. Creation of a new Module which handles the default upgrade from 4 -> 5.0  for the example I will call this IOZGovernorCompatibilityGovernor : \r\n\r\n    abstract contract IOZGovernorCompatibilityGovernor is IERC165, IGovernor {\r\n\r\n        function hashProposal(\r\n            address[] memory targets,\r\n            uint256[] memory values,\r\n            bytes[] memory calldatas,\r\n            bytes32 descriptionHash\r\n        ) public pure virtual returns (uint256);\r\n\r\n        function _defaultProposeParams() internal view virtual returns (bytes memory) {\r\n          return \"\";\r\n        }\r\n\r\n\r\n        /**\r\n        * @dev See {IGovernor-execute}.\r\n        */\r\n        function execute(\r\n            address[] memory targets,\r\n            uint256[] memory values,\r\n            bytes[] memory calldatas,\r\n            bytes32 descriptionHash\r\n        ) public payable virtual override returns (uint256) {\r\n            uint256 proposalId = hashProposal(targets, values, calldatas, descriptionHash);\r\n            return super.execute(proposalId, targets, values, calldatas, descriptionHash);\r\n        }\r\n    }\r\n\r\nThe following would also occur in the Time lock.\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1604911330/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1604920693",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/4383#issuecomment-1604920693",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4383",
    "id": 1604920693,
    "node_id": "IC_kwDOA9tCBs5fqSV1",
    "user": {
      "login": "RitzyDevBox",
      "id": 103006767,
      "node_id": "U_kgDOBiPCLw",
      "avatar_url": "https://avatars.githubusercontent.com/u/103006767?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/RitzyDevBox",
      "html_url": "https://github.com/RitzyDevBox",
      "followers_url": "https://api.github.com/users/RitzyDevBox/followers",
      "following_url": "https://api.github.com/users/RitzyDevBox/following{/other_user}",
      "gists_url": "https://api.github.com/users/RitzyDevBox/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/RitzyDevBox/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/RitzyDevBox/subscriptions",
      "organizations_url": "https://api.github.com/users/RitzyDevBox/orgs",
      "repos_url": "https://api.github.com/users/RitzyDevBox/repos",
      "events_url": "https://api.github.com/users/RitzyDevBox/events{/privacy}",
      "received_events_url": "https://api.github.com/users/RitzyDevBox/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-06-23T20:36:58Z",
    "updated_at": "2023-06-23T20:36:58Z",
    "author_association": "NONE",
    "body": "There are other things that should probably be changed as well such as:\r\n\r\n    function votingPeriod() public view virtual returns (uint256);\r\n    function votingDelay() public view virtual returns (uint256);\r\n\r\nand pretty much every other function should be scoped to the proposal or have some identifier.  Currently the Voting Period, and delay are all tied down to the governor,  Ideally this architecture should be flexible enough to handle different types of votes.\r\n\r\ne.g For instance some operations should be scoped to only certain members within the organization, \r\n\r\n Image someone wanted to create emergency operations and only allow trusted interal members to handle proposing or voting on paticular internal things.\r\n\r\nCurrently the Time Delays, and voting periods get votes etc, are tied into the governor, when really that is something that should be more dynamic.  Emergency votes may want shorter delays etc for critical operations.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1604920693/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
