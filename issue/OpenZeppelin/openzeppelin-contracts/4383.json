{
  "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4383",
  "repository_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts",
  "labels_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4383/labels{/name}",
  "comments_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4383/comments",
  "events_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4383/events",
  "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/4383",
  "id": 1770683542,
  "node_id": "I_kwDOA9tCBs5pinyW",
  "number": 4383,
  "title": "Fix Governance Interface Architecture Queue, and Execute architecture",
  "user": {
    "login": "RitzyDevBox",
    "id": 103006767,
    "node_id": "U_kgDOBiPCLw",
    "avatar_url": "https://avatars.githubusercontent.com/u/103006767?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/RitzyDevBox",
    "html_url": "https://github.com/RitzyDevBox",
    "followers_url": "https://api.github.com/users/RitzyDevBox/followers",
    "following_url": "https://api.github.com/users/RitzyDevBox/following{/other_user}",
    "gists_url": "https://api.github.com/users/RitzyDevBox/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/RitzyDevBox/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/RitzyDevBox/subscriptions",
    "organizations_url": "https://api.github.com/users/RitzyDevBox/orgs",
    "repos_url": "https://api.github.com/users/RitzyDevBox/repos",
    "events_url": "https://api.github.com/users/RitzyDevBox/events{/privacy}",
    "received_events_url": "https://api.github.com/users/RitzyDevBox/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 1,
  "created_at": "2023-06-23T02:36:57Z",
  "updated_at": "2023-06-23T03:17:04Z",
  "closed_at": null,
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "Open Zeppelins Interface makes assumptions about its implentation.\r\n\r\n    abstract contract IGovernorTimelock is IGovernor {\r\n        event ProposalQueued(uint256 proposalId, uint256 eta);\r\n\r\n        function timelock() public view virtual returns (address);\r\n\r\n        function proposalEta(uint256 proposalId) public view virtual returns (uint256);\r\n\r\n        function queue(\r\n            address[] memory targets,\r\n            uint256[] memory values,\r\n            bytes[] memory calldatas,\r\n            bytes32 descriptionHash\r\n        ) public virtual returns (uint256 proposalId);\r\n    }\r\n`\r\nQueue and Execute don't take the proposalId in as a parameter, In OZ Governor, thats fine because the members hash to the Proposal.   However this means that anyone consuming the interface has to use the same proposal.  \r\n\r\nThis is a huge limitation as in other architectures such as GovernorA GovernorB the Proposals are sequential so the interfaces are not compatible for inheritance\r\n",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4383/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4383/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1603629420",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/4383#issuecomment-1603629420",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4383",
    "id": 1603629420,
    "node_id": "IC_kwDOA9tCBs5flXFs",
    "user": {
      "login": "RitzyDevBox",
      "id": 103006767,
      "node_id": "U_kgDOBiPCLw",
      "avatar_url": "https://avatars.githubusercontent.com/u/103006767?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/RitzyDevBox",
      "html_url": "https://github.com/RitzyDevBox",
      "followers_url": "https://api.github.com/users/RitzyDevBox/followers",
      "following_url": "https://api.github.com/users/RitzyDevBox/following{/other_user}",
      "gists_url": "https://api.github.com/users/RitzyDevBox/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/RitzyDevBox/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/RitzyDevBox/subscriptions",
      "organizations_url": "https://api.github.com/users/RitzyDevBox/orgs",
      "repos_url": "https://api.github.com/users/RitzyDevBox/repos",
      "events_url": "https://api.github.com/users/RitzyDevBox/events{/privacy}",
      "received_events_url": "https://api.github.com/users/RitzyDevBox/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-06-23T03:17:04Z",
    "updated_at": "2023-06-23T03:17:04Z",
    "author_association": "NONE",
    "body": "For Deeper clarification look at the Execute Method:\r\n\r\n    /**\r\n     * @dev See {IGovernor-execute}.\r\n     */\r\n    function execute(\r\n        address[] memory targets,\r\n        uint256[] memory values,\r\n        bytes[] memory calldatas,\r\n        bytes32 descriptionHash\r\n    ) public payable virtual override returns (uint256) {\r\n        uint256 proposalId = hashProposal(targets, values, calldatas, descriptionHash);\r\n\r\n        ProposalState status = state(proposalId);\r\n        require(\r\n            status == ProposalState.Succeeded || status == ProposalState.Queued,\r\n            \"Governor: proposal not successful\"\r\n        );\r\n        _proposals[proposalId].executed = true;\r\n\r\n        emit ProposalExecuted(proposalId);\r\n\r\n        _beforeExecute(proposalId, targets, values, calldatas, descriptionHash);\r\n        _execute(proposalId, targets, values, calldatas, descriptionHash);\r\n        _afterExecute(proposalId, targets, values, calldatas, descriptionHash);\r\n\r\n        return proposalId;\r\n    }\r\n\r\nI would like to inherit from this method in my implemntation, However since my proposalId is not based on your implemtation my code will due to the following lines:\r\n\r\n        uint256 proposalId = hashProposal(targets, values, calldatas, descriptionHash);",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1603629420/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
