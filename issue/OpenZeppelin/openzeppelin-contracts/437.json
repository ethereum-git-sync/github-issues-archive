{
  "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/437",
  "repository_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts",
  "labels_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/437/labels{/name}",
  "comments_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/437/comments",
  "events_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/437/events",
  "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/437",
  "id": 256706114,
  "node_id": "MDU6SXNzdWUyNTY3MDYxMTQ=",
  "number": 437,
  "title": "Method `decreaseApproval` in unsafe",
  "user": {
    "login": "3sGgpQ8H",
    "id": 3917202,
    "node_id": "MDQ6VXNlcjM5MTcyMDI=",
    "avatar_url": "https://avatars.githubusercontent.com/u/3917202?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/3sGgpQ8H",
    "html_url": "https://github.com/3sGgpQ8H",
    "followers_url": "https://api.github.com/users/3sGgpQ8H/followers",
    "following_url": "https://api.github.com/users/3sGgpQ8H/following{/other_user}",
    "gists_url": "https://api.github.com/users/3sGgpQ8H/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/3sGgpQ8H/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/3sGgpQ8H/subscriptions",
    "organizations_url": "https://api.github.com/users/3sGgpQ8H/orgs",
    "repos_url": "https://api.github.com/users/3sGgpQ8H/repos",
    "events_url": "https://api.github.com/users/3sGgpQ8H/events{/privacy}",
    "received_events_url": "https://api.github.com/users/3sGgpQ8H/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/milestones/3",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/milestone/3",
    "labels_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/milestones/3/labels",
    "id": 3479517,
    "node_id": "MDk6TWlsZXN0b25lMzQ3OTUxNw==",
    "number": 3,
    "title": "v2.0",
    "description": "Stable API",
    "creator": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "open_issues": 0,
    "closed_issues": 173,
    "state": "closed",
    "created_at": "2018-07-06T21:03:31Z",
    "updated_at": "2018-11-14T19:32:38Z",
    "due_on": "2018-10-19T07:00:00Z",
    "closed_at": "2018-11-14T19:32:38Z"
  },
  "comments": 32,
  "created_at": "2017-09-11T13:39:58Z",
  "updated_at": "2018-09-07T13:02:07Z",
  "closed_at": "2018-09-07T13:01:31Z",
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "Method `decreaseApproval` in `StandardToken.sol` is unsafe.  Here is the scenario.\r\n\r\n1. Bob is allowed to transfer zero Alice's tokens\r\n2. Alice allows Bob to transfer 100 of here tokens via `approve` or `increaseApproval` method and transaction is executed successfully\r\n3. Alice sees that Bob is now allowed to transfer 100 of her tokens\r\n4. After some time, Alice uses `decreaseApproval` method to decrease by 100 the number of her tokens Bob is allowed to transfer and transaction is executed successfully and proper Approval event was logged\r\n5. Alice sees that Bob is allowed to transfer 0 of her tokens\r\n6. Now Alice may think that once `decreaseApproval` call was executed successfully, then Bob didn't manage to transfer any of her tokens before the allowance was decreased, but this assumption is wrong. \r\n Actually, Bob may or may not had transferred Alice's tokens before allowance was decreased, and Alice has no easy way to know for sure whether Bob transferred her tokens or not\r\n\r\nMethod `decreaseApproval` should fail in case current allowance is lower than requested decrease.",
  "closed_by": {
    "login": "frangio",
    "id": 481465,
    "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
    "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/frangio",
    "html_url": "https://github.com/frangio",
    "followers_url": "https://api.github.com/users/frangio/followers",
    "following_url": "https://api.github.com/users/frangio/following{/other_user}",
    "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
    "organizations_url": "https://api.github.com/users/frangio/orgs",
    "repos_url": "https://api.github.com/users/frangio/repos",
    "events_url": "https://api.github.com/users/frangio/events{/privacy}",
    "received_events_url": "https://api.github.com/users/frangio/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/437/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/437/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/328559203",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/437#issuecomment-328559203",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/437",
    "id": 328559203,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMyODU1OTIwMw==",
    "user": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-09-11T15:07:03Z",
    "updated_at": "2017-09-11T15:07:03Z",
    "author_association": "MEMBER",
    "body": "Hi @mikhail-vladimirov, thanks for reporting! (And thanks for the overall thorough review.)\r\n\r\nI thought about this and I'm not sure I agree with either the risk or the proposed mitigation. At point 4, once Alice sees her call succeeded, she would be able to see any `Transfer` events if Bob had managed to make a transfer, and in fact she would see her own reduced balance.\r\n\r\nFurthermore, suppose we changed `decreaseApproval` to fail if allowance was lower than the request decrease. If Alice attempts to decrease Bob's allowance to zero, and Bob manages to transfer half of his allowance before the decrease, the call to `decreaseApproval` would fail and then Bob would be able to spend the other half! This is in my opinion worse than the current risk. What do you think?",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/328559203/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/328561190",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/437#issuecomment-328561190",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/437",
    "id": 328561190,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMyODU2MTE5MA==",
    "user": {
      "login": "3sGgpQ8H",
      "id": 3917202,
      "node_id": "MDQ6VXNlcjM5MTcyMDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3917202?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/3sGgpQ8H",
      "html_url": "https://github.com/3sGgpQ8H",
      "followers_url": "https://api.github.com/users/3sGgpQ8H/followers",
      "following_url": "https://api.github.com/users/3sGgpQ8H/following{/other_user}",
      "gists_url": "https://api.github.com/users/3sGgpQ8H/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/3sGgpQ8H/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/3sGgpQ8H/subscriptions",
      "organizations_url": "https://api.github.com/users/3sGgpQ8H/orgs",
      "repos_url": "https://api.github.com/users/3sGgpQ8H/repos",
      "events_url": "https://api.github.com/users/3sGgpQ8H/events{/privacy}",
      "received_events_url": "https://api.github.com/users/3sGgpQ8H/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-09-11T15:13:25Z",
    "updated_at": "2017-09-11T15:17:39Z",
    "author_association": "NONE",
    "body": "> she would be able to see any Transfer events if Bob had managed to make a transfer\r\n\r\nIf Bob had transferred Alice's tokens to Carol, not to himself. it would be very non-trivial to know that this transfer was done by Bob, not Carol.\r\n\r\n> Bob would be able to spend the other half!\r\n\r\nBob anyway had a chance to get all the allowed tokens, and he had this ability for a long time, nothing bad if he will be able to do this for little more time.  Bad thing is not that Bob is able to get tokens, this is actually normal, because Alice herself allowed him to do this.  Bad thing is that after changing the allowance, Alice does not know how much of the original allowance was actually used by Bob, and thus does not know how much tokens she owes Bob, or Bob owes her; so Bob may actually cheat Alice by pretending that he didn't use any allowance (thus Alice still owes some tokens to Bob) while he actually did use it.\r\n\r\nSo safe `decreaseApproval` method should succeed only if allowance was actually decreased exactly by desired number of token, not by some other number.  If Alice just wants to revoke all the allowance from Bob as fast as possible, she will use `approve` method to set allowance to zero.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/328561190/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/328594078",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/437#issuecomment-328594078",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/437",
    "id": 328594078,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMyODU5NDA3OA==",
    "user": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-09-11T17:05:30Z",
    "updated_at": "2017-09-11T17:05:30Z",
    "author_association": "MEMBER",
    "body": "> If Bob had transferred Alice's tokens to Carol, not to himself. it would be very non-trivial to know that this transfer was done by Bob, not Carol.\r\n\r\nThis is a different problem that I completely agree with, which is the lack of a `spender` parameter in `Transfer` events. We could add a new event that allows to keep track of this, it's a pity that there isn't a standard one.\r\n\r\n> Bob anyway had a chance to get all the allowed tokens, and he had this ability for a long time, nothing bad if he will be able to do this for little more time.\r\n\r\nSuppose \"Bob\" is a smart contract that is programmed to make a transfer with a certain frequency and you want to stop it immediatey. I agree that `approve` with zero is the correct thing to do here, but it may not be immediately apparent from the function signatures and someone might use `decreaseApproval`.\r\n\r\nI share some of the concerns but I think most of the risk can be mitigated by logging how much an approved spender has transferred. Do you agree?\r\n\r\nI'm open to hearing more opinions though. Have you reported this elsewhere?",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/328594078/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/328743659",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/437#issuecomment-328743659",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/437",
    "id": 328743659,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMyODc0MzY1OQ==",
    "user": {
      "login": "3sGgpQ8H",
      "id": 3917202,
      "node_id": "MDQ6VXNlcjM5MTcyMDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3917202?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/3sGgpQ8H",
      "html_url": "https://github.com/3sGgpQ8H",
      "followers_url": "https://api.github.com/users/3sGgpQ8H/followers",
      "following_url": "https://api.github.com/users/3sGgpQ8H/following{/other_user}",
      "gists_url": "https://api.github.com/users/3sGgpQ8H/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/3sGgpQ8H/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/3sGgpQ8H/subscriptions",
      "organizations_url": "https://api.github.com/users/3sGgpQ8H/orgs",
      "repos_url": "https://api.github.com/users/3sGgpQ8H/repos",
      "events_url": "https://api.github.com/users/3sGgpQ8H/events{/privacy}",
      "received_events_url": "https://api.github.com/users/3sGgpQ8H/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-09-12T05:46:50Z",
    "updated_at": "2017-09-12T06:57:33Z",
    "author_association": "NONE",
    "body": "There are absolutely no problems with Bob being able to transfer as many tokens as Alice approved to him until Alice revoked the approval.  This is how token contracts are supposed to work.  Regardless of what Bob does, once Alice approved some tokens to Bob, she approved, and it is her full responsibility to make sure Bob is a good guy before approving anything to him.\r\n\r\nThe real problems with ERC20 are:\r\n\r\n1. In some cases Bob may transfer MORE Alice's tokens than Alice ever intended to approve to him.  For example, Alice approved 100 token, then she wanted to change this to 101.  While Alice never intended to allow Bob to transfer more than 101 of her tokens, Bob may actually transfer 201 which is really bad.\r\n2. In some cases Bob may transfer as many Alice's tokens as Alice approved to him (which is fine) but may make it look like he didn't transfer them (which is really bad).  Thus Bob may, for example, avoid paying Alice for tokens he actually got from her.\r\n\r\nIn current form, `decreaseApproval` addresses the first problem but didn't address the second one which is only slightly less dangerous.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/328743659/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/328812591",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/437#issuecomment-328812591",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/437",
    "id": 328812591,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMyODgxMjU5MQ==",
    "user": {
      "login": "jakub-wojciechowski",
      "id": 27825272,
      "node_id": "MDQ6VXNlcjI3ODI1Mjcy",
      "avatar_url": "https://avatars.githubusercontent.com/u/27825272?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jakub-wojciechowski",
      "html_url": "https://github.com/jakub-wojciechowski",
      "followers_url": "https://api.github.com/users/jakub-wojciechowski/followers",
      "following_url": "https://api.github.com/users/jakub-wojciechowski/following{/other_user}",
      "gists_url": "https://api.github.com/users/jakub-wojciechowski/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jakub-wojciechowski/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jakub-wojciechowski/subscriptions",
      "organizations_url": "https://api.github.com/users/jakub-wojciechowski/orgs",
      "repos_url": "https://api.github.com/users/jakub-wojciechowski/repos",
      "events_url": "https://api.github.com/users/jakub-wojciechowski/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jakub-wojciechowski/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-09-12T10:32:57Z",
    "updated_at": "2017-09-12T10:32:57Z",
    "author_association": "CONTRIBUTOR",
    "body": "Hi Guys, I've enjoyed reading the discussion. Thx, for pointing out the vulnerability @mikhail-vladimirov!\r\n\r\nCurrently we have a soft condition requiring that the deduction is lower than allowance or the allowance is reduced to zero. How about making it stronger and requesting that the current allowance is equal to a state known by transaction sender. \r\n\r\n```\r\nfunction decreaseApproval (address _spender, uint _decreaseFrom, uint _decreaseBy)\r\n...\r\nrequire(allowed[msg.sender][_spender] == _decreaseFrom);\r\n```\r\n\r\nUsing this approach we will make it sure that the operation exactly satisfies the intentions of the sender and the current state of the contract matches state know by the sender. It will also make the whole process of allowance update atomic and prevent race conditions. Actually, the proposed design will be a form of [Compare and Swap](https://en.wikipedia.org/wiki/Compare-and-swap) pattern which is widely used in concurrency programming.   ",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/328812591/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/328815089",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/437#issuecomment-328815089",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/437",
    "id": 328815089,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMyODgxNTA4OQ==",
    "user": {
      "login": "3sGgpQ8H",
      "id": 3917202,
      "node_id": "MDQ6VXNlcjM5MTcyMDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3917202?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/3sGgpQ8H",
      "html_url": "https://github.com/3sGgpQ8H",
      "followers_url": "https://api.github.com/users/3sGgpQ8H/followers",
      "following_url": "https://api.github.com/users/3sGgpQ8H/following{/other_user}",
      "gists_url": "https://api.github.com/users/3sGgpQ8H/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/3sGgpQ8H/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/3sGgpQ8H/subscriptions",
      "organizations_url": "https://api.github.com/users/3sGgpQ8H/orgs",
      "repos_url": "https://api.github.com/users/3sGgpQ8H/repos",
      "events_url": "https://api.github.com/users/3sGgpQ8H/events{/privacy}",
      "received_events_url": "https://api.github.com/users/3sGgpQ8H/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-09-12T10:44:33Z",
    "updated_at": "2017-09-12T10:44:33Z",
    "author_association": "NONE",
    "body": "This should work, but in this case you probably need to remove \"decrease\" from the method name and make it able to change allowance in either direction.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/328815089/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/328878402",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/437#issuecomment-328878402",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/437",
    "id": 328878402,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMyODg3ODQwMg==",
    "user": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-09-12T14:55:09Z",
    "updated_at": "2017-09-12T14:55:09Z",
    "author_association": "MEMBER",
    "body": "I like @jakub-wojciechowski's proposal because it does make the semantics quite apparent from the function signature. I feel like I've seen the Compare and Swap function proposed before as a solution to the `approve` race condition.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/328878402/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/328917695",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/437#issuecomment-328917695",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/437",
    "id": 328917695,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMyODkxNzY5NQ==",
    "user": {
      "login": "jakub-wojciechowski",
      "id": 27825272,
      "node_id": "MDQ6VXNlcjI3ODI1Mjcy",
      "avatar_url": "https://avatars.githubusercontent.com/u/27825272?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jakub-wojciechowski",
      "html_url": "https://github.com/jakub-wojciechowski",
      "followers_url": "https://api.github.com/users/jakub-wojciechowski/followers",
      "following_url": "https://api.github.com/users/jakub-wojciechowski/following{/other_user}",
      "gists_url": "https://api.github.com/users/jakub-wojciechowski/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jakub-wojciechowski/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jakub-wojciechowski/subscriptions",
      "organizations_url": "https://api.github.com/users/jakub-wojciechowski/orgs",
      "repos_url": "https://api.github.com/users/jakub-wojciechowski/repos",
      "events_url": "https://api.github.com/users/jakub-wojciechowski/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jakub-wojciechowski/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-09-12T17:01:24Z",
    "updated_at": "2017-09-12T17:01:24Z",
    "author_association": "CONTRIBUTOR",
    "body": "I'm really glad that you liked it. I'm certainly not the one to take credit for the Compare and Swap pattern as it's one of the most widely used lock-free synchronisation strategy and probably older than me :)\r\n\r\nI agree with @mikhail-vladimirov that it'd be better to merge both `decreaseApproval` and `increaseApproval` in single method. What's your view on that @frangio ?\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/328917695/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/328953223",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/437#issuecomment-328953223",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/437",
    "id": 328953223,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMyODk1MzIyMw==",
    "user": {
      "login": "3sGgpQ8H",
      "id": 3917202,
      "node_id": "MDQ6VXNlcjM5MTcyMDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3917202?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/3sGgpQ8H",
      "html_url": "https://github.com/3sGgpQ8H",
      "followers_url": "https://api.github.com/users/3sGgpQ8H/followers",
      "following_url": "https://api.github.com/users/3sGgpQ8H/following{/other_user}",
      "gists_url": "https://api.github.com/users/3sGgpQ8H/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/3sGgpQ8H/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/3sGgpQ8H/subscriptions",
      "organizations_url": "https://api.github.com/users/3sGgpQ8H/orgs",
      "repos_url": "https://api.github.com/users/3sGgpQ8H/repos",
      "events_url": "https://api.github.com/users/3sGgpQ8H/events{/privacy}",
      "received_events_url": "https://api.github.com/users/3sGgpQ8H/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-09-12T19:13:36Z",
    "updated_at": "2017-09-12T19:13:36Z",
    "author_association": "NONE",
    "body": "Here is an example of compare and set approve function in ERC20 token smart contract: https://github.com/abdk-consulting/icos-token-contract/blob/master/src/sol/ICOSToken.sol#L106",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/328953223/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/328999175",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/437#issuecomment-328999175",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/437",
    "id": 328999175,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMyODk5OTE3NQ==",
    "user": {
      "login": "SylTi",
      "id": 1770876,
      "node_id": "MDQ6VXNlcjE3NzA4NzY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1770876?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/SylTi",
      "html_url": "https://github.com/SylTi",
      "followers_url": "https://api.github.com/users/SylTi/followers",
      "following_url": "https://api.github.com/users/SylTi/following{/other_user}",
      "gists_url": "https://api.github.com/users/SylTi/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/SylTi/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SylTi/subscriptions",
      "organizations_url": "https://api.github.com/users/SylTi/orgs",
      "repos_url": "https://api.github.com/users/SylTi/repos",
      "events_url": "https://api.github.com/users/SylTi/events{/privacy}",
      "received_events_url": "https://api.github.com/users/SylTi/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-09-12T22:11:52Z",
    "updated_at": "2017-09-13T10:32:48Z",
    "author_association": "CONTRIBUTOR",
    "body": "@mikhail-vladimirov that example is not ERC20 compliant. \r\n\r\nThis should also be taken into account  https://github.com/OpenZeppelin/zeppelin-solidity/issues/438",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/328999175/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/329013513",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/437#issuecomment-329013513",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/437",
    "id": 329013513,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMyOTAxMzUxMw==",
    "user": {
      "login": "3sGgpQ8H",
      "id": 3917202,
      "node_id": "MDQ6VXNlcjM5MTcyMDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3917202?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/3sGgpQ8H",
      "html_url": "https://github.com/3sGgpQ8H",
      "followers_url": "https://api.github.com/users/3sGgpQ8H/followers",
      "following_url": "https://api.github.com/users/3sGgpQ8H/following{/other_user}",
      "gists_url": "https://api.github.com/users/3sGgpQ8H/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/3sGgpQ8H/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/3sGgpQ8H/subscriptions",
      "organizations_url": "https://api.github.com/users/3sGgpQ8H/orgs",
      "repos_url": "https://api.github.com/users/3sGgpQ8H/repos",
      "events_url": "https://api.github.com/users/3sGgpQ8H/events{/privacy}",
      "received_events_url": "https://api.github.com/users/3sGgpQ8H/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-09-12T23:30:40Z",
    "updated_at": "2017-09-12T23:30:40Z",
    "author_association": "NONE",
    "body": ">  that example is not ERC20 compliant\r\n\r\nIt is compliant with original ERC20.  It does not strictly comply with EIP-20 though, because it was created before EIP-20 was finalized.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/329013513/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/329038987",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/437#issuecomment-329038987",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/437",
    "id": 329038987,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMyOTAzODk4Nw==",
    "user": {
      "login": "SylTi",
      "id": 1770876,
      "node_id": "MDQ6VXNlcjE3NzA4NzY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1770876?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/SylTi",
      "html_url": "https://github.com/SylTi",
      "followers_url": "https://api.github.com/users/SylTi/followers",
      "following_url": "https://api.github.com/users/SylTi/following{/other_user}",
      "gists_url": "https://api.github.com/users/SylTi/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/SylTi/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SylTi/subscriptions",
      "organizations_url": "https://api.github.com/users/SylTi/orgs",
      "repos_url": "https://api.github.com/users/SylTi/repos",
      "events_url": "https://api.github.com/users/SylTi/events{/privacy}",
      "received_events_url": "https://api.github.com/users/SylTi/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-09-13T02:30:03Z",
    "updated_at": "2017-09-13T02:30:54Z",
    "author_association": "CONTRIBUTOR",
    "body": "it's been a while that `approve` only took 2 parameters in the draft",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/329038987/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/329065023",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/437#issuecomment-329065023",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/437",
    "id": 329065023,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMyOTA2NTAyMw==",
    "user": {
      "login": "3sGgpQ8H",
      "id": 3917202,
      "node_id": "MDQ6VXNlcjM5MTcyMDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3917202?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/3sGgpQ8H",
      "html_url": "https://github.com/3sGgpQ8H",
      "followers_url": "https://api.github.com/users/3sGgpQ8H/followers",
      "following_url": "https://api.github.com/users/3sGgpQ8H/following{/other_user}",
      "gists_url": "https://api.github.com/users/3sGgpQ8H/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/3sGgpQ8H/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/3sGgpQ8H/subscriptions",
      "organizations_url": "https://api.github.com/users/3sGgpQ8H/orgs",
      "repos_url": "https://api.github.com/users/3sGgpQ8H/repos",
      "events_url": "https://api.github.com/users/3sGgpQ8H/events{/privacy}",
      "received_events_url": "https://api.github.com/users/3sGgpQ8H/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-09-13T05:43:42Z",
    "updated_at": "2017-09-13T05:43:42Z",
    "author_association": "NONE",
    "body": "Oh, now I see what did you mean when said that contract I referred to is not ERC20 compliant.  Of cause that contract has standard two-argument `approve` method as well, you probably just didn't noticed it because it is defined in base contract that contract inherits from: https://github.com/abdk-consulting/icos-token-contract/blob/master/src/sol/AbstractToken.sol#L83",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/329065023/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/329278736",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/437#issuecomment-329278736",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/437",
    "id": 329278736,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMyOTI3ODczNg==",
    "user": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-09-13T19:54:55Z",
    "updated_at": "2017-09-13T19:54:55Z",
    "author_association": "MEMBER",
    "body": "I'd go ahead with a CAS function. What should we name it? It's technically possible to call it `approve` with three parameters but it could be confusing.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/329278736/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/329318134",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/437#issuecomment-329318134",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/437",
    "id": 329318134,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMyOTMxODEzNA==",
    "user": {
      "login": "SylTi",
      "id": 1770876,
      "node_id": "MDQ6VXNlcjE3NzA4NzY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1770876?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/SylTi",
      "html_url": "https://github.com/SylTi",
      "followers_url": "https://api.github.com/users/SylTi/followers",
      "following_url": "https://api.github.com/users/SylTi/following{/other_user}",
      "gists_url": "https://api.github.com/users/SylTi/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/SylTi/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SylTi/subscriptions",
      "organizations_url": "https://api.github.com/users/SylTi/orgs",
      "repos_url": "https://api.github.com/users/SylTi/repos",
      "events_url": "https://api.github.com/users/SylTi/events{/privacy}",
      "received_events_url": "https://api.github.com/users/SylTi/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-09-13T22:45:26Z",
    "updated_at": "2017-09-13T22:45:26Z",
    "author_association": "CONTRIBUTOR",
    "body": "since safeApprove is taken, maybe secureApprove? ",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/329318134/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/330003816",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/437#issuecomment-330003816",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/437",
    "id": 330003816,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzMDAwMzgxNg==",
    "user": {
      "login": "Neurone",
      "id": 562943,
      "node_id": "MDQ6VXNlcjU2Mjk0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/562943?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Neurone",
      "html_url": "https://github.com/Neurone",
      "followers_url": "https://api.github.com/users/Neurone/followers",
      "following_url": "https://api.github.com/users/Neurone/following{/other_user}",
      "gists_url": "https://api.github.com/users/Neurone/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Neurone/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Neurone/subscriptions",
      "organizations_url": "https://api.github.com/users/Neurone/orgs",
      "repos_url": "https://api.github.com/users/Neurone/repos",
      "events_url": "https://api.github.com/users/Neurone/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Neurone/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-09-17T00:33:35Z",
    "updated_at": "2017-09-17T00:33:52Z",
    "author_association": "CONTRIBUTOR",
    "body": "Interesting topic. I agree that `decreaseApproval` is currently unsafe, but it seems to me it suffers exactly the same problem of the `approve` method, so I still think that the _safest_ approach is the _set-0,check-balanche,think-how-much-allowance-you-want-to-set,set-allowance-again_ one.\r\n\r\nI don't feel it is complicated to understand what happens to tokens, and in any case I believe that any possible difficulty in understanding what has happened in the past, it is surely to be preferred to the uncertainty of what will happen in the future.\r\n\r\nWhen I send a TX, I pay for that, and I want an effect. On the contrary, with implementation of CAS the spender has the power **to completely stop the effect** of my TX. Moreover, if the check is implemented with `require` I pay the maximum of gas because the contract throws an exception.\r\n\r\nThe CAS approach is an interesting solution in concurrency programming but in the execution of Ethereum transactions there's no concurrency at all, so it think that pattern does not fit very well.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/330003816/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/330445887",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/437#issuecomment-330445887",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/437",
    "id": 330445887,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzMDQ0NTg4Nw==",
    "user": {
      "login": "3sGgpQ8H",
      "id": 3917202,
      "node_id": "MDQ6VXNlcjM5MTcyMDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3917202?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/3sGgpQ8H",
      "html_url": "https://github.com/3sGgpQ8H",
      "followers_url": "https://api.github.com/users/3sGgpQ8H/followers",
      "following_url": "https://api.github.com/users/3sGgpQ8H/following{/other_user}",
      "gists_url": "https://api.github.com/users/3sGgpQ8H/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/3sGgpQ8H/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/3sGgpQ8H/subscriptions",
      "organizations_url": "https://api.github.com/users/3sGgpQ8H/orgs",
      "repos_url": "https://api.github.com/users/3sGgpQ8H/repos",
      "events_url": "https://api.github.com/users/3sGgpQ8H/events{/privacy}",
      "received_events_url": "https://api.github.com/users/3sGgpQ8H/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-09-19T06:48:25Z",
    "updated_at": "2017-09-19T06:50:26Z",
    "author_association": "NONE",
    "body": "@Neurone \r\n\r\n> I still think that the safest approach is the set-0,check-balanche,think-how-much-allowance-you-want-to-set,set-allowance-again one.\r\n\r\nThe problem here is with 'check-balance' step.  If your account is quite busy, tokens are constantly going in and out and you approved transfers from it to many people, then your balance is constantly changing even without your intervention and checking balance will tell you nothing about whether the one whose allowance you just tried to revoke managed to use it in the very last moment or not; but you need to know this for sure to perform the next step: think-how-much-allowance-you-want-to-set.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/330445887/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/330610003",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/437#issuecomment-330610003",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/437",
    "id": 330610003,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzMDYxMDAwMw==",
    "user": {
      "login": "Neurone",
      "id": 562943,
      "node_id": "MDQ6VXNlcjU2Mjk0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/562943?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Neurone",
      "html_url": "https://github.com/Neurone",
      "followers_url": "https://api.github.com/users/Neurone/followers",
      "following_url": "https://api.github.com/users/Neurone/following{/other_user}",
      "gists_url": "https://api.github.com/users/Neurone/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Neurone/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Neurone/subscriptions",
      "organizations_url": "https://api.github.com/users/Neurone/orgs",
      "repos_url": "https://api.github.com/users/Neurone/repos",
      "events_url": "https://api.github.com/users/Neurone/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Neurone/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-09-19T17:18:11Z",
    "updated_at": "2017-09-19T17:18:11Z",
    "author_association": "CONTRIBUTOR",
    "body": "Correct, but the difficulty to understand what is happening on your balance **is not related to your intention to modify the allowance** at all, that problem is there in any case. To monitor your token balance you need to establish an app that reads all blocks and transactions related to your token contract, and then you can understand who moved the tokens looking at the sender of the transacion.\r\n\r\nSo, let's say you have implemented an app that monitor your tokens, do you still need a CAS approach? If the answer is _no_, as I think, then I disagree to define the CAS approach as a best practice for setting allowance.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/330610003/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/331138960",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/437#issuecomment-331138960",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/437",
    "id": 331138960,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzMTEzODk2MA==",
    "user": {
      "login": "3sGgpQ8H",
      "id": 3917202,
      "node_id": "MDQ6VXNlcjM5MTcyMDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3917202?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/3sGgpQ8H",
      "html_url": "https://github.com/3sGgpQ8H",
      "followers_url": "https://api.github.com/users/3sGgpQ8H/followers",
      "following_url": "https://api.github.com/users/3sGgpQ8H/following{/other_user}",
      "gists_url": "https://api.github.com/users/3sGgpQ8H/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/3sGgpQ8H/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/3sGgpQ8H/subscriptions",
      "organizations_url": "https://api.github.com/users/3sGgpQ8H/orgs",
      "repos_url": "https://api.github.com/users/3sGgpQ8H/repos",
      "events_url": "https://api.github.com/users/3sGgpQ8H/events{/privacy}",
      "received_events_url": "https://api.github.com/users/3sGgpQ8H/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-09-21T12:17:05Z",
    "updated_at": "2017-09-21T12:17:05Z",
    "author_association": "NONE",
    "body": "@Neurone \r\n\r\n> difficulty to understand what is happening on your balance is not related to your intention to modify the allowance at all\r\n\r\nThis relation exists and you described it in the schema you suggested as the safest way to change allowance: set-0,**check-balance**,think-how-much-allowance-you-want-to-set,set-allowance-again\r\n\r\nDifficulty to understand what is happening on your balance directly affects you ability to perform check-balance step and thus directly affects your ability to execute the whole procedure.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/331138960/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/331158355",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/437#issuecomment-331158355",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/437",
    "id": 331158355,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzMTE1ODM1NQ==",
    "user": {
      "login": "SylTi",
      "id": 1770876,
      "node_id": "MDQ6VXNlcjE3NzA4NzY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1770876?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/SylTi",
      "html_url": "https://github.com/SylTi",
      "followers_url": "https://api.github.com/users/SylTi/followers",
      "following_url": "https://api.github.com/users/SylTi/following{/other_user}",
      "gists_url": "https://api.github.com/users/SylTi/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/SylTi/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SylTi/subscriptions",
      "organizations_url": "https://api.github.com/users/SylTi/orgs",
      "repos_url": "https://api.github.com/users/SylTi/repos",
      "events_url": "https://api.github.com/users/SylTi/events{/privacy}",
      "received_events_url": "https://api.github.com/users/SylTi/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-09-21T13:36:24Z",
    "updated_at": "2017-09-21T13:36:32Z",
    "author_association": "CONTRIBUTOR",
    "body": "> So, let's say you have implemented an app that monitor your tokens, do you still need a CAS approach? If the answer is no, as I think, then I disagree to define the CAS approach as a best practice for setting allowance.\r\n\r\nThe answer is yes, you still do. Because the balance could still change between the moment you check your balance on your app and the moment your transaction to set the new allowance is recorded.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/331158355/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/331283477",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/437#issuecomment-331283477",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/437",
    "id": 331283477,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzMTI4MzQ3Nw==",
    "user": {
      "login": "Neurone",
      "id": 562943,
      "node_id": "MDQ6VXNlcjU2Mjk0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/562943?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Neurone",
      "html_url": "https://github.com/Neurone",
      "followers_url": "https://api.github.com/users/Neurone/followers",
      "following_url": "https://api.github.com/users/Neurone/following{/other_user}",
      "gists_url": "https://api.github.com/users/Neurone/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Neurone/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Neurone/subscriptions",
      "organizations_url": "https://api.github.com/users/Neurone/orgs",
      "repos_url": "https://api.github.com/users/Neurone/repos",
      "events_url": "https://api.github.com/users/Neurone/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Neurone/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-09-21T21:12:47Z",
    "updated_at": "2017-09-21T21:13:46Z",
    "author_association": "CONTRIBUTOR",
    "body": "I'm not convinced yet :)\r\n\r\nI'm thinking about this workflow:\r\n\r\n1. Bob **can move my tokens** because I allowed him to do so, let's say for `200 tokens`\r\n2. During allowance period Bob moved `20 tokens`, so now the remaining allowance is `180 tokens`\r\n2. Now I want to change the allowance to `50`, so I send an `approve(Bob, 0)`\r\n3. I wait some blocks, monitoring my tokens and Bob's transactions\r\n4. I understand what happend and I calculate if some tokens was moved, and I have three options:\r\n   _a)_ Bob moved more tokens that I wanted him to move with the new limit, let's say `80`: sorry, better luck next time. But at least **now** Bob can't move the remaining `100 tokens` anymore\r\n   _b)_ Bob moved less tokens then I want him with the new limit, let's say `20` tokens. But **now** Bob can't move tokens anymore, so I choose the new limit, let's say `30 tokens`, and I submit an `approve(Bob, 30)` transaction\r\n   _c)_ Bob don't moved any tokens and **now** the Bob's allowance is set to `0`. So I send a `approve(Bob, 50)`\r\n\r\nAt step 3, if I send a `decreaseApproval(Bob, 180, 130)` transaction with a CAS approach, the differences in the above workflow are at step _4.a_ and _4.b_. In both cases:\r\n\r\n1. My TX is rejected\r\n2. I pay the maximum gas cost\r\n3. Bob is still able to move all remaining previously allowed tokens\r\n\r\nSo, why `decreaseApproval(Bob, 180, 130)` with CAS should be considered _safer_ then `approve(Bob, 0)`?",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/331283477/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/331364805",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/437#issuecomment-331364805",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/437",
    "id": 331364805,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzMTM2NDgwNQ==",
    "user": {
      "login": "3sGgpQ8H",
      "id": 3917202,
      "node_id": "MDQ6VXNlcjM5MTcyMDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3917202?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/3sGgpQ8H",
      "html_url": "https://github.com/3sGgpQ8H",
      "followers_url": "https://api.github.com/users/3sGgpQ8H/followers",
      "following_url": "https://api.github.com/users/3sGgpQ8H/following{/other_user}",
      "gists_url": "https://api.github.com/users/3sGgpQ8H/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/3sGgpQ8H/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/3sGgpQ8H/subscriptions",
      "organizations_url": "https://api.github.com/users/3sGgpQ8H/orgs",
      "repos_url": "https://api.github.com/users/3sGgpQ8H/repos",
      "events_url": "https://api.github.com/users/3sGgpQ8H/events{/privacy}",
      "received_events_url": "https://api.github.com/users/3sGgpQ8H/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-09-22T06:46:56Z",
    "updated_at": "2017-09-22T06:46:56Z",
    "author_association": "NONE",
    "body": "@Neurone \r\n\r\n> I wait some blocks, monitoring my tokens ...\r\n\r\nIf your account is busy, tokens are constantly going in and out, and many people are allowed to transfer from it, then monitoring your tokens will not help because your token balance will be changing both ways all the time even without Bob's interventions.\r\n\r\n> ... and Bob's transactions\r\n\r\nAssuming that Bob is a contract (reasonable assumption, because `approve`/`transferFrom` is often used to send tokens to contracts), you cannot do this using standard tools and Web3 API.  You have to either run modified node that is able to capture internal transactions performed by contracts, or to run sophisticated script inside non-modified node, which script will capture and trace **all transactions** trying to find internal transactions performed by Bob.  Both ways are too complicated to be recommended as a general way to increase safety of token operations.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/331364805/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/331446879",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/437#issuecomment-331446879",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/437",
    "id": 331446879,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzMTQ0Njg3OQ==",
    "user": {
      "login": "Neurone",
      "id": 562943,
      "node_id": "MDQ6VXNlcjU2Mjk0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/562943?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Neurone",
      "html_url": "https://github.com/Neurone",
      "followers_url": "https://api.github.com/users/Neurone/followers",
      "following_url": "https://api.github.com/users/Neurone/following{/other_user}",
      "gists_url": "https://api.github.com/users/Neurone/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Neurone/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Neurone/subscriptions",
      "organizations_url": "https://api.github.com/users/Neurone/orgs",
      "repos_url": "https://api.github.com/users/Neurone/repos",
      "events_url": "https://api.github.com/users/Neurone/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Neurone/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-09-22T13:29:51Z",
    "updated_at": "2017-09-22T13:29:51Z",
    "author_association": "CONTRIBUTOR",
    "body": "Yes, again, I already agreed with you on this point: monitoring tokens movements is difficult (not impossible). This monitoring is difficult in any case, and using `decreaseApproval` (with or without CAS approach) does not solve the necessity of monitoring.\r\n\r\nAnother point is this: if you implement a CAS approach inside the `decreaseApproval(Bob, 180, 130)` function you don't have any security advantages compared to the `approve(Bob, 0)` function, only drawbacks.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/331446879/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/331452923",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/437#issuecomment-331452923",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/437",
    "id": 331452923,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzMTQ1MjkyMw==",
    "user": {
      "login": "3sGgpQ8H",
      "id": 3917202,
      "node_id": "MDQ6VXNlcjM5MTcyMDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3917202?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/3sGgpQ8H",
      "html_url": "https://github.com/3sGgpQ8H",
      "followers_url": "https://api.github.com/users/3sGgpQ8H/followers",
      "following_url": "https://api.github.com/users/3sGgpQ8H/following{/other_user}",
      "gists_url": "https://api.github.com/users/3sGgpQ8H/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/3sGgpQ8H/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/3sGgpQ8H/subscriptions",
      "organizations_url": "https://api.github.com/users/3sGgpQ8H/orgs",
      "repos_url": "https://api.github.com/users/3sGgpQ8H/repos",
      "events_url": "https://api.github.com/users/3sGgpQ8H/events{/privacy}",
      "received_events_url": "https://api.github.com/users/3sGgpQ8H/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-09-22T13:52:49Z",
    "updated_at": "2017-09-22T13:52:49Z",
    "author_association": "NONE",
    "body": "@Neurone \r\n\r\n> This monitoring is difficult in any case, and using decreaseApproval (with or without CAS approach) does not solve the necessity of monitoring.\r\n\r\nCAS `approve` solves problems mentioned in original article as well as the problem mentioned in original description of this issue.  Could you please describe scenario where monitoring is still needed for safe management of tokens and allowances even if CAS `approve` would be available?",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/331452923/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/331454354",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/437#issuecomment-331454354",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/437",
    "id": 331454354,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzMTQ1NDM1NA==",
    "user": {
      "login": "SylTi",
      "id": 1770876,
      "node_id": "MDQ6VXNlcjE3NzA4NzY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1770876?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/SylTi",
      "html_url": "https://github.com/SylTi",
      "followers_url": "https://api.github.com/users/SylTi/followers",
      "following_url": "https://api.github.com/users/SylTi/following{/other_user}",
      "gists_url": "https://api.github.com/users/SylTi/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/SylTi/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SylTi/subscriptions",
      "organizations_url": "https://api.github.com/users/SylTi/orgs",
      "repos_url": "https://api.github.com/users/SylTi/repos",
      "events_url": "https://api.github.com/users/SylTi/events{/privacy}",
      "received_events_url": "https://api.github.com/users/SylTi/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-09-22T13:58:05Z",
    "updated_at": "2017-09-22T14:08:33Z",
    "author_association": "CONTRIBUTOR",
    "body": "@Neurone that depends on how you use approve. \r\nIn my opinion, you should only approve the exact amount of tokens that should be withdrawn by the other party. Not more. \r\nAnd the CAS approach (with a single function), in this case, guarantees that the other party didn't withdraw anything before you change the approved amount.\r\nAnd in the case that the approver is a smart contract, it reduce the gas cost (you don't have to call allowance, and a single call to CASapprove())",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/331454354/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/331456182",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/437#issuecomment-331456182",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/437",
    "id": 331456182,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzMTQ1NjE4Mg==",
    "user": {
      "login": "Neurone",
      "id": 562943,
      "node_id": "MDQ6VXNlcjU2Mjk0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/562943?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Neurone",
      "html_url": "https://github.com/Neurone",
      "followers_url": "https://api.github.com/users/Neurone/followers",
      "following_url": "https://api.github.com/users/Neurone/following{/other_user}",
      "gists_url": "https://api.github.com/users/Neurone/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Neurone/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Neurone/subscriptions",
      "organizations_url": "https://api.github.com/users/Neurone/orgs",
      "repos_url": "https://api.github.com/users/Neurone/repos",
      "events_url": "https://api.github.com/users/Neurone/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Neurone/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-09-22T14:04:45Z",
    "updated_at": "2017-09-22T14:05:02Z",
    "author_association": "CONTRIBUTOR",
    "body": "@mikhail-vladimirov Sorry but I can't :-) basically because I think the CAS approach in the `decreaseApproval` **does not** solve the problem mentioned in the original description of this issue, that was step 6:\r\n\r\n> Now Alice may think that once decreaseApproval call was executed successfully, then Bob didn't manage to transfer any of her tokens before the allowance was decreased, but this assumption is wrong.\r\nActually, Bob may or may not had transferred Alice's tokens before allowance was decreased, and Alice has no easy way to know for sure whether Bob transferred her tokens or not. Actually, Bob may or may not had transferred Alice's tokens before allowance was decreased, and Alice has no easy way to know for sure whether Bob transferred her tokens or not\r\n\r\nI simply don't think is a good approach blocking a TX that want to modify the state, just because I can't _easily_ understand that state.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/331456182/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/331458523",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/437#issuecomment-331458523",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/437",
    "id": 331458523,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzMTQ1ODUyMw==",
    "user": {
      "login": "SylTi",
      "id": 1770876,
      "node_id": "MDQ6VXNlcjE3NzA4NzY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1770876?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/SylTi",
      "html_url": "https://github.com/SylTi",
      "followers_url": "https://api.github.com/users/SylTi/followers",
      "following_url": "https://api.github.com/users/SylTi/following{/other_user}",
      "gists_url": "https://api.github.com/users/SylTi/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/SylTi/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SylTi/subscriptions",
      "organizations_url": "https://api.github.com/users/SylTi/orgs",
      "repos_url": "https://api.github.com/users/SylTi/repos",
      "events_url": "https://api.github.com/users/SylTi/events{/privacy}",
      "received_events_url": "https://api.github.com/users/SylTi/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-09-22T14:12:48Z",
    "updated_at": "2017-09-22T14:13:56Z",
    "author_association": "CONTRIBUTOR",
    "body": "` I simply don't think is a good approach blocking a TX that want to modify the state, just because I can't easily understand that state.`\r\n@Neurone I think it's better in terms of security and gas efficiency if the approver is a contract.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/331458523/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/331461380",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/437#issuecomment-331461380",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/437",
    "id": 331461380,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzMTQ2MTM4MA==",
    "user": {
      "login": "Neurone",
      "id": 562943,
      "node_id": "MDQ6VXNlcjU2Mjk0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/562943?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Neurone",
      "html_url": "https://github.com/Neurone",
      "followers_url": "https://api.github.com/users/Neurone/followers",
      "following_url": "https://api.github.com/users/Neurone/following{/other_user}",
      "gists_url": "https://api.github.com/users/Neurone/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Neurone/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Neurone/subscriptions",
      "organizations_url": "https://api.github.com/users/Neurone/orgs",
      "repos_url": "https://api.github.com/users/Neurone/repos",
      "events_url": "https://api.github.com/users/Neurone/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Neurone/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-09-22T14:23:05Z",
    "updated_at": "2017-09-22T14:23:05Z",
    "author_association": "CONTRIBUTOR",
    "body": "@SylTi once approved, no subsequent TX can guarantee to block the other party to widthdraw that amount. If CAS approach is implemented, you are enslaving the result of your TX to the behaviour of someone else. You can't control that behaviour, so you don't know if TX will be executed or it will throw an exception. I believe that is not a good approach having this kind of uncertainty when calling a smart contract's function.\r\n\r\n@mikhail-vladimirov  @SylTi  Clearly we have different visions about smart contract design. It's not a problem for me, let's have a separated `decreaseApproval` function with CAS approach, but I'll continue to recommend the `approve(Bob,0)` one :)",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/331461380/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/331482398",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/437#issuecomment-331482398",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/437",
    "id": 331482398,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzMTQ4MjM5OA==",
    "user": {
      "login": "jakub-wojciechowski",
      "id": 27825272,
      "node_id": "MDQ6VXNlcjI3ODI1Mjcy",
      "avatar_url": "https://avatars.githubusercontent.com/u/27825272?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jakub-wojciechowski",
      "html_url": "https://github.com/jakub-wojciechowski",
      "followers_url": "https://api.github.com/users/jakub-wojciechowski/followers",
      "following_url": "https://api.github.com/users/jakub-wojciechowski/following{/other_user}",
      "gists_url": "https://api.github.com/users/jakub-wojciechowski/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jakub-wojciechowski/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jakub-wojciechowski/subscriptions",
      "organizations_url": "https://api.github.com/users/jakub-wojciechowski/orgs",
      "repos_url": "https://api.github.com/users/jakub-wojciechowski/repos",
      "events_url": "https://api.github.com/users/jakub-wojciechowski/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jakub-wojciechowski/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-09-22T15:38:03Z",
    "updated_at": "2017-09-22T15:38:03Z",
    "author_association": "CONTRIBUTOR",
    "body": "We've got a very interesting discussion in here. There is no silver bullet to solve all of the problems with the approve method. Imho, the best solution is to have 2 separate methods:\r\n\r\n1) The old `decreaseApproval` with the small improvement of returning (instead of the boolean success flag) the value of the final `subtractedValue`. That will help to mitigate the original problem when the current approval is less than the intended modification by signalling to the caller what the effective reduction was.  What do you think about it @mikhail-vladimirov ?\r\n\r\n2) The new CAS approach which has the advantage of an atomic update that rigorously checks for entry conditions.  \r\n\r\nIt will be up to the users whether they want their transaction to be effective immediately with the risk of inconsistency with their expectations or to perform the update only under strict preconditions. It slightly reminds me the battle between optimistic and pessimistic locking in relational databases. \r\n",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/331482398/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/331496422",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/437#issuecomment-331496422",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/437",
    "id": 331496422,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzMTQ5NjQyMg==",
    "user": {
      "login": "3sGgpQ8H",
      "id": 3917202,
      "node_id": "MDQ6VXNlcjM5MTcyMDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3917202?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/3sGgpQ8H",
      "html_url": "https://github.com/3sGgpQ8H",
      "followers_url": "https://api.github.com/users/3sGgpQ8H/followers",
      "following_url": "https://api.github.com/users/3sGgpQ8H/following{/other_user}",
      "gists_url": "https://api.github.com/users/3sGgpQ8H/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/3sGgpQ8H/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/3sGgpQ8H/subscriptions",
      "organizations_url": "https://api.github.com/users/3sGgpQ8H/orgs",
      "repos_url": "https://api.github.com/users/3sGgpQ8H/repos",
      "events_url": "https://api.github.com/users/3sGgpQ8H/events{/privacy}",
      "received_events_url": "https://api.github.com/users/3sGgpQ8H/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-09-22T16:33:00Z",
    "updated_at": "2017-09-22T16:33:00Z",
    "author_association": "NONE",
    "body": "@jakub-wojciechowski \r\n\r\n> of returning (instead of the boolean success flag) the value of the final subtractedValue\r\n\r\nIt is not possible via standard tools and Web3 API to get return value of contact call executed non-locally (i.e. mined as a transaction), so this will not help a lot.  This probably will be changed in future (https://github.com/ethereum/EIPs/pull/658), but as for now, this is not a solution from my point of view.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/331496422/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
