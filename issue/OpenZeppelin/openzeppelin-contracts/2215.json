{
  "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2215",
  "repository_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts",
  "labels_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2215/labels{/name}",
  "comments_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2215/comments",
  "events_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2215/events",
  "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2215",
  "id": 606904532,
  "node_id": "MDU6SXNzdWU2MDY5MDQ1MzI=",
  "number": 2215,
  "title": "Reliability of the truthiness in `isContract` method",
  "user": {
    "login": "corydickson",
    "id": 7246942,
    "node_id": "MDQ6VXNlcjcyNDY5NDI=",
    "avatar_url": "https://avatars.githubusercontent.com/u/7246942?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/corydickson",
    "html_url": "https://github.com/corydickson",
    "followers_url": "https://api.github.com/users/corydickson/followers",
    "following_url": "https://api.github.com/users/corydickson/following{/other_user}",
    "gists_url": "https://api.github.com/users/corydickson/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/corydickson/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/corydickson/subscriptions",
    "organizations_url": "https://api.github.com/users/corydickson/orgs",
    "repos_url": "https://api.github.com/users/corydickson/repos",
    "events_url": "https://api.github.com/users/corydickson/events{/privacy}",
    "received_events_url": "https://api.github.com/users/corydickson/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 7,
  "created_at": "2020-04-26T03:01:34Z",
  "updated_at": "2020-05-20T00:24:26Z",
  "closed_at": null,
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "When reviewing [this EIP](https://github.com/ethereum/EIPs/blob/master/EIPS/eip-1052.md), it is unclear to me if someone were to selfdestruct a contract in the same transaction it was created that this function would still return True. Is this intended behavior? \r\n\r\nI feel like this would lead to some obscure bugs, namely contracts that behave in test cases 5/6 described above.",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2215/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2215/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/621635559",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2215#issuecomment-621635559",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2215",
    "id": 621635559,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYyMTYzNTU1OQ==",
    "user": {
      "login": "abcoathup",
      "id": 28278242,
      "node_id": "MDQ6VXNlcjI4Mjc4MjQy",
      "avatar_url": "https://avatars.githubusercontent.com/u/28278242?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/abcoathup",
      "html_url": "https://github.com/abcoathup",
      "followers_url": "https://api.github.com/users/abcoathup/followers",
      "following_url": "https://api.github.com/users/abcoathup/following{/other_user}",
      "gists_url": "https://api.github.com/users/abcoathup/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/abcoathup/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/abcoathup/subscriptions",
      "organizations_url": "https://api.github.com/users/abcoathup/orgs",
      "repos_url": "https://api.github.com/users/abcoathup/repos",
      "events_url": "https://api.github.com/users/abcoathup/events{/privacy}",
      "received_events_url": "https://api.github.com/users/abcoathup/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-04-30T06:16:58Z",
    "updated_at": "2020-04-30T06:16:58Z",
    "author_association": "CONTRIBUTOR",
    "body": "Hi @corydickson!  We have been able to reproduce this issue by following these steps:\r\n\r\n`isContract` returns true for a contract that is created and self destructed in the same transaction.  `isContract` returns false in subsequent transactions.\r\n\r\n## Target.sol\r\n```solidity\r\npragma solidity ^0.6.0;\r\n\r\ncontract Target {\r\n    function destroy() public {\r\n        selfdestruct(msg.sender);\r\n    }\r\n}\r\n```\r\n## Check.sol\r\n```solidity\r\npragma solidity ^0.6.0;\r\n\r\nimport \"@openzeppelin/contracts/utils/Address.sol\";\r\nimport \"./Target.sol\";\r\n\r\ncontract Check {\r\n    using Address for address;\r\n\r\n    Target public target;\r\n\r\n    event Status(bool newValue);\r\n\r\n    function check() public {\r\n        target = new Target();\r\n        target.destroy();\r\n\r\n        emit Status(address(target).isContract());\r\n    }\r\n\r\n    function check2() public {\r\n        emit Status(address(target).isContract());\r\n    }\r\n}\r\n```\r\n\r\n```\r\n$ npx oz deploy\r\n✓ Compiled contracts with solc 0.6.6 (commit.6c089d02)\r\n? Choose the kind of deployment regular\r\n? Pick a network development\r\n? Pick a contract to deploy Check\r\n✓ Deployed instance of Check\r\n0xe78A0F7E598Cc8b0Bb87894B0F60dD2a88d6a8Ab\r\n\r\n$ npx oz send-tx\r\n? Pick a network development\r\n? Pick an instance Check at 0xe78A0F7E598Cc8b0Bb87894B0F60dD2a88d6a8Ab\r\n? Select which function check()\r\n✓ Transaction successful. Transaction hash: 0xa42a2af5798d541f87b5293d377ed012a9ba96f6c6e7138d5c0fdc8480413b54\r\nEvents emitted:\r\n - Status(true)\r\n\r\n$ npx oz send-tx\r\n? Pick a network development\r\n? Pick an instance Check at 0xe78A0F7E598Cc8b0Bb87894B0F60dD2a88d6a8Ab\r\n? Select which function check2()\r\n✓ Transaction successful. Transaction hash: 0x2f84c974256cf10d5741f90994296ba852759d585265615f6334b60887814433\r\nEvents emitted:\r\n - Status(false)\r\n```\r\n\r\nThanks so much for reporting it! The project owner will review and triage this issue during the next week.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/621635559/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/622168577",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2215#issuecomment-622168577",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2215",
    "id": 622168577,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYyMjE2ODU3Nw==",
    "user": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-04-30T23:15:39Z",
    "updated_at": "2020-04-30T23:15:39Z",
    "author_association": "MEMBER",
    "body": "Thank you for testing this @abcoathup.\r\n\r\n@corydickson Can you please rephrase in more detail what is the issue that you see here? I'm not sure I understand.\r\n\r\nThe semantics of `isContract` are a bit strange and may be unintuitive, but it's the way the EVM works. We do have a warning in [the docs](https://docs.openzeppelin.com/contracts/3.x/api/utils#Address-isContract-address-). If you have any suggestions on how the docs could be improved  let us know.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/622168577/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/629675482",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2215#issuecomment-629675482",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2215",
    "id": 629675482,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYyOTY3NTQ4Mg==",
    "user": {
      "login": "corydickson",
      "id": 7246942,
      "node_id": "MDQ6VXNlcjcyNDY5NDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7246942?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/corydickson",
      "html_url": "https://github.com/corydickson",
      "followers_url": "https://api.github.com/users/corydickson/followers",
      "following_url": "https://api.github.com/users/corydickson/following{/other_user}",
      "gists_url": "https://api.github.com/users/corydickson/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/corydickson/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/corydickson/subscriptions",
      "organizations_url": "https://api.github.com/users/corydickson/orgs",
      "repos_url": "https://api.github.com/users/corydickson/repos",
      "events_url": "https://api.github.com/users/corydickson/events{/privacy}",
      "received_events_url": "https://api.github.com/users/corydickson/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-05-16T16:55:48Z",
    "updated_at": "2020-05-16T16:55:48Z",
    "author_association": "CONTRIBUTOR",
    "body": "Thanks both @abcoathup @frangio for reaching out to address the concern. It more has to do with the naming of the API and in the documentation it says:\r\n\r\n> Among others, isContract will return **false** for the following types of addresses:\r\n-- an address where a contract lived, but was destroyed\r\n\r\n\r\nBut the test case provided shows how if in the same tx a contract is created/selfdestructed this check still returns True. Could we update the docs to reflect this, or maybe change the name of this function to be `hasHadCodeDeployed` or something in that vein ",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/629675482/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/630327365",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2215#issuecomment-630327365",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2215",
    "id": 630327365,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYzMDMyNzM2NQ==",
    "user": {
      "login": "nventuro",
      "id": 2530770,
      "node_id": "MDQ6VXNlcjI1MzA3NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2530770?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nventuro",
      "html_url": "https://github.com/nventuro",
      "followers_url": "https://api.github.com/users/nventuro/followers",
      "following_url": "https://api.github.com/users/nventuro/following{/other_user}",
      "gists_url": "https://api.github.com/users/nventuro/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nventuro/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nventuro/subscriptions",
      "organizations_url": "https://api.github.com/users/nventuro/orgs",
      "repos_url": "https://api.github.com/users/nventuro/repos",
      "events_url": "https://api.github.com/users/nventuro/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nventuro/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-05-18T17:26:40Z",
    "updated_at": "2020-05-18T17:26:40Z",
    "author_association": "CONTRIBUTOR",
    "body": "I dug a bit into EIPs [1052](https://eips.ethereum.org/EIPS/eip-1052) and [161](https://eips.ethereum.org/EIPS/eip-161) to better understand how `selfdestruct` interacts with `extcodehash`, but couldn't really find what I was looking for. \r\n\r\nHowever, I think the current behavior, if perhaps strange, is still valid and useful. Any account for which `isContract` returns true *is* a contract and *not* an EOA. There's a number of reasons that can cause the check to return false, but a return value of true _does_ provide useful information. This is similar to how you can prove an account is an EOA by checking a signature, but cannot prove that it is *not* an EOA (other than proving it is a contract).\r\n\r\nWe may want to add a note to that effect to our docs.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/630327365/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/630446665",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2215#issuecomment-630446665",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2215",
    "id": 630446665,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYzMDQ0NjY2NQ==",
    "user": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-05-18T21:32:36Z",
    "updated_at": "2020-05-18T21:32:36Z",
    "author_association": "MEMBER",
    "body": "The name `hasHadCodeDeployed` would not be accurate, because a contract that has been selfdestructed indeed has had code deployed at some point, but doesn't anymore. We want `isContract` to return false in that situation.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/630446665/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/631142220",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2215#issuecomment-631142220",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2215",
    "id": 631142220,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYzMTE0MjIyMA==",
    "user": {
      "login": "corydickson",
      "id": 7246942,
      "node_id": "MDQ6VXNlcjcyNDY5NDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7246942?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/corydickson",
      "html_url": "https://github.com/corydickson",
      "followers_url": "https://api.github.com/users/corydickson/followers",
      "following_url": "https://api.github.com/users/corydickson/following{/other_user}",
      "gists_url": "https://api.github.com/users/corydickson/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/corydickson/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/corydickson/subscriptions",
      "organizations_url": "https://api.github.com/users/corydickson/orgs",
      "repos_url": "https://api.github.com/users/corydickson/repos",
      "events_url": "https://api.github.com/users/corydickson/events{/privacy}",
      "received_events_url": "https://api.github.com/users/corydickson/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-05-19T23:32:51Z",
    "updated_at": "2020-05-19T23:35:23Z",
    "author_association": "CONTRIBUTOR",
    "body": "Got it so sounds like we're aligned about the \"desired\" functionality behind the API semantics. Not sure how to achieve this in the EVM either, but as @nventuro suggested maybe updating the docs is all that can be done for now. ",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/631142220/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/631161337",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2215#issuecomment-631161337",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2215",
    "id": 631161337,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYzMTE2MTMzNw==",
    "user": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-05-20T00:23:51Z",
    "updated_at": "2020-05-20T00:24:25Z",
    "author_association": "MEMBER",
    "body": "I believe those are the semantics that we have now! Unfortunately we're not testing for the more complex scenarios involving contract creation and selfdestruct, but it would be nice to incorporate that into the test suite.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/631161337/reactions",
      "total_count": 2,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 1,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
