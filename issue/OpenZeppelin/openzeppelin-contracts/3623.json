{
  "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3623",
  "repository_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts",
  "labels_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3623/labels{/name}",
  "comments_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3623/comments",
  "events_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3623/events",
  "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3623",
  "id": 1340863999,
  "node_id": "I_kwDOA9tCBs5P6_X_",
  "number": 3623,
  "title": "AccessControl Admin Rules",
  "user": {
    "login": "frangio",
    "id": 481465,
    "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
    "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/frangio",
    "html_url": "https://github.com/frangio",
    "followers_url": "https://api.github.com/users/frangio/followers",
    "following_url": "https://api.github.com/users/frangio/following{/other_user}",
    "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
    "organizations_url": "https://api.github.com/users/frangio/orgs",
    "repos_url": "https://api.github.com/users/frangio/repos",
    "events_url": "https://api.github.com/users/frangio/events{/privacy}",
    "received_events_url": "https://api.github.com/users/frangio/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/milestones/14",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/milestone/14",
    "labels_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/milestones/14/labels",
    "id": 8383880,
    "node_id": "MI_kwDOA9tCBs4Af-2I",
    "number": 14,
    "title": "4.9",
    "description": "",
    "creator": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "open_issues": 0,
    "closed_issues": 24,
    "state": "closed",
    "created_at": "2022-09-05T16:36:05Z",
    "updated_at": "2023-05-16T01:45:32Z",
    "due_on": null,
    "closed_at": "2023-05-16T01:45:32Z"
  },
  "comments": 31,
  "created_at": "2022-08-16T20:46:47Z",
  "updated_at": "2023-02-24T21:48:11Z",
  "closed_at": "2023-02-24T21:48:10Z",
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "The default admin in AccessControl is a very sensitive role and it requires special treatment. In the docs we recommend \"extra precautions\" but this refers mostly to off-chain operational security:\r\n\r\n![image](https://user-images.githubusercontent.com/481465/184980752-491c725f-1a30-42a7-9522-633db7f32427.png)\r\n\r\nIs there something we can do at the contract level to encourage better security practices around the default admin role?\r\n\r\nI am thinking we can have an extension of AccessControl that adds special rules for this role.\r\n\r\nSome ideas I've gathered from @nchamo and @nventuro:\r\n\r\n1) Enforce that just one account holds the role.\r\n2) Enforce a 2-step process to transfer the role to another account: grant then claim.\r\n3) Enforce a configurable delay between the two steps, with the ability to cancel in between.\r\n\r\nRelated to https://github.com/OpenZeppelin/openzeppelin-contracts/pull/3593",
  "closed_by": {
    "login": "frangio",
    "id": 481465,
    "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
    "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/frangio",
    "html_url": "https://github.com/frangio",
    "followers_url": "https://api.github.com/users/frangio/followers",
    "following_url": "https://api.github.com/users/frangio/following{/other_user}",
    "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
    "organizations_url": "https://api.github.com/users/frangio/orgs",
    "repos_url": "https://api.github.com/users/frangio/repos",
    "events_url": "https://api.github.com/users/frangio/events{/privacy}",
    "received_events_url": "https://api.github.com/users/frangio/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3623/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3623/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1221106129",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3623#issuecomment-1221106129",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3623",
    "id": 1221106129,
    "node_id": "IC_kwDOA9tCBs5IyJnR",
    "user": {
      "login": "hrik2001",
      "id": 11733600,
      "node_id": "MDQ6VXNlcjExNzMzNjAw",
      "avatar_url": "https://avatars.githubusercontent.com/u/11733600?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hrik2001",
      "html_url": "https://github.com/hrik2001",
      "followers_url": "https://api.github.com/users/hrik2001/followers",
      "following_url": "https://api.github.com/users/hrik2001/following{/other_user}",
      "gists_url": "https://api.github.com/users/hrik2001/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hrik2001/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hrik2001/subscriptions",
      "organizations_url": "https://api.github.com/users/hrik2001/orgs",
      "repos_url": "https://api.github.com/users/hrik2001/repos",
      "events_url": "https://api.github.com/users/hrik2001/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hrik2001/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-08-19T21:30:17Z",
    "updated_at": "2022-08-19T21:30:17Z",
    "author_association": "CONTRIBUTOR",
    "body": "Hello @frangio, you might remember me from #3598.\r\nInterested in implementing this, but I believe that you might have more things in mind.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1221106129/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1221112109",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3623#issuecomment-1221112109",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3623",
    "id": 1221112109,
    "node_id": "IC_kwDOA9tCBs5IyLEt",
    "user": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-08-19T21:40:36Z",
    "updated_at": "2022-08-19T21:40:36Z",
    "author_association": "MEMBER",
    "body": "We're still discussing ideas. If you want to help I think it would be great to put together a proof of concept implementing the 3 points I mentioned. You can share it here in a comment. Please no PRs yet until we pin down the design!",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1221112109/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1222074343",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3623#issuecomment-1222074343",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3623",
    "id": 1222074343,
    "node_id": "IC_kwDOA9tCBs5I11_n",
    "user": {
      "login": "Amxx",
      "id": 2432299,
      "node_id": "MDQ6VXNlcjI0MzIyOTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2432299?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Amxx",
      "html_url": "https://github.com/Amxx",
      "followers_url": "https://api.github.com/users/Amxx/followers",
      "following_url": "https://api.github.com/users/Amxx/following{/other_user}",
      "gists_url": "https://api.github.com/users/Amxx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Amxx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Amxx/subscriptions",
      "organizations_url": "https://api.github.com/users/Amxx/orgs",
      "repos_url": "https://api.github.com/users/Amxx/repos",
      "events_url": "https://api.github.com/users/Amxx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Amxx/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-08-22T09:11:08Z",
    "updated_at": "2022-08-22T13:46:51Z",
    "author_association": "COLLABORATOR",
    "body": "POC:\r\n\r\n```\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\n\r\ncontract AccessControlWithDelayedOwnership is Ownable, AccessControl {\r\n    // Making this updatable causes issues:\r\n    // - who can update it? Only the owner!\r\n    // - if the owner what to instant transfer, can he just set it to 0 and do an instant transfer?\r\n    // - should we enforce a minimum, non updatable delay?\r\n    // - if so, why do we need an updatable delay and not just stick to the minimum value.\r\n    uint32  public immutable delay;\r\n    \r\n    address public pendingOwner;\r\n    uint32  public pendingOwnerTimer;\r\n    \r\n    constructor(uint32 initialDelay) {\r\n        delay = initialDelay;\r\n    }\r\n\r\n    // Admin is owner\r\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\r\n        return role == DEFAULT_ADMIN_ROLE ? account == owner() : super.hasRole(role, account);\r\n    }\r\n\r\n    function _grantRole(bytes32 role, address account) internal override {\r\n        require(role != DEFAULT_ADMIN_ROLE, \"Admin role overriden with ownership\");\r\n        super._grantRole(role, account);\r\n    }\r\n\r\n    function _revokeRole(bytes32 role, address account) internal override {\r\n        require(role != DEFAULT_ADMIN_ROLE, \"Admin role overriden with ownership\");\r\n        super._revokeRole(role, account);\r\n    }\r\n\r\n    // Owner can call with address(0) during the delay to cancel\r\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\r\n        pendingOwner = newOwner;\r\n        pendingOwnerTimer = uint32(block.timestamp) + delay;\r\n        // TODO: emit event\r\n    }\r\n\r\n    function transferOwnership(address newOwner, uint32 timestamp) public virtual override onlyOwner {\r\n        require(block.timestamp + delay < timestamp);\r\n        pendingOwner = newOwner;\r\n        pendingOwnerTimer = timestamp;\r\n        // TODO: emit event\r\n    }\r\n\r\n    // TODO: remove renounceOwnership ?\r\n\r\n    function acceptOwnership() public virtual {\r\n        require(pendingOwner == _msgSender(), \"Only pending owner can accept ownership\");\r\n        require(pendingOwnerTimer < block.timestamp, \"Pending ownership delay\");\r\n        _transferOwnership(pendingOwner);\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal virtual override {\r\n        super._transferOwnership(newOwner);\r\n        delete pendingOwner;\r\n        delete pendingOwnerTimer;\r\n    }\r\n}\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1222074343/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1222411725",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3623#issuecomment-1222411725",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3623",
    "id": 1222411725,
    "node_id": "IC_kwDOA9tCBs5I3IXN",
    "user": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-08-22T14:06:13Z",
    "updated_at": "2022-08-22T14:06:13Z",
    "author_association": "MEMBER",
    "body": "I would not use Ownable for this. What are the benefits to using it? ",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1222411725/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1222416915",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3623#issuecomment-1222416915",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3623",
    "id": 1222416915,
    "node_id": "IC_kwDOA9tCBs5I3JoT",
    "user": {
      "login": "Amxx",
      "id": 2432299,
      "node_id": "MDQ6VXNlcjI0MzIyOTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2432299?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Amxx",
      "html_url": "https://github.com/Amxx",
      "followers_url": "https://api.github.com/users/Amxx/followers",
      "following_url": "https://api.github.com/users/Amxx/following{/other_user}",
      "gists_url": "https://api.github.com/users/Amxx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Amxx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Amxx/subscriptions",
      "organizations_url": "https://api.github.com/users/Amxx/orgs",
      "repos_url": "https://api.github.com/users/Amxx/repos",
      "events_url": "https://api.github.com/users/Amxx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Amxx/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-08-22T14:10:09Z",
    "updated_at": "2022-08-22T14:11:35Z",
    "author_association": "COLLABORATOR",
    "body": "I'd say\r\n- compatibility with some ownable toolling. \r\n- reusing code means a smaller contract\r\n- easily to track/understand (including by things like OpenSea that looks for owner() to give admin access to a collection's page)\r\n\r\nIt's technically an ownership pattern we are talking about, so to me using Ownable for that is a no brainer.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1222416915/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1222427768",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3623#issuecomment-1222427768",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3623",
    "id": 1222427768,
    "node_id": "IC_kwDOA9tCBs5I3MR4",
    "user": {
      "login": "hrik2001",
      "id": 11733600,
      "node_id": "MDQ6VXNlcjExNzMzNjAw",
      "avatar_url": "https://avatars.githubusercontent.com/u/11733600?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hrik2001",
      "html_url": "https://github.com/hrik2001",
      "followers_url": "https://api.github.com/users/hrik2001/followers",
      "following_url": "https://api.github.com/users/hrik2001/following{/other_user}",
      "gists_url": "https://api.github.com/users/hrik2001/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hrik2001/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hrik2001/subscriptions",
      "organizations_url": "https://api.github.com/users/hrik2001/orgs",
      "repos_url": "https://api.github.com/users/hrik2001/repos",
      "events_url": "https://api.github.com/users/hrik2001/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hrik2001/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-08-22T14:18:23Z",
    "updated_at": "2022-08-22T14:18:23Z",
    "author_association": "CONTRIBUTOR",
    "body": "I also had one question, should delay be immutable? I was thinking of more along the lines of having an overloaded function for _transferOwnership where the second parameter would be delay.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1222427768/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1222436518",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3623#issuecomment-1222436518",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3623",
    "id": 1222436518,
    "node_id": "IC_kwDOA9tCBs5I3Oam",
    "user": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-08-22T14:24:48Z",
    "updated_at": "2022-08-22T14:24:48Z",
    "author_association": "MEMBER",
    "body": "The delay should be enforced. The idea of the delay is to have a time period to detect if an admin transfer was malicious and have the ability to cancel it before it comes into effect. \r\n\r\nIt should probably not be immutable but changing it should be done by the admin and with a delay.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1222436518/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1222523063",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3623#issuecomment-1222523063",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3623",
    "id": 1222523063,
    "node_id": "IC_kwDOA9tCBs5I3ji3",
    "user": {
      "login": "Amxx",
      "id": 2432299,
      "node_id": "MDQ6VXNlcjI0MzIyOTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2432299?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Amxx",
      "html_url": "https://github.com/Amxx",
      "followers_url": "https://api.github.com/users/Amxx/followers",
      "following_url": "https://api.github.com/users/Amxx/following{/other_user}",
      "gists_url": "https://api.github.com/users/Amxx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Amxx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Amxx/subscriptions",
      "organizations_url": "https://api.github.com/users/Amxx/orgs",
      "repos_url": "https://api.github.com/users/Amxx/repos",
      "events_url": "https://api.github.com/users/Amxx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Amxx/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-08-22T15:31:19Z",
    "updated_at": "2022-08-22T17:50:22Z",
    "author_association": "COLLABORATOR",
    "body": "Considering all these \"value updatable with a delay\", I wonder if we should include a library for that. Something like\r\n\r\n```\r\nimport \"@openzeppelin/contracts/utils/Timers.sol\";\r\n\r\nlibrary Delay {\r\n    using Timers for Timers.Timestamp;\r\n\r\n    struct AddressWithUpdateDelay {\r\n        address value;\r\n        address pendingValue;\r\n        Timers.Timestamp delay;\r\n    }\r\n\r\n    function getValue(AddressWithUpdateDelay storage self) internal view returns (address) {\r\n        return self.value;\r\n    }\r\n\r\n    function getPendingValue(AddressWithUpdateDelay storage self) internal view returns (address) {\r\n        return self.pendingValue;\r\n    }\r\n\r\n    function getDeadline(AddressWithUpdateDelay storage self) internal view returns (uint64) {\r\n        return self.delay.getDeadline();\r\n    }\r\n\r\n    function scheduleUpdate(AddressWithUpdateDelay storage self, address newValue, uint32 deadline) internal {\r\n        self.pendingValue = newValue;\r\n        self.delay.setDeadline(deadline);\r\n    }\r\n\r\n    function executeUpdate(AddressWithUpdateDelay storage self) internal returns (bool) {\r\n        if (self.delay.isExpired()) {\r\n            self.value = self.pendingValue;\r\n            delete self.pendingValue;\r\n            delete self.delay;\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n}\r\n```\r\n(that could be available for different sub-types)\r\n\r\nThat could be a first good issue that would pave the way for this (and other PR)",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1222523063/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1222821032",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3623#issuecomment-1222821032",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3623",
    "id": 1222821032,
    "node_id": "IC_kwDOA9tCBs5I4sSo",
    "user": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-08-22T19:30:11Z",
    "updated_at": "2022-08-22T19:30:11Z",
    "author_association": "MEMBER",
    "body": "@Amxx Hm, I think that abstraction is a bit on the overengineered side.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1222821032/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1223565806",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3623#issuecomment-1223565806",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3623",
    "id": 1223565806,
    "node_id": "IC_kwDOA9tCBs5I7iHu",
    "user": {
      "login": "hrik2001",
      "id": 11733600,
      "node_id": "MDQ6VXNlcjExNzMzNjAw",
      "avatar_url": "https://avatars.githubusercontent.com/u/11733600?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hrik2001",
      "html_url": "https://github.com/hrik2001",
      "followers_url": "https://api.github.com/users/hrik2001/followers",
      "following_url": "https://api.github.com/users/hrik2001/following{/other_user}",
      "gists_url": "https://api.github.com/users/hrik2001/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hrik2001/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hrik2001/subscriptions",
      "organizations_url": "https://api.github.com/users/hrik2001/orgs",
      "repos_url": "https://api.github.com/users/hrik2001/repos",
      "events_url": "https://api.github.com/users/hrik2001/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hrik2001/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-08-23T05:30:49Z",
    "updated_at": "2022-08-23T05:30:49Z",
    "author_association": "CONTRIBUTOR",
    "body": "@frangio so are you against the idea of a library for delays? Or the library is over engineered you mean.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1223565806/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1224318767",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3623#issuecomment-1224318767",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3623",
    "id": 1224318767,
    "node_id": "IC_kwDOA9tCBs5I-Z8v",
    "user": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-08-23T16:34:59Z",
    "updated_at": "2022-08-23T16:34:59Z",
    "author_association": "MEMBER",
    "body": "Yes I'd say a library for delayed updates is not necessary.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1224318767/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1224344993",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3623#issuecomment-1224344993",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3623",
    "id": 1224344993,
    "node_id": "IC_kwDOA9tCBs5I-gWh",
    "user": {
      "login": "nventuro",
      "id": 2530770,
      "node_id": "MDQ6VXNlcjI1MzA3NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2530770?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nventuro",
      "html_url": "https://github.com/nventuro",
      "followers_url": "https://api.github.com/users/nventuro/followers",
      "following_url": "https://api.github.com/users/nventuro/following{/other_user}",
      "gists_url": "https://api.github.com/users/nventuro/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nventuro/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nventuro/subscriptions",
      "organizations_url": "https://api.github.com/users/nventuro/orgs",
      "repos_url": "https://api.github.com/users/nventuro/repos",
      "events_url": "https://api.github.com/users/nventuro/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nventuro/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-08-23T16:55:43Z",
    "updated_at": "2022-08-23T16:55:43Z",
    "author_association": "CONTRIBUTOR",
    "body": "Changing delays is a bit tricky: if decreasing the delay, you'd then need to wait at least the difference between delays before making the change, and if increasing it you technically don't need to wait at all. But you also don't want for delays to e.g. be immediately increased to 100 years.\r\n\r\nWe chose to have an absolute maximum delay (2 years), and a minimum delay of 5 days whenever a delay is changed, including when the delay is increased.\r\n\r\nGiven you don't have any other delay-changing mechanism, the complexity of the above, and that changing delays is a very infrequent action, I'd just make it immutable.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1224344993/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1224861975",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3623#issuecomment-1224861975",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3623",
    "id": 1224861975,
    "node_id": "IC_kwDOA9tCBs5JAekX",
    "user": {
      "login": "hrik2001",
      "id": 11733600,
      "node_id": "MDQ6VXNlcjExNzMzNjAw",
      "avatar_url": "https://avatars.githubusercontent.com/u/11733600?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hrik2001",
      "html_url": "https://github.com/hrik2001",
      "followers_url": "https://api.github.com/users/hrik2001/followers",
      "following_url": "https://api.github.com/users/hrik2001/following{/other_user}",
      "gists_url": "https://api.github.com/users/hrik2001/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hrik2001/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hrik2001/subscriptions",
      "organizations_url": "https://api.github.com/users/hrik2001/orgs",
      "repos_url": "https://api.github.com/users/hrik2001/repos",
      "events_url": "https://api.github.com/users/hrik2001/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hrik2001/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-08-23T20:43:59Z",
    "updated_at": "2022-08-23T20:43:59Z",
    "author_association": "CONTRIBUTOR",
    "body": "@nventuro, very interesting. I really liked the idea of minimum and maximum delay since oopsies can happen there. What I suggest is this. We can do an immutable min and max delay and maybe should remove the delay variable altogether and except go with providing timestamp (just how @Amxx had implemented it). We can check if timestamp lies in the bound or not.\r\n\r\nThe thing is this, no one is going to manually put timestamp in real life use case, it will be programmatically called, hence the frontend can plugin the desired timestamp accordingly. Having a default delay sounds good on paper, but I believe providing custom timestamp while checking if it lies in the bound would be best. This will sort out a lot of complexity.\r\n\r\nBut I could be wrong, there could be a case where providing timestamp won't be feasible at all. ",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1224861975/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1224897164",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3623#issuecomment-1224897164",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3623",
    "id": 1224897164,
    "node_id": "IC_kwDOA9tCBs5JAnKM",
    "user": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-08-23T21:18:09Z",
    "updated_at": "2022-08-23T21:18:09Z",
    "author_association": "MEMBER",
    "body": "The goal of the delay is to ensure there is time to cancel a malicious transfer. A malicious transfer would always use the minimum delay possible, and the option to transfer with a longer delay wouldn't make a difference there, so what would be the purpose?\r\n\r\nI'd say let's just do an immutable delay set in the constructor.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1224897164/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1224903469",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3623#issuecomment-1224903469",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3623",
    "id": 1224903469,
    "node_id": "IC_kwDOA9tCBs5JAost",
    "user": {
      "login": "hrik2001",
      "id": 11733600,
      "node_id": "MDQ6VXNlcjExNzMzNjAw",
      "avatar_url": "https://avatars.githubusercontent.com/u/11733600?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hrik2001",
      "html_url": "https://github.com/hrik2001",
      "followers_url": "https://api.github.com/users/hrik2001/followers",
      "following_url": "https://api.github.com/users/hrik2001/following{/other_user}",
      "gists_url": "https://api.github.com/users/hrik2001/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hrik2001/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hrik2001/subscriptions",
      "organizations_url": "https://api.github.com/users/hrik2001/orgs",
      "repos_url": "https://api.github.com/users/hrik2001/repos",
      "events_url": "https://api.github.com/users/hrik2001/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hrik2001/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-08-23T21:26:05Z",
    "updated_at": "2022-08-23T21:26:05Z",
    "author_association": "CONTRIBUTOR",
    "body": "Fair enough, btw should ownable be used or do you have from scratch\nimplementation in mind?\n\nOn Wed, 24 Aug, 2022, 2:48 am Francisco, ***@***.***> wrote:\n\n> The goal of the delay is to ensure there is time to cancel a malicious\n> transfer. A malicious transfer would always use the minimum delay possible,\n> and the option to transfer with a longer delay wouldn't make a difference\n> there, so what would be the purpose?\n>\n> I'd say let's just do an immutable delay set in the constructor.\n>\n> —\n> Reply to this email directly, view it on GitHub\n> <https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3623#issuecomment-1224897164>,\n> or unsubscribe\n> <https://github.com/notifications/unsubscribe-auth/ACZQUYB6ZNBQ5F3BSX6CHPTV2U5ZZANCNFSM56XGEOCQ>\n> .\n> You are receiving this because you commented.Message ID:\n> ***@***.***>\n>\n",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1224903469/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1224921407",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3623#issuecomment-1224921407",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3623",
    "id": 1224921407,
    "node_id": "IC_kwDOA9tCBs5JAtE_",
    "user": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-08-23T21:48:33Z",
    "updated_at": "2022-08-23T21:48:33Z",
    "author_association": "MEMBER",
    "body": "IMO it should not be Ownable.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1224921407/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 1,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1399076393",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3623#issuecomment-1399076393",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3623",
    "id": 1399076393,
    "node_id": "IC_kwDOA9tCBs5TZDYp",
    "user": {
      "login": "ernestognw",
      "id": 33379285,
      "node_id": "MDQ6VXNlcjMzMzc5Mjg1",
      "avatar_url": "https://avatars.githubusercontent.com/u/33379285?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ernestognw",
      "html_url": "https://github.com/ernestognw",
      "followers_url": "https://api.github.com/users/ernestognw/followers",
      "following_url": "https://api.github.com/users/ernestognw/following{/other_user}",
      "gists_url": "https://api.github.com/users/ernestognw/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ernestognw/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ernestognw/subscriptions",
      "organizations_url": "https://api.github.com/users/ernestognw/orgs",
      "repos_url": "https://api.github.com/users/ernestognw/repos",
      "events_url": "https://api.github.com/users/ernestognw/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ernestognw/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-01-20T23:36:22Z",
    "updated_at": "2023-01-21T16:46:21Z",
    "author_association": "MEMBER",
    "body": "I made a prototype without using the `Ownable` contract and this is the result:\r\n\r\n```solidity\r\n// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControlEnumerable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./AccessControl.sol\";\r\n\r\n/**\r\n * @dev Extension of {AccessControl} that allows to specify special rules to manage\r\n * the `DEFAULT_ADMIN_ROLE` owner, which is a sensitive role.\r\n *\r\n * If a specific role doesn't have an `adminRole` assigned, the holder of the\r\n * `DEFAULT_ADMIN_ROLE` will have the ability to manage it, as determined by the\r\n * function {getRoleAdmin}.\r\n *\r\n * This contract implements the following risk mitigations:\r\n *\r\n * - Only one account holds the `DEFAULT_ADMIN_ROLE`.\r\n * - Enforce a 2-step process to transfer the `DEFAULT_ADMIN_ROLE` to another account.\r\n * - Enforce a configurable delay between the two steps, with the ability to cancel in between.\r\n *\r\n * NOTE: `delay` is only configurable in the constructor\r\n */\r\nabstract contract AccessControlAdminRules is AccessControl {\r\n    uint32 private immutable _delay;\r\n\r\n    address public pendingAdminOwner;\r\n    uint64 public pendingAdminOwnerTimer;\r\n\r\n    address private _previousAdminOwner;\r\n\r\n    event AdminRoleChangeStarted(address indexed previousOwner, address indexed newOwner, uint64 timer);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting a delay.\r\n     *\r\n     * There should be always an initial admin, since {_transferAdmin} revokes the role\r\n     * and the zero address never emitted an {AccessControl-GrantRole} event.\r\n     */\r\n    constructor(uint32 initialDelay, address initialAdminOwner) {\r\n        super.grantRole(DEFAULT_ADMIN_ROLE, initialAdminOwner);\r\n        _previousAdminOwner = initialAdminOwner;\r\n\r\n        _delay = initialDelay;\r\n    }\r\n\r\n    /**\r\n     * @dev `DEFAULT_ADMIN_ROLE` can't be granted to ensure there's always 1 owner of it.\r\n     * Ownership updates of `DEFAULT_ADMIN_ROLE` should be done using {_transferAdmin} instead.\r\n     */\r\n    function _grantRole(bytes32 role, address account) internal override {\r\n        require(role != DEFAULT_ADMIN_ROLE, \"AccessControlAdminRules: Only one DEFAULT_ADMIN_ROLE is allowed\");\r\n        super._grantRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev `DEFAULT_ADMIN_ROLE` can't be revoked to ensure there's always 1 owner of it.\r\n     * Ownership updates of `DEFAULT_ADMIN_ROLE` should be done using {_transferAdmin} instead.\r\n     */\r\n    function _revokeRole(bytes32 role, address account) internal override {\r\n        require(role != DEFAULT_ADMIN_ROLE, \"AccessControlAdminRules: Only one DEFAULT_ADMIN_ROLE is allowed\");\r\n        super._revokeRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Start `DEFAULT_ADMIN_ROLE` transfership by setting new pending owner and a timer.\r\n     * Updates `_previousAdminOwner` specifically after `AdminRoleChangeStarted` is emitted.\r\n     *\r\n     * NOTE: Owner can call with address(0) during the delay to cancel\r\n     */\r\n    function transferAdmin(address newOwner) public virtual onlyRole(DEFAULT_ADMIN_ROLE) {\r\n        pendingAdminOwnerTimer = uint64(block.timestamp) + _delay;\r\n        pendingAdminOwner = newOwner;\r\n\r\n        emit AdminRoleChangeStarted(_previousAdminOwner, pendingAdminOwner, pendingAdminOwnerTimer);\r\n        _previousAdminOwner = newOwner;\r\n    }\r\n\r\n    /**\r\n     * @dev Completes the admin transfership after delay has passed\r\n     */\r\n    function acceptAdmin() public virtual {\r\n        require(pendingAdminOwner == _msgSender(), \"AccessControlAdminRules: Only pending owner can accept ownership\");\r\n        require(pendingAdminOwnerTimer < block.timestamp, \"AccessControlAdminRules: Pending ownership delay\");\r\n\r\n        _transferAdmin(_previousAdminOwner, pendingAdminOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers the `DEFAULT_ADMIN_ROLE`, effectively allowing only 1 owner of the role.\r\n     */\r\n    function _transferAdmin(address previousOwner, address newOwner) internal virtual {\r\n        super.revokeRole(DEFAULT_ADMIN_ROLE, previousOwner);\r\n        super.grantRole(DEFAULT_ADMIN_ROLE, newOwner);\r\n\r\n        // Cancels any other pending transfership process\r\n        delete pendingAdminOwnerTimer;\r\n        delete pendingAdminOwner;\r\n    }\r\n}\r\n```\r\n\r\nI'd say it is almost the same as the one @Amxx [shared](https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3623#issuecomment-1222074343), but I didn't include `function transferOwnership(address newOwner, uint32 timestamp)` since it seems frontrunable to me, am I missing something?\r\n\r\nbtw, I'm not sure if we should remove the `_setRoleAdmin` for the `DEFAULT_ADMIN_ROLE`, but is useless to be the admin of the `DEFAULT_ADMIN_OWNER` as far as I can tell",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1399076393/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1399160824",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3623#issuecomment-1399160824",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3623",
    "id": 1399160824,
    "node_id": "IC_kwDOA9tCBs5TZX_4",
    "user": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-01-21T03:01:53Z",
    "updated_at": "2023-01-21T03:07:17Z",
    "author_association": "MEMBER",
    "body": "The use of `super.revokeRole` and `super.grantRole` in `_transferAdmin` is a use of inheritance that makes me uneasy because it's potentially skipping overrides \"downstream\". Imagine someone overrides `revokeRole` and `grantRole` so that they can't be used on the weekends, now depending on the order in which you inherit things, `_transferAdmin` may or may not be usable on the weekends. (I should write this down as potential guidelines we might want to use regarding inheritance, I'm not sure we will all agree on them.)\r\n\r\nAn alternative proposal would be to keep the count of members of the role, and add `require(members <= 1)` in `grantRole` (only for the default admin role). This same approach doesn't work with revoke though, because `revokeRole` needs to follow the \"rules\" as well (delay and 2-step), so the alternative could be:\r\n\r\n```solidity\r\nfunction _revokeRole(bytes32 role, address account) internal override {\r\n    if (role == DEFAULT_ADMIN_ROLE) {\r\n        require(_pendingAdminTimer > 0 && _pendingAdminTimer < block.timestamp);\r\n        _pendingAdminTimer = 0;\r\n        super._revokeRole(role, account);\r\n        if (_pendingAdmin != address(0)) {\r\n            _grantRole(role, _pendingAdmin);\r\n        }\r\n    } else {\r\n        super._revokeRole(role, account);\r\n    }\r\n}\r\n```\r\n\r\nWhat do people think of this?\r\n\r\n---\r\n\r\n`transferOwnership(address newOwner, uint32 timestamp)` isn't frontrunnable as far as I can tell but see https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3623#issuecomment-1224897164.\r\n\r\n---\r\n\r\nNote that the prototypes above are also missing a way to cancel a pending admin transfer, which I think had been suggested needs to be a part of this.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1399160824/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1399312081",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3623#issuecomment-1399312081",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3623",
    "id": 1399312081,
    "node_id": "IC_kwDOA9tCBs5TZ87R",
    "user": {
      "login": "ernestognw",
      "id": 33379285,
      "node_id": "MDQ6VXNlcjMzMzc5Mjg1",
      "avatar_url": "https://avatars.githubusercontent.com/u/33379285?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ernestognw",
      "html_url": "https://github.com/ernestognw",
      "followers_url": "https://api.github.com/users/ernestognw/followers",
      "following_url": "https://api.github.com/users/ernestognw/following{/other_user}",
      "gists_url": "https://api.github.com/users/ernestognw/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ernestognw/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ernestognw/subscriptions",
      "organizations_url": "https://api.github.com/users/ernestognw/orgs",
      "repos_url": "https://api.github.com/users/ernestognw/repos",
      "events_url": "https://api.github.com/users/ernestognw/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ernestognw/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-01-21T18:59:42Z",
    "updated_at": "2023-01-23T18:28:51Z",
    "author_association": "MEMBER",
    "body": "I like the idea of removing `_transferAdmin` and keeping the `super.` in `_revoke`, however, `members` is not available in this context unless we save a boolean to represent that there's an owner.\r\n\r\n> transferOwnership(address newOwner, uint32 timestamp) isn't frontrunnable as far as I can tell but see https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3623#issuecomment-1224897164.\r\n\r\nWe can also avoid to start a transfer admin if a timer has been set.\r\n\r\nIt can be something like these: \r\n\r\n```solidity\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./AccessControl.sol\";\r\n\r\n/**\r\n * @dev Extension of {AccessControl} that allows to specify special rules to manage\r\n * the `DEFAULT_ADMIN_ROLE` owner, which is a sensitive role.\r\n *\r\n * If a specific role doesn't have an `adminRole` assigned, the holder of the\r\n * `DEFAULT_ADMIN_ROLE` will have the ability to manage it, as determined by the\r\n * function {getRoleAdmin}.\r\n *\r\n * This contract implements the following risk mitigations:\r\n *\r\n * - Only one account holds the `DEFAULT_ADMIN_ROLE`.\r\n * - Enforce a 2-step process to transfer the `DEFAULT_ADMIN_ROLE` to another account.\r\n * - Enforce a configurable delay between the two steps, with the ability to cancel in between.\r\n *\r\n * NOTE: `delay` is only configurable in the constructor\r\n */\r\nabstract contract AccessControlAdminRules is AccessControl {\r\n    uint32 private immutable _delay;\r\n    bool private _adminOwned;\r\n\r\n    address public pendingAdmin;\r\n    uint64 public pendingAdminTimer;\r\n\r\n    event AdminRoleChangeStarted(address indexed previousOwner, address indexed newOwner, uint64 timer);\r\n\r\n    /**\r\n     * @dev Initializes the contract with an admin transfer delay\r\n     */\r\n    constructor(uint32 initialDelay) {\r\n        _delay = initialDelay;\r\n    }\r\n\r\n    /**\r\n     * @dev See {AccessControl-_grantRole}.\r\n     *\r\n     * If the role is `DEFAULT_ADMIN_ROLE`, it can only be granted to a different account\r\n     * if it's not already owned. Calling `grantRole` for an already admin owner is allowed.\r\n     */\r\n    function _grantRole(bytes32 role, address account) internal override {\r\n        if (role == DEFAULT_ADMIN_ROLE) {\r\n            if (_adminOwned) {\r\n                require(\r\n                    hasRole(role, account), // NOOP allowed\r\n                    \"AccessControlAdminRoles: Only current owner can be granted the role again.\"\r\n                );\r\n            } else {\r\n                require(!_adminOwned, \"AccessControlAdminRules: Admin role is already owned\");\r\n                _adminOwned = true;\r\n            }\r\n        }\r\n\r\n        super._grantRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev See {AccessControl-_revokeRole}.\r\n     *\r\n     * If the role is `DEFAULT_ADMIN_ROLE`, it can only be revoked after a timer has been set and met, and\r\n     * it also grants the role to a previously set `pendingOwner`.\r\n     *\r\n     * See {transferAdmin}.\r\n     */\r\n    function _revokeRole(bytes32 role, address account) internal override {\r\n        if (role == DEFAULT_ADMIN_ROLE) {\r\n            require(pendingAdminTimer > 0, \"AccessControlAdminRules: Timer for admin transfer not set\");\r\n            require(pendingAdminTimer < block.timestamp, \"AccessControlAdminRules: Timer for admin transfer not met\");\r\n            delete pendingAdminTimer;\r\n\r\n            if (_adminOwned) _adminOwned = false;\r\n            // If it wasn't owned before, `_revokeRole` doesn't revoke it.\r\n            super._revokeRole(role, account);\r\n\r\n            address _newOwner = pendingAdmin;\r\n            delete pendingAdmin;\r\n            _grantRole(role, _newOwner); // Address 0 is not a NOO for `renounceRole`\r\n        } else {\r\n            super._revokeRole(role, account);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Start `DEFAULT_ADMIN_ROLE` transfership by setting new pending owner and a timer.\r\n     */\r\n    function transferAdmin(address previousOwner, address newOwner) external virtual onlyRole(DEFAULT_ADMIN_ROLE) {\r\n        require(pendingAdminTimer == 0, \"AccessControlAdminRules: Timer for admin transfer already set\");\r\n        pendingAdminTimer = uint64(block.timestamp) + _delay;\r\n        pendingAdmin = newOwner;\r\n\r\n        if (!_adminOwned) {\r\n            require(\r\n                previousOwner == address(0),\r\n                \"AccessControlAdminRules: Previous owner can only be address 0 if owner hasn't been owned\"\r\n            );\r\n        } else {\r\n            _checkRole(DEFAULT_ADMIN_ROLE, previousOwner);\r\n        }\r\n\r\n        emit AdminRoleChangeStarted(previousOwner, pendingAdmin, pendingAdminTimer);\r\n    }\r\n\r\n    /**\r\n     * @dev Cancels {transferAdmin}.\r\n     */\r\n    function cancelTransferAdmin() external virtual onlyRole(DEFAULT_ADMIN_ROLE) {\r\n        require(\r\n            pendingAdminTimer > block.timestamp,\r\n            \"AccessControlAdminRules: Can't cancel admin transfer if timer is already met\"\r\n        );\r\n        delete pendingAdmin;\r\n        delete pendingAdminTimer;\r\n        // Emit event?\r\n    }\r\n}\r\n```\r\n\r\nHowever, I don't like the `transferAdmin` and `cancelTransferAdmin` functions.\r\nMaybe those can be also handled in `_revokeRole`.\r\n\r\n1. Use the `_revokeRole` to start the transfer process.\r\n2. Cancel by calling `_revokeRole` if the transfer has started but hasn't passed.\r\n3. Use the `_grantRole` instead to accept the transfer.\r\n\r\nStill, I don't like number 2 and the fact that there would be an intermediate time with no DEFAULT_ADMIN_ROLE if we decide to keep the `super.` calls.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1399312081/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1400086087",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3623#issuecomment-1400086087",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3623",
    "id": 1400086087,
    "node_id": "IC_kwDOA9tCBs5Tc55H",
    "user": {
      "login": "Amxx",
      "id": 2432299,
      "node_id": "MDQ6VXNlcjI0MzIyOTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2432299?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Amxx",
      "html_url": "https://github.com/Amxx",
      "followers_url": "https://api.github.com/users/Amxx/followers",
      "following_url": "https://api.github.com/users/Amxx/following{/other_user}",
      "gists_url": "https://api.github.com/users/Amxx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Amxx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Amxx/subscriptions",
      "organizations_url": "https://api.github.com/users/Amxx/orgs",
      "repos_url": "https://api.github.com/users/Amxx/repos",
      "events_url": "https://api.github.com/users/Amxx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Amxx/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-01-23T10:03:55Z",
    "updated_at": "2023-01-23T10:03:55Z",
    "author_association": "COLLABORATOR",
    "body": "I'm showked by how complexe `_revokeRole` and `_grantRole` are. IMO, these function should remain simple. \r\n\r\nAlso, why do we introduce a new function `transferAdmin` ?\r\nEither want the transfer to be based on the existing `AccessControl` interface (grantRole), or we want a separate interfaces, and then that should be Ownable2Step `transferOwnership`/`acceptOwnership`. This will make it easier for everyone to display what is going on (including Defender).\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1400086087/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1400094665",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3623#issuecomment-1400094665",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3623",
    "id": 1400094665,
    "node_id": "IC_kwDOA9tCBs5Tc7_J",
    "user": {
      "login": "Amxx",
      "id": 2432299,
      "node_id": "MDQ6VXNlcjI0MzIyOTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2432299?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Amxx",
      "html_url": "https://github.com/Amxx",
      "followers_url": "https://api.github.com/users/Amxx/followers",
      "following_url": "https://api.github.com/users/Amxx/following{/other_user}",
      "gists_url": "https://api.github.com/users/Amxx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Amxx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Amxx/subscriptions",
      "organizations_url": "https://api.github.com/users/Amxx/orgs",
      "repos_url": "https://api.github.com/users/Amxx/repos",
      "events_url": "https://api.github.com/users/Amxx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Amxx/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-01-23T10:10:05Z",
    "updated_at": "2023-01-23T11:00:19Z",
    "author_association": "COLLABORATOR",
    "body": "IMO, the same features can be achieved with a significantly better readability (which I believe is one of our guidelines)\r\n\r\n<details><summary>Code example</summary>\r\n\r\n```solidity\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable2Steps.sol\";\r\n\r\ncontract AccessControlAdmin is AccessControl, Ownable2Steps\r\n{\r\n    uint256 private immutable _delay;\r\n    uint256 private _deadline;\r\n\r\n    constructor(uint256 delay) {\r\n        _delay = delay;\r\n    }\r\n\r\n    // enforce a delay on admin transfers\r\n    function transferOwnership(address newOwner) public virtual override {\r\n        super.transferOwnership(newOwner); // this is onlyOwner\r\n        deadline = block.timestamp + delay;\r\n    }\r\n\r\n    function acceptOwnership() public virtual override {\r\n        require(deadline <= block.timestamp, \"too early to access ownership\");\r\n        delete deadline;\r\n        super.acceptOwnership();\r\n    }\r\n\r\n    // Owner is the admin\r\n    function hasRole(bytes32 role, address account)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (bool)\r\n    {\r\n        return role == DEFAULT_ADMIN_ROLE \r\n            ? account == owner() \r\n            : super.hasRole(role, account);\r\n    }\r\n\r\n    function _grantRole(bytes32 role, address account) internal virtual override {\r\n        require(role != DEFAULT_ADMIN_ROLE, \"Admin role is managed by owner\");\r\n        super._grantRole(role, account);\r\n    }\r\n\r\n    function _revokeRole(bytes32 role, address account) internal virtual override {\r\n        require(role != DEFAULT_ADMIN_ROLE, \"Admin role is managed by owner\");\r\n        super._revokeRole(role, account);\r\n    }\r\n}\r\n```\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1400094665/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1400103177",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3623#issuecomment-1400103177",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3623",
    "id": 1400103177,
    "node_id": "IC_kwDOA9tCBs5Tc-EJ",
    "user": {
      "login": "Amxx",
      "id": 2432299,
      "node_id": "MDQ6VXNlcjI0MzIyOTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2432299?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Amxx",
      "html_url": "https://github.com/Amxx",
      "followers_url": "https://api.github.com/users/Amxx/followers",
      "following_url": "https://api.github.com/users/Amxx/following{/other_user}",
      "gists_url": "https://api.github.com/users/Amxx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Amxx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Amxx/subscriptions",
      "organizations_url": "https://api.github.com/users/Amxx/orgs",
      "repos_url": "https://api.github.com/users/Amxx/repos",
      "events_url": "https://api.github.com/users/Amxx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Amxx/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-01-23T10:16:05Z",
    "updated_at": "2023-01-23T10:16:05Z",
    "author_association": "COLLABORATOR",
    "body": "> ```solidity\r\n>     function transferAdmin(address previousOwner, address newOwner) external virtual onlyRole(DEFAULT_ADMIN_ROLE) {\r\n> ```\r\n\r\nAre there cases where `previousOwner` is not _msgSender() ?",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1400103177/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1400106129",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3623#issuecomment-1400106129",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3623",
    "id": 1400106129,
    "node_id": "IC_kwDOA9tCBs5Tc-yR",
    "user": {
      "login": "Amxx",
      "id": 2432299,
      "node_id": "MDQ6VXNlcjI0MzIyOTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2432299?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Amxx",
      "html_url": "https://github.com/Amxx",
      "followers_url": "https://api.github.com/users/Amxx/followers",
      "following_url": "https://api.github.com/users/Amxx/following{/other_user}",
      "gists_url": "https://api.github.com/users/Amxx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Amxx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Amxx/subscriptions",
      "organizations_url": "https://api.github.com/users/Amxx/orgs",
      "repos_url": "https://api.github.com/users/Amxx/repos",
      "events_url": "https://api.github.com/users/Amxx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Amxx/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-01-23T10:18:18Z",
    "updated_at": "2023-01-23T10:23:53Z",
    "author_association": "COLLABORATOR",
    "body": "> ```solidity\r\n>                 require(!_adminOwned, \"AccessControlAdminRules: Admin role is already owned\");\r\n> ```\r\n\r\nif is in the else part of an `if (_adminOwned)` ... so the check is not necessary, is it ?\r\n\r\n\r\nAFAIK, this would be sufficient\r\n```solidity\r\n        if (role == DEFAULT_ADMIN_ROLE) {\r\n            require(\r\n                !_adminOwned || hasRole(role, account), // NOOP allowed\r\n                \"AccessControlAdminRoles: Only current owner can be granted the role again.\"\r\n            );\r\n            _adminOwned = true;\r\n        }\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1400106129/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1400154769",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3623#issuecomment-1400154769",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3623",
    "id": 1400154769,
    "node_id": "IC_kwDOA9tCBs5TdKqR",
    "user": {
      "login": "Amxx",
      "id": 2432299,
      "node_id": "MDQ6VXNlcjI0MzIyOTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2432299?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Amxx",
      "html_url": "https://github.com/Amxx",
      "followers_url": "https://api.github.com/users/Amxx/followers",
      "following_url": "https://api.github.com/users/Amxx/following{/other_user}",
      "gists_url": "https://api.github.com/users/Amxx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Amxx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Amxx/subscriptions",
      "organizations_url": "https://api.github.com/users/Amxx/orgs",
      "repos_url": "https://api.github.com/users/Amxx/repos",
      "events_url": "https://api.github.com/users/Amxx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Amxx/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-01-23T10:57:49Z",
    "updated_at": "2023-01-23T10:57:49Z",
    "author_association": "COLLABORATOR",
    "body": "Also one thing, to finalize the transfer you must call `_revokeRole`, which is publicly accessible only to accounts that have the (admin) role. This means that the pending owner cannot accept ownership. The current owner needs to \"come back\" and finish the transfer by revoking its own admin role.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1400154769/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1400169144",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3623#issuecomment-1400169144",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3623",
    "id": 1400169144,
    "node_id": "IC_kwDOA9tCBs5TdOK4",
    "user": {
      "login": "Amxx",
      "id": 2432299,
      "node_id": "MDQ6VXNlcjI0MzIyOTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2432299?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Amxx",
      "html_url": "https://github.com/Amxx",
      "followers_url": "https://api.github.com/users/Amxx/followers",
      "following_url": "https://api.github.com/users/Amxx/following{/other_user}",
      "gists_url": "https://api.github.com/users/Amxx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Amxx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Amxx/subscriptions",
      "organizations_url": "https://api.github.com/users/Amxx/orgs",
      "repos_url": "https://api.github.com/users/Amxx/repos",
      "events_url": "https://api.github.com/users/Amxx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Amxx/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-01-23T11:09:02Z",
    "updated_at": "2023-01-23T11:09:02Z",
    "author_association": "COLLABORATOR",
    "body": "Also (sorry for the many message), I think we should have internal functions to initiate the transfer ... so that devs can trigger that internally based on custom logic (signature ?)",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1400169144/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1400265180",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3623#issuecomment-1400265180",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3623",
    "id": 1400265180,
    "node_id": "IC_kwDOA9tCBs5Tdlnc",
    "user": {
      "login": "Amxx",
      "id": 2432299,
      "node_id": "MDQ6VXNlcjI0MzIyOTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2432299?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Amxx",
      "html_url": "https://github.com/Amxx",
      "followers_url": "https://api.github.com/users/Amxx/followers",
      "following_url": "https://api.github.com/users/Amxx/following{/other_user}",
      "gists_url": "https://api.github.com/users/Amxx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Amxx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Amxx/subscriptions",
      "organizations_url": "https://api.github.com/users/Amxx/orgs",
      "repos_url": "https://api.github.com/users/Amxx/repos",
      "events_url": "https://api.github.com/users/Amxx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Amxx/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-01-23T12:28:56Z",
    "updated_at": "2023-01-23T12:28:56Z",
    "author_association": "COLLABORATOR",
    "body": "Also, not being able to transferAdmin it its already initiated + disable cancel when the timer is done means that if you set transferAdmin to an invalid address, and realize when its to late, you've \"bricked\" your contract.\r\n\r\nIMO we should:\r\n- allow the current owner to reinitialize the transfer at any point (without having to call cancel)\r\n- remove the cancel function. In order to cancel you just restart a transfer by setting address(0) as the receiver",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1400265180/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1401034040",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3623#issuecomment-1401034040",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3623",
    "id": 1401034040,
    "node_id": "IC_kwDOA9tCBs5TghU4",
    "user": {
      "login": "ernestognw",
      "id": 33379285,
      "node_id": "MDQ6VXNlcjMzMzc5Mjg1",
      "avatar_url": "https://avatars.githubusercontent.com/u/33379285?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ernestognw",
      "html_url": "https://github.com/ernestognw",
      "followers_url": "https://api.github.com/users/ernestognw/followers",
      "following_url": "https://api.github.com/users/ernestognw/following{/other_user}",
      "gists_url": "https://api.github.com/users/ernestognw/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ernestognw/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ernestognw/subscriptions",
      "organizations_url": "https://api.github.com/users/ernestognw/orgs",
      "repos_url": "https://api.github.com/users/ernestognw/repos",
      "events_url": "https://api.github.com/users/ernestognw/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ernestognw/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-01-23T21:45:22Z",
    "updated_at": "2023-01-23T23:17:44Z",
    "author_association": "MEMBER",
    "body": "> I'm showked by how complexe _revokeRole and _grantRole are. IMO, these function should remain simple.\r\n> \r\n> Also, why do we introduce a new function transferAdmin ?\r\n> Either want the transfer to be based on the existing AccessControl interface (grantRole), or we want a separate interfaces, and then that should be Ownable2Step transferOwnership/acceptOwnership.\r\n\r\nI agree. Actually, that implementation with `Ownable2Step` you just shared looks nice to me and simple enough.\r\n\r\n> This will make it easier for everyone to display what is going on (including Defender).\r\n\r\nThis is not completely true, Defender will know that the address is the owner, but that that it has the corresponding rights.\r\nI think we'd have to add a grant/revoke event to correctly signal to the `AccessControl` tooling out there.\r\n\r\n```solidity\r\n    function acceptOwnership(address previousOwner) public virtual override {\r\n        require(deadline <= block.timestamp, \"too early to access ownership\");\r\n        delete deadline;\r\n        super.acceptOwnership(); // `pendingOwner == _msgSender()` checked here\r\n        _checkRole(previousOwner, DEFAULT_ADMIN_ROLE); // To check previousOwner is actually previousOwner\r\n        emit RoleGranted(DEFAULT_ADMIN_ROLE, previousOwner, _msgSender());\r\n        emit RoleGranted(DEFAULT_ADMIN_ROLE, _msgSender(), _msgSender());\r\n    }\r\n```\r\n\r\nThe same applies for `renounceOwnership`. I think it'll have to correctly signal the removal of the admin role.\r\n\r\nStill, looks more readable to me but it adds extra logic just to comply with the `AccessControl` \"rules\", and feels off to me.\r\n\r\n> > ```solidity\r\n> >     function transferAdmin(address previousOwner, address newOwner) external virtual onlyRole(DEFAULT_ADMIN_ROLE) {\r\n> > ```\r\n> \r\n> Are there cases where `previousOwner` is not _msgSender() ?\r\n\r\nGlad you catch this! With the code as it is right now, no, there's no way. This is related to the `AdminRoleChangeStarted ` event I'm proposing so we'd need an `onlyRoleOrNotAdminOwned` modifier. I don't like that.\r\n\r\n> if is in the else part of an if (_adminOwned) ... so the check is not necessary, is it ?\r\n\r\nThat's correct\r\n\r\n> Also one thing, to finalize the transfer you must call _revokeRole, which is publicly accessible only to accounts that have the (admin) role. This means that the pending owner cannot accept ownership. The current owner needs to \"come back\" and finish the transfer by revoking its own admin role.\r\n\r\nThat's also correct\r\n\r\n> I think we should have internal functions to initiate the transfer ... so that devs can trigger that internally based on custom logic (signature ?)\r\n\r\nMake sense to me, but I'd focus on reaching a agreement over the implementation first. I'll consider it for the next iteration.\r\n\r\n> Also, not being able to transferAdmin it its already initiated + disable cancel when the timer is done means that if you set transferAdmin to an invalid address, and realize when its to late, you've \"bricked\" your contract.\r\n\r\nI also dislike the `cancelTransferAdmin`, but I'd like to hear thoughts from @frangio because of this\r\n\r\n> Note that the prototypes above are also missing a way to cancel a pending admin transfer, which I think had been suggested needs to be a part of this.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1401034040/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1401164547",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3623#issuecomment-1401164547",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3623",
    "id": 1401164547,
    "node_id": "IC_kwDOA9tCBs5ThBMD",
    "user": {
      "login": "ernestognw",
      "id": 33379285,
      "node_id": "MDQ6VXNlcjMzMzc5Mjg1",
      "avatar_url": "https://avatars.githubusercontent.com/u/33379285?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ernestognw",
      "html_url": "https://github.com/ernestognw",
      "followers_url": "https://api.github.com/users/ernestognw/followers",
      "following_url": "https://api.github.com/users/ernestognw/following{/other_user}",
      "gists_url": "https://api.github.com/users/ernestognw/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ernestognw/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ernestognw/subscriptions",
      "organizations_url": "https://api.github.com/users/ernestognw/orgs",
      "repos_url": "https://api.github.com/users/ernestognw/repos",
      "events_url": "https://api.github.com/users/ernestognw/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ernestognw/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-01-23T23:54:52Z",
    "updated_at": "2023-01-24T00:00:47Z",
    "author_association": "MEMBER",
    "body": "After a few attempts, this is the best I could come up with following overall comments:\r\n\r\n<details><summary>Code:</summary>\r\n\r\n```solidity\r\nabstract contract AccessControlAdminRules is AccessControl {\r\n    uint32 private immutable _delay;\r\n\r\n    address public pendingAdmin;\r\n    uint64 public pendingAdminTimer;\r\n\r\n    event AdminRoleChangeStarted(address indexed newOwner, uint64 timer);\r\n\r\n    constructor(uint32 initialDelay, address initialAdmin) {\r\n        _delay = initialDelay;\r\n        super.grantRole(DEFAULT_ADMIN_ROLE, initialAdmin);\r\n    }\r\n\r\n    // Owner can call with address(0) during the delay to cancel\r\n    function transferAdmin(address newAdmin) public virtual {\r\n        pendingAdminTimer = uint64(block.timestamp) + _delay;\r\n        pendingAdmin = newAdmin;\r\n        emit AdminRoleChangeStarted(pendingAdmin, pendingAdminTimer);\r\n    }\r\n\r\n    function acceptAdmin(address previousAdmin) public virtual {\r\n        require(\r\n            pendingAdmin == address(0) || _msgSender() == pendingAdmin,\r\n            \"AccessControlAdminRules: caller is not the new owner\"\r\n        );\r\n        _transferAdmin(previousAdmin);\r\n    }\r\n\r\n    function _grantRole(bytes32 role, address account) internal override {\r\n        if (role != DEFAULT_ADMIN_ROLE) super._grantRole(role, account);\r\n    }\r\n\r\n    function _revokeRole(bytes32 role, address account) internal override {\r\n        if (role != DEFAULT_ADMIN_ROLE) super._revokeRole(role, account);\r\n    }\r\n\r\n    function _transferAdmin(address previousAdmin) internal virtual {\r\n        require(\r\n            pendingAdminTimer > 0 && pendingAdminTimer < block.timestamp,\r\n            \"AccessControlAdminRules: timer for admin transfer not set nor met\"\r\n        );\r\n        _checkRole(DEFAULT_ADMIN_ROLE, previousAdmin);\r\n        delete pendingAdminTimer;\r\n        super._revokeRole(DEFAULT_ADMIN_ROLE, previousAdmin);\r\n        super._grantRole(DEFAULT_ADMIN_ROLE, pendingAdmin);\r\n        delete pendingAdmin;\r\n    }\r\n}\r\n```\r\n</details>\r\n\r\nThe proposed contract acts the same as an `Ownable2Step` and only adds around 10 LOC (not including the `renounceOwnership` override required).\r\n\r\nAlthough I like the simplicity of the `Ownable2Step`, I still think we:\r\n\r\n1. Should not mess with emitting events such as `OwnershipTransferStarted` and `RoleGranted`. I think they belong to their own category and shouldn't be mixed if the purpose is to make it compatible with current tooling (this will make it confusing for users overriding)\r\n2. Avoid requires in `grantRole` and `revokeRole`, I assume there's a reason behind the `if (hasRole(..., ...))` in `AccessControl`, so my feeling is that we have to respect that NOOP\r\n3. `Ownable2Step` grants the `owner` role to the sender by default, and we've heard people from the community requesting to explicitly [state who holds the `admin` role](https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3720) (and we have [this](https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2639))\r\n\r\nAside from that opinion, I'd have to research these open questions:\r\n\r\n1. Do we want the DEFAULT_ADMIN_ROLE to be renounceable? (I added that functionality in my PoC)\r\n2. Should we add a minimum `delay`? Currently the `pendingAdminTimer < block.timestamp` check doesn't allow for the same block, but if same-block role transfers are valuable, we can do a `pendingAdminTimer <= block.timestamp` with a `require(delay != 0)` at the end.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1401164547/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1401689684",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3623#issuecomment-1401689684",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3623",
    "id": 1401689684,
    "node_id": "IC_kwDOA9tCBs5TjBZU",
    "user": {
      "login": "Amxx",
      "id": 2432299,
      "node_id": "MDQ6VXNlcjI0MzIyOTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2432299?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Amxx",
      "html_url": "https://github.com/Amxx",
      "followers_url": "https://api.github.com/users/Amxx/followers",
      "following_url": "https://api.github.com/users/Amxx/following{/other_user}",
      "gists_url": "https://api.github.com/users/Amxx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Amxx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Amxx/subscriptions",
      "organizations_url": "https://api.github.com/users/Amxx/orgs",
      "repos_url": "https://api.github.com/users/Amxx/repos",
      "events_url": "https://api.github.com/users/Amxx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Amxx/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-01-24T10:21:53Z",
    "updated_at": "2023-01-24T10:21:53Z",
    "author_association": "COLLABORATOR",
    "body": "> ``` solidity\r\n>    function transferAdmin(address newAdmin) public virtual {\r\n> ```\r\nthis needs some protection so not everyone can call it!\r\n\r\n---\r\n\r\n`_transferAdmin` being the internal variant of `acceptAdmin` is confusing. It should probably be named `_acceptAdmin`\r\n\r\n---\r\n\r\n> ```solidity\r\n>         require(\r\n>             pendingAdminTimer > 0 && pendingAdminTimer < block.timestamp,\r\n>             \"AccessControlAdminRules: timer for admin transfer not set nor met\"\r\n>         );\r\n> ```\r\nThis is not correct\r\n\r\n---\r\n\r\nI'm not a big fan of having to provide `previousAdmin`. We are building an invariant that make sure there is only one address that is admin, but we are expecting an external caller to give us clues about this invariant ? That means the caller must figure that out first. If the caller is an EOA that might be ok, but if the caller is a contract that will make everything difficult. I think we need to have this value stored and easily accessible.\r\n\r\n---\r\n\r\n> ```solidity\r\n>     function _grantRole(bytes32 role, address account) internal override {\r\n>         if (role != DEFAULT_ADMIN_ROLE) super._grantRole(role, account);\r\n>     }\r\n> \r\n>     function _revokeRole(bytes32 role, address account) internal override {\r\n>         if (role != DEFAULT_ADMIN_ROLE) super._revokeRole(role, account);\r\n>     }\r\n> ``` \r\n\r\nIMO we should revert of the role is `DEFAULT_ADMIN_ROLE`. Doing nothing and not reverting could cause confusion.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1401689684/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1401693368",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3623#issuecomment-1401693368",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3623",
    "id": 1401693368,
    "node_id": "IC_kwDOA9tCBs5TjCS4",
    "user": {
      "login": "Amxx",
      "id": 2432299,
      "node_id": "MDQ6VXNlcjI0MzIyOTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2432299?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Amxx",
      "html_url": "https://github.com/Amxx",
      "followers_url": "https://api.github.com/users/Amxx/followers",
      "following_url": "https://api.github.com/users/Amxx/following{/other_user}",
      "gists_url": "https://api.github.com/users/Amxx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Amxx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Amxx/subscriptions",
      "organizations_url": "https://api.github.com/users/Amxx/orgs",
      "repos_url": "https://api.github.com/users/Amxx/repos",
      "events_url": "https://api.github.com/users/Amxx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Amxx/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-01-24T10:24:48Z",
    "updated_at": "2023-01-24T10:24:48Z",
    "author_association": "COLLABORATOR",
    "body": "> ```\r\n>     // Owner can call with address(0) during the delay to cancel\r\n> ```\r\n\r\nIf you do that and let the delay expire, then anyone can call `acceptAdmin` to validate you renouncing the admin role.\r\nTo cancel you should use something like `address(1)` or `address(0xdead)`",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1401693368/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
