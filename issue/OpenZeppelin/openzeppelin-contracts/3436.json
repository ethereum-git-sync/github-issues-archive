{
  "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3436",
  "repository_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts",
  "labels_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3436/labels{/name}",
  "comments_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3436/comments",
  "events_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3436/events",
  "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3436",
  "id": 1248098365,
  "node_id": "I_kwDOA9tCBs5KZHg9",
  "number": 3436,
  "title": "Add external `cancel` to OZ Governor by default",
  "user": {
    "login": "julianmrodri",
    "id": 56316686,
    "node_id": "MDQ6VXNlcjU2MzE2Njg2",
    "avatar_url": "https://avatars.githubusercontent.com/u/56316686?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/julianmrodri",
    "html_url": "https://github.com/julianmrodri",
    "followers_url": "https://api.github.com/users/julianmrodri/followers",
    "following_url": "https://api.github.com/users/julianmrodri/following{/other_user}",
    "gists_url": "https://api.github.com/users/julianmrodri/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/julianmrodri/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/julianmrodri/subscriptions",
    "organizations_url": "https://api.github.com/users/julianmrodri/orgs",
    "repos_url": "https://api.github.com/users/julianmrodri/repos",
    "events_url": "https://api.github.com/users/julianmrodri/events{/privacy}",
    "received_events_url": "https://api.github.com/users/julianmrodri/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 4953777396,
      "node_id": "LA_kwDOA9tCBs8AAAABJ0Sk9A",
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/labels/area:%20governance",
      "name": "area: governance",
      "color": "E7DA84",
      "default": false,
      "description": ""
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/milestones/14",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/milestone/14",
    "labels_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/milestones/14/labels",
    "id": 8383880,
    "node_id": "MI_kwDOA9tCBs4Af-2I",
    "number": 14,
    "title": "4.9",
    "description": "",
    "creator": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "open_issues": 0,
    "closed_issues": 24,
    "state": "closed",
    "created_at": "2022-09-05T16:36:05Z",
    "updated_at": "2023-05-16T01:45:32Z",
    "due_on": null,
    "closed_at": "2023-05-16T01:45:32Z"
  },
  "comments": 9,
  "created_at": "2022-05-25T13:27:55Z",
  "updated_at": "2023-01-26T19:46:14Z",
  "closed_at": "2023-01-26T19:46:14Z",
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "**üßê Motivation**\r\nIt would be great to allow the OZ Governor to have the `cancel` proposal functionality offered by default. It should be something similar like the `cancel` offered in Governor Bravo.\r\n\r\n**üìù Details**\r\nEven though currently an internal `_cancel` is offered in the OZ Governor, this cannot be used as one would probably need to store the `proposer` on chain, which is not part of the Governor implementation.\r\n```\r\n  function _cancel(\r\n        address[] memory targets,\r\n        uint256[] memory values,\r\n        bytes[] memory calldatas,\r\n        bytes32 descriptionHash\r\n    ) internal override(Governor, GovernorTimelockControl) returns (uint256) {\r\n        return super._cancel(targets, values, calldatas, descriptionHash);\r\n    }\r\n```\r\nIt would be great if the OZ governor provided already with the `proposer` on-chain and the ability to have an external `cancel()` that we can call:\r\n\r\n```\r\n  function cancel(\r\n        address[] memory targets,\r\n        uint256[] memory values,\r\n        bytes[] memory calldatas,\r\n        bytes32 descriptionHash\r\n    ) external;\r\n   \r\n```\r\n\r\nDefault implementation could be based on the Governor Bravo cancel, by default could be something on these lines:\r\n\r\n```\r\n   function cancel( address[] memory targets,\r\n        uint256[] memory values,\r\n        bytes[] memory calldatas,\r\n        bytes32 descriptionHash) public virtual {\r\n        \r\n        // 1. - Get proposalID\r\n        // 2. - Get proposer based on proposalID \r\n       \r\n        // 3 - add checks for proposer\r\n        require(\r\n            _msgSender() == proposer || getVotes(proposer, block.number - 1) < proposalThreshold(),\r\n            \"Governor: proposer above threshold\"\r\n        );\r\n       // 4 -  Cancel\r\n        _cancel(\r\n            targets,\r\n            values,\r\n            calldatas,\r\n            descriptionHash\r\n        );\r\n    }\r\n```\r\nAlso this function signature would have to be added to `Tally` for compatibility. Currently Tally does not allow to add external `cancel` to the OZ Governor as this is not part of the common interface. (As shown here: https://docs.tally.xyz/user-guides-1/supported-dao-frameworks/openzeppelin-style)\r\n\r\n\r\n",
  "closed_by": {
    "login": "Amxx",
    "id": 2432299,
    "node_id": "MDQ6VXNlcjI0MzIyOTk=",
    "avatar_url": "https://avatars.githubusercontent.com/u/2432299?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/Amxx",
    "html_url": "https://github.com/Amxx",
    "followers_url": "https://api.github.com/users/Amxx/followers",
    "following_url": "https://api.github.com/users/Amxx/following{/other_user}",
    "gists_url": "https://api.github.com/users/Amxx/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/Amxx/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/Amxx/subscriptions",
    "organizations_url": "https://api.github.com/users/Amxx/orgs",
    "repos_url": "https://api.github.com/users/Amxx/repos",
    "events_url": "https://api.github.com/users/Amxx/events{/privacy}",
    "received_events_url": "https://api.github.com/users/Amxx/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3436/reactions",
    "total_count": 1,
    "+1": 1,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3436/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1139182430",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3436#issuecomment-1139182430",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3436",
    "id": 1139182430,
    "node_id": "IC_kwDOA9tCBs5D5ote",
    "user": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-05-27T00:54:16Z",
    "updated_at": "2022-05-27T00:54:16Z",
    "author_association": "MEMBER",
    "body": "Thanks @julianmrodri.\r\n\r\nI'm not sure if we want to add this by default or in an opt-in module. Any thoughts?",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1139182430/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1310542592",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3436#issuecomment-1310542592",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3436",
    "id": 1310542592,
    "node_id": "IC_kwDOA9tCBs5OHUsA",
    "user": {
      "login": "jgeary",
      "id": 36774175,
      "node_id": "MDQ6VXNlcjM2Nzc0MTc1",
      "avatar_url": "https://avatars.githubusercontent.com/u/36774175?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jgeary",
      "html_url": "https://github.com/jgeary",
      "followers_url": "https://api.github.com/users/jgeary/followers",
      "following_url": "https://api.github.com/users/jgeary/following{/other_user}",
      "gists_url": "https://api.github.com/users/jgeary/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jgeary/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jgeary/subscriptions",
      "organizations_url": "https://api.github.com/users/jgeary/orgs",
      "repos_url": "https://api.github.com/users/jgeary/repos",
      "events_url": "https://api.github.com/users/jgeary/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jgeary/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-11-10T16:17:28Z",
    "updated_at": "2022-11-10T16:46:43Z",
    "author_association": "NONE",
    "body": "definitely agree with this. anyone who deploys a GovernorTimelockControl and TimelockController using OZ's own contract wizard and wants to be able to kill select potential dao actions needs to grant some address the TimelockController.CANCELLER_ROLE and then that role can only cancel queued actions that have already succeeded as proposals. this is riskier (dangerous proposal has to come one step closer to being executed before it can be canceled), less gas efficient (users will spend gas on votes to pass proposal) and more contentious for communities (cancelations will be bound to upset people that successfully voted for the proposal). this is a strange default UX for something that is necessary for preventing a malicious or mistaken proposal that could cause loss of funds.\r\n \r\nGovernor or GovernorTimelockControl (or another module like GovernorCanceller) should have a `function cancel(...) onlyRole(CANCELLER_ROLE) external` plus AccessControl and a new CANCELLER_ROLE.\r\n\r\non that note, OZ should standardize how they spell words like canceled/cancelled and canceler/canceller. its inconsistent throughout the codebase and docs.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1310542592/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1370697084",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3436#issuecomment-1370697084",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3436",
    "id": 1370697084,
    "node_id": "IC_kwDOA9tCBs5Rsy18",
    "user": {
      "login": "Amxx",
      "id": 2432299,
      "node_id": "MDQ6VXNlcjI0MzIyOTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2432299?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Amxx",
      "html_url": "https://github.com/Amxx",
      "followers_url": "https://api.github.com/users/Amxx/followers",
      "following_url": "https://api.github.com/users/Amxx/following{/other_user}",
      "gists_url": "https://api.github.com/users/Amxx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Amxx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Amxx/subscriptions",
      "organizations_url": "https://api.github.com/users/Amxx/orgs",
      "repos_url": "https://api.github.com/users/Amxx/repos",
      "events_url": "https://api.github.com/users/Amxx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Amxx/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-01-04T09:42:51Z",
    "updated_at": "2023-01-04T09:42:51Z",
    "author_association": "COLLABORATOR",
    "body": "> Governor or GovernorTimelockControl (or another module like GovernorCanceller) should have a `function cancel(...) onlyRole(CANCELLER_ROLE) external` plus AccessControl and a new CANCELLER_ROLE.\r\n\r\nThis is both very opinionated, and very easy for a dev to manually add. Therefore, I think it should not be present by default.\r\n\r\n\r\nWe did not include Compound Alpha/Bravo cancel mechanism by default, because we think not everybody will want to give such power to the proposer. IMO, once created a proposal belongs to the community of voters. It feels wrong that the proposer can cancel it on his own, even though voters have started voting. We include that in the GovernorBravo compatibility module, and anyone can add this feature to their governor, but we did not want to have it by default.\r\n\r\nHaving a specific \"whitelist\" of address that can cancel goes even further. The accounts that have this power can sensor any proposal, basically resulting in nothing that they don't like passing through. Think of it like being able to veto a propose at the UN security council. We believe DAO should be self governed. Anyone is off course free to add this to their governance contract, but it should not be here by default.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1370697084/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1370998481",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3436#issuecomment-1370998481",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3436",
    "id": 1370998481,
    "node_id": "IC_kwDOA9tCBs5Rt8bR",
    "user": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-01-04T14:28:06Z",
    "updated_at": "2023-01-04T14:28:06Z",
    "author_association": "MEMBER",
    "body": "In Bravo's cancel function there are two alternative conditions:\r\n- `msg.sender == proposer`\r\n- `getVotes(proposer, block.number - 1) < proposalThreshold()`\r\n\r\nI would agree that giving the proposer the ability to cancel somewhat goes against the nature of decentralized governance, but the second condition doesn't have the same problem. The second condition is simply extending the concept of \"proposal threshold\" to say that the threshold must hold throughout the entire duration of a proposal, not just at the time of proposing. Arguably, by not implementing this condition we haven't implemented the same concept of \"proposal threshold\"!",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1370998481/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1371046510",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3436#issuecomment-1371046510",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3436",
    "id": 1371046510,
    "node_id": "IC_kwDOA9tCBs5RuIJu",
    "user": {
      "login": "Amxx",
      "id": 2432299,
      "node_id": "MDQ6VXNlcjI0MzIyOTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2432299?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Amxx",
      "html_url": "https://github.com/Amxx",
      "followers_url": "https://api.github.com/users/Amxx/followers",
      "following_url": "https://api.github.com/users/Amxx/following{/other_user}",
      "gists_url": "https://api.github.com/users/Amxx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Amxx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Amxx/subscriptions",
      "organizations_url": "https://api.github.com/users/Amxx/orgs",
      "repos_url": "https://api.github.com/users/Amxx/repos",
      "events_url": "https://api.github.com/users/Amxx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Amxx/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-01-04T15:07:14Z",
    "updated_at": "2023-01-04T15:07:14Z",
    "author_association": "COLLABORATOR",
    "body": "Even the second condition alone still gives a tremendous power to the proposer. \r\n\r\nA proposer could just:\r\n- de-delegate its votes\r\n- cancel\r\n- re-delegate.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1371046510/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1397690461",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3436#issuecomment-1397690461",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3436",
    "id": 1397690461,
    "node_id": "IC_kwDOA9tCBs5TTxBd",
    "user": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-01-19T22:21:54Z",
    "updated_at": "2023-01-19T22:21:54Z",
    "author_association": "MEMBER",
    "body": "We've arrived at a shared belief that giving the proposer the ability to cancel an active proposal gives it a power that we don't think it should have.\r\n\r\nHowever, we think that it could make sense for the proposer to have the ability to cancel a proposal during the delay before it becomes active. This requires storing the proposer address in storage, which is not something the contract currently does. It is possible to add this to the `ProposalCore` struct without increasing the number of storage slots that it uses, thus without substantially increasing the cost of `propose` (though it may require some tricks once we move to represent timepoints by smaller integers).\r\n\r\nWe may want to reserve the space for some other value, but I don't see at the moment what that could be.\r\n\r\nIf we decided to use the space for the proposer, we could add `cancel` in Governor by default, with the logic that a proposal can be cancelled before it becomes active.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1397690461/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1397730075",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3436#issuecomment-1397730075",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3436",
    "id": 1397730075,
    "node_id": "IC_kwDOA9tCBs5TT6sb",
    "user": {
      "login": "Amxx",
      "id": 2432299,
      "node_id": "MDQ6VXNlcjI0MzIyOTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2432299?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Amxx",
      "html_url": "https://github.com/Amxx",
      "followers_url": "https://api.github.com/users/Amxx/followers",
      "following_url": "https://api.github.com/users/Amxx/following{/other_user}",
      "gists_url": "https://api.github.com/users/Amxx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Amxx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Amxx/subscriptions",
      "organizations_url": "https://api.github.com/users/Amxx/orgs",
      "repos_url": "https://api.github.com/users/Amxx/repos",
      "events_url": "https://api.github.com/users/Amxx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Amxx/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-01-19T23:12:55Z",
    "updated_at": "2023-01-19T23:12:55Z",
    "author_association": "COLLABORATOR",
    "body": "> It is possible to add this to the `ProposalCore` struct without increasing the number of storage slots\r\n\r\nThat is possible with the current, poorly packed, version of the structure.\r\n\r\nIn 5.0 we want to use `uint48` (or at most `uint64`) for both timers. This will make the struct fit into 1 slot, compared to 3 today. On the other hand, this one slot will not have enough spare room for an address. ",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1397730075/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1397732080",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3436#issuecomment-1397732080",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3436",
    "id": 1397732080,
    "node_id": "IC_kwDOA9tCBs5TT7Lw",
    "user": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-01-19T23:15:33Z",
    "updated_at": "2023-01-19T23:15:33Z",
    "author_association": "MEMBER",
    "body": "The obvious way to store `voteStart` and `voteEnd` is using `uint48` for each. However, instead of `voteEnd` we can store `voteEnd - voteStart` (i.e. `votingPeriod`) which should be comfortably representable with a smaller integer. This is what I meant by \"it may require some tricks\". ",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1397732080/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1397739601",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3436#issuecomment-1397739601",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3436",
    "id": 1397739601,
    "node_id": "IC_kwDOA9tCBs5TT9BR",
    "user": {
      "login": "Amxx",
      "id": 2432299,
      "node_id": "MDQ6VXNlcjI0MzIyOTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2432299?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Amxx",
      "html_url": "https://github.com/Amxx",
      "followers_url": "https://api.github.com/users/Amxx/followers",
      "following_url": "https://api.github.com/users/Amxx/following{/other_user}",
      "gists_url": "https://api.github.com/users/Amxx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Amxx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Amxx/subscriptions",
      "organizations_url": "https://api.github.com/users/Amxx/orgs",
      "repos_url": "https://api.github.com/users/Amxx/repos",
      "events_url": "https://api.github.com/users/Amxx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Amxx/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-01-19T23:26:30Z",
    "updated_at": "2023-01-19T23:26:30Z",
    "author_association": "COLLABORATOR",
    "body": "000-159 : address\r\n160-207: uint48 (vote starts)\r\n208-239: uint32 (duration)\r\n240-247: bool (executed)\r\n248-255: bool (canceled)\r\n\r\nThe 2 bool might even be merged into a single bytes1 to have a uint40 for the duration.\r\n\r\ntype(uint32).max = +136 years\r\n\r\nuint40 would provide support even for blocknumber that happens 10k times per seconds.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1397739601/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
