{
  "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4387",
  "repository_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts",
  "labels_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4387/labels{/name}",
  "comments_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4387/comments",
  "events_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4387/events",
  "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/4387",
  "id": 1772262374,
  "node_id": "I_kwDOA9tCBs5popPm",
  "number": 4387,
  "title": "Uncheck whole loop to save gas",
  "user": {
    "login": "MollyHe5",
    "id": 11722837,
    "node_id": "MDQ6VXNlcjExNzIyODM3",
    "avatar_url": "https://avatars.githubusercontent.com/u/11722837?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/MollyHe5",
    "html_url": "https://github.com/MollyHe5",
    "followers_url": "https://api.github.com/users/MollyHe5/followers",
    "following_url": "https://api.github.com/users/MollyHe5/following{/other_user}",
    "gists_url": "https://api.github.com/users/MollyHe5/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/MollyHe5/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/MollyHe5/subscriptions",
    "organizations_url": "https://api.github.com/users/MollyHe5/orgs",
    "repos_url": "https://api.github.com/users/MollyHe5/repos",
    "events_url": "https://api.github.com/users/MollyHe5/events{/privacy}",
    "received_events_url": "https://api.github.com/users/MollyHe5/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 0,
  "created_at": "2023-06-23T22:54:44Z",
  "updated_at": "2023-06-23T22:54:44Z",
  "closed_at": null,
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "If all arithmetic computation inside a loop is to update the loop index, then the whole loop can be moved into a unchecked block. \r\n\r\nFor example, in the function executeBatch in the contracts/governance/TimelockController.sol\r\n```\r\n    function executeBatch(\r\n        address[] calldata targets,\r\n        uint256[] calldata values,\r\n        bytes[] calldata payloads,\r\n        bytes32 predecessor,\r\n        bytes32 salt\r\n    ) public payable virtual onlyRoleOrOpenRole(EXECUTOR_ROLE) {\r\n        if (targets.length != values.length || targets.length != payloads.length) {\r\n            revert TimelockInvalidOperationLength(targets.length, payloads.length, values.length);\r\n        }\r\n\r\n        bytes32 id = hashOperationBatch(targets, values, payloads, predecessor, salt);\r\n\r\n        _beforeCall(id, predecessor);\r\n        for (uint256 i = 0; i < targets.length; ++i) {\r\n            address target = targets[i];\r\n            uint256 value = values[i];\r\n            bytes calldata payload = payloads[i];\r\n            _execute(target, value, payload);\r\n            emit CallExecuted(id, i, target, value, payload);\r\n        }\r\n        _afterCall(id);\r\n    }\r\n```\r\nAs the only arithmetic computation inside the loop is to update the loop index, unchecking the whole loop can be safe and save some gas.\r\n```\r\n    function executeBatch(\r\n        address[] calldata targets,\r\n        uint256[] calldata values,\r\n        bytes[] calldata payloads,\r\n        bytes32 predecessor,\r\n        bytes32 salt\r\n    ) public payable virtual onlyRoleOrOpenRole(EXECUTOR_ROLE) {\r\n        if (targets.length != values.length || targets.length != payloads.length) {\r\n            revert TimelockInvalidOperationLength(targets.length, payloads.length, values.length);\r\n        }\r\n\r\n        bytes32 id = hashOperationBatch(targets, values, payloads, predecessor, salt);\r\n\r\n        _beforeCall(id, predecessor);\r\n        unchecked {\r\n            for (uint256 i = 0; i < targets.length; ++i) {\r\n                address target = targets[i];\r\n                uint256 value = values[i];\r\n                bytes calldata payload = payloads[i];\r\n                _execute(target, value, payload);\r\n                emit CallExecuted(id, i, target, value, payload);\r\n            }\r\n        }\r\n        _afterCall(id);\r\n    }\r\n```",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4387/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4387/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[

]
