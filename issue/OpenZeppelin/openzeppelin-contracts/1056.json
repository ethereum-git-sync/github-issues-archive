{
  "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1056",
  "repository_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts",
  "labels_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1056/labels{/name}",
  "comments_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1056/comments",
  "events_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1056/events",
  "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1056",
  "id": 337554136,
  "node_id": "MDU6SXNzdWUzMzc1NTQxMzY=",
  "number": 1056,
  "title": "ReentrancyGuard gas usage optimization",
  "user": {
    "login": "Eenae",
    "id": 31278014,
    "node_id": "MDQ6VXNlcjMxMjc4MDE0",
    "avatar_url": "https://avatars.githubusercontent.com/u/31278014?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/Eenae",
    "html_url": "https://github.com/Eenae",
    "followers_url": "https://api.github.com/users/Eenae/followers",
    "following_url": "https://api.github.com/users/Eenae/following{/other_user}",
    "gists_url": "https://api.github.com/users/Eenae/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/Eenae/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/Eenae/subscriptions",
    "organizations_url": "https://api.github.com/users/Eenae/orgs",
    "repos_url": "https://api.github.com/users/Eenae/repos",
    "events_url": "https://api.github.com/users/Eenae/events{/privacy}",
    "received_events_url": "https://api.github.com/users/Eenae/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 1000207718,
      "node_id": "MDU6TGFiZWwxMDAwMjA3NzE4",
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/labels/contracts",
      "name": "contracts",
      "color": "1d76db",
      "default": false,
      "description": "Smart contract code."
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 1,
  "created_at": "2018-07-02T14:58:44Z",
  "updated_at": "2018-07-28T01:36:18Z",
  "closed_at": "2018-07-28T01:36:18Z",
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "## üéâ Description\r\n\r\n`ReentrancyGuard` is very useful contract to prevent reentrancy attack and is actively used. But there is associated performance (gas usage) penalty: about 25k gas per invocation. This could be optimized to 10k gas pre invocation: 2.5x times. A PR will follow.\r\n\r\n- [x] üìà This is a feature request.\r\n\r\n## üíª Environment\r\n\r\n- OpenZeppelin v1.10.0\r\n- Deploying to Ganache v6.1.0\r\n- Deploying with truffle v4.1.11\r\n\r\n## üìù Details\r\n\r\nThe problem with the current implementation is that it uses boolean flag and boolean value `false` is stored in contract storage as 0. Changing storage cell content from 0 to non-zero costs 20k gas and it's happening on each invocation of `nonReentrant` modifier, because at the end of each invocation cell content is changed back to zero. As a result, each call to `nonReentrant` costs 25k gas: 20k for writing to zeroed storage cell and 5k for writing to non-zero storage cell.\r\n\r\nProposed solution is to never return to zero. Each call to `nonReentrant` will use non-zero integer constants to represent state of the guard.\r\n\r\n## üî¢ Code To Reproduce Issue\r\n\r\nIt could be seen in Remix that execution cost of each call to `Test.test()` is 25929 gas.\r\n\r\n```\r\npragma solidity ^0.4.24;\r\n\r\n\r\n/**\r\n * @title Helps contracts guard agains reentrancy attacks.\r\n * @author Remco Bloemen <remco@2œÄ.com>\r\n * @notice If you mark a function `nonReentrant`, you should also\r\n * mark it `external`.\r\n */\r\ncontract ReentrancyGuard {\r\n\r\n  /**\r\n   * @dev We use a single lock for the whole contract.\r\n   */\r\n  bool private reentrancyLock = false;\r\n\r\n  /**\r\n   * @dev Prevents a contract from calling itself, directly or indirectly.\r\n   * @notice If you mark a function `nonReentrant`, you should also\r\n   * mark it `external`. Calling one nonReentrant function from\r\n   * another is not supported. Instead, you can implement a\r\n   * `private` function doing the actual work, and a `external`\r\n   * wrapper marked as `nonReentrant`.\r\n   */\r\n  modifier nonReentrant() {\r\n    require(!reentrancyLock);\r\n    reentrancyLock = true;\r\n    _;\r\n    reentrancyLock = false;\r\n  }\r\n\r\n}\r\n\r\ncontract Test is ReentrancyGuard {\r\n    function test() external nonReentrant {\r\n    }\r\n}\r\n```\r\n\r\n## üëç Other Information\r\n\r\nPR will follow.\r\n",
  "closed_by": {
    "login": "nventuro",
    "id": 2530770,
    "node_id": "MDQ6VXNlcjI1MzA3NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/2530770?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nventuro",
    "html_url": "https://github.com/nventuro",
    "followers_url": "https://api.github.com/users/nventuro/followers",
    "following_url": "https://api.github.com/users/nventuro/following{/other_user}",
    "gists_url": "https://api.github.com/users/nventuro/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nventuro/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nventuro/subscriptions",
    "organizations_url": "https://api.github.com/users/nventuro/orgs",
    "repos_url": "https://api.github.com/users/nventuro/repos",
    "events_url": "https://api.github.com/users/nventuro/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nventuro/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1056/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1056/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/402831555",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1056#issuecomment-402831555",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1056",
    "id": 402831555,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwMjgzMTU1NQ==",
    "user": {
      "login": "BrendanChou",
      "id": 3680392,
      "node_id": "MDQ6VXNlcjM2ODAzOTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3680392?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/BrendanChou",
      "html_url": "https://github.com/BrendanChou",
      "followers_url": "https://api.github.com/users/BrendanChou/followers",
      "following_url": "https://api.github.com/users/BrendanChou/following{/other_user}",
      "gists_url": "https://api.github.com/users/BrendanChou/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/BrendanChou/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/BrendanChou/subscriptions",
      "organizations_url": "https://api.github.com/users/BrendanChou/orgs",
      "repos_url": "https://api.github.com/users/BrendanChou/repos",
      "events_url": "https://api.github.com/users/BrendanChou/events{/privacy}",
      "received_events_url": "https://api.github.com/users/BrendanChou/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-05T19:42:02Z",
    "updated_at": "2018-07-05T19:42:02Z",
    "author_association": "CONTRIBUTOR",
    "body": "It is also important to note that this only works for small transactions. The write back to zero is 5k gas with a 15k gas refund, which means that for large transactions, the cost for the boolean implementation is still 10k gas in total.\r\n\r\nThe reason the integer implementation saves gas is because gas refunds can only refund up to a certain % of the total transaction, so for small transactions, the refund is not actually completely refunded.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/402831555/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
