{
  "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4647",
  "repository_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts",
  "labels_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4647/labels{/name}",
  "comments_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4647/comments",
  "events_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4647/events",
  "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/4647",
  "id": 1924129289,
  "node_id": "I_kwDOA9tCBs5yr-IJ",
  "number": 4647,
  "title": "Feature Request: Granular Control Modifiers in Context.sol Contract",
  "user": {
    "login": "1anyway",
    "id": 89972904,
    "node_id": "MDQ6VXNlcjg5OTcyOTA0",
    "avatar_url": "https://avatars.githubusercontent.com/u/89972904?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/1anyway",
    "html_url": "https://github.com/1anyway",
    "followers_url": "https://api.github.com/users/1anyway/followers",
    "following_url": "https://api.github.com/users/1anyway/following{/other_user}",
    "gists_url": "https://api.github.com/users/1anyway/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/1anyway/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/1anyway/subscriptions",
    "organizations_url": "https://api.github.com/users/1anyway/orgs",
    "repos_url": "https://api.github.com/users/1anyway/repos",
    "events_url": "https://api.github.com/users/1anyway/events{/privacy}",
    "received_events_url": "https://api.github.com/users/1anyway/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 2,
  "created_at": "2023-10-03T13:14:03Z",
  "updated_at": "2023-10-03T14:56:43Z",
  "closed_at": null,
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "**üßê Motivation**\r\nIn the process of developing smart contracts, I've identified a potential enhancement to the Context contract in OpenZeppelin. The goal is to provide more granular control over the execution context, ensuring that certain functions can only be called directly by end-users (Externally Owned Accounts or EOAs) and not by other smart contracts or through proxy contracts. This can be particularly important for functions that deal with sensitive operations or where the intent is to have direct interaction without any intermediaries.\r\n**üìù Details**\r\nI propose adding three new modifiers to the Context contract:\r\n\r\n1. `onlyEOAWithoutProxies`: Ensures the call is made directly by an EOA and not through any proxies.\r\n2. `onlyEOA`: Ensures the call is made directly by an EOA, preventing smart contracts from executing certain functionalities.\r\n3. `noProxy`: Ensures the call is not made through a proxy.\r\n```\r\nmodifier onlyEOAWithoutProxies(address thisAddr) {\r\n        bool cond1 = msg.sender == tx.origin;\r\n        bool cond2 = address(this) == thisAddr;\r\n        require(cond1 && cond2, \"Context: call must be direct and without proxies\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyEOA() {\r\n        require(msg.sender == tx.origin, \"Context: caller must be EOA\");\r\n        _;\r\n    }\r\n\r\n    modifier noProxy(address thisAddr) {\r\n        require(address(this) == thisAddr, \"Context: call must not be through a proxy\");\r\n        _;\r\n    }\r\n```\r\nThese modifiers provide developers with more tools to control and validate the execution context of their functions, ensuring better security and functionality alignment.\r\nYou can find the complete implementation here: https://github.com/1anyway/ValidateContext/blob/main/contracts/Context.sol\r\nI believe these enhancements could be a valuable addition to the OpenZeppelin library, providing developers with more flexibility and security options.",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4647/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4647/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1745086547",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/4647#issuecomment-1745086547",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4647",
    "id": 1745086547,
    "node_id": "IC_kwDOA9tCBs5oA-hT",
    "user": {
      "login": "Amxx",
      "id": 2432299,
      "node_id": "MDQ6VXNlcjI0MzIyOTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2432299?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Amxx",
      "html_url": "https://github.com/Amxx",
      "followers_url": "https://api.github.com/users/Amxx/followers",
      "following_url": "https://api.github.com/users/Amxx/following{/other_user}",
      "gists_url": "https://api.github.com/users/Amxx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Amxx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Amxx/subscriptions",
      "organizations_url": "https://api.github.com/users/Amxx/orgs",
      "repos_url": "https://api.github.com/users/Amxx/repos",
      "events_url": "https://api.github.com/users/Amxx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Amxx/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-10-03T14:23:23Z",
    "updated_at": "2023-10-03T14:23:23Z",
    "author_association": "COLLABORATOR",
    "body": "Hello @1anyway, and thank you for openning this issue.\r\n\r\n- About the `noProxy`, I'm not sure what `thisAddr` is supposed to represent. We already have something that may be similar in `UUPSUpgradeable`. The `onlyProxy` modifier ensure that some operations are only performed through delegation and not directly. This allows us to enforce that the `upgradeToAndCall` is never called on an implementation, and only on the actual proxies that point to the implementation.\r\n  - In the case of upgradeable contracts, this ensure that the upgrade workflow cannot accidentally `selfdestruct` the implementation.\r\n  - I'm currious about other usecases for this modifier. What do you ave in mind ?\r\n  \r\n- `onlyEOA`: This is something we have strongly opposed in the past, and that we will continue to oppose. We believe smart contracts should be able to perform calls just like EOA. Using such a modifier prevents contract composability, and prevent users using AA to interract with you. This hurt you and your potential users. \r\n\r\n- `onlyEOAWithoutProxies`: this looks like a mix of the two. So answers for the previous points apply here.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1745086547/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1745153466",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/4647#issuecomment-1745153466",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4647",
    "id": 1745153466,
    "node_id": "IC_kwDOA9tCBs5oBO26",
    "user": {
      "login": "1anyway",
      "id": 89972904,
      "node_id": "MDQ6VXNlcjg5OTcyOTA0",
      "avatar_url": "https://avatars.githubusercontent.com/u/89972904?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/1anyway",
      "html_url": "https://github.com/1anyway",
      "followers_url": "https://api.github.com/users/1anyway/followers",
      "following_url": "https://api.github.com/users/1anyway/following{/other_user}",
      "gists_url": "https://api.github.com/users/1anyway/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/1anyway/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/1anyway/subscriptions",
      "organizations_url": "https://api.github.com/users/1anyway/orgs",
      "repos_url": "https://api.github.com/users/1anyway/repos",
      "events_url": "https://api.github.com/users/1anyway/events{/privacy}",
      "received_events_url": "https://api.github.com/users/1anyway/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-10-03T14:56:43Z",
    "updated_at": "2023-10-03T14:56:43Z",
    "author_association": "NONE",
    "body": "Hello OpenZeppelin team, thank you for the detailed feedback.\r\n`thisAddr` represent the expected address of the current contract instance, this is used to ensure that the call is not being made through a proxy contract.\r\nI'd like to emphasize that the intention behind introducing these modifiers is to provide options, not mandates. While I understand and respect the philosophy of contract composability and the importance of catering to a broad user base, there are specific use cases and projects that might require a different approach.\r\n\r\nFor instance, in our applications, we've chosen to impose restrictions against the use of smart contracts for certain functionalities. For security reasons, we also wish to impose restrictions on proxy calls. This is to ensure that our application operates under specific environments and conditions, thereby enhancing its security. This decision is based on our project's unique requirements and security considerations. I believe there might be other projects in the ecosystem that could benefit from having such options readily available in the OpenZeppelin library.\r\n\r\nWhile the Context contract is a foundational piece, perhaps these modifiers could be introduced in an extended version, say ContextExtended or Context2, so that developers have the choice to opt-in based on their project's needs.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1745153466/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
