{
  "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1328",
  "repository_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts",
  "labels_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1328/labels{/name}",
  "comments_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1328/comments",
  "events_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1328/events",
  "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1328",
  "id": 360643962,
  "node_id": "MDU6SXNzdWUzNjA2NDM5NjI=",
  "number": 1328,
  "title": "Request for implementing a contract which supports \"multi-user\" access",
  "user": {
    "login": "barakman",
    "id": 7003246,
    "node_id": "MDQ6VXNlcjcwMDMyNDY=",
    "avatar_url": "https://avatars.githubusercontent.com/u/7003246?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/barakman",
    "html_url": "https://github.com/barakman",
    "followers_url": "https://api.github.com/users/barakman/followers",
    "following_url": "https://api.github.com/users/barakman/following{/other_user}",
    "gists_url": "https://api.github.com/users/barakman/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/barakman/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/barakman/subscriptions",
    "organizations_url": "https://api.github.com/users/barakman/orgs",
    "repos_url": "https://api.github.com/users/barakman/repos",
    "events_url": "https://api.github.com/users/barakman/events{/privacy}",
    "received_events_url": "https://api.github.com/users/barakman/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 1,
  "created_at": "2018-09-16T14:21:55Z",
  "updated_at": "2018-09-19T02:27:44Z",
  "closed_at": "2018-09-19T02:27:44Z",
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "## 🎉 Description\r\n\r\nOne of the main issues that we've come across, is the ability to scale-out (aka *horizontal-scaling*) the execution of `onlyOwner` functions in our system.\r\n\r\nSuch function can be called only from a single account, hence, in every function-call, one must increment the nonce before sending the transaction to the Ethereum node.\r\n\r\nHowever, if we allow such function to be called from any one of several given accounts, then we can easily \"split the work\" over several different nodes (aka *load-balancing*), and achieve a higher throughput.\r\n\r\nMy suggestion here is to implement a contract supporting \"multi-user\" access, which can be inherited by anyone.\r\n\r\nThis contract will provide the following:\r\n- An `onlyUser` modifier, which can be used (by the derived contract) instead of `onlyOwner`\r\n- A pair of functions for accepting new / rejecting existing users, which will be restricted by `onlyOwner`\r\n\r\n- [x] 📈 This is a feature request.\r\n\r\n## 📝 Details\r\n\r\n```\r\nimport \"./Ownable.sol\";\r\n\r\ncontract Usable is Ownable {\r\n    address[] public userList;\r\n\r\n    struct User {\r\n        bool valid;\r\n        uint index;\r\n    }\r\n\r\n    mapping(address => User) public users;\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than one of the users.\r\n     */\r\n    modifier onlyUser() {\r\n        require(users[msg.sender].valid);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Accept a new user.\r\n     * @param _user The user's address.\r\n     */\r\n    function accept(address _user) external onlyOwner {\r\n        User storage userRef = users[_user];\r\n        require(_user != address(0));\r\n        require(!userRef.valid);\r\n        userRef.valid = true;\r\n        userRef.index = userList.length;\r\n        userList.push(_user);\r\n    }\r\n\r\n    /**\r\n     * @dev Reject an existing user.\r\n     * @param _user The user's address.\r\n     */\r\n    function reject(address _user) external onlyOwner {\r\n        User storage userRef = users[_user];\r\n        require(userRef.index < userList.length);\r\n        require(_user == userList[userRef.index]);\r\n        address lastUser = userList[userList.length - 1];\r\n        users[lastUser].index = userRef.index;\r\n        userList[userRef.index] = lastUser;\r\n        userList.length -= 1;\r\n        delete users[_user];\r\n    }\r\n\r\n    /**\r\n     * @dev Get the total number of users.\r\n     * @return The total number of users.\r\n     */\r\n    function userCount() external view returns (uint) {\r\n        return userList.length;\r\n    }\r\n}\r\n```\r\n",
  "closed_by": {
    "login": "nventuro",
    "id": 2530770,
    "node_id": "MDQ6VXNlcjI1MzA3NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/2530770?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nventuro",
    "html_url": "https://github.com/nventuro",
    "followers_url": "https://api.github.com/users/nventuro/followers",
    "following_url": "https://api.github.com/users/nventuro/following{/other_user}",
    "gists_url": "https://api.github.com/users/nventuro/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nventuro/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nventuro/subscriptions",
    "organizations_url": "https://api.github.com/users/nventuro/orgs",
    "repos_url": "https://api.github.com/users/nventuro/repos",
    "events_url": "https://api.github.com/users/nventuro/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nventuro/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1328/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1328/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/421945261",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1328#issuecomment-421945261",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1328",
    "id": 421945261,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyMTk0NTI2MQ==",
    "user": {
      "login": "nventuro",
      "id": 2530770,
      "node_id": "MDQ6VXNlcjI1MzA3NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2530770?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nventuro",
      "html_url": "https://github.com/nventuro",
      "followers_url": "https://api.github.com/users/nventuro/followers",
      "following_url": "https://api.github.com/users/nventuro/following{/other_user}",
      "gists_url": "https://api.github.com/users/nventuro/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nventuro/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nventuro/subscriptions",
      "organizations_url": "https://api.github.com/users/nventuro/orgs",
      "repos_url": "https://api.github.com/users/nventuro/repos",
      "events_url": "https://api.github.com/users/nventuro/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nventuro/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-09-17T09:38:04Z",
    "updated_at": "2018-09-17T20:40:40Z",
    "author_association": "CONTRIBUTOR",
    "body": "Hey there @barakman! The upcoming OpenZeppelin 2.0 release (for which we already have a [release candidate](https://github.com/OpenZeppelin/openzeppelin-solidity/releases/tag/v2.0.0-rc.1)) deprecates `Ownable` in favor of [more granular roles](https://github.com/OpenZeppelin/openzeppelin-solidity/pull/1291), e.g. a [`MinterRole`](https://github.com/OpenZeppelin/openzeppelin-solidity/blob/v2.0.0-rc.1/contracts/access/roles/MinterRole.sol), which you'll notice looks very similar to what you propose, and should easily cover your use case (though it is not the one we had in mind when designing it), since it allows assigning a role to multiple accounts.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/421945261/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
