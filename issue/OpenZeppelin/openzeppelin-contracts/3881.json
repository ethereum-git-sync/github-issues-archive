{
  "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3881",
  "repository_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts",
  "labels_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3881/labels{/name}",
  "comments_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3881/comments",
  "events_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3881/events",
  "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3881",
  "id": 1499398027,
  "node_id": "I_kwDOA9tCBs5ZXv-L",
  "number": 3881,
  "title": "Redundant storeProposal in GovernorCompatibilityBravo",
  "user": {
    "login": "RitzyDevBox",
    "id": 103006767,
    "node_id": "U_kgDOBiPCLw",
    "avatar_url": "https://avatars.githubusercontent.com/u/103006767?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/RitzyDevBox",
    "html_url": "https://github.com/RitzyDevBox",
    "followers_url": "https://api.github.com/users/RitzyDevBox/followers",
    "following_url": "https://api.github.com/users/RitzyDevBox/following{/other_user}",
    "gists_url": "https://api.github.com/users/RitzyDevBox/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/RitzyDevBox/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/RitzyDevBox/subscriptions",
    "organizations_url": "https://api.github.com/users/RitzyDevBox/orgs",
    "repos_url": "https://api.github.com/users/RitzyDevBox/repos",
    "events_url": "https://api.github.com/users/RitzyDevBox/events{/privacy}",
    "received_events_url": "https://api.github.com/users/RitzyDevBox/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 4953777396,
      "node_id": "LA_kwDOA9tCBs8AAAABJ0Sk9A",
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/labels/area:%20governance",
      "name": "area: governance",
      "color": "E7DA84",
      "default": false,
      "description": ""
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/milestones/11",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/milestone/11",
    "labels_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/milestones/11/labels",
    "id": 7990184,
    "node_id": "MI_kwDOA9tCBs4Aeeuo",
    "number": 11,
    "title": "5.0",
    "description": null,
    "creator": {
      "login": "Amxx",
      "id": 2432299,
      "node_id": "MDQ6VXNlcjI0MzIyOTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2432299?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Amxx",
      "html_url": "https://github.com/Amxx",
      "followers_url": "https://api.github.com/users/Amxx/followers",
      "following_url": "https://api.github.com/users/Amxx/following{/other_user}",
      "gists_url": "https://api.github.com/users/Amxx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Amxx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Amxx/subscriptions",
      "organizations_url": "https://api.github.com/users/Amxx/orgs",
      "repos_url": "https://api.github.com/users/Amxx/repos",
      "events_url": "https://api.github.com/users/Amxx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Amxx/received_events",
      "type": "User",
      "site_admin": false
    },
    "open_issues": 31,
    "closed_issues": 45,
    "state": "open",
    "created_at": "2022-05-17T19:52:44Z",
    "updated_at": "2023-06-29T16:00:39Z",
    "due_on": null,
    "closed_at": null
  },
  "comments": 13,
  "created_at": "2022-12-16T01:04:41Z",
  "updated_at": "2023-02-24T18:58:47Z",
  "closed_at": "2023-02-24T18:58:46Z",
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "In the Bravo Compatibility Contract the proposal data is duplicated with different proposalIds\r\nThe initial Bravo Contract does not have a proposal method which takes 4 parameters,  why do we require storage for that proposalHash?\r\n\r\n`    // ============================================== Proposal lifecycle ==============================================\r\n    /**\r\n     * @dev See {IGovernor-propose}.\r\n     */\r\n    function propose(\r\n        address[] memory targets,\r\n        uint256[] memory values,\r\n        bytes[] memory calldatas,\r\n        string memory description\r\n    ) public virtual override(IGovernor, Governor) returns (uint256) {\r\n        _storeProposal(_msgSender(), targets, values, new string[](calldatas.length), calldatas, description);\r\n        return super.propose(targets, values, calldatas, description);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IGovernorCompatibilityBravo-propose}.\r\n     */\r\n    function propose(\r\n        address[] memory targets,\r\n        uint256[] memory values,\r\n        string[] memory signatures,\r\n        bytes[] memory calldatas,\r\n        string memory description\r\n    ) public virtual override returns (uint256) {\r\n        _storeProposal(_msgSender(), targets, values, signatures, calldatas, description);\r\n        return propose(targets, values, _encodeCalldata(signatures, calldatas), description);\r\n    }\r\n`\r\n",
  "closed_by": {
    "login": "frangio",
    "id": 481465,
    "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
    "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/frangio",
    "html_url": "https://github.com/frangio",
    "followers_url": "https://api.github.com/users/frangio/followers",
    "following_url": "https://api.github.com/users/frangio/following{/other_user}",
    "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
    "organizations_url": "https://api.github.com/users/frangio/orgs",
    "repos_url": "https://api.github.com/users/frangio/repos",
    "events_url": "https://api.github.com/users/frangio/events{/privacy}",
    "received_events_url": "https://api.github.com/users/frangio/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3881/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3881/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1354058624",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3881#issuecomment-1354058624",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3881",
    "id": 1354058624,
    "node_id": "IC_kwDOA9tCBs5QtUuA",
    "user": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-12-16T01:41:13Z",
    "updated_at": "2022-12-16T01:41:13Z",
    "author_association": "MEMBER",
    "body": "I do not understand the issue, can you please elaborate?\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1354058624/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1356669787",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3881#issuecomment-1356669787",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3881",
    "id": 1356669787,
    "node_id": "IC_kwDOA9tCBs5Q3SNb",
    "user": {
      "login": "FriskyHamTitz",
      "id": 94883498,
      "node_id": "U_kgDOBafOqg",
      "avatar_url": "https://avatars.githubusercontent.com/u/94883498?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/FriskyHamTitz",
      "html_url": "https://github.com/FriskyHamTitz",
      "followers_url": "https://api.github.com/users/FriskyHamTitz/followers",
      "following_url": "https://api.github.com/users/FriskyHamTitz/following{/other_user}",
      "gists_url": "https://api.github.com/users/FriskyHamTitz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/FriskyHamTitz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/FriskyHamTitz/subscriptions",
      "organizations_url": "https://api.github.com/users/FriskyHamTitz/orgs",
      "repos_url": "https://api.github.com/users/FriskyHamTitz/repos",
      "events_url": "https://api.github.com/users/FriskyHamTitz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/FriskyHamTitz/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-12-18T04:36:03Z",
    "updated_at": "2022-12-18T04:36:03Z",
    "author_association": "NONE",
    "body": "Why are you storing the proposal data for the 4 parameter propose?\r\n\r\nQueue and execute, only work with proposalIds that come from the 5 parameter method ",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1356669787/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1356930793",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3881#issuecomment-1356930793",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3881",
    "id": 1356930793,
    "node_id": "IC_kwDOA9tCBs5Q4R7p",
    "user": {
      "login": "RitzyDevBox",
      "id": 103006767,
      "node_id": "U_kgDOBiPCLw",
      "avatar_url": "https://avatars.githubusercontent.com/u/103006767?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/RitzyDevBox",
      "html_url": "https://github.com/RitzyDevBox",
      "followers_url": "https://api.github.com/users/RitzyDevBox/followers",
      "following_url": "https://api.github.com/users/RitzyDevBox/following{/other_user}",
      "gists_url": "https://api.github.com/users/RitzyDevBox/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/RitzyDevBox/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/RitzyDevBox/subscriptions",
      "organizations_url": "https://api.github.com/users/RitzyDevBox/orgs",
      "repos_url": "https://api.github.com/users/RitzyDevBox/repos",
      "events_url": "https://api.github.com/users/RitzyDevBox/events{/privacy}",
      "received_events_url": "https://api.github.com/users/RitzyDevBox/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-12-19T00:43:21Z",
    "updated_at": "2022-12-19T00:43:21Z",
    "author_association": "NONE",
    "body": "Yeah basically, the store proposal function is called twice when creating a bravo contract\r\n\r\n     1. The 5 parameter propose function calls the 4 parameter one.\r\n \r\nwhich results in 2 calls to _storeProposal, also I believe they are using different hashes, since they pass in different call datas since one is encoded.\r\n\r\n      _storeProposal(_msgSender(), targets, values, signatures, calldatas, description);\r\n      _storeProposal(_msgSender(), targets, values, new string, calldatas, description);\r\n\r\nThe hash will be different, so duplicate storage, also a waste of gas.   I figured this might be so the bravo contract could execute proposals using queue(hashId), but I don't think this would work because queue/execute.  only lookup the hashId using `_storeProposal(_msgSender(), targets, values, signatures, calldatas, description);` and not the encoded one.    \r\n\r\nMaybe by chance the encoded calldatas will hash to the same id, if thats the case, calling store proposal the second time is a waste of gas.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1356930793/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1364307503",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3881#issuecomment-1364307503",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3881",
    "id": 1364307503,
    "node_id": "IC_kwDOA9tCBs5RUa4v",
    "user": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-12-23T20:11:49Z",
    "updated_at": "2022-12-23T20:11:49Z",
    "author_association": "MEMBER",
    "body": "Right. There does seem to be a redundancy. The hashes will not be different, though. The two calls that are being done are:\r\n\r\n```solidity\r\n_storeProposal(_msgSender(), targets, values, signatures, calldatas, description); // (1)\r\n_storeProposal(_msgSender(), targets, values, new string[](calldatas.length), _encodeCalldata(signatures, calldatas), description); // (2)\r\n```\r\n\r\n`_storeProposal` generates the hash by:\r\n\r\n```solidity\r\nhashProposal(targets, values, _encodeCalldata(signatures, calldatas), descriptionHash);\r\n```\r\n\r\n`_encodeCalldata` has the property that if `signatures[i]` is the empty string, `calldatas[i]` is passed through as is in the return value.\r\n\r\nNote that the second call to `_storeProposal` uses `new string[](calldatas.length)`, an array of empty strings. As a result, in both cases `hashProposal` is called with the same arguments.\r\n\r\n---\r\n\r\nIt is still an inefficiency that we should remove. I'm wondering if it has any weird interactions with inheritance that we might have to consider.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1364307503/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1364946915",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3881#issuecomment-1364946915",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3881",
    "id": 1364946915,
    "node_id": "IC_kwDOA9tCBs5RW2_j",
    "user": {
      "login": "RitzyDevBox",
      "id": 103006767,
      "node_id": "U_kgDOBiPCLw",
      "avatar_url": "https://avatars.githubusercontent.com/u/103006767?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/RitzyDevBox",
      "html_url": "https://github.com/RitzyDevBox",
      "followers_url": "https://api.github.com/users/RitzyDevBox/followers",
      "following_url": "https://api.github.com/users/RitzyDevBox/following{/other_user}",
      "gists_url": "https://api.github.com/users/RitzyDevBox/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/RitzyDevBox/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/RitzyDevBox/subscriptions",
      "organizations_url": "https://api.github.com/users/RitzyDevBox/orgs",
      "repos_url": "https://api.github.com/users/RitzyDevBox/repos",
      "events_url": "https://api.github.com/users/RitzyDevBox/events{/privacy}",
      "received_events_url": "https://api.github.com/users/RitzyDevBox/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-12-26T07:07:23Z",
    "updated_at": "2022-12-26T07:07:23Z",
    "author_association": "NONE",
    "body": "Wont this result in a different hash since the encoded calldata will be different?\r\n\r\nuint256 proposalId = hashProposal(targets, values, _encodeCalldata(signatures, calldatas), descriptionHash);\r\n\r\nIf someone attempts to call Queue, or Execute with a hash that was created by the 4 parameter propose it would fail no?\r\nI think by default all bravo implementations are calling the 5 parameter method, so everything should work fine. \r\n\r\nI only found this bug because I was creating a proposalCount and extended the bravo compatibility to increment on proposals and the count started doubling.  \r\n\r\nWith the current implementation of governance, it relatively difficult to obtain the previous proposals without \r\n    1. using a graph provide, which will lag ~10 minutes behind proposals\r\n    2. enumerating the block on the RPC since the launch of contract (this is what uni does which is also an ugly solution IMO)\r\n\r\nIt would be nice is there was a simple way to query the past proposals especially if their being stored with bravo compatibility",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1364946915/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1400455972",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3881#issuecomment-1400455972",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3881",
    "id": 1400455972,
    "node_id": "IC_kwDOA9tCBs5TeUMk",
    "user": {
      "login": "Amxx",
      "id": 2432299,
      "node_id": "MDQ6VXNlcjI0MzIyOTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2432299?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Amxx",
      "html_url": "https://github.com/Amxx",
      "followers_url": "https://api.github.com/users/Amxx/followers",
      "following_url": "https://api.github.com/users/Amxx/following{/other_user}",
      "gists_url": "https://api.github.com/users/Amxx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Amxx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Amxx/subscriptions",
      "organizations_url": "https://api.github.com/users/Amxx/orgs",
      "repos_url": "https://api.github.com/users/Amxx/repos",
      "events_url": "https://api.github.com/users/Amxx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Amxx/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-01-23T14:40:51Z",
    "updated_at": "2023-01-23T14:40:51Z",
    "author_association": "COLLABORATOR",
    "body": "I believed we did miss `super.` in the compatibility version of `propose`\r\n\r\nIts important to notice that `_storeProposal` checks that the data is not written yet before doing the write, so we were not storing twice, and only the first store was recorded (that is the one with the signatures). Still, missing `super.` causes some unecessary operation (mostly one big hash and one sload) that we can easily avoid.\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1400455972/reactions",
      "total_count": 2,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 2,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1400474803",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3881#issuecomment-1400474803",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3881",
    "id": 1400474803,
    "node_id": "IC_kwDOA9tCBs5TeYyz",
    "user": {
      "login": "Amxx",
      "id": 2432299,
      "node_id": "MDQ6VXNlcjI0MzIyOTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2432299?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Amxx",
      "html_url": "https://github.com/Amxx",
      "followers_url": "https://api.github.com/users/Amxx/followers",
      "following_url": "https://api.github.com/users/Amxx/following{/other_user}",
      "gists_url": "https://api.github.com/users/Amxx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Amxx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Amxx/subscriptions",
      "organizations_url": "https://api.github.com/users/Amxx/orgs",
      "repos_url": "https://api.github.com/users/Amxx/repos",
      "events_url": "https://api.github.com/users/Amxx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Amxx/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-01-23T14:47:37Z",
    "updated_at": "2023-01-23T14:48:30Z",
    "author_association": "COLLABORATOR",
    "body": "> It is still an inefficiency that we should remove. I'm wondering if it has any weird interactions with inheritance that we might have to consider.\r\n\r\nI think this is why we have this \"inefficiency\"\r\n\r\nWe want modules that override the core `propose` to have the override triggered by both version of the function. This means we need the \"compatibility\" version to hook into the \"core\" version. If we simplify this workflow (as proposed in #3989) we would possibly have an external propose method that bypasses some overrides.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1400474803/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1406966352",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3881#issuecomment-1406966352",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3881",
    "id": 1406966352,
    "node_id": "IC_kwDOA9tCBs5T3JpQ",
    "user": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-01-27T19:15:46Z",
    "updated_at": "2023-01-27T19:16:01Z",
    "author_association": "MEMBER",
    "body": "After further discussion in https://github.com/OpenZeppelin/openzeppelin-contracts/pull/3989#pullrequestreview-1270311079, we're giving this less priority because it only results in a 1% gas optimization, but are still considering options to make this better.\r\n\r\nThe reason there are two calls to `storeProposal` in the Bravo module is that the first one takes care of storing the `signatures` strings and the second one doesn't know about the signatures (they are converted to function selectors by then). We need both because both functions can be used as entry points, and we need the redundancy to avoid other issues with inheritance.\r\n\r\nOne way I proposed to improve this is to keep `storeProposal` only in propose without signatures, and separately store the signatures in propose with signatures as in:\r\n\r\n```solidity\r\n        uint256 proposalId = propose(targets, values, _encodeCalldata(signatures, calldatas), description);\r\n        _proposalSignatures[proposalId] = signatures;\r\n```\r\n\r\nIf we do this, in `getActions` we need to trim off the function selectors from calldatas where signatures are available.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1406966352/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1407183804",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3881#issuecomment-1407183804",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3881",
    "id": 1407183804,
    "node_id": "IC_kwDOA9tCBs5T3-u8",
    "user": {
      "login": "RitzyDevBox",
      "id": 103006767,
      "node_id": "U_kgDOBiPCLw",
      "avatar_url": "https://avatars.githubusercontent.com/u/103006767?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/RitzyDevBox",
      "html_url": "https://github.com/RitzyDevBox",
      "followers_url": "https://api.github.com/users/RitzyDevBox/followers",
      "following_url": "https://api.github.com/users/RitzyDevBox/following{/other_user}",
      "gists_url": "https://api.github.com/users/RitzyDevBox/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/RitzyDevBox/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/RitzyDevBox/subscriptions",
      "organizations_url": "https://api.github.com/users/RitzyDevBox/orgs",
      "repos_url": "https://api.github.com/users/RitzyDevBox/repos",
      "events_url": "https://api.github.com/users/RitzyDevBox/events{/privacy}",
      "received_events_url": "https://api.github.com/users/RitzyDevBox/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-01-27T23:18:23Z",
    "updated_at": "2023-01-27T23:19:43Z",
    "author_association": "NONE",
    "body": "@frangio cant this just be fixed by calling the super instead?\r\n\r\nfunction propose(\r\n        address[] memory targets,\r\n        uint256[] memory values,\r\n        string[] memory signatures,\r\n        bytes[] memory calldatas,\r\n        string memory description\r\n    ) public virtual override returns (uint256) {\r\n        _storeProposal(_msgSender(), targets, values, signatures, calldatas, description);\r\n        return propose(targets, values, _encodeCalldata(signatures, calldatas), description);\r\n }\r\n\r\nthis line:\r\n    \r\n    return propose(targets, values, _encodeCalldata(signatures, calldatas), description);\r\n\r\ncan change to this:\r\n\r\n    return super.propose(targets, values, _encodeCalldata(signatures, calldatas), description);",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1407183804/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1407489846",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3881#issuecomment-1407489846",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3881",
    "id": 1407489846,
    "node_id": "IC_kwDOA9tCBs5T5Jc2",
    "user": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-01-28T21:15:08Z",
    "updated_at": "2023-01-28T21:15:08Z",
    "author_association": "MEMBER",
    "body": "@RitzyDevBox That's what #3989 proposed. It fixes it at the cost of ignoring \"downstream\" overrides of `propose`. There may be important logic there that will not execute.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1407489846/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1407500194",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3881#issuecomment-1407500194",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3881",
    "id": 1407500194,
    "node_id": "IC_kwDOA9tCBs5T5L-i",
    "user": {
      "login": "RitzyDevBox",
      "id": 103006767,
      "node_id": "U_kgDOBiPCLw",
      "avatar_url": "https://avatars.githubusercontent.com/u/103006767?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/RitzyDevBox",
      "html_url": "https://github.com/RitzyDevBox",
      "followers_url": "https://api.github.com/users/RitzyDevBox/followers",
      "following_url": "https://api.github.com/users/RitzyDevBox/following{/other_user}",
      "gists_url": "https://api.github.com/users/RitzyDevBox/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/RitzyDevBox/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/RitzyDevBox/subscriptions",
      "organizations_url": "https://api.github.com/users/RitzyDevBox/orgs",
      "repos_url": "https://api.github.com/users/RitzyDevBox/repos",
      "events_url": "https://api.github.com/users/RitzyDevBox/events{/privacy}",
      "received_events_url": "https://api.github.com/users/RitzyDevBox/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-01-28T22:19:00Z",
    "updated_at": "2023-01-28T22:19:00Z",
    "author_association": "NONE",
    "body": "@frangio,\r\n\r\nCan you clarify a bit for me,  I haven't played with Diamond pattern inheritance in over a decade.   \r\n\r\nWon't this respect downstream overrides? \r\nits more of the upstream ones that are the problem?\r\n\r\ne.g any situation where the caller does this:\r\n\r\n    function propose(address[] memory targets, uint256[] memory values, bytes[] memory calldatas, string memory description)\r\n        public\r\n        override(Governor, IGovernor) {\r\n        }\r\n\r\nshould be okay since its not overriding `GovenorCompatibilityBravo`  any scenario where the user has to override \r\n\r\n    function propose(address[] memory targets, uint256[] memory values, bytes[] memory calldatas, string memory description)\r\n        public\r\n        override(**GovenorCompatibilityBravo,** Governor, IGovernor) {\r\n        }\r\n\r\nSince the user explicity is specifying `GovenorCompatibilityBravo` Implies a few things to me\r\n\r\n1. We offload the responsibility for them to override both    \r\n2.  The users contract is using `Bravo` so their initial override should be gear'd towards  bravo which by default is the signature parameter one\r\n    ",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1407500194/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1407511008",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3881#issuecomment-1407511008",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3881",
    "id": 1407511008,
    "node_id": "IC_kwDOA9tCBs5T5Ong",
    "user": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-01-28T23:30:12Z",
    "updated_at": "2023-01-28T23:30:12Z",
    "author_association": "MEMBER",
    "body": "> Won't this respect downstream overrides?\r\n> its more of the upstream ones that are the problem?\r\n\r\nI think I meant the same as what you're saying, but upstream is a better word. \"Downstream\" should be defined as the direction of `super`.\r\n\r\n> any situation where the caller does this: [...] should be okay\r\n\r\nNo, it's more complicated. It depends on the order of inheritance, and in a potentially unintuitive way due to the linearization algorithm. We need to avoid designs that change semantics depending on order of inheritance because they are very subtle and easy to miss errors.\r\n\r\nWhat I mean is that if an extension is defined as `GovernorExt is Governor` and it overrides `propose`, then behavior might change for the end user depending on if they write `MyGovernor is GovernorExt, GovernorCompatibilityBravo` or `MyGovernor is GovernorCompatibilityBravo, GovernorExt`.\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1407511008/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1444266396",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3881#issuecomment-1444266396",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3881",
    "id": 1444266396,
    "node_id": "IC_kwDOA9tCBs5WFcGc",
    "user": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-02-24T18:58:46Z",
    "updated_at": "2023-02-24T18:58:46Z",
    "author_association": "MEMBER",
    "body": "Fixed in https://github.com/OpenZeppelin/openzeppelin-contracts/pull/4073.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1444266396/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
