{
  "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2982",
  "repository_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts",
  "labels_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2982/labels{/name}",
  "comments_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2982/comments",
  "events_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2982/events",
  "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2982",
  "id": 1060765948,
  "node_id": "I_kwDOA9tCBs4_OgD8",
  "number": 2982,
  "title": "Help!",
  "user": {
    "login": "suchtisilas",
    "id": 81879178,
    "node_id": "MDQ6VXNlcjgxODc5MTc4",
    "avatar_url": "https://avatars.githubusercontent.com/u/81879178?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/suchtisilas",
    "html_url": "https://github.com/suchtisilas",
    "followers_url": "https://api.github.com/users/suchtisilas/followers",
    "following_url": "https://api.github.com/users/suchtisilas/following{/other_user}",
    "gists_url": "https://api.github.com/users/suchtisilas/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/suchtisilas/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/suchtisilas/subscriptions",
    "organizations_url": "https://api.github.com/users/suchtisilas/orgs",
    "repos_url": "https://api.github.com/users/suchtisilas/repos",
    "events_url": "https://api.github.com/users/suchtisilas/events{/privacy}",
    "received_events_url": "https://api.github.com/users/suchtisilas/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 1,
  "created_at": "2021-11-23T02:03:51Z",
  "updated_at": "2021-11-23T08:14:29Z",
  "closed_at": "2021-11-23T08:14:29Z",
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "Hi, your code is a bit older, but still the only one that looks somehow reliable. In any case, I added your code to my token contract and tried to see if it worked. Unfortunately, it doesn't. Remix gives me an error message\r\n![Screenshot 2021-11-23 025632](https://user-images.githubusercontent.com/81879178/142961039-5e7bbaf9-f874-446e-af90-91423ff4281b.png)\r\n:\r\n\r\nThis is all of my code from my token:\r\n\r\npragma solidity ^0.4.24;\r\n\r\n  /**\r\n   * @dev Transfer tokens to a specified address after diverting a fee to a central account.\r\n   * @param _to The receiving address.\r\n   * @param _value The number of tokens to transfer.\r\n   */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n    require(_value % (uint256(10) ** decimals) == 0);\r\n\r\n    uint fee = SafeMath.div(SafeMath.mul(_value, transferFeePercentage), 100);\r\n    uint taxedValue = SafeMath.sub(_value, fee);\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = SafeMath.sub(balances[msg.sender], _value);\r\n\r\n    balances[_to] = SafeMath.add(balances[_to], taxedValue);\r\n    Transfer(msg.sender, _to, taxedValue);\r\n    balances[feeAccount] = SafeMath.add(balances[feeAccount], fee);\r\n    Transfer(msg.sender, feeAccount, fee);\r\n\r\n    return true;\r\n  }\r\n\r\n// ----------------------------------------------------------------------------\r\n// Sample token contract\r\n//\r\n// Symbol        : RIP\r\n// Name          : Ripton\r\n// Total supply  : 1000000\r\n// Decimals      : 3\r\n// Owner Account : 0x11a2eeaa5Df6293629b97a9F30679F1648996BC3\r\n//\r\n// Enjoy.\r\n//\r\n// (c) by Juan Cruz Martinez 2020. MIT Licence.\r\n// ----------------------------------------------------------------------------\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n// Lib: Safe Math\r\n// ----------------------------------------------------------------------------\r\ncontract SafeMath {\r\n\r\n    function safeAdd(uint a, uint b) public pure returns (uint c) {\r\n        c = a + b;\r\n        require(c >= a);\r\n    }\r\n\r\n    function safeSub(uint a, uint b) public pure returns (uint c) {\r\n        require(b <= a);\r\n        c = a - b;\r\n    }\r\n\r\n    function safeMul(uint a, uint b) public pure returns (uint c) {\r\n        c = a * b;\r\n        require(a == 0 || c / a == b);\r\n    }\r\n\r\n    function safeDiv(uint a, uint b) public pure returns (uint c) {\r\n        require(b > 0);\r\n        c = a / b;\r\n    }\r\n}\r\n\r\n\r\n/**\r\nERC Token Standard #20 Interface\r\nhttps://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\r\n*/\r\ncontract ERC20Interface {\r\n    function totalSupply() public constant returns (uint);\r\n    function balanceOf(address tokenOwner) public constant returns (uint balance);\r\n    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\r\n    function transfer(address to, uint tokens) public returns (bool success);\r\n    function approve(address spender, uint tokens) public returns (bool success);\r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint tokens);\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n}\r\n\r\n\r\n/**\r\nContract function to receive approval and execute function in one call\r\n\r\nBorrowed from MiniMeToken\r\n*/\r\ncontract ApproveAndCallFallBack {\r\n    function receiveApproval(address from, uint256 tokens, address token, bytes data) public;\r\n}\r\n\r\n/**\r\nERC20 Token, with the addition of symbol, name and decimals and assisted token transfers\r\n*/\r\ncontract LCSTToken is ERC20Interface, SafeMath {\r\n    string public symbol;\r\n    string public  name;\r\n    uint8 public decimals;\r\n    uint public _totalSupply;\r\n\r\n    mapping(address => uint) balances;\r\n    mapping(address => mapping(address => uint)) allowed;\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Constructor\r\n    // ------------------------------------------------------------------------\r\n    constructor() public {\r\n        symbol = \"RIP\";\r\n        name = \"Ripton\";\r\n        decimals = 3;\r\n        _totalSupply = 1000000000;\r\n        balances[0x11a2eeaa5Df6293629b97a9F30679F1648996BC3] = _totalSupply;\r\n        emit Transfer(address(0), 0x11a2eeaa5Df6293629b97a9F30679F1648996BC3, _totalSupply);\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Total supply\r\n    // ------------------------------------------------------------------------\r\n    function totalSupply() public constant returns (uint) {\r\n        return _totalSupply  - balances[address(0)];\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Get the token balance for account tokenOwner\r\n    // ------------------------------------------------------------------------\r\n    function balanceOf(address tokenOwner) public constant returns (uint balance) {\r\n        return balances[tokenOwner];\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Transfer the balance from token owner's account to to account\r\n    // - Owner's account must have sufficient balance to transfer\r\n    // - 0 value transfers are allowed\r\n    // ------------------------------------------------------------------------\r\n    function transfer(address to, uint tokens) public returns (bool success) {\r\n        balances[msg.sender] = safeSub(balances[msg.sender], tokens);\r\n        balances[to] = safeAdd(balances[to], tokens);\r\n        emit Transfer(msg.sender, to, tokens);\r\n        return true;\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Token owner can approve for spender to transferFrom(...) tokens\r\n    // from the token owner's account\r\n    //\r\n    // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\r\n    // recommends that there are no checks for the approval double-spend attack\r\n    // as this should be implemented in user interfaces \r\n    // ------------------------------------------------------------------------\r\n    function approve(address spender, uint tokens) public returns (bool success) {\r\n        allowed[msg.sender][spender] = tokens;\r\n        emit Approval(msg.sender, spender, tokens);\r\n        return true;\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Transfer tokens from the from account to the to account\r\n    // \r\n    // The calling account must already have sufficient tokens approve(...)-d\r\n    // for spending from the from account and\r\n    // - From account must have sufficient balance to transfer\r\n    // - Spender must have sufficient allowance to transfer\r\n    // - 0 value transfers are allowed\r\n    // ------------------------------------------------------------------------\r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success) {\r\n        balances[from] = safeSub(balances[from], tokens);\r\n        allowed[from][msg.sender] = safeSub(allowed[from][msg.sender], tokens);\r\n        balances[to] = safeAdd(balances[to], tokens);\r\n        emit Transfer(from, to, tokens);\r\n        return true;\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Returns the amount of tokens approved by the owner that can be\r\n    // transferred to the spender's account\r\n    // ------------------------------------------------------------------------\r\n    function allowance(address tokenOwner, address spender) public constant returns (uint remaining) {\r\n        return allowed[tokenOwner][spender];\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Token owner can approve for spender to transferFrom(...) tokens\r\n    // from the token owner's account. The spender contract function\r\n    // receiveApproval(...) is then executed\r\n    // ------------------------------------------------------------------------\r\n    function approveAndCall(address spender, uint tokens, bytes data) public returns (bool success) {\r\n        allowed[msg.sender][spender] = tokens;\r\n        emit Approval(msg.sender, spender, tokens);\r\n        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, this, data);\r\n        return true;\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Don't accept ETH\r\n    // ------------------------------------------------------------------------\r\n    function () public payable {\r\n        revert();\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\nI hope you can help me, have a nice day!",
  "closed_by": {
    "login": "Amxx",
    "id": 2432299,
    "node_id": "MDQ6VXNlcjI0MzIyOTk=",
    "avatar_url": "https://avatars.githubusercontent.com/u/2432299?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/Amxx",
    "html_url": "https://github.com/Amxx",
    "followers_url": "https://api.github.com/users/Amxx/followers",
    "following_url": "https://api.github.com/users/Amxx/following{/other_user}",
    "gists_url": "https://api.github.com/users/Amxx/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/Amxx/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/Amxx/subscriptions",
    "organizations_url": "https://api.github.com/users/Amxx/orgs",
    "repos_url": "https://api.github.com/users/Amxx/repos",
    "events_url": "https://api.github.com/users/Amxx/events{/privacy}",
    "received_events_url": "https://api.github.com/users/Amxx/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2982/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2982/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/976245026",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2982#issuecomment-976245026",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2982",
    "id": 976245026,
    "node_id": "IC_kwDOA9tCBs46MFEi",
    "user": {
      "login": "Amxx",
      "id": 2432299,
      "node_id": "MDQ6VXNlcjI0MzIyOTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2432299?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Amxx",
      "html_url": "https://github.com/Amxx",
      "followers_url": "https://api.github.com/users/Amxx/followers",
      "following_url": "https://api.github.com/users/Amxx/following{/other_user}",
      "gists_url": "https://api.github.com/users/Amxx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Amxx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Amxx/subscriptions",
      "organizations_url": "https://api.github.com/users/Amxx/orgs",
      "repos_url": "https://api.github.com/users/Amxx/repos",
      "events_url": "https://api.github.com/users/Amxx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Amxx/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-11-23T08:14:26Z",
    "updated_at": "2021-11-23T08:14:26Z",
    "author_association": "COLLABORATOR",
    "body": "Hello @suchtisilas \r\n\r\nFor this kind of request, you should head to the [forum](forum.openzeppelin.com/).\r\n\r\nAlso, you'll have to find a better title than this. One that actually describes your issue. [Checkout this post to maximize your chances of getting an effective answer](https://forum.openzeppelin.com/t/how-do-i-ask-a-good-question/9375)",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/976245026/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
