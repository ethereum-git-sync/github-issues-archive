{
  "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3912",
  "repository_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts",
  "labels_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3912/labels{/name}",
  "comments_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3912/comments",
  "events_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3912/events",
  "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3912",
  "id": 1516532080,
  "node_id": "I_kwDOA9tCBs5aZHFw",
  "number": 3912,
  "title": "Add strict ERC1271 Signature Checking in SignatureChecker library",
  "user": {
    "login": "YamenMerhi",
    "id": 86341666,
    "node_id": "MDQ6VXNlcjg2MzQxNjY2",
    "avatar_url": "https://avatars.githubusercontent.com/u/86341666?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/YamenMerhi",
    "html_url": "https://github.com/YamenMerhi",
    "followers_url": "https://api.github.com/users/YamenMerhi/followers",
    "following_url": "https://api.github.com/users/YamenMerhi/following{/other_user}",
    "gists_url": "https://api.github.com/users/YamenMerhi/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/YamenMerhi/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/YamenMerhi/subscriptions",
    "organizations_url": "https://api.github.com/users/YamenMerhi/orgs",
    "repos_url": "https://api.github.com/users/YamenMerhi/repos",
    "events_url": "https://api.github.com/users/YamenMerhi/events{/privacy}",
    "received_events_url": "https://api.github.com/users/YamenMerhi/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 503650966,
      "node_id": "MDU6TGFiZWw1MDM2NTA5NjY=",
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/labels/good%20first%20issue",
      "name": "good first issue",
      "color": "0e8a16",
      "default": true,
      "description": "Low hanging fruit for new contributors to get involved!"
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 7,
  "created_at": "2023-01-02T16:02:52Z",
  "updated_at": "2023-02-21T15:16:46Z",
  "closed_at": "2023-02-21T15:16:46Z",
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "### 🧐 Motivation\r\nIn the current `SignatureChecker` library, there is support to check if a signature is valid with the `isValidSignatureNow(..)` function that checks the following:\r\n- If the `hash` and `signature` recover an address that is the same as the `signer`, it returns true.\r\n- When it's not the case, it calls `isValidSignature(..)` on the `signer` assuming it's a contract. \r\n\r\nWhat would be a great addition to the library is to have another internal function that checks if a signature is valid with **ERC1271** only. So calling `isValidSignature(..)` directly on the signer. \r\n\r\nThis function will be useful for functions that want to check the signature **only via ERC1271**. Then this internal function can be re-used in `isValidSignatureNow(..)`.\r\n\r\n### 📝 Details\r\n\r\nThe only thing that I would argue is that the newly created internal function, e.g `isValidERC1271SignatureNow(..)` should return the standard 4 bytes that will be returned by the function in case it's there, and if the function doesn't exist we can return the `0xffffffff` fail value.\r\n\r\n```solidity\r\nfunction isValidERC1271SignatureNow(address contract, bytes32 dataHash, bytes memory signature) public view returns (bytes4) {\r\n\r\n      (bool success, bytes memory result) = contract.staticcall(\r\n            abi.encodeWithSelector(IERC1271.isValidSignature.selector, hash, signature)\r\n        );\r\n  \r\n         if (success) return result.length != 0 ? abi.decode(result, (bytes4)) : bytes4(0xffffffff);\r\n         else return 0xffffffff;\r\n}\r\n```\r\n> Code might not be working, just drafting the concept \r\n\r\nIn this way, people can use directly in isValidSignature standard function:\r\n\r\n```solidity\r\nfunction isValidSignature(bytes32 dataHash, bytes memory signature) public view returns (bytes4) {\r\n        address _extensionContract = extension1271();  \r\n        return SignatureChecker.isValidERC1271SignatureNow(_extensionContract, dataHash, signature);\r\n}\r\n```\r\n\r\ninstead of having the following:\r\n\r\n```solidity\r\nfunction isValidERC1271SignatureNow(address contract, bytes32 dataHash, bytes memory signature) public view returns (bool) {\r\n  \r\n        (bool success, bytes memory result) = signer.staticcall(\r\n            abi.encodeWithSelector(IERC1271.isValidSignature.selector, hash, signature)\r\n        );\r\n        return (success &&\r\n            result.length == 32 &&\r\n            abi.decode(result, (bytes32)) == bytes32(IERC1271.isValidSignature.selector));\r\n}\r\n```\r\n\r\nIn this way, people are doing the work twice in the standard function:\r\n\r\n```solidity\r\nfunction isValidSignature(bytes32 dataHash, bytes memory signature) public view returns (bytes4) {\r\n        address _extensionContract = extension1271();  \r\n        bool validSig = SignatureChecker.isValidERC1271SignatureNow(_extensionContract, dataHash, signature);\r\n        if(validSig) return 0x1626ba7e; // IERC1271.isValidSignature.selector\r\n        else return 0xffffffff; \r\n}\r\n```\r\n\r\nThe code above is doing the work twice, first in `isValidERC1271SignatureNow`, we are comparing the `returnValue` to return a boolean, and then in `isValidSignature(..)` we are checking the boolean again to return the bytes4 value.\r\n\r\n\r\nThis function will be mainly used for signature checking related to ERC1271, if you think this issue is relevant, let's discuss.\r\n",
  "closed_by": {
    "login": "frangio",
    "id": 481465,
    "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
    "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/frangio",
    "html_url": "https://github.com/frangio",
    "followers_url": "https://api.github.com/users/frangio/followers",
    "following_url": "https://api.github.com/users/frangio/following{/other_user}",
    "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
    "organizations_url": "https://api.github.com/users/frangio/orgs",
    "repos_url": "https://api.github.com/users/frangio/repos",
    "events_url": "https://api.github.com/users/frangio/events{/privacy}",
    "received_events_url": "https://api.github.com/users/frangio/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3912/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3912/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1369205965",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3912#issuecomment-1369205965",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3912",
    "id": 1369205965,
    "node_id": "IC_kwDOA9tCBs5RnGzN",
    "user": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-01-02T21:09:36Z",
    "updated_at": "2023-01-02T21:09:36Z",
    "author_association": "MEMBER",
    "body": "I'm confused by the code snippets, what is `extension1271`?\r\n\r\nIf someone is only interested in 1271 signatures, why not directly call `isValidSignature`?",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1369205965/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1369553057",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3912#issuecomment-1369553057",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3912",
    "id": 1369553057,
    "node_id": "IC_kwDOA9tCBs5Robih",
    "user": {
      "login": "YamenMerhi",
      "id": 86341666,
      "node_id": "MDQ6VXNlcjg2MzQxNjY2",
      "avatar_url": "https://avatars.githubusercontent.com/u/86341666?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/YamenMerhi",
      "html_url": "https://github.com/YamenMerhi",
      "followers_url": "https://api.github.com/users/YamenMerhi/followers",
      "following_url": "https://api.github.com/users/YamenMerhi/following{/other_user}",
      "gists_url": "https://api.github.com/users/YamenMerhi/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/YamenMerhi/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/YamenMerhi/subscriptions",
      "organizations_url": "https://api.github.com/users/YamenMerhi/orgs",
      "repos_url": "https://api.github.com/users/YamenMerhi/repos",
      "events_url": "https://api.github.com/users/YamenMerhi/events{/privacy}",
      "received_events_url": "https://api.github.com/users/YamenMerhi/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-01-03T09:31:48Z",
    "updated_at": "2023-01-03T09:31:48Z",
    "author_association": "CONTRIBUTOR",
    "body": "Sorry @frangio , my code snippets confused you, the whole idea is to have an internal function that:\r\n- Calls `isValidSignature(..)` on an address with a staticcall.\r\n- Return the `isValidSignature(..)` return value in case the function exists.\r\n-  Return `0xffffffff` in case the function doesn't exist or the fallback function is/isn't existing.\r\n\r\nIn this way, people can use it without having to do the low-level call again and handle the return value so it doesn't revert if the function doesn't exist.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1369553057/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1369854420",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3912#issuecomment-1369854420",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3912",
    "id": 1369854420,
    "node_id": "IC_kwDOA9tCBs5RplHU",
    "user": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-01-03T14:49:56Z",
    "updated_at": "2023-01-03T14:51:53Z",
    "author_association": "MEMBER",
    "body": "> so it doesn't revert if the function doesn't exist.\r\n\r\nGot it, this makes sense.\r\n\r\nI'm less sure about the proposed return values. Why shouldn't we just return a boolean?",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1369854420/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1370000714",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3912#issuecomment-1370000714",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3912",
    "id": 1370000714,
    "node_id": "IC_kwDOA9tCBs5RqI1K",
    "user": {
      "login": "Amxx",
      "id": 2432299,
      "node_id": "MDQ6VXNlcjI0MzIyOTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2432299?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Amxx",
      "html_url": "https://github.com/Amxx",
      "followers_url": "https://api.github.com/users/Amxx/followers",
      "following_url": "https://api.github.com/users/Amxx/following{/other_user}",
      "gists_url": "https://api.github.com/users/Amxx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Amxx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Amxx/subscriptions",
      "organizations_url": "https://api.github.com/users/Amxx/orgs",
      "repos_url": "https://api.github.com/users/Amxx/repos",
      "events_url": "https://api.github.com/users/Amxx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Amxx/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-01-03T16:55:23Z",
    "updated_at": "2023-01-03T16:56:44Z",
    "author_association": "COLLABORATOR",
    "body": "I also think this should return a boolean.\r\n\r\n```\r\nfunction isValidERC1271SignatureNow(address signer, bytes32 dataHash, bytes memory signature) public view returns (bool) {\r\n  \r\n        (bool success, bytes memory result) = signer.staticcall(\r\n            abi.encodeWithSelector(IERC1271.isValidSignature.selector, hash, signature)\r\n        );\r\n        return (success &&\r\n            result.length == 32 &&\r\n            abi.decode(result, (bytes32)) == bytes32(IERC1271.isValidSignature.selector));\r\n}\r\n```\r\nlooks good to me.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1370000714/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1370062904",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3912#issuecomment-1370062904",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3912",
    "id": 1370062904,
    "node_id": "IC_kwDOA9tCBs5RqYA4",
    "user": {
      "login": "YamenMerhi",
      "id": 86341666,
      "node_id": "MDQ6VXNlcjg2MzQxNjY2",
      "avatar_url": "https://avatars.githubusercontent.com/u/86341666?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/YamenMerhi",
      "html_url": "https://github.com/YamenMerhi",
      "followers_url": "https://api.github.com/users/YamenMerhi/followers",
      "following_url": "https://api.github.com/users/YamenMerhi/following{/other_user}",
      "gists_url": "https://api.github.com/users/YamenMerhi/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/YamenMerhi/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/YamenMerhi/subscriptions",
      "organizations_url": "https://api.github.com/users/YamenMerhi/orgs",
      "repos_url": "https://api.github.com/users/YamenMerhi/repos",
      "events_url": "https://api.github.com/users/YamenMerhi/events{/privacy}",
      "received_events_url": "https://api.github.com/users/YamenMerhi/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-01-03T17:54:47Z",
    "updated_at": "2023-01-03T17:54:47Z",
    "author_association": "CONTRIBUTOR",
    "body": "@frangio @Amxx You're right, I was wrong about the return value, it's better to keep it as a boolean.\r\nIf you agree about this function add, I can create the PR 👍 ",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1370062904/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1399358355",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3912#issuecomment-1399358355",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3912",
    "id": 1399358355,
    "node_id": "IC_kwDOA9tCBs5TaIOT",
    "user": {
      "login": "Zatacka",
      "id": 92071327,
      "node_id": "U_kgDOBXzlnw",
      "avatar_url": "https://avatars.githubusercontent.com/u/92071327?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Zatacka",
      "html_url": "https://github.com/Zatacka",
      "followers_url": "https://api.github.com/users/Zatacka/followers",
      "following_url": "https://api.github.com/users/Zatacka/following{/other_user}",
      "gists_url": "https://api.github.com/users/Zatacka/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Zatacka/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Zatacka/subscriptions",
      "organizations_url": "https://api.github.com/users/Zatacka/orgs",
      "repos_url": "https://api.github.com/users/Zatacka/repos",
      "events_url": "https://api.github.com/users/Zatacka/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Zatacka/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-01-21T23:44:06Z",
    "updated_at": "2023-01-21T23:44:06Z",
    "author_association": "NONE",
    "body": "is still dont understand what` extension1271` is?",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1399358355/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1399430154",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3912#issuecomment-1399430154",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3912",
    "id": 1399430154,
    "node_id": "IC_kwDOA9tCBs5TaZwK",
    "user": {
      "login": "YamenMerhi",
      "id": 86341666,
      "node_id": "MDQ6VXNlcjg2MzQxNjY2",
      "avatar_url": "https://avatars.githubusercontent.com/u/86341666?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/YamenMerhi",
      "html_url": "https://github.com/YamenMerhi",
      "followers_url": "https://api.github.com/users/YamenMerhi/followers",
      "following_url": "https://api.github.com/users/YamenMerhi/following{/other_user}",
      "gists_url": "https://api.github.com/users/YamenMerhi/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/YamenMerhi/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/YamenMerhi/subscriptions",
      "organizations_url": "https://api.github.com/users/YamenMerhi/orgs",
      "repos_url": "https://api.github.com/users/YamenMerhi/repos",
      "events_url": "https://api.github.com/users/YamenMerhi/events{/privacy}",
      "received_events_url": "https://api.github.com/users/YamenMerhi/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-01-22T08:33:05Z",
    "updated_at": "2023-01-22T08:33:05Z",
    "author_association": "CONTRIBUTOR",
    "body": "@Zatacka It was just an example to showcase how `isValidERC1271SignatureNow(..)` can be used:\r\n- In some cases, you may need to call `isValidSignature(..)` on a contract. Making `IERC1271(signer).isValidSignature(..)` is not ideal as you want to track the return value, and see if the call reverts or not, and if the contract has a fallback function it will not revert but will not return the magic or fail value.\r\n\r\nSo instead of doing all of these checks, they could be provided by `isValidERC1271SignatureNow(..)` that will return true if the function return the magicValue, and false if all the other scenarios happens.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1399430154/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
