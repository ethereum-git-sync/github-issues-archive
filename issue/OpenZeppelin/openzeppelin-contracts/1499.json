{
  "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1499",
  "repository_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts",
  "labels_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1499/labels{/name}",
  "comments_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1499/comments",
  "events_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1499/events",
  "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1499",
  "id": 380597740,
  "node_id": "MDU6SXNzdWUzODA1OTc3NDA=",
  "number": 1499,
  "title": "Upgradable ERC20",
  "user": {
    "login": "barakman",
    "id": 7003246,
    "node_id": "MDQ6VXNlcjcwMDMyNDY=",
    "avatar_url": "https://avatars.githubusercontent.com/u/7003246?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/barakman",
    "html_url": "https://github.com/barakman",
    "followers_url": "https://api.github.com/users/barakman/followers",
    "following_url": "https://api.github.com/users/barakman/following{/other_user}",
    "gists_url": "https://api.github.com/users/barakman/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/barakman/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/barakman/subscriptions",
    "organizations_url": "https://api.github.com/users/barakman/orgs",
    "repos_url": "https://api.github.com/users/barakman/repos",
    "events_url": "https://api.github.com/users/barakman/events{/privacy}",
    "received_events_url": "https://api.github.com/users/barakman/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 8,
  "created_at": "2018-11-14T09:02:51Z",
  "updated_at": "2021-11-26T22:18:17Z",
  "closed_at": "2021-11-26T22:16:18Z",
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "**üßê Motivation**\r\n\r\nWe have a contract which inherits from `ERC20`, let's call it `MyToken`.\r\nWe need to allow ourselves to upgrade this contract in the future.\r\nDue to the nature of `ERC20`, we cannot simply replace the `MyToken` instance with a new instance.\r\nThat would require pausing all functionalities and migrating all data (`_balances`, `_totalSupply`, etc).\r\nFurthermore, it would wreck any promise for transparency, as we would have the power to delete all funds in an instant.\r\n\r\n**üìù Details**\r\n\r\nIdeally, we would like to do this as follows:\r\n1. In `MyToken`, override each one of the main `ERC20` functions (`transfer` and `transferFrom`) to simply call its correspondent function in `MyTokenImpl`, and pass `msg.sender` to it as an additional argument.\r\n2. In `MyTokenImpl`, in each function, call back a function in `MyToken` to perform the desired action.\r\n\r\nFor example:\r\n```\r\ninterface IMyToken {\r\n    function transferCallback(address from, address to, uint256 value) public;\r\n    function transferFromCallback(address sender, address from, address to, uint256 value) public;\r\n}\r\n\r\ninterface IMyTokenImpl {\r\n    function transfer(address sender, address to, uint256 value) public returns (bool);\r\n    function transferFrom(address sender, address from, address to, uint256 value) public returns (bool);\r\n}\r\n\r\ncontract MyToken is IMyToken, ERC20, Ownable {\r\n    IMyTokenImpl private pMyTokenImpl;\r\n    function upgrade(IMyTokenImpl _pMyTokenImpl) public onlyOwner {\r\n        pMyTokenImpl = _pMyTokenImpl;\r\n    }\r\n    function transfer(address to, uint256 value) public returns (bool) {\r\n        return pMyTokenImpl.transfer(msg.sender, to, value);\r\n    }\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\r\n        return pMyTokenImpl.transferFrom(msg.sender, from, to, value);\r\n    }\r\n    function transferCallback(address from, address to, uint256 value) public {\r\n        require(msg.sender == address(pMyTokenImpl));\r\n        _transfer(from, to, value);\r\n    }\r\n    function transferFromCallback(address sender, address from, address to, uint256 value) public {\r\n        require(msg.sender == address(pMyTokenImpl));\r\n        _allowed[from][sender] = _allowed[from][sender].sub(value);\r\n        _transfer(from, to, value);\r\n    }\r\n}\r\n\r\ncontract MyTokenImpl is IMyTokenImpl {\r\n    IMyToken private pMyToken;\r\n    constructor(IMyToken _pMyToken) public {\r\n        pMyToken = _pMyToken;\r\n    }\r\n    function transfer(address sender, address to, uint256 value) public returns (bool) {\r\n        require(msg.sender == address(pMyToken));\r\n        pMyToken.transferCallback(sender, to, value);\r\n    }\r\n    function transferFrom(address sender, address from, address to, uint256 value) public returns (bool) {\r\n        require(msg.sender == address(pMyToken));\r\n        pMyToken.transferFromCallback(sender, from, to, value);\r\n    }\r\n}\r\n```\r\nAs you might understand, the problem is in:\r\n```\r\n_allowed[from][sender] = _allowed[from][sender].sub(value);\r\n```\r\nThis is because the access-level of variable `_allowed` is `private`.\r\n\r\nWould you be able to provide an `internal` function (similar to function `_transfer`, for example) to execute this line?\r\n\r\nFor example:\r\n```\r\nfunction _prohibit(address from, address to, uint256 value) internal {\r\n    _allowed[from][to] = _allowed[from][to].sub(value);\r\n}\r\n```\r\n\r\nMinor: by then, you may as well call it from function `transferFrom`.\r\n\r\nThanks",
  "closed_by": {
    "login": "frangio",
    "id": 481465,
    "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
    "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/frangio",
    "html_url": "https://github.com/frangio",
    "followers_url": "https://api.github.com/users/frangio/followers",
    "following_url": "https://api.github.com/users/frangio/following{/other_user}",
    "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
    "organizations_url": "https://api.github.com/users/frangio/orgs",
    "repos_url": "https://api.github.com/users/frangio/repos",
    "events_url": "https://api.github.com/users/frangio/events{/privacy}",
    "received_events_url": "https://api.github.com/users/frangio/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1499/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1499/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/440424627",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1499#issuecomment-440424627",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1499",
    "id": 440424627,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0MDQyNDYyNw==",
    "user": {
      "login": "nventuro",
      "id": 2530770,
      "node_id": "MDQ6VXNlcjI1MzA3NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2530770?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nventuro",
      "html_url": "https://github.com/nventuro",
      "followers_url": "https://api.github.com/users/nventuro/followers",
      "following_url": "https://api.github.com/users/nventuro/following{/other_user}",
      "gists_url": "https://api.github.com/users/nventuro/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nventuro/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nventuro/subscriptions",
      "organizations_url": "https://api.github.com/users/nventuro/orgs",
      "repos_url": "https://api.github.com/users/nventuro/repos",
      "events_url": "https://api.github.com/users/nventuro/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nventuro/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-20T20:50:00Z",
    "updated_at": "2018-11-20T20:50:00Z",
    "author_association": "CONTRIBUTOR",
    "body": "Hi again @barakman!\r\n\r\nWhat you're describing is one of the standard ways of implementing upgradeability. While we're considering adding that `internal` function, have you looked into off-the-shelf upgradeability solutions, such as [ZeppelinOS](https://zeppelinos.org/)? Upgradeability can be quite tricky, and it looks like you may be reinventing the wheel a bit in this case.\r\n\r\nAs a sidenote, the reason `_transfer` exists is not to encourage these sorts of mechanisms, but to allow for derived contracts to easily and safely manage balances (if needed).",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/440424627/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/440672990",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1499#issuecomment-440672990",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1499",
    "id": 440672990,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0MDY3Mjk5MA==",
    "user": {
      "login": "barakman",
      "id": 7003246,
      "node_id": "MDQ6VXNlcjcwMDMyNDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7003246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/barakman",
      "html_url": "https://github.com/barakman",
      "followers_url": "https://api.github.com/users/barakman/followers",
      "following_url": "https://api.github.com/users/barakman/following{/other_user}",
      "gists_url": "https://api.github.com/users/barakman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/barakman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/barakman/subscriptions",
      "organizations_url": "https://api.github.com/users/barakman/orgs",
      "repos_url": "https://api.github.com/users/barakman/repos",
      "events_url": "https://api.github.com/users/barakman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/barakman/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-21T14:05:42Z",
    "updated_at": "2018-11-21T14:05:42Z",
    "author_association": "CONTRIBUTOR",
    "body": "@nventuro: Hi.\r\n\r\nWe have already established a very simple infrastructure which allows us to:\r\n1. Restrict certain functions to certain contracts (e.g., function `func` in contract `A` can be invoked only from contract `B`).\r\n2. Execute a partial or full system-upgrade (i.e., replace some or all contracts) as an atomic operation, while each contract remains \"oblivious\" to the replacement of any other contract in the system.\r\n\r\nAs I said, this infrastructure is very simple and small, which gives us better confidence of robustness and security, so we'd like to keep it this way (I can share if needed).\r\n\r\nIn any case, the only problem remaining is, that if we replace the ERC20 contract itself (with which users interact when they buy or sell tokens), then we need to declare the new contract address to the world.\r\nThis would be equivalent to a *Fork* on our system, and we'd like to avoid it as much as possible.\r\n\r\nHence, we've decided to split it into two contracts:\r\n1. The ERC20 contract itself (our user-interface), which contains as little logic as possible.\r\n2. A contract which implements each one of the supported operations, which we can replace without having to re-announce an entry point (i.e., a new contract address).\r\n\r\nThe replacement will be done via the mechanism that I have described above (i.e., system-upgrade).\r\nOf course, this mechanism also allows us to replace the ERC20 contract itself if needed, but as I said, we'd like to minimize the chance of it ever happening.\r\n\r\nThanks",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/440672990/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/440684068",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1499#issuecomment-440684068",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1499",
    "id": 440684068,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0MDY4NDA2OA==",
    "user": {
      "login": "spalladino",
      "id": 429604,
      "node_id": "MDQ6VXNlcjQyOTYwNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/429604?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/spalladino",
      "html_url": "https://github.com/spalladino",
      "followers_url": "https://api.github.com/users/spalladino/followers",
      "following_url": "https://api.github.com/users/spalladino/following{/other_user}",
      "gists_url": "https://api.github.com/users/spalladino/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/spalladino/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/spalladino/subscriptions",
      "organizations_url": "https://api.github.com/users/spalladino/orgs",
      "repos_url": "https://api.github.com/users/spalladino/repos",
      "events_url": "https://api.github.com/users/spalladino/events{/privacy}",
      "received_events_url": "https://api.github.com/users/spalladino/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-21T14:37:25Z",
    "updated_at": "2018-11-21T14:37:25Z",
    "author_association": "CONTRIBUTOR",
    "body": "Hey @barakman! What you are implementing is quite similar to what we're doing with upgradeability in ZeppelinOS: we have a proxy contract (equivalent to your `MyToken`) that holds the balances of the users, and whose address will never change (so end users can interact always with the same address). That proxy delegates execution to an ERC20 implementation (`MyTokenImpl` in your case). Do you mind checking out [our docs](https://docs.zeppelinos.org/docs/deploying.html), to see if it fits your needs? I think it may be a more robust solution than an ad-hoc token wrapper.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/440684068/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/440687185",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1499#issuecomment-440687185",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1499",
    "id": 440687185,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0MDY4NzE4NQ==",
    "user": {
      "login": "barakman",
      "id": 7003246,
      "node_id": "MDQ6VXNlcjcwMDMyNDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7003246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/barakman",
      "html_url": "https://github.com/barakman",
      "followers_url": "https://api.github.com/users/barakman/followers",
      "following_url": "https://api.github.com/users/barakman/following{/other_user}",
      "gists_url": "https://api.github.com/users/barakman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/barakman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/barakman/subscriptions",
      "organizations_url": "https://api.github.com/users/barakman/orgs",
      "repos_url": "https://api.github.com/users/barakman/repos",
      "events_url": "https://api.github.com/users/barakman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/barakman/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-21T14:44:26Z",
    "updated_at": "2018-11-21T14:44:26Z",
    "author_association": "CONTRIBUTOR",
    "body": "@spalladino:\r\nThank you for your quick response.\r\nCan you please provide a link directly to the source code on GitHub?\r\nThanks",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/440687185/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/440696656",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1499#issuecomment-440696656",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1499",
    "id": 440696656,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0MDY5NjY1Ng==",
    "user": {
      "login": "spalladino",
      "id": 429604,
      "node_id": "MDQ6VXNlcjQyOTYwNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/429604?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/spalladino",
      "html_url": "https://github.com/spalladino",
      "followers_url": "https://api.github.com/users/spalladino/followers",
      "following_url": "https://api.github.com/users/spalladino/following{/other_user}",
      "gists_url": "https://api.github.com/users/spalladino/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/spalladino/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/spalladino/subscriptions",
      "organizations_url": "https://api.github.com/users/spalladino/orgs",
      "repos_url": "https://api.github.com/users/spalladino/repos",
      "events_url": "https://api.github.com/users/spalladino/events{/privacy}",
      "received_events_url": "https://api.github.com/users/spalladino/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-21T15:06:30Z",
    "updated_at": "2018-11-21T15:06:30Z",
    "author_association": "CONTRIBUTOR",
    "body": "Sure! It's on https://github.com/zeppelinos/zos",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/440696656/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/440712978",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1499#issuecomment-440712978",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1499",
    "id": 440712978,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0MDcxMjk3OA==",
    "user": {
      "login": "barakman",
      "id": 7003246,
      "node_id": "MDQ6VXNlcjcwMDMyNDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7003246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/barakman",
      "html_url": "https://github.com/barakman",
      "followers_url": "https://api.github.com/users/barakman/followers",
      "following_url": "https://api.github.com/users/barakman/following{/other_user}",
      "gists_url": "https://api.github.com/users/barakman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/barakman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/barakman/subscriptions",
      "organizations_url": "https://api.github.com/users/barakman/orgs",
      "repos_url": "https://api.github.com/users/barakman/repos",
      "events_url": "https://api.github.com/users/barakman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/barakman/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-21T15:46:34Z",
    "updated_at": "2018-11-21T15:46:34Z",
    "author_association": "CONTRIBUTOR",
    "body": "@spalladino:\r\nThank you!\r\n\r\nOn a quick glance, I see numerous contracts and a rather large amount of code in general.\r\nOur upgradability infrastructure consists of only 3 contracts and just a handful of code lines.\r\nSo between the accountability of your infrastructure (tested and reviewed by the community) and the simplicity of ours, I currently tend to go with the latter.\r\n\r\nHaving said that, we are just at the beginning of an audit procedure with several providers, so I'll stand await for any suggestions that they may have.\r\nWe have already been advised to use OZ via `npm install` (instead of locally), and to upgrade from v1.12.0 to v2.0.0 (a day after it was officially released!), so I'm assuming that these auditers are aware of the alternatives (and aware of OZ in general).\r\n\r\nHaving said that 2, is there a one-to-one equivalence of my coding example above, that you can refer me to?\r\nIn other words, do you have a pair of contracts splitting an ERC20 contract into data and logic?\r\nThanks",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/440712978/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/440714206",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1499#issuecomment-440714206",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1499",
    "id": 440714206,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0MDcxNDIwNg==",
    "user": {
      "login": "spalladino",
      "id": 429604,
      "node_id": "MDQ6VXNlcjQyOTYwNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/429604?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/spalladino",
      "html_url": "https://github.com/spalladino",
      "followers_url": "https://api.github.com/users/spalladino/followers",
      "following_url": "https://api.github.com/users/spalladino/following{/other_user}",
      "gists_url": "https://api.github.com/users/spalladino/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/spalladino/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/spalladino/subscriptions",
      "organizations_url": "https://api.github.com/users/spalladino/orgs",
      "repos_url": "https://api.github.com/users/spalladino/repos",
      "events_url": "https://api.github.com/users/spalladino/events{/privacy}",
      "received_events_url": "https://api.github.com/users/spalladino/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-21T15:49:21Z",
    "updated_at": "2018-11-21T15:49:40Z",
    "author_association": "CONTRIBUTOR",
    "body": "@barakman certainly. The ERC20 data would be managed by the [Proxy contract](https://github.com/zeppelinos/zos/blob/master/packages/lib/contracts/upgradeability/AdminUpgradeabilityProxy.sol), while the ERC20 logic can be provided by the [OpenZeppelin EVM package](https://github.com/OpenZeppelin/openzeppelin-eth/blob/master/contracts/token/ERC20/StandaloneERC20.sol). Using those two contracts only you can reproduce the same setup.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/440714206/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 1,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/980453541",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1499#issuecomment-980453541",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1499",
    "id": 980453541,
    "node_id": "IC_kwDOA9tCBs46cIil",
    "user": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-11-26T22:18:17Z",
    "updated_at": "2021-11-26T22:18:17Z",
    "author_association": "MEMBER",
    "body": "You can find a list of resources about upgradeability in our documentation site.\r\n\r\nhttps://docs.openzeppelin.com/openzeppelin/upgrades",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/980453541/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
