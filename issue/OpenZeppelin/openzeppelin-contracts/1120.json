{
  "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1120",
  "repository_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts",
  "labels_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1120/labels{/name}",
  "comments_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1120/comments",
  "events_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1120/events",
  "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1120",
  "id": 344836127,
  "node_id": "MDU6SXNzdWUzNDQ4MzYxMjc=",
  "number": 1120,
  "title": "Another attempt on SafeMath assert->require but for a different reason",
  "user": {
    "login": "leonardoalt",
    "id": 504195,
    "node_id": "MDQ6VXNlcjUwNDE5NQ==",
    "avatar_url": "https://avatars.githubusercontent.com/u/504195?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/leonardoalt",
    "html_url": "https://github.com/leonardoalt",
    "followers_url": "https://api.github.com/users/leonardoalt/followers",
    "following_url": "https://api.github.com/users/leonardoalt/following{/other_user}",
    "gists_url": "https://api.github.com/users/leonardoalt/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/leonardoalt/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/leonardoalt/subscriptions",
    "organizations_url": "https://api.github.com/users/leonardoalt/orgs",
    "repos_url": "https://api.github.com/users/leonardoalt/repos",
    "events_url": "https://api.github.com/users/leonardoalt/events{/privacy}",
    "received_events_url": "https://api.github.com/users/leonardoalt/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 1000207718,
      "node_id": "MDU6TGFiZWwxMDAwMjA3NzE4",
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/labels/contracts",
      "name": "contracts",
      "color": "1d76db",
      "default": false,
      "description": "Smart contract code."
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 10,
  "created_at": "2018-07-26T13:06:40Z",
  "updated_at": "2018-08-10T18:41:07Z",
  "closed_at": "2018-08-10T18:41:07Z",
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "The different reason is the formal verification module we're building in Solidity. I'll start with a general argument from my side, then I'll talk about the FV module.\r\n\r\nI've read the multiple discussions in different issues/PRs, and first of all I need to say that I do disagree with having asserts in SafeMath. What the code does is filtering inputs, therefore requires should be used.\r\nI've also read that the idea is that the users should filter their input, and SafeMath would use the assertions to enforce no overflow. Well, nobody does it, and the reason is that the asserts in SafeMath already do kind of the same, so why would people bother? Moreover, if users filter their inputs with `require(b <= a)`, for example, then having an extra `assert(b <= a)` from SafeMath's `sub` is just a waste of gas.\r\n\r\nAssuming that users do not filter their input and rely on SafeMath to guarantee no underflows/overflows, this breaks formal verification. The reason is that the verifier sees no filtering (no assumptions on the input), and then sees the assertion `assert(b <= a)` which it tries to prove, since it is a verification target. The verifier will report that the assertion is not true for all cases, and easily provide counterexamples, since there are no assumptions on `a` and `b`.\r\n\r\nSo, from a verification perspective it would also make more sense to have `require`s in SafeMath, such that the underflow/overflow cases would be simply filtered out of the execution path, and the rest of the path would have the safe invariant due to an assumption, not a target.\r\n\r\nI'd love to hear your thoughts on it, even though it's a repetitive discussion...",
  "closed_by": {
    "login": "nventuro",
    "id": 2530770,
    "node_id": "MDQ6VXNlcjI1MzA3NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/2530770?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nventuro",
    "html_url": "https://github.com/nventuro",
    "followers_url": "https://api.github.com/users/nventuro/followers",
    "following_url": "https://api.github.com/users/nventuro/following{/other_user}",
    "gists_url": "https://api.github.com/users/nventuro/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nventuro/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nventuro/subscriptions",
    "organizations_url": "https://api.github.com/users/nventuro/orgs",
    "repos_url": "https://api.github.com/users/nventuro/repos",
    "events_url": "https://api.github.com/users/nventuro/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nventuro/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1120/reactions",
    "total_count": 5,
    "+1": 5,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1120/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/408183407",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1120#issuecomment-408183407",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1120",
    "id": 408183407,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwODE4MzQwNw==",
    "user": {
      "login": "nventuro",
      "id": 2530770,
      "node_id": "MDQ6VXNlcjI1MzA3NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2530770?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nventuro",
      "html_url": "https://github.com/nventuro",
      "followers_url": "https://api.github.com/users/nventuro/followers",
      "following_url": "https://api.github.com/users/nventuro/following{/other_user}",
      "gists_url": "https://api.github.com/users/nventuro/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nventuro/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nventuro/subscriptions",
      "organizations_url": "https://api.github.com/users/nventuro/orgs",
      "repos_url": "https://api.github.com/users/nventuro/repos",
      "events_url": "https://api.github.com/users/nventuro/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nventuro/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-26T18:01:41Z",
    "updated_at": "2018-07-26T18:01:41Z",
    "author_association": "CONTRIBUTOR",
    "body": "Thanks for bringing this up @leonardoalt! Could you provide some examples on what you'd consider valid uses of `assert`?",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/408183407/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/408340629",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1120#issuecomment-408340629",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1120",
    "id": 408340629,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwODM0MDYyOQ==",
    "user": {
      "login": "leonardoalt",
      "id": 504195,
      "node_id": "MDQ6VXNlcjUwNDE5NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/504195?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/leonardoalt",
      "html_url": "https://github.com/leonardoalt",
      "followers_url": "https://api.github.com/users/leonardoalt/followers",
      "following_url": "https://api.github.com/users/leonardoalt/following{/other_user}",
      "gists_url": "https://api.github.com/users/leonardoalt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/leonardoalt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/leonardoalt/subscriptions",
      "organizations_url": "https://api.github.com/users/leonardoalt/orgs",
      "repos_url": "https://api.github.com/users/leonardoalt/repos",
      "events_url": "https://api.github.com/users/leonardoalt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/leonardoalt/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-27T07:48:39Z",
    "updated_at": "2018-07-27T07:49:32Z",
    "author_association": "CONTRIBUTOR",
    "body": "Hi @nventuro \r\n\r\nOne simple example could be:\r\n```\r\nfunction max(uint a, uint b) returns (uint) {\r\n  uint c = a;\r\n  if (b > c)\r\n    c = b;\r\n  assert(c >= a && c >= b);\r\n  return c;\r\n}\r\n```\r\nOf course this is a very simple example, but it illustrates that the invariant `c >= a && c >= b` should be true before the `assert` no matter what input values are given, the contract's state etc, therefore an assertion fail means a bug somewhere.\r\n\r\nAnother simple example:\r\n```\r\nfunction transfer(address to, uint amount) {\r\n  require(balance[msg.sender] >= amount);\r\n  uint sum = balance[msg.sender] + balance[to];\r\n  balance[msg.sender] -= amount;\r\n  balance[to] += amount;\r\n  uint newSum = balance[msg.sender] + balance[to];\r\n  assert(sum == newSum);\r\n}\r\n```\r\nSimilarly, the assertion should be true regardless the state of the whole thing.\r\n\r\nAnother more complex example would be, that after sorting an array, you could assert for each position that the element is `<=` the next.\r\n\r\nSummary: conditions in `assert`s should be true no matter what before the `assert`.\r\n\r\nSo I think in the end it kinda comes down to what's expected from the user, and what should the user expect from SafeMath.\r\n@shrugs I hope it's ok to copy over here what you said in #778:\r\n\"they should be invariants but obviously they aren't because nobody is doing requires before calling safemath anyway\"\r\nIn my opinion:\r\n1) If the idea is that users should filter inputs and SafeMath only enforces it, then `assert` is correct;\r\n2) If the users don't have to guarantee the invariants and SafeMath is used as the input filter, then `require` is correct.\r\n\r\nFrom a practical verification point of view: if `1` is the case, people have been doing it wrong which leads to me having to think about hacks in the verification tool to find those cases :p",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/408340629/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/408481110",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1120#issuecomment-408481110",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1120",
    "id": 408481110,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwODQ4MTExMA==",
    "user": {
      "login": "dddejan",
      "id": 1482564,
      "node_id": "MDQ6VXNlcjE0ODI1NjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1482564?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dddejan",
      "html_url": "https://github.com/dddejan",
      "followers_url": "https://api.github.com/users/dddejan/followers",
      "following_url": "https://api.github.com/users/dddejan/following{/other_user}",
      "gists_url": "https://api.github.com/users/dddejan/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dddejan/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dddejan/subscriptions",
      "organizations_url": "https://api.github.com/users/dddejan/orgs",
      "repos_url": "https://api.github.com/users/dddejan/repos",
      "events_url": "https://api.github.com/users/dddejan/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dddejan/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-27T17:08:28Z",
    "updated_at": "2018-07-27T17:08:28Z",
    "author_association": "NONE",
    "body": "We're also playing with verification and moving the assert -> requires seems like the right thing to do (or at least if would be very helpful). Since the semantics are the same modulo gas, it's more about intent.\r\n\r\nFor verification purposes we treat \r\n- asserts as \"find an execution that fails the assert, or show that none exists\";\r\n- requires as \"assume this holds while proving stuff that follows it\".\r\n\r\nThe intent doe SafeMath is more in line with \"let's assume that this holds\" and use it (and if doesn't hold, it's OK due to revert). Considering the amount of contracts using SafeMath this is a big deal for verification attempts since, in most cases, it's not hard to trigger the overflows and these would then be reported as bugs (while they shouldn't).\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/408481110/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/408573456",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1120#issuecomment-408573456",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1120",
    "id": 408573456,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwODU3MzQ1Ng==",
    "user": {
      "login": "nventuro",
      "id": 2530770,
      "node_id": "MDQ6VXNlcjI1MzA3NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2530770?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nventuro",
      "html_url": "https://github.com/nventuro",
      "followers_url": "https://api.github.com/users/nventuro/followers",
      "following_url": "https://api.github.com/users/nventuro/following{/other_user}",
      "gists_url": "https://api.github.com/users/nventuro/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nventuro/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nventuro/subscriptions",
      "organizations_url": "https://api.github.com/users/nventuro/orgs",
      "repos_url": "https://api.github.com/users/nventuro/repos",
      "events_url": "https://api.github.com/users/nventuro/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nventuro/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-28T01:32:39Z",
    "updated_at": "2018-07-28T01:33:48Z",
    "author_association": "CONTRIBUTOR",
    "body": "I see what you mean and agree with the raised points. Would `assert`s be optimized out in a production build, then?\r\n\r\nAlso, regarding `SafeMath` - this is the current implementation of `div`:\r\n\r\n```\r\nfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n  // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n  // uint256 c = a / b;\r\n  // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n  return a / b;\r\n}\r\n```\r\n\r\nWould you suggest changing that first comment to `require(b > 0)`, to prevent Solidity from throwing? (in line with @sohkai's PR, #1121).",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/408573456/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/408777103",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1120#issuecomment-408777103",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1120",
    "id": 408777103,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwODc3NzEwMw==",
    "user": {
      "login": "leonardoalt",
      "id": 504195,
      "node_id": "MDQ6VXNlcjUwNDE5NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/504195?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/leonardoalt",
      "html_url": "https://github.com/leonardoalt",
      "followers_url": "https://api.github.com/users/leonardoalt/followers",
      "following_url": "https://api.github.com/users/leonardoalt/following{/other_user}",
      "gists_url": "https://api.github.com/users/leonardoalt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/leonardoalt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/leonardoalt/subscriptions",
      "organizations_url": "https://api.github.com/users/leonardoalt/orgs",
      "repos_url": "https://api.github.com/users/leonardoalt/repos",
      "events_url": "https://api.github.com/users/leonardoalt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/leonardoalt/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-30T07:48:57Z",
    "updated_at": "2018-07-30T07:48:57Z",
    "author_association": "CONTRIBUTOR",
    "body": "`assert`s are still used as runtime checks that might catch compiler/EVM/etc bugs, so I wouldn't remove it even if a static analyzer says the assertion is true.\r\n\r\nRegarding `div`: yes, I'd do the same as #1121. My personal reasoning is that if I'm writing a contract without SafeMath I'll explicitly add such a `require`. If I'm using SafeMath I'd expect it to keep the path clean for me everywhere.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/408777103/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/408976576",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1120#issuecomment-408976576",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1120",
    "id": 408976576,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwODk3NjU3Ng==",
    "user": {
      "login": "nventuro",
      "id": 2530770,
      "node_id": "MDQ6VXNlcjI1MzA3NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2530770?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nventuro",
      "html_url": "https://github.com/nventuro",
      "followers_url": "https://api.github.com/users/nventuro/followers",
      "following_url": "https://api.github.com/users/nventuro/following{/other_user}",
      "gists_url": "https://api.github.com/users/nventuro/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nventuro/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nventuro/subscriptions",
      "organizations_url": "https://api.github.com/users/nventuro/orgs",
      "repos_url": "https://api.github.com/users/nventuro/repos",
      "events_url": "https://api.github.com/users/nventuro/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nventuro/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-30T19:09:38Z",
    "updated_at": "2018-07-30T19:09:38Z",
    "author_association": "CONTRIBUTOR",
    "body": "I just found a curious situation in #915, where an `assert` was added in the manner you describe: coveralls is now reporting our test coverage dropped, [since that assertion is always true](https://coveralls.io/jobs/36013057/source_files/925791086#L58) (as expected). I looked into `solidity-coverage` a bit, and [they consider this the intended behavior](https://github.com/sc-forks/solidity-coverage/blob/master/docs/faq.md#why-has-my-branch-coverage-decreased-why-is-assert-being-shown-as-a-branch-point). \r\n\r\nI worry other tools may be taking the same approach, leading to issues due to different interpretations on the semantics of `assert`. What do you think about this?\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/408976576/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/409516855",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1120#issuecomment-409516855",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1120",
    "id": 409516855,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwOTUxNjg1NQ==",
    "user": {
      "login": "leonardoalt",
      "id": 504195,
      "node_id": "MDQ6VXNlcjUwNDE5NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/504195?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/leonardoalt",
      "html_url": "https://github.com/leonardoalt",
      "followers_url": "https://api.github.com/users/leonardoalt/followers",
      "following_url": "https://api.github.com/users/leonardoalt/following{/other_user}",
      "gists_url": "https://api.github.com/users/leonardoalt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/leonardoalt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/leonardoalt/subscriptions",
      "organizations_url": "https://api.github.com/users/leonardoalt/orgs",
      "repos_url": "https://api.github.com/users/leonardoalt/repos",
      "events_url": "https://api.github.com/users/leonardoalt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/leonardoalt/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-08-01T09:42:19Z",
    "updated_at": "2018-08-01T09:42:19Z",
    "author_association": "CONTRIBUTOR",
    "body": "In my opinion they got `assert`s wrong. As you just said, it is expected that the assertion is always true, and if a test case breaks an assertion there should be a bug, therefore it shouldn't be considered in coverage.\r\n\r\nI see your point about a consistent interpretation of asserts throughout the projects. I'm not aware of other projects interpreting asserts like that, even though they probably exist.\r\nIdeally we'd need everyone on the same page, even if it takes some time.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/409516855/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/410134080",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1120#issuecomment-410134080",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1120",
    "id": 410134080,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxMDEzNDA4MA==",
    "user": {
      "login": "nventuro",
      "id": 2530770,
      "node_id": "MDQ6VXNlcjI1MzA3NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2530770?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nventuro",
      "html_url": "https://github.com/nventuro",
      "followers_url": "https://api.github.com/users/nventuro/followers",
      "following_url": "https://api.github.com/users/nventuro/following{/other_user}",
      "gists_url": "https://api.github.com/users/nventuro/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nventuro/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nventuro/subscriptions",
      "organizations_url": "https://api.github.com/users/nventuro/orgs",
      "repos_url": "https://api.github.com/users/nventuro/repos",
      "events_url": "https://api.github.com/users/nventuro/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nventuro/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-08-03T03:29:44Z",
    "updated_at": "2018-08-03T03:29:44Z",
    "author_association": "CONTRIBUTOR",
    "body": "I created [an issue](https://github.com/sc-forks/solidity-coverage/issues/269) on their repo to get their opinions regarding this, and see if we can start getting the community on board with this proposal :)",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/410134080/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/410176884",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1120#issuecomment-410176884",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1120",
    "id": 410176884,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxMDE3Njg4NA==",
    "user": {
      "login": "leonardoalt",
      "id": 504195,
      "node_id": "MDQ6VXNlcjUwNDE5NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/504195?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/leonardoalt",
      "html_url": "https://github.com/leonardoalt",
      "followers_url": "https://api.github.com/users/leonardoalt/followers",
      "following_url": "https://api.github.com/users/leonardoalt/following{/other_user}",
      "gists_url": "https://api.github.com/users/leonardoalt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/leonardoalt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/leonardoalt/subscriptions",
      "organizations_url": "https://api.github.com/users/leonardoalt/orgs",
      "repos_url": "https://api.github.com/users/leonardoalt/repos",
      "events_url": "https://api.github.com/users/leonardoalt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/leonardoalt/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-08-03T07:59:26Z",
    "updated_at": "2018-08-03T07:59:26Z",
    "author_association": "CONTRIBUTOR",
    "body": "Nice, thanks @nventuro !",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/410176884/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/411213917",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1120#issuecomment-411213917",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1120",
    "id": 411213917,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxMTIxMzkxNw==",
    "user": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-08-07T21:49:01Z",
    "updated_at": "2018-08-07T21:49:01Z",
    "author_association": "MEMBER",
    "body": "Thanks for such an interesting discussion guys! I was convinced that we should change `SafeMath` to use `require`.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/411213917/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
