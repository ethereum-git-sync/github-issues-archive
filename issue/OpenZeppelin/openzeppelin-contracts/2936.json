{
  "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2936",
  "repository_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts",
  "labels_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2936/labels{/name}",
  "comments_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2936/comments",
  "events_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2936/events",
  "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2936",
  "id": 1043558461,
  "node_id": "I_kwDOA9tCBs4-M3A9",
  "number": 2936,
  "title": "dangerous use of `super`",
  "user": {
    "login": "hacker-DOM",
    "id": 18601956,
    "node_id": "MDQ6VXNlcjE4NjAxOTU2",
    "avatar_url": "https://avatars.githubusercontent.com/u/18601956?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/hacker-DOM",
    "html_url": "https://github.com/hacker-DOM",
    "followers_url": "https://api.github.com/users/hacker-DOM/followers",
    "following_url": "https://api.github.com/users/hacker-DOM/following{/other_user}",
    "gists_url": "https://api.github.com/users/hacker-DOM/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/hacker-DOM/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/hacker-DOM/subscriptions",
    "organizations_url": "https://api.github.com/users/hacker-DOM/orgs",
    "repos_url": "https://api.github.com/users/hacker-DOM/repos",
    "events_url": "https://api.github.com/users/hacker-DOM/events{/privacy}",
    "received_events_url": "https://api.github.com/users/hacker-DOM/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 4,
  "created_at": "2021-11-03T12:59:41Z",
  "updated_at": "2022-02-01T13:31:34Z",
  "closed_at": "2021-11-04T22:33:19Z",
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "### Background\r\nIn Solidity, `super` does **not** always refer to the closest parent of the contract where it is defined.\r\n\r\nWhen `D.foo` is called, it calls `B.foo`. That will **not** call `A.foo`, which may be surprising for developers.\r\n\r\n```\r\ncontract Logger {\r\n    event Log(string s);\r\n}\r\n\r\ncontract A is Logger {\r\n    function foo() public virtual {\r\n        emit Log(\"A.foo\");\r\n    }\r\n}\r\n\r\ncontract B is A {\r\n    function foo() public virtual override(A) {\r\n        emit Log(\"B.foo entered\");\r\n        super.foo();\r\n        emit Log(\"B.foo left\");\r\n    }\r\n}\r\n\r\ncontract C is A {\r\n    function foo() public virtual override(A) {\r\n        emit Log(\"C.foo\");\r\n    }\r\n}\r\n\r\ncontract D is C, B {\r\n    function foo() public override(B, C) {\r\n        super.foo();\r\n    }\r\n}\r\n```\r\n\r\nThere are many places in `@openzeppelin/contracts` where `super` is used, e.g.:\r\n\r\nhttps://github.com/OpenZeppelin/openzeppelin-contracts/blob/ee149877212acf5564921244b3cdaa7266a372fe/contracts/token/ERC20/extensions/ERC20Pausable.sol#L29\r\n\r\nhttps://github.com/OpenZeppelin/openzeppelin-contracts/blob/ee149877212acf5564921244b3cdaa7266a372fe/contracts/access/AccessControlEnumerable.sol#L61\r\n\r\nhttps://github.com/OpenZeppelin/openzeppelin-contracts/blob/ee149877212acf5564921244b3cdaa7266a372fe/contracts/governance/extensions/GovernorTimelockControl.sol#L125\r\n\r\n\r\n### Security vulnerability\r\nAlice is a developer that uses OpenZeppelin libraries. She uses library `B` in the above code snippet, expecting that `super.foo()` will call `A.foo`. However, it calls `C.foo`. If this is discovered during runtime this can lead to unexpected outcomes.\r\n\r\n### Recommendation\r\nSpecify the contract instead of doing `super`. E.g. in the above code snippet, `B` would become:\r\n\r\n```\r\ncontract B is A {\r\n    function foo() public virtual override(A) {\r\n        emit Log(\"B.foo entered\");\r\n        A.foo();\r\n        emit Log(\"B.foo left\");\r\n    }\r\n}\r\n```\r\n\r\nThis will improve readability and ensure that Alice's code calls `A.foo`. If Alice wishes different behavior instead of `A.foo`, she can still do that by overriding `B.foo`. This approach is more explicit and less prone to errors.",
  "closed_by": {
    "login": "frangio",
    "id": 481465,
    "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
    "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/frangio",
    "html_url": "https://github.com/frangio",
    "followers_url": "https://api.github.com/users/frangio/followers",
    "following_url": "https://api.github.com/users/frangio/following{/other_user}",
    "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
    "organizations_url": "https://api.github.com/users/frangio/orgs",
    "repos_url": "https://api.github.com/users/frangio/repos",
    "events_url": "https://api.github.com/users/frangio/events{/privacy}",
    "received_events_url": "https://api.github.com/users/frangio/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2936/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2936/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/960630858",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2936#issuecomment-960630858",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2936",
    "id": 960630858,
    "node_id": "IC_kwDOA9tCBs45QhBK",
    "user": {
      "login": "Amxx",
      "id": 2432299,
      "node_id": "MDQ6VXNlcjI0MzIyOTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2432299?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Amxx",
      "html_url": "https://github.com/Amxx",
      "followers_url": "https://api.github.com/users/Amxx/followers",
      "following_url": "https://api.github.com/users/Amxx/following{/other_user}",
      "gists_url": "https://api.github.com/users/Amxx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Amxx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Amxx/subscriptions",
      "organizations_url": "https://api.github.com/users/Amxx/orgs",
      "repos_url": "https://api.github.com/users/Amxx/repos",
      "events_url": "https://api.github.com/users/Amxx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Amxx/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-11-04T10:30:45Z",
    "updated_at": "2022-02-01T13:31:34Z",
    "author_association": "COLLABORATOR",
    "body": "Hello @hacker-DOM \r\n\r\nLets take the example of `_beforeTokenTransfer`\r\n\r\n- If is defined in ERC20.sol with an empty body\r\n- It is overridden in ERC20Pausable, ERC20Snapshot, and possibly more contracts in the future.\r\n\r\nIf the extensions, that override this \"hook\", we want to call super to chain the hooks, regardless of the inheritance order. Basically we want both\r\n\r\n```\r\ncontract A is ERC20Pausable, ERC20Snapshot {}\r\ncontract B is ERC20Snapshot, ERC20Pausable {}\r\n```\r\n\r\nTo call the hooks in both extensions.\r\n\r\nIf we did the call to `ERC20._beforeTokenTransfer` only, then we would be in trouble. The users would have to explicitly call the hooks in all relevant extensions, and pray that there is nothing shared in the inheritance tree that would cause some hooks non-trivial to be called twice.\r\n\r\nThe same approach applied to ERC165's `supportsInterface`",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/960630858/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/961483458",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2936#issuecomment-961483458",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2936",
    "id": 961483458,
    "node_id": "IC_kwDOA9tCBs45TxLC",
    "user": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-11-04T22:33:19Z",
    "updated_at": "2021-11-04T22:33:19Z",
    "author_association": "MEMBER",
    "body": "Thank you for this report @hacker-DOM.\r\n\r\nI want to remind you first of all that if you uncover a security vulnerability in OpenZeppelin Contracts we ask you to first responsibly disclose it to us at `security@openzeppelin.com`, as documented [in our security policy](https://github.com/OpenZeppelin/openzeppelin-contracts/security/policy#reporting-a-vulnerability).\r\n\r\n---\r\n\r\nWe disagree that `super` is dangerous. In fact, I would argue what is dangerous is exactly the opposite: not using `super`. In your particular example, the bug is in the definition of `C.foo`, which does not invoke its parent `A.foo`, and this is what causes `A.foo` to never be invoked in the chain. In some cases this might even be intentional and not a bug, after all `C` is explicitly overriding `A`'s definition and replacing it with its own.\r\n\r\nNote that [our documentation states](https://docs.openzeppelin.com/contracts/4.x/extending-contracts#rules_of_hooks) that hooks such as `_beforeTokenTransfer` should always be overriden including the `super` call.\r\n\r\nI believe the source of the confusion here is, in part, Solidity's syntax of `override(A)`. It hides the fact that the immediate parent is _not_ necessarily `A`.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/961483458/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/962510770",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2936#issuecomment-962510770",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2936",
    "id": 962510770,
    "node_id": "IC_kwDOA9tCBs45Xr-y",
    "user": {
      "login": "cameel",
      "id": 137030,
      "node_id": "MDQ6VXNlcjEzNzAzMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/137030?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cameel",
      "html_url": "https://github.com/cameel",
      "followers_url": "https://api.github.com/users/cameel/followers",
      "following_url": "https://api.github.com/users/cameel/following{/other_user}",
      "gists_url": "https://api.github.com/users/cameel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cameel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cameel/subscriptions",
      "organizations_url": "https://api.github.com/users/cameel/orgs",
      "repos_url": "https://api.github.com/users/cameel/repos",
      "events_url": "https://api.github.com/users/cameel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cameel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-11-06T21:13:51Z",
    "updated_at": "2021-11-06T21:14:23Z",
    "author_association": "CONTRIBUTOR",
    "body": "@frangio \r\n> I believe the source of the confusion here is, in part, Solidity's syntax of `override(A)`. It hides the fact that the immediate parent is _not_ necessarily `A`.\r\n\r\nAny suggestions on how you would change it? If `override(A)` on `B.foo()` gives a false impression that `A.foo()` would always be called you can write just `override` without naming the contract (at least as long as it inherits from only one base). The contract that will actually be called cannot be listed there because it cannot be determined based on `B`'s definition alone. It depends on what other contracts the contract that derives from `B` inherits from and can be different for different derived contracts. So it's `C.foo()` here but could also be `A.foo()` for another case, with the same exact definition of `A`.\r\n\r\nAlso, I agree that `super` is not inherently dangerous, in fact it's needed to solve some problems with multiple inheritance, but it also is confusing to users who haven't carefully thought through of the consequences of that kind of inheritance. We have an issue to improve it so feel free to post any new ideas there: https://github.com/ethereum/solidity/issues/7261. Unfortunately we haven't come up with anything clearly better so far.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/962510770/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/962511263",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2936#issuecomment-962511263",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2936",
    "id": 962511263,
    "node_id": "IC_kwDOA9tCBs45XsGf",
    "user": {
      "login": "cameel",
      "id": 137030,
      "node_id": "MDQ6VXNlcjEzNzAzMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/137030?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cameel",
      "html_url": "https://github.com/cameel",
      "followers_url": "https://api.github.com/users/cameel/followers",
      "following_url": "https://api.github.com/users/cameel/following{/other_user}",
      "gists_url": "https://api.github.com/users/cameel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cameel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cameel/subscriptions",
      "organizations_url": "https://api.github.com/users/cameel/orgs",
      "repos_url": "https://api.github.com/users/cameel/repos",
      "events_url": "https://api.github.com/users/cameel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cameel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-11-06T21:18:12Z",
    "updated_at": "2021-11-06T21:18:31Z",
    "author_association": "CONTRIBUTOR",
    "body": "Ah, based on https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2937#issuecomment-961484068 I see that dropping the name of the contract from `override(A)` was what you were actually suggesting.\r\n\r\nAnyway, `super` does have its share of problems so any input in the issue I linked to is welcome.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/962511263/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
