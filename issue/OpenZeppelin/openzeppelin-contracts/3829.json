{
  "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3829",
  "repository_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts",
  "labels_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3829/labels{/name}",
  "comments_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3829/comments",
  "events_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3829/events",
  "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3829",
  "id": 1457096829,
  "node_id": "I_kwDOA9tCBs5W2Yh9",
  "number": 3829,
  "title": "ReentrancyGuard should expose the `_status` publicly",
  "user": {
    "login": "rholterhus",
    "id": 40402806,
    "node_id": "MDQ6VXNlcjQwNDAyODA2",
    "avatar_url": "https://avatars.githubusercontent.com/u/40402806?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/rholterhus",
    "html_url": "https://github.com/rholterhus",
    "followers_url": "https://api.github.com/users/rholterhus/followers",
    "following_url": "https://api.github.com/users/rholterhus/following{/other_user}",
    "gists_url": "https://api.github.com/users/rholterhus/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/rholterhus/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/rholterhus/subscriptions",
    "organizations_url": "https://api.github.com/users/rholterhus/orgs",
    "repos_url": "https://api.github.com/users/rholterhus/repos",
    "events_url": "https://api.github.com/users/rholterhus/events{/privacy}",
    "received_events_url": "https://api.github.com/users/rholterhus/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 3,
  "created_at": "2022-11-20T23:57:20Z",
  "updated_at": "2023-05-15T16:45:59Z",
  "closed_at": null,
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "**üßê Motivation**\r\n\r\nAn increasingly common security issue is \"read-only reentrancy\". These issues arise when protocol A relies on the state of protocol B, and protocol B's state can temporarily be manipulated. Even if protocol B uses reentrancy guards to protect against this manipulated state, protocol A can't inspect B's reentrancy guard itself, which can make integration nearly impossible. Some recent examples of this issue include [a vulnerable integration with Euler](https://www.euler.finance/blog/read-only-re-entrancy-guards) and [vulnerable integrations with Curve](https://chainsecurity.com/curve-lp-oracle-manipulation-post-mortem/). In the case of the Curve integration bugs, the only fix for the vulnerability was to add an otherwise unnecessary call to a state modifying function that has a `nonReentrant` guard, which is a very hacky fix. In some cases, there might not be a good `nonReentrant` function that can be called \"for free\", so the mitigation would involve try-catching a call to such a function and inspecting if the error message is `\"ReentrancyGuard: reentrant call\"`, which would be an even uglier fix.\r\n\r\n**üìù Details**\r\n\r\nIt would make much more sense for `ReentrancyGuard.sol` to expose the `_status` variable publicly in some way. A simple fix for this would be to mark the internal [`_reentrancyGuardEntered` function](https://github.com/OpenZeppelin/openzeppelin-contracts/blob/99589794db43c8b285f5b3464d2e0864caab8199/contracts/security/ReentrancyGuard.sol#L74) as public:\r\n\r\n```diff\r\n- function _reentrancyGuardEntered() internal view returns (bool) {\r\n+ function reentrancyGuardEntered() public view returns (bool) {\r\n     return _status == _ENTERED;\r\n }\r\n```\r\n",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3829/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3829/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1372337949",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3829#issuecomment-1372337949",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3829",
    "id": 1372337949,
    "node_id": "IC_kwDOA9tCBs5RzDcd",
    "user": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-01-05T15:08:14Z",
    "updated_at": "2023-01-05T15:08:14Z",
    "author_association": "MEMBER",
    "body": "I'm not sure that this is the right solution to this problem. It shouldn't be the user or integrator's reponsibility to check if they are invoking a contract in an inconsistent state. It should be the target contract who refuses to answer a query because they are in the middle of processing a conflicting transaction.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1372337949/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1405920350",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3829#issuecomment-1405920350",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3829",
    "id": 1405920350,
    "node_id": "IC_kwDOA9tCBs5TzKRe",
    "user": {
      "login": "rholterhus",
      "id": 40402806,
      "node_id": "MDQ6VXNlcjQwNDAyODA2",
      "avatar_url": "https://avatars.githubusercontent.com/u/40402806?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rholterhus",
      "html_url": "https://github.com/rholterhus",
      "followers_url": "https://api.github.com/users/rholterhus/followers",
      "following_url": "https://api.github.com/users/rholterhus/following{/other_user}",
      "gists_url": "https://api.github.com/users/rholterhus/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rholterhus/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rholterhus/subscriptions",
      "organizations_url": "https://api.github.com/users/rholterhus/orgs",
      "repos_url": "https://api.github.com/users/rholterhus/repos",
      "events_url": "https://api.github.com/users/rholterhus/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rholterhus/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-01-27T01:55:28Z",
    "updated_at": "2023-01-27T01:55:28Z",
    "author_association": "NONE",
    "body": "Sorry for the late response. I understand your argument - ideally the target contract would revert instead of returning an incorrect answer based on an inconsistent state. However, this is not done very often, so most protocols are stuck with the hacky ways of checking if the reentrant guards are active or not.\r\n\r\nMoreover, the target contract might not even have a chance to refuse the query, even if they wanted to. For example, if some logic in protocol A depends on a public storage variable in protocol B, then how would protocol B refuse access to reading this storage variable in the case where it is temporarily inconsistent? It would have to define duplicate public getter functions that revert on reentrant calls. Even more extreme, if protocol A depends on `address(protocol B).balance`, then it would be impossible for protocol A to determine if this value is valid or not based on if protocol B has its reentrant guards active or not. \r\n\r\nI think that just allowing the reentrant guard to be inspected externally would be an easy fix that would handle everything.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1405920350/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1548201054",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3829#issuecomment-1548201054",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3829",
    "id": 1548201054,
    "node_id": "IC_kwDOA9tCBs5cR6xe",
    "user": {
      "login": "rholterhus",
      "id": 40402806,
      "node_id": "MDQ6VXNlcjQwNDAyODA2",
      "avatar_url": "https://avatars.githubusercontent.com/u/40402806?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rholterhus",
      "html_url": "https://github.com/rholterhus",
      "followers_url": "https://api.github.com/users/rholterhus/followers",
      "following_url": "https://api.github.com/users/rholterhus/following{/other_user}",
      "gists_url": "https://api.github.com/users/rholterhus/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rholterhus/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rholterhus/subscriptions",
      "organizations_url": "https://api.github.com/users/rholterhus/orgs",
      "repos_url": "https://api.github.com/users/rholterhus/repos",
      "events_url": "https://api.github.com/users/rholterhus/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rholterhus/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-05-15T16:45:58Z",
    "updated_at": "2023-05-15T16:45:58Z",
    "author_association": "NONE",
    "body": "I'm interested in following up on this - would it be possible for this to get another look? After rereading my points above I still think the suggested fix is a small but very useful improvement.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1548201054/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
