{
  "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1691",
  "repository_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts",
  "labels_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1691/labels{/name}",
  "comments_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1691/comments",
  "events_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1691/events",
  "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1691",
  "id": 424149280,
  "node_id": "MDU6SXNzdWU0MjQxNDkyODA=",
  "number": 1691,
  "title": "Can you post a link to a standard ERC-20 template, easily modifiable, that works with the latest version of online Remix?",
  "user": {
    "login": "bitcoinmeetups",
    "id": 2834754,
    "node_id": "MDQ6VXNlcjI4MzQ3NTQ=",
    "avatar_url": "https://avatars.githubusercontent.com/u/2834754?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/bitcoinmeetups",
    "html_url": "https://github.com/bitcoinmeetups",
    "followers_url": "https://api.github.com/users/bitcoinmeetups/followers",
    "following_url": "https://api.github.com/users/bitcoinmeetups/following{/other_user}",
    "gists_url": "https://api.github.com/users/bitcoinmeetups/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/bitcoinmeetups/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/bitcoinmeetups/subscriptions",
    "organizations_url": "https://api.github.com/users/bitcoinmeetups/orgs",
    "repos_url": "https://api.github.com/users/bitcoinmeetups/repos",
    "events_url": "https://api.github.com/users/bitcoinmeetups/events{/privacy}",
    "received_events_url": "https://api.github.com/users/bitcoinmeetups/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 1034168915,
      "node_id": "MDU6TGFiZWwxMDM0MTY4OTE1",
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/labels/question",
      "name": "question",
      "color": "fcef8d",
      "default": true,
      "description": "Compilation errors, reverts on transactions, design questions."
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 4,
  "created_at": "2019-03-22T10:49:19Z",
  "updated_at": "2019-03-28T17:59:40Z",
  "closed_at": "2019-03-25T16:23:18Z",
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "Can you post a link to a standard ERC-20 template, easily modifiable, that works with the latest version of online Remix?\r\n\r\nHi there,\r\n\r\nI am looking for an updated and stable standard ERC-20 smart contract template which will pass through Remix compilation (latest version) without errors. The template should preferably be easy to modify as well.\r\n\r\nCould any of you guys please send a link to the right open zeppelin GitHub page?\r\n\r\nBM",
  "closed_by": {
    "login": "frangio",
    "id": 481465,
    "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
    "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/frangio",
    "html_url": "https://github.com/frangio",
    "followers_url": "https://api.github.com/users/frangio/followers",
    "following_url": "https://api.github.com/users/frangio/following{/other_user}",
    "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
    "organizations_url": "https://api.github.com/users/frangio/orgs",
    "repos_url": "https://api.github.com/users/frangio/repos",
    "events_url": "https://api.github.com/users/frangio/events{/privacy}",
    "received_events_url": "https://api.github.com/users/frangio/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1691/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1691/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/476273149",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1691#issuecomment-476273149",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1691",
    "id": 476273149,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3NjI3MzE0OQ==",
    "user": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-03-25T16:23:18Z",
    "updated_at": "2019-03-25T16:23:18Z",
    "author_association": "MEMBER",
    "body": "HI @bitcoinmeetups! Have you tried the [latest version of ERC20](https://github.com/OpenZeppelin/openzeppelin-solidity/blob/master/contracts/token/ERC20/ERC20.sol) in the repository? It works perfectly fine on Remix. If you want to \"copy-paste it\" you will also need to manually copy-paste the imported files, or use something like [`truffle-flattener`](https://github.com/nomiclabs/truffle-flattener).\r\n\r\nA simpler way to obtain the ERC20 contract is to use Remix GitHub imports:\r\n\r\n```solidity\r\npragma solidity ^0.5.2;\r\n\r\nimport 'github.com/OpenZeppelin/openzeppelin-solidity/contracts/token/ERC20/ERC20.sol';\r\n```\r\n\r\nPlease note that **OpenZeppelin contracts should not be modified**. You should use inheritance to add or change functionality. This is how you retain the security guarantees that we build into the library.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/476273149/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/477480173",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1691#issuecomment-477480173",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1691",
    "id": 477480173,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3NzQ4MDE3Mw==",
    "user": {
      "login": "bitcoinmeetups",
      "id": 2834754,
      "node_id": "MDQ6VXNlcjI4MzQ3NTQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2834754?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bitcoinmeetups",
      "html_url": "https://github.com/bitcoinmeetups",
      "followers_url": "https://api.github.com/users/bitcoinmeetups/followers",
      "following_url": "https://api.github.com/users/bitcoinmeetups/following{/other_user}",
      "gists_url": "https://api.github.com/users/bitcoinmeetups/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bitcoinmeetups/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bitcoinmeetups/subscriptions",
      "organizations_url": "https://api.github.com/users/bitcoinmeetups/orgs",
      "repos_url": "https://api.github.com/users/bitcoinmeetups/repos",
      "events_url": "https://api.github.com/users/bitcoinmeetups/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bitcoinmeetups/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-03-28T07:26:39Z",
    "updated_at": "2019-03-28T07:26:39Z",
    "author_association": "NONE",
    "body": "Ok. I'm looking for something more similar to this example (see below). In this contract it is easy to find the parts to be replaced (they are near the \"change these values for your token\" section at the end).\r\n\r\nAlso, this contract is generally more nicely commented and looks neater.\r\n\r\nDo you have something like this or can you help me further in any way?\r\n\r\npragma solidity ^0.4.4;\r\n\r\ncontract Token {\r\n\r\n    /// @return total amount of tokens\r\n    function totalSupply() constant returns (uint256 supply) {}\r\n\r\n    /// @param _owner The address from which the balance will be retrieved\r\n    /// @return The balance\r\n    function balanceOf(address _owner) constant returns (uint256 balance) {}\r\n\r\n    /// @notice send `_value` token to `_to` from `msg.sender`\r\n    /// @param _to The address of the recipient\r\n    /// @param _value The amount of token to be transferred\r\n    /// @return Whether the transfer was successful or not\r\n    function transfer(address _to, uint256 _value) returns (bool success) {}\r\n\r\n    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\r\n    /// @param _from The address of the sender\r\n    /// @param _to The address of the recipient\r\n    /// @param _value The amount of token to be transferred\r\n    /// @return Whether the transfer was successful or not\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {}\r\n\r\n    /// @notice `msg.sender` approves `_addr` to spend `_value` tokens\r\n    /// @param _spender The address of the account able to transfer the tokens\r\n    /// @param _value The amount of wei to be approved for transfer\r\n    /// @return Whether the approval was successful or not\r\n    function approve(address _spender, uint256 _value) returns (bool success) {}\r\n\r\n    /// @param _owner The address of the account owning tokens\r\n    /// @param _spender The address of the account able to transfer the tokens\r\n    /// @return Amount of remaining tokens allowed to spent\r\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {}\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n    \r\n}\r\n\r\n\r\n\r\ncontract StandardToken is Token {\r\n\r\n    function transfer(address _to, uint256 _value) returns (bool success) {\r\n        //Default assumes totalSupply can't be over max (2^256 - 1).\r\n        //If your token leaves out totalSupply and can issue more tokens as time goes on, you need to check if it doesn't wrap.\r\n        //Replace the if with this one instead.\r\n        //if (balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\r\n        if (balances[msg.sender] >= _value && _value > 0) {\r\n            balances[msg.sender] -= _value;\r\n            balances[_to] += _value;\r\n            Transfer(msg.sender, _to, _value);\r\n            return true;\r\n        } else { return false; }\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\r\n        //same as above. Replace this line with the following if you want to protect against wrapping uints.\r\n        //if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\r\n        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\r\n            balances[_to] += _value;\r\n            balances[_from] -= _value;\r\n            allowed[_from][msg.sender] -= _value;\r\n            Transfer(_from, _to, _value);\r\n            return true;\r\n        } else { return false; }\r\n    }\r\n\r\n    function balanceOf(address _owner) constant returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) returns (bool success) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n      return allowed[_owner][_spender];\r\n    }\r\n\r\n    mapping (address => uint256) balances;\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n    uint256 public totalSupply;\r\n}\r\n\r\n\r\n//name this contract whatever you'd like\r\ncontract ERC20Token is StandardToken {\r\n\r\n    function () {\r\n        //if ether is sent to this address, send it back.\r\n        throw;\r\n    }\r\n\r\n    /* Public variables of the token */\r\n\r\n    /*\r\n    NOTE:\r\n    The following variables are OPTIONAL vanities. One does not have to include them.\r\n    They allow one to customise the token contract & in no way influences the core functionality.\r\n    Some wallets/interfaces might not even bother to look at this information.\r\n    */\r\n    string public name;                   //fancy name: eg Simon Bucks\r\n    uint8 public decimals;                //How many decimals to show. ie. There could 1000 base units with 3 decimals. Meaning 0.980 SBX = 980 base units. It's like comparing 1 wei to 1 ether.\r\n    string public symbol;                 //An identifier: eg SBX\r\n    string public version = 'H1.0';       //human 0.1 standard. Just an arbitrary versioning scheme.\r\n\r\n//\r\n// CHANGE THESE VALUES FOR YOUR TOKEN\r\n//\r\n\r\n//make sure this function name matches the contract name above. So if you're token is called TutorialToken, make sure the //contract name above is also TutorialToken instead of ERC20Token\r\n\r\n    function ERC20Token(\r\n        ) {\r\n        balances[msg.sender] = NUMBER_OF_TOKENS_HERE;               // Give the creator all initial tokens (100000 for example)\r\n        totalSupply = NUMBER_OF_TOKENS_HERE;                        // Update total supply (100000 for example)\r\n        name = \"NAME OF YOUR TOKEN HERE\";                                   // Set the name for display purposes\r\n        decimals = 0;                            // Amount of decimals for display purposes\r\n        symbol = \"SYM\";                               // Set the symbol for display purposes\r\n    }\r\n\r\n    /* Approves and then calls the receiving contract */\r\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData) returns (bool success) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n\r\n        //call the receiveApproval function on the contract you want to be notified. This crafts the function signature manually so one doesn't have to include a contract in here just for this.\r\n        //receiveApproval(address _from, uint256 _value, address _tokenContract, bytes _extraData)\r\n        //it is assumed that when does this that the call *should* succeed, otherwise one would use vanilla approve instead.\r\n        if(!_spender.call(bytes4(bytes32(sha3(\"receiveApproval(address,uint256,address,bytes)\"))), msg.sender, _value, this, _extraData)) { throw; }\r\n        return true;\r\n    }\r\n}\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/477480173/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/477705950",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1691#issuecomment-477705950",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1691",
    "id": 477705950,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3NzcwNTk1MA==",
    "user": {
      "login": "nventuro",
      "id": 2530770,
      "node_id": "MDQ6VXNlcjI1MzA3NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2530770?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nventuro",
      "html_url": "https://github.com/nventuro",
      "followers_url": "https://api.github.com/users/nventuro/followers",
      "following_url": "https://api.github.com/users/nventuro/following{/other_user}",
      "gists_url": "https://api.github.com/users/nventuro/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nventuro/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nventuro/subscriptions",
      "organizations_url": "https://api.github.com/users/nventuro/orgs",
      "repos_url": "https://api.github.com/users/nventuro/repos",
      "events_url": "https://api.github.com/users/nventuro/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nventuro/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-03-28T17:55:36Z",
    "updated_at": "2019-03-28T17:55:36Z",
    "author_association": "CONTRIBUTOR",
    "body": "@bitcoinmeetups I think that style is extremely dangerous, and I'd highly encourage you to not use it. Our design philosophy at OpenZeppelin is to reduce the potential for user error by disallowing low-level access to a contract's internals (e.g. its storage slots) and providing a restricted API that can be more easily reasoned about. ",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/477705950/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/477707513",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1691#issuecomment-477707513",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1691",
    "id": 477707513,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3NzcwNzUxMw==",
    "user": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-03-28T17:59:40Z",
    "updated_at": "2019-03-28T17:59:40Z",
    "author_association": "MEMBER",
    "body": "@bitcoinmeetups The closest thing we can offer is our [`SimpleToken`](https://github.com/OpenZeppelin/openzeppelin-solidity/blob/master/contracts/examples/SimpleToken.sol) example. ",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/477707513/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
