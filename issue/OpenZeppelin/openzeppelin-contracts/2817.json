{
  "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2817",
  "repository_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts",
  "labels_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2817/labels{/name}",
  "comments_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2817/comments",
  "events_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2817/events",
  "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2817",
  "id": 963476844,
  "node_id": "MDU6SXNzdWU5NjM0NzY4NDQ=",
  "number": 2817,
  "title": "ERC20 - transfer equivalence with transferFrom using address(this) as from",
  "user": {
    "login": "hasandogu",
    "id": 10977151,
    "node_id": "MDQ6VXNlcjEwOTc3MTUx",
    "avatar_url": "https://avatars.githubusercontent.com/u/10977151?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/hasandogu",
    "html_url": "https://github.com/hasandogu",
    "followers_url": "https://api.github.com/users/hasandogu/followers",
    "following_url": "https://api.github.com/users/hasandogu/following{/other_user}",
    "gists_url": "https://api.github.com/users/hasandogu/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/hasandogu/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/hasandogu/subscriptions",
    "organizations_url": "https://api.github.com/users/hasandogu/orgs",
    "repos_url": "https://api.github.com/users/hasandogu/repos",
    "events_url": "https://api.github.com/users/hasandogu/events{/privacy}",
    "received_events_url": "https://api.github.com/users/hasandogu/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 1,
  "created_at": "2021-08-08T17:16:21Z",
  "updated_at": "2021-08-30T13:37:06Z",
  "closed_at": "2021-08-30T13:37:06Z",
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "<!-- Briefly describe the issue you're experiencing. Tell us what you were trying to do and what happened instead. -->\r\n\r\nThe call to `IERC20(token).safeTransferFrom(**address(this)**, to, value)`  and `IERC20(token).safeTransferFrom(to, value)` are not equivalent. \r\n\r\n\r\n\r\n<!-- Remember, this is not a place to ask for help debugging code. For that, we welcome you in the OpenZeppelin Community Forum: https://forum.openzeppelin.com/. -->\r\n\r\n**üíª Environment**\r\n\r\n<!-- Tell us what version of OpenZeppelin Contracts you're using, and how you're using it: Truffle, Remix, etc. -->\r\n\r\nTruffle\r\n\r\n**üìù Details**\r\n\r\n<!-- Describe the problem you have been experiencing in more detail. Include as much information as you think is relevant. Keep in mind that transactions can fail for many reasons; context is key here. -->\r\n\r\nOpenZeppelin 4.2.0\r\n\r\n**üî¢ Code to reproduce bug**\r\n\r\n<!-- We will be able to better help if you provide a minimal example that triggers the bug. -->\r\n\r\nHi there, thank you for the amazing work with these contracts. \r\n\r\nWe have figured that if we use `IERC20(token).transferFrom(address(this), to, value)`  instead of  `IERC20(token).transfer(to, value)` the transfer goes through the allowance flow and we receive the error. \r\n\r\n`ERC20: transfer amount exceeds allowance.`\r\n\r\nShouldn't these two calls be equivalent and that they should both succeed (without the need to provide an explicit allowance/approval provided for address(this)?\r\n\r\nERC721 use function `_isApprovedOrOwner` or ERC1155 uses `isApprovedForAll`. Would it not be better to use a similar approach for ERC20 here so that transferFrom (with address(this) as from address) is equivalent to transfer()?\r\n\r\nOur current solution is to do the check externally:\r\n\r\n```\r\n    if(from == address(this)) {\r\n        IERC20(token).safeTransfer(to, asset.value);\r\n    }\r\n    else {\r\n        IERC20(token).safeTransferFrom(from, to, asset.value);                \r\n    }\r\n```\r\n\r\nMany thanks in advance.\r\n\r\n\r\n",
  "closed_by": {
    "login": "frangio",
    "id": 481465,
    "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
    "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/frangio",
    "html_url": "https://github.com/frangio",
    "followers_url": "https://api.github.com/users/frangio/followers",
    "following_url": "https://api.github.com/users/frangio/following{/other_user}",
    "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
    "organizations_url": "https://api.github.com/users/frangio/orgs",
    "repos_url": "https://api.github.com/users/frangio/repos",
    "events_url": "https://api.github.com/users/frangio/events{/privacy}",
    "received_events_url": "https://api.github.com/users/frangio/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2817/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2817/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/895214872",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2817#issuecomment-895214872",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2817",
    "id": 895214872,
    "node_id": "IC_kwDOA9tCBs41W-UY",
    "user": {
      "login": "Amxx",
      "id": 2432299,
      "node_id": "MDQ6VXNlcjI0MzIyOTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2432299?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Amxx",
      "html_url": "https://github.com/Amxx",
      "followers_url": "https://api.github.com/users/Amxx/followers",
      "following_url": "https://api.github.com/users/Amxx/following{/other_user}",
      "gists_url": "https://api.github.com/users/Amxx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Amxx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Amxx/subscriptions",
      "organizations_url": "https://api.github.com/users/Amxx/orgs",
      "repos_url": "https://api.github.com/users/Amxx/repos",
      "events_url": "https://api.github.com/users/Amxx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Amxx/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-08-09T13:17:35Z",
    "updated_at": "2021-08-09T13:17:35Z",
    "author_association": "COLLABORATOR",
    "body": "Hello @hasandogu\r\n\r\nERC20's `transfer` and `transferFrom` both follow the ERC20 standard. This standard includes:\r\n\r\n> The (`transferFrom`) function SHOULD throw unless the _from account has deliberately authorized the sender of the message via some mechanism.\r\n\r\nThe standard wording is SHOULD, and not MUST, so I guess allowing the owner to use `transferFrom` from itself, even without approval set, would be somehow acceptable. However this is a behavior most token does not implement, and I think we should stick to the most commonly accepted approach.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/895214872/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
