{
  "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1505",
  "repository_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts",
  "labels_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1505/labels{/name}",
  "comments_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1505/comments",
  "events_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1505/events",
  "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1505",
  "id": 381832827,
  "node_id": "MDU6SXNzdWUzODE4MzI4Mjc=",
  "number": 1505,
  "title": "SafeMath is not very safe when you overflow inputs (obviously).",
  "user": {
    "login": "destenson",
    "id": 282538,
    "node_id": "MDQ6VXNlcjI4MjUzOA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/282538?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/destenson",
    "html_url": "https://github.com/destenson",
    "followers_url": "https://api.github.com/users/destenson/followers",
    "following_url": "https://api.github.com/users/destenson/following{/other_user}",
    "gists_url": "https://api.github.com/users/destenson/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/destenson/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/destenson/subscriptions",
    "organizations_url": "https://api.github.com/users/destenson/orgs",
    "repos_url": "https://api.github.com/users/destenson/repos",
    "events_url": "https://api.github.com/users/destenson/events{/privacy}",
    "received_events_url": "https://api.github.com/users/destenson/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 5,
  "created_at": "2018-11-17T06:09:28Z",
  "updated_at": "2018-11-18T15:55:08Z",
  "closed_at": "2018-11-17T21:58:58Z",
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "My understanding of SafeMath is that it's supposed to prevent invalid calculations due to negative inputs.\r\n\r\n**💻 Environment**\r\n\r\nAny smart contract that depends on SafeMath for valid calculations.\r\n\r\n**📝 Details**\r\n\r\nFor each of the 4 math functions, there are invalid inputs that give invalid outputs without throwing.\r\n\r\n**🔢 Code to reproduce bug**\r\n\r\nEDIT: I'm wrong about these examples. In my excitement to share what I observed when the inputs had been overflowed before giving them to the library, I chose the simplest examples I could find, without realizing that they're obviously not correct.\r\n\r\nI would think these should all throw and don't: \r\n```\r\nadd(uint(-1),1);\r\ndiv(uint(-1),1);\r\nmul(uint(-1),1);\r\nsub(uint(-1),1);\r\n```\r\n\r\nI didn't test exhaustively, or work out the math, but my intuition says each of them can be exploited to output almost any desired value.\r\n\r\nI think any contracts that use the vulnerable code should be deprecated immediately.\r\n",
  "closed_by": {
    "login": "destenson",
    "id": 282538,
    "node_id": "MDQ6VXNlcjI4MjUzOA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/282538?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/destenson",
    "html_url": "https://github.com/destenson",
    "followers_url": "https://api.github.com/users/destenson/followers",
    "following_url": "https://api.github.com/users/destenson/following{/other_user}",
    "gists_url": "https://api.github.com/users/destenson/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/destenson/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/destenson/subscriptions",
    "organizations_url": "https://api.github.com/users/destenson/orgs",
    "repos_url": "https://api.github.com/users/destenson/repos",
    "events_url": "https://api.github.com/users/destenson/events{/privacy}",
    "received_events_url": "https://api.github.com/users/destenson/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1505/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1505/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/439593769",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1505#issuecomment-439593769",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1505",
    "id": 439593769,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzOTU5Mzc2OQ==",
    "user": {
      "login": "destenson",
      "id": 282538,
      "node_id": "MDQ6VXNlcjI4MjUzOA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/282538?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/destenson",
      "html_url": "https://github.com/destenson",
      "followers_url": "https://api.github.com/users/destenson/followers",
      "following_url": "https://api.github.com/users/destenson/following{/other_user}",
      "gists_url": "https://api.github.com/users/destenson/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/destenson/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/destenson/subscriptions",
      "organizations_url": "https://api.github.com/users/destenson/orgs",
      "repos_url": "https://api.github.com/users/destenson/repos",
      "events_url": "https://api.github.com/users/destenson/events{/privacy}",
      "received_events_url": "https://api.github.com/users/destenson/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-17T06:53:33Z",
    "updated_at": "2018-11-17T17:13:00Z",
    "author_association": "NONE",
    "body": "I would be remiss if I didn't post a fix to these. These are correct for all common cases and use significantly less gas than the faulty versions.\r\n\r\nEDIT: DO NOT USE (ALSO INCORRECT)\r\n```\r\nfunction add(uint a, uint b) internal pure returns(uint y) {\r\n        y = a + b;\r\n        require(int(y) >= 0);\r\n    }\r\n    \r\n    function div(uint a, uint b) internal pure returns(uint y) {\r\n        y = a / b;\r\n        require(int(y) >= 0);\r\n    }\r\n    \r\n    function mul(uint a, uint b) internal pure returns(uint y) {\r\n        y = a * b;\r\n        require(int(y) >= 0);\r\n    }\r\n    \r\n    function sub(uint a, uint b) internal pure returns(uint y) {\r\n        y = a - b;\r\n        require(int(y) >= 0);\r\n    }\r\n```\r\n\r\nOveruse of unsigned numbers is a common mistake among inexperienced software developers. As a result, the SafeMath library exists. And while it has noble intentions, it is **bad** idea.\r\n\r\nThe name SafeMath is especially bad because it's so very misleading. It implies that normal calculations are unsafe, and that if you use the library, you're safe.\r\n\r\nWhat's unsafe is using unsigned numbers for calculations and assuming they won't overflow. \r\n\r\nInstead of convincing people they should use a blanket library to make unsigned calculations safe, people should be taught when it's appropriate to use unsigned numbers and when it is not. When overflow is _not intended and expected_, they should _not be used_ in calculations.\r\n\r\nPeople should _always_ validate inputs, not depend on a library to do it, and _signed_ numbers should _always_ be used for calculations unless the possibility of overflow is _useful and intended_.\r\n\r\nThere are many good use cases for unsigned numbers. However, calculating balances is _not_ one of them, despite how much common sense it _seems_ to make.\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/439593769/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/439620533",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1505#issuecomment-439620533",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1505",
    "id": 439620533,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzOTYyMDUzMw==",
    "user": {
      "login": "redsquirrel",
      "id": 2512,
      "node_id": "MDQ6VXNlcjI1MTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2512?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/redsquirrel",
      "html_url": "https://github.com/redsquirrel",
      "followers_url": "https://api.github.com/users/redsquirrel/followers",
      "following_url": "https://api.github.com/users/redsquirrel/following{/other_user}",
      "gists_url": "https://api.github.com/users/redsquirrel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/redsquirrel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/redsquirrel/subscriptions",
      "organizations_url": "https://api.github.com/users/redsquirrel/orgs",
      "repos_url": "https://api.github.com/users/redsquirrel/repos",
      "events_url": "https://api.github.com/users/redsquirrel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/redsquirrel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-17T14:19:49Z",
    "updated_at": "2018-11-17T14:19:49Z",
    "author_association": "CONTRIBUTOR",
    "body": "Do you understand that `uint(-1)` returns 115792089237316195423570985008687907853269984665640564039457584007913129639935? \r\nAnd that by definition, casting an `uint` to an `int` will *always* result in an int that is `>= 0`.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/439620533/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/439626278",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1505#issuecomment-439626278",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1505",
    "id": 439626278,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzOTYyNjI3OA==",
    "user": {
      "login": "destenson",
      "id": 282538,
      "node_id": "MDQ6VXNlcjI4MjUzOA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/282538?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/destenson",
      "html_url": "https://github.com/destenson",
      "followers_url": "https://api.github.com/users/destenson/followers",
      "following_url": "https://api.github.com/users/destenson/following{/other_user}",
      "gists_url": "https://api.github.com/users/destenson/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/destenson/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/destenson/subscriptions",
      "organizations_url": "https://api.github.com/users/destenson/orgs",
      "repos_url": "https://api.github.com/users/destenson/repos",
      "events_url": "https://api.github.com/users/destenson/events{/privacy}",
      "received_events_url": "https://api.github.com/users/destenson/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-17T15:43:27Z",
    "updated_at": "2018-11-17T18:12:40Z",
    "author_association": "NONE",
    "body": "Yes, I do understand that `uint(-1)` is a large ```uint```. I was not aware that casting a ```uint``` to an ```int``` is always an ```int>=0```, though. If that's true, my \"fix\" is absolutely wrong. (Regardless, it _is_ definitely wrong for correct outputs that are ```>= 0x8000000000000000000000000000000000000000000000000000000000000000```.)\r\n\r\nHowever, I did test the above code with the same invalid inputs that caused the originals to incorrectly succeed, and they did throw, so the behavior I observed doesn't agree with your statement.\r\n\r\nMy experience with this and other languages agrees with my observation. Casting any ```uint``` greater than max ```int``` to ```int```, will result in an ```int``` that is always ```< 0```. One way to remember this is that casting doesn't change the data, it only reinterprets it. All the bits in ```uint(-1)``` are the same as in ```int(-1)```, so ```int(uint(-1))``` is negative.\r\n\r\nI could've cast any almost negative number (not just -1), and the functions will happily accept them without throwing if the other argument makes the conditions in each assert succeed. I believe this is a critical vulnerability since one can choose different inputs that will result in almost any arbitrary incorrect output.\r\n\r\nFor example:\r\n```\r\n    add(115792889237316195423570985008687907853269984665640564039457584007913129639928,8)\r\n```\r\nresults in\r\n```\r\n   800000000000000000000000000000000000000000000000000000000000000000000000\r\n```\r\nwhich is clearly wrong, if you expect the result to be the sum of the two numbers provided. My \"fix\" is also gives the incorrect result, so it may not be a good fix at all. In this case, the overflow silently occurs before passing to the function, exemplifying the reason _not_ to be using ```uint``` for general purpose calculations at all.\r\n\r\nCertainly I could be misunderstanding the purpose of this library, but if it doesn't prevent misuse like this, what is the point? Since it doesn't, the effect is to lull inexperienced developers into thinking they're safe if they use it, and they're really not.\r\n\r\nI have a lot of experience working on embedded systems with unsigned numbers, and the bottom line is unless you have a _good_ reason to use them (i.e. that overflow properties are useful or that the value is a collection of bits and doesn't represent a number... the fact that a balance should logically not be negative is _not_ a good reason), you should _always_ use signed numbers for calculations and validate inputs.\r\n\r\nThere's absolutely no reason to represent general purpose numbers, especially balances, with 256 bits instead of 255, when the consequences of doing so can be so unexpected and disastrous. Just use signed numbers and if they're not supposed to be negative, require or assert they're ```>=0```. In fact, all balances should really be 128-bit signed numbers so that no operation can result in an overflow when converted into ```uint``` afterwards for storage if positive inputs are asserted. \r\n\r\nUnfortunately, the total supply of most tokens with 18 decimals won't fit into 128-bits, so that's not a good option either.  :(",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/439626278/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/439638773",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1505#issuecomment-439638773",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1505",
    "id": 439638773,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzOTYzODc3Mw==",
    "user": {
      "login": "destenson",
      "id": 282538,
      "node_id": "MDQ6VXNlcjI4MjUzOA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/282538?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/destenson",
      "html_url": "https://github.com/destenson",
      "followers_url": "https://api.github.com/users/destenson/followers",
      "following_url": "https://api.github.com/users/destenson/following{/other_user}",
      "gists_url": "https://api.github.com/users/destenson/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/destenson/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/destenson/subscriptions",
      "organizations_url": "https://api.github.com/users/destenson/orgs",
      "repos_url": "https://api.github.com/users/destenson/repos",
      "events_url": "https://api.github.com/users/destenson/events{/privacy}",
      "received_events_url": "https://api.github.com/users/destenson/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-17T18:46:00Z",
    "updated_at": "2018-11-17T20:32:18Z",
    "author_association": "NONE",
    "body": "The fault is not with the library, _per se_, though it can be improved & I'm doing that today. The real issue is the rampant use of types that can overflow under the assumption they won't.\r\n\r\n@redsquirrel, and you're right that most of the examples I provided are invalid. Only the ```add(uint(-1),1)``` is actually incorrect. I'll find better examples for the others. I chose those because they were the simplest cases I found that seemed to be wrong, without thinking about what it was actually doing.\r\n\r\nBTW: Today, I'm not getting the same results as I was last night. Not even that add is failing to fail. Raising this issue was probably premature. I probably overflowed the inputs before passing them to the library. This mistake of mine, one that's very common among developers of any experience level, exemplifies the fallacy of using unsigned variables for general purpose calculations.\r\n\r\n(On a side note, my dad died somewhat unexpectedly 3 weeks ago, and his funeral was today, 1200 miles away, and I couldn't be there. I haven't been thinking very clearly as a result. I apologize for the alarmist nature of this issue, and for raising it prematurely.)",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/439638773/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/439703033",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1505#issuecomment-439703033",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1505",
    "id": 439703033,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzOTcwMzAzMw==",
    "user": {
      "login": "destenson",
      "id": 282538,
      "node_id": "MDQ6VXNlcjI4MjUzOA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/282538?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/destenson",
      "html_url": "https://github.com/destenson",
      "followers_url": "https://api.github.com/users/destenson/followers",
      "following_url": "https://api.github.com/users/destenson/following{/other_user}",
      "gists_url": "https://api.github.com/users/destenson/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/destenson/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/destenson/subscriptions",
      "organizations_url": "https://api.github.com/users/destenson/orgs",
      "repos_url": "https://api.github.com/users/destenson/repos",
      "events_url": "https://api.github.com/users/destenson/events{/privacy}",
      "received_events_url": "https://api.github.com/users/destenson/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-18T15:54:39Z",
    "updated_at": "2018-11-18T15:55:08Z",
    "author_association": "NONE",
    "body": "To follow up, this issue was caused by inadvertent overflow on my part before passing to the functions without realizing it. Then in my excitement to share what I found, I chose the simplest test cases I could find without realizing that they were not even showing what I thought I saw.\r\n\r\nUltimately, my issue is with Solidity. EVM operations overflow & that's fine. But as a high-level language, Solidity should only allow variables to overflow when they are intended to and generate code that reverts upon overflow in the default case. I suspect that would involve the addition of new overflowable types that work the same as existing ones, and replacing the existing ones with types that generate code that reverts upon overflow.\r\n\r\nThus, this issue is closed, and I apologize for bringing it up so prematurely.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/439703033/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
