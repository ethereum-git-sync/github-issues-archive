{
  "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/366",
  "repository_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts",
  "labels_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/366/labels{/name}",
  "comments_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/366/comments",
  "events_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/366/events",
  "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/366",
  "id": 249846704,
  "node_id": "MDU6SXNzdWUyNDk4NDY3MDQ=",
  "number": 366,
  "title": "Granularity of permissions",
  "user": {
    "login": "frangio",
    "id": 481465,
    "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
    "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/frangio",
    "html_url": "https://github.com/frangio",
    "followers_url": "https://api.github.com/users/frangio/followers",
    "following_url": "https://api.github.com/users/frangio/following{/other_user}",
    "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
    "organizations_url": "https://api.github.com/users/frangio/orgs",
    "repos_url": "https://api.github.com/users/frangio/repos",
    "events_url": "https://api.github.com/users/frangio/events{/privacy}",
    "received_events_url": "https://api.github.com/users/frangio/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 1000207718,
      "node_id": "MDU6TGFiZWwxMDAwMjA3NzE4",
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/labels/contracts",
      "name": "contracts",
      "color": "1d76db",
      "default": false,
      "description": "Smart contract code."
    },
    {
      "id": 1000230196,
      "node_id": "MDU6TGFiZWwxMDAwMjMwMTk2",
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/labels/breaking%20change",
      "name": "breaking change",
      "color": "b60205",
      "default": false,
      "description": "Changes that break backwards compatibility of the public API."
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": {
    "login": "nventuro",
    "id": 2530770,
    "node_id": "MDQ6VXNlcjI1MzA3NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/2530770?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nventuro",
    "html_url": "https://github.com/nventuro",
    "followers_url": "https://api.github.com/users/nventuro/followers",
    "following_url": "https://api.github.com/users/nventuro/following{/other_user}",
    "gists_url": "https://api.github.com/users/nventuro/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nventuro/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nventuro/subscriptions",
    "organizations_url": "https://api.github.com/users/nventuro/orgs",
    "repos_url": "https://api.github.com/users/nventuro/repos",
    "events_url": "https://api.github.com/users/nventuro/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nventuro/received_events",
    "type": "User",
    "site_admin": false
  },
  "assignees": [
    {
      "login": "nventuro",
      "id": 2530770,
      "node_id": "MDQ6VXNlcjI1MzA3NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2530770?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nventuro",
      "html_url": "https://github.com/nventuro",
      "followers_url": "https://api.github.com/users/nventuro/followers",
      "following_url": "https://api.github.com/users/nventuro/following{/other_user}",
      "gists_url": "https://api.github.com/users/nventuro/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nventuro/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nventuro/subscriptions",
      "organizations_url": "https://api.github.com/users/nventuro/orgs",
      "repos_url": "https://api.github.com/users/nventuro/repos",
      "events_url": "https://api.github.com/users/nventuro/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nventuro/received_events",
      "type": "User",
      "site_admin": false
    }
  ],
  "milestone": {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/milestones/3",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/milestone/3",
    "labels_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/milestones/3/labels",
    "id": 3479517,
    "node_id": "MDk6TWlsZXN0b25lMzQ3OTUxNw==",
    "number": 3,
    "title": "v2.0",
    "description": "Stable API",
    "creator": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "open_issues": 0,
    "closed_issues": 173,
    "state": "closed",
    "created_at": "2018-07-06T21:03:31Z",
    "updated_at": "2018-11-14T19:32:38Z",
    "due_on": "2018-10-19T07:00:00Z",
    "closed_at": "2018-11-14T19:32:38Z"
  },
  "comments": 7,
  "created_at": "2017-08-13T02:00:41Z",
  "updated_at": "2018-09-07T10:16:52Z",
  "closed_at": "2018-09-07T10:16:52Z",
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "Some contracts need to have an account with special permissions. An example is `MintableToken`, which has an address which is the only one allowed to mint tokens. These are currently implemented as `Ownable`, with the special permissions assigned to the `owner` (by marking some functions as `onlyOwner`).\r\n\r\nSometimes a single contract has more than one feature requiring special permissions. Imagine a `MintableToken` which is also a `PausableToken`. In such a case, the contract owner can both mint tokens and pause the token.\r\n\r\nThis goes against the security [principle of least privilege](https://en.wikipedia.org/wiki/Principle_of_least_privilege), and also makes some requirements harder to implement. As an example of the latter, suppose we have the requirement to disable minting after a crowdsale, but want to retain the ability to stop the contract in an emergency.\r\n\r\nFor the two reasons stated above, I believe we need to provide greater granularity of permissions. This is _kind of_ doable under the current ownership framework, by setting as `owner` a contract that can forward calls or not according to some logic. I don't dislike that, but I can see some problems with it.\r\n\r\nWe might want to provide the granularity _directly_, i.e. by making each privileged feature have a different address (or set of addresses) with permissions for it. At the same time it sounds like it could lead to an explosion of different permissions and roles which could be hard to manage.\r\n\r\nOpening up the topic for discussion. Do you agree that permissions need to be more granular? Have you run into this problem yourself?",
  "closed_by": {
    "login": "nventuro",
    "id": 2530770,
    "node_id": "MDQ6VXNlcjI1MzA3NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/2530770?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nventuro",
    "html_url": "https://github.com/nventuro",
    "followers_url": "https://api.github.com/users/nventuro/followers",
    "following_url": "https://api.github.com/users/nventuro/following{/other_user}",
    "gists_url": "https://api.github.com/users/nventuro/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nventuro/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nventuro/subscriptions",
    "organizations_url": "https://api.github.com/users/nventuro/orgs",
    "repos_url": "https://api.github.com/users/nventuro/repos",
    "events_url": "https://api.github.com/users/nventuro/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nventuro/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/366/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/366/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/322028273",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/366#issuecomment-322028273",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/366",
    "id": 322028273,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMyMjAyODI3Mw==",
    "user": {
      "login": "SCBuergel",
      "id": 11379673,
      "node_id": "MDQ6VXNlcjExMzc5Njcz",
      "avatar_url": "https://avatars.githubusercontent.com/u/11379673?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/SCBuergel",
      "html_url": "https://github.com/SCBuergel",
      "followers_url": "https://api.github.com/users/SCBuergel/followers",
      "following_url": "https://api.github.com/users/SCBuergel/following{/other_user}",
      "gists_url": "https://api.github.com/users/SCBuergel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/SCBuergel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SCBuergel/subscriptions",
      "organizations_url": "https://api.github.com/users/SCBuergel/orgs",
      "repos_url": "https://api.github.com/users/SCBuergel/repos",
      "events_url": "https://api.github.com/users/SCBuergel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/SCBuergel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-08-13T08:08:52Z",
    "updated_at": "2017-08-13T08:08:52Z",
    "author_association": "NONE",
    "body": "IMO we have to trade-off between granularity (ideally separate access control per-non-constant function) and easy of management (maybe a few roles to which we can subscribe accounts). Why not have a `hasRole(x)` modifier with some readable `enum x` and add that to every function? Disadvantage of that `enum x` is that is has to be known at compile time. Disadvantage of having super dynamic roles which we (or `owner`) can update at runtime is that security is hard to audit / continuously review.\r\n\r\nI have the feeling that this discussion assumes a bit of current-centralised-world thinking: Won't DAO-style votes replace a good bit of hard coded user roles? If the majority (of e.g. investors / voters) wants the DAO to do something then the majority should have the right to do so - and not be restricted by some centralised agent that has the privilege of a specific role. I know, we wont get to that DAO world just tomorrow so a decent role architecture would probably be required for now.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/322028273/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/322069265",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/366#issuecomment-322069265",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/366",
    "id": 322069265,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMyMjA2OTI2NQ==",
    "user": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-08-13T21:40:11Z",
    "updated_at": "2017-08-13T21:40:11Z",
    "author_association": "MEMBER",
    "body": "The enum approach sounds good for a project-specific contract, and we could recommend that to developers, but I don't think it'll be useful for a general purpose library like OpenZeppelin. Aside from having to be known at compile time, they are also not extensible by subclasses. We would have to have a global enum with all of OpenZeppelin's roles.\r\n\r\nAuditability is an important design objective, it's good you brought it up.\r\n\r\nWith respect to your second point, since a DAO is a smart contract it can be set as the `owner` itself, and other privileges can also be assigned to the DAO. Then it would have to go through the voting process to call any privileged function. Does that sound like what you had in mind? I think whatever role architecture we come up with will be equally applicable to a world were smart contracts are managed by DAOs.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/322069265/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/322115077",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/366#issuecomment-322115077",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/366",
    "id": 322115077,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMyMjExNTA3Nw==",
    "user": {
      "login": "SCBuergel",
      "id": 11379673,
      "node_id": "MDQ6VXNlcjExMzc5Njcz",
      "avatar_url": "https://avatars.githubusercontent.com/u/11379673?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/SCBuergel",
      "html_url": "https://github.com/SCBuergel",
      "followers_url": "https://api.github.com/users/SCBuergel/followers",
      "following_url": "https://api.github.com/users/SCBuergel/following{/other_user}",
      "gists_url": "https://api.github.com/users/SCBuergel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/SCBuergel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SCBuergel/subscriptions",
      "organizations_url": "https://api.github.com/users/SCBuergel/orgs",
      "repos_url": "https://api.github.com/users/SCBuergel/repos",
      "events_url": "https://api.github.com/users/SCBuergel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/SCBuergel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-08-14T07:08:25Z",
    "updated_at": "2017-08-14T07:08:25Z",
    "author_association": "NONE",
    "body": "TBH I had no perfect solution in mind but having an `owner`-DAO sounds like a reasonable way to go. It's probably more expensive in terms of gas (since we need another call), so maybe we could derive from that DAO instead of setting it as a (separate) owner account? Either way, having a well structured and abstracted DAO might come with little overhead compared to user roles: propose, vote, resolve (and take action if needed).\r\nA tokenised voting DAO would have the additional benefit of (a) supporting liquid democracy out of the box, (b) also being able to limit voters to a smaller privileged group (by just giving them tokens, which might be non-transferrable).",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/322115077/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/323922063",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/366#issuecomment-323922063",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/366",
    "id": 323922063,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMyMzkyMjA2Mw==",
    "user": {
      "login": "foundingnimo",
      "id": 2087890,
      "node_id": "MDQ6VXNlcjIwODc4OTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2087890?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/foundingnimo",
      "html_url": "https://github.com/foundingnimo",
      "followers_url": "https://api.github.com/users/foundingnimo/followers",
      "following_url": "https://api.github.com/users/foundingnimo/following{/other_user}",
      "gists_url": "https://api.github.com/users/foundingnimo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/foundingnimo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/foundingnimo/subscriptions",
      "organizations_url": "https://api.github.com/users/foundingnimo/orgs",
      "repos_url": "https://api.github.com/users/foundingnimo/repos",
      "events_url": "https://api.github.com/users/foundingnimo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/foundingnimo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-08-22T05:21:21Z",
    "updated_at": "2017-08-22T05:21:21Z",
    "author_association": "CONTRIBUTOR",
    "body": "I think there are multiple scenarios here. Having a distributed authorization model is very interesting and needs some design thinking. However - a simple Role Based Authentication Control is relatively simple to achieve. I have created sample code at https://github.com/duckranger/zeppelin-solidity/tree/rbac. \r\nInside the contracts/rbac directory you can find the RoleDirectory - which is the main role and user-role relationship repository.\r\nThe owner of the RoleDirectory may define system roles, and assign them to users.\r\nThere is also a Secured contract which allows for a withRole('..') modifier.\r\n\r\nIn contracts/examples - I added SampleRoleBasedAccess - which is Secured. Some methods there are then modified with the withRole modifier.\r\n\r\nThis should be easy enough to add more granular permissions if required.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/323922063/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/324759755",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/366#issuecomment-324759755",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/366",
    "id": 324759755,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMyNDc1OTc1NQ==",
    "user": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-08-24T21:15:04Z",
    "updated_at": "2017-08-24T21:15:04Z",
    "author_association": "MEMBER",
    "body": "I like it! I had taken a shot at RBAC with a Roles library [here](https://github.com/frangio/zeppelin-solidity/blob/feature/roles/contracts/Roles.sol). There are a couple of things in your implementation that I like better:\r\n\r\n1) I was planning to reimplement `Ownable` as a role like the rest, but I agree with your implementation now, in that it should remain a separate simpler ad-hoc role with the permission to manage roles itself.\r\n\r\n2) I hadn't added a central directory of roles and so it wasn't easy for an owner to externally manage roles out of the box.\r\n\r\nDo you feel that hierarchical levels are really needed? I think I'd rather keep things simpler, with no hierarchies, just a mapping of role names to role assignments.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/324759755/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/325073194",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/366#issuecomment-325073194",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/366",
    "id": 325073194,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMyNTA3MzE5NA==",
    "user": {
      "login": "foundingnimo",
      "id": 2087890,
      "node_id": "MDQ6VXNlcjIwODc4OTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2087890?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/foundingnimo",
      "html_url": "https://github.com/foundingnimo",
      "followers_url": "https://api.github.com/users/foundingnimo/followers",
      "following_url": "https://api.github.com/users/foundingnimo/following{/other_user}",
      "gists_url": "https://api.github.com/users/foundingnimo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/foundingnimo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/foundingnimo/subscriptions",
      "organizations_url": "https://api.github.com/users/foundingnimo/orgs",
      "repos_url": "https://api.github.com/users/foundingnimo/repos",
      "events_url": "https://api.github.com/users/foundingnimo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/foundingnimo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-08-26T02:03:32Z",
    "updated_at": "2017-08-26T08:58:58Z",
    "author_association": "CONTRIBUTOR",
    "body": "Thanks @frangio :)\r\n\r\n1. With owner I suppose you could do either, my concern was with existing code where you'd want to\r\nplug the RBAC mechanism into - and ensure that things don't suddenly break. However- implementers can do either, so it might be worth it?\r\n2. I don't think that a hierarchical role structure is absolutely necessary, but it can help in some situations, think team-lead and technical-manager situation for example - the technical-manager may have all the permissions of a team-lead, and some extra permissions. You could give the technical-manager 2 separate roles, or create a hierarchy where the technical-manager role is higher than the team-lead. This might be an overkill in some situations, so I created the 'short circuit' mechanism to make all roles the same level, and then you need to assign each individual role to users.\r\n\r\nWhat do you say?",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/325073194/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/383341404",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/366#issuecomment-383341404",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/366",
    "id": 383341404,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4MzM0MTQwNA==",
    "user": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-21T23:36:28Z",
    "updated_at": "2018-04-21T23:36:44Z",
    "author_association": "MEMBER",
    "body": "For the record, a solution for this was built in #580 in the form of `RBAC`. I'm keeping this issue open because the rest of OpenZeppelin still uses `Ownable` for everything.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/383341404/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
