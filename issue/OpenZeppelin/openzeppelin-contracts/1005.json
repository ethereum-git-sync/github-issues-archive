{
  "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1005",
  "repository_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts",
  "labels_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1005/labels{/name}",
  "comments_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1005/comments",
  "events_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1005/events",
  "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1005",
  "id": 332167012,
  "node_id": "MDU6SXNzdWUzMzIxNjcwMTI=",
  "number": 1005,
  "title": "Allow contracts to be delegates of a Bouncer",
  "user": {
    "login": "shrugs",
    "id": 1535001,
    "node_id": "MDQ6VXNlcjE1MzUwMDE=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1535001?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/shrugs",
    "html_url": "https://github.com/shrugs",
    "followers_url": "https://api.github.com/users/shrugs/followers",
    "following_url": "https://api.github.com/users/shrugs/following{/other_user}",
    "gists_url": "https://api.github.com/users/shrugs/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/shrugs/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/shrugs/subscriptions",
    "organizations_url": "https://api.github.com/users/shrugs/orgs",
    "repos_url": "https://api.github.com/users/shrugs/repos",
    "events_url": "https://api.github.com/users/shrugs/events{/privacy}",
    "received_events_url": "https://api.github.com/users/shrugs/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 18,
  "created_at": "2018-06-13T21:15:23Z",
  "updated_at": "2018-09-04T20:41:28Z",
  "closed_at": "2018-09-04T20:41:27Z",
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "## ðŸŽ‰ Description\r\n\r\ncontinuing the discussion from #973\r\n\r\nI want to explore the idea proposed by @PhABC where a contract can be the authority, but delegate authorizations to other arbitrary logic. This is a pattern that [0x v2 is also adopting](https://github.com/0xProject/0x-monorepo/blob/5b31d0aa3635ea524fb42d73cd6c713887dfef6a/packages/contracts/src/contracts/current/protocol/Exchange/mixins/MSignatureValidator.sol) for allowing the main exchange contract to delegate order acceptance logic to a contract.\r\n\r\n- [x] ðŸ“ˆ This is a feature request.\r\n",
  "closed_by": {
    "login": "shrugs",
    "id": 1535001,
    "node_id": "MDQ6VXNlcjE1MzUwMDE=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1535001?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/shrugs",
    "html_url": "https://github.com/shrugs",
    "followers_url": "https://api.github.com/users/shrugs/followers",
    "following_url": "https://api.github.com/users/shrugs/following{/other_user}",
    "gists_url": "https://api.github.com/users/shrugs/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/shrugs/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/shrugs/subscriptions",
    "organizations_url": "https://api.github.com/users/shrugs/orgs",
    "repos_url": "https://api.github.com/users/shrugs/repos",
    "events_url": "https://api.github.com/users/shrugs/events{/privacy}",
    "received_events_url": "https://api.github.com/users/shrugs/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1005/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1005/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/397090745",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1005#issuecomment-397090745",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1005",
    "id": 397090745,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5NzA5MDc0NQ==",
    "user": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-06-13T21:20:44Z",
    "updated_at": "2018-06-13T21:20:44Z",
    "author_association": "MEMBER",
    "body": "Regarding the snippet from https://github.com/OpenZeppelin/openzeppelin-solidity/pull/973#issuecomment-396419103, particularly this part:\r\n\r\n```solidity\r\n    const signer = signerOf(_sig)\r\n    if (signer.isContract()) {\r\n      // ERC165 detect and call on isValidSignature\r\n      return signer.isValidSignature(hash, _sig)\r\n```\r\n\r\nHow is the `signerOf` function implemented? It can't be `ecrecover` because contracts don't have private keys.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/397090745/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/397091647",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1005#issuecomment-397091647",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1005",
    "id": 397091647,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5NzA5MTY0Nw==",
    "user": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-06-13T21:23:54Z",
    "updated_at": "2018-06-13T21:23:54Z",
    "author_association": "MEMBER",
    "body": "Hm, I suppose `_sig` becomes some other structure instead of an actual signature. Interesting... I need to think about this. As I mentioned in #950 though, I would really like to hear the scenarios where this setup would be used!",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/397091647/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/397092863",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1005#issuecomment-397092863",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1005",
    "id": 397092863,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5NzA5Mjg2Mw==",
    "user": {
      "login": "shrugs",
      "id": 1535001,
      "node_id": "MDQ6VXNlcjE1MzUwMDE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1535001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shrugs",
      "html_url": "https://github.com/shrugs",
      "followers_url": "https://api.github.com/users/shrugs/followers",
      "following_url": "https://api.github.com/users/shrugs/following{/other_user}",
      "gists_url": "https://api.github.com/users/shrugs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shrugs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shrugs/subscriptions",
      "organizations_url": "https://api.github.com/users/shrugs/orgs",
      "repos_url": "https://api.github.com/users/shrugs/repos",
      "events_url": "https://api.github.com/users/shrugs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shrugs/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-06-13T21:27:32Z",
    "updated_at": "2018-06-13T21:27:32Z",
    "author_association": "CONTRIBUTOR",
    "body": "@frangio oh yeah, the signer would be the account as normal. and I the `msg.sender` is the contract itself. So it should be \r\n\r\n```solidity\r\n    if (msg.sender.isContract()) {\r\n      // ERC165 detect and call on isValidSignature\r\n      return msg.sender.isValidSignature(hash, _sig);\r\n    } else {\r\n      return hasRole(signerOf(_sig), ROLE_BOUNCER);\r\n    }\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/397092863/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/397580152",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1005#issuecomment-397580152",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1005",
    "id": 397580152,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5NzU4MDE1Mg==",
    "user": {
      "login": "PhABC",
      "id": 9306422,
      "node_id": "MDQ6VXNlcjkzMDY0MjI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9306422?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/PhABC",
      "html_url": "https://github.com/PhABC",
      "followers_url": "https://api.github.com/users/PhABC/followers",
      "following_url": "https://api.github.com/users/PhABC/following{/other_user}",
      "gists_url": "https://api.github.com/users/PhABC/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/PhABC/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/PhABC/subscriptions",
      "organizations_url": "https://api.github.com/users/PhABC/orgs",
      "repos_url": "https://api.github.com/users/PhABC/repos",
      "events_url": "https://api.github.com/users/PhABC/events{/privacy}",
      "received_events_url": "https://api.github.com/users/PhABC/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-06-15T10:26:21Z",
    "updated_at": "2018-06-15T10:30:49Z",
    "author_association": "CONTRIBUTOR",
    "body": "@frangio One example would be to have a \"smart account\" be an owner. A smart account is a contract that would hold all the assets of a user to facilitate a bunch of stuff and where different private key can perform different action. Some PV key could transfer assets and set permissions while others could simply play games or interact on social media on the behalf of this smart account. Smart accounts increase security and can add a bunch of critical functionalities to regular accounts in order to improve UX. \r\n\r\nNow, if this smart account, which would actually be my main account, is owner of a contract, or has a given role is some bouncer protected contract, it will need to have this kind of method. \r\n\r\nI have a strong feeling that most users will not use their regular account in the future, which offers very low security and poor UX and will most likely use a smart contract (that is, until account abstraction). \r\n\r\nFor more info about the future of accounts and the concept of smart accounts, check out Alex van de Sande's  15 mins [presentation](https://www.youtube.com/watch?v=qF2lhJzngto) and then [mine](https://www.youtube.com/watch?v=-Gc_cQgPCL8) at the EDCON Ux unconference. ",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/397580152/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/397717451",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1005#issuecomment-397717451",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1005",
    "id": 397717451,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5NzcxNzQ1MQ==",
    "user": {
      "login": "shrugs",
      "id": 1535001,
      "node_id": "MDQ6VXNlcjE1MzUwMDE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1535001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shrugs",
      "html_url": "https://github.com/shrugs",
      "followers_url": "https://api.github.com/users/shrugs/followers",
      "following_url": "https://api.github.com/users/shrugs/following{/other_user}",
      "gists_url": "https://api.github.com/users/shrugs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shrugs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shrugs/subscriptions",
      "organizations_url": "https://api.github.com/users/shrugs/orgs",
      "repos_url": "https://api.github.com/users/shrugs/repos",
      "events_url": "https://api.github.com/users/shrugs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shrugs/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-06-15T19:16:32Z",
    "updated_at": "2018-06-15T19:16:32Z",
    "author_association": "CONTRIBUTOR",
    "body": "yeah, very much like https://github.com/ethereum/EIPs/issues/725",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/397717451/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/398148459",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1005#issuecomment-398148459",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1005",
    "id": 398148459,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5ODE0ODQ1OQ==",
    "user": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-06-18T18:20:44Z",
    "updated_at": "2018-06-18T18:20:44Z",
    "author_association": "MEMBER",
    "body": "A quick thought. Isn't \"delegating authorization to other arbitrary logic\" already covered by being able to assign a role to any contract?",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/398148459/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/398275979",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1005#issuecomment-398275979",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1005",
    "id": 398275979,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5ODI3NTk3OQ==",
    "user": {
      "login": "shrugs",
      "id": 1535001,
      "node_id": "MDQ6VXNlcjE1MzUwMDE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1535001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shrugs",
      "html_url": "https://github.com/shrugs",
      "followers_url": "https://api.github.com/users/shrugs/followers",
      "following_url": "https://api.github.com/users/shrugs/following{/other_user}",
      "gists_url": "https://api.github.com/users/shrugs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shrugs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shrugs/subscriptions",
      "organizations_url": "https://api.github.com/users/shrugs/orgs",
      "repos_url": "https://api.github.com/users/shrugs/repos",
      "events_url": "https://api.github.com/users/shrugs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shrugs/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-06-19T05:10:19Z",
    "updated_at": "2018-06-19T05:10:19Z",
    "author_association": "CONTRIBUTOR",
    "body": "@frangio I suppose so, yeah; you can easily just compose signature bouncers together if you want to delegate logic like that. But I think the intention here is to remove the coupling between the signer and the \"is this signer allowed to sign for this sender\", to allow for identity contracts that are proxies with their own access control (like EIP725).\r\n\r\nThe only way for a bouncer contract to know if the signer is one of the approved addresses is to call back to this identity contract an ask. Perhaps it's possible to use the `getKeysByPurpose` method of 725 to get all of the action keys of an identity and see if it includes the signer of the voucher that was submitted to the bouncer? that way we avoid a custom method implementation. what do you think, @PhABC ?",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/398275979/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/399156343",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1005#issuecomment-399156343",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1005",
    "id": 399156343,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5OTE1NjM0Mw==",
    "user": {
      "login": "PhABC",
      "id": 9306422,
      "node_id": "MDQ6VXNlcjkzMDY0MjI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9306422?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/PhABC",
      "html_url": "https://github.com/PhABC",
      "followers_url": "https://api.github.com/users/PhABC/followers",
      "following_url": "https://api.github.com/users/PhABC/following{/other_user}",
      "gists_url": "https://api.github.com/users/PhABC/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/PhABC/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/PhABC/subscriptions",
      "organizations_url": "https://api.github.com/users/PhABC/orgs",
      "repos_url": "https://api.github.com/users/PhABC/repos",
      "events_url": "https://api.github.com/users/PhABC/events{/privacy}",
      "received_events_url": "https://api.github.com/users/PhABC/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-06-21T16:03:11Z",
    "updated_at": "2018-06-21T16:06:34Z",
    "author_association": "CONTRIBUTOR",
    "body": "> A quick thought. Isn't \"delegating authorization to other arbitrary logic\" already covered by being able to assign a role to any contract?\r\n\r\nYes, but with the [SignatureBouncer.sol](https://github.com/OpenZeppelin/openzeppelin-solidity/blob/master/contracts/access/SignatureBouncer.sol), a bouncer need to use an ECDSA signature, however allowing for contract could support arbitrary signature schemes and more. \r\n\r\n> Perhaps it's possible to use the getKeysByPurpose method of 725 to get all of the action keys of an identity and see if it includes the signer of the voucher that was submitted to the bouncer?\r\n\r\nI don't think this will be only useful for identities per say. It could be a contract that has multiple owners for example, a contract that has a lottery signer, where a new signer is randomly picked every X blocks without on-chain transactions, a validators subset in a proof of stake scheme or a PoW requirement provided with a signature. I'm giving random examples, but the general idea is a contract can have custom control mechanics that are not restricted to ECDSA signatures.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/399156343/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/406398159",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1005#issuecomment-406398159",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1005",
    "id": 406398159,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwNjM5ODE1OQ==",
    "user": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-19T20:07:14Z",
    "updated_at": "2018-07-19T20:07:14Z",
    "author_association": "MEMBER",
    "body": "Let's try to think this through a bit better. I think we can converge at a better design if we first try to define the problem clearly. (Apologies if I repeat stuff expressed elsewhere or if I'm too verbose. :sweat_smile: It was quite hard for me to get the necessary context so I hope that this can make it easier for others interested in the discussion.)\r\n\r\n`SignatureBouncer` currently allows a contract to validate that an ECDSA signature was created by one of a set of signers, and it allows to use valid signatures as authorization for function calls. This allows the authorization to happen off-chain, whereas something like `RBAC` requires first registering the prospective caller on-chain.\r\n\r\nThe feature request in this issue touches on two mostly orthogonal dimensions where `SignatureBouncer` can be generalized: 1) allowing signatures other than ECDSA, and 2) allowing external contracts to be validators. I say \"mostly\" because the second allows to trivially implement the first, but note that [the 0x implementation](https://github.com/0xProject/0x-monorepo/blob/5b31d0aa3635ea524fb42d73cd6c713887dfef6a/packages/contracts/src/contracts/current/protocol/Exchange/MixinSignatureValidator.sol) deals with each separately: there are different types of signatures that can be validated internally, and additionally there are Wallets and Validators that can be invoked externally.\r\n\r\nThere is another concept lingering around here which is that of smart accounts or identity contracts. In fact 0x's Wallet seems to be an implementation of the same concept. The basic idea is that a user can interact with blockchain applications through a smart contract instead of an account backed by a key, and this allows interesting new possibilities such as having the fees paid by someone else (a service provider of sorts). I actually had not understood the full implications of this idea until i watched @PhABC's [talk](https://www.youtube.com/watch?v=-Gc_cQgPCL8) linked earlier in this thread. Very interesting stuff!\r\n\r\nWhereas classical accounts are driven by ECDSA signed transactions, smart accounts are driven by the arbitrary logic of a smart contract. This is where it relates to the generalization of `SignatureBouncer`. `SignatureBouncer` validates ECDSA signatures, but smart accounts are not backed by a key and can never produce such signatures. Thus, a smart account can never be a bouncer, unless we generalize to other authentication schemes.\r\n\r\n@shrugs @PhABC Hopefully by this point we're all in the same page! Now for some of my own thoughts on what to do with all this.\r\n\r\nAfter thinking about it for a while, I'm completely sold on the idea of smart accounts and I want OpenZeppelin to have facilities for this type of authentication. However, I'm not sure if `SignatureBouncer` is the first place where we should include support for it, because its _raison d'etre_ is definining a finite set of signers (the actual bouncers, also called delegates in #1024) that can authorize other accounts to execute functions on the contract. The signers are assumed to be under the control of the contract \"owner\". Smart accounts are orthogonal to this.\r\n\r\n**tl;dr**: IMO, what needs to be generalized for smart accounts is `ECRecovery` (or something like it), which is used by `SignatureBouncer`, but not `SignatureBouncer` itself. I would close this issue and open a new one for that purpose. Only after figuring that out I would look into using those changes in `SignatureBouncer`.\r\n\r\nI think the reason this was conflated is that `SignatureBouncer` was the first contract to establish a \"protocol\" on how to grab an arbitrary transaction's `msg.data` and validate that it was signed by an account. We may want to explore the design space in that direction. I have some concrete ideas on how to improve that protocol which we can discuss ",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/406398159/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/406448897",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1005#issuecomment-406448897",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1005",
    "id": 406448897,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwNjQ0ODg5Nw==",
    "user": {
      "login": "shrugs",
      "id": 1535001,
      "node_id": "MDQ6VXNlcjE1MzUwMDE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1535001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shrugs",
      "html_url": "https://github.com/shrugs",
      "followers_url": "https://api.github.com/users/shrugs/followers",
      "following_url": "https://api.github.com/users/shrugs/following{/other_user}",
      "gists_url": "https://api.github.com/users/shrugs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shrugs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shrugs/subscriptions",
      "organizations_url": "https://api.github.com/users/shrugs/orgs",
      "repos_url": "https://api.github.com/users/shrugs/repos",
      "events_url": "https://api.github.com/users/shrugs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shrugs/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-19T23:59:26Z",
    "updated_at": "2018-07-19T23:59:26Z",
    "author_association": "CONTRIBUTOR",
    "body": "Ah! The point about abstracting ECRecovery to support this is really smart!\r\n\r\nAn update on the language I'm using for the Bouncer:\r\n- `bouncer` is the contract itself that does the sig verification\r\n- the EOA or contract signer is a `delegate`\r\n- the signature itself is a `ticket`\r\n\r\nSo it seems like the code changes that need to take place are\r\n\r\n1) a new issue/PR for adding `isValidSignature` stuff to ECRecovery\r\n  - 0x includes the delegate contract in the signature itself that's submitted aka it's not just `v + r + s`, it's something like `delegateAddress + v + r + s`. Current pattern in the #1024 is making the delegateAddress an additional argument in the function, but I think concatenating it might be a good move. Then calling it a `ticket` would make sense, since it's a new concept, not just a vrs signature.\r\n2) update #1024 to use this new ECRecovery code.\r\n\r\ndoes that sound right?\r\n\r\nthanks for your in-depth comment, @frangio !",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/406448897/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/406456175",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1005#issuecomment-406456175",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1005",
    "id": 406456175,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwNjQ1NjE3NQ==",
    "user": {
      "login": "PhABC",
      "id": 9306422,
      "node_id": "MDQ6VXNlcjkzMDY0MjI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9306422?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/PhABC",
      "html_url": "https://github.com/PhABC",
      "followers_url": "https://api.github.com/users/PhABC/followers",
      "following_url": "https://api.github.com/users/PhABC/following{/other_user}",
      "gists_url": "https://api.github.com/users/PhABC/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/PhABC/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/PhABC/subscriptions",
      "organizations_url": "https://api.github.com/users/PhABC/orgs",
      "repos_url": "https://api.github.com/users/PhABC/repos",
      "events_url": "https://api.github.com/users/PhABC/events{/privacy}",
      "received_events_url": "https://api.github.com/users/PhABC/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-20T00:48:53Z",
    "updated_at": "2018-07-20T01:14:33Z",
    "author_association": "CONTRIBUTOR",
    "body": "Great summary @frangio! Not too verbose at all :). One point I would like to both of your thoughts on is regarding \r\n\r\n> The signers are assumed to be under the control of the contract \"owner\". Smart accounts are orthogonal to this.\r\n\r\nPersonally, I don't think we can assume the signers are under the control of the `owner`. Imagine if we are part of a DAO and the `owner` is a vote based contract where we all vote on (e.g. multisig). My main account is an EOA, @shrugs's main account is a smart account (i.e smart contract) and @frangio's main account is another type of identity based smart contract. For some reason, @shrugs and @frangio are set as `ROLE_SUPER_BOUNCER` and i'm set as `ROLE_LAME_BOUNCER`. Matt will want the \"signer\" to be his smart account, since it makes it easier for him to manage all his devices + private keys, same goes for you and I just use my EOA account. Hence, 2 bouncers out of 3 are smart contracts. \r\n\r\nIf in 5 years everyone is using smart accounts as their main account, then this will be even more frequent. The smart account allows you to manage all your private keys as well, one for your phone, one for your laptop, one for your ledger, etc. Actually, a smart account would also have something like `RBAC` controlling EOA accounts priviledges, but that's a tangent. \r\n\r\nI personally believe the change is fairly simple and does not deviate from the initial goal of the Bouncer contract logic, it's simply allowing signers to be contracts. ",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/406456175/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/406462152",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1005#issuecomment-406462152",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1005",
    "id": 406462152,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwNjQ2MjE1Mg==",
    "user": {
      "login": "shrugs",
      "id": 1535001,
      "node_id": "MDQ6VXNlcjE1MzUwMDE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1535001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shrugs",
      "html_url": "https://github.com/shrugs",
      "followers_url": "https://api.github.com/users/shrugs/followers",
      "following_url": "https://api.github.com/users/shrugs/following{/other_user}",
      "gists_url": "https://api.github.com/users/shrugs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shrugs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shrugs/subscriptions",
      "organizations_url": "https://api.github.com/users/shrugs/orgs",
      "repos_url": "https://api.github.com/users/shrugs/repos",
      "events_url": "https://api.github.com/users/shrugs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shrugs/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-20T01:31:59Z",
    "updated_at": "2018-07-20T01:31:59Z",
    "author_association": "CONTRIBUTOR",
    "body": "delegates may or may not be related to the owner of the bouncer contract, yeah; I don't think that's the case in the current design either. for example, we could make a digital club where members are able to invite 5 other people via these signatures, so anyone with a signature from an existing member can join the club.\r\n\r\nverification goes like \"owner says identity contract is a delegate, so let's ask the identity contract if the signature is from one of the managed EOA accounts with the correct permissions and if so let them in.\"\r\n\r\nlmk if I interpreted that correctly?",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/406462152/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/406487458",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1005#issuecomment-406487458",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1005",
    "id": 406487458,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwNjQ4NzQ1OA==",
    "user": {
      "login": "PhABC",
      "id": 9306422,
      "node_id": "MDQ6VXNlcjkzMDY0MjI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9306422?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/PhABC",
      "html_url": "https://github.com/PhABC",
      "followers_url": "https://api.github.com/users/PhABC/followers",
      "following_url": "https://api.github.com/users/PhABC/following{/other_user}",
      "gists_url": "https://api.github.com/users/PhABC/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/PhABC/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/PhABC/subscriptions",
      "organizations_url": "https://api.github.com/users/PhABC/orgs",
      "repos_url": "https://api.github.com/users/PhABC/repos",
      "events_url": "https://api.github.com/users/PhABC/events{/privacy}",
      "received_events_url": "https://api.github.com/users/PhABC/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-20T04:42:27Z",
    "updated_at": "2018-07-20T04:42:27Z",
    "author_association": "CONTRIBUTOR",
    "body": "Sounds about right! Doesn't need to be identity, could be a multisig or whatever contract that has some access control method. ",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/406487458/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/406843508",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1005#issuecomment-406843508",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1005",
    "id": 406843508,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwNjg0MzUwOA==",
    "user": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-22T06:04:58Z",
    "updated_at": "2018-07-22T06:04:58Z",
    "author_association": "MEMBER",
    "body": "Ah, you're right, the delegates are not necessarily in control of the owner. The digital club is an interesting example.\r\n\r\nI agree with the steps you proposed @shrugs! I opened #1104.\r\n\r\nIs the concept of \"Invitees\" in the title of this issue still valid/relevant?",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/406843508/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/406891240",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1005#issuecomment-406891240",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1005",
    "id": 406891240,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwNjg5MTI0MA==",
    "user": {
      "login": "shrugs",
      "id": 1535001,
      "node_id": "MDQ6VXNlcjE1MzUwMDE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1535001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shrugs",
      "html_url": "https://github.com/shrugs",
      "followers_url": "https://api.github.com/users/shrugs/followers",
      "following_url": "https://api.github.com/users/shrugs/following{/other_user}",
      "gists_url": "https://api.github.com/users/shrugs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shrugs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shrugs/subscriptions",
      "organizations_url": "https://api.github.com/users/shrugs/orgs",
      "repos_url": "https://api.github.com/users/shrugs/repos",
      "events_url": "https://api.github.com/users/shrugs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shrugs/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-22T19:40:00Z",
    "updated_at": "2018-07-22T19:40:00Z",
    "author_association": "CONTRIBUTOR",
    "body": "@frangio ah, no, \"invitees\" have been replaced by \"delegate\"",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/406891240/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/406891320",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1005#issuecomment-406891320",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1005",
    "id": 406891320,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwNjg5MTMyMA==",
    "user": {
      "login": "shrugs",
      "id": 1535001,
      "node_id": "MDQ6VXNlcjE1MzUwMDE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1535001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shrugs",
      "html_url": "https://github.com/shrugs",
      "followers_url": "https://api.github.com/users/shrugs/followers",
      "following_url": "https://api.github.com/users/shrugs/following{/other_user}",
      "gists_url": "https://api.github.com/users/shrugs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shrugs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shrugs/subscriptions",
      "organizations_url": "https://api.github.com/users/shrugs/orgs",
      "repos_url": "https://api.github.com/users/shrugs/repos",
      "events_url": "https://api.github.com/users/shrugs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shrugs/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-22T19:41:04Z",
    "updated_at": "2018-07-22T19:41:04Z",
    "author_association": "CONTRIBUTOR",
    "body": "I'll close this issue for the benefit of organization, but will most likely use these same commits in a PR for #1104 (or one that is rebased off of it)",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/406891320/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/406891346",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1005#issuecomment-406891346",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1005",
    "id": 406891346,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwNjg5MTM0Ng==",
    "user": {
      "login": "shrugs",
      "id": 1535001,
      "node_id": "MDQ6VXNlcjE1MzUwMDE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1535001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shrugs",
      "html_url": "https://github.com/shrugs",
      "followers_url": "https://api.github.com/users/shrugs/followers",
      "following_url": "https://api.github.com/users/shrugs/following{/other_user}",
      "gists_url": "https://api.github.com/users/shrugs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shrugs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shrugs/subscriptions",
      "organizations_url": "https://api.github.com/users/shrugs/orgs",
      "repos_url": "https://api.github.com/users/shrugs/repos",
      "events_url": "https://api.github.com/users/shrugs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shrugs/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-22T19:41:28Z",
    "updated_at": "2018-07-22T19:41:28Z",
    "author_association": "CONTRIBUTOR",
    "body": "wait scratch that, this is an issue that we should keep up :D",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/406891346/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 1,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/418510685",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1005#issuecomment-418510685",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1005",
    "id": 418510685,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxODUxMDY4NQ==",
    "user": {
      "login": "shrugs",
      "id": 1535001,
      "node_id": "MDQ6VXNlcjE1MzUwMDE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1535001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shrugs",
      "html_url": "https://github.com/shrugs",
      "followers_url": "https://api.github.com/users/shrugs/followers",
      "following_url": "https://api.github.com/users/shrugs/following{/other_user}",
      "gists_url": "https://api.github.com/users/shrugs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shrugs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shrugs/subscriptions",
      "organizations_url": "https://api.github.com/users/shrugs/orgs",
      "repos_url": "https://api.github.com/users/shrugs/repos",
      "events_url": "https://api.github.com/users/shrugs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shrugs/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-09-04T20:41:27Z",
    "updated_at": "2018-09-04T20:41:27Z",
    "author_association": "CONTRIBUTOR",
    "body": "closing in favor of tracking via https://github.com/OpenZeppelin/openzeppelin-solidity/issues/1272",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/418510685/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
