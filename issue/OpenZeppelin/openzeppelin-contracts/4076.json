{
  "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4076",
  "repository_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts",
  "labels_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4076/labels{/name}",
  "comments_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4076/comments",
  "events_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4076/events",
  "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/4076",
  "id": 1600298256,
  "node_id": "I_kwDOA9tCBs5fYp0Q",
  "number": 4076,
  "title": "optimize SafeMath contract",
  "user": {
    "login": "codeislight1",
    "id": 104497451,
    "node_id": "U_kgDOBjqBKw",
    "avatar_url": "https://avatars.githubusercontent.com/u/104497451?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/codeislight1",
    "html_url": "https://github.com/codeislight1",
    "followers_url": "https://api.github.com/users/codeislight1/followers",
    "following_url": "https://api.github.com/users/codeislight1/following{/other_user}",
    "gists_url": "https://api.github.com/users/codeislight1/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/codeislight1/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/codeislight1/subscriptions",
    "organizations_url": "https://api.github.com/users/codeislight1/orgs",
    "repos_url": "https://api.github.com/users/codeislight1/repos",
    "events_url": "https://api.github.com/users/codeislight1/events{/privacy}",
    "received_events_url": "https://api.github.com/users/codeislight1/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 2,
  "created_at": "2023-02-27T01:41:22Z",
  "updated_at": "2023-02-27T23:00:31Z",
  "closed_at": null,
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "**Brief:**\r\nI was reviewing the contract, i noticed that there are couple of gas optimizations that are worth implementing:\r\n- functions are not utilizing the return variable area\r\n- unchecked operations are much more gas efficient\r\n- no need to assign default values\r\n\r\n**Implementation:**\r\n\r\n```solidity\r\n// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n// CAUTION\r\n// This version of SafeMath should only be used with Solidity 0.8 or later,\r\n// because it relies on the compiler's built in overflow checks.\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations.\r\n *\r\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\r\n * now has built in overflow checking.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool success, uint256 c) {\r\n        unchecked {\r\n            c = a + b;\r\n            if (c < a) c = 0;\r\n            else success = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool success, uint256 c) {\r\n        unchecked {\r\n            if (b <= a) {\r\n                c = a - b;\r\n                success = true;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool success, uint256 c) {\r\n        unchecked {\r\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n            // benefit is lost if 'b' is also tested.\r\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n            if (a == 0) success = true;\r\n            else {\r\n                c = a * b;\r\n                if (c / a != b) {\r\n                    c = 0;\r\n                } else {\r\n                    success = true;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool success, uint256 c) {\r\n        unchecked {\r\n            if (b > 0) {\r\n                c = a / b;\r\n                success = true;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool success, uint256 c) {\r\n        unchecked {\r\n            if (b > 0) {\r\n                c = a % b;\r\n                success = true;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        unchecked {\r\n            c = a + b;\r\n            require(c >= a, \"SafeMath: addition overflow\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        unchecked {\r\n            require(b <= a, \"SafeMath: subtraction overflow\");\r\n            c = a - b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        unchecked {\r\n            c = a * b;\r\n            require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        unchecked {\r\n            require(b > 0, \"SafeMath: division by zero\");\r\n            c = a / b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        unchecked {\r\n            require(b > 0, \"SafeMath: modulo by zero\");\r\n            return a % b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256 c) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            c = a - b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256 c) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            c = a / b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256 c) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            c = a % b;\r\n        }\r\n    }\r\n}\r\n```\r\n- let me know if I should make a PR, also for other math related libraries, ty!",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4076/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4076/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1445924094",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/4076#issuecomment-1445924094",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4076",
    "id": 1445924094,
    "node_id": "IC_kwDOA9tCBs5WLwz-",
    "user": {
      "login": "Amxx",
      "id": 2432299,
      "node_id": "MDQ6VXNlcjI0MzIyOTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2432299?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Amxx",
      "html_url": "https://github.com/Amxx",
      "followers_url": "https://api.github.com/users/Amxx/followers",
      "following_url": "https://api.github.com/users/Amxx/following{/other_user}",
      "gists_url": "https://api.github.com/users/Amxx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Amxx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Amxx/subscriptions",
      "organizations_url": "https://api.github.com/users/Amxx/orgs",
      "repos_url": "https://api.github.com/users/Amxx/repos",
      "events_url": "https://api.github.com/users/Amxx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Amxx/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-02-27T08:45:57Z",
    "updated_at": "2023-02-27T08:45:57Z",
    "author_association": "COLLABORATOR",
    "body": "Hello @co\n\nHave you measured the gas savings this would bring ?",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1445924094/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1447241972",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/4076#issuecomment-1447241972",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4076",
    "id": 1447241972,
    "node_id": "IC_kwDOA9tCBs5WQyj0",
    "user": {
      "login": "codeislight1",
      "id": 104497451,
      "node_id": "U_kgDOBjqBKw",
      "avatar_url": "https://avatars.githubusercontent.com/u/104497451?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/codeislight1",
      "html_url": "https://github.com/codeislight1",
      "followers_url": "https://api.github.com/users/codeislight1/followers",
      "following_url": "https://api.github.com/users/codeislight1/following{/other_user}",
      "gists_url": "https://api.github.com/users/codeislight1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/codeislight1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/codeislight1/subscriptions",
      "organizations_url": "https://api.github.com/users/codeislight1/orgs",
      "repos_url": "https://api.github.com/users/codeislight1/repos",
      "events_url": "https://api.github.com/users/codeislight1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/codeislight1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-02-27T22:59:19Z",
    "updated_at": "2023-02-27T23:00:31Z",
    "author_association": "NONE",
    "body": "I have tested it on Remix, the following are the gas savings:\r\n\r\n    // add saves 136 - 87 = 49\r\n    // sub saves 136 - 82 = 54\r\n    // mul saves 152 - 111 = 41\r\n    // div saves 121 - 108 = 13\r\n    // mod saves 121 - 108 = 13\r\n\r\n    // tryAdd saves 112 - 103 = 9 \r\n    // trySub saves 101 - 97 = 4\r\n    // tryMul saves 159 - 155 = 4\r\n    // tryDiv saves 127 - 123 = 4\r\n    // tryMod saves 127 - 123 = 4\r\n\r\nThe following is the script used to profile the gas savings:\r\n\r\n```solidity\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\nimport \"./SafeMath.sol\";\r\n\r\nabstract contract gasProfiler{\r\n    event Gas(uint gas);\r\n    event EmitMsg(string message);\r\n    event Gas(string message, uint gas);\r\n    modifier profile(){\r\n        uint gas = gasleft();\r\n        _;\r\n        emit Gas(gas - gasleft());\r\n    }\r\n}\r\ncontract Test is gasProfiler {\r\n    using SafeMath for uint256;\r\n    // 0 appended functions are the original one, while 1 refers for the optimized version\r\n    function testAdd0(uint a, uint b) internal profile() { // 136\r\n        a.add(b);\r\n    }\r\n    function testAdd1(uint a, uint b) internal profile() { // 87\r\n        a.add1(b);\r\n    }\r\n    function testSub0(uint a, uint b) internal profile() { // 136\r\n        a.sub(b);\r\n    }\r\n    function testSub1(uint a, uint b) internal profile() { // 82\r\n        a.sub1(b);\r\n    }\r\n    function testMul0(uint a, uint b) internal profile() { // 152\r\n        a.mul(b);\r\n    }\r\n    function testMul1(uint a, uint b) internal profile() { // 111\r\n        a.mul1(b);\r\n    }\r\n    function testDiv0(uint a, uint b) internal profile() { // 121\r\n        a.div(b);\r\n    }\r\n    function testDiv1(uint a, uint b) internal profile() { // 108\r\n        a.div1(b);\r\n    }\r\n    function testMod0(uint a, uint b) internal profile() { // 121\r\n        a.mod(b);\r\n    }\r\n    function testMod1(uint a, uint b) internal profile() { // 108\r\n        a.mod1(b);\r\n    }\r\n\r\n    function testTryAdd0(uint a, uint b) internal profile() { // 112\r\n        a.tryAdd(b);\r\n    }\r\n    function testTryAdd1(uint a, uint b) internal profile() { // 103\r\n        a.tryAdd1(b);\r\n    }\r\n    function testTrySub0(uint a, uint b) internal profile() { // 101\r\n        a.trySub(b);\r\n    }\r\n    function testTrySub1(uint a, uint b) internal profile() { // 97\r\n        a.trySub1(b);\r\n    }\r\n    function testTryMul0(uint a, uint b) internal profile() { // 159\r\n        a.tryMul(b);\r\n    }\r\n    function testTryMul1(uint a, uint b) internal profile() { // 155\r\n        a.tryMul1(b);\r\n    }\r\n    function testTryDiv0(uint a, uint b) internal profile() { // 127\r\n        a.tryDiv(b);\r\n    }\r\n    function testTryDiv1(uint a, uint b) internal profile() { // 123\r\n        a.tryDiv1(b);\r\n    }\r\n    function testTryMod0(uint a, uint b) internal profile() { // 127\r\n        a.tryMod(b);\r\n    }\r\n    function testTryMod1(uint a, uint b) internal profile() { // 123\r\n        a.tryMod1(b);\r\n    }\r\n\r\n    enum Operations {\r\n        add, sub, mul, div, mod, tryAdd, trySub, tryMul, tryDiv, tryMod\r\n    }\r\n\r\n    function run(uint a, uint b, Operations op) external {\r\n        if(op == Operations.add){\r\n            testAdd0(a,b);\r\n            testAdd1(a,b);\r\n        } else if(op == Operations.sub){\r\n            testSub0(a,b);\r\n            testSub1(a,b);\r\n        } else if(op == Operations.mul){\r\n            testMul0(a,b);\r\n            testMul1(a,b);\r\n        } else if(op == Operations.div){\r\n            testDiv0(a,b);\r\n            testDiv1(a,b);\r\n        } else if(op == Operations.mod){\r\n            testMod0(a,b);\r\n            testMod1(a,b);\r\n        } else if(op == Operations.tryAdd){\r\n            testTryAdd0(a,b);\r\n            testTryAdd1(a,b);\r\n        } else if(op == Operations.trySub){\r\n            testTrySub0(a,b);\r\n            testTrySub1(a,b);\r\n        } else if(op == Operations.tryMul){\r\n            testTryMul0(a,b);\r\n            testTryMul1(a,b);\r\n        } else if(op == Operations.tryDiv){\r\n            testTryDiv0(a,b);\r\n            testTryDiv1(a,b);\r\n        } else if(op == Operations.tryMod){\r\n            testTryMod0(a,b);\r\n            testTryMod1(a,b);\r\n        }\r\n    }\r\n}\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1447241972/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
