{
  "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1951",
  "repository_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts",
  "labels_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1951/labels{/name}",
  "comments_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1951/comments",
  "events_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1951/events",
  "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1951",
  "id": 507793702,
  "node_id": "MDU6SXNzdWU1MDc3OTM3MDI=",
  "number": 1951,
  "title": "ERC777 operators should be internal not private",
  "user": {
    "login": "sshelton76",
    "id": 46756847,
    "node_id": "MDQ6VXNlcjQ2NzU2ODQ3",
    "avatar_url": "https://avatars.githubusercontent.com/u/46756847?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/sshelton76",
    "html_url": "https://github.com/sshelton76",
    "followers_url": "https://api.github.com/users/sshelton76/followers",
    "following_url": "https://api.github.com/users/sshelton76/following{/other_user}",
    "gists_url": "https://api.github.com/users/sshelton76/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/sshelton76/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/sshelton76/subscriptions",
    "organizations_url": "https://api.github.com/users/sshelton76/orgs",
    "repos_url": "https://api.github.com/users/sshelton76/repos",
    "events_url": "https://api.github.com/users/sshelton76/events{/privacy}",
    "received_events_url": "https://api.github.com/users/sshelton76/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 6,
  "created_at": "2019-10-16T11:35:52Z",
  "updated_at": "2019-12-16T18:53:35Z",
  "closed_at": "2019-12-16T18:53:35Z",
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "**🧐 Motivation**\r\n\r\nThe current ERC777 code has a flaw that impacts security and usability.\r\n\r\nHere is the code in question.\r\n```\r\n// This isn't ever read from - it's only used to respond to the defaultOperators query.\r\n    address[] private _defaultOperatorsArray;\r\n\r\n    // Immutable, but accounts may revoke them (tracked in __revokedDefaultOperators).\r\n    mapping(address => bool) private _defaultOperators;\r\n```\r\n\r\nThis design makes it impossible to extend the contract by adding or removing default operators and it appears that this is by design, but the thinking behind it is flawed and introduces a security problem.\r\n\r\n\r\n**📝 Details**\r\n\r\nOperators especially default operators allow us to extend contracts in interesting and meaningful ways.  However the use cases are limited because you either need to declare the operators upfront or convince the individual users to individually approve / reject operators on a case by case basis.\r\n\r\nThis is a safety issue as well.  At present there is no way to blacklist an operator if it is later found to be misbehaving except for each user to reject them one by one.\r\n\r\nMaking _defaultOperatorsArray and mapping(address => bool) private _defaultOperators internal instead of private would allow for contracts which could add or remove default operators while still providing the user the ability to individually blacklist operators they do not want to interact with.\r\n\r\nI realize the logic behind the current design is that users should not be forced to accept new default operators at any random time.  Judging from the current design, the thinking appears to be that the users have the option to code review all operators prior to interacting with the ERC777 token.\r\n\r\nOstensibly that is true, but digging deeper it is easy to see many ways this could be abused.\r\n  \r\nThe default operators list could be pre-populated at construction time with either addresses from the developer's own wallet or contract addresses based on forward projecting future contract addresses using something like this https://ethereum.stackexchange.com/questions/24248/how-to-calculate-an-ethereum-contracts-address-during-its-creation-using-the-so\r\n\r\nThis moots the idea that the user would have complete information prior to interacting with an ERC777 contract and thus it is providing users with a false sense of security, while limiting actual security. This is because, the lack of ability to remove a default operator except on a user by user basis means that if an operator contract is found to be buggy or misbehaving one would need to expend a HUGE amount of effort to reach out to each user to individually blacklist said operator.  A lot of damage could be done in the interim.\r\n\r\nTo wit, I would ask that rather than change the ERC777 standard, we make two small modifications to the existing ERC777.sol which allow contracts to extend ERC777 by simply taking these private vars and declaring them internal.\r\n\r\nFrom there the contract creators can determine best how to add/remove and replace default operators and users will still maintain the ability to veto any operator they are uncomfortable with, but the devs can have an inbuilt process to deal with operators gone awry or adding new operators as opportunities to expand the use of the contract arise.",
  "closed_by": {
    "login": "frangio",
    "id": 481465,
    "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
    "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/frangio",
    "html_url": "https://github.com/frangio",
    "followers_url": "https://api.github.com/users/frangio/followers",
    "following_url": "https://api.github.com/users/frangio/following{/other_user}",
    "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
    "organizations_url": "https://api.github.com/users/frangio/orgs",
    "repos_url": "https://api.github.com/users/frangio/repos",
    "events_url": "https://api.github.com/users/frangio/events{/privacy}",
    "received_events_url": "https://api.github.com/users/frangio/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1951/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1951/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/542724612",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1951#issuecomment-542724612",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1951",
    "id": 542724612,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU0MjcyNDYxMg==",
    "user": {
      "login": "sshelton76",
      "id": 46756847,
      "node_id": "MDQ6VXNlcjQ2NzU2ODQ3",
      "avatar_url": "https://avatars.githubusercontent.com/u/46756847?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sshelton76",
      "html_url": "https://github.com/sshelton76",
      "followers_url": "https://api.github.com/users/sshelton76/followers",
      "following_url": "https://api.github.com/users/sshelton76/following{/other_user}",
      "gists_url": "https://api.github.com/users/sshelton76/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sshelton76/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sshelton76/subscriptions",
      "organizations_url": "https://api.github.com/users/sshelton76/orgs",
      "repos_url": "https://api.github.com/users/sshelton76/repos",
      "events_url": "https://api.github.com/users/sshelton76/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sshelton76/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-10-16T14:19:08Z",
    "updated_at": "2019-10-16T14:19:08Z",
    "author_association": "NONE",
    "body": "Alternatively adding the following lines to the official ERC777.sol would work as well\r\n\r\n```\r\n    function _addDefaultOperator(address operator) internal{\r\n        _defaultOperatorsArray.push(operator);\r\n        _defaultOperators[operator] = true;\r\n        emit AuthorizedOperator(operator, address(this));\r\n    }\r\n\r\n    function _removeDefaultOperator(address operator) internal{\r\n        _defaultOperators[operator] = false;\r\n        \r\n        for(uint x = 0; x <= _defaultOperatorsArray.length - 1; x++){\r\n            if(_defaultOperatorsArray[x] == operator){\r\n                _defaultOperatorsArray[x] = _defaultOperatorsArray[_defaultOperatorsArray.length - 1];\r\n                _defaultOperatorsArray.pop();\r\n                break;\r\n            }\r\n        }\r\n        emit RevokedOperator(operator, address(this));\r\n    }\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/542724612/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/542794509",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1951#issuecomment-542794509",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1951",
    "id": 542794509,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU0Mjc5NDUwOQ==",
    "user": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-10-16T16:54:03Z",
    "updated_at": "2019-10-16T16:54:03Z",
    "author_association": "MEMBER",
    "body": "Hi @sshelton76. Thank you for your report.\r\n\r\nWe implemented default operators in this way because the ERC777 standard quite unambiguously says so:\r\n\r\n>The token MAY define default operators. A default operator is an implicitly authorized operator for all holders. AuthorizedOperator events MUST NOT be emitted when defining the default operators. The rules below apply to default operators:\r\n>\r\n> * The token contract MUST define default operators at creation time.\r\n> * The default operators MUST be invariants. I.e., the token contract MUST NOT add or remove default operators ever.\r\n\r\nHave you raised this concern with the authors of the standard?\r\n\r\nI disagree with your following point though:\r\n\r\n>This moots the idea that the user would have complete information prior to interacting with an ERC777 contract and thus it is providing users with a false sense of security\r\n\r\nPrior to interacting the user can definitely see that they have only partial information regarding default operators if any of them either have empty bytecode (except if they've selfdestructed) or even if the source code is not available. Based on this they can decide either not to interact with the token or to revoke these operators before doing so. I don't see how any user can be particularly mislead here.\r\n\r\nLet me know your thoughts.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/542794509/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/542899311",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1951#issuecomment-542899311",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1951",
    "id": 542899311,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU0Mjg5OTMxMQ==",
    "user": {
      "login": "sshelton76",
      "id": 46756847,
      "node_id": "MDQ6VXNlcjQ2NzU2ODQ3",
      "avatar_url": "https://avatars.githubusercontent.com/u/46756847?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sshelton76",
      "html_url": "https://github.com/sshelton76",
      "followers_url": "https://api.github.com/users/sshelton76/followers",
      "following_url": "https://api.github.com/users/sshelton76/following{/other_user}",
      "gists_url": "https://api.github.com/users/sshelton76/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sshelton76/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sshelton76/subscriptions",
      "organizations_url": "https://api.github.com/users/sshelton76/orgs",
      "repos_url": "https://api.github.com/users/sshelton76/repos",
      "events_url": "https://api.github.com/users/sshelton76/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sshelton76/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-10-16T21:28:30Z",
    "updated_at": "2019-10-16T21:28:30Z",
    "author_association": "NONE",
    "body": ">We implemented default operators in this way because the ERC777 standard quite unambiguously says so\r\n\r\nOk I get that, it doesn't make it less of a hassle though.  It means you're going to end up with forks each solving this in their own way rather than having the reference implementation address the underlying issue.\r\n\r\n>Have you raised this concern with the authors of the standard?\r\n\r\nNo but it sounds like I probably need to.  Honestly though I'm unsure how to reach them and the fact this is a standard already means this ship has probably sailed already, but it is what it is I guess.\r\n\r\n>Prior to interacting the user can definitely see that they have only partial information regarding default operators if any of them either have empty bytecode (except if they've selfdestructed) or even if the source code is not available. Based on this they can decide either not to interact with the token or to revoke these operators before doing so. I don't see how any user can be particularly mislead here.\r\n\r\nYou're missing the point.  Yes a *highly* technical user can easily check to see if the bytecode of a default operator exists and decide whether or not that is something they care to interact with.  However even a slightly less than *highly* technical user is not going to have this ability and probably wouldn't even think to check beyond looking at the Etherscan abi front end.  \r\n\r\nLet's look at facts.  Nearly all users are already relying on the devs to properly vet any default operators beforehand.  The way it is right now, it doesn't solve the problem it's trying to solve (ensuring that only fully vetted code can touch the contract) and this introduces a false sense of security to the end users.  It also ties the dev's hands in the future.  That's what I meant by being mislead.  If the users are aware that default operators can change because there's already \"addDefaultOperator\" and \"removeDefaultOperator\" functions in the ABI then the stakes are much clearer upfront without requiring a full on code dive.\r\n\r\nHowever this is probably a discussion that needs to be had with the authors of the standard.  As it stands now you're trying to retain strict compliance with a standard that has a hole in it big enough to drive a Mack truck through because the authors appear to have missed the human element when considering the elements of security.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/542899311/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/542915118",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1951#issuecomment-542915118",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1951",
    "id": 542915118,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU0MjkxNTExOA==",
    "user": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-10-16T22:19:52Z",
    "updated_at": "2019-10-16T22:20:36Z",
    "author_association": "MEMBER",
    "body": ">probably wouldn't even think to check beyond looking at the Etherscan abi front end.\r\n\r\nI don't see how this is a problem for ERC777s in particular, and not for ERC20s or any other contract. The same goes for vetting the bytecode of a contract: it's already the case that only highly technical users can do it. And it's already the case that some contracts may have external actors with superpowers, be it operators, minters, owners, etc., that those vetting a contract have to pay attention to.\r\n\r\nI don't agree with your points but I'd encourage you to bring it up in https://ethereum-magicians.org. I'm curious about other people's opinions.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/542915118/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/543421854",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1951#issuecomment-543421854",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1951",
    "id": 543421854,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU0MzQyMTg1NA==",
    "user": {
      "login": "nventuro",
      "id": 2530770,
      "node_id": "MDQ6VXNlcjI1MzA3NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2530770?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nventuro",
      "html_url": "https://github.com/nventuro",
      "followers_url": "https://api.github.com/users/nventuro/followers",
      "following_url": "https://api.github.com/users/nventuro/following{/other_user}",
      "gists_url": "https://api.github.com/users/nventuro/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nventuro/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nventuro/subscriptions",
      "organizations_url": "https://api.github.com/users/nventuro/orgs",
      "repos_url": "https://api.github.com/users/nventuro/repos",
      "events_url": "https://api.github.com/users/nventuro/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nventuro/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-10-18T00:20:47Z",
    "updated_at": "2019-10-18T00:20:47Z",
    "author_association": "CONTRIBUTOR",
    "body": ">You're missing the point. Yes a highly technical user can easily check to see if the bytecode of a default operator exists and decide whether or not that is something they care to interact with. However even a slightly less than highly technical user is not going to have this ability and probably wouldn't even think to check beyond looking at the Etherscan abi front end.\r\n\r\nI agree with @frangio and this is not only true for ERC777 but also for _all_ smart contracts. The _vast_ majority of users will not read a contract's source code, and will rely on other people (presumably experts that they trust) to do their due diligence. This is not very different from how open source software is used.\r\n\r\nThat said, I do agree that the limitations the standard places on how the default operator list can be interacted with is too restrictive: the case you brought up where a malicious operator needs to be blacklisted neatly illustrates this point. I am unsure however as to how we should proceed in this regard, since deviating from the standard can have its unforeseen consequences. Perhaps we could add warnings on the documentation of the proposed additional functions?\r\n\r\n>The default operators list could be pre-populated at construction time with either addresses from the developer's own wallet or contract addresses based on forward projecting future contract addresses using something like this https://ethereum.stackexchange.com/questions/24248/how-to-calculate-an-ethereum-contracts-address-during-its-creation-using-the-so\r\n\r\nNote that it is possible to prove that an address belongs to an externally owned account by signing data using its private key, which contract's lack.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/543421854/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/566193074",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1951#issuecomment-566193074",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1951",
    "id": 566193074,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU2NjE5MzA3NA==",
    "user": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-12-16T18:53:35Z",
    "updated_at": "2019-12-16T18:53:35Z",
    "author_association": "MEMBER",
    "body": "Closing this as an issue with the standard and not our implementation.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/566193074/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
