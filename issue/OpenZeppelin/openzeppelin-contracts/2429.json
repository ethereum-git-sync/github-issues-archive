{
  "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2429",
  "repository_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts",
  "labels_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2429/labels{/name}",
  "comments_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2429/comments",
  "events_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2429/events",
  "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2429",
  "id": 760725081,
  "node_id": "MDU6SXNzdWU3NjA3MjUwODE=",
  "number": 2429,
  "title": "Proposal: ERC165Checker - getSupportedInterfaces",
  "user": {
    "login": "conspyrosy",
    "id": 1027439,
    "node_id": "MDQ6VXNlcjEwMjc0Mzk=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1027439?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/conspyrosy",
    "html_url": "https://github.com/conspyrosy",
    "followers_url": "https://api.github.com/users/conspyrosy/followers",
    "following_url": "https://api.github.com/users/conspyrosy/following{/other_user}",
    "gists_url": "https://api.github.com/users/conspyrosy/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/conspyrosy/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/conspyrosy/subscriptions",
    "organizations_url": "https://api.github.com/users/conspyrosy/orgs",
    "repos_url": "https://api.github.com/users/conspyrosy/repos",
    "events_url": "https://api.github.com/users/conspyrosy/events{/privacy}",
    "received_events_url": "https://api.github.com/users/conspyrosy/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 503650860,
      "node_id": "MDU6TGFiZWw1MDM2NTA4NjA=",
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/labels/feature",
      "name": "feature",
      "color": "b9db64",
      "default": false,
      "description": "New contracts, functions, or helpers."
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 8,
  "created_at": "2020-12-09T22:38:03Z",
  "updated_at": "2021-01-19T20:55:23Z",
  "closed_at": "2021-01-19T20:55:23Z",
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "**üßê Motivation**\r\n<!-- Is your feature request related to a specific problem? Is it just a crazy idea? Tell us about it! -->\r\n\r\nERC165 allows you to check which interfaces are implemented on a contract. OZ has a library `ERC165Checker.sol` with helper methods for checking if some contract implements an interface. First, it checks that ERC165 is implemented and then it checks if the interface is implemented. For batch checking interfaces, there is a separate method `supportsAllInterfaces` which checks if ERC165 is implemented only once, and then checks each interface to ensure they are implemented. Here is the relevant existing code:\r\n\r\n```solidity\r\n    /**\r\n     * @dev Returns true if `account` supports the interface defined by\r\n     * `interfaceId`. Support for {IERC165} itself is queried automatically.\r\n     *\r\n     * See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(address account, bytes4 interfaceId) internal view returns (bool) {\r\n        // query support of both ERC165 as per the spec and support of _interfaceId\r\n        return supportsERC165(account) &&\r\n            _supportsERC165Interface(account, interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if `account` supports all the interfaces defined in\r\n     * `interfaceIds`. Support for {IERC165} itself is queried automatically.\r\n     *\r\n     * Batch-querying can lead to gas savings by skipping repeated checks for\r\n     * {IERC165} support.\r\n     *\r\n     * See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsAllInterfaces(address account, bytes4[] memory interfaceIds) internal view returns (bool) {\r\n        // query support of ERC165 itself\r\n        if (!supportsERC165(account)) {\r\n            return false;\r\n        }\r\n\r\n        // query support of each interface in _interfaceIds\r\n        for (uint256 i = 0; i < interfaceIds.length; i++) {\r\n            if (!_supportsERC165Interface(account, interfaceIds[i])) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        // all interfaces supported\r\n        return true;\r\n    }\r\n\r\n```\r\n\r\nHowever, this batching mechanism reduces the result to a single boolean value \"true\" or \"false\". The proposal is to replicate this behaviour but for each interface return a separate true/false value as sometimes you anticipate some interfaces will be implemented but not all and can tailor your logic around the interfaces supported. The benefit of the helper method vs looping over `supportsInterface` is that redundant checks to `supportsERC165` aren't made.\r\n\r\n**üìù Details**\r\n<!-- Please describe your feature request in detail. -->\r\n\r\nHere is the code I've written which is pretty self-explanatory. If ERC165 isnt implemented on the contract then no checks can be made and an empty array is returned, else a boolean array is returned corresponding to the interface ids passed.\r\n\r\n```solidity\r\n/**\r\n     * @dev Returns a boolean array where each value corresponds to the\r\n     * interfaces passed in and whether they're supported or not. This allows\r\n     * you to batch check interfaces for a contract where your expectation\r\n     * is that some interfaces may not be supported.\r\n     *\r\n     * See {IERC165-supportsInterface}.\r\n     */\r\n    function getSupportedInterfaces(address account, bytes4[] memory interfaceIds) public view returns (bool[] memory) {\r\n        // query support of ERC165 itself\r\n        if (!supportsERC165(account)) {\r\n            //return an empty array to signify no checks could be made...\r\n            return new bool[](0);\r\n        }\r\n\r\n        // an array of booleans corresponding to interfaceIds and whether they're supported or not\r\n        bool[] memory interfaceIdsSupported = new bool[](interfaceIds.length);\r\n\r\n        // query support of each interface in interfaceIds\r\n        for (uint256 i = 0; i < interfaceIds.length; i++) {\r\n            if (!_supportsERC165Interface(account, interfaceIds[i])) {\r\n                interfaceIdsSupported[i] = false;\r\n            } else {\r\n                interfaceIdsSupported[i] = true;\r\n            }\r\n        }\r\n\r\n        return interfaceIdsSupported;\r\n    }\r\n```\r\n\r\nIf this proposal is good and OZ is happy to go ahead with it, I can write tests and PR in.\r\n\r\n<!-- Make sure that you have reviewed the OpenZeppelin Contributor Guidelines. -->\r\n<!-- https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/CONTRIBUTING.md -->\r\n",
  "closed_by": {
    "login": "frangio",
    "id": 481465,
    "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
    "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/frangio",
    "html_url": "https://github.com/frangio",
    "followers_url": "https://api.github.com/users/frangio/followers",
    "following_url": "https://api.github.com/users/frangio/following{/other_user}",
    "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
    "organizations_url": "https://api.github.com/users/frangio/orgs",
    "repos_url": "https://api.github.com/users/frangio/repos",
    "events_url": "https://api.github.com/users/frangio/events{/privacy}",
    "received_events_url": "https://api.github.com/users/frangio/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2429/reactions",
    "total_count": 4,
    "+1": 3,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 1
  },
  "timeline_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2429/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/742151134",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2429#issuecomment-742151134",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2429",
    "id": 742151134,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc0MjE1MTEzNA==",
    "user": {
      "login": "abcoathup",
      "id": 28278242,
      "node_id": "MDQ6VXNlcjI4Mjc4MjQy",
      "avatar_url": "https://avatars.githubusercontent.com/u/28278242?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/abcoathup",
      "html_url": "https://github.com/abcoathup",
      "followers_url": "https://api.github.com/users/abcoathup/followers",
      "following_url": "https://api.github.com/users/abcoathup/following{/other_user}",
      "gists_url": "https://api.github.com/users/abcoathup/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/abcoathup/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/abcoathup/subscriptions",
      "organizations_url": "https://api.github.com/users/abcoathup/orgs",
      "repos_url": "https://api.github.com/users/abcoathup/repos",
      "events_url": "https://api.github.com/users/abcoathup/events{/privacy}",
      "received_events_url": "https://api.github.com/users/abcoathup/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-12-10T00:29:28Z",
    "updated_at": "2020-12-10T00:29:28Z",
    "author_association": "CONTRIBUTOR",
    "body": "Hi @conspyrosy!  Thanks for the suggestion, it is really appreciated.  \r\n\r\nThe project owner will review your suggestion as soon as they can. \r\n\r\nAs per our conversation in the [forum](https://forum.openzeppelin.com/t/contributing-how-to-build-json-artifacts/4973/3?u=abcoathup), please wait until we have discussed this idea before writing any code or submitting a Pull Request, so we can go through the design beforehand.  We don‚Äôt want you to waste your time!",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/742151134/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/742853920",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2429#issuecomment-742853920",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2429",
    "id": 742853920,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc0Mjg1MzkyMA==",
    "user": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-12-10T23:00:35Z",
    "updated_at": "2020-12-10T23:00:35Z",
    "author_association": "MEMBER",
    "body": "Hi @conspyrosy, I think this idea makes sense. Have you ran into the need for a function like this yourself?\r\n\r\nFeel free to open a PR. I'm not sure if returning an empty array is the right choice in case the first check fails. Maybe if you explain the context where this is needed we can reason through it and find out what would be the best return value in that case.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/742853920/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/742881348",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2429#issuecomment-742881348",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2429",
    "id": 742881348,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc0Mjg4MTM0OA==",
    "user": {
      "login": "conspyrosy",
      "id": 1027439,
      "node_id": "MDQ6VXNlcjEwMjc0Mzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1027439?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/conspyrosy",
      "html_url": "https://github.com/conspyrosy",
      "followers_url": "https://api.github.com/users/conspyrosy/followers",
      "following_url": "https://api.github.com/users/conspyrosy/following{/other_user}",
      "gists_url": "https://api.github.com/users/conspyrosy/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/conspyrosy/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/conspyrosy/subscriptions",
      "organizations_url": "https://api.github.com/users/conspyrosy/orgs",
      "repos_url": "https://api.github.com/users/conspyrosy/repos",
      "events_url": "https://api.github.com/users/conspyrosy/events{/privacy}",
      "received_events_url": "https://api.github.com/users/conspyrosy/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-12-11T00:12:53Z",
    "updated_at": "2020-12-11T00:12:53Z",
    "author_association": "CONTRIBUTOR",
    "body": "@frangio Yes, i've ran into the need for this function which is why i'm proposing this. Let me explain my scenario:\r\n\r\nOptions protocols come in different shapes and sizes and support different functionality. I'm creating a generic OptionsAdapter that generifies options protocols into a single base interface so they can be interacted with in a uniform way. Additional functionality can be added on top of the base interface too. The adapter pattern is a fairly common pattern in software development. Here's the interfaces I have so far:\r\n\r\nIOptionsProtocol - base interface (mandatory)\r\nIDiscreteOptionsProtocol - for non-AMM type protocols where there is a rigid set of options\r\nIResellableOptionsProtocol - for protocols with a secondary market to sell options\r\n(probably more eventually, still a work in progress)\r\n\r\nUsers of the adapter will be able to pass in an arbitrary list of protocol addresses that conform to at least the base interface. So I want to form some kind of in memory object that describes the protocol features, which then informs me how i can interact with the protocol:\r\n\r\n```\r\nstruct ProtocolFeatures {\r\n    bool isDiscreteProtocol;\r\n    bool areOptionsResellable;\r\n    ...\r\n}\r\n```\r\n\r\nThat way I can pull the details of the protocol before looping some functionality and can also perform logic conditionally based on the functionality supported without having to make redundant calls per protocol action.\r\n\r\nIt's expected that ERC165 is always implemented on the addresses checked as the base interface (IOptionsProtocol) will implement ERC165. I think if the ERC165 method was not implemented it wouldnt really make sense to call this method as there's no way to check for interfaces that exist without it being implemented - that would imply the address isn't an IOptionsProtocol (which is actually an abstract contract implementing ERC165). The alternative to returning an empty array is reverting which I guess could be more appropriate since they passed in an invalid address?",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/742881348/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/743299771",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2429#issuecomment-743299771",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2429",
    "id": 743299771,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc0MzI5OTc3MQ==",
    "user": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-12-11T16:41:06Z",
    "updated_at": "2020-12-11T16:41:06Z",
    "author_association": "MEMBER",
    "body": ">The alternative to returning an empty array is reverting\r\n\r\nI was actually thinking of returning an array of the same length where all values are false.\r\n\r\nSo in your case this is what I imagine: you would ask if the contract supports `[IOptionsProtocol, IDiscreteOptionsProtocol, IResellableOptionsProtocol]`. Then if the contract doesn't even implement ERC165 you would receive an array full of false values. You would check the first array value that corresponds to `IOptionsProtocol` which is the minimum interface that you need the contract to support, and then you would revert because you read a `false` value.\r\n\r\nIn fact the same would happen if the contract implements ERC165 but none of these interfaces, and I think it makes sense to treat those two situations uniformly.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/743299771/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/743349458",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2429#issuecomment-743349458",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2429",
    "id": 743349458,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc0MzM0OTQ1OA==",
    "user": {
      "login": "conspyrosy",
      "id": 1027439,
      "node_id": "MDQ6VXNlcjEwMjc0Mzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1027439?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/conspyrosy",
      "html_url": "https://github.com/conspyrosy",
      "followers_url": "https://api.github.com/users/conspyrosy/followers",
      "following_url": "https://api.github.com/users/conspyrosy/following{/other_user}",
      "gists_url": "https://api.github.com/users/conspyrosy/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/conspyrosy/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/conspyrosy/subscriptions",
      "organizations_url": "https://api.github.com/users/conspyrosy/orgs",
      "repos_url": "https://api.github.com/users/conspyrosy/repos",
      "events_url": "https://api.github.com/users/conspyrosy/events{/privacy}",
      "received_events_url": "https://api.github.com/users/conspyrosy/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-12-11T18:19:12Z",
    "updated_at": "2020-12-11T18:19:46Z",
    "author_association": "CONTRIBUTOR",
    "body": "@frangio I was initially against this as I thought it was possible that an interface was implemented without implementing ERC165 (in which case the result wouldn't strictly be true). But i've just remembered in the design mentioned ERC165 is on the base level interface which everything extends from so this will work perfectly.\r\n\r\nI'll fix the code over the next week, add some tests then PR in.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/743349458/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/756091197",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2429#issuecomment-756091197",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2429",
    "id": 756091197,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc1NjA5MTE5Nw==",
    "user": {
      "login": "Amxx",
      "id": 2432299,
      "node_id": "MDQ6VXNlcjI0MzIyOTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2432299?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Amxx",
      "html_url": "https://github.com/Amxx",
      "followers_url": "https://api.github.com/users/Amxx/followers",
      "following_url": "https://api.github.com/users/Amxx/following{/other_user}",
      "gists_url": "https://api.github.com/users/Amxx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Amxx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Amxx/subscriptions",
      "organizations_url": "https://api.github.com/users/Amxx/orgs",
      "repos_url": "https://api.github.com/users/Amxx/repos",
      "events_url": "https://api.github.com/users/Amxx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Amxx/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-01-07T12:36:51Z",
    "updated_at": "2021-01-07T12:36:51Z",
    "author_association": "COLLABORATOR",
    "body": "@conspyrosy Are you still considering submitting a PR for this ?",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/756091197/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/757933023",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2429#issuecomment-757933023",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2429",
    "id": 757933023,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc1NzkzMzAyMw==",
    "user": {
      "login": "conspyrosy",
      "id": 1027439,
      "node_id": "MDQ6VXNlcjEwMjc0Mzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1027439?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/conspyrosy",
      "html_url": "https://github.com/conspyrosy",
      "followers_url": "https://api.github.com/users/conspyrosy/followers",
      "following_url": "https://api.github.com/users/conspyrosy/following{/other_user}",
      "gists_url": "https://api.github.com/users/conspyrosy/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/conspyrosy/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/conspyrosy/subscriptions",
      "organizations_url": "https://api.github.com/users/conspyrosy/orgs",
      "repos_url": "https://api.github.com/users/conspyrosy/repos",
      "events_url": "https://api.github.com/users/conspyrosy/events{/privacy}",
      "received_events_url": "https://api.github.com/users/conspyrosy/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-01-11T12:53:18Z",
    "updated_at": "2021-01-11T12:53:53Z",
    "author_association": "CONTRIBUTOR",
    "body": "@Amxx yes, bare with me as I'm very busy but I have the code. Just need to write a couple tests. I will try get it done over the next week.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/757933023/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/758778284",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2429#issuecomment-758778284",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2429",
    "id": 758778284,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc1ODc3ODI4NA==",
    "user": {
      "login": "conspyrosy",
      "id": 1027439,
      "node_id": "MDQ6VXNlcjEwMjc0Mzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1027439?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/conspyrosy",
      "html_url": "https://github.com/conspyrosy",
      "followers_url": "https://api.github.com/users/conspyrosy/followers",
      "following_url": "https://api.github.com/users/conspyrosy/following{/other_user}",
      "gists_url": "https://api.github.com/users/conspyrosy/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/conspyrosy/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/conspyrosy/subscriptions",
      "organizations_url": "https://api.github.com/users/conspyrosy/orgs",
      "repos_url": "https://api.github.com/users/conspyrosy/repos",
      "events_url": "https://api.github.com/users/conspyrosy/events{/privacy}",
      "received_events_url": "https://api.github.com/users/conspyrosy/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-01-12T16:33:59Z",
    "updated_at": "2021-01-12T16:33:59Z",
    "author_association": "CONTRIBUTOR",
    "body": "@Amxx @frangio see this PR: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/2469",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/758778284/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
