{
  "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2790",
  "repository_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts",
  "labels_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2790/labels{/name}",
  "comments_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2790/comments",
  "events_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2790/events",
  "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2790",
  "id": 953006557,
  "node_id": "MDU6SXNzdWU5NTMwMDY1NTc=",
  "number": 2790,
  "title": "Governor Contract comments",
  "user": {
    "login": "AugustoL",
    "id": 7763867,
    "node_id": "MDQ6VXNlcjc3NjM4Njc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/7763867?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/AugustoL",
    "html_url": "https://github.com/AugustoL",
    "followers_url": "https://api.github.com/users/AugustoL/followers",
    "following_url": "https://api.github.com/users/AugustoL/following{/other_user}",
    "gists_url": "https://api.github.com/users/AugustoL/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/AugustoL/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/AugustoL/subscriptions",
    "organizations_url": "https://api.github.com/users/AugustoL/orgs",
    "repos_url": "https://api.github.com/users/AugustoL/repos",
    "events_url": "https://api.github.com/users/AugustoL/events{/privacy}",
    "received_events_url": "https://api.github.com/users/AugustoL/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 5,
  "created_at": "2021-07-26T15:09:03Z",
  "updated_at": "2021-07-27T14:00:28Z",
  "closed_at": "2021-07-27T14:00:28Z",
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "**🧐 Motivation**\r\nJust wanted to comment on a few changes that might be useful in the Governor contract.\r\n\r\n**📝 Details**\r\nhttps://github.com/OpenZeppelin/openzeppelin-contracts/blob/566a774222707e424896c0c390a84dc3c13bdcb2/contracts/governance/Governor.sol#L87\r\n\r\nWouldn't it be better to have a proposal nonce make sure the proposal hash couldnt be replicated? Each proposal should be unique and shouldnt be able to be replicated, This can be attacked by reproducing the same hash and executing the same functions, If I have control over what will happen in the re receiver contract I might be able to find a way to make users vote on a malicious proposal that will execute the same calls BUT if I have control over the receiver contract (like upgradeability ownership) I can change the implementation before the proposal being executed.\r\n\r\nI would suggest hashing the proposal with the proposal nonce and the address of the governor contract (this will protect the poposal hash replication between networks).\r\n\r\nhttps://github.com/OpenZeppelin/openzeppelin-contracts/blob/566a774222707e424896c0c390a84dc3c13bdcb2/contracts/governance/Governor.sol#L223\r\n\r\nWouldnt it be cheaper if you just sent the proposal id hashed instead of all the parameters needed to hash it on chain?\r\n\r\nhttps://github.com/OpenZeppelin/openzeppelin-contracts/blob/566a774222707e424896c0c390a84dc3c13bdcb2/contracts/governance/Governor.sol#L40\r\n\r\nWhy using uint256 and not bytes32 as proposal id?\r\n\r\n",
  "closed_by": {
    "login": "frangio",
    "id": 481465,
    "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
    "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/frangio",
    "html_url": "https://github.com/frangio",
    "followers_url": "https://api.github.com/users/frangio/followers",
    "following_url": "https://api.github.com/users/frangio/following{/other_user}",
    "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
    "organizations_url": "https://api.github.com/users/frangio/orgs",
    "repos_url": "https://api.github.com/users/frangio/repos",
    "events_url": "https://api.github.com/users/frangio/events{/privacy}",
    "received_events_url": "https://api.github.com/users/frangio/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2790/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2790/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/886843483",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2790#issuecomment-886843483",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2790",
    "id": 886843483,
    "node_id": "IC_kwDOA9tCBs403Chb",
    "user": {
      "login": "Amxx",
      "id": 2432299,
      "node_id": "MDQ6VXNlcjI0MzIyOTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2432299?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Amxx",
      "html_url": "https://github.com/Amxx",
      "followers_url": "https://api.github.com/users/Amxx/followers",
      "following_url": "https://api.github.com/users/Amxx/following{/other_user}",
      "gists_url": "https://api.github.com/users/Amxx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Amxx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Amxx/subscriptions",
      "organizations_url": "https://api.github.com/users/Amxx/orgs",
      "repos_url": "https://api.github.com/users/Amxx/repos",
      "events_url": "https://api.github.com/users/Amxx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Amxx/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-07-26T16:19:00Z",
    "updated_at": "2021-07-26T16:19:09Z",
    "author_association": "COLLABORATOR",
    "body": "Hello @AugustoL \r\n\r\n> Wouldnt it be cheaper if you just sent the proposal id hashed instead of all the parameters needed to hash it on chain?\r\n\r\nThe proposal details are not stored onchain. If you only pass in the hashed proposal id, there is no way for the governor to know what to execute. You have this option (through the compound compatibility layer) of storing the data onchain, and passing it just the id ... but its more expensive to write the details onchain during the \"propose\" step then it is to re-provide them through calldata during the \"execute\" phase.\r\n\r\n> Why using uint256 and not bytes32 as proposal id?\r\n\r\nThis is to improve backward compatibility with governor alpha/bravo in particular in the events... \r\n",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/886843483/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/886847839",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2790#issuecomment-886847839",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2790",
    "id": 886847839,
    "node_id": "IC_kwDOA9tCBs403Dlf",
    "user": {
      "login": "Amxx",
      "id": 2432299,
      "node_id": "MDQ6VXNlcjI0MzIyOTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2432299?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Amxx",
      "html_url": "https://github.com/Amxx",
      "followers_url": "https://api.github.com/users/Amxx/followers",
      "following_url": "https://api.github.com/users/Amxx/following{/other_user}",
      "gists_url": "https://api.github.com/users/Amxx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Amxx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Amxx/subscriptions",
      "organizations_url": "https://api.github.com/users/Amxx/orgs",
      "repos_url": "https://api.github.com/users/Amxx/repos",
      "events_url": "https://api.github.com/users/Amxx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Amxx/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-07-26T16:24:54Z",
    "updated_at": "2021-07-26T16:24:54Z",
    "author_association": "COLLABORATOR",
    "body": "About the seeding of the proposal id:\r\n\r\n- I believe predictability is a great thing and adding a nonce would break that. In particular, someone could prepare a proposal, have it discussed and even having users prepare voting signature for it before its even proposed onchain.\r\n- Using a nonce would increase the gas cost (storage read + write to update it)\r\n- Votes are signed using ERC712, so they are protected against cross chains replay\r\n- In case of forks (or governor deployed at the same address on multiple network), the nonce protection is limited\r\n- I'd argue that the proposal ID identifies the proposal itself (what is going to happen, and what is the description). If you propose to execute the same thing on different governors, it is not absurd to imagine that the proposal is the same. Eg: I vote for governor X and governor Y to both execute proposal 0xABCD, because they both need to run it (through their own \"identities\")",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/886847839/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/887094824",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2790#issuecomment-887094824",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2790",
    "id": 887094824,
    "node_id": "IC_kwDOA9tCBs403_4o",
    "user": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-07-26T23:25:18Z",
    "updated_at": "2021-07-26T23:25:18Z",
    "author_association": "MEMBER",
    "body": "@AugustoL Can you describe the potential attack in more detail?",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/887094824/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/887103340",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2790#issuecomment-887103340",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2790",
    "id": 887103340,
    "node_id": "IC_kwDOA9tCBs404B9s",
    "user": {
      "login": "AugustoL",
      "id": 7763867,
      "node_id": "MDQ6VXNlcjc3NjM4Njc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7763867?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/AugustoL",
      "html_url": "https://github.com/AugustoL",
      "followers_url": "https://api.github.com/users/AugustoL/followers",
      "following_url": "https://api.github.com/users/AugustoL/following{/other_user}",
      "gists_url": "https://api.github.com/users/AugustoL/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/AugustoL/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/AugustoL/subscriptions",
      "organizations_url": "https://api.github.com/users/AugustoL/orgs",
      "repos_url": "https://api.github.com/users/AugustoL/repos",
      "events_url": "https://api.github.com/users/AugustoL/events{/privacy}",
      "received_events_url": "https://api.github.com/users/AugustoL/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-07-26T23:49:58Z",
    "updated_at": "2021-07-26T23:49:58Z",
    "author_association": "CONTRIBUTOR",
    "body": "@Amxx understood. The votes replay cross chain protection using ERC712 sounds great.\r\n\r\nIMO the functions that creates and execute or change the state of the proposals are not called that much, the more efficient functions have to the the voting function, those are the ones you want to be super efficient, so it might be better to spend a bit more gas in the proposal creation to have ensure unique proposals ids and dont have the need to share the entire proposal info everywhere in order to vote (description & calldatas & values)\r\n\r\n@frangio by executing a function to an proxy contract that can change the implementation between the proposal submission and execution, although now reading back at what I wrote this \"attack\" can be executed in any proposal execution, if the voters allow the execution to a proxy contract :grimacing: \r\n\r\nJust wanted to rise this comments, feel free to close the issue if you want.\r\n\r\nSomething similar we did in DXdao (is very similar to the Governor contract, but a bit more complex) is an ERC20 Guild contract, we did an audit too. Sharing here the link to the code and audit, maybe it is interesting 4 u.\r\n\r\nhttps://github.com/AugustoL/dxdao-contracts/blob/develop/contracts/erc20guild/ERC20Guild.sol\r\nhttps://github.com/AugustoL/dxdao-contracts/blob/develop/docs/erc20guild.pdf\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/887103340/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/887538121",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2790#issuecomment-887538121",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2790",
    "id": 887538121,
    "node_id": "IC_kwDOA9tCBs405sHJ",
    "user": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-07-27T14:00:27Z",
    "updated_at": "2021-07-27T14:00:27Z",
    "author_association": "MEMBER",
    "body": "> the need to share the entire proposal info everywhere in order to vote\r\n\r\nNote that voting only requires proposal id: `castVote(uint256 proposalId, uint8 support)`.\r\n\r\n> this \"attack\" can be executed in any proposal execution\r\n\r\nHaha yes, I thought so. Interesting point though, speaks to the importance of understanding what a proposal will do.\r\n\r\nThanks for the feedback!",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/887538121/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
