{
  "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3931",
  "repository_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts",
  "labels_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3931/labels{/name}",
  "comments_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3931/comments",
  "events_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3931/events",
  "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3931",
  "id": 1520872791,
  "node_id": "I_kwDOA9tCBs5apq1X",
  "number": 3931,
  "title": "Disallow Address Poisoning in ERC20",
  "user": {
    "login": "alex-ppg",
    "id": 31933616,
    "node_id": "MDQ6VXNlcjMxOTMzNjE2",
    "avatar_url": "https://avatars.githubusercontent.com/u/31933616?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/alex-ppg",
    "html_url": "https://github.com/alex-ppg",
    "followers_url": "https://api.github.com/users/alex-ppg/followers",
    "following_url": "https://api.github.com/users/alex-ppg/following{/other_user}",
    "gists_url": "https://api.github.com/users/alex-ppg/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/alex-ppg/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/alex-ppg/subscriptions",
    "organizations_url": "https://api.github.com/users/alex-ppg/orgs",
    "repos_url": "https://api.github.com/users/alex-ppg/repos",
    "events_url": "https://api.github.com/users/alex-ppg/events{/privacy}",
    "received_events_url": "https://api.github.com/users/alex-ppg/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/milestones/14",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/milestone/14",
    "labels_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/milestones/14/labels",
    "id": 8383880,
    "node_id": "MI_kwDOA9tCBs4Af-2I",
    "number": 14,
    "title": "4.9",
    "description": "",
    "creator": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "open_issues": 0,
    "closed_issues": 24,
    "state": "closed",
    "created_at": "2022-09-05T16:36:05Z",
    "updated_at": "2023-05-16T01:45:32Z",
    "due_on": null,
    "closed_at": "2023-05-16T01:45:32Z"
  },
  "comments": 28,
  "created_at": "2023-01-05T14:50:58Z",
  "updated_at": "2023-02-15T16:28:23Z",
  "closed_at": "2023-02-15T16:19:15Z",
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "**💻 Environment**\r\n\r\nEnvironment is not applicable to this bug report as it pertains to the smart contracts themselves and how they behave on-chain.\r\n\r\n**📝 Details**\r\n\r\nThe current token contract implementation of the [EIP-20](https://eips.ethereum.org/EIPS/eip-20) standard does not satisfy all `SHOULD` clauses of the standard definition and as such permits the commonly-known address poisoning attack by executing `transferFrom` instructions from arbitrary addresses with an `amount` of `0`.\r\n\r\nThe problem arises from how `_spendAllowance` evaluates the approval between the caller and the sender of the funds. In the EIP-20 standard, the following statement is present:\r\n\r\n> The function **SHOULD** throw unless the `_from` account has deliberately authorized the sender of the message via some mechanism\r\n\r\nThis condition is not validated for zero-value transfers as no \"deliberate\" approval is evaluated. To ensure we remain compliant with the EIP-20 standard in full, we cannot disallow zero-value transfers altogether. \r\n\r\nAs a workaround, we propose that the `require` check within `_spendAllowance` is refactored to evaluate a non-zero approval between the sender of funds and the caller.\r\n\r\nThis change will ensure maximal compatibility with existing contract systems, conform to the EIP-20 standard to a greater degree, and address the address poisoning attack we have seen being extensively exploited in recent times.\r\n\r\n**🔢 Code to reproduce bug**\r\n\r\nA simple Solidity smart contract to illustrate the bug in action:\r\n\r\n```solidity\r\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\r\n\r\ncontract Poisoning {\r\n    ERC20 public immutable token;\r\n\r\n    constructor() {\r\n        token = new ERC20(\"Test\", \"TST\");\r\n    }\r\n\r\n    function poison(address from_, address to_) external {\r\n        require(token.allowance(from_, address(this)) == 0);\r\n        token.transferFrom(from_, to_, 0);\r\n    }\r\n}\r\n```\r\n\r\nInvoking the `poison` function with arbitrary `from_` and `to_` arguments will successfully perform a `transferFrom` invocation even when the approval between `from_` (the sender of funds) and `address(this)` (the caller of the `transferFrom` function) has been set to `0`.\r\n\r\nThis behaviour permits polluting the transfer history of an account on blockchain explorers which in turn can cause users to be misled and copy incorrect addresses when performing their own valid transfers.",
  "closed_by": {
    "login": "frangio",
    "id": 481465,
    "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
    "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/frangio",
    "html_url": "https://github.com/frangio",
    "followers_url": "https://api.github.com/users/frangio/followers",
    "following_url": "https://api.github.com/users/frangio/following{/other_user}",
    "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
    "organizations_url": "https://api.github.com/users/frangio/orgs",
    "repos_url": "https://api.github.com/users/frangio/repos",
    "events_url": "https://api.github.com/users/frangio/events{/privacy}",
    "received_events_url": "https://api.github.com/users/frangio/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3931/reactions",
    "total_count": 2,
    "+1": 2,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3931/timeline",
  "performed_via_github_app": null,
  "state_reason": "not_planned"
}
[
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1372330688",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3931#issuecomment-1372330688",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3931",
    "id": 1372330688,
    "node_id": "IC_kwDOA9tCBs5RzBrA",
    "user": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-01-05T15:02:36Z",
    "updated_at": "2023-01-05T15:03:48Z",
    "author_association": "MEMBER",
    "body": "Thanks @alex-ppg. This was on our radar as well.\r\n\r\nI don't see this as a compliance issue because the EIP-20 spec is not at all clear due to the contradicting statements about transfers of 0 value and deliberate authorization, and also because \"SHOULD\" doesn't mean \"MUST\".\r\n\r\nThat said, I do agree that we should prevent address poisoning in our implementation.\r\n\r\n> As a workaround, we propose that the `require` check within `_spendAllowance` is refactored to evaluate a non-zero approval between the sender of funds and the `msg.sender` in case the `amount` is being specified as `0`.\r\n\r\nNot sure I understand the suggestion here.\r\n\r\nWhat we are considering is essentially adding `require(currentAllowance != 0)` in `spendAllowance`. Is this what you mean?",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1372330688/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1372335081",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3931#issuecomment-1372335081",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3931",
    "id": 1372335081,
    "node_id": "IC_kwDOA9tCBs5RzCvp",
    "user": {
      "login": "alex-ppg",
      "id": 31933616,
      "node_id": "MDQ6VXNlcjMxOTMzNjE2",
      "avatar_url": "https://avatars.githubusercontent.com/u/31933616?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/alex-ppg",
      "html_url": "https://github.com/alex-ppg",
      "followers_url": "https://api.github.com/users/alex-ppg/followers",
      "following_url": "https://api.github.com/users/alex-ppg/following{/other_user}",
      "gists_url": "https://api.github.com/users/alex-ppg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/alex-ppg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/alex-ppg/subscriptions",
      "organizations_url": "https://api.github.com/users/alex-ppg/orgs",
      "repos_url": "https://api.github.com/users/alex-ppg/repos",
      "events_url": "https://api.github.com/users/alex-ppg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/alex-ppg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-01-05T15:06:03Z",
    "updated_at": "2023-01-05T15:06:03Z",
    "author_association": "NONE",
    "body": "Thanks for the swift response @frangio, evaluating just the `currentAllowance` as non-zero is an adequate remediation to the issue. My proposal was to do it conditionally only when `amount_` was `0`, but evaluating it as non-zero outright is identical and would actually incur less of a gas overhead. Looking forward to seeing this implemented sooner than later as it should be a small change.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1372335081/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1372337811",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3931#issuecomment-1372337811",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3931",
    "id": 1372337811,
    "node_id": "IC_kwDOA9tCBs5RzDaT",
    "user": {
      "login": "alex-ppg",
      "id": 31933616,
      "node_id": "MDQ6VXNlcjMxOTMzNjE2",
      "avatar_url": "https://avatars.githubusercontent.com/u/31933616?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/alex-ppg",
      "html_url": "https://github.com/alex-ppg",
      "followers_url": "https://api.github.com/users/alex-ppg/followers",
      "following_url": "https://api.github.com/users/alex-ppg/following{/other_user}",
      "gists_url": "https://api.github.com/users/alex-ppg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/alex-ppg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/alex-ppg/subscriptions",
      "organizations_url": "https://api.github.com/users/alex-ppg/orgs",
      "repos_url": "https://api.github.com/users/alex-ppg/repos",
      "events_url": "https://api.github.com/users/alex-ppg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/alex-ppg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-01-05T15:08:08Z",
    "updated_at": "2023-01-05T15:08:08Z",
    "author_association": "NONE",
    "body": "Updated original issue to illustrate only the need for `require(currentAllowance != 0)`, thanks for the feedback @frangio ",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1372337811/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1373582526",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3931#issuecomment-1373582526",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3931",
    "id": 1373582526,
    "node_id": "IC_kwDOA9tCBs5R3zS-",
    "user": {
      "login": "Amxx",
      "id": 2432299,
      "node_id": "MDQ6VXNlcjI0MzIyOTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2432299?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Amxx",
      "html_url": "https://github.com/Amxx",
      "followers_url": "https://api.github.com/users/Amxx/followers",
      "following_url": "https://api.github.com/users/Amxx/following{/other_user}",
      "gists_url": "https://api.github.com/users/Amxx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Amxx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Amxx/subscriptions",
      "organizations_url": "https://api.github.com/users/Amxx/orgs",
      "repos_url": "https://api.github.com/users/Amxx/repos",
      "events_url": "https://api.github.com/users/Amxx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Amxx/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-01-06T12:51:19Z",
    "updated_at": "2023-01-06T12:52:59Z",
    "author_association": "COLLABORATOR",
    "body": "The simplest way to implement this would probably be to update the `_spendAllowance` function like this:\r\n\r\n```diff\r\nfunction _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\r\n    uint256 currentAllowance = allowance(owner, spender);\r\n    if (currentAllowance != type(uint256).max) {\r\n-       require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\r\n+       require(currentAllowance >= Math.max(amount, 1), \"ERC20: insufficient allowance\");\r\n        unchecked {\r\n            _approve(owner, spender, currentAllowance - amount);\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nStill, we are worried that this breaking change could cause real composability issues. DeFi is so big, its difficult for us to understand which legitimate workflows, if any, this might break. We don't want the fix to cause more issues than the original problem.\r\n\r\nWe should keep in mind that this poisoning attack is not an onchain vulnerability. Assets are safe. Its an issue that affect offchain interpretation of the logs. If we are to change onchain code to fix offchain missunderstandings, we better make sure that we are not breaking onchain workflows in the process.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1373582526/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1373600348",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3931#issuecomment-1373600348",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3931",
    "id": 1373600348,
    "node_id": "IC_kwDOA9tCBs5R33pc",
    "user": {
      "login": "alex-ppg",
      "id": 31933616,
      "node_id": "MDQ6VXNlcjMxOTMzNjE2",
      "avatar_url": "https://avatars.githubusercontent.com/u/31933616?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/alex-ppg",
      "html_url": "https://github.com/alex-ppg",
      "followers_url": "https://api.github.com/users/alex-ppg/followers",
      "following_url": "https://api.github.com/users/alex-ppg/following{/other_user}",
      "gists_url": "https://api.github.com/users/alex-ppg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/alex-ppg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/alex-ppg/subscriptions",
      "organizations_url": "https://api.github.com/users/alex-ppg/orgs",
      "repos_url": "https://api.github.com/users/alex-ppg/repos",
      "events_url": "https://api.github.com/users/alex-ppg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/alex-ppg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-01-06T13:09:48Z",
    "updated_at": "2023-01-06T13:09:48Z",
    "author_association": "NONE",
    "body": "An alternative to this would be re-evaluating the rationale behind EIP-20's `MUST` keyword for firing an event in case of a zero-value transfer.\r\n\r\nHonestly, the use-case of such zero-value events does not appear to provide any real value off-chain. The EIP-20's edit history indicates that the language [was using `should` before it was changed to `MUST`](https://github.com/ethereum/EIPs/commit/0de522e2175ea8ebcfe5f5459b5f67e4479ff554), however, I was not able to identify any additional background about why this change was made.\r\n\r\nNot emitting the `Transfer` event for zero-value `transferFrom` invocations seems like an adequate solution to solve this issue without affecting on-chain code whatsoever.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1373600348/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1373612433",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3931#issuecomment-1373612433",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3931",
    "id": 1373612433,
    "node_id": "IC_kwDOA9tCBs5R36mR",
    "user": {
      "login": "Amxx",
      "id": 2432299,
      "node_id": "MDQ6VXNlcjI0MzIyOTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2432299?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Amxx",
      "html_url": "https://github.com/Amxx",
      "followers_url": "https://api.github.com/users/Amxx/followers",
      "following_url": "https://api.github.com/users/Amxx/following{/other_user}",
      "gists_url": "https://api.github.com/users/Amxx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Amxx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Amxx/subscriptions",
      "organizations_url": "https://api.github.com/users/Amxx/orgs",
      "repos_url": "https://api.github.com/users/Amxx/repos",
      "events_url": "https://api.github.com/users/Amxx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Amxx/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-01-06T13:16:32Z",
    "updated_at": "2023-01-06T13:18:21Z",
    "author_association": "COLLABORATOR",
    "body": "> An alternative to this would be re-evaluating the rationale behind EIP-20's `MUST` keyword for firing an event in case of a zero-value transfer.\r\n\r\n**Strongly disagree.**\r\n\r\nEIP-20 is final. It has been for a long time, and there is no mechanism to update it. Even if we could update it, you would not be able to change the behavior of the many non-upgradeable contracts already onchain. \r\n\r\nKeep in mind that triggering the event is not the issue here. The issue is in the way offchain tools show these events, and in the way users trust the data they see on these offchain tools.\r\n\r\nIf you want to change something that has been here for years, I would argue we should change etherescan (to not show these 0 value transfers by default, unless a toggle is activated) rather than changing EIP-20.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1373612433/reactions",
      "total_count": 6,
      "+1": 6,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1373617178",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3931#issuecomment-1373617178",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3931",
    "id": 1373617178,
    "node_id": "IC_kwDOA9tCBs5R37wa",
    "user": {
      "login": "pcaversaccio",
      "id": 25297591,
      "node_id": "MDQ6VXNlcjI1Mjk3NTkx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25297591?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pcaversaccio",
      "html_url": "https://github.com/pcaversaccio",
      "followers_url": "https://api.github.com/users/pcaversaccio/followers",
      "following_url": "https://api.github.com/users/pcaversaccio/following{/other_user}",
      "gists_url": "https://api.github.com/users/pcaversaccio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pcaversaccio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pcaversaccio/subscriptions",
      "organizations_url": "https://api.github.com/users/pcaversaccio/orgs",
      "repos_url": "https://api.github.com/users/pcaversaccio/repos",
      "events_url": "https://api.github.com/users/pcaversaccio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pcaversaccio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-01-06T13:21:18Z",
    "updated_at": "2023-01-06T13:21:18Z",
    "author_association": "CONTRIBUTOR",
    "body": "I would like to quickly highlight that OZ has always been focused on getting the on-chain behavior right in first place. That's why for example my PR was not accepted https://github.com/OpenZeppelin/openzeppelin-contracts/pull/3381. To be consistent with the past, I would strongly advocate talking to off-chain tools like Etherscan & co to fix that issue... (for instance, there is an _advanced view_ for internal tx about zero value transactions - the same approach could be taken here for token transfers). ",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1373617178/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1373631681",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3931#issuecomment-1373631681",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3931",
    "id": 1373631681,
    "node_id": "IC_kwDOA9tCBs5R3_TB",
    "user": {
      "login": "alex-ppg",
      "id": 31933616,
      "node_id": "MDQ6VXNlcjMxOTMzNjE2",
      "avatar_url": "https://avatars.githubusercontent.com/u/31933616?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/alex-ppg",
      "html_url": "https://github.com/alex-ppg",
      "followers_url": "https://api.github.com/users/alex-ppg/followers",
      "following_url": "https://api.github.com/users/alex-ppg/following{/other_user}",
      "gists_url": "https://api.github.com/users/alex-ppg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/alex-ppg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/alex-ppg/subscriptions",
      "organizations_url": "https://api.github.com/users/alex-ppg/orgs",
      "repos_url": "https://api.github.com/users/alex-ppg/repos",
      "events_url": "https://api.github.com/users/alex-ppg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/alex-ppg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-01-06T13:34:51Z",
    "updated_at": "2023-01-06T14:00:42Z",
    "author_association": "NONE",
    "body": "> **Strongly disagree.**\r\n>\r\n> EIP-20 is final. It has been for a long time, and there is no mechanism to update it. Even if we could update it, you would not be able to change the behavior of the many non-upgradeable contracts already onchain.\r\n\r\nUnderstood, however, the same is true if we update the `ERC20` dependency of OpenZeppelin to satisfy the **SHOULD** clause of EIP-20. My advice was not to change an optional **SHOULD** clause to **MUST**, it would have been to change a **MUST** clause (emission of events) to a **SHOULD** clause which would have retained all presently deployed contracts compliant.\r\n\r\nAdditionally, the problem is **not the zero-value transfers themselves**. The problem is that **a transfer can be shown as originating from a user who never authorized anyone to perform it**. This exact case **is covered in the existing EIP-20 albeit via a SHOULD clause**.\r\n\r\nArguably, block explorers must remain impartial in the data they showcase to users (as they are a data tool). As such, transfers of zero are in-fact **acceptable behaviour under EIP-20 that should be shown**. \r\n\r\nWhen I saw zero-value transfers originating from my account, my first reaction was that my keys were compromised and that the software I was seeing glitched in showing zero as the value. Transfers originating from an account that never approved the caller **is something illogical and must be prohibited** (IMO of course).\r\n\r\nThe core problem lies in the **SHOULD** clause which specifies that:\r\n\r\n> The function SHOULD throw unless the _from account has deliberately authorized the sender of the message via some mechanism\r\n\r\nThis clause was never taken into account for zero-value transfers when building the OpenZeppelin ERC-20 contract and as such is not satisfied.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1373631681/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1373761236",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3931#issuecomment-1373761236",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3931",
    "id": 1373761236,
    "node_id": "IC_kwDOA9tCBs5R4e7U",
    "user": {
      "login": "Amxx",
      "id": 2432299,
      "node_id": "MDQ6VXNlcjI0MzIyOTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2432299?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Amxx",
      "html_url": "https://github.com/Amxx",
      "followers_url": "https://api.github.com/users/Amxx/followers",
      "following_url": "https://api.github.com/users/Amxx/following{/other_user}",
      "gists_url": "https://api.github.com/users/Amxx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Amxx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Amxx/subscriptions",
      "organizations_url": "https://api.github.com/users/Amxx/orgs",
      "repos_url": "https://api.github.com/users/Amxx/repos",
      "events_url": "https://api.github.com/users/Amxx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Amxx/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-01-06T15:19:21Z",
    "updated_at": "2023-01-06T15:19:21Z",
    "author_association": "COLLABORATOR",
    "body": "> My advice was not to change an optional **SHOULD** clause to **MUST**, it would have been to change a **MUST** clause (emission of events) to a **SHOULD** clause which would have retained all presently deployed contracts compliant.\r\n\r\nThat is exactly what I believe we should not do\r\n\r\n- To interpret/change a SHOULD as a MUST, and do in the code what the EIP leaves up to the implementer is ok\r\n- To interpret/change a MUST as a SHOULD, and take the liberty to not do what the EIP mandates is not ok",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1373761236/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1373770500",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3931#issuecomment-1373770500",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3931",
    "id": 1373770500,
    "node_id": "IC_kwDOA9tCBs5R4hME",
    "user": {
      "login": "Amxx",
      "id": 2432299,
      "node_id": "MDQ6VXNlcjI0MzIyOTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2432299?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Amxx",
      "html_url": "https://github.com/Amxx",
      "followers_url": "https://api.github.com/users/Amxx/followers",
      "following_url": "https://api.github.com/users/Amxx/following{/other_user}",
      "gists_url": "https://api.github.com/users/Amxx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Amxx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Amxx/subscriptions",
      "organizations_url": "https://api.github.com/users/Amxx/orgs",
      "repos_url": "https://api.github.com/users/Amxx/repos",
      "events_url": "https://api.github.com/users/Amxx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Amxx/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-01-06T15:23:14Z",
    "updated_at": "2023-01-06T15:23:51Z",
    "author_association": "COLLABORATOR",
    "body": "> The function SHOULD throw unless the _from account has deliberately authorized the sender of the message via some mechanism\r\n\r\nThis was considered, but clearly not as strictly as one could expect. \r\n\r\nIt would be wrong to say we don't do it. It would also be wrong to say we cannot be more strict and interpret the EIP in a more restrictive way ...\r\n... and I would do it if I was convinced this more restrictive interpretation would not break anything.\r\n\r\nMy concern is that being more strict in our interpretation might be both\r\n- actually not mandated by the EIP\r\n- breaking some DeFi composability",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1373770500/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1373827384",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3931#issuecomment-1373827384",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3931",
    "id": 1373827384,
    "node_id": "IC_kwDOA9tCBs5R4vE4",
    "user": {
      "login": "alex-ppg",
      "id": 31933616,
      "node_id": "MDQ6VXNlcjMxOTMzNjE2",
      "avatar_url": "https://avatars.githubusercontent.com/u/31933616?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/alex-ppg",
      "html_url": "https://github.com/alex-ppg",
      "followers_url": "https://api.github.com/users/alex-ppg/followers",
      "following_url": "https://api.github.com/users/alex-ppg/following{/other_user}",
      "gists_url": "https://api.github.com/users/alex-ppg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/alex-ppg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/alex-ppg/subscriptions",
      "organizations_url": "https://api.github.com/users/alex-ppg/orgs",
      "repos_url": "https://api.github.com/users/alex-ppg/repos",
      "events_url": "https://api.github.com/users/alex-ppg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/alex-ppg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-01-06T15:53:41Z",
    "updated_at": "2023-01-06T15:53:41Z",
    "author_association": "NONE",
    "body": "With regards to DeFi composability, this is not a retroactive change and as such would solely affect the compatibility of OZ ERC-20 tokens with existing protocols.\r\n\r\nThe most serious impact this change can have is on protocols that perform a `transferFrom` invocation with `from_` being a smart contract that is incapable of increasing the approval of the caller smart contract.\r\n\r\nWhile protocols performing `transferFrom` even when the amount is `0` are not seldom (i.e. best-effort reward distribution mechanisms), the `0` amount is never deliberate and the code has been prepared to mostly handle non-zero values. As such, a way to increase approval again is expected to be built in regardless of whether `from_` is an EOA or a smart contract.\r\n\r\nGiven that performing a `transferFrom` with a value of `0` (or even a `transfer`) is a waste of gas for most smart contract systems, new projects developed with OZ ERC-20 tests will be mindful of this and, in reality, benefit from more optimal code.\r\n\r\nAdditionally, systems are already mindful of a few caveats with ERC-20 tokens (a non-zero approval over existing approval, the non-mandatory requirement to yield a `bool` etc.) and this would become another addition to the list albeit one that would not need to be circumvented most of the time as deliberate zero-value transfers are mostly undesirable.\r\n\r\nI believe this change would collectively lead to: \r\n\r\n- a reduction of on-chain data bloat as transactions would not be able to be spammed from unauthorized addresses\r\n- a better-defined `transferFrom` behaviour that would cause developers to write more optimal code",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1373827384/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1373840577",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3931#issuecomment-1373840577",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3931",
    "id": 1373840577,
    "node_id": "IC_kwDOA9tCBs5R4yTB",
    "user": {
      "login": "Amxx",
      "id": 2432299,
      "node_id": "MDQ6VXNlcjI0MzIyOTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2432299?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Amxx",
      "html_url": "https://github.com/Amxx",
      "followers_url": "https://api.github.com/users/Amxx/followers",
      "following_url": "https://api.github.com/users/Amxx/following{/other_user}",
      "gists_url": "https://api.github.com/users/Amxx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Amxx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Amxx/subscriptions",
      "organizations_url": "https://api.github.com/users/Amxx/orgs",
      "repos_url": "https://api.github.com/users/Amxx/repos",
      "events_url": "https://api.github.com/users/Amxx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Amxx/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-01-06T16:06:35Z",
    "updated_at": "2023-01-06T16:06:35Z",
    "author_association": "COLLABORATOR",
    "body": "> The most serious impact this change can have is on protocols that perform a `transferFrom` invocation with `from_` being a smart contract that is incapable of increasing the approval of the caller smart contract.\r\n\r\nYes, My concern is that there could be pair of contracts (router + liquidity pool ?) where one contract does the `approve` and the other does `transferFrom`. They would work in tandem, and use the same amount. If that amount is non-zero, it will continue to work properly, but if the amount is 0, then it would suddenly fail.\r\n\r\nThe amount could be 0 for many reason. Imagine a balancer-like pool that is supposed to have 3 tokens, but only actually contains 2. You try to withdraw. This includes non-zero amount for 2 of the 3 tokens and zero for the third one.\r\n\r\nIts really an edge case, but that might happen somewhere in the big world of DeFi",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1373840577/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1373846065",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3931#issuecomment-1373846065",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3931",
    "id": 1373846065,
    "node_id": "IC_kwDOA9tCBs5R4zox",
    "user": {
      "login": "Amxx",
      "id": 2432299,
      "node_id": "MDQ6VXNlcjI0MzIyOTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2432299?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Amxx",
      "html_url": "https://github.com/Amxx",
      "followers_url": "https://api.github.com/users/Amxx/followers",
      "following_url": "https://api.github.com/users/Amxx/following{/other_user}",
      "gists_url": "https://api.github.com/users/Amxx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Amxx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Amxx/subscriptions",
      "organizations_url": "https://api.github.com/users/Amxx/orgs",
      "repos_url": "https://api.github.com/users/Amxx/repos",
      "events_url": "https://api.github.com/users/Amxx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Amxx/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-01-06T16:10:31Z",
    "updated_at": "2023-01-06T16:10:31Z",
    "author_association": "COLLABORATOR",
    "body": "> - a reduction of on-chain data bloat as transactions would not be able to be spammed from unauthorized addresses\r\n\r\nThis is really opinionated. The whole concept of \"spam by unauthorized addresses\" is strange. The addresses are paying gas to use the block space. You main not like what they do, but the whole point of a decentralized censorship-resistant blockchain is that they are free to pay gas fee to do whatever they want, including sending (many) empty tx to themselves or to anyone. \r\n\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1373846065/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1373851268",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3931#issuecomment-1373851268",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3931",
    "id": 1373851268,
    "node_id": "IC_kwDOA9tCBs5R406E",
    "user": {
      "login": "Amxx",
      "id": 2432299,
      "node_id": "MDQ6VXNlcjI0MzIyOTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2432299?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Amxx",
      "html_url": "https://github.com/Amxx",
      "followers_url": "https://api.github.com/users/Amxx/followers",
      "following_url": "https://api.github.com/users/Amxx/following{/other_user}",
      "gists_url": "https://api.github.com/users/Amxx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Amxx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Amxx/subscriptions",
      "organizations_url": "https://api.github.com/users/Amxx/orgs",
      "repos_url": "https://api.github.com/users/Amxx/repos",
      "events_url": "https://api.github.com/users/Amxx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Amxx/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-01-06T16:12:46Z",
    "updated_at": "2023-01-06T16:14:16Z",
    "author_association": "COLLABORATOR",
    "body": "> - a better-defined `transferFrom` behaviour that would cause developers to write more optimal code\r\n\r\nMy concern is not with the more optimal code that developers will write in the future, its with the (less optimal?) code that was written in the past, and that was written in a way that is expected to work with all upcoming EIP-20 contracts.\r\n\r\nWe *really* don't want to be the ones that create a split between the EIP-20 tokens that work with X and the EIP-20 tokens that don't work with X.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1373851268/reactions",
      "total_count": 4,
      "+1": 4,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1373864771",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3931#issuecomment-1373864771",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3931",
    "id": 1373864771,
    "node_id": "IC_kwDOA9tCBs5R44ND",
    "user": {
      "login": "alex-ppg",
      "id": 31933616,
      "node_id": "MDQ6VXNlcjMxOTMzNjE2",
      "avatar_url": "https://avatars.githubusercontent.com/u/31933616?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/alex-ppg",
      "html_url": "https://github.com/alex-ppg",
      "followers_url": "https://api.github.com/users/alex-ppg/followers",
      "following_url": "https://api.github.com/users/alex-ppg/following{/other_user}",
      "gists_url": "https://api.github.com/users/alex-ppg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/alex-ppg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/alex-ppg/subscriptions",
      "organizations_url": "https://api.github.com/users/alex-ppg/orgs",
      "repos_url": "https://api.github.com/users/alex-ppg/repos",
      "events_url": "https://api.github.com/users/alex-ppg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/alex-ppg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-01-06T16:26:53Z",
    "updated_at": "2023-01-06T16:26:53Z",
    "author_association": "NONE",
    "body": "> This is really opinionated. The whole concept of \"spam by unauthorized addresses\" is strange. The addresses are paying gas to use the block space. You main not like what they do, but the whole point of a decentralized censorship-resistant blockchain is that they are free to pay gas fee to do whatever they want, including sending (many) empty tx to themselves or to anyone.\r\n\r\nJust a quick note, the problem is not \"sending (many) empty tx to themselves or to anyone\". Even if this issue's proposed change is accepted, **users will be able to spam zero-value transfers to themselves / any other account**.\r\n\r\nThe problem lies in that they are able to impersonate a transaction as if it was coming from your (or anyone's) personal account. In a decentralized censorship-resistant blockchain, identities need to be secure and impossible to impersonate.\r\n\r\nIf this was not true, I would be able to send a zero-value transfer originating from your account to someone else's. This is impossible unless I have access to your private key. This issue is about applying the same principle to ERC-20 tokens (being deliberately approved to perform a transfer before doing so). \r\n",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1373864771/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1373865576",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3931#issuecomment-1373865576",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3931",
    "id": 1373865576,
    "node_id": "IC_kwDOA9tCBs5R44Zo",
    "user": {
      "login": "Amxx",
      "id": 2432299,
      "node_id": "MDQ6VXNlcjI0MzIyOTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2432299?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Amxx",
      "html_url": "https://github.com/Amxx",
      "followers_url": "https://api.github.com/users/Amxx/followers",
      "following_url": "https://api.github.com/users/Amxx/following{/other_user}",
      "gists_url": "https://api.github.com/users/Amxx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Amxx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Amxx/subscriptions",
      "organizations_url": "https://api.github.com/users/Amxx/orgs",
      "repos_url": "https://api.github.com/users/Amxx/repos",
      "events_url": "https://api.github.com/users/Amxx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Amxx/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-01-06T16:27:43Z",
    "updated_at": "2023-01-06T16:27:43Z",
    "author_association": "COLLABORATOR",
    "body": "That is fair.\r\n\r\nI personally don't see an EIP-20 transfers as \"transactions by the `from`\", but I see how less technical users could see it that way.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1373865576/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1374542057",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3931#issuecomment-1374542057",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3931",
    "id": 1374542057,
    "node_id": "IC_kwDOA9tCBs5R7djp",
    "user": {
      "login": "DanielVF",
      "id": 837,
      "node_id": "MDQ6VXNlcjgzNw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/837?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/DanielVF",
      "html_url": "https://github.com/DanielVF",
      "followers_url": "https://api.github.com/users/DanielVF/followers",
      "following_url": "https://api.github.com/users/DanielVF/following{/other_user}",
      "gists_url": "https://api.github.com/users/DanielVF/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/DanielVF/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/DanielVF/subscriptions",
      "organizations_url": "https://api.github.com/users/DanielVF/orgs",
      "repos_url": "https://api.github.com/users/DanielVF/repos",
      "events_url": "https://api.github.com/users/DanielVF/events{/privacy}",
      "received_events_url": "https://api.github.com/users/DanielVF/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-01-07T17:10:27Z",
    "updated_at": "2023-01-07T17:10:27Z",
    "author_association": "CONTRIBUTOR",
    "body": "At first I was excited about blocking zero approval transferFroms, but after more thinking, I think it's a bad idea. As @Amxx said, the core issue is exact amount `approve` and `transferFrom` pairs of code. These uses shouldn't require adding extra code when to avoid borking up a protocol.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1374542057/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1374608578",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3931#issuecomment-1374608578",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3931",
    "id": 1374608578,
    "node_id": "IC_kwDOA9tCBs5R7tzC",
    "user": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-01-07T20:52:43Z",
    "updated_at": "2023-01-07T20:53:22Z",
    "author_association": "MEMBER",
    "body": "> the core issue is exact amount `approve` and `transferFrom` pairs of code\r\n\r\nI share the abstract concern but it would also be great if someone could point out a specific piece of code that would break in some cases.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1374608578/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1374622052",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3931#issuecomment-1374622052",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3931",
    "id": 1374622052,
    "node_id": "IC_kwDOA9tCBs5R7xFk",
    "user": {
      "login": "DanielVF",
      "id": 837,
      "node_id": "MDQ6VXNlcjgzNw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/837?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/DanielVF",
      "html_url": "https://github.com/DanielVF",
      "followers_url": "https://api.github.com/users/DanielVF/followers",
      "following_url": "https://api.github.com/users/DanielVF/following{/other_user}",
      "gists_url": "https://api.github.com/users/DanielVF/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/DanielVF/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/DanielVF/subscriptions",
      "organizations_url": "https://api.github.com/users/DanielVF/orgs",
      "repos_url": "https://api.github.com/users/DanielVF/repos",
      "events_url": "https://api.github.com/users/DanielVF/events{/privacy}",
      "received_events_url": "https://api.github.com/users/DanielVF/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-01-07T21:41:35Z",
    "updated_at": "2023-01-07T21:42:34Z",
    "author_association": "CONTRIBUTOR",
    "body": "I just looked on GitHub, and here's a random contract using the  pattern of approve amount then call other contract.\r\n\r\n```solidity\r\n        TransferHelper.safeApprove(DAI, address(swapRouter), amountIn);\r\n\r\n        ISwapRouter.ExactInputSingleParams memory params = ISwapRouter\r\n            .ExactInputSingleParams({\r\n                ...\r\n                amountIn: amountIn,\r\n                ...\r\n            });\r\n```\r\n\r\n\r\nhttps://github.com/bijaybogati/swap-app-demo/blob/68494ecd8ab9179fe62468be4ff3c2ef350a240f/swap-app/src/smart_contract/contracts/Swap.sol#L51-L65\r\n\r\nThis is a fairly common pattern. As simple swap of zero funds reverting may not be problem when standing alone, but when this pattern is built into other contracts, it can be. For example a DeFi system that harvests and swaps each coin in a list could revert and block all the others if one happened to be zero.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1374622052/reactions",
      "total_count": 3,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1374780112",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3931#issuecomment-1374780112",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3931",
    "id": 1374780112,
    "node_id": "IC_kwDOA9tCBs5R8XrQ",
    "user": {
      "login": "alex-ppg",
      "id": 31933616,
      "node_id": "MDQ6VXNlcjMxOTMzNjE2",
      "avatar_url": "https://avatars.githubusercontent.com/u/31933616?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/alex-ppg",
      "html_url": "https://github.com/alex-ppg",
      "followers_url": "https://api.github.com/users/alex-ppg/followers",
      "following_url": "https://api.github.com/users/alex-ppg/following{/other_user}",
      "gists_url": "https://api.github.com/users/alex-ppg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/alex-ppg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/alex-ppg/subscriptions",
      "organizations_url": "https://api.github.com/users/alex-ppg/orgs",
      "repos_url": "https://api.github.com/users/alex-ppg/repos",
      "events_url": "https://api.github.com/users/alex-ppg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/alex-ppg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-01-08T09:46:26Z",
    "updated_at": "2023-01-08T09:46:26Z",
    "author_association": "NONE",
    "body": "Hey @DanielVF, thanks for having a look. The pattern you shared is **incorrect**, it **would continue functioning as expected** after the change.\r\n\r\nThe snippet showcases a pattern whereby a swap is performed. Performing a swap of zero is **not an expected scenario** as all exchanges apply fees and would be unable to do so.\r\n\r\nThis is further showcased by the Uniswap V3 system that the code integrates with as **it already fails on [zero swaps](https://github.com/Uniswap/v3-core/blob/main/contracts/UniswapV3Pool.sol#L601-L608)**.\r\n\r\nI understand people are hesitant to make the change, however, based on the logical analysis a few responses above I fail to see a valid scenario in which a `transferFrom` with zero is expected to succeed **when no approval has been previously made**.\r\n\r\nTo clarify, **this issue will permit zero-value transfers to occur as per the EIP-20 standard**. **It will solely affect `transferFrom` operations of a value of zero that are performed by an address that never had any `allowance` to begin with**.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1374780112/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1374786495",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3931#issuecomment-1374786495",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3931",
    "id": 1374786495,
    "node_id": "IC_kwDOA9tCBs5R8ZO_",
    "user": {
      "login": "pcaversaccio",
      "id": 25297591,
      "node_id": "MDQ6VXNlcjI1Mjk3NTkx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25297591?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pcaversaccio",
      "html_url": "https://github.com/pcaversaccio",
      "followers_url": "https://api.github.com/users/pcaversaccio/followers",
      "following_url": "https://api.github.com/users/pcaversaccio/following{/other_user}",
      "gists_url": "https://api.github.com/users/pcaversaccio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pcaversaccio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pcaversaccio/subscriptions",
      "organizations_url": "https://api.github.com/users/pcaversaccio/orgs",
      "repos_url": "https://api.github.com/users/pcaversaccio/repos",
      "events_url": "https://api.github.com/users/pcaversaccio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pcaversaccio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-01-08T10:07:48Z",
    "updated_at": "2023-01-08T10:07:48Z",
    "author_association": "CONTRIBUTOR",
    "body": "FWIW, Curve's founder @michwill mentioned to me that some old Curve contracts might break. Tagging him here since it's important enough.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1374786495/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1374793188",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3931#issuecomment-1374793188",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3931",
    "id": 1374793188,
    "node_id": "IC_kwDOA9tCBs5R8a3k",
    "user": {
      "login": "alex-ppg",
      "id": 31933616,
      "node_id": "MDQ6VXNlcjMxOTMzNjE2",
      "avatar_url": "https://avatars.githubusercontent.com/u/31933616?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/alex-ppg",
      "html_url": "https://github.com/alex-ppg",
      "followers_url": "https://api.github.com/users/alex-ppg/followers",
      "following_url": "https://api.github.com/users/alex-ppg/following{/other_user}",
      "gists_url": "https://api.github.com/users/alex-ppg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/alex-ppg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/alex-ppg/subscriptions",
      "organizations_url": "https://api.github.com/users/alex-ppg/orgs",
      "repos_url": "https://api.github.com/users/alex-ppg/repos",
      "events_url": "https://api.github.com/users/alex-ppg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/alex-ppg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-01-08T10:28:29Z",
    "updated_at": "2023-01-08T10:28:29Z",
    "author_association": "NONE",
    "body": "I am performing an analysis of the top projects in the space to identify what this change would mean to them. After validating that Uniswap implementations are unaffected, I have identified **that Compound would be affected**. We can see what this change would cause:\r\n\r\n- **Breaking Code**: The `CDaiDelegate` implementation performs a `doTransferIn` [call](https://github.com/compound-finance/compound-protocol/blob/a3214f67b73310d547e00fc578e8355911c9d376/contracts/CDaiDelegate.sol#L129-L134) with an [argument of `0`](https://github.com/compound-finance/compound-protocol/blob/a3214f67b73310d547e00fc578e8355911c9d376/contracts/CDaiDelegate.sol#L67). This solely affects the DAI implementation (as only `CDaiDelegate` performs this) and would manifest as an issue if the `DAI` implementation was upgraded to use the new OpenZeppelin version. In the current implementation, the `doTransferIn` function right now performs a transfer of zero to self, wasting gas on each invocation when it should have conditionally performed the transfer (in which case; more optimal code + code would not break).\r\n\r\n- **Affected Code**: The `doTransferIn` function is the sole piece of code that executes a `transferFrom` instruction. This function is invoked in several segments of the codebase, namely: `mintFresh`, `repayBorrowFresh`, `_addReservesFresh`.\r\n-- `mintFresh`: This function is invoked by the top-level `mint` function and would fail if the supplied amount is zero. In the current implementation, it results in a no-op.\r\n-- `repayBorrowFresh`: This is in turn invoked by `liquidateBorrowFresh`, `repayBorrowInternal`, and `repayBorrowBehalfInternal`. The first instance already does not allow an amount of `0` whilst the other two instances would fail if the supplied amount is zero. In the current implementation, they result in a no-op.\r\n-- `_addReservesFresh`: This function is invoked by the top-level `_addReserves` function and would fail if the supplied amount is zero.\r\n\r\nI believe the above is sufficient evidence to **not proceed** with the change. All instances that would break by this issue **would actually be resolved by proper programming practices** (i.e. minimizing gas by performing transfers only when needed).\r\n\r\nHowever, given that many projects do not follow them including some of the most renowned ones like Compound, the OpenZeppelin library should not change. The only change that can be performed without altering on-chain code is affecting off-chain code and namely the `Transfer` event emission.\r\n\r\nI understand that EIPs are final (even more so an EIP like 20 which has been utilized for multiple years and is the \"prime example\" of a smart contract EIP), however, it was finalized before the Ethereum community was as large as it is today. As the event emission would only affect off-chain code, I believe that not emitting it **only in unauthorized `transferFrom` invocations** is not a ground-breaking change and would resolve the issue at hand.\r\n\r\nFeel free to close this issue if you do not intend to make such a change.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1374793188/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1374793877",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3931#issuecomment-1374793877",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3931",
    "id": 1374793877,
    "node_id": "IC_kwDOA9tCBs5R8bCV",
    "user": {
      "login": "pcaversaccio",
      "id": 25297591,
      "node_id": "MDQ6VXNlcjI1Mjk3NTkx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25297591?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pcaversaccio",
      "html_url": "https://github.com/pcaversaccio",
      "followers_url": "https://api.github.com/users/pcaversaccio/followers",
      "following_url": "https://api.github.com/users/pcaversaccio/following{/other_user}",
      "gists_url": "https://api.github.com/users/pcaversaccio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pcaversaccio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pcaversaccio/subscriptions",
      "organizations_url": "https://api.github.com/users/pcaversaccio/orgs",
      "repos_url": "https://api.github.com/users/pcaversaccio/repos",
      "events_url": "https://api.github.com/users/pcaversaccio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pcaversaccio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-01-08T10:30:45Z",
    "updated_at": "2023-01-08T10:30:45Z",
    "author_association": "CONTRIBUTOR",
    "body": "Another contract (`Curve.fi: Compound Swap`) that would be affected is this one [here](https://etherscan.io/address/0xa2b47e3d5c44877cca798226b7b8118f9bfb7a56#code). See function `remove_liquidity_imbalance`.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1374793877/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1374794415",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3931#issuecomment-1374794415",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3931",
    "id": 1374794415,
    "node_id": "IC_kwDOA9tCBs5R8bKv",
    "user": {
      "login": "alex-ppg",
      "id": 31933616,
      "node_id": "MDQ6VXNlcjMxOTMzNjE2",
      "avatar_url": "https://avatars.githubusercontent.com/u/31933616?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/alex-ppg",
      "html_url": "https://github.com/alex-ppg",
      "followers_url": "https://api.github.com/users/alex-ppg/followers",
      "following_url": "https://api.github.com/users/alex-ppg/following{/other_user}",
      "gists_url": "https://api.github.com/users/alex-ppg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/alex-ppg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/alex-ppg/subscriptions",
      "organizations_url": "https://api.github.com/users/alex-ppg/orgs",
      "repos_url": "https://api.github.com/users/alex-ppg/repos",
      "events_url": "https://api.github.com/users/alex-ppg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/alex-ppg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-01-08T10:32:41Z",
    "updated_at": "2023-01-08T10:35:56Z",
    "author_association": "NONE",
    "body": "@pcaversaccio That contract would not be affected. Again, **this solely affects `transferFrom` invocations and not all that are performed with a value of `0`**. In the code you reference, **a `transfer` is performed which will succeed with a value of `0`** as we are not concerned about those. \r\n\r\nI believe `add_liquidity` would fail, however, as it performs a `transferFrom` for all of the tokens when a user can supply liquidity using only one token AFAIK. This means that the Curve model performs **two redundant transfer operations** wasting gas on each liquidity supply if it is performed only in one token...",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1374794415/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1374797155",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3931#issuecomment-1374797155",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3931",
    "id": 1374797155,
    "node_id": "IC_kwDOA9tCBs5R8b1j",
    "user": {
      "login": "pcaversaccio",
      "id": 25297591,
      "node_id": "MDQ6VXNlcjI1Mjk3NTkx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25297591?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pcaversaccio",
      "html_url": "https://github.com/pcaversaccio",
      "followers_url": "https://api.github.com/users/pcaversaccio/followers",
      "following_url": "https://api.github.com/users/pcaversaccio/following{/other_user}",
      "gists_url": "https://api.github.com/users/pcaversaccio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pcaversaccio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pcaversaccio/subscriptions",
      "organizations_url": "https://api.github.com/users/pcaversaccio/orgs",
      "repos_url": "https://api.github.com/users/pcaversaccio/repos",
      "events_url": "https://api.github.com/users/pcaversaccio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pcaversaccio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-01-08T10:42:36Z",
    "updated_at": "2023-01-08T10:42:36Z",
    "author_association": "CONTRIBUTOR",
    "body": "> @pcaversaccio That contract would not be affected. Again, **this solely affects `transferFrom` invocations and not all that are performed with a value of `0`**. In the code you reference, **a `transfer` is performed which will succeed with a value of `0`** as we are not concerned about those.\r\n\r\nYou're actually right - got confused while switching between `transfer` and `transferFrom` searches on Etherscan.\r\n\r\n> I believe that not emitting it only in unauthorized transferFrom invocations is not a ground-breaking change\r\n\r\nI honestly don't know how many people built monitoring systems that depend on tracking such transfer events (maybe to get insights about other stuff). So in that case, I would advocate more for: leaving it as it is since it works so far (apart from the poisoning issue ofc).",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1374797155/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1374800299",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3931#issuecomment-1374800299",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3931",
    "id": 1374800299,
    "node_id": "IC_kwDOA9tCBs5R8cmr",
    "user": {
      "login": "alex-ppg",
      "id": 31933616,
      "node_id": "MDQ6VXNlcjMxOTMzNjE2",
      "avatar_url": "https://avatars.githubusercontent.com/u/31933616?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/alex-ppg",
      "html_url": "https://github.com/alex-ppg",
      "followers_url": "https://api.github.com/users/alex-ppg/followers",
      "following_url": "https://api.github.com/users/alex-ppg/following{/other_user}",
      "gists_url": "https://api.github.com/users/alex-ppg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/alex-ppg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/alex-ppg/subscriptions",
      "organizations_url": "https://api.github.com/users/alex-ppg/orgs",
      "repos_url": "https://api.github.com/users/alex-ppg/repos",
      "events_url": "https://api.github.com/users/alex-ppg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/alex-ppg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-01-08T10:53:58Z",
    "updated_at": "2023-01-08T10:53:58Z",
    "author_association": "NONE",
    "body": "After giving it a lot more thought, I think that this issue should be closed. If we remain as is, we force off-chain **explorers** to adjust their off-chain code to not showcase zero-value transfers.\r\n\r\nIf we perform the event emission change, we will **reduce the gas cost of zero-value transactions** but would in turn ***break* the EIP-20 standard** as well as **potentially force the other spectrum of off-chain code to change that relies on zero-value transfers**.\r\n\r\nIMO either of those two is sub-optimal and the best would have been to force deliberate authorization but we are too late for that. I leave it up to the OZ maintainers to choose whether they will perform a change (for events) or close the issue as is.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1374800299/reactions",
      "total_count": 3,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1377410482",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3931#issuecomment-1377410482",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3931",
    "id": 1377410482,
    "node_id": "IC_kwDOA9tCBs5SGZ2y",
    "user": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-01-10T15:03:47Z",
    "updated_at": "2023-01-10T15:03:47Z",
    "author_association": "MEMBER",
    "body": "> If we remain as is, we force off-chain explorers to adjust their off-chain code to not showcase zero-value transfers.\r\n\r\nThe thing is they should do this anyway for the thousands of tokens that already have this behavior.\r\n\r\nThanks everyone for contributing with concrete examples. We haven't come to a conclusion yet.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1377410482/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1431629744",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3931#issuecomment-1431629744",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3931",
    "id": 1431629744,
    "node_id": "IC_kwDOA9tCBs5VVO-w",
    "user": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-02-15T16:19:15Z",
    "updated_at": "2023-02-15T16:28:23Z",
    "author_association": "MEMBER",
    "body": "We've decided against making any changes, due to the risk that they would cause issues across the ERC20 ecosystem as discussed earlier in this issue.\r\n\r\nWe are open to reconsidering this if this is seen as an important measure with low risk. Please feel free to continue the discussion here if you disgree with the risk assessment so far.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1431629744/reactions",
      "total_count": 3,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
