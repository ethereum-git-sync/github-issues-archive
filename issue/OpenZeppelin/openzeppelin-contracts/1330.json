{
  "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1330",
  "repository_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts",
  "labels_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1330/labels{/name}",
  "comments_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1330/comments",
  "events_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1330/events",
  "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1330",
  "id": 361326000,
  "node_id": "MDU6SXNzdWUzNjEzMjYwMDA=",
  "number": 1330,
  "title": "Check tx.origin in the functions where the _value is taken from the approval",
  "user": {
    "login": "rjkz808",
    "id": 38258624,
    "node_id": "MDQ6VXNlcjM4MjU4NjI0",
    "avatar_url": "https://avatars.githubusercontent.com/u/38258624?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/rjkz808",
    "html_url": "https://github.com/rjkz808",
    "followers_url": "https://api.github.com/users/rjkz808/followers",
    "following_url": "https://api.github.com/users/rjkz808/following{/other_user}",
    "gists_url": "https://api.github.com/users/rjkz808/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/rjkz808/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/rjkz808/subscriptions",
    "organizations_url": "https://api.github.com/users/rjkz808/orgs",
    "repos_url": "https://api.github.com/users/rjkz808/repos",
    "events_url": "https://api.github.com/users/rjkz808/events{/privacy}",
    "received_events_url": "https://api.github.com/users/rjkz808/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 2,
  "created_at": "2018-09-18T14:14:50Z",
  "updated_at": "2018-09-18T20:06:57Z",
  "closed_at": "2018-09-18T20:04:59Z",
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "## üéâ Description\r\n\r\nSo, in the `transferFrom`, `burnFrom` or other functions in the ERC20 token smart-contracts we need to check the `tx.origin` balance\r\n\r\n- [ ] üêõ This is a bug report.\r\n- [x] üìà This is a feature request.\r\n\r\n<!-- Please check one of the above by placing an x in the box. -->\r\n\r\n## üíª Environment\r\n\r\nNext, we need to know what your environment looks like.\r\n\r\n> - Which version of OpenZeppelin are you using?\r\n- openzeppelin-solidity ^1.12.0\r\n> - What network are you deploying to? Ganache? Ropsten?\r\n- I'm using Ganache, but you can deploy to any existing network\r\n> - How are you deploying your OpenZeppelin-backed contracts? truffle? Remix? Let us know!\r\n- You can use either Truffle or Remix\r\n\r\n## üìù Details\r\n\r\nIf you want for example add a `refund` to the allowance crowdsale, you cannot normally do this, before the `msg.sender` approves the crowdsale contract to spend all it's tokens. When you call the `transfer` the `msg.sender` always will be the `address(this)`.\r\n\r\n## üî¢ Code To Reproduce Issue [ Good To Have ]\r\n\r\nJust try to write something like this\r\n```solidity\r\ncontract ExampleCrowdsale {\r\n  using SafeERC20 for ERC20\r\n\r\n  // I've skipped a part of crowdsale\r\n\r\n  function buyTokens(address _beneficiary) public payable {\r\n    require(_beneficiary != address(0));\r\n    require(msg.value > 0);\r\n    require(hasStarted() && !hasEnded());\r\n    require(weiRaised.add(msg.value) <= cap);\r\n    require(_getTokenAmountWithBonus(msg.value) <= saleAmount);\r\n\r\n    weiRaised = weiRaised.add(msg.value);\r\n    token.safeTransferFrom(\r\n      owner,\r\n      _beneficiary,\r\n      _getTokenAmountWithBonus(msg.value)\r\n    );\r\n\r\n    emit TokenPurchase(\r\n      msg.sender, \r\n      _beneficiary, \r\n      msg.value, \r\n      _getTokenAmountWithBonus(msg.value)\r\n    );\r\n  }\r\n}\r\n```\r\nthen add the `refund` function\r\n```solidity\r\nfunction refund() public {\r\n  require(!goalReached() && isFinalized);\r\n  msg.sender.transfer(paidAmountOf[msg.sender]);\r\n  token.safeTransfer(address(this), token.balanceOf(msg.sender));\r\n}\r\n```\r\nbut it will always revert. We can do something like\r\n```solidity\r\nfunction refund() public {\r\n  require(!goalReached() && isFinalized);\r\n  require(token.allowance(msg.sender, address(this) == token.balanceOf(msg.sender)));\r\n  msg.sender.transfer(paidAmountOf[msg.sender]);\r\n  token.safeTransferFrom(msg.sender, address(this), token.balanceOf(msg.sender));\r\n}\r\n```\r\nbut it requires one more transaction from the user.\r\n\r\n## üëç Other Information\r\n\r\n## Solution\r\n\r\nYou need to add 4 lines to the `transferFrom` and other ERC20 functions where the value is taken from the approval\r\n```solidity\r\nfunction transferFrom(\r\n  address _from,\r\n  address _to,\r\n  uint256 _value\r\n)\r\n  public\r\n  returns (bool)\r\n{\r\n  require(_value <= balances[_from]);\r\n  require(_to != address(0));\r\n  \r\n  if (_from != tx.origin) {\r\n    require(_value <= allowed[_from][msg.sender]);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n  }\r\n  balances[_from] = balances[_from].sub(_value);\r\n  balances[_to] = balances[_to].add(_value);\r\n  emit Transfer(_from, _to, _value);\r\n  return true;\r\n}\r\n```",
  "closed_by": {
    "login": "frangio",
    "id": 481465,
    "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
    "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/frangio",
    "html_url": "https://github.com/frangio",
    "followers_url": "https://api.github.com/users/frangio/followers",
    "following_url": "https://api.github.com/users/frangio/following{/other_user}",
    "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
    "organizations_url": "https://api.github.com/users/frangio/orgs",
    "repos_url": "https://api.github.com/users/frangio/repos",
    "events_url": "https://api.github.com/users/frangio/events{/privacy}",
    "received_events_url": "https://api.github.com/users/frangio/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1330/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1330/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/422532552",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1330#issuecomment-422532552",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1330",
    "id": 422532552,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyMjUzMjU1Mg==",
    "user": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-09-18T20:04:54Z",
    "updated_at": "2018-09-18T20:04:54Z",
    "author_association": "MEMBER",
    "body": "Hi @rjkz808! Thanks for the suggestion.\r\n\r\nThis is clearly a deviation from ERC20 semantics. I don't think a function such as `transferFrom` should be altered in this way.\r\n\r\nBut more importantly, usage of `tx.origin` is often a security anti-pattern, and it is the case here. With such a token, any transaction initiated by a token holder can result in an arbitrary contract taking tokens from their balance. So not only would the crowdsale be able to `transferFrom` the token holder, but any contract. For example, if the token holder makes an ERC721 transfer, this can trigger an `onERC721Received` function on the receiver, and the receiver can then steal ERC20 tokens from the sender.\r\n\r\nI'm closing the issue but I'd be glad to continue the discussion.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/422532552/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/422533150",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1330#issuecomment-422533150",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1330",
    "id": 422533150,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyMjUzMzE1MA==",
    "user": {
      "login": "barakman",
      "id": 7003246,
      "node_id": "MDQ6VXNlcjcwMDMyNDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7003246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/barakman",
      "html_url": "https://github.com/barakman",
      "followers_url": "https://api.github.com/users/barakman/followers",
      "following_url": "https://api.github.com/users/barakman/following{/other_user}",
      "gists_url": "https://api.github.com/users/barakman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/barakman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/barakman/subscriptions",
      "organizations_url": "https://api.github.com/users/barakman/orgs",
      "repos_url": "https://api.github.com/users/barakman/repos",
      "events_url": "https://api.github.com/users/barakman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/barakman/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-09-18T20:06:36Z",
    "updated_at": "2018-09-18T20:06:57Z",
    "author_association": "CONTRIBUTOR",
    "body": "@rjkz808:\r\n\r\nRead bullet number 6 in [this answer](https://ethereum.stackexchange.com/a/200/16043) on ethereum.stackexchange.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/422533150/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
