{
  "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1660",
  "repository_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts",
  "labels_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1660/labels{/name}",
  "comments_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1660/comments",
  "events_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1660/events",
  "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1660",
  "id": 415952545,
  "node_id": "MDU6SXNzdWU0MTU5NTI1NDU=",
  "number": 1660,
  "title": "Use the Linked List to achieve a FIFO access.",
  "user": {
    "login": "Skyge",
    "id": 27282380,
    "node_id": "MDQ6VXNlcjI3MjgyMzgw",
    "avatar_url": "https://avatars.githubusercontent.com/u/27282380?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/Skyge",
    "html_url": "https://github.com/Skyge",
    "followers_url": "https://api.github.com/users/Skyge/followers",
    "following_url": "https://api.github.com/users/Skyge/following{/other_user}",
    "gists_url": "https://api.github.com/users/Skyge/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/Skyge/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/Skyge/subscriptions",
    "organizations_url": "https://api.github.com/users/Skyge/orgs",
    "repos_url": "https://api.github.com/users/Skyge/repos",
    "events_url": "https://api.github.com/users/Skyge/events{/privacy}",
    "received_events_url": "https://api.github.com/users/Skyge/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 503650860,
      "node_id": "MDU6TGFiZWw1MDM2NTA4NjA=",
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/labels/feature",
      "name": "feature",
      "color": "b9db64",
      "default": false,
      "description": "New contracts, functions, or helpers."
    },
    {
      "id": 503650966,
      "node_id": "MDU6TGFiZWw1MDM2NTA5NjY=",
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/labels/good%20first%20issue",
      "name": "good first issue",
      "color": "0e8a16",
      "default": true,
      "description": "Low hanging fruit for new contributors to get involved!"
    },
    {
      "id": 1000207718,
      "node_id": "MDU6TGFiZWwxMDAwMjA3NzE4",
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/labels/contracts",
      "name": "contracts",
      "color": "1d76db",
      "default": false,
      "description": "Smart contract code."
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 19,
  "created_at": "2019-03-01T05:51:21Z",
  "updated_at": "2019-04-11T02:52:42Z",
  "closed_at": "2019-04-09T16:13:44Z",
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "**üßê Motivation**\r\nA FIFO access with Linked List in the Solidity.\r\n\r\n**üìù Details**\r\nIn my problem, there exists such a situation: I want to store an array structure, such as\r\n```\r\n    struct PlayerInfo{\r\n        address _account;\r\n        uint256 _ownAmount;\r\n    }\r\n```\r\nBecause I want to `push` the newest, and `pop` the oldest,\r\nso there may be an array to store their sequence, such as\r\n ```\r\n    PlayerInfo[] public players;\r\n```\r\nIn my project, recording order is essential.\r\nbut when we push in some elements and pop out some elements, we will find that\r\nthe first half of the array is empty. so just like in an Array List, in order to use space efficiently, \r\nwe would move the second half of the array to the empty position,\r\nsuch like this:\r\n```\r\n    for (uint256 i = 1; i <= _length-1; i++) {\r\n        players[i-1] = players[i];\r\n     }\r\n    delete players[_length-1];\r\n    players.length--;\r\n```\r\nok, now you will understand what I want to achieve, a FIFO access,\r\nand according to @nventuro 's  advice, \r\nit could be a [circular buffer](https://en.wikipedia.org/wiki/Circular_buffer).\r\n(thanks for @nventuro at here!), \r\nbut we all know that, every operation in the EVM will cost some gas,\r\nso it should be better to achieve by Linked List,\r\nbecause it can remove element efficiently,\r\nand this is what I want to find out, because I really would run the function of  `delete()` frequently.\r\nSo now the problem comes out, how to achieve a Linked List in the Solidity?\r\n\r\nAnd what I need likes this:\r\n```\r\n    uint256 private _total;\r\n\t\t\r\n    struct PlayerInfo{\r\n    address _account;\r\n    uint256 _ownAmount;\r\n    }\r\n\r\n    PlayerInfo[] public players;\r\n\t\r\n    /// @dev This should be equal to push an element in the array list.\r\n    function addPlayer(address _sender, uint256 _count) public onlyOwner returns (bool) {}\r\n\r\n    /// @dev This should be equal to pop an element in the array list.\r\n    function removePlayer() public onlyOwner returns (bool) {}\r\n\r\n    /// @dev This should be equal to delete an element in the linked list.\r\n    function removePlayerByAddress(address _toRemove) public onlyOwner returns (bool) {}\r\n```",
  "closed_by": {
    "login": "nventuro",
    "id": 2530770,
    "node_id": "MDQ6VXNlcjI1MzA3NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/2530770?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nventuro",
    "html_url": "https://github.com/nventuro",
    "followers_url": "https://api.github.com/users/nventuro/followers",
    "following_url": "https://api.github.com/users/nventuro/following{/other_user}",
    "gists_url": "https://api.github.com/users/nventuro/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nventuro/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nventuro/subscriptions",
    "organizations_url": "https://api.github.com/users/nventuro/orgs",
    "repos_url": "https://api.github.com/users/nventuro/repos",
    "events_url": "https://api.github.com/users/nventuro/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nventuro/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1660/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1660/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/468562307",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1660#issuecomment-468562307",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1660",
    "id": 468562307,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ2ODU2MjMwNw==",
    "user": {
      "login": "Skyge",
      "id": 27282380,
      "node_id": "MDQ6VXNlcjI3MjgyMzgw",
      "avatar_url": "https://avatars.githubusercontent.com/u/27282380?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Skyge",
      "html_url": "https://github.com/Skyge",
      "followers_url": "https://api.github.com/users/Skyge/followers",
      "following_url": "https://api.github.com/users/Skyge/following{/other_user}",
      "gists_url": "https://api.github.com/users/Skyge/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Skyge/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Skyge/subscriptions",
      "organizations_url": "https://api.github.com/users/Skyge/orgs",
      "repos_url": "https://api.github.com/users/Skyge/repos",
      "events_url": "https://api.github.com/users/Skyge/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Skyge/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-03-01T06:47:05Z",
    "updated_at": "2019-03-01T06:47:05Z",
    "author_association": "CONTRIBUTOR",
    "body": "I thought for a while, and I realize a key point, I want to remove elements by their order,\r\nbut why do I must use an array to record, I can make some changes in the struct, such as:\r\n```\r\n    struct PlayerInfo{\r\n        uint256 _ownAmount;\r\n        address _account;\r\n        address _lastAddress;\r\n        address _nextAddress;\r\n    }\r\n```\r\nthen I can record their sequence without an array, so I should write like: \r\n```\r\n    mapping(address => PlayerInfo) players;\r\n```\r\nSo all modified code should be:\r\n```\r\n    address public _currentAddress;\r\n    address public _toRemoveAddress;\r\n    uint256 public _total;\r\n    \r\n    struct PlayerInfo{\r\n        uint256 _ownAmount;\r\n        address _account;\r\n        address _lastAddress;\r\n        address _nextAddress;\r\n    }\r\n    \r\n    mapping(address => PlayerInfo) public players;\r\n\r\n    /// @dev This is equal to push an element in the array list.\r\n    function addPlayer(address _account, uint256 _amount) public  returns (bool) {\r\n        if (_total == 0) {\r\n            _toRemoveAddress = _account;\r\n        }else {\r\n            players[_currentAddress]._nextAddress = _account;\r\n        }\r\n        \r\n        players[_account] = PlayerInfo(_amount, _account, _currentAddress, address(0));\r\n        _currentAddress = _account;\r\n        _total = _total + 1;\r\n    }\r\n\r\n    /// @dev This is equal to pop an element in the array list.\r\n    function removePlayer() public  returns (bool) {\r\n        address _temp = players[_toRemoveAddress]._nextAddress;\r\n        delete players[_toRemoveAddress];\r\n        players[_temp]._lastAddress = address(0);\r\n        _toRemoveAddress = _temp;\r\n    }\r\n\r\n    /// @dev This is equal to delete an element in the linked list.\r\n    function removePlayerByAddress(address _toDelete) public  returns (bool) {\r\n        address _tempLast = players[_toDelete]._lastAddress;\r\n        address _tempNext = players[_toDelete]._nextAddress;\r\n        \r\n        delete players[_toDelete];\r\n        players[_tempLast]._nextAddress = _tempNext;\r\n        players[_tempNext]._lastAddress = _tempLast;\r\n    }\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/468562307/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/468563644",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1660#issuecomment-468563644",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1660",
    "id": 468563644,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ2ODU2MzY0NA==",
    "user": {
      "login": "Skyge",
      "id": 27282380,
      "node_id": "MDQ6VXNlcjI3MjgyMzgw",
      "avatar_url": "https://avatars.githubusercontent.com/u/27282380?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Skyge",
      "html_url": "https://github.com/Skyge",
      "followers_url": "https://api.github.com/users/Skyge/followers",
      "following_url": "https://api.github.com/users/Skyge/following{/other_user}",
      "gists_url": "https://api.github.com/users/Skyge/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Skyge/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Skyge/subscriptions",
      "organizations_url": "https://api.github.com/users/Skyge/orgs",
      "repos_url": "https://api.github.com/users/Skyge/repos",
      "events_url": "https://api.github.com/users/Skyge/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Skyge/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-03-01T06:54:20Z",
    "updated_at": "2019-03-01T06:54:20Z",
    "author_association": "CONTRIBUTOR",
    "body": "OK, please just give me some advice, and I will make a standard code \r\nwith the version `0.5.x` later.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/468563644/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/468721302",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1660#issuecomment-468721302",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1660",
    "id": 468721302,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ2ODcyMTMwMg==",
    "user": {
      "login": "nventuro",
      "id": 2530770,
      "node_id": "MDQ6VXNlcjI1MzA3NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2530770?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nventuro",
      "html_url": "https://github.com/nventuro",
      "followers_url": "https://api.github.com/users/nventuro/followers",
      "following_url": "https://api.github.com/users/nventuro/following{/other_user}",
      "gists_url": "https://api.github.com/users/nventuro/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nventuro/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nventuro/subscriptions",
      "organizations_url": "https://api.github.com/users/nventuro/orgs",
      "repos_url": "https://api.github.com/users/nventuro/repos",
      "events_url": "https://api.github.com/users/nventuro/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nventuro/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-03-01T16:21:00Z",
    "updated_at": "2019-03-01T16:21:00Z",
    "author_association": "CONTRIBUTOR",
    "body": "Hey there @Skyge, thanks for opening this! I know @elopio has read lots of awful array-management code while conducting security audits, perhaps you could share some of your learnings and common requirements here?",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/468721302/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/468735465",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1660#issuecomment-468735465",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1660",
    "id": 468735465,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ2ODczNTQ2NQ==",
    "user": {
      "login": "Skyge",
      "id": 27282380,
      "node_id": "MDQ6VXNlcjI3MjgyMzgw",
      "avatar_url": "https://avatars.githubusercontent.com/u/27282380?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Skyge",
      "html_url": "https://github.com/Skyge",
      "followers_url": "https://api.github.com/users/Skyge/followers",
      "following_url": "https://api.github.com/users/Skyge/following{/other_user}",
      "gists_url": "https://api.github.com/users/Skyge/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Skyge/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Skyge/subscriptions",
      "organizations_url": "https://api.github.com/users/Skyge/orgs",
      "repos_url": "https://api.github.com/users/Skyge/repos",
      "events_url": "https://api.github.com/users/Skyge/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Skyge/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-03-01T17:01:33Z",
    "updated_at": "2019-03-01T17:01:33Z",
    "author_association": "CONTRIBUTOR",
    "body": "Ok, I will think my requirements seriously, and then share it.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/468735465/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/468737092",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1660#issuecomment-468737092",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1660",
    "id": 468737092,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ2ODczNzA5Mg==",
    "user": {
      "login": "come-maiz",
      "id": 617831,
      "node_id": "MDQ6VXNlcjYxNzgzMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/617831?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/come-maiz",
      "html_url": "https://github.com/come-maiz",
      "followers_url": "https://api.github.com/users/come-maiz/followers",
      "following_url": "https://api.github.com/users/come-maiz/following{/other_user}",
      "gists_url": "https://api.github.com/users/come-maiz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/come-maiz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/come-maiz/subscriptions",
      "organizations_url": "https://api.github.com/users/come-maiz/orgs",
      "repos_url": "https://api.github.com/users/come-maiz/repos",
      "events_url": "https://api.github.com/users/come-maiz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/come-maiz/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-03-01T17:06:24Z",
    "updated_at": "2019-03-01T17:06:24Z",
    "author_association": "CONTRIBUTOR",
    "body": "The biggest problem here is the lack of generics in solidity. This means that if we implement a list for uint256, we will have to implement another one for addresses, and another one for your custom struct. \r\nI think most of our efforts should go towards that first: https://github.com/ethereum/solidity/issues/869",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/468737092/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/481039887",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1660#issuecomment-481039887",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1660",
    "id": 481039887,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ4MTAzOTg4Nw==",
    "user": {
      "login": "nventuro",
      "id": 2530770,
      "node_id": "MDQ6VXNlcjI1MzA3NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2530770?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nventuro",
      "html_url": "https://github.com/nventuro",
      "followers_url": "https://api.github.com/users/nventuro/followers",
      "following_url": "https://api.github.com/users/nventuro/following{/other_user}",
      "gists_url": "https://api.github.com/users/nventuro/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nventuro/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nventuro/subscriptions",
      "organizations_url": "https://api.github.com/users/nventuro/orgs",
      "repos_url": "https://api.github.com/users/nventuro/repos",
      "events_url": "https://api.github.com/users/nventuro/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nventuro/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-04-08T23:07:29Z",
    "updated_at": "2019-04-08T23:07:29Z",
    "author_association": "CONTRIBUTOR",
    "body": "I don't think Solidity will be adding support for generics soon, and would like to at least get an initial implementation for common types, like `uint256` and `address`. A FIFO queue implemented using a circular buffer with read and write indexes sounds like an appropriate MVP for this.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/481039887/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/481042093",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1660#issuecomment-481042093",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1660",
    "id": 481042093,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ4MTA0MjA5Mw==",
    "user": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-04-08T23:18:14Z",
    "updated_at": "2019-04-08T23:18:14Z",
    "author_association": "MEMBER",
    "body": "We should implement for `address` only IMO.\r\n\r\nI thought this issue was about linked lists? I don't understand how a circular buffer would work in the EVM where it's not possible (and not reasonable?) to \"lock\" until a slot in the buffer is available.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/481042093/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/481042806",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1660#issuecomment-481042806",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1660",
    "id": 481042806,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ4MTA0MjgwNg==",
    "user": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-04-08T23:21:46Z",
    "updated_at": "2019-04-08T23:21:46Z",
    "author_association": "MEMBER",
    "body": "I think linked lists would be a useful structure to have in the EVM but the motivation in this issue is not the right one.\r\n\r\nIt's not necessary to use space efficiently in the EVM because there is effectively an infinit amount of it. A FIFO queue can be implemented by a dynamic array in storage. Rearranging elements is not necessary because you can assume that there is infinit room to grow the array.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/481042806/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/481045083",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1660#issuecomment-481045083",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1660",
    "id": 481045083,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ4MTA0NTA4Mw==",
    "user": {
      "login": "nventuro",
      "id": 2530770,
      "node_id": "MDQ6VXNlcjI1MzA3NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2530770?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nventuro",
      "html_url": "https://github.com/nventuro",
      "followers_url": "https://api.github.com/users/nventuro/followers",
      "following_url": "https://api.github.com/users/nventuro/following{/other_user}",
      "gists_url": "https://api.github.com/users/nventuro/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nventuro/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nventuro/subscriptions",
      "organizations_url": "https://api.github.com/users/nventuro/orgs",
      "repos_url": "https://api.github.com/users/nventuro/repos",
      "events_url": "https://api.github.com/users/nventuro/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nventuro/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-04-08T23:31:01Z",
    "updated_at": "2019-04-08T23:31:01Z",
    "author_association": "CONTRIBUTOR",
    "body": "Heh, I got carried away with the circular buffer idea. \r\n\r\nAn array-based FIFO is definitely possible and cheaper in the EVM: we'd just need a read index to read elements (which are `delete`d, but are still in the array), writing is simply `arr.push()`. Note that this means that the length of the queue is not `arr.lenght` but `arr.lenght - read_idx`.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/481045083/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/481059235",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1660#issuecomment-481059235",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1660",
    "id": 481059235,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ4MTA1OTIzNQ==",
    "user": {
      "login": "Skyge",
      "id": 27282380,
      "node_id": "MDQ6VXNlcjI3MjgyMzgw",
      "avatar_url": "https://avatars.githubusercontent.com/u/27282380?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Skyge",
      "html_url": "https://github.com/Skyge",
      "followers_url": "https://api.github.com/users/Skyge/followers",
      "following_url": "https://api.github.com/users/Skyge/following{/other_user}",
      "gists_url": "https://api.github.com/users/Skyge/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Skyge/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Skyge/subscriptions",
      "organizations_url": "https://api.github.com/users/Skyge/orgs",
      "repos_url": "https://api.github.com/users/Skyge/repos",
      "events_url": "https://api.github.com/users/Skyge/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Skyge/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-04-09T00:47:43Z",
    "updated_at": "2019-04-09T00:47:57Z",
    "author_association": "CONTRIBUTOR",
    "body": "> It's not necessary to use space efficiently in the EVM because there is effectively an infinit amount of it. A FIFO queue can be implemented by a dynamic array in storage. Rearranging elements is not necessary because you can assume that there is infinit room to grow the array.\r\n\r\nI am not sure, in my opinion, if I do not recycle space, I think it will be a little weird, because when we delete the first element in an array, array[0] still exists, but its value becomes undefined, so maybe when I try to update an element in the array, I should add a extra requirement `require(array[index]!=address(0))`, so I think it is a little weird and I want to recycle space.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/481059235/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/481059481",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1660#issuecomment-481059481",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1660",
    "id": 481059481,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ4MTA1OTQ4MQ==",
    "user": {
      "login": "Skyge",
      "id": 27282380,
      "node_id": "MDQ6VXNlcjI3MjgyMzgw",
      "avatar_url": "https://avatars.githubusercontent.com/u/27282380?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Skyge",
      "html_url": "https://github.com/Skyge",
      "followers_url": "https://api.github.com/users/Skyge/followers",
      "following_url": "https://api.github.com/users/Skyge/following{/other_user}",
      "gists_url": "https://api.github.com/users/Skyge/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Skyge/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Skyge/subscriptions",
      "organizations_url": "https://api.github.com/users/Skyge/orgs",
      "repos_url": "https://api.github.com/users/Skyge/repos",
      "events_url": "https://api.github.com/users/Skyge/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Skyge/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-04-09T00:49:04Z",
    "updated_at": "2019-04-09T00:49:04Z",
    "author_association": "CONTRIBUTOR",
    "body": "> An array-based FIFO is definitely possible and cheaper in the EVM: we'd just need a read index to read elements (which are `delete`d, but are still in the array), writing is simply `arr.push()`. Note that this means that the length of the queue is not `arr.lenght` but `arr.lenght - read_idx`.\r\n\r\nYeah, maybe we can try it in this way.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/481059481/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/481059872",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1660#issuecomment-481059872",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1660",
    "id": 481059872,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ4MTA1OTg3Mg==",
    "user": {
      "login": "nventuro",
      "id": 2530770,
      "node_id": "MDQ6VXNlcjI1MzA3NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2530770?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nventuro",
      "html_url": "https://github.com/nventuro",
      "followers_url": "https://api.github.com/users/nventuro/followers",
      "following_url": "https://api.github.com/users/nventuro/following{/other_user}",
      "gists_url": "https://api.github.com/users/nventuro/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nventuro/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nventuro/subscriptions",
      "organizations_url": "https://api.github.com/users/nventuro/orgs",
      "repos_url": "https://api.github.com/users/nventuro/repos",
      "events_url": "https://api.github.com/users/nventuro/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nventuro/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-04-09T00:51:46Z",
    "updated_at": "2019-04-09T00:51:56Z",
    "author_association": "CONTRIBUTOR",
    "body": ">so I think it is a little weird and I want to recycle space.\r\n\r\nYou do get the recycling of space, since you zero-out the slot. This is roughly what I (and I think @frangio) mean (untested!):\r\n\r\n```\r\ncontract FIFO {\r\n  address[] private _array;\r\n  uint256 private _read;\r\n\r\n  function push(address value) public {\r\n    _array.push(value);\r\n  }\r\n\r\n  function pop() public returns (uint256) {\r\n    require(_read < _array.length);\r\n\r\n    uin256 value = _array[_read];\r\n    delete(_array[_read]);\r\n    _read += 1;\r\n\r\n    return value;\r\n  }\r\n\r\n  function length() public view returns (uint256) { \r\n   return _array.length - _read;\r\n  }\r\n}\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/481059872/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/481064306",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1660#issuecomment-481064306",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1660",
    "id": 481064306,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ4MTA2NDMwNg==",
    "user": {
      "login": "Skyge",
      "id": 27282380,
      "node_id": "MDQ6VXNlcjI3MjgyMzgw",
      "avatar_url": "https://avatars.githubusercontent.com/u/27282380?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Skyge",
      "html_url": "https://github.com/Skyge",
      "followers_url": "https://api.github.com/users/Skyge/followers",
      "following_url": "https://api.github.com/users/Skyge/following{/other_user}",
      "gists_url": "https://api.github.com/users/Skyge/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Skyge/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Skyge/subscriptions",
      "organizations_url": "https://api.github.com/users/Skyge/orgs",
      "repos_url": "https://api.github.com/users/Skyge/repos",
      "events_url": "https://api.github.com/users/Skyge/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Skyge/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-04-09T01:17:38Z",
    "updated_at": "2019-04-09T01:17:38Z",
    "author_association": "CONTRIBUTOR",
    "body": "I become a little confused, you said \r\n```\r\nsince you zero-out the slot.\r\n```\r\nJust like your code, I call `pop()` to delete the first element, the value of `_array[0]` change from a specific value to `address(0)`, so although I can still call `_array[0]`, but it does not use any space, does it?",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/481064306/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/481103131",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1660#issuecomment-481103131",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1660",
    "id": 481103131,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ4MTEwMzEzMQ==",
    "user": {
      "login": "nventuro",
      "id": 2530770,
      "node_id": "MDQ6VXNlcjI1MzA3NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2530770?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nventuro",
      "html_url": "https://github.com/nventuro",
      "followers_url": "https://api.github.com/users/nventuro/followers",
      "following_url": "https://api.github.com/users/nventuro/following{/other_user}",
      "gists_url": "https://api.github.com/users/nventuro/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nventuro/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nventuro/subscriptions",
      "organizations_url": "https://api.github.com/users/nventuro/orgs",
      "repos_url": "https://api.github.com/users/nventuro/repos",
      "events_url": "https://api.github.com/users/nventuro/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nventuro/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-04-09T05:03:44Z",
    "updated_at": "2019-04-09T05:03:44Z",
    "author_association": "CONTRIBUTOR",
    "body": "On the EVM, all storage slots exist (they can be read from and written to), and are initialized with 0. Nodes simply keep track of which ones have been written with a non-zero value, and delete slots from that list when you write zero to them. It is because of this that changing a value from zero to non-zero is more expensive than from non-zero to non-zero, and why changing it back to zero refunds gas.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/481103131/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/481163051",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1660#issuecomment-481163051",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1660",
    "id": 481163051,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ4MTE2MzA1MQ==",
    "user": {
      "login": "Skyge",
      "id": 27282380,
      "node_id": "MDQ6VXNlcjI3MjgyMzgw",
      "avatar_url": "https://avatars.githubusercontent.com/u/27282380?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Skyge",
      "html_url": "https://github.com/Skyge",
      "followers_url": "https://api.github.com/users/Skyge/followers",
      "following_url": "https://api.github.com/users/Skyge/following{/other_user}",
      "gists_url": "https://api.github.com/users/Skyge/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Skyge/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Skyge/subscriptions",
      "organizations_url": "https://api.github.com/users/Skyge/orgs",
      "repos_url": "https://api.github.com/users/Skyge/repos",
      "events_url": "https://api.github.com/users/Skyge/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Skyge/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-04-09T08:52:12Z",
    "updated_at": "2019-04-09T08:52:12Z",
    "author_association": "CONTRIBUTOR",
    "body": "Oh, I see, thanks for your explanation.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/481163051/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/481319261",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1660#issuecomment-481319261",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1660",
    "id": 481319261,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ4MTMxOTI2MQ==",
    "user": {
      "login": "nventuro",
      "id": 2530770,
      "node_id": "MDQ6VXNlcjI1MzA3NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2530770?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nventuro",
      "html_url": "https://github.com/nventuro",
      "followers_url": "https://api.github.com/users/nventuro/followers",
      "following_url": "https://api.github.com/users/nventuro/following{/other_user}",
      "gists_url": "https://api.github.com/users/nventuro/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nventuro/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nventuro/subscriptions",
      "organizations_url": "https://api.github.com/users/nventuro/orgs",
      "repos_url": "https://api.github.com/users/nventuro/repos",
      "events_url": "https://api.github.com/users/nventuro/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nventuro/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-04-09T16:13:44Z",
    "updated_at": "2019-04-09T16:13:44Z",
    "author_association": "CONTRIBUTOR",
    "body": "@Skyge I think this issue is larger than simply coding a FIFO queue, since e.g. even if we did it for `address`, it wouldn't be useful for you and your custom data structure. I opened a [post in the forum](https://forum.zeppelin.solutions/t/data-structures-lists-queues-trees-etc/510) to discuss this and other ideas, come take a look! Closing the issue to continue discussion there.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/481319261/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/481482979",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1660#issuecomment-481482979",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1660",
    "id": 481482979,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ4MTQ4Mjk3OQ==",
    "user": {
      "login": "Skyge",
      "id": 27282380,
      "node_id": "MDQ6VXNlcjI3MjgyMzgw",
      "avatar_url": "https://avatars.githubusercontent.com/u/27282380?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Skyge",
      "html_url": "https://github.com/Skyge",
      "followers_url": "https://api.github.com/users/Skyge/followers",
      "following_url": "https://api.github.com/users/Skyge/following{/other_user}",
      "gists_url": "https://api.github.com/users/Skyge/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Skyge/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Skyge/subscriptions",
      "organizations_url": "https://api.github.com/users/Skyge/orgs",
      "repos_url": "https://api.github.com/users/Skyge/repos",
      "events_url": "https://api.github.com/users/Skyge/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Skyge/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-04-09T23:59:22Z",
    "updated_at": "2019-04-09T23:59:22Z",
    "author_association": "CONTRIBUTOR",
    "body": "OK",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/481482979/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/481912575",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1660#issuecomment-481912575",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1660",
    "id": 481912575,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ4MTkxMjU3NQ==",
    "user": {
      "login": "Skyge",
      "id": 27282380,
      "node_id": "MDQ6VXNlcjI3MjgyMzgw",
      "avatar_url": "https://avatars.githubusercontent.com/u/27282380?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Skyge",
      "html_url": "https://github.com/Skyge",
      "followers_url": "https://api.github.com/users/Skyge/followers",
      "following_url": "https://api.github.com/users/Skyge/following{/other_user}",
      "gists_url": "https://api.github.com/users/Skyge/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Skyge/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Skyge/subscriptions",
      "organizations_url": "https://api.github.com/users/Skyge/orgs",
      "repos_url": "https://api.github.com/users/Skyge/repos",
      "events_url": "https://api.github.com/users/Skyge/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Skyge/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-04-10T23:45:42Z",
    "updated_at": "2019-04-10T23:45:42Z",
    "author_association": "CONTRIBUTOR",
    "body": "Hi, @nventuro I can not find the post in the forum, so do we delete it?",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/481912575/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/481945023",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1660#issuecomment-481945023",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/1660",
    "id": 481945023,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ4MTk0NTAyMw==",
    "user": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-04-11T02:52:42Z",
    "updated_at": "2019-04-11T02:52:42Z",
    "author_association": "MEMBER",
    "body": "@Skyge It had been deleted but I think it was an accident. I have restored it now. Apologies.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/481945023/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
