{
  "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2949",
  "repository_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts",
  "labels_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2949/labels{/name}",
  "comments_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2949/comments",
  "events_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2949/events",
  "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2949",
  "id": 1046351738,
  "node_id": "I_kwDOA9tCBs4-Xg96",
  "number": 2949,
  "title": "Should the MerkleProof library verify empty proofs? ",
  "user": {
    "login": "nicholashc",
    "id": 44581646,
    "node_id": "MDQ6VXNlcjQ0NTgxNjQ2",
    "avatar_url": "https://avatars.githubusercontent.com/u/44581646?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nicholashc",
    "html_url": "https://github.com/nicholashc",
    "followers_url": "https://api.github.com/users/nicholashc/followers",
    "following_url": "https://api.github.com/users/nicholashc/following{/other_user}",
    "gists_url": "https://api.github.com/users/nicholashc/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nicholashc/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nicholashc/subscriptions",
    "organizations_url": "https://api.github.com/users/nicholashc/orgs",
    "repos_url": "https://api.github.com/users/nicholashc/repos",
    "events_url": "https://api.github.com/users/nicholashc/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nicholashc/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 1,
  "created_at": "2021-11-06T01:26:14Z",
  "updated_at": "2021-11-06T21:27:54Z",
  "closed_at": "2021-11-06T21:27:53Z",
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "The MerkleProof.sol library returns `true` when verifying a proof with arguments that meet these conditions:\r\n\r\n1. `proof` is an empty array\r\n2. `root` == `leaf`\r\n\r\nShould the library validate an empty Merkle proof?\r\n\r\n**üìù Details**\r\n\r\n[MerkleProof.sol](https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/cryptography/MerkleProof.sol) checks for the inclusion of a leaf in a given Merkle tree. The function `verify(proof[], root, leaf)` checks if the root is equal to the computed hash of the proof. The function `processProof(proof[], leaf)` computes the result of the proof. \r\n\r\nThe local variable `computedHash` is initialized as `leaf`. Normally, it is hashed with each item in the `proof` array in a loop. If `proof` is an empty array with a length of 0, however, the loop block is never reached. The function simply returns `leaf`. The library now verifies if `root == leaf` and returns `true` if the original two arguments were the same.\r\n\r\nTechnically, an empty array is a valid proof of a tree with only one node.  Does sensible input validation fall within the scope of this library's responsibilities? \r\n\r\n**üî¢ Code to reproduce bug**\r\n\r\nConsider a simple example contract using the MerkleProof.sol library:\r\n\r\n```solidity\r\n// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.3.2 (utils/cryptography/MerkleProof.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\";\r\n\r\ncontract MerkleProofProof {\r\n    \r\n    function verify(\r\n        bytes32[] memory proof, \r\n        bytes32 root, \r\n        bytes32 leaf\r\n    ) \r\n        external\r\n        pure\r\n        returns (bool isValidProof) \r\n    {    \r\n        return MerkleProof.verify(proof, root, leaf);\r\n    }\r\n}\r\n```\r\n\r\nCalling `verify(proof[], root, leaf)` invokes the MerkleProof.sol library method by the same name. If `proof` is an empty array and `root` == `leaf`, it returns `true`. \r\n\r\nExample calldata:\r\n\r\n`0x5a9a49c70000000000000000000000000000000000000000000000000000000000000060ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000000000000000000000000000000000000000000000000000000000000000`\r\n",
  "closed_by": {
    "login": "Amxx",
    "id": 2432299,
    "node_id": "MDQ6VXNlcjI0MzIyOTk=",
    "avatar_url": "https://avatars.githubusercontent.com/u/2432299?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/Amxx",
    "html_url": "https://github.com/Amxx",
    "followers_url": "https://api.github.com/users/Amxx/followers",
    "following_url": "https://api.github.com/users/Amxx/following{/other_user}",
    "gists_url": "https://api.github.com/users/Amxx/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/Amxx/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/Amxx/subscriptions",
    "organizations_url": "https://api.github.com/users/Amxx/orgs",
    "repos_url": "https://api.github.com/users/Amxx/repos",
    "events_url": "https://api.github.com/users/Amxx/events{/privacy}",
    "received_events_url": "https://api.github.com/users/Amxx/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2949/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2949/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/962512265",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2949#issuecomment-962512265",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2949",
    "id": 962512265,
    "node_id": "IC_kwDOA9tCBs45XsWJ",
    "user": {
      "login": "Amxx",
      "id": 2432299,
      "node_id": "MDQ6VXNlcjI0MzIyOTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2432299?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Amxx",
      "html_url": "https://github.com/Amxx",
      "followers_url": "https://api.github.com/users/Amxx/followers",
      "following_url": "https://api.github.com/users/Amxx/following{/other_user}",
      "gists_url": "https://api.github.com/users/Amxx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Amxx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Amxx/subscriptions",
      "organizations_url": "https://api.github.com/users/Amxx/orgs",
      "repos_url": "https://api.github.com/users/Amxx/repos",
      "events_url": "https://api.github.com/users/Amxx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Amxx/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-11-06T21:27:53Z",
    "updated_at": "2021-11-06T21:27:53Z",
    "author_association": "COLLABORATOR",
    "body": "Hello @nicholashc \r\n\r\nA Merkle-tree that contains a single a single entry will be reduced to only one node, which is both the only leaf AND the root of the tree. In that case, an empty proof is the expected proof.\r\n\r\nRequiring the proof to be non-empty would forbid merkle-trees containing a single entry. I don't see any reason to forbid such trees and lose the generality for no security benefit.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/962512265/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
