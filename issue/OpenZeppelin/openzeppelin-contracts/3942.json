{
  "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3942",
  "repository_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts",
  "labels_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3942/labels{/name}",
  "comments_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3942/comments",
  "events_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3942/events",
  "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3942",
  "id": 1528447216,
  "node_id": "I_kwDOA9tCBs5bGkDw",
  "number": 3942,
  "title": "Is _beforeTokenTransfer of ERC721.sol in the right place?",
  "user": {
    "login": "0xInuarashi",
    "id": 88496996,
    "node_id": "MDQ6VXNlcjg4NDk2OTk2",
    "avatar_url": "https://avatars.githubusercontent.com/u/88496996?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/0xInuarashi",
    "html_url": "https://github.com/0xInuarashi",
    "followers_url": "https://api.github.com/users/0xInuarashi/followers",
    "following_url": "https://api.github.com/users/0xInuarashi/following{/other_user}",
    "gists_url": "https://api.github.com/users/0xInuarashi/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/0xInuarashi/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/0xInuarashi/subscriptions",
    "organizations_url": "https://api.github.com/users/0xInuarashi/orgs",
    "repos_url": "https://api.github.com/users/0xInuarashi/repos",
    "events_url": "https://api.github.com/users/0xInuarashi/events{/privacy}",
    "received_events_url": "https://api.github.com/users/0xInuarashi/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 6,
  "created_at": "2023-01-11T05:15:52Z",
  "updated_at": "2023-01-11T22:36:32Z",
  "closed_at": "2023-01-11T22:36:31Z",
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "Hello, I just looked today at ERC721.sol and found this function which I expected to be empty.\r\n\r\n```\r\nfunction _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 /* firstTokenId */,\r\n        uint256 batchSize\r\n    ) internal virtual {\r\n        if (batchSize > 1) {\r\n            if (from != address(0)) {\r\n                _balances[from] -= batchSize;\r\n            }\r\n            if (to != address(0)) {\r\n                _balances[to] += batchSize;\r\n            }\r\n        }\r\n    }\r\n```\r\n\r\nThis was strange to me as ERC721.sol did not include any \"batch logic\" at all.\r\n\r\nAlas, I saw that 2 months ago there was a new extension to ERC721.sol called ERC721Consecutive.sol which has also an _afterTokenTransfer \r\n\r\n```\r\n    function _afterTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 firstTokenId,\r\n        uint256 batchSize\r\n    ) internal virtual override {\r\n        if (\r\n            to == address(0) && // if we burn\r\n            firstTokenId < _totalConsecutiveSupply() && // and the tokenId was minted in a batch\r\n            !_sequentialBurn.get(firstTokenId) // and the token was never marked as burnt\r\n        ) {\r\n            require(batchSize == 1, \"ERC721Consecutive: batch burn not supported\");\r\n            _sequentialBurn.set(firstTokenId);\r\n        }\r\n        super._afterTokenTransfer(from, to, firstTokenId, batchSize);\r\n    }\r\n\r\n    function _totalConsecutiveSupply() private view returns (uint96) {\r\n        (bool exists, uint96 latestId, ) = _sequentialOwnership.latestCheckpoint();\r\n        return exists ? latestId + 1 : 0;\r\n    }\r\n```\r\n\r\nI feel like the _beforeTokenTransfer was put out of place, should be put in ERC721Consecutive.sol instead of the standard ERC721.sol \r\n\r\nIs this the case? Please check it out. To me, it makes no sense to include such logic in the original ERC721.sol.",
  "closed_by": {
    "login": "frangio",
    "id": 481465,
    "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
    "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/frangio",
    "html_url": "https://github.com/frangio",
    "followers_url": "https://api.github.com/users/frangio/followers",
    "following_url": "https://api.github.com/users/frangio/following{/other_user}",
    "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
    "organizations_url": "https://api.github.com/users/frangio/orgs",
    "repos_url": "https://api.github.com/users/frangio/repos",
    "events_url": "https://api.github.com/users/frangio/events{/privacy}",
    "received_events_url": "https://api.github.com/users/frangio/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3942/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3942/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1378428825",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3942#issuecomment-1378428825",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3942",
    "id": 1378428825,
    "node_id": "IC_kwDOA9tCBs5SKSeZ",
    "user": {
      "login": "Amxx",
      "id": 2432299,
      "node_id": "MDQ6VXNlcjI0MzIyOTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2432299?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Amxx",
      "html_url": "https://github.com/Amxx",
      "followers_url": "https://api.github.com/users/Amxx/followers",
      "following_url": "https://api.github.com/users/Amxx/following{/other_user}",
      "gists_url": "https://api.github.com/users/Amxx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Amxx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Amxx/subscriptions",
      "organizations_url": "https://api.github.com/users/Amxx/orgs",
      "repos_url": "https://api.github.com/users/Amxx/repos",
      "events_url": "https://api.github.com/users/Amxx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Amxx/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-01-11T09:01:18Z",
    "updated_at": "2023-01-11T09:01:18Z",
    "author_association": "COLLABORATOR",
    "body": "Hello @0xInuarashi \r\n\r\nAs you found out, this is part of addition of ERC721Consecutive.\r\n\r\nWhen someone uses the `_mintConsecutive` function from the `ERC721Consecutive` module, we must track the balance increase for the receiving wallet. The thing is the `_balances` mapping is in `ERC721` and private, so we cannot touch it directly from `ERC721Consecutive`.\r\n\r\nOur solution was to use this hook so that the core `ERC721` code can update the balances when `_mintConsecutive` \"notifies\" it.\r\n\r\nWe are trying to rework that part of the code for the upcomming 5.0 version ",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1378428825/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1379120807",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3942#issuecomment-1379120807",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3942",
    "id": 1379120807,
    "node_id": "IC_kwDOA9tCBs5SM7an",
    "user": {
      "login": "0xInuarashi",
      "id": 88496996,
      "node_id": "MDQ6VXNlcjg4NDk2OTk2",
      "avatar_url": "https://avatars.githubusercontent.com/u/88496996?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/0xInuarashi",
      "html_url": "https://github.com/0xInuarashi",
      "followers_url": "https://api.github.com/users/0xInuarashi/followers",
      "following_url": "https://api.github.com/users/0xInuarashi/following{/other_user}",
      "gists_url": "https://api.github.com/users/0xInuarashi/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/0xInuarashi/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/0xInuarashi/subscriptions",
      "organizations_url": "https://api.github.com/users/0xInuarashi/orgs",
      "repos_url": "https://api.github.com/users/0xInuarashi/repos",
      "events_url": "https://api.github.com/users/0xInuarashi/events{/privacy}",
      "received_events_url": "https://api.github.com/users/0xInuarashi/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-01-11T16:39:22Z",
    "updated_at": "2023-01-11T16:39:22Z",
    "author_association": "NONE",
    "body": "Hey @Amxx thanks for the clarification. \r\n\r\nIs there any reason why the _balances mapping in `ERC721` is private instead of internal? \r\n\r\nJust wondering.\r\n\r\nThanks!",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1379120807/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1379128282",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3942#issuecomment-1379128282",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3942",
    "id": 1379128282,
    "node_id": "IC_kwDOA9tCBs5SM9Pa",
    "user": {
      "login": "0xInuarashi",
      "id": 88496996,
      "node_id": "MDQ6VXNlcjg4NDk2OTk2",
      "avatar_url": "https://avatars.githubusercontent.com/u/88496996?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/0xInuarashi",
      "html_url": "https://github.com/0xInuarashi",
      "followers_url": "https://api.github.com/users/0xInuarashi/followers",
      "following_url": "https://api.github.com/users/0xInuarashi/following{/other_user}",
      "gists_url": "https://api.github.com/users/0xInuarashi/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/0xInuarashi/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/0xInuarashi/subscriptions",
      "organizations_url": "https://api.github.com/users/0xInuarashi/orgs",
      "repos_url": "https://api.github.com/users/0xInuarashi/repos",
      "events_url": "https://api.github.com/users/0xInuarashi/events{/privacy}",
      "received_events_url": "https://api.github.com/users/0xInuarashi/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-01-11T16:42:34Z",
    "updated_at": "2023-01-11T16:42:34Z",
    "author_association": "NONE",
    "body": "Also, in ERC721Consecutive.sol, you have a function\r\n\r\n```\r\n    function _mint(address to, uint256 tokenId) internal virtual override {\r\n        require(Address.isContract(address(this)), \"ERC721Consecutive: can't mint during construction\");\r\n        super._mint(to, tokenId);\r\n    }\r\n```\r\n\r\nIs `tokenId` supposed to be `amount` ? \r\n\r\nAs I believe batch minting does not work with non-sequential tokenIds, unless ERC721Consecutive invented a way to make both sequential (batch) minting and non-sequential (specific tokenId) minting work together.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1379128282/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1379218750",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3942#issuecomment-1379218750",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3942",
    "id": 1379218750,
    "node_id": "IC_kwDOA9tCBs5SNTU-",
    "user": {
      "login": "Amxx",
      "id": 2432299,
      "node_id": "MDQ6VXNlcjI0MzIyOTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2432299?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Amxx",
      "html_url": "https://github.com/Amxx",
      "followers_url": "https://api.github.com/users/Amxx/followers",
      "following_url": "https://api.github.com/users/Amxx/following{/other_user}",
      "gists_url": "https://api.github.com/users/Amxx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Amxx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Amxx/subscriptions",
      "organizations_url": "https://api.github.com/users/Amxx/orgs",
      "repos_url": "https://api.github.com/users/Amxx/repos",
      "events_url": "https://api.github.com/users/Amxx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Amxx/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-01-11T17:19:55Z",
    "updated_at": "2023-01-11T17:19:55Z",
    "author_association": "COLLABORATOR",
    "body": "> Is there any reason why the _balances mapping in `ERC721` is private instead of internal?\r\n\r\nThat is part of our [guidelines](https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/GUIDELINES.md#solidity-code).",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1379218750/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1379226149",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3942#issuecomment-1379226149",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3942",
    "id": 1379226149,
    "node_id": "IC_kwDOA9tCBs5SNVIl",
    "user": {
      "login": "Amxx",
      "id": 2432299,
      "node_id": "MDQ6VXNlcjI0MzIyOTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2432299?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Amxx",
      "html_url": "https://github.com/Amxx",
      "followers_url": "https://api.github.com/users/Amxx/followers",
      "following_url": "https://api.github.com/users/Amxx/following{/other_user}",
      "gists_url": "https://api.github.com/users/Amxx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Amxx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Amxx/subscriptions",
      "organizations_url": "https://api.github.com/users/Amxx/orgs",
      "repos_url": "https://api.github.com/users/Amxx/repos",
      "events_url": "https://api.github.com/users/Amxx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Amxx/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-01-11T17:23:08Z",
    "updated_at": "2023-01-11T17:23:08Z",
    "author_association": "COLLABORATOR",
    "body": "> Is `tokenId` supposed to be `amount` ?\r\n> \r\n> As I believe batch minting does not work with non-sequential tokenIds, unless ERC721Consecutive invented a way to make both sequential (batch) minting and non-sequential (specific tokenId) minting work together.\r\n\r\nIn our implementation, you can use both batch minting and \"normal\" minting. \r\n\r\n- Batch minting is only allowed during the construction (so we remain compatible with EIP-721). That is done using the `_mintConsecutive` function\r\n- \"Normal\" minting becomes available after construction (at this point we know batch minting can no longer hapen) using the `_mint` function. \r\n\r\nThe code you shared above is the override that disables normal minting during construction if the Consecutive mode is enabled.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1379226149/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1379573186",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3942#issuecomment-1379573186",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3942",
    "id": 1379573186,
    "node_id": "IC_kwDOA9tCBs5SOp3C",
    "user": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-01-11T22:36:31Z",
    "updated_at": "2023-01-11T22:36:31Z",
    "author_association": "MEMBER",
    "body": "Thanks for the question @0xInuarashi. Let us know if you have any other suggestions.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1379573186/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
