{
  "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4451",
  "repository_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts",
  "labels_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4451/labels{/name}",
  "comments_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4451/comments",
  "events_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4451/events",
  "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/4451",
  "id": 1799341231,
  "node_id": "I_kwDOA9tCBs5rP8Sv",
  "number": 4451,
  "title": "ERC20 standard known issues.",
  "user": {
    "login": "Dexaran",
    "id": 26142412,
    "node_id": "MDQ6VXNlcjI2MTQyNDEy",
    "avatar_url": "https://avatars.githubusercontent.com/u/26142412?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/Dexaran",
    "html_url": "https://github.com/Dexaran",
    "followers_url": "https://api.github.com/users/Dexaran/followers",
    "following_url": "https://api.github.com/users/Dexaran/following{/other_user}",
    "gists_url": "https://api.github.com/users/Dexaran/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/Dexaran/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/Dexaran/subscriptions",
    "organizations_url": "https://api.github.com/users/Dexaran/orgs",
    "repos_url": "https://api.github.com/users/Dexaran/repos",
    "events_url": "https://api.github.com/users/Dexaran/events{/privacy}",
    "received_events_url": "https://api.github.com/users/Dexaran/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 0,
  "created_at": "2023-07-11T16:45:14Z",
  "updated_at": "2023-07-11T17:00:33Z",
  "closed_at": null,
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "### ERC20 token standard known issues.\r\n\r\nAll this tokens are affected: https://github.com/OpenZeppelin/openzeppelin-contracts/tree/master/contracts/token/ERC20\r\n\r\nHere you can find a full description: https://dexaran820.medium.com/known-problems-of-erc20-token-standard-e98887b9532c\r\n\r\nLong story short: there is no transaction handling implementation for `transfer` function in ERC20 standard (it is the flaw of the standard as it must enforce it - it is a critical feature).\r\n\r\nOn 27 Dec, 2017 there were [$4 million worth of tokens lost](https://github.com/ethereum/eips/issues/223) due to this flaw of the standard.\r\n\r\nOn 9 Mar, 2023 there were about $12 million worth of tokens lost.\r\n\r\nAs of today there are about $30 millions worth of tokens lost.\r\n\r\nSince the tokens are not recoverable the amount can only increase and in fact it WILL increase over time.\r\n\r\n**üíª Environment**\r\n\r\nRemix or whatever environment you may use to compile contracts.\r\n\r\n**üìù Details**\r\n\r\nUsers of ERC-20 tokens can lose their tokens.\r\n\r\nI suggest:\r\n\r\n1. Implement a special security check that prevents sending of ERC-20 tokens where they must not be delivered. In particular the `transfer(...)` function must not be used to send tokens to ANY contracts (because contracts rely on approve+transferFrom as a depositing pattern).\r\n\r\n```\r\n    function transfer(address to, uint256 value) public virtual returns (bool) {\r\n        require(!Address.isContract(to), \"ERC20: transfer to contracts must be performed via approve+transferFrom pattern\");\r\n        address owner = _msgSender();\r\n        _transfer(owner, to, value);\r\n        return true;\r\n    }\r\n```\r\n\r\n2. Add a corresponding paragraph to the documentation or code comments to warn the users and token developers about any potential issues. A warning that transferring tokens to contracts via `transfer(...)` func will result in a *deposit that will not be recognized by the recipient* i.e. the recipient CAN NOT KNOW that the deposit occured and it will not be credited as well as it can not be rejected by the recipient.\r\n\r\n3. Suggest implementing the `ERC20Rescure(...)` function in every contract which is supposed to work with tokens in order to extract any unintentionally deposited ERC20 tokens that were not recorded.\r\n\r\n```\r\n    // Rescue ERC20 tokens\r\n    function rescueERC20(address _token, uint256 _value) external {\r\n        require(msg.sender == ISoyFinanceFactory(factory).feeToSetter(), 'SoyFinance: FORBIDDEN');\r\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\r\n        _token.call(abi.encodeWithSelector(0xa9059cbb, msg.sender, _value));\r\n    }\r\n```\r\n\r\nIt is relevant and it often happens. Rescue missions are necessary for ERC20 tokens. For example AAVE handled it already https://twitter.com/AaveAave/status/1633126370166575104\r\n\r\n**üî¢ Code to reproduce bug**\r\n\r\nIt is a flaw of the standard, not any particular implementation so I suggest to add some features that may help to mitigate the consequences to some degree or at least lower the risks for end users.\r\n",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4451/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/4451/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[

]
