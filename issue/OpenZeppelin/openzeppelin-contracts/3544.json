{
  "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3544",
  "repository_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts",
  "labels_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3544/labels{/name}",
  "comments_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3544/comments",
  "events_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3544/events",
  "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3544",
  "id": 1303045198,
  "node_id": "I_kwDOA9tCBs5NquRO",
  "number": 3544,
  "title": "Library for safe interaction with untrusted contracts",
  "user": {
    "login": "pcaversaccio",
    "id": 25297591,
    "node_id": "MDQ6VXNlcjI1Mjk3NTkx",
    "avatar_url": "https://avatars.githubusercontent.com/u/25297591?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/pcaversaccio",
    "html_url": "https://github.com/pcaversaccio",
    "followers_url": "https://api.github.com/users/pcaversaccio/followers",
    "following_url": "https://api.github.com/users/pcaversaccio/following{/other_user}",
    "gists_url": "https://api.github.com/users/pcaversaccio/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/pcaversaccio/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/pcaversaccio/subscriptions",
    "organizations_url": "https://api.github.com/users/pcaversaccio/orgs",
    "repos_url": "https://api.github.com/users/pcaversaccio/repos",
    "events_url": "https://api.github.com/users/pcaversaccio/events{/privacy}",
    "received_events_url": "https://api.github.com/users/pcaversaccio/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 4,
  "created_at": "2022-07-13T07:49:55Z",
  "updated_at": "2022-07-16T11:02:59Z",
  "closed_at": "2022-07-14T21:10:36Z",
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "**Background**\r\n> Inspired by [ExcessivelySafeCall](https://github.com/nomad-xyz/ExcessivelySafeCall)\r\n\r\nA low-level Solidity call will copy _any amount of bytes_ to local memory. When bytes are copied from `returndata` to `memory`, the [memory expansion cost](https://ethereum.stackexchange.com/questions/92546/what-is-expansion-cost) is paid. This means that when using a standard Solidity call, the callee can **\"returnbomb\"** the caller, imposing an arbitrary gas cost. Because this gas is paid _by the caller_ and _in the caller's context_, it can cause the caller to run out of gas and halt execution.\r\n\r\n**Details**\r\n\r\nOpenZeppelin provides a library for safe interactions with untrusted contracts. Specifically, starting with `call` and `staticcall`. This would be in line with the current _safe_ libraries such as `SafeERC20` or `SafeCast`.\r\n",
  "closed_by": {
    "login": "frangio",
    "id": 481465,
    "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
    "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/frangio",
    "html_url": "https://github.com/frangio",
    "followers_url": "https://api.github.com/users/frangio/followers",
    "following_url": "https://api.github.com/users/frangio/following{/other_user}",
    "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
    "organizations_url": "https://api.github.com/users/frangio/orgs",
    "repos_url": "https://api.github.com/users/frangio/repos",
    "events_url": "https://api.github.com/users/frangio/events{/privacy}",
    "received_events_url": "https://api.github.com/users/frangio/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3544/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3544/timeline",
  "performed_via_github_app": null,
  "state_reason": "not_planned"
}
[
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1184899461",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3544#issuecomment-1184899461",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3544",
    "id": 1184899461,
    "node_id": "IC_kwDOA9tCBs5GoCGF",
    "user": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-07-14T21:10:17Z",
    "updated_at": "2022-07-14T21:10:17Z",
    "author_association": "MEMBER",
    "body": "Discussed before in https://github.com/OpenZeppelin/openzeppelin-contracts/pull/3168.\r\n\r\nSee our thoughts for not including this in https://github.com/OpenZeppelin/openzeppelin-contracts/pull/3168#issuecomment-1034989864.\r\n\r\nIn summary, there are some contexts where this protection is useful, but we believe the vast majority of users are not affected by this attack and we do not want to encourage unnecessary use of the pattern.\r\n\r\nFeel free to share if you disagree with this thinking. Will close as it has been discussed very recently.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1184899461/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1185383236",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3544#issuecomment-1185383236",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3544",
    "id": 1185383236,
    "node_id": "IC_kwDOA9tCBs5Gp4NE",
    "user": {
      "login": "pcaversaccio",
      "id": 25297591,
      "node_id": "MDQ6VXNlcjI1Mjk3NTkx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25297591?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pcaversaccio",
      "html_url": "https://github.com/pcaversaccio",
      "followers_url": "https://api.github.com/users/pcaversaccio/followers",
      "following_url": "https://api.github.com/users/pcaversaccio/following{/other_user}",
      "gists_url": "https://api.github.com/users/pcaversaccio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pcaversaccio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pcaversaccio/subscriptions",
      "organizations_url": "https://api.github.com/users/pcaversaccio/orgs",
      "repos_url": "https://api.github.com/users/pcaversaccio/repos",
      "events_url": "https://api.github.com/users/pcaversaccio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pcaversaccio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-07-15T09:57:46Z",
    "updated_at": "2022-07-15T10:27:39Z",
    "author_association": "CONTRIBUTOR",
    "body": "@frangio I understand the arguments about the reach of use for this library. \r\n\r\nNonetheless, let me share my use case for this library: I've built a [batch distributor](https://github.com/pcaversaccio/batch-distributor/blob/main/contracts/BatchDistributor.sol) which is essentially a helper smart contract for batch sending both native and ERC-20 tokens. Now, this contract is planned to be used by projects to distribute e.g. airdrops to pre-registered wallets, distribute funding via ETH to registered wallets (for devs), or to pay crypto salaries to employees in one batch, just to name a few (think about it as a modern version of [disperse.app](https://disperse.app)). The major reason why I use the low-level call `call` instead of `transfer` is that the 2,300 gas forward could be not enough for some cases where one of the addresses is a more complex e.g. multisig address or smart contract wallet. So to summarise, I tried to be as agnostic as possible and do not check for the existing code of an address. \r\n\r\nNow in the context of my batch distributor, it can well be that you have a list of 100-200 addresses to send ETH or ERC20 tokens to. Assume one or two of the addresses try to _returnbomb_ the ETH distribution and make the sender pay unnecessary money. There are two ways to resolve that:\r\n- Check each address if it's an EOA, and if not check for the receiving logic of the contract code. This can be really time-consuming and you don't know whether the logic is updated after checking in case the contract uses an upgradable pattern.\r\n- Use such a library for the low-level calls.\r\n\r\nIf the sender of a batch is not an advanced user, he/she might even trigger a couple of times the same transaction because Etherscan will just show an OOG error and probably he/she will not use e.g. Tenderly to debug the failing transaction in detail.\r\n\r\nIt might be a niche case, but I still wanted to share that with you. It's relevant for a use case where you send batches of ETH to a large list of \"unknown\" addresses.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1185383236/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1185773054",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3544#issuecomment-1185773054",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3544",
    "id": 1185773054,
    "node_id": "IC_kwDOA9tCBs5GrXX-",
    "user": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-07-15T17:57:21Z",
    "updated_at": "2022-07-15T17:57:21Z",
    "author_association": "MEMBER",
    "body": "In the case you describe you're not interested in the returndata at all, so it's not necessary to copy it to memory. If you don't copy it, the target contract can't cause any additional gas to be wasted.\r\n\r\nThis was addressed by the compiler in https://github.com/ethereum/solidity/issues/12647, and the fix was released in 0.8.13 apparently (not in the changelog so I've asked to confirm https://github.com/ethereum/solidity/pull/12684#issuecomment-1185771667).",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1185773054/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1186150253",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3544#issuecomment-1186150253",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3544",
    "id": 1186150253,
    "node_id": "IC_kwDOA9tCBs5Gszdt",
    "user": {
      "login": "pcaversaccio",
      "id": 25297591,
      "node_id": "MDQ6VXNlcjI1Mjk3NTkx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25297591?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pcaversaccio",
      "html_url": "https://github.com/pcaversaccio",
      "followers_url": "https://api.github.com/users/pcaversaccio/followers",
      "following_url": "https://api.github.com/users/pcaversaccio/following{/other_user}",
      "gists_url": "https://api.github.com/users/pcaversaccio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pcaversaccio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pcaversaccio/subscriptions",
      "organizations_url": "https://api.github.com/users/pcaversaccio/orgs",
      "repos_url": "https://api.github.com/users/pcaversaccio/repos",
      "events_url": "https://api.github.com/users/pcaversaccio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pcaversaccio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-07-16T10:47:50Z",
    "updated_at": "2022-07-16T11:02:59Z",
    "author_association": "CONTRIBUTOR",
    "body": "Ah very interesting, I was not aware that this was addressed by `0.8.13`. Thanks for the reference @frangio. In this case (since I'm using `0.8.15`) everything looks fine for my use case.\r\n\r\nUpdate: I quickly tweeted about it [here](https://twitter.com/pcaversaccio/status/1548261660518797314) so maybe further people will be aware of this fix by `0.8.13`.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1186150253/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
