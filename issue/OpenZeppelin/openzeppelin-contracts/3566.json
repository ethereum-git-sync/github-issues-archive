{
  "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3566",
  "repository_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts",
  "labels_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3566/labels{/name}",
  "comments_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3566/comments",
  "events_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3566/events",
  "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3566",
  "id": 1311075628,
  "node_id": "I_kwDOA9tCBs5OJW0s",
  "number": 3566,
  "title": "Error: \"setData is assigned a value but never used\"",
  "user": {
    "login": "mvwmotor",
    "id": 103935978,
    "node_id": "U_kgDOBjHv6g",
    "avatar_url": "https://avatars.githubusercontent.com/u/103935978?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/mvwmotor",
    "html_url": "https://github.com/mvwmotor",
    "followers_url": "https://api.github.com/users/mvwmotor/followers",
    "following_url": "https://api.github.com/users/mvwmotor/following{/other_user}",
    "gists_url": "https://api.github.com/users/mvwmotor/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/mvwmotor/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/mvwmotor/subscriptions",
    "organizations_url": "https://api.github.com/users/mvwmotor/orgs",
    "repos_url": "https://api.github.com/users/mvwmotor/repos",
    "events_url": "https://api.github.com/users/mvwmotor/events{/privacy}",
    "received_events_url": "https://api.github.com/users/mvwmotor/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 1,
  "created_at": "2022-07-20T13:13:11Z",
  "updated_at": "2022-07-20T15:20:05Z",
  "closed_at": "2022-07-20T15:20:05Z",
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "Hello,\r\nExcuse me for disturbing you,\r\n\r\nI meet a problem when I start the react app, the app start without any problems but the number of the NFT already sold don't appears and the price also (you can see on the screen).\r\n\r\nThis is the warn message:\r\n Line 22:16:  'setData' is assigned a value but never used  no-unused-vars\r\n  Line 35:15:  'object' is assigned a value but never used   no-unused-vars\r\n\r\n**This the App.js code:**\r\n\r\nimport { useState, useEffect } from 'react';\r\nimport { ethers } from 'ethers';\r\nimport GeometricFox from './artifacts/contracts/GeometricFox.sol/GeometricFox.json';\r\nimport './App.css';\r\nimport img1 from './img/1.png';\r\nimport img2 from './img/4.png';\r\nimport img3 from './img/76.png';\r\nimport img4 from './img/93.png';\r\nimport img5 from './img/289.png';\r\nimport img6 from './img/391.png';\r\nimport img7 from './img/409.png';\r\nimport img8 from './img/1101.png';\r\nimport img9 from './img/1472.png';\r\nimport img10 from './img/1487.png';\r\n\r\n\r\nconst GFaddress = \"0xCaf8Ab5A19213a8dBbA78fAC75c1eD38DEBe080b\"\r\n\r\nfunction App() {\r\n\r\n  const [error, setError] = useState('');\r\n  const [data, setData] = useState({})\r\n\r\n  useEffect(() => {\r\n    fetchData();\r\n  }, [])\r\n\r\n  async function fetchData() {\r\n    if(typeof window.ethereum !== 'undefined') {\r\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n      const contract = new ethers.Contract(GFaddress, GeometricFox.abi, provider);\r\n      try {\r\n        const cost = await contract.cost();\r\n        const totalSupply = await contract.totalSupply();\r\n        const object = {\"cost\": String(cost), \"totalSupply\": String(totalSupply)}\r\n      }\r\n      catch(err) {\r\n        setError(err.message);\r\n      }\r\n    }\r\n  }\r\n\r\n  async function mint() {\r\n    if(typeof window.ethereum !== 'undefined') {\r\n      let accounts = await window.ethereum.request({method: 'eth_requestAccounts'});\r\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n      const signer = provider.getSigner();\r\n      const contract = new ethers.Contract(GFaddress, GeometricFox.abi, signer);\r\n      try {\r\n        let overrides = {\r\n          from: accounts[0],\r\n          value: data.cost\r\n        }\r\n        const transaction = await contract.mint(accounts[0], 1, overrides);\r\n        await transaction.wait();\r\n        fetchData();\r\n      }\r\n      catch(err) {\r\n        setError(err.message);\r\n      }\r\n    }\r\n  }\r\n\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <div className=\"container\">\r\n        <div className=\"banniere\">\r\n          < img src={img1} alt=\"img\" />\r\n          < img src={img2} alt=\"img\" />\r\n          < img src={img3} alt=\"img\" />\r\n          < img src={img4} alt=\"img\" />\r\n          < img src={img5} alt=\"img\" />\r\n          < img src={img6} alt=\"img\" />\r\n          < img src={img7} alt=\"img\" />\r\n          < img src={img8} alt=\"img\" />\r\n          < img src={img9} alt=\"img\" />\r\n          < img src={img10} alt=\"img\" />\r\n        < /div>\r\n        {error && <p>{error}</p>}\r\n        < h1>Mint a Geometric Fox NFT</h1>\r\n        < p className='count'>{data.totalSupply} / 1542</p>\r\n        < p className=\"cost\">Each Geometric Fox NFT costs {data.cost / 10**18} eth (excluding gas fees)</p>\r\n        < button onClick={mint}>BUY one Geometric Fox NFT</button>\r\n      < /div>\r\n    < /div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n\r\n**Contract Code:**\r\n\r\n// SPDX-License-Identifier: GPL-3.0\r\n\r\n// Created by HashLips\r\n// The Nerdy Coder Clones\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\n\r\ncontract GreedyGeese is ERC721Enumerable, Ownable {\r\n  using Strings for uint256;\r\n\r\n  string public baseURI;\r\n  string public baseExtension = \".json\";\r\n  uint256 public cost = 0.01 ether;\r\n  uint256 public maxSupply = 50;\r\n  uint256 public maxMintAmount = 1542;\r\n  bool public paused = false;\r\n  mapping(address => bool) public whitelisted;\r\n\r\n  constructor(\r\n    string memory _name,\r\n    string memory _symbol,\r\n    string memory _initBaseURI\r\n  ) ERC721(_name, _symbol) {\r\n    setBaseURI(_initBaseURI);\r\n    mint(msg.sender, 5);\r\n  }\r\n\r\n  // internal\r\n  function _baseURI() internal view virtual override returns (string memory) {\r\n    return baseURI;\r\n  }\r\n\r\n  // public\r\n  function mint(address _to, uint256 _mintAmount) public payable {\r\n    uint256 supply = totalSupply();\r\n    require(!paused);\r\n    require(_mintAmount > 0);\r\n    require(_mintAmount <= maxMintAmount);\r\n    require(supply + _mintAmount <= maxSupply);\r\n\r\n    if (msg.sender != owner()) {\r\n        if(whitelisted[msg.sender] != true) {\r\n          require(msg.value >= cost * _mintAmount);\r\n        }\r\n    }\r\n\r\n    for (uint256 i = 1; i <= _mintAmount; i++) {\r\n      _safeMint(_to, supply + i);\r\n    }\r\n  }\r\n\r\n  function walletOfOwner(address _owner)\r\n    public\r\n    view\r\n    returns (uint256[] memory)\r\n  {\r\n    uint256 ownerTokenCount = balanceOf(_owner);\r\n    uint256[] memory tokenIds = new uint256[](ownerTokenCount);\r\n    for (uint256 i; i < ownerTokenCount; i++) {\r\n      tokenIds[i] = tokenOfOwnerByIndex(_owner, i);\r\n    }\r\n    return tokenIds;\r\n  }\r\n\r\n  function tokenURI(uint256 tokenId)\r\n    public\r\n    view\r\n    virtual\r\n    override\r\n    returns (string memory)\r\n  {\r\n    require(\r\n      _exists(tokenId),\r\n      \"ERC721Metadata: URI query for nonexistent token\"\r\n    );\r\n\r\n    string memory currentBaseURI = _baseURI();\r\n    return bytes(currentBaseURI).length > 0\r\n        ? string(abi.encodePacked(currentBaseURI, tokenId.toString(), baseExtension))\r\n        : \"\";\r\n  }\r\n\r\n  //only owner\r\n  function setCost(uint256 _newCost) public onlyOwner {\r\n    cost = _newCost;\r\n  }\r\n\r\n  function setmaxMintAmount(uint256 _newmaxMintAmount) public onlyOwner {\r\n    maxMintAmount = _newmaxMintAmount;\r\n  }\r\n\r\n  function setBaseURI(string memory _newBaseURI) public onlyOwner {\r\n    baseURI = _newBaseURI;\r\n  }\r\n\r\n  function setBaseExtension(string memory _newBaseExtension) public onlyOwner {\r\n    baseExtension = _newBaseExtension;\r\n  }\r\n\r\n  function pause(bool _state) public onlyOwner {\r\n    paused = _state;\r\n  }\r\n \r\n function whitelistUser(address _user) public onlyOwner {\r\n    whitelisted[_user] = true;\r\n  }\r\n \r\n  function removeWhitelistUser(address _user) public onlyOwner {\r\n    whitelisted[_user] = false;\r\n  }\r\n\r\n  function withdraw() public payable onlyOwner {\r\n    require(payable(msg.sender).send(address(this).balance));\r\n  }\r\n}",
  "closed_by": {
    "login": "frangio",
    "id": 481465,
    "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
    "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/frangio",
    "html_url": "https://github.com/frangio",
    "followers_url": "https://api.github.com/users/frangio/followers",
    "following_url": "https://api.github.com/users/frangio/following{/other_user}",
    "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
    "organizations_url": "https://api.github.com/users/frangio/orgs",
    "repos_url": "https://api.github.com/users/frangio/repos",
    "events_url": "https://api.github.com/users/frangio/events{/privacy}",
    "received_events_url": "https://api.github.com/users/frangio/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3566/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3566/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1190420816",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3566#issuecomment-1190420816",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/3566",
    "id": 1190420816,
    "node_id": "IC_kwDOA9tCBs5G9GFQ",
    "user": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-07-20T15:20:05Z",
    "updated_at": "2022-07-20T15:20:05Z",
    "author_association": "MEMBER",
    "body": "Please only report things that relate to smart contracts. React application issues are 100% out of scope.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/1190420816/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
