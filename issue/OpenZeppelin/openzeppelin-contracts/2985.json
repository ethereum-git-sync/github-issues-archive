{
  "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2985",
  "repository_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts",
  "labels_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2985/labels{/name}",
  "comments_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2985/comments",
  "events_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2985/events",
  "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2985",
  "id": 1061630615,
  "node_id": "I_kwDOA9tCBs4_RzKX",
  "number": 2985,
  "title": "safeTransferFrom being called by Anyone once setApprovalForAll has been called",
  "user": {
    "login": "JF0001",
    "id": 11094435,
    "node_id": "MDQ6VXNlcjExMDk0NDM1",
    "avatar_url": "https://avatars.githubusercontent.com/u/11094435?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/JF0001",
    "html_url": "https://github.com/JF0001",
    "followers_url": "https://api.github.com/users/JF0001/followers",
    "following_url": "https://api.github.com/users/JF0001/following{/other_user}",
    "gists_url": "https://api.github.com/users/JF0001/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/JF0001/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/JF0001/subscriptions",
    "organizations_url": "https://api.github.com/users/JF0001/orgs",
    "repos_url": "https://api.github.com/users/JF0001/repos",
    "events_url": "https://api.github.com/users/JF0001/events{/privacy}",
    "received_events_url": "https://api.github.com/users/JF0001/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 10,
  "created_at": "2021-11-23T19:20:32Z",
  "updated_at": "2021-12-06T03:21:57Z",
  "closed_at": "2021-11-24T09:13:25Z",
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "<!-- Briefly describe the issue you're experiencing. Tell us what you were trying to do and what happened instead. -->\r\n\r\nI have created a Dapp Marketplace (Web Portal) based on a Smart Contract (using OpenZepelin library), where users can purchase and sell NFTs. Owners can grant my Contract authorisation to sell their NFTs on their behalf by calling the setApprovalForAll function from the portal. I have noticed however, that once this approval has been granted, that any user, including a purchaser, can call the safeTransferFrom function directly on the Smart Contract.\r\n\r\n<!-- Remember, this is not a place to ask for help debugging code. For that, we welcome you in the OpenZeppelin Community Forum: https://forum.openzeppelin.com/. -->\r\n\r\n**üíª Environment**\r\nLinux Ubuntu 20.04\r\n\r\n<!-- Tell us what version of OpenZeppelin Contracts you're using, and how you're using it: Truffle, Remix, etc. -->\r\n\r\n@openzeppelin/contracts-upgradeable: ^4.3.2\r\n\r\n**üìù Details**\r\n\r\n<!-- Describe the problem you have been experiencing in more detail. Include as much information as you think is relevant. Keep in mind that transactions can fail for many reasons; context is key here. -->\r\n\r\nPlease see scenario described below:\r\n\r\n**üî¢ Code to reproduce bug**\r\n\r\nI have the following function in my ERC721 Smart Contract:\r\n\r\n` function tokTransfer(address payable from, address to, uint256 tokenId, uint256 price) external payable {\r\n   require(msg.value >= price);\r\n   this.safeTransferFrom(from, to, tokenId);\r\n   AddressUpgradeable.sendValue(from, price);\r\n }`\r\n\r\nI am calling this function from my front-end Dapp using the following:\r\n\r\n` this.contInst.methods.tokTransfer(tokOwner, this.account, TokenId, PriceBN).send({\r\n   from: this.account,\r\n   value: this.web3.utils.toWei(PriceStr, 'ether')\r\n })`\r\n\r\nToken owners have called the setApprovalForAll on my Smart Contract, granting it authorisation to sell their tokens on their behalf. However, I am able to call this function directly in Truffle with the following statement (using the Purchaser account (i.e. accounts[2]) as the from (i.e. _msgSender)):\r\n\r\n`instance.tokTransfer(accounts[1], accounts[2], 1001, '2500000000', {from: accounts[2], value: '2500000000'})`\r\n\r\nHow can I actually call my function, which itself calls the safeTransferFrom OpenZeppelin function, while the Sender (_msgSender i.e. Purchaser) of the Transaction does not satisfy the require statement in the function below?\r\n\r\n` function safeTransferFrom(\r\n    address from,\r\n    address to,\r\n    uint256 tokenId,\r\n    bytes memory _data\r\n ) public virtual override {\r\n    require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\r\n    _safeTransfer(from, to, tokenId, _data);\r\n }`\r\n\r\nThank you for your time. J\r\n\r\n<!-- We will be able to better help if you provide a minimal example that triggers the bug. -->\r\n",
  "closed_by": {
    "login": "Amxx",
    "id": 2432299,
    "node_id": "MDQ6VXNlcjI0MzIyOTk=",
    "avatar_url": "https://avatars.githubusercontent.com/u/2432299?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/Amxx",
    "html_url": "https://github.com/Amxx",
    "followers_url": "https://api.github.com/users/Amxx/followers",
    "following_url": "https://api.github.com/users/Amxx/following{/other_user}",
    "gists_url": "https://api.github.com/users/Amxx/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/Amxx/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/Amxx/subscriptions",
    "organizations_url": "https://api.github.com/users/Amxx/orgs",
    "repos_url": "https://api.github.com/users/Amxx/repos",
    "events_url": "https://api.github.com/users/Amxx/events{/privacy}",
    "received_events_url": "https://api.github.com/users/Amxx/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2985/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2985/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/977395824",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2985#issuecomment-977395824",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2985",
    "id": 977395824,
    "node_id": "IC_kwDOA9tCBs46QeBw",
    "user": {
      "login": "Skyge",
      "id": 27282380,
      "node_id": "MDQ6VXNlcjI3MjgyMzgw",
      "avatar_url": "https://avatars.githubusercontent.com/u/27282380?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Skyge",
      "html_url": "https://github.com/Skyge",
      "followers_url": "https://api.github.com/users/Skyge/followers",
      "following_url": "https://api.github.com/users/Skyge/following{/other_user}",
      "gists_url": "https://api.github.com/users/Skyge/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Skyge/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Skyge/subscriptions",
      "organizations_url": "https://api.github.com/users/Skyge/orgs",
      "repos_url": "https://api.github.com/users/Skyge/repos",
      "events_url": "https://api.github.com/users/Skyge/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Skyge/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-11-24T02:02:56Z",
    "updated_at": "2021-11-24T02:02:56Z",
    "author_association": "CONTRIBUTOR",
    "body": "It seems like you have asked this question in the forum, and `frangio` has replied you. ",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/977395824/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/977680942",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2985#issuecomment-977680942",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2985",
    "id": 977680942,
    "node_id": "IC_kwDOA9tCBs46Rjou",
    "user": {
      "login": "Amxx",
      "id": 2432299,
      "node_id": "MDQ6VXNlcjI0MzIyOTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2432299?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Amxx",
      "html_url": "https://github.com/Amxx",
      "followers_url": "https://api.github.com/users/Amxx/followers",
      "following_url": "https://api.github.com/users/Amxx/following{/other_user}",
      "gists_url": "https://api.github.com/users/Amxx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Amxx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Amxx/subscriptions",
      "organizations_url": "https://api.github.com/users/Amxx/orgs",
      "repos_url": "https://api.github.com/users/Amxx/repos",
      "events_url": "https://api.github.com/users/Amxx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Amxx/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-11-24T09:13:25Z",
    "updated_at": "2021-11-24T09:13:25Z",
    "author_association": "COLLABORATOR",
    "body": "Hello @JF0001 \r\n\r\n`setApprovalForAll` and `transferFrom` behavior behavior is described in ERC721. We only implement this community recognized standard. This standard works for many people, and I'm pretty sure it can work for you ... but if you have concerns with it, you should voice your concern in a new ERC, or on the EthMagician forum.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/977680942/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/977887346",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2985#issuecomment-977887346",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2985",
    "id": 977887346,
    "node_id": "IC_kwDOA9tCBs46SWBy",
    "user": {
      "login": "JF0001",
      "id": 11094435,
      "node_id": "MDQ6VXNlcjExMDk0NDM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/11094435?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JF0001",
      "html_url": "https://github.com/JF0001",
      "followers_url": "https://api.github.com/users/JF0001/followers",
      "following_url": "https://api.github.com/users/JF0001/following{/other_user}",
      "gists_url": "https://api.github.com/users/JF0001/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JF0001/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JF0001/subscriptions",
      "organizations_url": "https://api.github.com/users/JF0001/orgs",
      "repos_url": "https://api.github.com/users/JF0001/repos",
      "events_url": "https://api.github.com/users/JF0001/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JF0001/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-11-24T13:38:30Z",
    "updated_at": "2021-11-24T13:38:30Z",
    "author_association": "NONE",
    "body": "Thank you @Amxx I can certainly follow your suggestion. Meanwhile, do you agree that the `setApprovalForAll` function does not behave  as one would expect it (in the sense that it shouldn't grant every one the ability to call the `safetransferFrom` function once approved), or am I misunderstanding something? I wouldn't want to waste anyone's time. Thanks again. ",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/977887346/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/977892624",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2985#issuecomment-977892624",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2985",
    "id": 977892624,
    "node_id": "IC_kwDOA9tCBs46SXUQ",
    "user": {
      "login": "Amxx",
      "id": 2432299,
      "node_id": "MDQ6VXNlcjI0MzIyOTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2432299?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Amxx",
      "html_url": "https://github.com/Amxx",
      "followers_url": "https://api.github.com/users/Amxx/followers",
      "following_url": "https://api.github.com/users/Amxx/following{/other_user}",
      "gists_url": "https://api.github.com/users/Amxx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Amxx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Amxx/subscriptions",
      "organizations_url": "https://api.github.com/users/Amxx/orgs",
      "repos_url": "https://api.github.com/users/Amxx/repos",
      "events_url": "https://api.github.com/users/Amxx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Amxx/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-11-24T13:44:48Z",
    "updated_at": "2021-11-24T13:45:14Z",
    "author_association": "COLLABORATOR",
    "body": "IMO, `setApprovalForAll(address operator, bool approved)` **does** behave as one would expect.\r\n\r\n- It **does not** grant everyone the ability to call `safeTransferFrom`\r\n- it **does** grant one particular address (the operator) the ability to call `safeTransferFrom` for **all the tokens** owned by the caller (on this registry).\r\n\r\nFor example, if OpenSea has a smart contracting managing all exchanges in the platform, and that this contract is at address X, then what calling `setApprovalForAll(X, true)` does is giving authorisation for this contract to transfer all my tokens (following the rules implemented in the contract X).",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/977892624/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/977901734",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2985#issuecomment-977901734",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2985",
    "id": 977901734,
    "node_id": "IC_kwDOA9tCBs46SZim",
    "user": {
      "login": "JF0001",
      "id": 11094435,
      "node_id": "MDQ6VXNlcjExMDk0NDM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/11094435?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JF0001",
      "html_url": "https://github.com/JF0001",
      "followers_url": "https://api.github.com/users/JF0001/followers",
      "following_url": "https://api.github.com/users/JF0001/following{/other_user}",
      "gists_url": "https://api.github.com/users/JF0001/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JF0001/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JF0001/subscriptions",
      "organizations_url": "https://api.github.com/users/JF0001/orgs",
      "repos_url": "https://api.github.com/users/JF0001/repos",
      "events_url": "https://api.github.com/users/JF0001/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JF0001/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-11-24T13:56:02Z",
    "updated_at": "2021-11-24T14:17:06Z",
    "author_association": "NONE",
    "body": "Thanks again @Amxx  This is exactly how I would expect it to work. But it actually does grant anyone the ability to call the `safeTransferFrom` function once executed. As explained above, I am able to call it directly in Truffle with the following statement (using the Purchaser account (i.e. accounts[2]) as the from (i.e. _msgSender)). The tokTransfer function is implemented in my smart contract, and basically calls the `safeTransferFrom` function. Thus, I am using accounts[2], which is not authorised (only my smart contract address was), to call the function, and it works! Considering that this could be a major vulnerability for some existing smart contracts, and considering that this flaw is so basic, I thought for a moment that I was not understanding it properly, but you are confirming that I actually do. I would advise you or your team to try it out yourself.\r\n\r\n`instance.tokTransfer(accounts[1], accounts[2], 1001, '2500000000', {from: accounts[2], value: '2500000000'})`\r\n\r\nI just wanted to add that I have used the same account (accounts[2]), which corresponds to the purchaser in the transaction above to make it clear and to emphasise on the vulnerability, but any account could be used for the \"from\" parameter. Also, I am testing this using Ganache, just in case that this issue does not exist on the public Testnets or the Main Blockchain (I haven't tested it on these yet), although I would expect it to behave the same.\r\n\r\nThank you. J\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/977901734/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/978291888",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2985#issuecomment-978291888",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2985",
    "id": 978291888,
    "node_id": "IC_kwDOA9tCBs46T4yw",
    "user": {
      "login": "Amxx",
      "id": 2432299,
      "node_id": "MDQ6VXNlcjI0MzIyOTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2432299?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Amxx",
      "html_url": "https://github.com/Amxx",
      "followers_url": "https://api.github.com/users/Amxx/followers",
      "following_url": "https://api.github.com/users/Amxx/following{/other_user}",
      "gists_url": "https://api.github.com/users/Amxx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Amxx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Amxx/subscriptions",
      "organizations_url": "https://api.github.com/users/Amxx/orgs",
      "repos_url": "https://api.github.com/users/Amxx/repos",
      "events_url": "https://api.github.com/users/Amxx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Amxx/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-11-24T21:52:11Z",
    "updated_at": "2021-11-24T21:52:11Z",
    "author_association": "COLLABORATOR",
    "body": "It is dangerous for a user to give approve to an arbitrary operator. But if\r\n- the operator is a smart contract, \r\n- the contract has strict condition to perform a transferFrom\r\n- the contract is open source & audited\r\nthen a user can safely give it operator right.\r\n\r\n[Here is an example of such a contract](https://github.com/Amxx/Permit/blob/master/contracts/Permit721.sol)\r\n\r\nThis is actually super powerful, and what allows services like OpenSea to operate.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/978291888/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/978352676",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2985#issuecomment-978352676",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2985",
    "id": 978352676,
    "node_id": "IC_kwDOA9tCBs46UHok",
    "user": {
      "login": "JF0001",
      "id": 11094435,
      "node_id": "MDQ6VXNlcjExMDk0NDM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/11094435?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JF0001",
      "html_url": "https://github.com/JF0001",
      "followers_url": "https://api.github.com/users/JF0001/followers",
      "following_url": "https://api.github.com/users/JF0001/following{/other_user}",
      "gists_url": "https://api.github.com/users/JF0001/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JF0001/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JF0001/subscriptions",
      "organizations_url": "https://api.github.com/users/JF0001/orgs",
      "repos_url": "https://api.github.com/users/JF0001/repos",
      "events_url": "https://api.github.com/users/JF0001/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JF0001/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-11-24T22:27:50Z",
    "updated_at": "2021-11-24T22:27:50Z",
    "author_association": "NONE",
    "body": "Thanks again @Amxx  Absolutely, and I was actually trying to imitate the behaviour of OpenSea in my own Marketplace/Smart Contract by giving users the ability to grant the Smart Contract, permission to sell any of their Tokens so that they do not have to pay gas every time that they wished to put an NFT on sale, or change its selling price. But considering that by using the setApprovalForAll function it appears that anyone (I believe that this is not by design) could call the safeTransferFrom function from outside my Web Portal (outside of the Smart Contract's control, and thus could be triggered even for items that users do not actually wish to sell), I will have to either rewrite the function (I was trying to avoid this by using as much code from the OpenZeppelin library as possible), or use another strategy. I was wondering how OpenSea was actually implementing this functionality. From what I have read (I might be mistaking) it appears that they are not using OpenZeppelin but another library called [Wyvern](https://github.com/ProjectWyvern/wyvern-ethereum) in their Smart Contract, which appears to have similar functions as OpenZeppelin.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/978352676/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/978731957",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2985#issuecomment-978731957",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2985",
    "id": 978731957,
    "node_id": "IC_kwDOA9tCBs46VkO1",
    "user": {
      "login": "JF0001",
      "id": 11094435,
      "node_id": "MDQ6VXNlcjExMDk0NDM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/11094435?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JF0001",
      "html_url": "https://github.com/JF0001",
      "followers_url": "https://api.github.com/users/JF0001/followers",
      "following_url": "https://api.github.com/users/JF0001/following{/other_user}",
      "gists_url": "https://api.github.com/users/JF0001/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JF0001/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JF0001/subscriptions",
      "organizations_url": "https://api.github.com/users/JF0001/orgs",
      "repos_url": "https://api.github.com/users/JF0001/repos",
      "events_url": "https://api.github.com/users/JF0001/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JF0001/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-11-25T02:03:20Z",
    "updated_at": "2021-11-25T02:03:20Z",
    "author_association": "NONE",
    "body": "Just for you information @Amxx I am happy to report that the OpenZeppelin library is working as expected (which is reassuring and actually not surprising considering the extensive use of it). As you had suggested, I have reported my problem on the ethereum-magicians.org forum. There is a gentlemen by the name of rmeissner that has noticed that I was using the `this` keyword in my function call `this.safeTransferFrom(from, to, tokenId)`. He has noted that \"when you call a function of a the contract with `this,` it will trigger an internal transaction and therefore msg.sender in the called method will be the contract itself. Therefore it doesn‚Äôt matter what sender actually called your tok method.\" After indeed removing the `this` keyword, only authorised addresses are able to call the safeTransferFrom function, as expected. You can find my post with his answer at the following [link](https://ethereum-magicians.org/t/safetransferfrom-can-be-called-by-anyone-once-setapprovalforall-has-been-granted-on-one-address/7554) for your reference. I would like to thank you for your time and for suggesting me to post my reported problem at the Forum in question. Have a great day!",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/978731957/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/979247972",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2985#issuecomment-979247972",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2985",
    "id": 979247972,
    "node_id": "IC_kwDOA9tCBs46XiNk",
    "user": {
      "login": "Amxx",
      "id": 2432299,
      "node_id": "MDQ6VXNlcjI0MzIyOTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2432299?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Amxx",
      "html_url": "https://github.com/Amxx",
      "followers_url": "https://api.github.com/users/Amxx/followers",
      "following_url": "https://api.github.com/users/Amxx/following{/other_user}",
      "gists_url": "https://api.github.com/users/Amxx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Amxx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Amxx/subscriptions",
      "organizations_url": "https://api.github.com/users/Amxx/orgs",
      "repos_url": "https://api.github.com/users/Amxx/repos",
      "events_url": "https://api.github.com/users/Amxx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Amxx/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-11-25T14:12:56Z",
    "updated_at": "2021-11-25T14:12:56Z",
    "author_association": "COLLABORATOR",
    "body": "Having a new look at your code, the issue really is in how you designed the `tokTransfer` function:\r\n\r\n```\r\nfunction tokTransfer(address payable from, address to, uint256 tokenId, uint256 price) external payable {\r\n   require(msg.value >= price);\r\n   this.safeTransferFrom(from, to, tokenId);\r\n   AddressUpgradeable.sendValue(from, price);\r\n }\r\n```\r\n\r\nIf Alice has a few tokens, and sets approval so that this contract is an operator, then anyone (Bob) can come, call\r\n`tokTransfer(Alice, Bob, tokenID, 0)` and get the token for free. there absolutely no verification whatsoever of anything.\r\n\r\nAlso, if this is a function that is added inside the ERC721 contract, you should be using `_transfer`, not `this.safeTransferFrom` (which is really a recipe for bugs)\r\n\r\nYou could do something like:\r\n```\r\nmapping(address => mapping(uint256 => uint256)) internal price;\r\n\r\nfunction setPrice(uint256 tokenId) external {\r\n    price[msg.sender][tokenId] = price;\r\n}\r\nfunction tokTransfer(uint256 tokenId) external payable {\r\n    address owner = ownerOf(tokenId);\r\n    require(msg.value >= price[owner][tokenId]);\r\n    _transfer(owner, msg.sender, tokenId);\r\n    AddressUpgradeable.sendValue(from, msg.value);\r\n }\r\n ```\r\n \r\n This would be \"safe\"\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/979247972/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/979579168",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2985#issuecomment-979579168",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2985",
    "id": 979579168,
    "node_id": "IC_kwDOA9tCBs46YzEg",
    "user": {
      "login": "JF0001",
      "id": 11094435,
      "node_id": "MDQ6VXNlcjExMDk0NDM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/11094435?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JF0001",
      "html_url": "https://github.com/JF0001",
      "followers_url": "https://api.github.com/users/JF0001/followers",
      "following_url": "https://api.github.com/users/JF0001/following{/other_user}",
      "gists_url": "https://api.github.com/users/JF0001/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JF0001/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JF0001/subscriptions",
      "organizations_url": "https://api.github.com/users/JF0001/orgs",
      "repos_url": "https://api.github.com/users/JF0001/repos",
      "events_url": "https://api.github.com/users/JF0001/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JF0001/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-11-26T01:05:53Z",
    "updated_at": "2021-11-26T01:05:53Z",
    "author_association": "NONE",
    "body": "Thank you again @Amxx for your continued support and for your code. Everything is now working properly and I am relieved that the OpenZeppelin library is working exactly as expected!",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/979579168/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
