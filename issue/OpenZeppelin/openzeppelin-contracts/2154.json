{
  "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2154",
  "repository_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts",
  "labels_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2154/labels{/name}",
  "comments_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2154/comments",
  "events_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2154/events",
  "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2154",
  "id": 589904179,
  "node_id": "MDU6SXNzdWU1ODk5MDQxNzk=",
  "number": 2154,
  "title": "Virtual view functions",
  "user": {
    "login": "Arachnid",
    "id": 17865,
    "node_id": "MDQ6VXNlcjE3ODY1",
    "avatar_url": "https://avatars.githubusercontent.com/u/17865?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/Arachnid",
    "html_url": "https://github.com/Arachnid",
    "followers_url": "https://api.github.com/users/Arachnid/followers",
    "following_url": "https://api.github.com/users/Arachnid/following{/other_user}",
    "gists_url": "https://api.github.com/users/Arachnid/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/Arachnid/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/Arachnid/subscriptions",
    "organizations_url": "https://api.github.com/users/Arachnid/orgs",
    "repos_url": "https://api.github.com/users/Arachnid/repos",
    "events_url": "https://api.github.com/users/Arachnid/events{/privacy}",
    "received_events_url": "https://api.github.com/users/Arachnid/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 503650860,
      "node_id": "MDU6TGFiZWw1MDM2NTA4NjA=",
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/labels/feature",
      "name": "feature",
      "color": "b9db64",
      "default": false,
      "description": "New contracts, functions, or helpers."
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 31,
  "created_at": "2020-03-29T22:49:17Z",
  "updated_at": "2021-02-01T19:28:20Z",
  "closed_at": "2021-01-26T16:23:24Z",
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "Please mark `tokenURI` in ERC721 `virtual`.\r\n\r\nAs it's not `virtual`, it can't be overridden by inheriting contracts. Making this virtual would allow contracts to implement programmatic generation of token URIs without using storage slots unnecessarily.",
  "closed_by": {
    "login": "frangio",
    "id": 481465,
    "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
    "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/frangio",
    "html_url": "https://github.com/frangio",
    "followers_url": "https://api.github.com/users/frangio/followers",
    "following_url": "https://api.github.com/users/frangio/following{/other_user}",
    "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
    "organizations_url": "https://api.github.com/users/frangio/orgs",
    "repos_url": "https://api.github.com/users/frangio/repos",
    "events_url": "https://api.github.com/users/frangio/events{/privacy}",
    "received_events_url": "https://api.github.com/users/frangio/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2154/reactions",
    "total_count": 6,
    "+1": 6,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2154/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/605715709",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2154#issuecomment-605715709",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2154",
    "id": 605715709,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYwNTcxNTcwOQ==",
    "user": {
      "login": "zachwylde00",
      "id": 43480274,
      "node_id": "MDQ6VXNlcjQzNDgwMjc0",
      "avatar_url": "https://avatars.githubusercontent.com/u/43480274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/zachwylde00",
      "html_url": "https://github.com/zachwylde00",
      "followers_url": "https://api.github.com/users/zachwylde00/followers",
      "following_url": "https://api.github.com/users/zachwylde00/following{/other_user}",
      "gists_url": "https://api.github.com/users/zachwylde00/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/zachwylde00/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/zachwylde00/subscriptions",
      "organizations_url": "https://api.github.com/users/zachwylde00/orgs",
      "repos_url": "https://api.github.com/users/zachwylde00/repos",
      "events_url": "https://api.github.com/users/zachwylde00/events{/privacy}",
      "received_events_url": "https://api.github.com/users/zachwylde00/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-03-29T23:02:25Z",
    "updated_at": "2020-03-30T00:58:20Z",
    "author_association": "NONE",
    "body": "which contract are you refering?\r\n my current address is below,  but I have one that does not have a contract address and I do not Know how to generate one, by the way if you know a link for that I would very grateful and forever in your debt! \r\ncontract address:0x8c0edb69ebf038ba0c7a4873e40fc09725064c2e\r\ncoin address:0xdbb112885e1ae9f7a81fbb490f0c6150c1779957\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/605715709/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/605717922",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2154#issuecomment-605717922",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2154",
    "id": 605717922,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYwNTcxNzkyMg==",
    "user": {
      "login": "Arachnid",
      "id": 17865,
      "node_id": "MDQ6VXNlcjE3ODY1",
      "avatar_url": "https://avatars.githubusercontent.com/u/17865?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Arachnid",
      "html_url": "https://github.com/Arachnid",
      "followers_url": "https://api.github.com/users/Arachnid/followers",
      "following_url": "https://api.github.com/users/Arachnid/following{/other_user}",
      "gists_url": "https://api.github.com/users/Arachnid/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Arachnid/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Arachnid/subscriptions",
      "organizations_url": "https://api.github.com/users/Arachnid/orgs",
      "repos_url": "https://api.github.com/users/Arachnid/repos",
      "events_url": "https://api.github.com/users/Arachnid/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Arachnid/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-03-29T23:22:56Z",
    "updated_at": "2020-03-30T00:58:29Z",
    "author_association": "NONE",
    "body": "@zachwylde00 Your enquiry has nothing to do with my feature request; please take it elsewhere.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/605717922/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/605731031",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2154#issuecomment-605731031",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2154",
    "id": 605731031,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYwNTczMTAzMQ==",
    "user": {
      "login": "nventuro",
      "id": 2530770,
      "node_id": "MDQ6VXNlcjI1MzA3NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2530770?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nventuro",
      "html_url": "https://github.com/nventuro",
      "followers_url": "https://api.github.com/users/nventuro/followers",
      "following_url": "https://api.github.com/users/nventuro/following{/other_user}",
      "gists_url": "https://api.github.com/users/nventuro/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nventuro/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nventuro/subscriptions",
      "organizations_url": "https://api.github.com/users/nventuro/orgs",
      "repos_url": "https://api.github.com/users/nventuro/repos",
      "events_url": "https://api.github.com/users/nventuro/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nventuro/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-03-30T00:58:01Z",
    "updated_at": "2020-03-30T00:58:01Z",
    "author_association": "CONTRIBUTOR",
    "body": "Thanks for suggesting this @Arachnid!\r\n\r\nWhen considering  how `virtual` would apply to this library, we came to the conclusion that `view` methods should in general *not* be virtual: because access to the underlying state variables is not allowed (due to them being `private`), most overrides would not make sense in the first place.\r\n\r\nI now think though that it may make sense to have `virtual view` methods, where their override is a function of the base implementation, like the following silly example for ERC20 balances:\r\n\r\n```solidity\r\nfunction balanceOf(address account) public view override returns (uint256) {\r\n   if (account == owner) {\r\n     return UINT256_MAX;\r\n   } else {\r\n     return ERC20.balanceOf();\r\n   }\r\n}\r\n```\r\n\r\nThis would allow you to implement an override for 721's `tokenURI`. However, I'd have to think some more on this.\r\n\r\nMeanwhile, could you share a bit on what you had in mind for programmatic generation of the URI? Is it related to #1745?",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/605731031/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/605745547",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2154#issuecomment-605745547",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2154",
    "id": 605745547,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYwNTc0NTU0Nw==",
    "user": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-03-30T02:13:05Z",
    "updated_at": "2020-03-30T02:14:05Z",
    "author_association": "MEMBER",
    "body": "The original reason why we decided to keep all `view` functions non-virtual was to make it easier for us to ensure derived contracts behave consistently. For example, if a derived contract overrides `allowance(...)`, the implementation of `transferFrom` will not work as expected because it accesses the allowances storage mapping directly, rather than through the `allowance` getter. The general problem would be fixed if only getters accessed storage directly and all other functions used only getters, but then we'd have to pay attention that we're not making this mistake anywhere, so instead we decided to forbid overriding getters.\r\n\r\nI think we can lift this restriction for some getters case-by-case. In the case of `tokenURI` I think it can make sense, but it seems incompatible with having `_setTokenURI`. I'm inclined to think we should integrate #1745 by default in `ERC721`, and allow overriding the `tokenURI` getter.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/605745547/reactions",
      "total_count": 3,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/605766334",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2154#issuecomment-605766334",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2154",
    "id": 605766334,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYwNTc2NjMzNA==",
    "user": {
      "login": "Arachnid",
      "id": 17865,
      "node_id": "MDQ6VXNlcjE3ODY1",
      "avatar_url": "https://avatars.githubusercontent.com/u/17865?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Arachnid",
      "html_url": "https://github.com/Arachnid",
      "followers_url": "https://api.github.com/users/Arachnid/followers",
      "following_url": "https://api.github.com/users/Arachnid/following{/other_user}",
      "gists_url": "https://api.github.com/users/Arachnid/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Arachnid/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Arachnid/subscriptions",
      "organizations_url": "https://api.github.com/users/Arachnid/orgs",
      "repos_url": "https://api.github.com/users/Arachnid/repos",
      "events_url": "https://api.github.com/users/Arachnid/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Arachnid/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-03-30T03:42:56Z",
    "updated_at": "2020-03-30T03:43:03Z",
    "author_association": "NONE",
    "body": "@nventuro Yes, similar to #1745. I want to be able to define a contract similar to this:\r\n```\r\ncontract MyToken is ERC721, Ownable {\r\n    using Strings for uint256;\r\n\r\n    constructor() public ERC721(\"My Token\", \"MYT\") { }\r\n    \r\n    function tokenURI(uint256 tokenId) public override returns(string memory) {\r\n        return string(abi.encodePacked(\"https://example.com/token/\", tokenId.fromUint256(), \".json\"));\r\n    }\r\n}\r\n```\r\n\r\nI'd say that for the vast majority of tokens, all token URIs are procedurally generated, and so using a minimum of two storage slots to store their URI (or at least the suffix) is a huge waste. I'd like to be able to avoid it, at least for my own token.\r\n\r\nDoing this does make `_setTokenURI` a no-op, but I'm happy with that - when I override ERC721 functions, I expect the functionality to change.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/605766334/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/605779524",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2154#issuecomment-605779524",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2154",
    "id": 605779524,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYwNTc3OTUyNA==",
    "user": {
      "login": "Arachnid",
      "id": 17865,
      "node_id": "MDQ6VXNlcjE3ODY1",
      "avatar_url": "https://avatars.githubusercontent.com/u/17865?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Arachnid",
      "html_url": "https://github.com/Arachnid",
      "followers_url": "https://api.github.com/users/Arachnid/followers",
      "following_url": "https://api.github.com/users/Arachnid/following{/other_user}",
      "gists_url": "https://api.github.com/users/Arachnid/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Arachnid/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Arachnid/subscriptions",
      "organizations_url": "https://api.github.com/users/Arachnid/orgs",
      "repos_url": "https://api.github.com/users/Arachnid/repos",
      "events_url": "https://api.github.com/users/Arachnid/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Arachnid/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-03-30T04:45:35Z",
    "updated_at": "2020-03-30T04:45:35Z",
    "author_association": "NONE",
    "body": "Another option here is for people like myself to implement `IERC721Metadata` ourselves - but the latest change, merging all this functionality into the base 721 contract seems to make that impossible.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/605779524/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/606056946",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2154#issuecomment-606056946",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2154",
    "id": 606056946,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYwNjA1Njk0Ng==",
    "user": {
      "login": "nventuro",
      "id": 2530770,
      "node_id": "MDQ6VXNlcjI1MzA3NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2530770?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nventuro",
      "html_url": "https://github.com/nventuro",
      "followers_url": "https://api.github.com/users/nventuro/followers",
      "following_url": "https://api.github.com/users/nventuro/following{/other_user}",
      "gists_url": "https://api.github.com/users/nventuro/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nventuro/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nventuro/subscriptions",
      "organizations_url": "https://api.github.com/users/nventuro/orgs",
      "repos_url": "https://api.github.com/users/nventuro/repos",
      "events_url": "https://api.github.com/users/nventuro/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nventuro/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-03-30T15:07:18Z",
    "updated_at": "2020-03-30T15:07:18Z",
    "author_association": "CONTRIBUTOR",
    "body": ">The original reason why we decided to keep all view functions non-virtual was to make it easier for us to ensure derived contracts behave consistently.\r\n\r\nHeh, this is what I get for replying to these on a Sunday evening. I totally forgout about this, thanks for pointing it out @frangio!\r\n\r\nIndeed, bundling #1745 seems like a good idea.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/606056946/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/606262689",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2154#issuecomment-606262689",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2154",
    "id": 606262689,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYwNjI2MjY4OQ==",
    "user": {
      "login": "Arachnid",
      "id": 17865,
      "node_id": "MDQ6VXNlcjE3ODY1",
      "avatar_url": "https://avatars.githubusercontent.com/u/17865?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Arachnid",
      "html_url": "https://github.com/Arachnid",
      "followers_url": "https://api.github.com/users/Arachnid/followers",
      "following_url": "https://api.github.com/users/Arachnid/following{/other_user}",
      "gists_url": "https://api.github.com/users/Arachnid/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Arachnid/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Arachnid/subscriptions",
      "organizations_url": "https://api.github.com/users/Arachnid/orgs",
      "repos_url": "https://api.github.com/users/Arachnid/repos",
      "events_url": "https://api.github.com/users/Arachnid/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Arachnid/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-03-30T21:31:41Z",
    "updated_at": "2020-03-30T21:31:41Z",
    "author_association": "NONE",
    "body": "This is more a strategy thing than a specific issue, but I'd humbly suggest that allowing implementers to override parts of the behaviour is key to making OZ contracts as useful as possible. Certainly where it's problematic, as in the case you make with allowances, it needs to be documented at a minimum, but my *personal* preference order would be something like:\r\n\r\n 1. Use the public method internally where applicable, so that overrides work intuitively.\r\n 2. Document the caveats of overriding a method, but don't forbid doing so.\r\n 3. Forbid overriding the method.\r\n\r\nThere are bound to be many other use-cases where this is relevant, and by making it forbidden by the compiler, you make OZ useless in those use-cases.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/606262689/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/614750012",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2154#issuecomment-614750012",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2154",
    "id": 614750012,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYxNDc1MDAxMg==",
    "user": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-04-16T16:14:20Z",
    "updated_at": "2020-04-16T16:14:20Z",
    "author_association": "MEMBER",
    "body": "We've decided to review this decision in the next release cycle since it's a backwards compatible change and we want to focus on getting 3.0 released as soon as possible. It's looking likely that we will make view functions virtual in general. Some more discussion [in this forum thread](https://forum.openzeppelin.com/t/how-we-plan-to-adopt-solidity-0-6-virtual-functions/2063).",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/614750012/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/650674572",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2154#issuecomment-650674572",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2154",
    "id": 650674572,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY1MDY3NDU3Mg==",
    "user": {
      "login": "ProGamerCode",
      "id": 11673557,
      "node_id": "MDQ6VXNlcjExNjczNTU3",
      "avatar_url": "https://avatars.githubusercontent.com/u/11673557?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ProGamerCode",
      "html_url": "https://github.com/ProGamerCode",
      "followers_url": "https://api.github.com/users/ProGamerCode/followers",
      "following_url": "https://api.github.com/users/ProGamerCode/following{/other_user}",
      "gists_url": "https://api.github.com/users/ProGamerCode/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ProGamerCode/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ProGamerCode/subscriptions",
      "organizations_url": "https://api.github.com/users/ProGamerCode/orgs",
      "repos_url": "https://api.github.com/users/ProGamerCode/repos",
      "events_url": "https://api.github.com/users/ProGamerCode/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ProGamerCode/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-06-28T02:31:34Z",
    "updated_at": "2020-06-28T02:31:34Z",
    "author_association": "NONE",
    "body": "I care about the extension functionality if its safe.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/650674572/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/654412335",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2154#issuecomment-654412335",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2154",
    "id": 654412335,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY1NDQxMjMzNQ==",
    "user": {
      "login": "nventuro",
      "id": 2530770,
      "node_id": "MDQ6VXNlcjI1MzA3NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2530770?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nventuro",
      "html_url": "https://github.com/nventuro",
      "followers_url": "https://api.github.com/users/nventuro/followers",
      "following_url": "https://api.github.com/users/nventuro/following{/other_user}",
      "gists_url": "https://api.github.com/users/nventuro/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nventuro/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nventuro/subscriptions",
      "organizations_url": "https://api.github.com/users/nventuro/orgs",
      "repos_url": "https://api.github.com/users/nventuro/repos",
      "events_url": "https://api.github.com/users/nventuro/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nventuro/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-07-06T19:03:21Z",
    "updated_at": "2020-07-06T19:03:21Z",
    "author_association": "CONTRIBUTOR",
    "body": ">Use the public method internally where applicable, so that overrides work intuitively.\r\n\r\n@frangio what do you think about this? It would provide maximum flexibility at the cost of (likely) higher gas costs due to poor optimization, but it'd also open the door few a new kind of 'wrong' code. I believe there's enough advanced users that would benefit from this, and we wouldn't need to do much more than add the `virtual` attribute and write some documentation.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/654412335/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/654414744",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2154#issuecomment-654414744",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2154",
    "id": 654414744,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY1NDQxNDc0NA==",
    "user": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-07-06T19:08:59Z",
    "updated_at": "2020-07-06T19:08:59Z",
    "author_association": "MEMBER",
    "body": "Yes I think we have to go ahead with this.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/654414744/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/654444400",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2154#issuecomment-654444400",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2154",
    "id": 654444400,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY1NDQ0NDQwMA==",
    "user": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-07-06T20:17:43Z",
    "updated_at": "2020-07-06T20:17:43Z",
    "author_association": "MEMBER",
    "body": "After offline conversation with @nventuro we think we will only implement this for select variables on a case-by-case basis. Doing this for all `view` functions can cause unforeseen issues and increase gas costs too much.\r\n\r\nIf we allowed overriding of `ERC20.balanceOf`, for example, it would force us to check twice that a transfer would not overflow, as illustrated by the following pseudocode.\r\n\r\n```solidity\r\nfunction _transfer(...) {\r\n    require(balanceOf(account) >= amount);\r\n    balance[account] -= amount; // can overflow if `balanceOf()` returns a larger value than is in storage\r\n}\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/654444400/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/654453038",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2154#issuecomment-654453038",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2154",
    "id": 654453038,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY1NDQ1MzAzOA==",
    "user": {
      "login": "KaiRo-at",
      "id": 824140,
      "node_id": "MDQ6VXNlcjgyNDE0MA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/824140?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/KaiRo-at",
      "html_url": "https://github.com/KaiRo-at",
      "followers_url": "https://api.github.com/users/KaiRo-at/followers",
      "following_url": "https://api.github.com/users/KaiRo-at/following{/other_user}",
      "gists_url": "https://api.github.com/users/KaiRo-at/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/KaiRo-at/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/KaiRo-at/subscriptions",
      "organizations_url": "https://api.github.com/users/KaiRo-at/orgs",
      "repos_url": "https://api.github.com/users/KaiRo-at/repos",
      "events_url": "https://api.github.com/users/KaiRo-at/events{/privacy}",
      "received_events_url": "https://api.github.com/users/KaiRo-at/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-07-06T20:37:41Z",
    "updated_at": "2020-07-06T20:37:41Z",
    "author_association": "CONTRIBUTOR",
    "body": "OK, so I take it that I'll need to continue to do fully copies of OpenZeppelin code at times with just a `virtual` added - as e.g. ERC20 `balanceOf()` is indeed one function we had to override in the past for legit use cases (where we'd also override `_transfer()` BTW to first manifest the continuously virtually-minted balance with an actual `_mint()` and then do the actual transfer, so your pattern there would not break in our case), see the Mobilio token case I mentioned in the forum thread. I guess we are just too clever for plain OpenZeppelin. ;-)",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/654453038/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/654501704",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2154#issuecomment-654501704",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2154",
    "id": 654501704,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY1NDUwMTcwNA==",
    "user": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-07-06T22:47:28Z",
    "updated_at": "2020-07-06T22:47:28Z",
    "author_association": "MEMBER",
    "body": "There may definitely be use cases that are \"too clever\" to implement without copying the code and editing it. Please keep reporting these experiences anyway so we can analyze if there's anything we can do to support those changes natively.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/654501704/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/656422416",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2154#issuecomment-656422416",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2154",
    "id": 656422416,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY1NjQyMjQxNg==",
    "user": {
      "login": "EvilJordan",
      "id": 1364262,
      "node_id": "MDQ6VXNlcjEzNjQyNjI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1364262?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/EvilJordan",
      "html_url": "https://github.com/EvilJordan",
      "followers_url": "https://api.github.com/users/EvilJordan/followers",
      "following_url": "https://api.github.com/users/EvilJordan/following{/other_user}",
      "gists_url": "https://api.github.com/users/EvilJordan/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/EvilJordan/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/EvilJordan/subscriptions",
      "organizations_url": "https://api.github.com/users/EvilJordan/orgs",
      "repos_url": "https://api.github.com/users/EvilJordan/repos",
      "events_url": "https://api.github.com/users/EvilJordan/events{/privacy}",
      "received_events_url": "https://api.github.com/users/EvilJordan/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-07-10T00:55:56Z",
    "updated_at": "2020-07-10T00:55:56Z",
    "author_association": "CONTRIBUTOR",
    "body": "Here's a (maybe stupid) use-case:\r\nI'd like to override both `totalSupply` and `tokenByIndex` to restrict calls to authorized callers only. Combined with a random or pseudo-random, non-incrementing (meaning not using `Counters`) `tokenId`, this would make it leagues harder to programmatically discover every token minted by the contract.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/656422416/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/656429660",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2154#issuecomment-656429660",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2154",
    "id": 656429660,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY1NjQyOTY2MA==",
    "user": {
      "login": "Arachnid",
      "id": 17865,
      "node_id": "MDQ6VXNlcjE3ODY1",
      "avatar_url": "https://avatars.githubusercontent.com/u/17865?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Arachnid",
      "html_url": "https://github.com/Arachnid",
      "followers_url": "https://api.github.com/users/Arachnid/followers",
      "following_url": "https://api.github.com/users/Arachnid/following{/other_user}",
      "gists_url": "https://api.github.com/users/Arachnid/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Arachnid/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Arachnid/subscriptions",
      "organizations_url": "https://api.github.com/users/Arachnid/orgs",
      "repos_url": "https://api.github.com/users/Arachnid/repos",
      "events_url": "https://api.github.com/users/Arachnid/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Arachnid/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-07-10T01:23:41Z",
    "updated_at": "2020-07-10T01:23:41Z",
    "author_association": "NONE",
    "body": "I'm strongly in favor of letting people shoot themselves in the foot here. Put appropriate warnings in documentation, sure, but not making these methods overridable just erects needless barriers for use.\r\n\r\nForcing people to copy the code and modify it will result in out-of-date copies of the code that will not get important bugfixes and security updates, too.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/656429660/reactions",
      "total_count": 4,
      "+1": 4,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/657880427",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2154#issuecomment-657880427",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2154",
    "id": 657880427,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY1Nzg4MDQyNw==",
    "user": {
      "login": "abcoathup",
      "id": 28278242,
      "node_id": "MDQ6VXNlcjI4Mjc4MjQy",
      "avatar_url": "https://avatars.githubusercontent.com/u/28278242?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/abcoathup",
      "html_url": "https://github.com/abcoathup",
      "followers_url": "https://api.github.com/users/abcoathup/followers",
      "following_url": "https://api.github.com/users/abcoathup/following{/other_user}",
      "gists_url": "https://api.github.com/users/abcoathup/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/abcoathup/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/abcoathup/subscriptions",
      "organizations_url": "https://api.github.com/users/abcoathup/orgs",
      "repos_url": "https://api.github.com/users/abcoathup/repos",
      "events_url": "https://api.github.com/users/abcoathup/events{/privacy}",
      "received_events_url": "https://api.github.com/users/abcoathup/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-07-13T23:44:49Z",
    "updated_at": "2020-07-13T23:44:49Z",
    "author_association": "CONTRIBUTOR",
    "body": "`uri` in ERC1155 is another case that could benefit from being made `virtual`\r\nhttps://github.com/OpenZeppelin/openzeppelin-contracts/blob/v3.1.0/contracts/token/ERC1155/ERC1155.sol#L75\r\n\r\nThis would allow developers to implement a decentralized URI scheme using content addressing such as IPFS with a unique token URI per token ID.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/657880427/reactions",
      "total_count": 7,
      "+1": 7,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/662586721",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2154#issuecomment-662586721",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2154",
    "id": 662586721,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2MjU4NjcyMQ==",
    "user": {
      "login": "k06a",
      "id": 702124,
      "node_id": "MDQ6VXNlcjcwMjEyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/702124?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/k06a",
      "html_url": "https://github.com/k06a",
      "followers_url": "https://api.github.com/users/k06a/followers",
      "following_url": "https://api.github.com/users/k06a/following{/other_user}",
      "gists_url": "https://api.github.com/users/k06a/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/k06a/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/k06a/subscriptions",
      "organizations_url": "https://api.github.com/users/k06a/orgs",
      "repos_url": "https://api.github.com/users/k06a/repos",
      "events_url": "https://api.github.com/users/k06a/events{/privacy}",
      "received_events_url": "https://api.github.com/users/k06a/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-07-22T17:32:45Z",
    "updated_at": "2020-07-22T17:32:45Z",
    "author_association": "CONTRIBUTOR",
    "body": "I see the ability to make `decimals()`/`name()`/`symbol()` of ERC20 virtual, this would make these methods cheaper for on-chain calls since it would not involve SLOAD at all.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/662586721/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/708025390",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2154#issuecomment-708025390",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2154",
    "id": 708025390,
    "node_id": "MDEyOklzc3VlQ29tbWVudDcwODAyNTM5MA==",
    "user": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-10-13T21:42:21Z",
    "updated_at": "2020-11-18T21:22:48Z",
    "author_association": "MEMBER",
    "body": "I will use this issue to collect all functions people have requested be made virtual. We want to get around to this soon.\r\n\r\n- ERC721.tokenURI (this issue)\r\n- ERC721.ownerOf (https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2373)\r\n- ERC721._isApprovedOrOwner (https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2232)\r\n- ERC721.isApprovedForAll (https://github.com/OpenZeppelin/openzeppelin-contracts/pull/2080#issuecomment-679244600)\r\n- ERC20.balanceOf (https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2400)",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/708025390/reactions",
      "total_count": 3,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/708140464",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2154#issuecomment-708140464",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2154",
    "id": 708140464,
    "node_id": "MDEyOklzc3VlQ29tbWVudDcwODE0MDQ2NA==",
    "user": {
      "login": "abcoathup",
      "id": 28278242,
      "node_id": "MDQ6VXNlcjI4Mjc4MjQy",
      "avatar_url": "https://avatars.githubusercontent.com/u/28278242?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/abcoathup",
      "html_url": "https://github.com/abcoathup",
      "followers_url": "https://api.github.com/users/abcoathup/followers",
      "following_url": "https://api.github.com/users/abcoathup/following{/other_user}",
      "gists_url": "https://api.github.com/users/abcoathup/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/abcoathup/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/abcoathup/subscriptions",
      "organizations_url": "https://api.github.com/users/abcoathup/orgs",
      "repos_url": "https://api.github.com/users/abcoathup/repos",
      "events_url": "https://api.github.com/users/abcoathup/events{/privacy}",
      "received_events_url": "https://api.github.com/users/abcoathup/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-10-14T03:55:59Z",
    "updated_at": "2020-10-14T03:55:59Z",
    "author_association": "CONTRIBUTOR",
    "body": "* ERC1155.uri https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2003#issuecomment-669617785\r\n* ERC1155.isApprovedForAll https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2003#issuecomment-669617785\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/708140464/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/728958047",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2154#issuecomment-728958047",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2154",
    "id": 728958047,
    "node_id": "MDEyOklzc3VlQ29tbWVudDcyODk1ODA0Nw==",
    "user": {
      "login": "dievardump",
      "id": 1753113,
      "node_id": "MDQ6VXNlcjE3NTMxMTM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1753113?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dievardump",
      "html_url": "https://github.com/dievardump",
      "followers_url": "https://api.github.com/users/dievardump/followers",
      "following_url": "https://api.github.com/users/dievardump/following{/other_user}",
      "gists_url": "https://api.github.com/users/dievardump/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dievardump/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dievardump/subscriptions",
      "organizations_url": "https://api.github.com/users/dievardump/orgs",
      "repos_url": "https://api.github.com/users/dievardump/repos",
      "events_url": "https://api.github.com/users/dievardump/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dievardump/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-11-17T14:18:38Z",
    "updated_at": "2020-11-17T14:19:54Z",
    "author_association": "NONE",
    "body": "Hi there.\r\n\r\nI wanted to second the \"making virtual\" of `ERC1155.uri` and also `ERC721.tokenURI` (to be honest, any that could have a usecase where developers need a specific behavior in their contract).\r\n\r\nAdding my real world usecase if it helps to understand why this is needed: \r\nI am creating a platform allowing users to create NFTs; can be ERC721 or ERC1155.\r\nThose NFTs can be created by different users.\r\n\r\nI do not host the NFT's JSON, they are uploaded on IPFS by the users, so I am not able to have a \"one uri that covers all NFTS by replacing with {id}\". \r\nEspecially since this make it too centralized as I would need to host the JSON files up to date, and if my platform was any day shat down, this would make NFTs not usable anymore.\r\n\r\nSo I have in my contract a `mapping (tokenId => string) private tokenURIs;` and I wish to use `uri(uint256)` to get the right uri for the current requested id.\r\n\r\nRight now I can't just extend OZ contract because `uri(uint256)` is not virtual. This is the only function that I need to modify, and this is overkill to be forced to copy the contract locally. Adding virtual would still be compliant with the standard and I hope to see it coming soon.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/728958047/reactions",
      "total_count": 7,
      "+1": 7,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/729440206",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2154#issuecomment-729440206",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2154",
    "id": 729440206,
    "node_id": "MDEyOklzc3VlQ29tbWVudDcyOTQ0MDIwNg==",
    "user": {
      "login": "sapph1re",
      "id": 5317413,
      "node_id": "MDQ6VXNlcjUzMTc0MTM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5317413?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sapph1re",
      "html_url": "https://github.com/sapph1re",
      "followers_url": "https://api.github.com/users/sapph1re/followers",
      "following_url": "https://api.github.com/users/sapph1re/following{/other_user}",
      "gists_url": "https://api.github.com/users/sapph1re/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sapph1re/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sapph1re/subscriptions",
      "organizations_url": "https://api.github.com/users/sapph1re/orgs",
      "repos_url": "https://api.github.com/users/sapph1re/repos",
      "events_url": "https://api.github.com/users/sapph1re/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sapph1re/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-11-18T05:34:59Z",
    "updated_at": "2020-11-18T05:34:59Z",
    "author_association": "NONE",
    "body": "I would love to see `name()` and `symbol()` virtual to enable overriding them. In my case, my client's desire is to have name changeable for a potential rebranding, and even though already discussed with the client that it might be not good to change name, it's still a desired feature.\r\n\r\nSo for now I had to clone OpenZeppelin's contracts to implement this. I believe it's better to leave it up to developers to decide whether they really want to override certain parts of the code, rather than completely restrict it.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/729440206/reactions",
      "total_count": 6,
      "+1": 6,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/729962763",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2154#issuecomment-729962763",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2154",
    "id": 729962763,
    "node_id": "MDEyOklzc3VlQ29tbWVudDcyOTk2Mjc2Mw==",
    "user": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-11-18T21:21:35Z",
    "updated_at": "2020-11-18T21:21:35Z",
    "author_association": "MEMBER",
    "body": "Thank you all for the feedback. We're going to work on this feature for the next release.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/729962763/reactions",
      "total_count": 3,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/735337714",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2154#issuecomment-735337714",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2154",
    "id": 735337714,
    "node_id": "MDEyOklzc3VlQ29tbWVudDczNTMzNzcxNA==",
    "user": {
      "login": "Skyge",
      "id": 27282380,
      "node_id": "MDQ6VXNlcjI3MjgyMzgw",
      "avatar_url": "https://avatars.githubusercontent.com/u/27282380?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Skyge",
      "html_url": "https://github.com/Skyge",
      "followers_url": "https://api.github.com/users/Skyge/followers",
      "following_url": "https://api.github.com/users/Skyge/following{/other_user}",
      "gists_url": "https://api.github.com/users/Skyge/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Skyge/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Skyge/subscriptions",
      "organizations_url": "https://api.github.com/users/Skyge/orgs",
      "repos_url": "https://api.github.com/users/Skyge/repos",
      "events_url": "https://api.github.com/users/Skyge/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Skyge/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-11-29T03:28:08Z",
    "updated_at": "2020-11-29T03:28:08Z",
    "author_association": "CONTRIBUTOR",
    "body": "I want to add `virtual` for `balance` and `totalSupply` to override them, cause I meet a case, need a deflationary ERC20 token, so the balance of the user depends on `underlying amount` and `factor`, that is:\r\n```\r\nbalanceOf(account) = balance * factor\r\n```\r\nso does the `totalSupply`",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/735337714/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/746950339",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2154#issuecomment-746950339",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2154",
    "id": 746950339,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc0Njk1MDMzOQ==",
    "user": {
      "login": "sylar217",
      "id": 5566353,
      "node_id": "MDQ6VXNlcjU1NjYzNTM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5566353?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sylar217",
      "html_url": "https://github.com/sylar217",
      "followers_url": "https://api.github.com/users/sylar217/followers",
      "following_url": "https://api.github.com/users/sylar217/following{/other_user}",
      "gists_url": "https://api.github.com/users/sylar217/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sylar217/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sylar217/subscriptions",
      "organizations_url": "https://api.github.com/users/sylar217/orgs",
      "repos_url": "https://api.github.com/users/sylar217/repos",
      "events_url": "https://api.github.com/users/sylar217/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sylar217/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-12-16T20:19:16Z",
    "updated_at": "2020-12-16T20:19:16Z",
    "author_association": "NONE",
    "body": "> Thank you all for the feedback. We're going to work on this feature for the next release.\r\n\r\n@frangio is there a plan to make the `uri()` virtual in near term for ERC1155. If the release is nearby then I can probably wait, otherwise would figure out a workaround.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/746950339/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/748353937",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2154#issuecomment-748353937",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2154",
    "id": 748353937,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc0ODM1MzkzNw==",
    "user": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-12-18T22:40:44Z",
    "updated_at": "2020-12-18T22:40:44Z",
    "author_association": "MEMBER",
    "body": "@sylar217 We plan to release virtual view functions during January.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/748353937/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/758135176",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2154#issuecomment-758135176",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2154",
    "id": 758135176,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc1ODEzNTE3Ng==",
    "user": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-01-11T18:22:09Z",
    "updated_at": "2021-01-11T18:22:09Z",
    "author_association": "MEMBER",
    "body": "We're actively working on this issue. Our current plan is to make view functions virtual, except when that causes consistency issues with the rest of the contract that are not trivial to fix. The typical explample is: if `ERC20.balanceOf` is virtual, does `ERC20.transfer` use the potentially overriden function to check that there is enough balance, or does it use its balances mapping directly? For these cases we will evaluate them one by one and depending on user requests and gas cost implications may make some of them virtual.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/758135176/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/767781070",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2154#issuecomment-767781070",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2154",
    "id": 767781070,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc2Nzc4MTA3MA==",
    "user": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-01-26T19:40:14Z",
    "updated_at": "2021-01-26T19:40:14Z",
    "author_association": "MEMBER",
    "body": "Virtual view functions will be available in the next release. The release candidate is already available for testing on npm at `@openzeppelin/contracts@next`.\r\n\r\nNote that in many cases overriding a function will not imply that other functions in the contract will automatically adapt to the overridden definitions. For example, overriding `ERC20.balanceOf` does not guarantee that that balance is available for transferring. However, it will generaly be possible to obtain the desired behavior by overriding other functions in the contract, in this case `ERC20._transfer`. Understand that this limitation was necessary to keep the contracts simple and consistent, but it means that the responsibility to ensure correctness when functions are overriden will be on the users and not on the OpenZeppelin maintainers. People who wish to override should consult the source code to fully understand the impact it will have, and should consider whether they need to override additional functions to achieve the desired behavior. As always, feel free to ask for help in the [OpenZeppelin Forum](https://forum.openzeppelin.com/) and we'll be happy to help.",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/767781070/reactions",
      "total_count": 11,
      "+1": 5,
      "-1": 0,
      "laugh": 0,
      "hooray": 3,
      "confused": 0,
      "heart": 0,
      "rocket": 3,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/771070812",
    "html_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2154#issuecomment-771070812",
    "issue_url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/2154",
    "id": 771070812,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc3MTA3MDgxMg==",
    "user": {
      "login": "santisiri",
      "id": 2153166,
      "node_id": "MDQ6VXNlcjIxNTMxNjY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2153166?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/santisiri",
      "html_url": "https://github.com/santisiri",
      "followers_url": "https://api.github.com/users/santisiri/followers",
      "following_url": "https://api.github.com/users/santisiri/following{/other_user}",
      "gists_url": "https://api.github.com/users/santisiri/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/santisiri/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/santisiri/subscriptions",
      "organizations_url": "https://api.github.com/users/santisiri/orgs",
      "repos_url": "https://api.github.com/users/santisiri/repos",
      "events_url": "https://api.github.com/users/santisiri/events{/privacy}",
      "received_events_url": "https://api.github.com/users/santisiri/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-02-01T18:40:57Z",
    "updated_at": "2021-02-01T18:40:57Z",
    "author_association": "NONE",
    "body": "Might be useful to include this observation you make @frangio on the comments in the contracts. Will these upgrades be available also on the upgradeable contracts? (Might just clone them for the time being)",
    "reactions": {
      "url": "https://api.github.com/repos/OpenZeppelin/openzeppelin-contracts/issues/comments/771070812/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
