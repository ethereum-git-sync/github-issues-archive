{
  "url": "https://api.github.com/repos/NethermindEth/nethermind/issues/6236",
  "repository_url": "https://api.github.com/repos/NethermindEth/nethermind",
  "labels_url": "https://api.github.com/repos/NethermindEth/nethermind/issues/6236/labels{/name}",
  "comments_url": "https://api.github.com/repos/NethermindEth/nethermind/issues/6236/comments",
  "events_url": "https://api.github.com/repos/NethermindEth/nethermind/issues/6236/events",
  "html_url": "https://github.com/NethermindEth/nethermind/issues/6236",
  "id": 1970193906,
  "node_id": "I_kwDOBggaLc51bsXy",
  "number": 6236,
  "title": "Expose command(s) to execute blocktests and statetests on a per-test fixture basis",
  "user": {
    "login": "danceratopz",
    "id": 91727015,
    "node_id": "U_kgDOBXekpw",
    "avatar_url": "https://avatars.githubusercontent.com/u/91727015?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/danceratopz",
    "html_url": "https://github.com/danceratopz",
    "followers_url": "https://api.github.com/users/danceratopz/followers",
    "following_url": "https://api.github.com/users/danceratopz/following{/other_user}",
    "gists_url": "https://api.github.com/users/danceratopz/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/danceratopz/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/danceratopz/subscriptions",
    "organizations_url": "https://api.github.com/users/danceratopz/orgs",
    "repos_url": "https://api.github.com/users/danceratopz/repos",
    "events_url": "https://api.github.com/users/danceratopz/events{/privacy}",
    "received_events_url": "https://api.github.com/users/danceratopz/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "open",
  "locked": false,
  "assignee": {
    "login": "smartprogrammer93",
    "id": 33181301,
    "node_id": "MDQ6VXNlcjMzMTgxMzAx",
    "avatar_url": "https://avatars.githubusercontent.com/u/33181301?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/smartprogrammer93",
    "html_url": "https://github.com/smartprogrammer93",
    "followers_url": "https://api.github.com/users/smartprogrammer93/followers",
    "following_url": "https://api.github.com/users/smartprogrammer93/following{/other_user}",
    "gists_url": "https://api.github.com/users/smartprogrammer93/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/smartprogrammer93/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/smartprogrammer93/subscriptions",
    "organizations_url": "https://api.github.com/users/smartprogrammer93/orgs",
    "repos_url": "https://api.github.com/users/smartprogrammer93/repos",
    "events_url": "https://api.github.com/users/smartprogrammer93/events{/privacy}",
    "received_events_url": "https://api.github.com/users/smartprogrammer93/received_events",
    "type": "User",
    "site_admin": false
  },
  "assignees": [
    {
      "login": "smartprogrammer93",
      "id": 33181301,
      "node_id": "MDQ6VXNlcjMzMTgxMzAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/33181301?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/smartprogrammer93",
      "html_url": "https://github.com/smartprogrammer93",
      "followers_url": "https://api.github.com/users/smartprogrammer93/followers",
      "following_url": "https://api.github.com/users/smartprogrammer93/following{/other_user}",
      "gists_url": "https://api.github.com/users/smartprogrammer93/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/smartprogrammer93/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/smartprogrammer93/subscriptions",
      "organizations_url": "https://api.github.com/users/smartprogrammer93/orgs",
      "repos_url": "https://api.github.com/users/smartprogrammer93/repos",
      "events_url": "https://api.github.com/users/smartprogrammer93/events{/privacy}",
      "received_events_url": "https://api.github.com/users/smartprogrammer93/received_events",
      "type": "User",
      "site_admin": false
    }
  ],
  "milestone": null,
  "comments": 0,
  "created_at": "2023-10-31T10:59:38Z",
  "updated_at": "2023-10-31T17:48:01Z",
  "closed_at": null,
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "**Is your feature request related to a problem? Please describe.**\r\nI'm currently working on a generic test runner for test fixture consumers within [ethereum/execution-spec-tests](https://github.com/ethereum/execution-spec-tests) which would help the Testing Team and potentially client teams to execute  test fixtures against client fixture consumers (it's still WIP: https://github.com/ethereum/execution-spec-tests/pull/339).\r\n\r\n**Describe the solution you'd like**\r\n#6185 introduces a command to execute JSON test fixtures from a URL and filter by the JSON filename:\r\n```console\r\ndotnet test --filter \"FullyQualifiedName=Ethereum.Blockchain.Pyspec.Test.ManualTests.Test\" --environment TEST_URL_AND_PATH=\"https://github.com/ethereum/execution-spec-tests/releases/download/v1.0.6/fixtures_develop.tar.gz||fixtures/istanbul\"\r\n```\r\nIn order to add per-fixture execution to this generic test runner, it would be helpful if this command could be extended to allow regex filtering of test fixtures within a single JSON file by name. \r\n\r\nBackground: Test fixtures JSON files generally contain multiple fixtures which each represent a single test case. Each fixture consist JSON key, value pairs, where the key is the test name and the value is the test data (more on the Blockchain Test format [here](https://ethereum-tests.readthedocs.io/en/latest/test_filler/blockchain_filler.html#test-structure)).\r\n\r\nAdditionally, as this test runner can be pointed to any test fixtures, an analogous command for [State Transition Tests](https://ethereum-tests.readthedocs.io/en/latest/state-transition-ref.html) would also be helpful, but could be added at a later stage.\r\n \r\n\r\n**Describe alternatives you've considered**\r\nIf the effort is too high to add this command, the alternative is don't add it? :smiling_face_with_tear: \r\n\r\n**Additional context**\r\nAFAIK, there is no equivalent command in other client tooling. There is an open PR (https://github.com/ethereum/go-ethereum/pull/28421) to add an analogous command to geth:\r\n```\r\n$  go run ./cmd/evm blocktest --run 100-fork=Cancun-empty_memory-length=0-src=0-dest=0 ./tests/spec-tests/fixtures/cancun/eip5656_mcopy/mcopy/mcopy_on_empty_memory.json\r\n```\r\n\r\n",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/NethermindEth/nethermind/issues/6236/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/NethermindEth/nethermind/issues/6236/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[

]
