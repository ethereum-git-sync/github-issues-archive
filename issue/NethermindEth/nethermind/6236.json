{
  "url": "https://api.github.com/repos/NethermindEth/nethermind/issues/6236",
  "repository_url": "https://api.github.com/repos/NethermindEth/nethermind",
  "labels_url": "https://api.github.com/repos/NethermindEth/nethermind/issues/6236/labels{/name}",
  "comments_url": "https://api.github.com/repos/NethermindEth/nethermind/issues/6236/comments",
  "events_url": "https://api.github.com/repos/NethermindEth/nethermind/issues/6236/events",
  "html_url": "https://github.com/NethermindEth/nethermind/issues/6236",
  "id": 1970193906,
  "node_id": "I_kwDOBggaLc51bsXy",
  "number": 6236,
  "title": "Expose command(s) to execute blocktests and statetests on a per-test fixture basis",
  "user": {
    "login": "danceratopz",
    "id": 91727015,
    "node_id": "U_kgDOBXekpw",
    "avatar_url": "https://avatars.githubusercontent.com/u/91727015?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/danceratopz",
    "html_url": "https://github.com/danceratopz",
    "followers_url": "https://api.github.com/users/danceratopz/followers",
    "following_url": "https://api.github.com/users/danceratopz/following{/other_user}",
    "gists_url": "https://api.github.com/users/danceratopz/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/danceratopz/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/danceratopz/subscriptions",
    "organizations_url": "https://api.github.com/users/danceratopz/orgs",
    "repos_url": "https://api.github.com/users/danceratopz/repos",
    "events_url": "https://api.github.com/users/danceratopz/events{/privacy}",
    "received_events_url": "https://api.github.com/users/danceratopz/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "open",
  "locked": false,
  "assignee": {
    "login": "smartprogrammer93",
    "id": 33181301,
    "node_id": "MDQ6VXNlcjMzMTgxMzAx",
    "avatar_url": "https://avatars.githubusercontent.com/u/33181301?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/smartprogrammer93",
    "html_url": "https://github.com/smartprogrammer93",
    "followers_url": "https://api.github.com/users/smartprogrammer93/followers",
    "following_url": "https://api.github.com/users/smartprogrammer93/following{/other_user}",
    "gists_url": "https://api.github.com/users/smartprogrammer93/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/smartprogrammer93/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/smartprogrammer93/subscriptions",
    "organizations_url": "https://api.github.com/users/smartprogrammer93/orgs",
    "repos_url": "https://api.github.com/users/smartprogrammer93/repos",
    "events_url": "https://api.github.com/users/smartprogrammer93/events{/privacy}",
    "received_events_url": "https://api.github.com/users/smartprogrammer93/received_events",
    "type": "User",
    "site_admin": false
  },
  "assignees": [
    {
      "login": "smartprogrammer93",
      "id": 33181301,
      "node_id": "MDQ6VXNlcjMzMTgxMzAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/33181301?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/smartprogrammer93",
      "html_url": "https://github.com/smartprogrammer93",
      "followers_url": "https://api.github.com/users/smartprogrammer93/followers",
      "following_url": "https://api.github.com/users/smartprogrammer93/following{/other_user}",
      "gists_url": "https://api.github.com/users/smartprogrammer93/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/smartprogrammer93/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/smartprogrammer93/subscriptions",
      "organizations_url": "https://api.github.com/users/smartprogrammer93/orgs",
      "repos_url": "https://api.github.com/users/smartprogrammer93/repos",
      "events_url": "https://api.github.com/users/smartprogrammer93/events{/privacy}",
      "received_events_url": "https://api.github.com/users/smartprogrammer93/received_events",
      "type": "User",
      "site_admin": false
    }
  ],
  "milestone": null,
  "comments": 7,
  "created_at": "2023-10-31T10:59:38Z",
  "updated_at": "2023-11-03T14:03:45Z",
  "closed_at": null,
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "**Is your feature request related to a problem? Please describe.**\r\nI'm currently working on a generic test runner for test fixture consumers within [ethereum/execution-spec-tests](https://github.com/ethereum/execution-spec-tests) which would help the Testing Team and potentially client teams to execute  test fixtures against client fixture consumers (it's still WIP: https://github.com/ethereum/execution-spec-tests/pull/339).\r\n\r\n**Describe the solution you'd like**\r\n#6185 introduces a command to execute JSON test fixtures from a URL and filter by the JSON filename:\r\n```console\r\ndotnet test --filter \"FullyQualifiedName=Ethereum.Blockchain.Pyspec.Test.ManualTests.Test\" --environment TEST_URL_AND_PATH=\"https://github.com/ethereum/execution-spec-tests/releases/download/v1.0.6/fixtures_develop.tar.gz||fixtures/istanbul\"\r\n```\r\nIn order to add per-fixture execution to this generic test runner, it would be helpful if this command could be extended to allow regex filtering of test fixtures within a single JSON file by name. \r\n\r\nBackground: Test fixtures JSON files generally contain multiple fixtures which each represent a single test case. Each fixture consist JSON key, value pairs, where the key is the test name and the value is the test data (more on the Blockchain Test format [here](https://ethereum-tests.readthedocs.io/en/latest/test_filler/blockchain_filler.html#test-structure)).\r\n\r\nAdditionally, as this test runner can be pointed to any test fixtures, an analogous command for [State Transition Tests](https://ethereum-tests.readthedocs.io/en/latest/state-transition-ref.html) would also be helpful, but could be added at a later stage.\r\n \r\n\r\n**Describe alternatives you've considered**\r\nIf the effort is too high to add this command, the alternative is don't add it? :smiling_face_with_tear: \r\n\r\n**Additional context**\r\nAFAIK, there is no equivalent command in other client tooling. There is an open PR (https://github.com/ethereum/go-ethereum/pull/28421) to add an analogous command to geth:\r\n```\r\n$  go run ./cmd/evm blocktest --run 100-fork=Cancun-empty_memory-length=0-src=0-dest=0 ./tests/spec-tests/fixtures/cancun/eip5656_mcopy/mcopy/mcopy_on_empty_memory.json\r\n```\r\n\r\n",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/NethermindEth/nethermind/issues/6236/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/NethermindEth/nethermind/issues/6236/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/NethermindEth/nethermind/issues/comments/1790484178",
    "html_url": "https://github.com/NethermindEth/nethermind/issues/6236#issuecomment-1790484178",
    "issue_url": "https://api.github.com/repos/NethermindEth/nethermind/issues/6236",
    "id": 1790484178,
    "node_id": "IC_kwDOBggaLc5quJ7S",
    "user": {
      "login": "danceratopz",
      "id": 91727015,
      "node_id": "U_kgDOBXekpw",
      "avatar_url": "https://avatars.githubusercontent.com/u/91727015?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/danceratopz",
      "html_url": "https://github.com/danceratopz",
      "followers_url": "https://api.github.com/users/danceratopz/followers",
      "following_url": "https://api.github.com/users/danceratopz/following{/other_user}",
      "gists_url": "https://api.github.com/users/danceratopz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/danceratopz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/danceratopz/subscriptions",
      "organizations_url": "https://api.github.com/users/danceratopz/orgs",
      "repos_url": "https://api.github.com/users/danceratopz/repos",
      "events_url": "https://api.github.com/users/danceratopz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/danceratopz/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-11-02T10:41:27Z",
    "updated_at": "2023-11-02T10:49:26Z",
    "author_association": "NONE",
    "body": "I just realized that `TEST_URL_AND_PATH` didn't make it into #6185 (as used in the command above).\r\n\r\nThis does run wonderfully on the latest execution-spec-tests release, however:\r\n```console\r\ndotnet test src/Nethermind/Ethereum.Blockchain.Pyspec.Test/\r\n```\r\n\r\nI do wonder if the startup time (even with `--no-restore --no-build` on subsequent runs) might be prohibitive to execute all test fixtures individually using an external runner. Perhaps worth discussing first. To mitigate it, we could consider running per JSON fixture file, instead of per fixture.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/NethermindEth/nethermind/issues/comments/1790484178/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/NethermindEth/nethermind/issues/comments/1790590556",
    "html_url": "https://github.com/NethermindEth/nethermind/issues/6236#issuecomment-1790590556",
    "issue_url": "https://api.github.com/repos/NethermindEth/nethermind/issues/6236",
    "id": 1790590556,
    "node_id": "IC_kwDOBggaLc5quj5c",
    "user": {
      "login": "LukaszRozmej",
      "id": 12445221,
      "node_id": "MDQ6VXNlcjEyNDQ1MjIx",
      "avatar_url": "https://avatars.githubusercontent.com/u/12445221?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/LukaszRozmej",
      "html_url": "https://github.com/LukaszRozmej",
      "followers_url": "https://api.github.com/users/LukaszRozmej/followers",
      "following_url": "https://api.github.com/users/LukaszRozmej/following{/other_user}",
      "gists_url": "https://api.github.com/users/LukaszRozmej/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/LukaszRozmej/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/LukaszRozmej/subscriptions",
      "organizations_url": "https://api.github.com/users/LukaszRozmej/orgs",
      "repos_url": "https://api.github.com/users/LukaszRozmej/repos",
      "events_url": "https://api.github.com/users/LukaszRozmej/events{/privacy}",
      "received_events_url": "https://api.github.com/users/LukaszRozmej/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-11-02T11:53:50Z",
    "updated_at": "2023-11-02T11:53:50Z",
    "author_association": "MEMBER",
    "body": "> I just realized that `TEST_URL_AND_PATH` didn't make it into #6185 (as used in the command above).\r\n> \r\n> This does run wonderfully on the latest execution-spec-tests release, however:\r\n> \r\n> ```\r\n> dotnet test src/Nethermind/Ethereum.Blockchain.Pyspec.Test/\r\n> ```\r\n> \r\n> I do wonder if the startup time (even with `--no-restore --no-build` on subsequent runs) might be prohibitive to execute all test fixtures individually using an external runner. Perhaps worth discussing first. To mitigate it, we could consider running per JSON fixture file, instead of per fixture.\r\n\r\nYou could filter it: https://learn.microsoft.com/en-us/dotnet/core/testing/selective-unit-tests?pivots=mstest\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/NethermindEth/nethermind/issues/comments/1790590556/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/NethermindEth/nethermind/issues/comments/1792091528",
    "html_url": "https://github.com/NethermindEth/nethermind/issues/6236#issuecomment-1792091528",
    "issue_url": "https://api.github.com/repos/NethermindEth/nethermind/issues/6236",
    "id": 1792091528,
    "node_id": "IC_kwDOBggaLc5q0SWI",
    "user": {
      "login": "danceratopz",
      "id": 91727015,
      "node_id": "U_kgDOBXekpw",
      "avatar_url": "https://avatars.githubusercontent.com/u/91727015?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/danceratopz",
      "html_url": "https://github.com/danceratopz",
      "followers_url": "https://api.github.com/users/danceratopz/followers",
      "following_url": "https://api.github.com/users/danceratopz/following{/other_user}",
      "gists_url": "https://api.github.com/users/danceratopz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/danceratopz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/danceratopz/subscriptions",
      "organizations_url": "https://api.github.com/users/danceratopz/orgs",
      "repos_url": "https://api.github.com/users/danceratopz/repos",
      "events_url": "https://api.github.com/users/danceratopz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/danceratopz/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-11-03T09:12:16Z",
    "updated_at": "2023-11-03T09:12:16Z",
    "author_association": "NONE",
    "body": "> You could filter it: https://learn.microsoft.com/en-us/dotnet/core/testing/selective-unit-tests?pivots=mstest\r\n\r\nThanks! Filtering by fixture name works nicely. Btw, we'll soon change the fixture names to the exact ID as generated when filling the fixtures, so that the test's intent is better expressed.\r\n\r\nIf the effort is not too high on your side, it would still be helpful if there was a way of configuring a generic blockchain (and state test) consumer to consume test fixtures from a local directory. Perhaps this already exists and I missed it?\r\n\r\nPlease note, this is no longer specific to execution-spec-tests; it could also be used with ethereum/tests as both use the same json test fixture format for blockchain tests (execution-spec-tests doesn't support state tests yet).",
    "reactions": {
      "url": "https://api.github.com/repos/NethermindEth/nethermind/issues/comments/1792091528/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/NethermindEth/nethermind/issues/comments/1792159046",
    "html_url": "https://github.com/NethermindEth/nethermind/issues/6236#issuecomment-1792159046",
    "issue_url": "https://api.github.com/repos/NethermindEth/nethermind/issues/6236",
    "id": 1792159046,
    "node_id": "IC_kwDOBggaLc5q0i1G",
    "user": {
      "login": "smartprogrammer93",
      "id": 33181301,
      "node_id": "MDQ6VXNlcjMzMTgxMzAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/33181301?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/smartprogrammer93",
      "html_url": "https://github.com/smartprogrammer93",
      "followers_url": "https://api.github.com/users/smartprogrammer93/followers",
      "following_url": "https://api.github.com/users/smartprogrammer93/following{/other_user}",
      "gists_url": "https://api.github.com/users/smartprogrammer93/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/smartprogrammer93/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/smartprogrammer93/subscriptions",
      "organizations_url": "https://api.github.com/users/smartprogrammer93/orgs",
      "repos_url": "https://api.github.com/users/smartprogrammer93/repos",
      "events_url": "https://api.github.com/users/smartprogrammer93/events{/privacy}",
      "received_events_url": "https://api.github.com/users/smartprogrammer93/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-11-03T10:03:52Z",
    "updated_at": "2023-11-03T10:03:52Z",
    "author_association": "CONTRIBUTOR",
    "body": "@danceratopz Yeah, it's not a problem. I will get to it today",
    "reactions": {
      "url": "https://api.github.com/repos/NethermindEth/nethermind/issues/comments/1792159046/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 1,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/NethermindEth/nethermind/issues/comments/1792245204",
    "html_url": "https://github.com/NethermindEth/nethermind/issues/6236#issuecomment-1792245204",
    "issue_url": "https://api.github.com/repos/NethermindEth/nethermind/issues/6236",
    "id": 1792245204,
    "node_id": "IC_kwDOBggaLc5q033U",
    "user": {
      "login": "LukaszRozmej",
      "id": 12445221,
      "node_id": "MDQ6VXNlcjEyNDQ1MjIx",
      "avatar_url": "https://avatars.githubusercontent.com/u/12445221?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/LukaszRozmej",
      "html_url": "https://github.com/LukaszRozmej",
      "followers_url": "https://api.github.com/users/LukaszRozmej/followers",
      "following_url": "https://api.github.com/users/LukaszRozmej/following{/other_user}",
      "gists_url": "https://api.github.com/users/LukaszRozmej/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/LukaszRozmej/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/LukaszRozmej/subscriptions",
      "organizations_url": "https://api.github.com/users/LukaszRozmej/orgs",
      "repos_url": "https://api.github.com/users/LukaszRozmej/repos",
      "events_url": "https://api.github.com/users/LukaszRozmej/events{/privacy}",
      "received_events_url": "https://api.github.com/users/LukaszRozmej/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-11-03T11:03:47Z",
    "updated_at": "2023-11-03T11:03:47Z",
    "author_association": "MEMBER",
    "body": "> > You could filter it: https://learn.microsoft.com/en-us/dotnet/core/testing/selective-unit-tests?pivots=mstest\r\n> \r\n> Thanks! Filtering by fixture name works nicely. Btw, we'll soon change the fixture names to the exact ID as generated when filling the fixtures, so that the test's intent is better expressed.\r\n> \r\n> If the effort is not too high on your side, it would still be helpful if there was a way of configuring a generic blockchain (and state test) consumer to consume test fixtures from a local directory. Perhaps this already exists and I missed it?\r\n> \r\n> Please note, this is no longer specific to execution-spec-tests; it could also be used with ethereum/tests as both use the same json test fixture format for blockchain tests (execution-spec-tests doesn't support state tests yet).\r\n\r\nIs https://github.com/NethermindEth/nethermind/blob/master/src/Nethermind/Nethermind.State.Test.Runner/Program.cs#L16-L17 sufficient? It could use a readme.",
    "reactions": {
      "url": "https://api.github.com/repos/NethermindEth/nethermind/issues/comments/1792245204/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/NethermindEth/nethermind/issues/comments/1792318667",
    "html_url": "https://github.com/NethermindEth/nethermind/issues/6236#issuecomment-1792318667",
    "issue_url": "https://api.github.com/repos/NethermindEth/nethermind/issues/6236",
    "id": 1792318667,
    "node_id": "IC_kwDOBggaLc5q1JzL",
    "user": {
      "login": "smartprogrammer93",
      "id": 33181301,
      "node_id": "MDQ6VXNlcjMzMTgxMzAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/33181301?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/smartprogrammer93",
      "html_url": "https://github.com/smartprogrammer93",
      "followers_url": "https://api.github.com/users/smartprogrammer93/followers",
      "following_url": "https://api.github.com/users/smartprogrammer93/following{/other_user}",
      "gists_url": "https://api.github.com/users/smartprogrammer93/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/smartprogrammer93/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/smartprogrammer93/subscriptions",
      "organizations_url": "https://api.github.com/users/smartprogrammer93/orgs",
      "repos_url": "https://api.github.com/users/smartprogrammer93/repos",
      "events_url": "https://api.github.com/users/smartprogrammer93/events{/privacy}",
      "received_events_url": "https://api.github.com/users/smartprogrammer93/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-11-03T12:02:43Z",
    "updated_at": "2023-11-03T12:02:43Z",
    "author_association": "CONTRIBUTOR",
    "body": "> > > You could filter it: [learn.microsoft.com/en-us/dotnet/core/testing/selective-unit-tests?pivots=mstest](https://learn.microsoft.com/en-us/dotnet/core/testing/selective-unit-tests?pivots=mstest)\r\n> > \r\n> > \r\n> > Thanks! Filtering by fixture name works nicely. Btw, we'll soon change the fixture names to the exact ID as generated when filling the fixtures, so that the test's intent is better expressed.\r\n> > If the effort is not too high on your side, it would still be helpful if there was a way of configuring a generic blockchain (and state test) consumer to consume test fixtures from a local directory. Perhaps this already exists and I missed it?\r\n> > Please note, this is no longer specific to execution-spec-tests; it could also be used with ethereum/tests as both use the same json test fixture format for blockchain tests (execution-spec-tests doesn't support state tests yet).\r\n> \r\n> Is [`master`/src/Nethermind/Nethermind.State.Test.Runner/Program.cs#L16-L17](https://github.com/NethermindEth/nethermind/blob/master/src/Nethermind/Nethermind.State.Test.Runner/Program.cs?rgh-link-date=2023-11-03T11%3A03%3A47Z#L16-L17) sufficient? It could use a readme.\r\n\r\nUnfortunately, it is not the case for `Nethermind.Blockchain.Test.Runner`. that one does not take arguments. @LukaszRozmej should i use that and make the needed changes to enable the functionality?",
    "reactions": {
      "url": "https://api.github.com/repos/NethermindEth/nethermind/issues/comments/1792318667/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/NethermindEth/nethermind/issues/comments/1792495750",
    "html_url": "https://github.com/NethermindEth/nethermind/issues/6236#issuecomment-1792495750",
    "issue_url": "https://api.github.com/repos/NethermindEth/nethermind/issues/6236",
    "id": 1792495750,
    "node_id": "IC_kwDOBggaLc5q11CG",
    "user": {
      "login": "danceratopz",
      "id": 91727015,
      "node_id": "U_kgDOBXekpw",
      "avatar_url": "https://avatars.githubusercontent.com/u/91727015?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/danceratopz",
      "html_url": "https://github.com/danceratopz",
      "followers_url": "https://api.github.com/users/danceratopz/followers",
      "following_url": "https://api.github.com/users/danceratopz/following{/other_user}",
      "gists_url": "https://api.github.com/users/danceratopz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/danceratopz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/danceratopz/subscriptions",
      "organizations_url": "https://api.github.com/users/danceratopz/orgs",
      "repos_url": "https://api.github.com/users/danceratopz/repos",
      "events_url": "https://api.github.com/users/danceratopz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/danceratopz/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-11-03T14:03:44Z",
    "updated_at": "2023-11-03T14:03:44Z",
    "author_association": "NONE",
    "body": "> > > You could filter it: https://learn.microsoft.com/en-us/dotnet/core/testing/selective-unit-tests?pivots=mstest\r\n> > \r\n> > \r\n> > Thanks! Filtering by fixture name works nicely. Btw, we'll soon change the fixture names to the exact ID as generated when filling the fixtures, so that the test's intent is better expressed.\r\n> > If the effort is not too high on your side, it would still be helpful if there was a way of configuring a generic blockchain (and state test) consumer to consume test fixtures from a local directory. Perhaps this already exists and I missed it?\r\n> > Please note, this is no longer specific to execution-spec-tests; it could also be used with ethereum/tests as both use the same json test fixture format for blockchain tests (execution-spec-tests doesn't support state tests yet).\r\n> \r\n> Is https://github.com/NethermindEth/nethermind/blob/master/src/Nethermind/Nethermind.State.Test.Runner/Program.cs#L16-L17 sufficient? It could use a readme.\r\n\r\nYes, thanks! This is much closer to what I was looking for (and also much faster to execute than the `dotnet test` machinery).\r\n\r\nSo yes, if this existed for blockchain tests that would be amazing. And, if not too much effort, the ability to run a single fixture from a json fixture file, as initially described. In the meantime, geth's `evm blocktest` command landed up taking a regex to select which fixtures to execute from within a fixture file (https://github.com/ethereum/go-ethereum/pull/28421).",
    "reactions": {
      "url": "https://api.github.com/repos/NethermindEth/nethermind/issues/comments/1792495750/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
