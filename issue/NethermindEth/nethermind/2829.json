{
  "url": "https://api.github.com/repos/NethermindEth/nethermind/issues/2829",
  "repository_url": "https://api.github.com/repos/NethermindEth/nethermind",
  "labels_url": "https://api.github.com/repos/NethermindEth/nethermind/issues/2829/labels{/name}",
  "comments_url": "https://api.github.com/repos/NethermindEth/nethermind/issues/2829/comments",
  "events_url": "https://api.github.com/repos/NethermindEth/nethermind/issues/2829/events",
  "html_url": "https://github.com/NethermindEth/nethermind/issues/2829",
  "id": 819785286,
  "node_id": "MDU6SXNzdWU4MTk3ODUyODY=",
  "number": 2829,
  "title": "block number => block reward mapping does not work in authority round",
  "user": {
    "login": "q9f",
    "id": 58883403,
    "node_id": "MDQ6VXNlcjU4ODgzNDAz",
    "avatar_url": "https://avatars.githubusercontent.com/u/58883403?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/q9f",
    "html_url": "https://github.com/q9f",
    "followers_url": "https://api.github.com/users/q9f/followers",
    "following_url": "https://api.github.com/users/q9f/following{/other_user}",
    "gists_url": "https://api.github.com/users/q9f/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/q9f/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/q9f/subscriptions",
    "organizations_url": "https://api.github.com/users/q9f/orgs",
    "repos_url": "https://api.github.com/users/q9f/repos",
    "events_url": "https://api.github.com/users/q9f/events{/privacy}",
    "received_events_url": "https://api.github.com/users/q9f/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": {
    "login": "marcindsobczak",
    "id": 77129288,
    "node_id": "MDQ6VXNlcjc3MTI5Mjg4",
    "avatar_url": "https://avatars.githubusercontent.com/u/77129288?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/marcindsobczak",
    "html_url": "https://github.com/marcindsobczak",
    "followers_url": "https://api.github.com/users/marcindsobczak/followers",
    "following_url": "https://api.github.com/users/marcindsobczak/following{/other_user}",
    "gists_url": "https://api.github.com/users/marcindsobczak/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/marcindsobczak/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/marcindsobczak/subscriptions",
    "organizations_url": "https://api.github.com/users/marcindsobczak/orgs",
    "repos_url": "https://api.github.com/users/marcindsobczak/repos",
    "events_url": "https://api.github.com/users/marcindsobczak/events{/privacy}",
    "received_events_url": "https://api.github.com/users/marcindsobczak/received_events",
    "type": "User",
    "site_admin": false
  },
  "assignees": [
    {
      "login": "marcindsobczak",
      "id": 77129288,
      "node_id": "MDQ6VXNlcjc3MTI5Mjg4",
      "avatar_url": "https://avatars.githubusercontent.com/u/77129288?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/marcindsobczak",
      "html_url": "https://github.com/marcindsobczak",
      "followers_url": "https://api.github.com/users/marcindsobczak/followers",
      "following_url": "https://api.github.com/users/marcindsobczak/following{/other_user}",
      "gists_url": "https://api.github.com/users/marcindsobczak/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/marcindsobczak/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/marcindsobczak/subscriptions",
      "organizations_url": "https://api.github.com/users/marcindsobczak/orgs",
      "repos_url": "https://api.github.com/users/marcindsobczak/repos",
      "events_url": "https://api.github.com/users/marcindsobczak/events{/privacy}",
      "received_events_url": "https://api.github.com/users/marcindsobczak/received_events",
      "type": "User",
      "site_admin": false
    }
  ],
  "milestone": null,
  "comments": 1,
  "created_at": "2021-03-02T08:39:34Z",
  "updated_at": "2021-03-25T11:47:33Z",
  "closed_at": "2021-03-23T17:09:30Z",
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "The following mapping in a parity chainspec works for ethash but not for authority round:\r\n\r\n```\r\n  \"engine\":{\r\n    \"authorityRound\":{\r\n      \"params\":{\r\n        \"blockReward\": {\r\n          \"0x0\": \"0x1\",\r\n          \"0x1\": \"0x0\"\r\n        }\r\n      }\r\n    }\r\n  }\r\n```\r\n\r\nnethermind-linux-amd64-1.10.24-5a8edd8-20210226:\r\n\r\n```\r\n2021-03-02 09:32:56.9885|Failure System.IO.InvalidDataException: Error when loading chainspec (UInt256 cannot be deserialized from null)\r\n ---> Newtonsoft.Json.JsonException: UInt256 cannot be deserialized from null\r\n   at Nethermind.Serialization.Json.UInt256Converter.ReadJson(JsonReader reader, Type objectType, UInt256 existingValue, Boolean hasExistingValue, JsonSerializer serializer)\r\n   at Newtonsoft.Json.JsonConverter`1.ReadJson(JsonReader reader, Type objectType, Object existingValue, JsonSerializer serializer)\r\n   at Newtonsoft.Json.Serialization.JsonSerializerInternalReader.DeserializeConvertable(JsonConverter converter, JsonReader reader, Type objectType, Object existingValue)\r\n   at Newtonsoft.Json.Serialization.JsonSerializerInternalReader.SetPropertyValue(JsonProperty property, JsonConverter propertyConverter, JsonContainerContract containerContract, JsonProperty containerProperty, JsonReader reader, Object target)\r\n   at Newtonsoft.Json.Serialization.JsonSerializerInternalReader.PopulateObject(Object newObject, JsonReader reader, JsonObjectContract contract, JsonProperty member, String id)\r\n   at Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateObject(JsonReader reader, Type objectType, JsonContract contract, JsonProperty member, JsonContainerContract containerContract, JsonProperty containerMember, Object existingValue)\r\n   at Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateValueInternal(JsonReader reader, Type objectType, JsonContract contract, JsonProperty member, JsonContainerContract containerContract, JsonProperty containerMember, Object existingValue)\r\n   at Newtonsoft.Json.Serialization.JsonSerializerInternalReader.SetPropertyValue(JsonProperty property, JsonConverter propertyConverter, JsonContainerContract containerContract, JsonProperty containerProperty, JsonReader reader, Object target)\r\n   at Newtonsoft.Json.Serialization.JsonSerializerInternalReader.PopulateObject(Object newObject, JsonReader reader, JsonObjectContract contract, JsonProperty member, String id)\r\n   at Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateObject(JsonReader reader, Type objectType, JsonContract contract, JsonProperty member, JsonContainerContract containerContract, JsonProperty containerMember, Object existingValue)\r\n   at Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateValueInternal(JsonReader reader, Type objectType, JsonContract contract, JsonProperty member, JsonContainerContract containerContract, JsonProperty containerMember, Object existingValue)\r\n   at Newtonsoft.Json.Serialization.JsonSerializerInternalReader.SetPropertyValue(JsonProperty property, JsonConverter propertyConverter, JsonContainerContract containerContract, JsonProperty containerProperty, JsonReader reader, Object target)\r\n   at Newtonsoft.Json.Serialization.JsonSerializerInternalReader.PopulateObject(Object newObject, JsonReader reader, JsonObjectContract contract, JsonProperty member, String id)\r\n   at Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateObject(JsonReader reader, Type objectType, JsonContract contract, JsonProperty member, JsonContainerContract containerContract, JsonProperty containerMember, Object existingValue)\r\n   at Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateValueInternal(JsonReader reader, Type objectType, JsonContract contract, JsonProperty member, JsonContainerContract containerContract, JsonProperty containerMember, Object existingValue)\r\n   at Newtonsoft.Json.Serialization.JsonSerializerInternalReader.SetPropertyValue(JsonProperty property, JsonConverter propertyConverter, JsonContainerContract containerContract, JsonProperty containerProperty, JsonReader reader, Object target)\r\n   at Newtonsoft.Json.Serialization.JsonSerializerInternalReader.PopulateObject(Object newObject, JsonReader reader, JsonObjectContract contract, JsonProperty member, String id)\r\n   at Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateObject(JsonReader reader, Type objectType, JsonContract contract, JsonProperty member, JsonContainerContract containerContract, JsonProperty containerMember, Object existingValue)\r\n   at Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateValueInternal(JsonReader reader, Type objectType, JsonContract contract, JsonProperty member, JsonContainerContract containerContract, JsonProperty containerMember, Object existingValue)\r\n   at Newtonsoft.Json.Serialization.JsonSerializerInternalReader.Deserialize(JsonReader reader, Type objectType, Boolean checkAdditionalContent)\r\n   at Newtonsoft.Json.JsonSerializer.DeserializeInternal(JsonReader reader, Type objectType)\r\n   at Newtonsoft.Json.JsonSerializer.Deserialize(JsonReader reader, Type objectType)\r\n   at Newtonsoft.Json.JsonSerializer.Deserialize[T](JsonReader reader)\r\n   at Nethermind.Serialization.Json.EthereumJsonSerializer.Deserialize[T](TextReader reader)\r\n   at Nethermind.Serialization.Json.EthereumJsonSerializer.Deserialize[T](String json)\r\n   at Nethermind.Specs.ChainSpecStyle.ChainSpecLoader.Load(String jsonData)\r\n   --- End of inner exception stack trace ---\r\n   at Nethermind.Specs.ChainSpecStyle.ChainSpecLoader.Load(String jsonData)\r\n   at Nethermind.Runner.Ethereum.Api.ApiBuilder.LoadChainSpec(IJsonSerializer ethereumJsonSerializer)\r\n   at Nethermind.Runner.Ethereum.Api.ApiBuilder.Create()\r\n   at Nethermind.Runner.Program.<>c__DisplayClass8_0.<<Run>b__3>d.MoveNext()\r\n```\r\n\r\nit would be nice to have and eventually not too complex to implement given a similar functionality should already exist for ethereum (eip 649 et al.) 🙏🏼 \r\n\r\n",
  "closed_by": {
    "login": "LukaszRozmej",
    "id": 12445221,
    "node_id": "MDQ6VXNlcjEyNDQ1MjIx",
    "avatar_url": "https://avatars.githubusercontent.com/u/12445221?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/LukaszRozmej",
    "html_url": "https://github.com/LukaszRozmej",
    "followers_url": "https://api.github.com/users/LukaszRozmej/followers",
    "following_url": "https://api.github.com/users/LukaszRozmej/following{/other_user}",
    "gists_url": "https://api.github.com/users/LukaszRozmej/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/LukaszRozmej/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/LukaszRozmej/subscriptions",
    "organizations_url": "https://api.github.com/users/LukaszRozmej/orgs",
    "repos_url": "https://api.github.com/users/LukaszRozmej/repos",
    "events_url": "https://api.github.com/users/LukaszRozmej/events{/privacy}",
    "received_events_url": "https://api.github.com/users/LukaszRozmej/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/NethermindEth/nethermind/issues/2829/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/NethermindEth/nethermind/issues/2829/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/NethermindEth/nethermind/issues/comments/806585870",
    "html_url": "https://github.com/NethermindEth/nethermind/issues/2829#issuecomment-806585870",
    "issue_url": "https://api.github.com/repos/NethermindEth/nethermind/issues/2829",
    "id": 806585870,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgwNjU4NTg3MA==",
    "user": {
      "login": "q9f",
      "id": 58883403,
      "node_id": "MDQ6VXNlcjU4ODgzNDAz",
      "avatar_url": "https://avatars.githubusercontent.com/u/58883403?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/q9f",
      "html_url": "https://github.com/q9f",
      "followers_url": "https://api.github.com/users/q9f/followers",
      "following_url": "https://api.github.com/users/q9f/following{/other_user}",
      "gists_url": "https://api.github.com/users/q9f/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/q9f/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/q9f/subscriptions",
      "organizations_url": "https://api.github.com/users/q9f/orgs",
      "repos_url": "https://api.github.com/users/q9f/repos",
      "events_url": "https://api.github.com/users/q9f/events{/privacy}",
      "received_events_url": "https://api.github.com/users/q9f/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-03-25T11:47:33Z",
    "updated_at": "2021-03-25T11:47:33Z",
    "author_association": "CONTRIBUTOR",
    "body": "THanks",
    "reactions": {
      "url": "https://api.github.com/repos/NethermindEth/nethermind/issues/comments/806585870/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
