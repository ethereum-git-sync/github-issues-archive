{
  "url": "https://api.github.com/repos/NethermindEth/nethermind/issues/3761",
  "repository_url": "https://api.github.com/repos/NethermindEth/nethermind",
  "labels_url": "https://api.github.com/repos/NethermindEth/nethermind/issues/3761/labels{/name}",
  "comments_url": "https://api.github.com/repos/NethermindEth/nethermind/issues/3761/comments",
  "events_url": "https://api.github.com/repos/NethermindEth/nethermind/issues/3761/events",
  "html_url": "https://github.com/NethermindEth/nethermind/issues/3761",
  "id": 1109483241,
  "node_id": "I_kwDOBggaLc5CIV7p",
  "number": 3761,
  "title": "trace_block returns insufficient funds error",
  "user": {
    "login": "kjazgar",
    "id": 67744705,
    "node_id": "MDQ6VXNlcjY3NzQ0NzA1",
    "avatar_url": "https://avatars.githubusercontent.com/u/67744705?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/kjazgar",
    "html_url": "https://github.com/kjazgar",
    "followers_url": "https://api.github.com/users/kjazgar/followers",
    "following_url": "https://api.github.com/users/kjazgar/following{/other_user}",
    "gists_url": "https://api.github.com/users/kjazgar/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/kjazgar/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/kjazgar/subscriptions",
    "organizations_url": "https://api.github.com/users/kjazgar/orgs",
    "repos_url": "https://api.github.com/users/kjazgar/repos",
    "events_url": "https://api.github.com/users/kjazgar/events{/privacy}",
    "received_events_url": "https://api.github.com/users/kjazgar/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 1124483401,
      "node_id": "MDU6TGFiZWwxMTI0NDgzNDAx",
      "url": "https://api.github.com/repos/NethermindEth/nethermind/labels/rpc",
      "name": "rpc",
      "color": "efe37a",
      "default": false,
      "description": ""
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": {
    "login": "rubo",
    "id": 337518,
    "node_id": "MDQ6VXNlcjMzNzUxOA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/337518?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/rubo",
    "html_url": "https://github.com/rubo",
    "followers_url": "https://api.github.com/users/rubo/followers",
    "following_url": "https://api.github.com/users/rubo/following{/other_user}",
    "gists_url": "https://api.github.com/users/rubo/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/rubo/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/rubo/subscriptions",
    "organizations_url": "https://api.github.com/users/rubo/orgs",
    "repos_url": "https://api.github.com/users/rubo/repos",
    "events_url": "https://api.github.com/users/rubo/events{/privacy}",
    "received_events_url": "https://api.github.com/users/rubo/received_events",
    "type": "User",
    "site_admin": false
  },
  "assignees": [
    {
      "login": "rubo",
      "id": 337518,
      "node_id": "MDQ6VXNlcjMzNzUxOA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/337518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rubo",
      "html_url": "https://github.com/rubo",
      "followers_url": "https://api.github.com/users/rubo/followers",
      "following_url": "https://api.github.com/users/rubo/following{/other_user}",
      "gists_url": "https://api.github.com/users/rubo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rubo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rubo/subscriptions",
      "organizations_url": "https://api.github.com/users/rubo/orgs",
      "repos_url": "https://api.github.com/users/rubo/repos",
      "events_url": "https://api.github.com/users/rubo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rubo/received_events",
      "type": "User",
      "site_admin": false
    }
  ],
  "milestone": null,
  "comments": 1,
  "created_at": "2022-01-20T16:02:48Z",
  "updated_at": "2023-05-10T16:29:38Z",
  "closed_at": null,
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "When calling trace_block function sometimes we return \r\n```\r\n\"jsonrpc\":\"2.0\",\"error\":{\"code\":-32000,\"message\":\"insufficient funds for transfer: address 0x7453bc3193cef66a0adadf8e7564ae2421d22dab\"},\"id\":4727}\r\n```\r\nhowever, in the case of this method, we should not check account balance.\r\n",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/NethermindEth/nethermind/issues/3761/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/NethermindEth/nethermind/issues/3761/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/NethermindEth/nethermind/issues/comments/1542496949",
    "html_url": "https://github.com/NethermindEth/nethermind/issues/3761#issuecomment-1542496949",
    "issue_url": "https://api.github.com/repos/NethermindEth/nethermind/issues/3761",
    "id": 1542496949,
    "node_id": "IC_kwDOBggaLc5b8KK1",
    "user": {
      "login": "abcfy2",
      "id": 5327677,
      "node_id": "MDQ6VXNlcjUzMjc2Nzc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5327677?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/abcfy2",
      "html_url": "https://github.com/abcfy2",
      "followers_url": "https://api.github.com/users/abcfy2/followers",
      "following_url": "https://api.github.com/users/abcfy2/following{/other_user}",
      "gists_url": "https://api.github.com/users/abcfy2/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/abcfy2/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/abcfy2/subscriptions",
      "organizations_url": "https://api.github.com/users/abcfy2/orgs",
      "repos_url": "https://api.github.com/users/abcfy2/repos",
      "events_url": "https://api.github.com/users/abcfy2/events{/privacy}",
      "received_events_url": "https://api.github.com/users/abcfy2/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-05-10T16:29:38Z",
    "updated_at": "2023-05-10T16:29:38Z",
    "author_association": "NONE",
    "body": "Any updates ? I have the same issue when I using blockscout indexing:\r\n\r\n```\r\n2023-05-10T16:25:00.759 application=indexer fetcher=internal_transaction count=10 error_count=10 [error] failed to fetch internal transactions for blocks: ** (ErlangError) Erlang error: [%{code: -32000, data: %{\"blockNumber\" => 17231118}, message: \"insufficient funds for transfer: address 0xdafea492d9c6733ae3d56b7ed1adb60692c98bc5\"}]\r\n```\r\n\r\nNethermind log:\r\n\r\n```\r\n2023-05-10 16:26:23.5270|INFO|179|Executing JSON RPC call trace_replayBlockTransactions with params [0x106ED0E, [\r\n  \"trace\"\r\n]] \r\n2023-05-10 16:26:23.5539|WARN|111|Error when handling ID 6, trace_replayBlockTransactions(0x106ED0E,[\r\n  \"trace\"\r\n]) | {\"jsonrpc\":\"2.0\",\"error\":{\"code\":-32000,\"message\":\"insufficient funds for transfer: address 0xdafea492d9c6733ae3d56b7ed1adb60692c98bc5\",\"data\":\"System.Reflection.TargetInvocationException: Exception has been thrown by the target of an invocation.\\n ---> Nethermind.State.InsufficientBalanceException: insufficient funds for transfer: address 0xdafea492d9c6733ae3d56b7ed1adb60692c98bc5\\n   at Nethermind.State.StateProvider.SetNewBalance(Address address, UInt256& balanceChange, IReleaseSpec releaseSpec, Boolean isSubtracting)\\n   at Nethermind.Evm.TransactionProcessing.TransactionProcessor.Execute(Transaction transaction, BlockHeader block, ITxTracer txTracer, ExecutionOptions executionOptions)\\n   at Nethermind.Consensus.Processing.BlockProcessor.BlockValidationTransactionsExecutor.ProcessTransactions(Block block, ProcessingOptions processingOptions, BlockReceiptsTracer receiptsTracer, IReleaseSpec spec)\\n   at Nethermind.Consensus.Processing.BlockProcessor.ProcessBlock(Block block, IBlockTracer blockTracer, ProcessingOptions options)\\n   at Nethermind.Consensus.Processing.BlockProcessor.Process(Keccak newBranchStateRoot, List`1 suggestedBlocks, ProcessingOptions options, IBlockTracer blockTracer)\\n   at Nethermind.Consensus.Processing.BlockchainProcessor.ProcessBranch(ProcessingBranch processingBranch, ProcessingOptions options, IBlockTracer tracer)\\n   at Nethermind.Consensus.Processing.BlockchainProcessor.Process(Block suggestedBlock, ProcessingOptions options, IBlockTracer tracer)\\n   at Nethermind.Consensus.Processing.OneTimeChainProcessor.Process(Block block, ProcessingOptions options, IBlockTracer tracer)\\n   at Nethermind.Consensus.Tracing.Tracer.Trace(Block block, IBlockTracer blockTracer)\\n   at Nethermind.JsonRpc.Modules.Trace.TraceRpcModule.TraceBlock(Block block, ParityLikeBlockTracer tracer)\\n   at Nethermind.JsonRpc.Modules.Trace.TraceRpcModule.trace_replayBlockTransactions(BlockParameter blockParameter, String[] traceTypes)\\n   at InvokeStub_ITraceRpcModule.trace_replayBlockTransactions(Object, Object, IntPtr*)\\n   at System.Reflection.MethodInvoker.Invoke(Object obj, IntPtr* args, BindingFlags invokeAttr)\\n   --- End of inner exception stack trace ---\\n   at System.Reflection.MethodInvoker.Invoke(Object obj, IntPtr* args, BindingFlags invokeAttr)\\n   at System.Reflection.RuntimeMethodInfo.Invoke(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)\\n   at Nethermind.JsonRpc.JsonRpcService.ExecuteAsync(JsonRpcRequest request, String methodName, ValueTuple`2 method, JsonRpcContext context)\"},\"id\":6} \r\n2023-05-10 16:26:23.5539|WARN|9|Error when handling ID 1, trace_replayBlockTransactions(0x106ED0E,[\r\n  \"trace\"\r\n]) | {\"jsonrpc\":\"2.0\",\"error\":{\"code\":-32000,\"message\":\"insufficient funds for transfer: address 0xdafea492d9c6733ae3d56b7ed1adb60692c98bc5\",\"data\":\"System.Reflection.TargetInvocationException: Exception has been thrown by the target of an invocation.\\n ---> Nethermind.State.InsufficientBalanceException: insufficient funds for transfer: address 0xdafea492d9c6733ae3d56b7ed1adb60692c98bc5\\n   at Nethermind.State.StateProvider.SetNewBalance(Address address, UInt256& balanceChange, IReleaseSpec releaseSpec, Boolean isSubtracting)\\n   at Nethermind.Evm.TransactionProcessing.TransactionProcessor.Execute(Transaction transaction, BlockHeader block, ITxTracer txTracer, ExecutionOptions executionOptions)\\n   at Nethermind.Consensus.Processing.BlockProcessor.BlockValidationTransactionsExecutor.ProcessTransactions(Block block, ProcessingOptions processingOptions, BlockReceiptsTracer receiptsTracer, IReleaseSpec spec)\\n   at Nethermind.Consensus.Processing.BlockProcessor.ProcessBlock(Block block, IBlockTracer blockTracer, ProcessingOptions options)\\n   at Nethermind.Consensus.Processing.BlockProcessor.Process(Keccak newBranchStateRoot, List`1 suggestedBlocks, ProcessingOptions options, IBlockTracer blockTracer)\\n   at Nethermind.Consensus.Processing.BlockchainProcessor.ProcessBranch(ProcessingBranch processingBranch, ProcessingOptions options, IBlockTracer tracer)\\n   at Nethermind.Consensus.Processing.BlockchainProcessor.Process(Block suggestedBlock, ProcessingOptions options, IBlockTracer tracer)\\n   at Nethermind.Consensus.Processing.OneTimeChainProcessor.Process(Block block, ProcessingOptions options, IBlockTracer tracer)\\n   at Nethermind.Consensus.Tracing.Tracer.Trace(Block block, IBlockTracer blockTracer)\\n   at Nethermind.JsonRpc.Modules.Trace.TraceRpcModule.TraceBlock(Block block, ParityLikeBlockTracer tracer)\\n   at Nethermind.JsonRpc.Modules.Trace.TraceRpcModule.trace_replayBlockTransactions(BlockParameter blockParameter, String[] traceTypes)\\n   at InvokeStub_ITraceRpcModule.trace_replayBlockTransactions(Object, Object, IntPtr*)\\n   at System.Reflection.MethodInvoker.Invoke(Object obj, IntPtr* args, BindingFlags invokeAttr)\\n   --- End of inner exception stack trace ---\\n   at System.Reflection.MethodInvoker.Invoke(Object obj, IntPtr* args, BindingFlags invokeAttr)\\n   at System.Reflection.RuntimeMethodInfo.Invoke(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)\\n   at Nethermind.JsonRpc.JsonRpcService.ExecuteAsync(JsonRpcRequest request, String methodName, ValueTuple`2 method, JsonRpcContext context)\"},\"id\":1} \r\n2023-05-10 16:26:23.5539|INFO|9|Executing JSON RPC call trace_replayBlockTransactions with params [0x106ED1B, [\r\n  \"trace\"\r\n]] \r\n2023-05-10 16:26:23.5871|INFO|183|Executing JSON RPC call trace_replayBlockTransactions with params [0x106ED22, [\r\n  \"trace\"\r\n]] \r\n2023-05-10 16:26:23.6464|WARN|179|Error when handling ID 1, trace_replayBlockTransactions(0x106ED0E,[\r\n  \"trace\"\r\n]) | {\"jsonrpc\":\"2.0\",\"error\":{\"code\":-32000,\"message\":\"insufficient funds for transfer: address 0xdafea492d9c6733ae3d56b7ed1adb60692c98bc5\",\"data\":\"System.Reflection.TargetInvocationException: Exception has been thrown by the target of an invocation.\\n ---> Nethermind.State.InsufficientBalanceException: insufficient funds for transfer: address 0xdafea492d9c6733ae3d56b7ed1adb60692c98bc5\\n   at Nethermind.State.StateProvider.SetNewBalance(Address address, UInt256& balanceChange, IReleaseSpec releaseSpec, Boolean isSubtracting)\\n   at Nethermind.Evm.TransactionProcessing.TransactionProcessor.Execute(Transaction transaction, BlockHeader block, ITxTracer txTracer, ExecutionOptions executionOptions)\\n   at Nethermind.Consensus.Processing.BlockProcessor.BlockValidationTransactionsExecutor.ProcessTransactions(Block block, ProcessingOptions processingOptions, BlockReceiptsTracer receiptsTracer, IReleaseSpec spec)\\n   at Nethermind.Consensus.Processing.BlockProcessor.ProcessBlock(Block block, IBlockTracer blockTracer, ProcessingOptions options)\\n   at Nethermind.Consensus.Processing.BlockProcessor.Process(Keccak newBranchStateRoot, List`1 suggestedBlocks, ProcessingOptions options, IBlockTracer blockTracer)\\n   at Nethermind.Consensus.Processing.BlockchainProcessor.ProcessBranch(ProcessingBranch processingBranch, ProcessingOptions options, IBlockTracer tracer)\\n   at Nethermind.Consensus.Processing.BlockchainProcessor.Process(Block suggestedBlock, ProcessingOptions options, IBlockTracer tracer)\\n   at Nethermind.Consensus.Processing.OneTimeChainProcessor.Process(Block block, ProcessingOptions options, IBlockTracer tracer)\\n   at Nethermind.Consensus.Tracing.Tracer.Trace(Block block, IBlockTracer blockTracer)\\n   at Nethermind.JsonRpc.Modules.Trace.TraceRpcModule.TraceBlock(Block block, ParityLikeBlockTracer tracer)\\n   at Nethermind.JsonRpc.Modules.Trace.TraceRpcModule.trace_replayBlockTransactions(BlockParameter blockParameter, String[] traceTypes)\\n   at InvokeStub_ITraceRpcModule.trace_replayBlockTransactions(Object, Object, IntPtr*)\\n   at System.Reflection.MethodInvoker.Invoke(Object obj, IntPtr* args, BindingFlags invokeAttr)\\n   --- End of inner exception stack trace ---\\n   at System.Reflection.MethodInvoker.Invoke(Object obj, IntPtr* args, BindingFlags invokeAttr)\\n   at System.Reflection.RuntimeMethodInfo.Invoke(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)\\n   at Nethermind.JsonRpc.JsonRpcService.ExecuteAsync(JsonRpcRequest request, String methodName, ValueTuple`2 method, JsonRpcContext context)\"},\"id\":1}\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/NethermindEth/nethermind/issues/comments/1542496949/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
