{
  "url": "https://api.github.com/repos/NethermindEth/nethermind/issues/2393",
  "repository_url": "https://api.github.com/repos/NethermindEth/nethermind",
  "labels_url": "https://api.github.com/repos/NethermindEth/nethermind/issues/2393/labels{/name}",
  "comments_url": "https://api.github.com/repos/NethermindEth/nethermind/issues/2393/comments",
  "events_url": "https://api.github.com/repos/NethermindEth/nethermind/issues/2393/events",
  "html_url": "https://github.com/NethermindEth/nethermind/issues/2393",
  "id": 725402751,
  "node_id": "MDU6SXNzdWU3MjU0MDI3NTE=",
  "number": 2393,
  "title": "Extended reportBenign feature and corresponding fixes",
  "user": {
    "login": "varasev",
    "id": 33550681,
    "node_id": "MDQ6VXNlcjMzNTUwNjgx",
    "avatar_url": "https://avatars.githubusercontent.com/u/33550681?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/varasev",
    "html_url": "https://github.com/varasev",
    "followers_url": "https://api.github.com/users/varasev/followers",
    "following_url": "https://api.github.com/users/varasev/following{/other_user}",
    "gists_url": "https://api.github.com/users/varasev/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/varasev/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/varasev/subscriptions",
    "organizations_url": "https://api.github.com/users/varasev/orgs",
    "repos_url": "https://api.github.com/users/varasev/repos",
    "events_url": "https://api.github.com/users/varasev/events{/privacy}",
    "received_events_url": "https://api.github.com/users/varasev/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 1448805289,
      "node_id": "MDU6TGFiZWwxNDQ4ODA1Mjg5",
      "url": "https://api.github.com/repos/NethermindEth/nethermind/labels/poa",
      "name": "poa",
      "color": "7b5fb9",
      "default": false,
      "description": ""
    },
    {
      "id": 1833597981,
      "node_id": "MDU6TGFiZWwxODMzNTk3OTgx",
      "url": "https://api.github.com/repos/NethermindEth/nethermind/labels/posdao",
      "name": "posdao",
      "color": "fce6c4",
      "default": false,
      "description": ""
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": {
    "login": "LukaszRozmej",
    "id": 12445221,
    "node_id": "MDQ6VXNlcjEyNDQ1MjIx",
    "avatar_url": "https://avatars.githubusercontent.com/u/12445221?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/LukaszRozmej",
    "html_url": "https://github.com/LukaszRozmej",
    "followers_url": "https://api.github.com/users/LukaszRozmej/followers",
    "following_url": "https://api.github.com/users/LukaszRozmej/following{/other_user}",
    "gists_url": "https://api.github.com/users/LukaszRozmej/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/LukaszRozmej/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/LukaszRozmej/subscriptions",
    "organizations_url": "https://api.github.com/users/LukaszRozmej/orgs",
    "repos_url": "https://api.github.com/users/LukaszRozmej/repos",
    "events_url": "https://api.github.com/users/LukaszRozmej/events{/privacy}",
    "received_events_url": "https://api.github.com/users/LukaszRozmej/received_events",
    "type": "User",
    "site_admin": false
  },
  "assignees": [
    {
      "login": "LukaszRozmej",
      "id": 12445221,
      "node_id": "MDQ6VXNlcjEyNDQ1MjIx",
      "avatar_url": "https://avatars.githubusercontent.com/u/12445221?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/LukaszRozmej",
      "html_url": "https://github.com/LukaszRozmej",
      "followers_url": "https://api.github.com/users/LukaszRozmej/followers",
      "following_url": "https://api.github.com/users/LukaszRozmej/following{/other_user}",
      "gists_url": "https://api.github.com/users/LukaszRozmej/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/LukaszRozmej/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/LukaszRozmej/subscriptions",
      "organizations_url": "https://api.github.com/users/LukaszRozmej/orgs",
      "repos_url": "https://api.github.com/users/LukaszRozmej/repos",
      "events_url": "https://api.github.com/users/LukaszRozmej/events{/privacy}",
      "received_events_url": "https://api.github.com/users/LukaszRozmej/received_events",
      "type": "User",
      "site_admin": false
    }
  ],
  "milestone": null,
  "comments": 13,
  "created_at": "2020-10-20T09:42:30Z",
  "updated_at": "2020-12-30T11:59:42Z",
  "closed_at": "2020-12-30T11:59:42Z",
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "In POSDAO we will need to have an extended `reportBenign` function which would tell the `ValidatorSet` contract whether some validator skipped their block due to their offline/disconnected mode or just because of the previous validator (when the previous validator overlaps the block due to delay).\r\n\r\nThe idea is to add two extra parameters (`bool wasOnline, address parentBlockAuthor`) to the `reportBenign` function.\r\n\r\nTo make it possible, there are following steps suggested to be implemented in Nethermind:\r\n\r\n`1.` Move the call of `ReportingContractBasedValidator.TryReportSkipped` from [`AuRaBlockProducer.SealBlock`](https://github.com/NethermindEth/nethermind/blob/a5db950b92aa976d47cce7f98aee1ed00d0a27fb/src/Nethermind/Nethermind.Consensus.AuRa/AuRaBlockProducer.cs#L131) to `AuRaBlockProducer.OnBlockSealed` (which would be called [here](https://github.com/NethermindEth/nethermind/blob/a5db950b92aa976d47cce7f98aee1ed00d0a27fb/src/Nethermind/Nethermind.Blockchain/Producers/BlockProducerBase.cs#L124)).\r\n\r\nThis would guarantee that the `reportBenign` won't be sent by block's author until the block is sealed and suggested.\r\n\r\n`2.` I think this is wrong (but I might mistake):\r\n\r\nThe `TryReportSkipped` is called by the [`AuRaSealValidator.ValidateParams`](https://github.com/NethermindEth/nethermind/blob/a5db950b92aa976d47cce7f98aee1ed00d0a27fb/src/Nethermind/Nethermind.Consensus.AuRa/AuRaSealValidator.cs#L121) when block's non-author validates the block.\r\n\r\nThe `AuRaSealValidator.ValidateParams` is called by the [`HeaderValidator.Validate`](https://github.com/NethermindEth/nethermind/blob/a5db950b92aa976d47cce7f98aee1ed00d0a27fb/src/Nethermind/Nethermind.Blockchain/Validators/HeaderValidator.cs#L109-L114), but `HeaderValidator.Validate` is called by [`BlockValidator.ValidateHeader`](https://github.com/NethermindEth/nethermind/blob/a5db950b92aa976d47cce7f98aee1ed00d0a27fb/src/Nethermind/Nethermind.Blockchain/Validators/BlockValidator.cs#L50) which is only called by [`BlockDownloader.DownloadHeaders`](https://github.com/NethermindEth/nethermind/blob/a5db950b92aa976d47cce7f98aee1ed00d0a27fb/src/Nethermind/Nethermind.Synchronization/Blocks/BlockDownloader.cs#L201).\r\n\r\nSo, it seems that `TryReportSkipped` is called when the block is downloaded. But at that moment, as far as I understand, this block is not yet accepted by validators.\r\n\r\nThis will lead to a situation when we catch such a block which is not yet accepted, but already call `ReportBenign`. If previous validator `A` delayed their block (like on the picture below), but finally will produce it (earlier than block from `B` is accepted), the validator `A` will be reported as benign (which is not correct).\r\n\r\nThis point needs to be fixed so that validators should only send `ReportBenign` after the block is accepted by validators, not after it is downloaded. Because, as far as I understand, block's downloading doesn't mean that the block is already accepted.\r\n\r\n<img src=\"https://user-images.githubusercontent.com/33550681/96569931-6f059100-12d2-11eb-846f-328f1da4b8e1.png\" width=\"400\" />\r\n\r\n`3.` Probably, these two points above could be joined so that validators (including block's author) should only send `ReportBenign` after the block is accepted by them, not after it is downloaded or sealed by author.\r\n\r\n`4.` [This `ReportBenign`](https://github.com/NethermindEth/nethermind/blob/a5db950b92aa976d47cce7f98aee1ed00d0a27fb/src/Nethermind/Nethermind.Consensus.AuRa/Validators/ReportingContractBasedValidator.cs#L110) implementation should be extended with the `bool wasOnline, address parentBlockAuthor` parameters (POSDAO ValidatorSet contract will have such a function correspondingly).\r\n\r\nIt is assumed that somehow we know (catch) whether the [`skippedValidator`](https://github.com/NethermindEth/nethermind/blob/a5db950b92aa976d47cce7f98aee1ed00d0a27fb/src/Nethermind/Nethermind.Consensus.AuRa/Validators/ReportingContractBasedValidator.cs#L195) tried to produce a block with the previous number ~and step~ (`header.Number - 1` ~and `header.AuRaStep.Value - 1`~), or not.\r\n\r\nI.e. if the `skippedValidator` propagated their block `header.Number - 1` ~(with step `header.AuRaStep.Value - 1`)~ before we send `ReportBenign`, it means that the validator was online and thus the `wasOnline` parameter should be set to `true`. Otherwise, it should be `false`.\r\n\r\nTo make it possible we need to catch the propagated blocks in the client (and check them according to the described logic in the `TryReportSkipped/ReportBenign` function).\r\n\r\n`5.` Other `ReportBenign` implementations (for [`IncorrectProposer` and `FutureBlock`](https://github.com/NethermindEth/nethermind/blob/a5db950b92aa976d47cce7f98aee1ed00d0a27fb/src/Nethermind/Nethermind.Consensus.AuRa/Validators/IReportingValidator.cs#L30-L31) reasons) should stay untouched (i.e. without the `bool wasOnline, address parentBlockAuthor` parameters). So, the corresponding `reportBenign` function in the `ValidatorSet` contract will have two versions (with those extra parameters and without them).\r\n\r\n--\r\n\r\nThis will be a low priority task, but to be able to fix POSDAO contracts accordingly, currently I need to know if we can implement this.\r\n\r\nPlease, give your feedback.\r\n",
  "closed_by": {
    "login": "varasev",
    "id": 33550681,
    "node_id": "MDQ6VXNlcjMzNTUwNjgx",
    "avatar_url": "https://avatars.githubusercontent.com/u/33550681?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/varasev",
    "html_url": "https://github.com/varasev",
    "followers_url": "https://api.github.com/users/varasev/followers",
    "following_url": "https://api.github.com/users/varasev/following{/other_user}",
    "gists_url": "https://api.github.com/users/varasev/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/varasev/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/varasev/subscriptions",
    "organizations_url": "https://api.github.com/users/varasev/orgs",
    "repos_url": "https://api.github.com/users/varasev/repos",
    "events_url": "https://api.github.com/users/varasev/events{/privacy}",
    "received_events_url": "https://api.github.com/users/varasev/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/NethermindEth/nethermind/issues/2393/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/NethermindEth/nethermind/issues/2393/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/NethermindEth/nethermind/issues/comments/712772046",
    "html_url": "https://github.com/NethermindEth/nethermind/issues/2393#issuecomment-712772046",
    "issue_url": "https://api.github.com/repos/NethermindEth/nethermind/issues/2393",
    "id": 712772046,
    "node_id": "MDEyOklzc3VlQ29tbWVudDcxMjc3MjA0Ng==",
    "user": {
      "login": "LukaszRozmej",
      "id": 12445221,
      "node_id": "MDQ6VXNlcjEyNDQ1MjIx",
      "avatar_url": "https://avatars.githubusercontent.com/u/12445221?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/LukaszRozmej",
      "html_url": "https://github.com/LukaszRozmej",
      "followers_url": "https://api.github.com/users/LukaszRozmej/followers",
      "following_url": "https://api.github.com/users/LukaszRozmej/following{/other_user}",
      "gists_url": "https://api.github.com/users/LukaszRozmej/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/LukaszRozmej/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/LukaszRozmej/subscriptions",
      "organizations_url": "https://api.github.com/users/LukaszRozmej/orgs",
      "repos_url": "https://api.github.com/users/LukaszRozmej/repos",
      "events_url": "https://api.github.com/users/LukaszRozmej/events{/privacy}",
      "received_events_url": "https://api.github.com/users/LukaszRozmej/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-10-20T11:04:34Z",
    "updated_at": "2020-10-20T11:07:38Z",
    "author_association": "MEMBER",
    "body": "Points 1-3. I think you are right here and it would be beneficial to move Report skipped to after processing a block (both if it was produced by same node or other node). I would move it to:\r\n\r\nhttps://github.com/NethermindEth/nethermind/blob/f2994f23dc967886c082866e20b32b093b806d1b/src/Nethermind/Nethermind.Consensus.AuRa/Validators/ReportingContractBasedValidator.cs#L226\r\n\r\n4. This is very problematic and incompatible with AuRa. Consider this scenario:\r\n\r\n![image](https://user-images.githubusercontent.com/12445221/96577565-1636f800-12d4-11eb-8f94-4c770b09346b.png)\r\n\r\nAuRa basically has no means of punishing Validator who produced block in a slot after the slot it should have produced a block. Until someone produces a block on a block from Validator B, the block from Validator A will always win based on its TotalDifficulty and Difficulty as Difficulty will decrease with with time (AuraStep). Also we report before we receive that block from A.\r\n\r\nWhat I would propose:\r\na) Create explicit ReportTime/ReportSlow (What about too fast?) to differentiate from Benign.\r\nb) Report basing on time received**. If we receive block out of slot - report (only too slow? what about too fast?)\r\nc) Seal another block in B time slot if possible\r\nd) create new validator type to be used in chainspec (differentiate from 'contract' and 'safeContract')\r\n\r\n** Keep in mind that those reports will be based not only on Validator A behavior but also Network behavior. So if enough validators don't like Validator A and they will delay propagating its blocks he might get punished even when he is behaving correctly.",
    "reactions": {
      "url": "https://api.github.com/repos/NethermindEth/nethermind/issues/comments/712772046/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/NethermindEth/nethermind/issues/comments/712790747",
    "html_url": "https://github.com/NethermindEth/nethermind/issues/2393#issuecomment-712790747",
    "issue_url": "https://api.github.com/repos/NethermindEth/nethermind/issues/2393",
    "id": 712790747,
    "node_id": "MDEyOklzc3VlQ29tbWVudDcxMjc5MDc0Nw==",
    "user": {
      "login": "varasev",
      "id": 33550681,
      "node_id": "MDQ6VXNlcjMzNTUwNjgx",
      "avatar_url": "https://avatars.githubusercontent.com/u/33550681?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/varasev",
      "html_url": "https://github.com/varasev",
      "followers_url": "https://api.github.com/users/varasev/followers",
      "following_url": "https://api.github.com/users/varasev/following{/other_user}",
      "gists_url": "https://api.github.com/users/varasev/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/varasev/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/varasev/subscriptions",
      "organizations_url": "https://api.github.com/users/varasev/orgs",
      "repos_url": "https://api.github.com/users/varasev/repos",
      "events_url": "https://api.github.com/users/varasev/events{/privacy}",
      "received_events_url": "https://api.github.com/users/varasev/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-10-20T11:42:59Z",
    "updated_at": "2020-10-20T11:42:59Z",
    "author_association": "CONTRIBUTOR",
    "body": "@LukaszRozmej On your above picture (let's imagine that there is no `2B` block on the picture):\r\n\r\nWould the block from `B` accepted in the current implementation?\r\n\r\nIt's based on the same parent as the block from `A`, but `B`'s propagated earlier. I think it will be accepted and the block from `A` will be rejected, right? Because when `B` is propagated, validators don't yet know about the block from `A`. I would expect that validators accept the block from `B` with `SkippedStep` benign report about `A`.\r\n\r\nIs it right for the current implementation?",
    "reactions": {
      "url": "https://api.github.com/repos/NethermindEth/nethermind/issues/comments/712790747/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/NethermindEth/nethermind/issues/comments/712796213",
    "html_url": "https://github.com/NethermindEth/nethermind/issues/2393#issuecomment-712796213",
    "issue_url": "https://api.github.com/repos/NethermindEth/nethermind/issues/2393",
    "id": 712796213,
    "node_id": "MDEyOklzc3VlQ29tbWVudDcxMjc5NjIxMw==",
    "user": {
      "login": "varasev",
      "id": 33550681,
      "node_id": "MDQ6VXNlcjMzNTUwNjgx",
      "avatar_url": "https://avatars.githubusercontent.com/u/33550681?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/varasev",
      "html_url": "https://github.com/varasev",
      "followers_url": "https://api.github.com/users/varasev/followers",
      "following_url": "https://api.github.com/users/varasev/following{/other_user}",
      "gists_url": "https://api.github.com/users/varasev/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/varasev/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/varasev/subscriptions",
      "organizations_url": "https://api.github.com/users/varasev/orgs",
      "repos_url": "https://api.github.com/users/varasev/repos",
      "events_url": "https://api.github.com/users/varasev/events{/privacy}",
      "received_events_url": "https://api.github.com/users/varasev/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-10-20T11:54:13Z",
    "updated_at": "2020-10-20T11:54:13Z",
    "author_association": "CONTRIBUTOR",
    "body": "> Until someone produces a block on a block from Validator B, the block from Validator A will always win based on its TotalDifficulty and Difficulty as Difficulty will decrease with with time (AuraStep). Also we report before we receive that block from A.\r\n\r\n@LukaszRozmej Do I get this correctly from your picture above, that validators will first accept the block from B, but once they a bit later receive the propagated block from A, it will be also accepted and will replace the block from B previously accepted because of Difficulty?",
    "reactions": {
      "url": "https://api.github.com/repos/NethermindEth/nethermind/issues/comments/712796213/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/NethermindEth/nethermind/issues/comments/712805481",
    "html_url": "https://github.com/NethermindEth/nethermind/issues/2393#issuecomment-712805481",
    "issue_url": "https://api.github.com/repos/NethermindEth/nethermind/issues/2393",
    "id": 712805481,
    "node_id": "MDEyOklzc3VlQ29tbWVudDcxMjgwNTQ4MQ==",
    "user": {
      "login": "LukaszRozmej",
      "id": 12445221,
      "node_id": "MDQ6VXNlcjEyNDQ1MjIx",
      "avatar_url": "https://avatars.githubusercontent.com/u/12445221?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/LukaszRozmej",
      "html_url": "https://github.com/LukaszRozmej",
      "followers_url": "https://api.github.com/users/LukaszRozmej/followers",
      "following_url": "https://api.github.com/users/LukaszRozmej/following{/other_user}",
      "gists_url": "https://api.github.com/users/LukaszRozmej/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/LukaszRozmej/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/LukaszRozmej/subscriptions",
      "organizations_url": "https://api.github.com/users/LukaszRozmej/orgs",
      "repos_url": "https://api.github.com/users/LukaszRozmej/repos",
      "events_url": "https://api.github.com/users/LukaszRozmej/events{/privacy}",
      "received_events_url": "https://api.github.com/users/LukaszRozmej/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-10-20T12:12:21Z",
    "updated_at": "2020-10-20T12:12:21Z",
    "author_association": "MEMBER",
    "body": "@poaman yes this can be a scenario:\r\n\r\nFirst accept Block B then Reorg to Block A as block A has higher difficulty and total difficulty. The exact scenario for each node will depend on propagation and discovery times for those blocks. If Node will accept Block B first then it will report benign.",
    "reactions": {
      "url": "https://api.github.com/repos/NethermindEth/nethermind/issues/comments/712805481/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/NethermindEth/nethermind/issues/comments/712810732",
    "html_url": "https://github.com/NethermindEth/nethermind/issues/2393#issuecomment-712810732",
    "issue_url": "https://api.github.com/repos/NethermindEth/nethermind/issues/2393",
    "id": 712810732,
    "node_id": "MDEyOklzc3VlQ29tbWVudDcxMjgxMDczMg==",
    "user": {
      "login": "varasev",
      "id": 33550681,
      "node_id": "MDQ6VXNlcjMzNTUwNjgx",
      "avatar_url": "https://avatars.githubusercontent.com/u/33550681?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/varasev",
      "html_url": "https://github.com/varasev",
      "followers_url": "https://api.github.com/users/varasev/followers",
      "following_url": "https://api.github.com/users/varasev/following{/other_user}",
      "gists_url": "https://api.github.com/users/varasev/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/varasev/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/varasev/subscriptions",
      "organizations_url": "https://api.github.com/users/varasev/orgs",
      "repos_url": "https://api.github.com/users/varasev/repos",
      "events_url": "https://api.github.com/users/varasev/events{/privacy}",
      "received_events_url": "https://api.github.com/users/varasev/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-10-20T12:22:41Z",
    "updated_at": "2020-10-20T18:49:06Z",
    "author_association": "CONTRIBUTOR",
    "body": "@LukaszRozmej \r\n\r\n> If Node will accept Block B first then it will report benign.\r\n\r\nIt is OK if the validator `B` will report `SkippedStep` about validator `A` on your picture above (when the validator A actually finally produced the block). Such delays can be treated as offline, because so slowness should also be punished if it happens too often.\r\n\r\nThe main goal of the proposed changes is to let ValidatorSet contract know that validator `B` **tried** to produce and propagate his block on his turn, and thus was online when their block actually wasn't included into the chain (because his block was replaced with the block from the slow validator A (having higher difficulty) or because the block from `A` was propagated earlier than from `B` like on the [first picture](https://user-images.githubusercontent.com/33550681/96569931-6f059100-12d2-11eb-846f-328f1da4b8e1.png)).\r\n\r\n> c) Seal another block in B time slot if possible\r\n\r\nI don't like this approach because we don't know how much time will be taken by the block we repeatedly reproduce. This may take more time than we have before our slot elapses, so we can be reported as a slow validator on the next block. There can also be other nuances I didn't think about yet.\r\n\r\nIs it really impossible for a node to just remember the block it saw a bit earlier? Can't we keep it in memory after [`BlockDownloader.DownloadHeaders`](https://github.com/NethermindEth/nethermind/blob/a5db950b92aa976d47cce7f98aee1ed00d0a27fb/src/Nethermind/Nethermind.Synchronization/Blocks/BlockDownloader.cs#L201), then check it inside the `TryReportSkipped`, and remove from the memory when it doesn't make sense to keep that anymore?\r\n\r\n> Keep in mind that those reports will be based not only on Validator A behavior but also Network behavior. So if enough validators don't like Validator A and they will delay propagating its blocks he might get punished even when he is behaving correctly.\r\n\r\nYes, of course.",
    "reactions": {
      "url": "https://api.github.com/repos/NethermindEth/nethermind/issues/comments/712810732/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/NethermindEth/nethermind/issues/comments/712825894",
    "html_url": "https://github.com/NethermindEth/nethermind/issues/2393#issuecomment-712825894",
    "issue_url": "https://api.github.com/repos/NethermindEth/nethermind/issues/2393",
    "id": 712825894,
    "node_id": "MDEyOklzc3VlQ29tbWVudDcxMjgyNTg5NA==",
    "user": {
      "login": "LukaszRozmej",
      "id": 12445221,
      "node_id": "MDQ6VXNlcjEyNDQ1MjIx",
      "avatar_url": "https://avatars.githubusercontent.com/u/12445221?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/LukaszRozmej",
      "html_url": "https://github.com/LukaszRozmej",
      "followers_url": "https://api.github.com/users/LukaszRozmej/followers",
      "following_url": "https://api.github.com/users/LukaszRozmej/following{/other_user}",
      "gists_url": "https://api.github.com/users/LukaszRozmej/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/LukaszRozmej/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/LukaszRozmej/subscriptions",
      "organizations_url": "https://api.github.com/users/LukaszRozmej/orgs",
      "repos_url": "https://api.github.com/users/LukaszRozmej/repos",
      "events_url": "https://api.github.com/users/LukaszRozmej/events{/privacy}",
      "received_events_url": "https://api.github.com/users/LukaszRozmej/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-10-20T12:51:11Z",
    "updated_at": "2020-10-20T12:51:11Z",
    "author_association": "MEMBER",
    "body": "Ah ok so the main problem we want to Solve is that when validator C produces block in slot 3 we don't want to report skipped B that was replaced with A? This sounds similar to uncles. This can be fairly easy achievable as BlockTree keeps branches. So if our Block 3 has parent block 1, we can check that it has uncle block 2 and not report it.",
    "reactions": {
      "url": "https://api.github.com/repos/NethermindEth/nethermind/issues/comments/712825894/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/NethermindEth/nethermind/issues/comments/713323909",
    "html_url": "https://github.com/NethermindEth/nethermind/issues/2393#issuecomment-713323909",
    "issue_url": "https://api.github.com/repos/NethermindEth/nethermind/issues/2393",
    "id": 713323909,
    "node_id": "MDEyOklzc3VlQ29tbWVudDcxMzMyMzkwOQ==",
    "user": {
      "login": "varasev",
      "id": 33550681,
      "node_id": "MDQ6VXNlcjMzNTUwNjgx",
      "avatar_url": "https://avatars.githubusercontent.com/u/33550681?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/varasev",
      "html_url": "https://github.com/varasev",
      "followers_url": "https://api.github.com/users/varasev/followers",
      "following_url": "https://api.github.com/users/varasev/following{/other_user}",
      "gists_url": "https://api.github.com/users/varasev/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/varasev/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/varasev/subscriptions",
      "organizations_url": "https://api.github.com/users/varasev/orgs",
      "repos_url": "https://api.github.com/users/varasev/repos",
      "events_url": "https://api.github.com/users/varasev/events{/privacy}",
      "received_events_url": "https://api.github.com/users/varasev/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-10-21T05:58:40Z",
    "updated_at": "2020-10-21T05:58:40Z",
    "author_association": "CONTRIBUTOR",
    "body": "We do want to report about skipped `B` but with the `wasOnline` param as I described above because POSDAO contract needs to know how many times some validator skipped their turn unintentionally (i.e. being online) or intentionally (being offline).\r\n\r\nWe need this for both cases shown on the schemes below. Is that possible to use uncles for both cases?\r\n\r\n(click to enlarge)\r\n\r\n<img src=\"https://user-images.githubusercontent.com/33550681/96678881-438ab100-137b-11eb-9547-bbd5a180c447.png\" width=\"300\" /> <img src=\"https://user-images.githubusercontent.com/33550681/96678910-500f0980-137b-11eb-8048-f1e6f04ab9f9.png\" width=\"300\" />\r\n\r\nIf we'd use `uncles`, then the logic would be as follows:\r\n\r\n**When we report benign, we first should check whether our block (which number we pass to the `reportBenign` function) has uncles: if it has uncles then we set `wasOnline` to `true` (when we report about the author of the uncle). Otherwise it must be `false`.**\r\n\r\nDoes Nethermind support working with uncles in AuRa? Or you mean we could implement a similar mechanism in Nethermind?\r\n\r\nBlockscout explorer shows that there were no uncles on xDai, POA Core/Sokol at all: https://blockscout.com/poa/xdai/uncles, https://blockscout.com/poa/core/uncles, https://blockscout.com/poa/sokol/uncles\r\n\r\nAs far as I know, uncles is not the same as reorgs (so we need to be sure uncles are supported by the client): https://ethereum.stackexchange.com/questions/19646/difference-between-uncle-block-and-forked-blocks\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/NethermindEth/nethermind/issues/comments/713323909/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/NethermindEth/nethermind/issues/comments/713336669",
    "html_url": "https://github.com/NethermindEth/nethermind/issues/2393#issuecomment-713336669",
    "issue_url": "https://api.github.com/repos/NethermindEth/nethermind/issues/2393",
    "id": 713336669,
    "node_id": "MDEyOklzc3VlQ29tbWVudDcxMzMzNjY2OQ==",
    "user": {
      "login": "varasev",
      "id": 33550681,
      "node_id": "MDQ6VXNlcjMzNTUwNjgx",
      "avatar_url": "https://avatars.githubusercontent.com/u/33550681?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/varasev",
      "html_url": "https://github.com/varasev",
      "followers_url": "https://api.github.com/users/varasev/followers",
      "following_url": "https://api.github.com/users/varasev/following{/other_user}",
      "gists_url": "https://api.github.com/users/varasev/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/varasev/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/varasev/subscriptions",
      "organizations_url": "https://api.github.com/users/varasev/orgs",
      "repos_url": "https://api.github.com/users/varasev/repos",
      "events_url": "https://api.github.com/users/varasev/events{/privacy}",
      "received_events_url": "https://api.github.com/users/varasev/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-10-21T06:21:31Z",
    "updated_at": "2020-10-21T06:21:31Z",
    "author_association": "CONTRIBUTOR",
    "body": "> Points 1-3. I think you are right here and it would be beneficial to move Report skipped to after processing a block (both if it was produced by same node or other node). I would move it to: https://github.com/NethermindEth/nethermind/blob/f2994f23dc967886c082866e20b32b093b806d1b/src/Nethermind/Nethermind.Consensus.AuRa/Validators/ReportingContractBasedValidator.cs#L226\r\n\r\nSeems a block producer first processes their block (before sealing): https://github.com/NethermindEth/nethermind/blob/a5db950b92aa976d47cce7f98aee1ed00d0a27fb/src/Nethermind/Nethermind.Blockchain/Producers/BlockProducerBase.cs#L108\r\n\r\nAre you sure that is the right place to move `TryReportSkipped` to?",
    "reactions": {
      "url": "https://api.github.com/repos/NethermindEth/nethermind/issues/comments/713336669/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/NethermindEth/nethermind/issues/comments/713426977",
    "html_url": "https://github.com/NethermindEth/nethermind/issues/2393#issuecomment-713426977",
    "issue_url": "https://api.github.com/repos/NethermindEth/nethermind/issues/2393",
    "id": 713426977,
    "node_id": "MDEyOklzc3VlQ29tbWVudDcxMzQyNjk3Nw==",
    "user": {
      "login": "LukaszRozmej",
      "id": 12445221,
      "node_id": "MDQ6VXNlcjEyNDQ1MjIx",
      "avatar_url": "https://avatars.githubusercontent.com/u/12445221?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/LukaszRozmej",
      "html_url": "https://github.com/LukaszRozmej",
      "followers_url": "https://api.github.com/users/LukaszRozmej/followers",
      "following_url": "https://api.github.com/users/LukaszRozmej/following{/other_user}",
      "gists_url": "https://api.github.com/users/LukaszRozmej/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/LukaszRozmej/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/LukaszRozmej/subscriptions",
      "organizations_url": "https://api.github.com/users/LukaszRozmej/orgs",
      "repos_url": "https://api.github.com/users/LukaszRozmej/repos",
      "events_url": "https://api.github.com/users/LukaszRozmej/events{/privacy}",
      "received_events_url": "https://api.github.com/users/LukaszRozmej/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-10-21T09:09:41Z",
    "updated_at": "2020-10-21T09:09:41Z",
    "author_association": "MEMBER",
    "body": "@poaman so to be clear AuRa doesn't support uncles in a way that it doesn't add uncle information to produced blocks. But if the blocks get propagated they are in BlockTree on same level (blockNumber) as parent, so as an 'uncle', just used the term to be more familiar.\r\n\r\n> We do want to report about skipped B but with the wasOnline param as I described above because POSDAO contract needs to know how many times some validator skipped their turn unintentionally (i.e. being online) or intentionally (being offline).\r\n> When we report benign, we first should check whether our block (which number we pass to the reportBenign function) has uncles: if it has uncles then we set wasOnline to true (when we report about the author of the uncle). Otherwise it must be false.\r\n\r\nSome comments and question marks here:\r\n1. I would rename wasOnline to something more descriptive like - producedNonCanonicalBlock or wasReorganised  or something similar. wasOnline while short is confusing name.\r\n2. Naming on the contract side, we want to have second reportBening function there? Maybe we should name it explicitly to reportSkipped?\r\n3. When we are checking for 'uncles' before reporting we also have to check who sealed those uncles.\r\n4. \r\n> Seems a block producer first processes their block (before sealing):\r\n\r\nThis is for validation purposes only. It processes the block on separate read-only view of chain and state. After sealing the block is propagated for normal processing on actual chain by adding it to BlockTree:\r\n\r\nhttps://github.com/NethermindEth/nethermind/blob/eed064c478f53994c8590b5d2203479389ed92c3/src/Nethermind/Nethermind.Blockchain/Producers/BlockProducerBase.cs#L123 ",
    "reactions": {
      "url": "https://api.github.com/repos/NethermindEth/nethermind/issues/comments/713426977/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/NethermindEth/nethermind/issues/comments/713437752",
    "html_url": "https://github.com/NethermindEth/nethermind/issues/2393#issuecomment-713437752",
    "issue_url": "https://api.github.com/repos/NethermindEth/nethermind/issues/2393",
    "id": 713437752,
    "node_id": "MDEyOklzc3VlQ29tbWVudDcxMzQzNzc1Mg==",
    "user": {
      "login": "varasev",
      "id": 33550681,
      "node_id": "MDQ6VXNlcjMzNTUwNjgx",
      "avatar_url": "https://avatars.githubusercontent.com/u/33550681?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/varasev",
      "html_url": "https://github.com/varasev",
      "followers_url": "https://api.github.com/users/varasev/followers",
      "following_url": "https://api.github.com/users/varasev/following{/other_user}",
      "gists_url": "https://api.github.com/users/varasev/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/varasev/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/varasev/subscriptions",
      "organizations_url": "https://api.github.com/users/varasev/orgs",
      "repos_url": "https://api.github.com/users/varasev/repos",
      "events_url": "https://api.github.com/users/varasev/events{/privacy}",
      "received_events_url": "https://api.github.com/users/varasev/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-10-21T09:27:49Z",
    "updated_at": "2020-10-21T09:27:49Z",
    "author_association": "CONTRIBUTOR",
    "body": "> if the blocks get propagated they are in BlockTree on same level (blockNumber) as parent, so as an 'uncle', just used the term to be more familiar\r\n\r\nOk, so in the current implementation such blocks are already in the BlockTree? (for the both cases I [mentioned above](https://github.com/NethermindEth/nethermind/issues/2393#issuecomment-713323909))\r\n\r\nOr we will need to implement this functionality?\r\n\r\n> I would rename wasOnline to something more descriptive like - producedNonCanonicalBlock or wasReorganised or something similar. wasOnline while short is confusing name.\r\n> Naming on the contract side, we want to have second reportBening function there? Maybe we should name it explicitly to reportSkipped?\r\n\r\nOk, let's agree with the following name: `reportSkipped(address validator, uint256 blockNumber, bool reorganized, address parentBlockAuthor)`\r\n\r\n> When we are checking for 'uncles' before reporting we also have to check who sealed those uncles.\r\n\r\nSure",
    "reactions": {
      "url": "https://api.github.com/repos/NethermindEth/nethermind/issues/comments/713437752/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/NethermindEth/nethermind/issues/comments/713461617",
    "html_url": "https://github.com/NethermindEth/nethermind/issues/2393#issuecomment-713461617",
    "issue_url": "https://api.github.com/repos/NethermindEth/nethermind/issues/2393",
    "id": 713461617,
    "node_id": "MDEyOklzc3VlQ29tbWVudDcxMzQ2MTYxNw==",
    "user": {
      "login": "LukaszRozmej",
      "id": 12445221,
      "node_id": "MDQ6VXNlcjEyNDQ1MjIx",
      "avatar_url": "https://avatars.githubusercontent.com/u/12445221?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/LukaszRozmej",
      "html_url": "https://github.com/LukaszRozmej",
      "followers_url": "https://api.github.com/users/LukaszRozmej/followers",
      "following_url": "https://api.github.com/users/LukaszRozmej/following{/other_user}",
      "gists_url": "https://api.github.com/users/LukaszRozmej/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/LukaszRozmej/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/LukaszRozmej/subscriptions",
      "organizations_url": "https://api.github.com/users/LukaszRozmej/orgs",
      "repos_url": "https://api.github.com/users/LukaszRozmej/repos",
      "events_url": "https://api.github.com/users/LukaszRozmej/events{/privacy}",
      "received_events_url": "https://api.github.com/users/LukaszRozmej/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-10-21T10:09:56Z",
    "updated_at": "2020-10-21T10:11:27Z",
    "author_association": "MEMBER",
    "body": "> Ok, so in the current implementation such blocks are already in the BlockTree? (for the both cases I mentioned above)\r\n\r\nIn general case it depends on propagation and network topology, but generally yes they should be in well connected network.\r\n\r\nOne idea that sprung to mind is that we can potentially use that 'uncle' information to report on slow validators. So if we process a block that reorganises other block with higher step we could assume that this block is late. This probably could be exploited by issuing a block with higher step too early. We do have some kind of validation about that here, but I think its too loose (and probably needs to be) to prevent that:\r\n\r\nhttps://github.com/NethermindEth/nethermind/blob/c632039ff2b8997043b303e10ca2e325e0358d3c/src/Nethermind/Nethermind.Consensus.AuRa/AuRaSealValidator.cs#L101-L117\r\n\r\nalso we had a situation that parity notoriously propagated blocks few hundred ms too early. Not sure if it was clock sync issue or it was by design by parity client. Hence the 1000ms threshold in above code not to report to many warnings to logs.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/NethermindEth/nethermind/issues/comments/713461617/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/NethermindEth/nethermind/issues/comments/713497331",
    "html_url": "https://github.com/NethermindEth/nethermind/issues/2393#issuecomment-713497331",
    "issue_url": "https://api.github.com/repos/NethermindEth/nethermind/issues/2393",
    "id": 713497331,
    "node_id": "MDEyOklzc3VlQ29tbWVudDcxMzQ5NzMzMQ==",
    "user": {
      "login": "varasev",
      "id": 33550681,
      "node_id": "MDQ6VXNlcjMzNTUwNjgx",
      "avatar_url": "https://avatars.githubusercontent.com/u/33550681?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/varasev",
      "html_url": "https://github.com/varasev",
      "followers_url": "https://api.github.com/users/varasev/followers",
      "following_url": "https://api.github.com/users/varasev/following{/other_user}",
      "gists_url": "https://api.github.com/users/varasev/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/varasev/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/varasev/subscriptions",
      "organizations_url": "https://api.github.com/users/varasev/orgs",
      "repos_url": "https://api.github.com/users/varasev/repos",
      "events_url": "https://api.github.com/users/varasev/events{/privacy}",
      "received_events_url": "https://api.github.com/users/varasev/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-10-21T11:18:43Z",
    "updated_at": "2020-10-21T11:18:43Z",
    "author_association": "CONTRIBUTOR",
    "body": "> One idea that sprung to mind is that we can potentially use that 'uncle' information to report on slow validators. So if we process a block that reorganises other block with higher step we could assume that this block is late.\r\n\r\nFor such cases there will be `address parentBlockAuthor` parameter in the `ValidatorSetAuRa.reportSkipped` function as I mentioned above. If `bool reorganized` param is `true`, then it would mean that the validator `parentBlockAuthor` who produced the previous block (`blockNumber - 1`) delayed that block. So I think we don't need any other reports on slow validators.",
    "reactions": {
      "url": "https://api.github.com/repos/NethermindEth/nethermind/issues/comments/713497331/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/NethermindEth/nethermind/issues/comments/752480118",
    "html_url": "https://github.com/NethermindEth/nethermind/issues/2393#issuecomment-752480118",
    "issue_url": "https://api.github.com/repos/NethermindEth/nethermind/issues/2393",
    "id": 752480118,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc1MjQ4MDExOA==",
    "user": {
      "login": "varasev",
      "id": 33550681,
      "node_id": "MDQ6VXNlcjMzNTUwNjgx",
      "avatar_url": "https://avatars.githubusercontent.com/u/33550681?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/varasev",
      "html_url": "https://github.com/varasev",
      "followers_url": "https://api.github.com/users/varasev/followers",
      "following_url": "https://api.github.com/users/varasev/following{/other_user}",
      "gists_url": "https://api.github.com/users/varasev/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/varasev/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/varasev/subscriptions",
      "organizations_url": "https://api.github.com/users/varasev/orgs",
      "repos_url": "https://api.github.com/users/varasev/repos",
      "events_url": "https://api.github.com/users/varasev/events{/privacy}",
      "received_events_url": "https://api.github.com/users/varasev/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-12-30T11:59:42Z",
    "updated_at": "2020-12-30T11:59:42Z",
    "author_association": "CONTRIBUTOR",
    "body": "We decided to implement another scheme which won't require modifications in Ethereum client, so I'm closing this issue.",
    "reactions": {
      "url": "https://api.github.com/repos/NethermindEth/nethermind/issues/comments/752480118/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
