{
  "url": "https://api.github.com/repos/NethermindEth/nethermind/issues/2608",
  "repository_url": "https://api.github.com/repos/NethermindEth/nethermind",
  "labels_url": "https://api.github.com/repos/NethermindEth/nethermind/issues/2608/labels{/name}",
  "comments_url": "https://api.github.com/repos/NethermindEth/nethermind/issues/2608/comments",
  "events_url": "https://api.github.com/repos/NethermindEth/nethermind/issues/2608/events",
  "html_url": "https://github.com/NethermindEth/nethermind/issues/2608",
  "id": 775783704,
  "node_id": "MDU6SXNzdWU3NzU3ODM3MDQ=",
  "number": 2608,
  "title": "Call to certifier failed",
  "user": {
    "login": "tkstanczak",
    "id": 498913,
    "node_id": "MDQ6VXNlcjQ5ODkxMw==",
    "avatar_url": "https://avatars.githubusercontent.com/u/498913?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tkstanczak",
    "html_url": "https://github.com/tkstanczak",
    "followers_url": "https://api.github.com/users/tkstanczak/followers",
    "following_url": "https://api.github.com/users/tkstanczak/following{/other_user}",
    "gists_url": "https://api.github.com/users/tkstanczak/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tkstanczak/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tkstanczak/subscriptions",
    "organizations_url": "https://api.github.com/users/tkstanczak/orgs",
    "repos_url": "https://api.github.com/users/tkstanczak/repos",
    "events_url": "https://api.github.com/users/tkstanczak/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tkstanczak/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": {
    "login": "MarekM25",
    "id": 9356351,
    "node_id": "MDQ6VXNlcjkzNTYzNTE=",
    "avatar_url": "https://avatars.githubusercontent.com/u/9356351?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/MarekM25",
    "html_url": "https://github.com/MarekM25",
    "followers_url": "https://api.github.com/users/MarekM25/followers",
    "following_url": "https://api.github.com/users/MarekM25/following{/other_user}",
    "gists_url": "https://api.github.com/users/MarekM25/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/MarekM25/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/MarekM25/subscriptions",
    "organizations_url": "https://api.github.com/users/MarekM25/orgs",
    "repos_url": "https://api.github.com/users/MarekM25/repos",
    "events_url": "https://api.github.com/users/MarekM25/events{/privacy}",
    "received_events_url": "https://api.github.com/users/MarekM25/received_events",
    "type": "User",
    "site_admin": false
  },
  "assignees": [
    {
      "login": "MarekM25",
      "id": 9356351,
      "node_id": "MDQ6VXNlcjkzNTYzNTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9356351?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarekM25",
      "html_url": "https://github.com/MarekM25",
      "followers_url": "https://api.github.com/users/MarekM25/followers",
      "following_url": "https://api.github.com/users/MarekM25/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarekM25/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarekM25/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarekM25/subscriptions",
      "organizations_url": "https://api.github.com/users/MarekM25/orgs",
      "repos_url": "https://api.github.com/users/MarekM25/repos",
      "events_url": "https://api.github.com/users/MarekM25/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarekM25/received_events",
      "type": "User",
      "site_admin": false
    },
    {
      "login": "LukaszRozmej",
      "id": 12445221,
      "node_id": "MDQ6VXNlcjEyNDQ1MjIx",
      "avatar_url": "https://avatars.githubusercontent.com/u/12445221?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/LukaszRozmej",
      "html_url": "https://github.com/LukaszRozmej",
      "followers_url": "https://api.github.com/users/LukaszRozmej/followers",
      "following_url": "https://api.github.com/users/LukaszRozmej/following{/other_user}",
      "gists_url": "https://api.github.com/users/LukaszRozmej/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/LukaszRozmej/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/LukaszRozmej/subscriptions",
      "organizations_url": "https://api.github.com/users/LukaszRozmej/orgs",
      "repos_url": "https://api.github.com/users/LukaszRozmej/repos",
      "events_url": "https://api.github.com/users/LukaszRozmej/events{/privacy}",
      "received_events_url": "https://api.github.com/users/LukaszRozmej/received_events",
      "type": "User",
      "site_admin": false
    }
  ],
  "milestone": null,
  "comments": 0,
  "created_at": "2020-12-29T09:05:00Z",
  "updated_at": "2021-02-03T10:25:20Z",
  "closed_at": "2021-02-03T10:25:20Z",
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "020-12-29 07:42:10.4508|Sync mode changed from StateNodes, FastHeaders to FastSync, StateNodes, FastHeaders \r\n2020-12-29 07:42:10.6131|Call to certifier contract failed on block 0 (0x4f1dd23188aab3a76b463e4af801b52b1248ef073c648cbdc4c9333d3da79756)    at Nethermind.Consensus.AuRa.Transactions.TxCertifierFilter.IsCertified(Transaction tx, BlockHeader parentHeader)\r\n   at Nethermind.Consensus.AuRa.Transactions.TxCertifierFilter.IsAllowed(Transaction tx, BlockHeader parentHeader)\r\n   at Nethermind.Consensus.Transactions.CompositeTxFilter.IsAllowed(Transaction tx, BlockHeader parentHeader)\r\n   at Nethermind.TxPool.FilteredTxPool.FilterTransaction(Transaction tx, Boolean& managedNonce)\r\n   at Nethermind.TxPool.TxPool.AddTransaction(Transaction tx, TxHandlingOptions handlingOptions)\r\n   at Nethermind.Network.P2P.Subprotocols.Eth.V62.Eth62ProtocolHandler.Handle(TransactionsMessage msg)\r\n   at Nethermind.Network.P2P.Subprotocols.Eth.V63.Eth63ProtocolHandler.HandleMessage(ZeroPacket message)\r\n   at Nethermind.Network.P2P.Subprotocols.Eth.V65.Eth65ProtocolHandler.HandleMessage(ZeroPacket message)\r\n   at Nethermind.Network.P2P.Session.ReceiveMessage(ZeroPacket zeroPacket)\r\n   at Nethermind.Network.P2P.ZeroNettyP2PHandler.ChannelRead0(IChannelHandlerContext ctx, ZeroPacket input)\r\n   at DotNetty.Transport.Channels.SimpleChannelInboundHandler`1.ChannelRead(IChannelHandlerContext ctx, Object msg)\r\n   at DotNetty.Transport.Channels.AbstractChannelHandlerContext.InvokeChannelRead(Object msg)\r\n   at DotNetty.Common.Concurrency.AbstractEventExecutor.SafeExecute(IRunnable task)\r\n   at DotNetty.Common.Concurrency.SingleThreadEventExecutor.RunAllTasks(PreciseTimeSpan timeout)\r\n   at DotNetty.Common.Concurrency.SingleThreadEventExecutor.<Loop>b__26_0()\r\n   at System.Threading.Tasks.Task.InnerInvoke()\r\n   at System.Threading.Tasks.Task.<>c.<.cctor>b__274_0(Object obj)\r\n   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state)\r\n   at System.Threading.Tasks.Task.ExecuteWithThreadLocal(Task& currentTaskSlot, Thread threadPoolThread)\r\n   at System.Threading.Tasks.Task.ExecuteEntry()\r\n   at System.Threading.Tasks.TaskScheduler.TryExecuteTask(Task task)\r\n   at DotNetty.Common.Concurrency.ExecutorTaskScheduler.QueueTask(Task task)\r\n   at System.Threading.Tasks.TaskScheduler.InternalQueueTask(Task task)\r\n   at System.Threading.Tasks.Task.ScheduleAndStart(Boolean needsProtection)\r\n   at System.Threading.Tasks.Task.InternalStartNew(Task creatingTask, Delegate action, Object state, CancellationToken cancellationToken, TaskScheduler scheduler, TaskCreationOptions options, InternalTaskOptions internalOptions)\r\n   at System.Threading.Tasks.TaskFactory.StartNew(Action action, CancellationToken cancellationToken, TaskCreationOptions creationOptions, TaskScheduler scheduler)\r\n   at DotNetty.Common.Concurrency.SingleThreadEventExecutor.Loop()\r\n   at DotNetty.Common.Concurrency.XThread.<>c__DisplayClass10_0.<.ctor>b__0(Object x)\r\n   at DotNetty.Common.Concurrency.XThread.<>c__DisplayClass13_0.<CreateLongRunningTask>b__0()\r\n   at System.Threading.Tasks.Task.InnerInvoke()\r\n   at System.Threading.Tasks.Task.<>c.<.cctor>b__274_0(Object obj)\r\n   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state)\r\n   at System.Threading.Tasks.Task.ExecuteWithThreadLocal(Task& currentTaskSlot, Thread threadPoolThread)\r\n   at System.Threading.Tasks.Task.ExecuteEntryUnsafe(Thread threadPoolThread)\r\n   at System.Threading.Tasks.ThreadPoolTaskScheduler.<>c.<.cctor>b__10_0(Object s)\r\n   at System.Threading.ThreadHelper.ThreadStart_Context(Object state)\r\n   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state)\r\n   at System.Threading.ThreadHelper.ThreadStart(Object obj)\r\n. Nethermind.Abi.AbiException: Cannot decode return data for function getAddress(address) for contract 0x6b53721d4f2fb9514b85f5c49b197d857e36cf03.\r\n ---> System.ArgumentException: Offset and length were out of bounds for the array or count is greater than the number of elements from index to the end of the source collection.\r\n   at System.Buffer.BlockCopy(Array src, Int32 srcOffset, Array dst, Int32 dstOffset, Int32 count)\r\n   at Nethermind.Core.Extensions.ByteArrayExtensions.Slice(Byte[] bytes, Int32 startIndex, Int32 length)\r\n   at Nethermind.Abi.AbiAddress.Decode(Byte[] data, Int32 position, Boolean packed)\r\n   at Nethermind.Abi.AbiEncoder.Decode(AbiEncodingStyle encodingStyle, AbiSignature signature, Byte[] data)\r\n   at Nethermind.Abi.AbiEncoderExtensions.Decode(IAbiEncoder encoder, AbiEncodingInfo abiEncodingInfo, Byte[] data)\r\n   at Nethermind.Blockchain.Contracts.Contract.DecodeData(AbiEncodingInfo abiEncodingInfo, Byte[] data)\r\n   --- End of inner exception stack trace ---\r\n   at Nethermind.Blockchain.Contracts.Contract.DecodeData(AbiEncodingInfo abiEncodingInfo, Byte[] data)\r\n   at Nethermind.Blockchain.Contracts.Contract.DecodeReturnData(String functionName, Byte[] data)\r\n   at Nethermind.Blockchain.Contracts.Contract.ConstantContract.CallRaw(BlockHeader parentHeader, String functionName, Address sender, Object[] arguments)\r\n   at Nethermind.Blockchain.Contracts.Contract.ConstantContract.Call(BlockHeader parentHeader, String functionName, Address sender, Object[] arguments)\r\n   at Nethermind.Blockchain.Contracts.Contract.ConstantContract.Call[T](BlockHeader parentHeader, String functionName, Address sender, Object[] arguments)\r\n   at Nethermind.Consensus.AuRa.Contracts.RegisterContract.GetAddress(BlockHeader header, String key)\r\n   at Nethermind.Consensus.AuRa.Contracts.RegisterBasedContract.GetContractAddress(BlockHeader header)\r\n   at Nethermind.Consensus.AuRa.Contracts.RegisterBasedContract.GenerateTransaction[T](Byte[] transactionData, Address sender, Int64 gasLimit, BlockHeader header)\r\n   at Nethermind.Blockchain.Contracts.Contract.GenerateTransaction[T](String functionName, Address sender, Int64 gasLimit, BlockHeader header, Object[] arguments)\r\n   at Nethermind.Blockchain.Contracts.Contract.ConstantContract.CallRaw(BlockHeader parentHeader, String functionName, Address sender, Object[] arguments)\r\n   at Nethermind.Blockchain.Contracts.Contract.ConstantContract.Call(BlockHeader parentHeader, String functionName, Address sender, Object[] arguments)\r\n   at Nethermind.Blockchain.Contracts.Contract.ConstantContract.Call[T](BlockHeader parentHeader, String functionName, Address sender, Object[] arguments)\r\n   at Nethermind.Consensus.AuRa.Contracts.CertifierContract.Certified(BlockHeader parentHeader, Address sender)\r\n   at Nethermind.Consensus.AuRa.Transactions.TxCertifierFilter.IsCertified(Transaction tx, BlockHeader parentHeader)\r\n2020-12-29 07:42:11.1800|State Sync 00.00:16:09 | 1187.82MB | kB/s:   885 | accounts 463228 | nodes 11235568 | diagnostics: 14.7.00ms",
  "closed_by": {
    "login": "LukaszRozmej",
    "id": 12445221,
    "node_id": "MDQ6VXNlcjEyNDQ1MjIx",
    "avatar_url": "https://avatars.githubusercontent.com/u/12445221?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/LukaszRozmej",
    "html_url": "https://github.com/LukaszRozmej",
    "followers_url": "https://api.github.com/users/LukaszRozmej/followers",
    "following_url": "https://api.github.com/users/LukaszRozmej/following{/other_user}",
    "gists_url": "https://api.github.com/users/LukaszRozmej/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/LukaszRozmej/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/LukaszRozmej/subscriptions",
    "organizations_url": "https://api.github.com/users/LukaszRozmej/orgs",
    "repos_url": "https://api.github.com/users/LukaszRozmej/repos",
    "events_url": "https://api.github.com/users/LukaszRozmej/events{/privacy}",
    "received_events_url": "https://api.github.com/users/LukaszRozmej/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/NethermindEth/nethermind/issues/2608/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/NethermindEth/nethermind/issues/2608/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[

]
