{
  "url": "https://api.github.com/repos/ethereum-optimism/optimism/issues/498",
  "repository_url": "https://api.github.com/repos/ethereum-optimism/optimism",
  "labels_url": "https://api.github.com/repos/ethereum-optimism/optimism/issues/498/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum-optimism/optimism/issues/498/comments",
  "events_url": "https://api.github.com/repos/ethereum-optimism/optimism/issues/498/events",
  "html_url": "https://github.com/ethereum-optimism/optimism/issues/498",
  "id": 861882861,
  "node_id": "MDU6SXNzdWU4NjE4ODI4NjE=",
  "number": 498,
  "title": "Enable ability to upgrade code and storage of L2 contracts",
  "user": {
    "login": "karlfloersch",
    "id": 706123,
    "node_id": "MDQ6VXNlcjcwNjEyMw==",
    "avatar_url": "https://avatars.githubusercontent.com/u/706123?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/karlfloersch",
    "html_url": "https://github.com/karlfloersch",
    "followers_url": "https://api.github.com/users/karlfloersch/followers",
    "following_url": "https://api.github.com/users/karlfloersch/following{/other_user}",
    "gists_url": "https://api.github.com/users/karlfloersch/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/karlfloersch/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/karlfloersch/subscriptions",
    "organizations_url": "https://api.github.com/users/karlfloersch/orgs",
    "repos_url": "https://api.github.com/users/karlfloersch/repos",
    "events_url": "https://api.github.com/users/karlfloersch/events{/privacy}",
    "received_events_url": "https://api.github.com/users/karlfloersch/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 2907832518,
      "node_id": "MDU6TGFiZWwyOTA3ODMyNTE4",
      "url": "https://api.github.com/repos/ethereum-optimism/optimism/labels/C-enhancement",
      "name": "C-enhancement",
      "color": "C5DEF5",
      "default": false,
      "description": "Category: A PR with an enhancement or bugfix."
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": {
    "login": "smartcontracts",
    "id": 14298799,
    "node_id": "MDQ6VXNlcjE0Mjk4Nzk5",
    "avatar_url": "https://avatars.githubusercontent.com/u/14298799?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/smartcontracts",
    "html_url": "https://github.com/smartcontracts",
    "followers_url": "https://api.github.com/users/smartcontracts/followers",
    "following_url": "https://api.github.com/users/smartcontracts/following{/other_user}",
    "gists_url": "https://api.github.com/users/smartcontracts/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/smartcontracts/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/smartcontracts/subscriptions",
    "organizations_url": "https://api.github.com/users/smartcontracts/orgs",
    "repos_url": "https://api.github.com/users/smartcontracts/repos",
    "events_url": "https://api.github.com/users/smartcontracts/events{/privacy}",
    "received_events_url": "https://api.github.com/users/smartcontracts/received_events",
    "type": "User",
    "site_admin": false
  },
  "assignees": [
    {
      "login": "smartcontracts",
      "id": 14298799,
      "node_id": "MDQ6VXNlcjE0Mjk4Nzk5",
      "avatar_url": "https://avatars.githubusercontent.com/u/14298799?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/smartcontracts",
      "html_url": "https://github.com/smartcontracts",
      "followers_url": "https://api.github.com/users/smartcontracts/followers",
      "following_url": "https://api.github.com/users/smartcontracts/following{/other_user}",
      "gists_url": "https://api.github.com/users/smartcontracts/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/smartcontracts/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/smartcontracts/subscriptions",
      "organizations_url": "https://api.github.com/users/smartcontracts/orgs",
      "repos_url": "https://api.github.com/users/smartcontracts/repos",
      "events_url": "https://api.github.com/users/smartcontracts/events{/privacy}",
      "received_events_url": "https://api.github.com/users/smartcontracts/received_events",
      "type": "User",
      "site_admin": false
    }
  ],
  "milestone": null,
  "comments": 1,
  "created_at": "2021-04-19T20:48:31Z",
  "updated_at": "2021-05-10T21:43:03Z",
  "closed_at": "2021-05-10T21:43:03Z",
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "<!--\r\nNeed help?\r\nRefer to our contributing guidelines for additional information about making a good issue:\r\nhttps://github.com/ethereum-optimism/.github/blob/master/CONTRIBUTING.md\r\n-->\r\n\r\n**Is your feature request related to a problem? Please describe.**\r\nWe currently do not have any way (other than regenesis) to upgrade our L2 contracts! This is no good as regenesis wipes historical transactions & requires coordination with everyone running nodes. Instead we need a way to cleanly upgrade our contracts that enables minimal downtime, multi-party coordination, and max simplicity.\r\n\r\n**Describe the solution you'd like**\r\nImplement automated OVM self upgrades. See a larger exploration of this topic here: https://www.notion.so/optimismpbc/Project-OVM-Upgradability-a0f2298a5aba469ea5749d6feb1aae3e\r\n\r\n_A simplified example flow for L2 upgrades here look like this:_\r\n1. Make change to our predeploys in monorepo\r\n2. Run the `deployer` (aka `chugsplash`). This will..\r\n  - Generate a deployment script with all code & state that we want in the deployment based on the deployment config\r\n  - Generate a commitment to the deployment \r\n  - Everyone signs a multi-sig which approves the deployment based on the generated commitment\r\n  - The commitment is deposited into L2 from L1\r\n  - Pause transaction ingestion in L2Geth\r\n  - On L2 the upgrader contract calls `setCode` and `setStorage` based on the information in the commitment.\r\n  - Resume transaction ingestion in L2Geth / in the ExecutionManager now that the upgrade has completed.\r\n3. Celebrate because our upgrades are automated!\r\n\r\nTODO:\r\n\r\n- [ ] Add an L2 predeploy `Upgrader` which is authenticated to call `setCode` and `setStorage`\r\n- [ ] Update L2Geth to support `setCode`\r\n- [ ] Write `UpgradeExecutor` contract for L2 that calls the `Upgrader` contract based on the deployment commitment that was deposited.\r\n- [ ] Implement `deployer` (aka `chugsplash`)\r\n  - [ ] Add deployment script generator which generates a deployment  script based on the deploy config\r\n  - [ ] Add L1 `UpgradeExecutor` which will just execute an `enqueue` which initiates the L2 deployment (which will be executed through the L2 `UpgradeExecutor`)\r\n  - [ ] Add L1 / L2 deployment executor JS code which, based on a deployment script, executes the deployment if the deployment has been authorized / initiated.\r\n  - [ ] Perform an L2 upgrade using this full system!\r\n- [ ] Update infra & `l2geth` to ensure upgrades are fully automated & no transactions are sent during an upgrade.\r\n    - Should update that status page to `UPGRADE IN PROGRESS` or something like that.\r\n- [ ] Ensure it is possible to add `env` vars which set the environment specific variables like `FRUAD_PROOF_WINDOW` & `SEQUENCER_ADDRESS`.\r\n\r\n### Note on status quo deployment configuration\r\nOur current deployment system splits out deployments into 2 configurations: \r\n1) Deployment configuration -- [deploy files](https://github.com/ethereum-optimism/optimism/tree/master/packages/contracts/deploy) which define the default deployment one would perform. ADDITIONALLY these files make use of environment variables passed in through `process.env`\r\n2) Environment configuration -- When we update the contracts or the deployment script, we tag a new release which results in a final infrastructure config which looks similar to this: `kovan.json` - `{ image: 'v0.2.0', env: { 'FRUAD_PROOF_WINDOW': 100, ... }}` (note I used json because it's easy to write a single line example)\r\n",
  "closed_by": {
    "login": "tynes",
    "id": 6626818,
    "node_id": "MDQ6VXNlcjY2MjY4MTg=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6626818?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tynes",
    "html_url": "https://github.com/tynes",
    "followers_url": "https://api.github.com/users/tynes/followers",
    "following_url": "https://api.github.com/users/tynes/following{/other_user}",
    "gists_url": "https://api.github.com/users/tynes/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tynes/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tynes/subscriptions",
    "organizations_url": "https://api.github.com/users/tynes/orgs",
    "repos_url": "https://api.github.com/users/tynes/repos",
    "events_url": "https://api.github.com/users/tynes/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tynes/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum-optimism/optimism/issues/498/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum-optimism/optimism/issues/498/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum-optimism/optimism/issues/comments/827832391",
    "html_url": "https://github.com/ethereum-optimism/optimism/issues/498#issuecomment-827832391",
    "issue_url": "https://api.github.com/repos/ethereum-optimism/optimism/issues/498",
    "id": 827832391,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgyNzgzMjM5MQ==",
    "user": {
      "login": "karlfloersch",
      "id": 706123,
      "node_id": "MDQ6VXNlcjcwNjEyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/706123?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/karlfloersch",
      "html_url": "https://github.com/karlfloersch",
      "followers_url": "https://api.github.com/users/karlfloersch/followers",
      "following_url": "https://api.github.com/users/karlfloersch/following{/other_user}",
      "gists_url": "https://api.github.com/users/karlfloersch/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/karlfloersch/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/karlfloersch/subscriptions",
      "organizations_url": "https://api.github.com/users/karlfloersch/orgs",
      "repos_url": "https://api.github.com/users/karlfloersch/repos",
      "events_url": "https://api.github.com/users/karlfloersch/events{/privacy}",
      "received_events_url": "https://api.github.com/users/karlfloersch/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-04-27T18:41:52Z",
    "updated_at": "2021-04-27T18:49:45Z",
    "author_association": "CONTRIBUTOR",
    "body": "TODO:\r\n- L2\r\n  - Update all contracts to not have constructors\r\n  - Add merkle tree / verification to the deployment manager\r\n  - Merkle tree in off-chain logic\r\n  - Integration test L2 set code and set storage (Ben)\r\n  - Halt logic / set system status\r\n  - Consider adding `cancelDeployment` / `updateDeployment`\r\n  - Rebasing the original chugsplash PR - https://github.com/ethereum-optimism/optimism/pull/469\r\n- L1\r\n  - Update all contracts to not have constructors \r\n  - Update unit tests to use smoddit \r\n\r\nKarl: Write up and implement the deployment infrastructure process \r\nKelvin: Open new PR based on release candidate branch, that implements the chugsplash infra. Coordinate with Ben on how to integration test",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum-optimism/optimism/issues/comments/827832391/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
