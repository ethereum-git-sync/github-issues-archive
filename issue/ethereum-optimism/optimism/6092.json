{
  "url": "https://api.github.com/repos/ethereum-optimism/optimism/issues/6092",
  "repository_url": "https://api.github.com/repos/ethereum-optimism/optimism",
  "labels_url": "https://api.github.com/repos/ethereum-optimism/optimism/issues/6092/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum-optimism/optimism/issues/6092/comments",
  "events_url": "https://api.github.com/repos/ethereum-optimism/optimism/issues/6092/events",
  "html_url": "https://github.com/ethereum-optimism/optimism/issues/6092",
  "id": 1767016731,
  "node_id": "I_kwDODjvEJM5pUokb",
  "number": 6092,
  "title": "op-node: unsafeL2Payloads blocks when receiving a block prior to unsafeL2Head",
  "user": {
    "login": "Kelvyne",
    "id": 8125532,
    "node_id": "MDQ6VXNlcjgxMjU1MzI=",
    "avatar_url": "https://avatars.githubusercontent.com/u/8125532?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/Kelvyne",
    "html_url": "https://github.com/Kelvyne",
    "followers_url": "https://api.github.com/users/Kelvyne/followers",
    "following_url": "https://api.github.com/users/Kelvyne/following{/other_user}",
    "gists_url": "https://api.github.com/users/Kelvyne/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/Kelvyne/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/Kelvyne/subscriptions",
    "organizations_url": "https://api.github.com/users/Kelvyne/orgs",
    "repos_url": "https://api.github.com/users/Kelvyne/repos",
    "events_url": "https://api.github.com/users/Kelvyne/events{/privacy}",
    "received_events_url": "https://api.github.com/users/Kelvyne/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 2,
  "created_at": "2023-06-21T08:06:51Z",
  "updated_at": "2023-07-19T04:49:33Z",
  "closed_at": "2023-07-19T04:49:33Z",
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "**Describe the bug**\r\nWhen activating the unsafeL2Payload queue, op-node stops processing the queue if a payload is older than the rollup's unsafeL2Head.\r\n\r\n**To Reproduce**\r\n\r\nIt happens more frequently when the batches are pushed slower. \r\n\r\n**Expected behavior**\r\n\r\nI'd expect the payload to be dropped and op-node would continue processing the queue\r\n\r\n**System Specs:**\r\n - OS: Mac M1 inside Docker\r\n - Package Version (or commit hash): 62c7f3b05a70027b30054d4c8974f44000606fb7\r\n\r\n**Additional context**\r\n\r\nA way I found to fix this issue is to pop these payloads when processing the queue. I don't know if there is bad side-effects from this diff.\r\n\r\n```dif\r\ndiff --git a/op-node/rollup/derive/engine_queue.go b/op-node/rollup/derive/engine_queue.go\r\nindex 6f6c2fa5e..0e5f67ac3 100644\r\n--- a/op-node/rollup/derive/engine_queue.go\r\n+++ b/op-node/rollup/derive/engine_queue.go\r\n@@ -428,6 +428,11 @@ func (eq *EngineQueue) tryNextUnsafePayload(ctx context.Context) error {\r\n \t\t\teq.log.Info(\"skipping unsafe payload, since it does not build onto the existing unsafe chain\", \"safe\", eq.safeHead.ID(), \"unsafe\", first.ID(), \"payload\", first.ID())\r\n \t\t\teq.unsafePayloads.Pop()\r\n \t\t}\r\n+\r\n+    if uint64(first.BlockNumber) <= eq.unsafeHead.Number {\r\n+      eq.log.Info(\"skipping unsafe payload, since it is older than unsafe head\", \"unsafe\", eq.unsafeHead.ID(), \"unsafe_payload\", first.ID())\r\n+      eq.unsafePayloads.Pop()\r\n+    }\r\n \t\treturn io.EOF // time to go to next stage if we cannot process the first unsafe payload\r\n \t}\r\n```\r\nI would love to submit a PR if this is the way to go.",
  "closed_by": {
    "login": "ajsutton",
    "id": 72675,
    "node_id": "MDQ6VXNlcjcyNjc1",
    "avatar_url": "https://avatars.githubusercontent.com/u/72675?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/ajsutton",
    "html_url": "https://github.com/ajsutton",
    "followers_url": "https://api.github.com/users/ajsutton/followers",
    "following_url": "https://api.github.com/users/ajsutton/following{/other_user}",
    "gists_url": "https://api.github.com/users/ajsutton/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/ajsutton/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/ajsutton/subscriptions",
    "organizations_url": "https://api.github.com/users/ajsutton/orgs",
    "repos_url": "https://api.github.com/users/ajsutton/repos",
    "events_url": "https://api.github.com/users/ajsutton/events{/privacy}",
    "received_events_url": "https://api.github.com/users/ajsutton/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum-optimism/optimism/issues/6092/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum-optimism/optimism/issues/6092/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum-optimism/optimism/issues/comments/1631712957",
    "html_url": "https://github.com/ethereum-optimism/optimism/issues/6092#issuecomment-1631712957",
    "issue_url": "https://api.github.com/repos/ethereum-optimism/optimism/issues/6092",
    "id": 1631712957,
    "node_id": "IC_kwDODjvEJM5hQfa9",
    "user": {
      "login": "ajsutton",
      "id": 72675,
      "node_id": "MDQ6VXNlcjcyNjc1",
      "avatar_url": "https://avatars.githubusercontent.com/u/72675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajsutton",
      "html_url": "https://github.com/ajsutton",
      "followers_url": "https://api.github.com/users/ajsutton/followers",
      "following_url": "https://api.github.com/users/ajsutton/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajsutton/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajsutton/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajsutton/subscriptions",
      "organizations_url": "https://api.github.com/users/ajsutton/orgs",
      "repos_url": "https://api.github.com/users/ajsutton/repos",
      "events_url": "https://api.github.com/users/ajsutton/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajsutton/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-07-12T01:22:10Z",
    "updated_at": "2023-07-12T01:22:10Z",
    "author_association": "CONTRIBUTOR",
    "body": "@Kelvyne Apologies for the delay in responding to this. I agree this appears to be an issue - having p2p alt sync enabled can also trigger this I think because it's trying to backfill blocks and so there's multiple threads trying to fetch and queue blocks so could wind up re-adding a block to the queue that has already been imported.\r\n\r\nAnd I think your fix makes sense as well. The unsafe head is strictly equal to or later than the safe head so we could just replace the safe head check with this unsafe check.\r\nWe'd also need to add a test for this case.\r\n\r\nIf you're still keen to submit a PR for this it would be appreciated and feel free to tag me to review.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum-optimism/optimism/issues/comments/1631712957/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum-optimism/optimism/issues/comments/1632187386",
    "html_url": "https://github.com/ethereum-optimism/optimism/issues/6092#issuecomment-1632187386",
    "issue_url": "https://api.github.com/repos/ethereum-optimism/optimism/issues/6092",
    "id": 1632187386,
    "node_id": "IC_kwDODjvEJM5hSTP6",
    "user": {
      "login": "Kelvyne",
      "id": 8125532,
      "node_id": "MDQ6VXNlcjgxMjU1MzI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8125532?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Kelvyne",
      "html_url": "https://github.com/Kelvyne",
      "followers_url": "https://api.github.com/users/Kelvyne/followers",
      "following_url": "https://api.github.com/users/Kelvyne/following{/other_user}",
      "gists_url": "https://api.github.com/users/Kelvyne/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Kelvyne/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Kelvyne/subscriptions",
      "organizations_url": "https://api.github.com/users/Kelvyne/orgs",
      "repos_url": "https://api.github.com/users/Kelvyne/repos",
      "events_url": "https://api.github.com/users/Kelvyne/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Kelvyne/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-07-12T09:42:07Z",
    "updated_at": "2023-07-12T09:42:07Z",
    "author_association": "CONTRIBUTOR",
    "body": "> @Kelvyne Apologies for the delay in responding to this. I agree this appears to be an issue - having p2p alt sync enabled can also trigger this I think because it's trying to backfill blocks and so there's multiple threads trying to fetch and queue blocks so could wind up re-adding a block to the queue that has already been imported.\r\n> \r\n> And I think your fix makes sense as well. The unsafe head is strictly equal to or later than the safe head so we could just replace the safe head check with this unsafe check. We'd also need to add a test for this case.\r\n> \r\n> If you're still keen to submit a PR for this it would be appreciated and feel free to tag me to review.\r\n\r\nThank you for the answer, i'll work on a PR asap :)",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum-optimism/optimism/issues/comments/1632187386/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
