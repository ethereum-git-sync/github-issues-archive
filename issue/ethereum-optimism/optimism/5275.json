{
  "url": "https://api.github.com/repos/ethereum-optimism/optimism/issues/5275",
  "repository_url": "https://api.github.com/repos/ethereum-optimism/optimism",
  "labels_url": "https://api.github.com/repos/ethereum-optimism/optimism/issues/5275/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum-optimism/optimism/issues/5275/comments",
  "events_url": "https://api.github.com/repos/ethereum-optimism/optimism/issues/5275/events",
  "html_url": "https://github.com/ethereum-optimism/optimism/issues/5275",
  "id": 1643717797,
  "node_id": "I_kwDODjvEJM5h-SSl",
  "number": 5275,
  "title": "Propose a slower L2 compared to L1",
  "user": {
    "login": "egonspace",
    "id": 24305489,
    "node_id": "MDQ6VXNlcjI0MzA1NDg5",
    "avatar_url": "https://avatars.githubusercontent.com/u/24305489?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/egonspace",
    "html_url": "https://github.com/egonspace",
    "followers_url": "https://api.github.com/users/egonspace/followers",
    "following_url": "https://api.github.com/users/egonspace/following{/other_user}",
    "gists_url": "https://api.github.com/users/egonspace/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/egonspace/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/egonspace/subscriptions",
    "organizations_url": "https://api.github.com/users/egonspace/orgs",
    "repos_url": "https://api.github.com/users/egonspace/repos",
    "events_url": "https://api.github.com/users/egonspace/events{/privacy}",
    "received_events_url": "https://api.github.com/users/egonspace/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 2907832555,
      "node_id": "MDU6TGFiZWwyOTA3ODMyNTU1",
      "url": "https://api.github.com/repos/ethereum-optimism/optimism/labels/C-feature-request",
      "name": "C-feature-request",
      "color": "C5DEF5",
      "default": false,
      "description": "Category: A feature request."
    },
    {
      "id": 5251919362,
      "node_id": "LA_kwDODjvEJM8AAAABOQnuAg",
      "url": "https://api.github.com/repos/ethereum-optimism/optimism/labels/C-bedrock",
      "name": "C-bedrock",
      "color": "C5DEF5",
      "default": false,
      "description": "Category: Something about Bedrock"
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 3,
  "created_at": "2023-03-28T11:10:45Z",
  "updated_at": "2023-04-04T06:48:58Z",
  "closed_at": null,
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "<!--\r\nNeed help?\r\nRefer to our contributing guidelines for additional information about making a good issue:\r\nhttps://github.com/ethereum-optimism/.github/blob/master/CONTRIBUTING.md\r\n-->\r\n\r\n**Is your feature request related to a problem? Please describe.**\r\nA clear and concise description of what the problem is. Ex. I'm always frustrated when [...]\r\n\r\nHello. We are a team looking to build our own L2 chain using Optimism. The biggest obstacle in building L2 right now is the fee cost of the Batcher. So, we are considering an L3 that looks at L2. The problem is that since the block time of L2(Optimism mainnet or Base testnet? mainnet?) is 2 seconds, L3 can only have a maximum block time of 2 seconds as well, which means the cost of L3's batcher is not insignificant. What we want is to build an L3 that is slower than the L2 block time. For example, we would like to build an L3 with a 12-second block time on an L2 with a 2-second block time. It seems structurally possible, but the current implementation of Optimism seems to make it impossible. If such a proposal is valid, our team would like to try implementing it. Are you willing to include such a proposal in the Optimism code?\r\n\r\nI apologize in advance if this sounds completely strange as I am still a beginner with Optimism.\r\n\r\n**Describe the solution you'd like**\r\nA clear and concise description of what you want to happen.\r\n\r\n**Describe alternatives you've considered**\r\nA clear and concise description of any alternative solutions or features you've considered.\r\n\r\n**Additional context**\r\nAdd any other context or screenshots about the feature request here.\r\n",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/ethereum-optimism/optimism/issues/5275/reactions",
    "total_count": 1,
    "+1": 1,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum-optimism/optimism/issues/5275/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/ethereum-optimism/optimism/issues/comments/1489128304",
    "html_url": "https://github.com/ethereum-optimism/optimism/issues/5275#issuecomment-1489128304",
    "issue_url": "https://api.github.com/repos/ethereum-optimism/optimism/issues/5275",
    "id": 1489128304,
    "node_id": "IC_kwDODjvEJM5Ywktw",
    "user": {
      "login": "smartcontracts",
      "id": 14298799,
      "node_id": "MDQ6VXNlcjE0Mjk4Nzk5",
      "avatar_url": "https://avatars.githubusercontent.com/u/14298799?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/smartcontracts",
      "html_url": "https://github.com/smartcontracts",
      "followers_url": "https://api.github.com/users/smartcontracts/followers",
      "following_url": "https://api.github.com/users/smartcontracts/following{/other_user}",
      "gists_url": "https://api.github.com/users/smartcontracts/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/smartcontracts/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/smartcontracts/subscriptions",
      "organizations_url": "https://api.github.com/users/smartcontracts/orgs",
      "repos_url": "https://api.github.com/users/smartcontracts/repos",
      "events_url": "https://api.github.com/users/smartcontracts/events{/privacy}",
      "received_events_url": "https://api.github.com/users/smartcontracts/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-03-29T18:50:31Z",
    "updated_at": "2023-03-29T18:50:31Z",
    "author_association": "CONTRIBUTOR",
    "body": "Some thoughts on this:\r\n1. Generally I think this is a very reasonable request.\r\n2. I'm not sure how difficult it would be to implement, cc @protolambda for that.\r\n3. We might also be able to come up with a better encoding for empty blocks, also cc @protolambda.\r\n4. You could start by reducing the batch submission rate in the `op-batcher`, might help a bit.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum-optimism/optimism/issues/comments/1489128304/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum-optimism/optimism/issues/comments/1489768238",
    "html_url": "https://github.com/ethereum-optimism/optimism/issues/5275#issuecomment-1489768238",
    "issue_url": "https://api.github.com/repos/ethereum-optimism/optimism/issues/5275",
    "id": 1489768238,
    "node_id": "IC_kwDODjvEJM5YzA8u",
    "user": {
      "login": "egonspace",
      "id": 24305489,
      "node_id": "MDQ6VXNlcjI0MzA1NDg5",
      "avatar_url": "https://avatars.githubusercontent.com/u/24305489?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/egonspace",
      "html_url": "https://github.com/egonspace",
      "followers_url": "https://api.github.com/users/egonspace/followers",
      "following_url": "https://api.github.com/users/egonspace/following{/other_user}",
      "gists_url": "https://api.github.com/users/egonspace/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/egonspace/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/egonspace/subscriptions",
      "organizations_url": "https://api.github.com/users/egonspace/orgs",
      "repos_url": "https://api.github.com/users/egonspace/repos",
      "events_url": "https://api.github.com/users/egonspace/events{/privacy}",
      "received_events_url": "https://api.github.com/users/egonspace/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-03-30T06:32:03Z",
    "updated_at": "2023-04-04T06:48:58Z",
    "author_association": "NONE",
    "body": "Thank you for your positive response.\r\n\r\nRegarding your opinion of 4, I have a different thought. The batch submission rate does not seem to have a significant impact on fee cost. Delaying the frequency results in more batch bodies accumulating. The cost of a batch is proportional to the number of transactions accumulated in L2, and it seems unrelated to the rate of batches.\r\n\r\n~If the congestion on L2 is low, I discovered that the cost of the tx updating `L1Block` contract, which is executed by default for every block, is not negligible. In other words, even if there are no user transactions in L2, it doesn't create an empty block; instead, it includes at least one transaction, which is the `L1Block` update transaction. I cannot be assured if this is an important factor worth paying for. I am analyzing the effects of delaying the update frequency or updating it in bulk.~\r\n(While looking at the code, I discovered that the L1Block update tx is not included in the block transaction list, so I think you can disregard the opinion mentioned above.)\r\n\r\nAny comments on this would be appreciated.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum-optimism/optimism/issues/comments/1489768238/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum-optimism/optimism/issues/comments/1495433768",
    "html_url": "https://github.com/ethereum-optimism/optimism/issues/5275#issuecomment-1495433768",
    "issue_url": "https://api.github.com/repos/ethereum-optimism/optimism/issues/5275",
    "id": 1495433768,
    "node_id": "IC_kwDODjvEJM5ZIoIo",
    "user": {
      "login": "egonspace",
      "id": 24305489,
      "node_id": "MDQ6VXNlcjI0MzA1NDg5",
      "avatar_url": "https://avatars.githubusercontent.com/u/24305489?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/egonspace",
      "html_url": "https://github.com/egonspace",
      "followers_url": "https://api.github.com/users/egonspace/followers",
      "following_url": "https://api.github.com/users/egonspace/following{/other_user}",
      "gists_url": "https://api.github.com/users/egonspace/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/egonspace/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/egonspace/subscriptions",
      "organizations_url": "https://api.github.com/users/egonspace/orgs",
      "repos_url": "https://api.github.com/users/egonspace/repos",
      "events_url": "https://api.github.com/users/egonspace/events{/privacy}",
      "received_events_url": "https://api.github.com/users/egonspace/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-04-04T06:44:48Z",
    "updated_at": "2023-04-04T06:44:48Z",
    "author_association": "NONE",
    "body": " I think we need to slightly modify the concept for this. Currently, the op-node assumes at least one L2 block is created per epoch. It seems that too many changes would be needed to modify this concept, so I've been considering an alternative. What if we don't break the assumption that at least one L2 block is created per epoch, but instead break the assumption that the `L1 block number = the epoch number`? In other words, we would use a subset of L1 instead of the entire L1 set. For example, if we only use L1 blocks where (L1 block number % n) = 0, there wouldn't be a need to modify many concepts in the op-node. By managing the subset set of L1 in the `L1 Traversal` stage, and adding the `epoch parent hash` to the block instead of using the original `parent hash` included in the block, wouldn't it be possible without major conceptual changes?\r\nHowever, since a batch can be uploaded to any L1 block, it seems that we still need to read all L1 blocks during the derivation process.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum-optimism/optimism/issues/comments/1495433768/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
