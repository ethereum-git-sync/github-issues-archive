{
  "url": "https://api.github.com/repos/ethereum-optimism/optimism/issues/289",
  "repository_url": "https://api.github.com/repos/ethereum-optimism/optimism",
  "labels_url": "https://api.github.com/repos/ethereum-optimism/optimism/issues/289/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum-optimism/optimism/issues/289/comments",
  "events_url": "https://api.github.com/repos/ethereum-optimism/optimism/issues/289/events",
  "html_url": "https://github.com/ethereum-optimism/optimism/issues/289",
  "id": 709640177,
  "node_id": "MDU6SXNzdWU3MDk2NDAxNzc=",
  "number": 289,
  "title": "Bug :: Oversized transaction error",
  "user": {
    "login": "karlfloersch",
    "id": 706123,
    "node_id": "MDQ6VXNlcjcwNjEyMw==",
    "avatar_url": "https://avatars.githubusercontent.com/u/706123?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/karlfloersch",
    "html_url": "https://github.com/karlfloersch",
    "followers_url": "https://api.github.com/users/karlfloersch/followers",
    "following_url": "https://api.github.com/users/karlfloersch/following{/other_user}",
    "gists_url": "https://api.github.com/users/karlfloersch/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/karlfloersch/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/karlfloersch/subscriptions",
    "organizations_url": "https://api.github.com/users/karlfloersch/orgs",
    "repos_url": "https://api.github.com/users/karlfloersch/repos",
    "events_url": "https://api.github.com/users/karlfloersch/events{/privacy}",
    "received_events_url": "https://api.github.com/users/karlfloersch/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 2,
  "created_at": "2020-09-27T00:49:11Z",
  "updated_at": "2020-10-01T17:33:26Z",
  "closed_at": "2020-10-01T17:33:26Z",
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "**Describe the bug**\r\nWe often go over the size limit of transactions when submitting batches. This causes our transactions to fail and generally everyone has a bad day.\r\n\r\n**Steps to reproduce**\r\nSteps to reproduce the behavior:\r\n1. Set the transaction calldata size to a number above 132KB (even slightly below this number)\r\n2. Run the full system\r\n3. Observe errors submitting batches\r\n\r\n**Expected behavior**\r\nWe should never submit transactions above the maximum size.\r\n\r\n**Solution**\r\n\r\n### Work-around\r\nReduce the Max L2 Tx calldata size for a batch:\r\n\r\n1. Update the l2_geth_subscriber 's task definition to have a lower CANONICAL_CHAIN_BATCH_MAX_CALLDATA_BYTES value (right now it's 90,000)\r\n2. Update the ECS service to reference the new task definition and restart the ECS task so it picks up the new config (stop it, and it'll restart itself)\r\n3. Run this query to delete created but unsubmitted batches so that they will be rebuilt to fit the lower size limit:\r\n\r\n```\r\nBEGIN;\r\n\r\nUPDATE l2_tx_output\r\nSET \r\n\tcanonical_chain_batch_number = NULL,\r\n\tcanonical_chain_batch_index = NULL\r\nWHERE canonical_chain_batch_number >= *batch number that is erroring*;\r\n\r\nDELETE FROM canonical_chain_batch\r\nWHERE batch_number >= *batch number that is erroring*;\r\n\r\nCOMMIT;\r\n```\r\n\r\n### Solution\r\nSince it _should_ be predictable, accurately calculate the total transaction bytes for the L1 rollup tx (including all the rolled up L2 Txs' bytes) and create batches such that _this_ number of bytes is less than or equal to the `CANONICAL_CHAIN_BATCH_MAX_CALLDATA_BYTES` instead of simply making sure that all of the L2 txs being rolled up are under this number.",
  "closed_by": {
    "login": "willmeister",
    "id": 1787541,
    "node_id": "MDQ6VXNlcjE3ODc1NDE=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1787541?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/willmeister",
    "html_url": "https://github.com/willmeister",
    "followers_url": "https://api.github.com/users/willmeister/followers",
    "following_url": "https://api.github.com/users/willmeister/following{/other_user}",
    "gists_url": "https://api.github.com/users/willmeister/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/willmeister/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/willmeister/subscriptions",
    "organizations_url": "https://api.github.com/users/willmeister/orgs",
    "repos_url": "https://api.github.com/users/willmeister/repos",
    "events_url": "https://api.github.com/users/willmeister/events{/privacy}",
    "received_events_url": "https://api.github.com/users/willmeister/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum-optimism/optimism/issues/289/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum-optimism/optimism/issues/289/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum-optimism/optimism/issues/comments/701525269",
    "html_url": "https://github.com/ethereum-optimism/optimism/issues/289#issuecomment-701525269",
    "issue_url": "https://api.github.com/repos/ethereum-optimism/optimism/issues/289",
    "id": 701525269,
    "node_id": "MDEyOklzc3VlQ29tbWVudDcwMTUyNTI2OQ==",
    "user": {
      "login": "willmeister",
      "id": 1787541,
      "node_id": "MDQ6VXNlcjE3ODc1NDE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1787541?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/willmeister",
      "html_url": "https://github.com/willmeister",
      "followers_url": "https://api.github.com/users/willmeister/followers",
      "following_url": "https://api.github.com/users/willmeister/following{/other_user}",
      "gists_url": "https://api.github.com/users/willmeister/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/willmeister/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/willmeister/subscriptions",
      "organizations_url": "https://api.github.com/users/willmeister/orgs",
      "repos_url": "https://api.github.com/users/willmeister/repos",
      "events_url": "https://api.github.com/users/willmeister/events{/privacy}",
      "received_events_url": "https://api.github.com/users/willmeister/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-09-30T17:12:53Z",
    "updated_at": "2020-09-30T18:06:13Z",
    "author_association": "NONE",
    "body": "Figured out a few different issues with the `CanonicalTransactionChain.appendSequencerBatch(bytes[] memory _txBatch, uint _timestamp, uint _blockNumber, uint _startsAtTxIndex)` Oversized Data issue. Sharing here for visibility + sanity checking.\r\n\r\n## Current Approach (that has this issue)\r\n\r\n1. Configure Max L2 Rollup Transactions' Bytes as env var\r\na. Notably, this ignores the L1 tx containing these txs, and its encoding to call `appendSequencerBatch(...)`\r\n1. Limit batch size by enforcing SUM(L2 rollup tx calldata bytes + standard non-calldata L2 tx overhead bytes) <= Max L2 Rollup Txs Bytes\r\n\r\n## Issues with approach causing underestimation\r\n1. L1 tx has 164 bytes of static calldata overhead \r\na. Method ID - 4 bytes\r\na. _txBatch `bytes[]` param start index - 32 bytes\r\na. _timestamp - 32 bytes\r\na. _blockNumber - 32 bytes\r\na. _startsAtIndex - 32 bytes\r\na. number of `bytes` within `_txBatch` - 32 bytes\r\n1. L1 tx (containing rolled up L2 txs in its calldata) has 64 bytes of overhead for each L2 rollup tx\r\na. Each encoded `bytes` in the `_txBatch` `bytes[]` requires a `uint` for start index and `uint` for length\r\n1. Each `bytes` (L2 tx) in `_txBatch` will always be padded to the nearest multiple of 32 \r\na. e.g. 140 bytes of data takes up 160 (5*32) bytes from encoding\r\n1. L1 tx has static overhead of ~214 bytes \r\na. nonce - 32 bytes\r\na. gas price - 32 bytes\r\na. gas limit - 32 bytes\r\na. value - 32 bytes\r\na. R (signature) - 32 bytes\r\na. S (signature) - 32 bytes\r\na. V (signature) - 2 bytes (at most)\r\na. to address - 20 bytes\r\n\r\n## Curveball\r\nL1 tx will be RLP-encoded, so it will be smaller than 214 static bytes of overhead\r\n\r\nI think we should just ignore the RLP savings since we'll only slightly over-count, and that'll give us a bit of room for error. Thoughts?\r\n\r\n## Approach\r\nGoing to add logic to account for all of the above. Please let me know if you see anything I missed",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum-optimism/optimism/issues/comments/701525269/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum-optimism/optimism/issues/comments/701832388",
    "html_url": "https://github.com/ethereum-optimism/optimism/issues/289#issuecomment-701832388",
    "issue_url": "https://api.github.com/repos/ethereum-optimism/optimism/issues/289",
    "id": 701832388,
    "node_id": "MDEyOklzc3VlQ29tbWVudDcwMTgzMjM4OA==",
    "user": {
      "login": "karlfloersch",
      "id": 706123,
      "node_id": "MDQ6VXNlcjcwNjEyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/706123?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/karlfloersch",
      "html_url": "https://github.com/karlfloersch",
      "followers_url": "https://api.github.com/users/karlfloersch/followers",
      "following_url": "https://api.github.com/users/karlfloersch/following{/other_user}",
      "gists_url": "https://api.github.com/users/karlfloersch/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/karlfloersch/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/karlfloersch/subscriptions",
      "organizations_url": "https://api.github.com/users/karlfloersch/orgs",
      "repos_url": "https://api.github.com/users/karlfloersch/repos",
      "events_url": "https://api.github.com/users/karlfloersch/events{/privacy}",
      "received_events_url": "https://api.github.com/users/karlfloersch/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-10-01T03:21:03Z",
    "updated_at": "2020-10-01T03:21:13Z",
    "author_association": "CONTRIBUTOR",
    "body": "Wow just saw this & this analysis looks awesome! Freaking thorough!  \r\n\r\n> Each bytes (L2 tx) in _txBatch will always be padded to the nearest multiple of 32\r\n\r\nOh wow great catch & totally true but very easy to forget about... That's annoying!\r\n\r\n> I think we should just ignore the RLP savings since we'll only slightly over-count, and that'll give us a bit of room for error. Thoughts?\r\n\r\nDefinitely think that this seems like a sensible approach. There's just so much headache that we will have by under-estimating the bytes that it doesn't make sense for us to sweat submitting slightly suboptimal batches. In the long term we can resist this component when we really want to penny pinch, but at the moment I think you've definitely got the right idea.\r\n\r\nReviewing the PR now",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum-optimism/optimism/issues/comments/701832388/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
