{
  "url": "https://api.github.com/repos/ethereum-optimism/optimism/issues/980",
  "repository_url": "https://api.github.com/repos/ethereum-optimism/optimism",
  "labels_url": "https://api.github.com/repos/ethereum-optimism/optimism/issues/980/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum-optimism/optimism/issues/980/comments",
  "events_url": "https://api.github.com/repos/ethereum-optimism/optimism/issues/980/events",
  "html_url": "https://github.com/ethereum-optimism/optimism/issues/980",
  "id": 905609463,
  "node_id": "MDU6SXNzdWU5MDU2MDk0NjM=",
  "number": 980,
  "title": "Check Sequencer for specific event data emitted by an OVM contract",
  "user": {
    "login": "platocrat",
    "id": 37757724,
    "node_id": "MDQ6VXNlcjM3NzU3NzI0",
    "avatar_url": "https://avatars.githubusercontent.com/u/37757724?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/platocrat",
    "html_url": "https://github.com/platocrat",
    "followers_url": "https://api.github.com/users/platocrat/followers",
    "following_url": "https://api.github.com/users/platocrat/following{/other_user}",
    "gists_url": "https://api.github.com/users/platocrat/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/platocrat/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/platocrat/subscriptions",
    "organizations_url": "https://api.github.com/users/platocrat/orgs",
    "repos_url": "https://api.github.com/users/platocrat/repos",
    "events_url": "https://api.github.com/users/platocrat/events{/privacy}",
    "received_events_url": "https://api.github.com/users/platocrat/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 2907832604,
      "node_id": "MDU6TGFiZWwyOTA3ODMyNjA0",
      "url": "https://api.github.com/repos/ethereum-optimism/optimism/labels/C-question",
      "name": "C-question",
      "color": "C5DEF5",
      "default": false,
      "description": "User questions that are neither feature requests nor bug reports"
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 3,
  "created_at": "2021-05-28T15:28:53Z",
  "updated_at": "2021-05-28T18:26:50Z",
  "closed_at": "2021-05-28T16:25:18Z",
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "<!--\r\nNeed help?\r\nRefer to our contributing guidelines for additional information about making a good issue:\r\nhttps://github.com/ethereum-optimism/.github/blob/master/CONTRIBUTING.md\r\n-->\r\n\r\n\r\n**Question from @barrasso**\r\n1. How do you properly check the sequencer for specific event data emitted by a contract on the OVM?\r\n2. How do you verify that event data is legit?\r\n3. What are the potential attack vectors of this approach?\r\n\r\nHere's an summary of the intent of these questions:\r\n> To summarize, what we're trying to do is skip the withdrawal period by verifying for ourselves that a given L2 transaction is valid and then reporting it to L1 using oracles. So to do this we'd run an OVM node and watch the state of the chain using an event listener. It'd listen for a specific event reported by the Sequencer and push the event data to the Oracle network. \r\n>\r\n> In this scheme, we are trusting that the Sequencer is reporting the correct state, right? What prevents the Sequencer from misbehaving and including bad state?  I know it's run by Optimism now with plans to decentralize, but I am still trying to wrap my head around the trust/incentives model here.\r\n>\r\n> We have some ideas for risk mitigation for this anyways like withdrawal limits, time locks, collateralized insurance, dispute resolutions, etc. but I wanted to get an idea of how feasible this sounds from the Optimism side of things.\r\n\r\n\r\n**Additional Context**\r\nThese questions were surfaced through my Discord DMs",
  "closed_by": {
    "login": "smartcontracts",
    "id": 14298799,
    "node_id": "MDQ6VXNlcjE0Mjk4Nzk5",
    "avatar_url": "https://avatars.githubusercontent.com/u/14298799?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/smartcontracts",
    "html_url": "https://github.com/smartcontracts",
    "followers_url": "https://api.github.com/users/smartcontracts/followers",
    "following_url": "https://api.github.com/users/smartcontracts/following{/other_user}",
    "gists_url": "https://api.github.com/users/smartcontracts/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/smartcontracts/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/smartcontracts/subscriptions",
    "organizations_url": "https://api.github.com/users/smartcontracts/orgs",
    "repos_url": "https://api.github.com/users/smartcontracts/repos",
    "events_url": "https://api.github.com/users/smartcontracts/events{/privacy}",
    "received_events_url": "https://api.github.com/users/smartcontracts/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum-optimism/optimism/issues/980/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum-optimism/optimism/issues/980/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum-optimism/optimism/issues/comments/850531771",
    "html_url": "https://github.com/ethereum-optimism/optimism/issues/980#issuecomment-850531771",
    "issue_url": "https://api.github.com/repos/ethereum-optimism/optimism/issues/980",
    "id": 850531771,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg1MDUzMTc3MQ==",
    "user": {
      "login": "smartcontracts",
      "id": 14298799,
      "node_id": "MDQ6VXNlcjE0Mjk4Nzk5",
      "avatar_url": "https://avatars.githubusercontent.com/u/14298799?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/smartcontracts",
      "html_url": "https://github.com/smartcontracts",
      "followers_url": "https://api.github.com/users/smartcontracts/followers",
      "following_url": "https://api.github.com/users/smartcontracts/following{/other_user}",
      "gists_url": "https://api.github.com/users/smartcontracts/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/smartcontracts/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/smartcontracts/subscriptions",
      "organizations_url": "https://api.github.com/users/smartcontracts/orgs",
      "repos_url": "https://api.github.com/users/smartcontracts/repos",
      "events_url": "https://api.github.com/users/smartcontracts/events{/privacy}",
      "received_events_url": "https://api.github.com/users/smartcontracts/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-05-28T16:25:18Z",
    "updated_at": "2021-05-28T16:25:18Z",
    "author_association": "CONTRIBUTOR",
    "body": "This is a great question. Here's the \"reasonably detailed\" answer:\r\n\r\nYou have three main options when running an OE node:\r\n1. Run a *verifier* and only pull transaction data from L1\r\n2. Run a *replica* and only pull transaction data from the Sequencer\r\n3. Run a *verifier* but pull transaction data from the Sequencer before those transactions have been published to L1\r\n\r\nOptions (2) and (3) give you information faster because you're getting data directly from the Sequencer. However, this can be considered insecure because there's a chance that the Sequencer claims that a given transaction will be included in the system but never actually publishes that transaction to L1. \r\n\r\nIt seems like you really want (1). When you're running a *verifier*, you don't have to trust the Sequencer at all (if you don't want to). Your verifier node would compute the correct state for itself. I would highly recommend running your own verifier node for this sort of application -- otherwise you *are* trusting the Sequencer. \r\n\r\nHope this answers the question. Going to close this unless there are additional open questions!",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum-optimism/optimism/issues/comments/850531771/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum-optimism/optimism/issues/comments/850555241",
    "html_url": "https://github.com/ethereum-optimism/optimism/issues/980#issuecomment-850555241",
    "issue_url": "https://api.github.com/repos/ethereum-optimism/optimism/issues/980",
    "id": 850555241,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg1MDU1NTI0MQ==",
    "user": {
      "login": "barrasso",
      "id": 4982406,
      "node_id": "MDQ6VXNlcjQ5ODI0MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4982406?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/barrasso",
      "html_url": "https://github.com/barrasso",
      "followers_url": "https://api.github.com/users/barrasso/followers",
      "following_url": "https://api.github.com/users/barrasso/following{/other_user}",
      "gists_url": "https://api.github.com/users/barrasso/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/barrasso/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/barrasso/subscriptions",
      "organizations_url": "https://api.github.com/users/barrasso/orgs",
      "repos_url": "https://api.github.com/users/barrasso/repos",
      "events_url": "https://api.github.com/users/barrasso/events{/privacy}",
      "received_events_url": "https://api.github.com/users/barrasso/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-05-28T17:09:57Z",
    "updated_at": "2021-05-28T17:09:57Z",
    "author_association": "CONTRIBUTOR",
    "body": "Thanks @smartcontracts for the \"reasonably detailed\" answer :)\r\n\r\nJust had a few follow up questions:\r\n\r\n(1) So in order to pull this off, we'd have to run an OVM node AND a verifier node, correct? And then our event listener would be watching the verifier node for the validated transaction data? Also, is there documentation on how to run a verifier?\r\n\r\n(2) How often is transaction data published to L1?\r\n\r\n----------\r\n\r\nIf we do get data directly from the Sequencer, we accept that this might be an inherent trade-off in UX vs. Risk for the users of our system, but we are trying to understand the potential pitfalls here in order to mitigate as much as possible. \r\n\r\n> there's a chance that the Sequencer claims that a given transaction will be included in the system but never actually publishes that transaction to L1.\r\n\r\n(3) Can that chance be quantified in some sort of rough percentage? \r\n\r\n(4) Let's say we cap the fast withdrawal limit, isn't there an (optimistic) assumption that the Sequencer will behave properly for most of the time (depending on how much is at stake)? Trying to find that balance.\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum-optimism/optimism/issues/comments/850555241/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum-optimism/optimism/issues/comments/850593116",
    "html_url": "https://github.com/ethereum-optimism/optimism/issues/980#issuecomment-850593116",
    "issue_url": "https://api.github.com/repos/ethereum-optimism/optimism/issues/980",
    "id": 850593116,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg1MDU5MzExNg==",
    "user": {
      "login": "smartcontracts",
      "id": 14298799,
      "node_id": "MDQ6VXNlcjE0Mjk4Nzk5",
      "avatar_url": "https://avatars.githubusercontent.com/u/14298799?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/smartcontracts",
      "html_url": "https://github.com/smartcontracts",
      "followers_url": "https://api.github.com/users/smartcontracts/followers",
      "following_url": "https://api.github.com/users/smartcontracts/following{/other_user}",
      "gists_url": "https://api.github.com/users/smartcontracts/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/smartcontracts/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/smartcontracts/subscriptions",
      "organizations_url": "https://api.github.com/users/smartcontracts/orgs",
      "repos_url": "https://api.github.com/users/smartcontracts/repos",
      "events_url": "https://api.github.com/users/smartcontracts/events{/privacy}",
      "received_events_url": "https://api.github.com/users/smartcontracts/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-05-28T18:26:50Z",
    "updated_at": "2021-05-28T18:26:50Z",
    "author_association": "CONTRIBUTOR",
    "body": "> So in order to pull this off, we'd have to run an OVM node AND a verifier node, correct? And then our event listener would be watching the verifier node for the validated transaction data? Also, is there documentation on how to run a verifier?\r\n\r\nYou would *only* have to run the verifier node (\"verifier nodes\" are just a fancy name for OE nodes that aren't the sequencer). And then yes, your even listener would point at your own verifier node. Alternatively of course you could use a service provider like infura or alchemy if you didn't want to run your own node (but as always, this is shifting the trust over to those providers). I'm not 100% sure if the process of running a verifier node is well documented. I've asked if this is documented anywhere. If it isn't then I have a weekend project...\r\n\r\n> How often is transaction data published to L1?\r\n\r\nVery regularly, with some caveats. We have minimum number of transactions before we'll submit a batch of transactions. I'm not sure of the exact number, but because mainnet is restricted and transaction volumes are low, this can sometimes be on the order of several hours. Of course this will basically become irrelevant once more volume is introduced. I think right now we submit batches once per minute on Kovan and something like once every 15 minutes on mainnet. As volume increases, this time interval will decrease.\r\n\r\n> Can that chance be quantified in some sort of rough percentage?\r\n\r\nProbably \"pretty darn low\" -- but of course it depends on circumstance. We're working very hard to make sure this will never happen as long as we're running the Sequencer. However, we obviously can't make that same guarantee in the future when other parties will operate the Sequencer. We're working on mechanisms that will make \"Sequencer confirmations\" stronger by asking the Sequencer to sign off on transaction receipts and putting some funds at risk in the case that they do not include transactions in the order that they've promised. That would further reduce the risk of transactions not being published after being accepted by the Sequencer.\r\n\r\n> Let's say we cap the fast withdrawal limit, isn't there an (optimistic) assumption that the Sequencer will behave properly for most of the time (depending on how much is at stake)? \r\n\r\nI think it's relatively reasonable to assume the Sequencer will behave properly. However, I think that it's still worth running your own verifier node and accepting a slightly longer withdrawal period for at least the next few months while the system becomes more and more stable. Although it's unlikely, there's always the possibility of an unknown geth bug that breaks the node and causes us to lose some transaction data before those transactions have been published. We do maintain backups to (hopefully) avoid this sort of scenario but you never know.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum-optimism/optimism/issues/comments/850593116/reactions",
      "total_count": 3,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 1,
      "rocket": 1,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
