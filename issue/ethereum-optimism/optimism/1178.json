{
  "url": "https://api.github.com/repos/ethereum-optimism/optimism/issues/1178",
  "repository_url": "https://api.github.com/repos/ethereum-optimism/optimism",
  "labels_url": "https://api.github.com/repos/ethereum-optimism/optimism/issues/1178/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum-optimism/optimism/issues/1178/comments",
  "events_url": "https://api.github.com/repos/ethereum-optimism/optimism/issues/1178/events",
  "html_url": "https://github.com/ethereum-optimism/optimism/issues/1178",
  "id": 931680227,
  "node_id": "MDU6SXNzdWU5MzE2ODAyMjc=",
  "number": 1178,
  "title": "Optimize the getContractAddressAtBlock function in the DTL",
  "user": {
    "login": "smartcontracts",
    "id": 14298799,
    "node_id": "MDQ6VXNlcjE0Mjk4Nzk5",
    "avatar_url": "https://avatars.githubusercontent.com/u/14298799?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/smartcontracts",
    "html_url": "https://github.com/smartcontracts",
    "followers_url": "https://api.github.com/users/smartcontracts/followers",
    "following_url": "https://api.github.com/users/smartcontracts/following{/other_user}",
    "gists_url": "https://api.github.com/users/smartcontracts/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/smartcontracts/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/smartcontracts/subscriptions",
    "organizations_url": "https://api.github.com/users/smartcontracts/orgs",
    "repos_url": "https://api.github.com/users/smartcontracts/repos",
    "events_url": "https://api.github.com/users/smartcontracts/events{/privacy}",
    "received_events_url": "https://api.github.com/users/smartcontracts/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 2907832518,
      "node_id": "MDU6TGFiZWwyOTA3ODMyNTE4",
      "url": "https://api.github.com/repos/ethereum-optimism/optimism/labels/C-enhancement",
      "name": "C-enhancement",
      "color": "C5DEF5",
      "default": false,
      "description": "Category: A PR with an enhancement or bugfix."
    },
    {
      "id": 2907832766,
      "node_id": "MDU6TGFiZWwyOTA3ODMyNzY2",
      "url": "https://api.github.com/repos/ethereum-optimism/optimism/labels/M-dtl",
      "name": "M-dtl",
      "color": "FBCA04",
      "default": false,
      "description": "Module: data transport layer"
    },
    {
      "id": 2978714528,
      "node_id": "MDU6TGFiZWwyOTc4NzE0NTI4",
      "url": "https://api.github.com/repos/ethereum-optimism/optimism/labels/good%20first%20issue",
      "name": "good first issue",
      "color": "C2E0C6",
      "default": true,
      "description": ""
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 9,
  "created_at": "2021-06-28T15:12:44Z",
  "updated_at": "2022-09-24T02:20:33Z",
  "closed_at": "2022-09-24T02:20:33Z",
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "<!--\r\nNeed help?\r\nRefer to our contributing guidelines for additional information about making a good issue:\r\nhttps://github.com/ethereum-optimism/.github/blob/master/CONTRIBUTING.md\r\n-->\r\n\r\n**Is your feature request related to a problem? Please describe.**\r\nWe have a function called [`getContractAddressAtBlock`](https://github.com/ethereum-optimism/optimism/blob/154aab39988d7851df5e9a8fd2c0c10482ce5e5e/packages/data-transport-layer/src/services/l1-ingestion/service.ts#L411) which finds the address inside the [`Lib_AddressManager`](https://github.com/ethereum-optimism/optimism/blob/develop/packages/contracts/contracts/optimistic-ethereum/libraries/resolver/Lib_AddressManager.sol) that was associated with a given contract name at a given block. We need this function because it's possible for this address to change over time and we need to be sure that we're looking at the correct address whenever we're scanning for events.\r\n\r\nHere's the exact problem statement:\r\n\r\n- We have a contract `Lib_AddressManager` that stores a mapping of `string => address` which can be accessed via a public getter `getAddress(string)`.\r\n- Addresses can change over time, so `getAddress(x)` at block N may differ from `getAddress(x)` at block M != N.\r\n- **Goal is to determine the value of `getAddress(x)` at some given block N.**\r\n- We *cannot* make the assumption of an archival node that can respond to `getAddress(x, { block: N })`. Instead, we must rely on the [`AddressSet` event](https://github.com/ethereum-optimism/optimism/blob/154aab39988d7851df5e9a8fd2c0c10482ce5e5e/packages/contracts/contracts/optimistic-ethereum/libraries/resolver/Lib_AddressManager.sol#L16-L20).\r\n\r\nOur current approach is as follows:\r\n1. [Find all `AddressSet` events from the creation of the `Lib_AddressManager` to the target block N.](https://github.com/ethereum-optimism/optimism/blob/154aab39988d7851df5e9a8fd2c0c10482ce5e5e/packages/data-transport-layer/src/services/l1-ingestion/service.ts#L415-L419).\r\n2. If there are no events, return the zero address (`0x00...00`).\r\n3. If there are events, return the [`_newAddress`](https://github.com/ethereum-optimism/optimism/blob/154aab39988d7851df5e9a8fd2c0c10482ce5e5e/packages/contracts/contracts/optimistic-ethereum/libraries/resolver/Lib_AddressManager.sol#L18) parameter of the last emitted event.\r\n\r\nThis approach quite inefficient when the `Lib_AddressManager` was created a long time ago. We would like to find an alternative solution that doesn't have to scan as many blocks.\r\n\r\n**Describe the solution you'd like**\r\nI'd like to find a solution to this problem that scans a minimal number of blocks. I think this is a fun problem to solve so I'll leave it to someone else to tackle :-). We are hoping to find a solution that does NOT require any changes to the `Lib_AddressManager` contract. Feel free to use any optimization technique that you'd like, including keeping a cache of the `AddressSet` events if necessary. \r\n\r\n**Describe alternatives you've considered**\r\nFor bonus points, I WILL also accept a PR into the `regenesis/0.5.0` branch that makes changes to the `Lib_AddressManager` if those changes make the above algorithm significantly simpler/more efficient. I think this will be a fun mini-project for someone. If you'd like to work on this project, please leave a comment on this issue.",
  "closed_by": {
    "login": "smartcontracts",
    "id": 14298799,
    "node_id": "MDQ6VXNlcjE0Mjk4Nzk5",
    "avatar_url": "https://avatars.githubusercontent.com/u/14298799?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/smartcontracts",
    "html_url": "https://github.com/smartcontracts",
    "followers_url": "https://api.github.com/users/smartcontracts/followers",
    "following_url": "https://api.github.com/users/smartcontracts/following{/other_user}",
    "gists_url": "https://api.github.com/users/smartcontracts/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/smartcontracts/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/smartcontracts/subscriptions",
    "organizations_url": "https://api.github.com/users/smartcontracts/orgs",
    "repos_url": "https://api.github.com/users/smartcontracts/repos",
    "events_url": "https://api.github.com/users/smartcontracts/events{/privacy}",
    "received_events_url": "https://api.github.com/users/smartcontracts/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum-optimism/optimism/issues/1178/reactions",
    "total_count": 1,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 1
  },
  "timeline_url": "https://api.github.com/repos/ethereum-optimism/optimism/issues/1178/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum-optimism/optimism/issues/comments/871545353",
    "html_url": "https://github.com/ethereum-optimism/optimism/issues/1178#issuecomment-871545353",
    "issue_url": "https://api.github.com/repos/ethereum-optimism/optimism/issues/1178",
    "id": 871545353,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg3MTU0NTM1Mw==",
    "user": {
      "login": "rajivpo",
      "id": 19913716,
      "node_id": "MDQ6VXNlcjE5OTEzNzE2",
      "avatar_url": "https://avatars.githubusercontent.com/u/19913716?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rajivpo",
      "html_url": "https://github.com/rajivpo",
      "followers_url": "https://api.github.com/users/rajivpo/followers",
      "following_url": "https://api.github.com/users/rajivpo/following{/other_user}",
      "gists_url": "https://api.github.com/users/rajivpo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rajivpo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rajivpo/subscriptions",
      "organizations_url": "https://api.github.com/users/rajivpo/orgs",
      "repos_url": "https://api.github.com/users/rajivpo/repos",
      "events_url": "https://api.github.com/users/rajivpo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rajivpo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-06-30T16:21:46Z",
    "updated_at": "2021-06-30T16:21:46Z",
    "author_association": "CONTRIBUTOR",
    "body": "Im also going to take a stab at this, but if anyone else is interested, they should definitely go for it ðŸ˜„ ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum-optimism/optimism/issues/comments/871545353/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum-optimism/optimism/issues/comments/875010273",
    "html_url": "https://github.com/ethereum-optimism/optimism/issues/1178#issuecomment-875010273",
    "issue_url": "https://api.github.com/repos/ethereum-optimism/optimism/issues/1178",
    "id": 875010273,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg3NTAxMDI3Mw==",
    "user": {
      "login": "rajivpo",
      "id": 19913716,
      "node_id": "MDQ6VXNlcjE5OTEzNzE2",
      "avatar_url": "https://avatars.githubusercontent.com/u/19913716?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rajivpo",
      "html_url": "https://github.com/rajivpo",
      "followers_url": "https://api.github.com/users/rajivpo/followers",
      "following_url": "https://api.github.com/users/rajivpo/following{/other_user}",
      "gists_url": "https://api.github.com/users/rajivpo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rajivpo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rajivpo/subscriptions",
      "organizations_url": "https://api.github.com/users/rajivpo/orgs",
      "repos_url": "https://api.github.com/users/rajivpo/repos",
      "events_url": "https://api.github.com/users/rajivpo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rajivpo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-07-06T19:04:13Z",
    "updated_at": "2021-07-06T19:04:13Z",
    "author_association": "CONTRIBUTOR",
    "body": "Looking to surface some feedback on modifying `Lib_AddressManager` if possible prior to going down this rabbithole. Was thinking there might be a way to reduce the amount of event querying by allocating an additional, `public mapping` that maps `addressLastChanged[keccak256(abi.encodePacked(nameHash, oldAddressLastSet))` to  `block.number` (block in which new address is set). The main idea being that one can quickly and cheaply recover the block(s) in which the address was changed and thus narrow the filter range for recovering the old address from `AddressSet` events by iteratively getting the indices of when the address changes occur for a given name. \r\n\r\nSome downsides of this approach:\r\n- increased gas costs to call `setAddress` (loading and setting storage, additional set of encoding + hashing)\r\n- not elegant/simple (this actually feels a bit more complicated to me than what there is currently - but maybe others might feel differently).\r\n\r\nSee below for further details for changes to `Lib_AddressManager`\r\n\r\n![image](https://user-images.githubusercontent.com/19913716/124651746-4e359980-de69-11eb-98bd-ae79e9d64994.png)\r\n\r\nAlso, if preferred, I can make the corresponding changes to `_getContractAddressAtBlock` prior to soliciting feedback ðŸ˜„ ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum-optimism/optimism/issues/comments/875010273/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum-optimism/optimism/issues/comments/875017414",
    "html_url": "https://github.com/ethereum-optimism/optimism/issues/1178#issuecomment-875017414",
    "issue_url": "https://api.github.com/repos/ethereum-optimism/optimism/issues/1178",
    "id": 875017414,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg3NTAxNzQxNA==",
    "user": {
      "login": "smartcontracts",
      "id": 14298799,
      "node_id": "MDQ6VXNlcjE0Mjk4Nzk5",
      "avatar_url": "https://avatars.githubusercontent.com/u/14298799?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/smartcontracts",
      "html_url": "https://github.com/smartcontracts",
      "followers_url": "https://api.github.com/users/smartcontracts/followers",
      "following_url": "https://api.github.com/users/smartcontracts/following{/other_user}",
      "gists_url": "https://api.github.com/users/smartcontracts/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/smartcontracts/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/smartcontracts/subscriptions",
      "organizations_url": "https://api.github.com/users/smartcontracts/orgs",
      "repos_url": "https://api.github.com/users/smartcontracts/repos",
      "events_url": "https://api.github.com/users/smartcontracts/events{/privacy}",
      "received_events_url": "https://api.github.com/users/smartcontracts/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-07-06T19:15:36Z",
    "updated_at": "2021-07-06T19:16:42Z",
    "author_association": "CONTRIBUTOR",
    "body": "Maybe easier to do a nested mapping like `mapping (bytes32 => mapping (uint256 => uint256))` since it's functionally identical but a bit easier to read. I wouldn't worry about the increased cost, it's not very much and only incurred by us.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum-optimism/optimism/issues/comments/875017414/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum-optimism/optimism/issues/comments/875018381",
    "html_url": "https://github.com/ethereum-optimism/optimism/issues/1178#issuecomment-875018381",
    "issue_url": "https://api.github.com/repos/ethereum-optimism/optimism/issues/1178",
    "id": 875018381,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg3NTAxODM4MQ==",
    "user": {
      "login": "smartcontracts",
      "id": 14298799,
      "node_id": "MDQ6VXNlcjE0Mjk4Nzk5",
      "avatar_url": "https://avatars.githubusercontent.com/u/14298799?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/smartcontracts",
      "html_url": "https://github.com/smartcontracts",
      "followers_url": "https://api.github.com/users/smartcontracts/followers",
      "following_url": "https://api.github.com/users/smartcontracts/following{/other_user}",
      "gists_url": "https://api.github.com/users/smartcontracts/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/smartcontracts/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/smartcontracts/subscriptions",
      "organizations_url": "https://api.github.com/users/smartcontracts/orgs",
      "repos_url": "https://api.github.com/users/smartcontracts/repos",
      "events_url": "https://api.github.com/users/smartcontracts/events{/privacy}",
      "received_events_url": "https://api.github.com/users/smartcontracts/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-07-06T19:17:14Z",
    "updated_at": "2021-07-06T19:17:14Z",
    "author_association": "CONTRIBUTOR",
    "body": "What would the pseudocode for the new algorithm look like with ^^^ that change?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum-optimism/optimism/issues/comments/875018381/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum-optimism/optimism/issues/comments/875030896",
    "html_url": "https://github.com/ethereum-optimism/optimism/issues/1178#issuecomment-875030896",
    "issue_url": "https://api.github.com/repos/ethereum-optimism/optimism/issues/1178",
    "id": 875030896,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg3NTAzMDg5Ng==",
    "user": {
      "login": "rajivpo",
      "id": 19913716,
      "node_id": "MDQ6VXNlcjE5OTEzNzE2",
      "avatar_url": "https://avatars.githubusercontent.com/u/19913716?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rajivpo",
      "html_url": "https://github.com/rajivpo",
      "followers_url": "https://api.github.com/users/rajivpo/followers",
      "following_url": "https://api.github.com/users/rajivpo/following{/other_user}",
      "gists_url": "https://api.github.com/users/rajivpo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rajivpo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rajivpo/subscriptions",
      "organizations_url": "https://api.github.com/users/rajivpo/orgs",
      "repos_url": "https://api.github.com/users/rajivpo/repos",
      "events_url": "https://api.github.com/users/rajivpo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rajivpo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-07-06T19:39:03Z",
    "updated_at": "2021-07-06T19:45:32Z",
    "author_association": "CONTRIBUTOR",
    "body": "I'm thinking something like this (plz ignore bad syntax)\r\n\r\n```\r\n    // narrow the range to check events for\r\n    let blockNumberOfAddressChange =\r\n      await Lib_AddressManagerContract.addressLastChanged(contractName).(0) // presumably need a way to store base here\r\n\r\n    while (blockNumberOfAddressChange > 0) {\r\n      let nextBlockNumberOfAddressChange = await Lib_AddressManagerContract.addressLastChanged(contractName).(blockNumberOfAddressChange)\r\n      if (nextBlockNumberOfAddressChange === 0 || nextBlockNumberOfAddressChange > blockNumber) {\r\n        break\r\n      }\r\n      blockNumberOfAddressChange = nextBlockNumberOfAddressChange\r\n    }\r\n    // get address from event\r\n    const events = await this.state.contracts.Lib_AddressManager.queryFilter(\r\n      this.state.contracts.Lib_AddressManager.filters.AddressSet(contractName),\r\n      blockNumberOfAddressChange,\r\n    )\r\n\r\n    if (events.length > 0) {\r\n      return events[events.length - 1].args._newAddress\r\n    } else {\r\n      // Address wasn't set before this.\r\n      return constants.AddressZero\r\n    }\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum-optimism/optimism/issues/comments/875030896/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum-optimism/optimism/issues/comments/889437893",
    "html_url": "https://github.com/ethereum-optimism/optimism/issues/1178#issuecomment-889437893",
    "issue_url": "https://api.github.com/repos/ethereum-optimism/optimism/issues/1178",
    "id": 889437893,
    "node_id": "IC_kwDODjvEJM41A77F",
    "user": {
      "login": "reggieag",
      "id": 2358204,
      "node_id": "MDQ6VXNlcjIzNTgyMDQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2358204?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/reggieag",
      "html_url": "https://github.com/reggieag",
      "followers_url": "https://api.github.com/users/reggieag/followers",
      "following_url": "https://api.github.com/users/reggieag/following{/other_user}",
      "gists_url": "https://api.github.com/users/reggieag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/reggieag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/reggieag/subscriptions",
      "organizations_url": "https://api.github.com/users/reggieag/orgs",
      "repos_url": "https://api.github.com/users/reggieag/repos",
      "events_url": "https://api.github.com/users/reggieag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/reggieag/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-07-29T20:32:42Z",
    "updated_at": "2021-07-29T20:40:01Z",
    "author_association": "CONTRIBUTOR",
    "body": "Building off of @rajivpo's idea, I would like to propose a different data structure to add to `Lib_AddressManager`. First I would like to introduce a new struct. The struct will contain the `start_block`, `end_block`, and `_address`. The `start_block` and `end_block` will define a range that the address is valid within.\r\n\r\n```\r\n    struct AddressHistoryEntry {\r\n        uint256 start_block;\r\n        uint256 end_block;\r\n        address _address;\r\n    }\r\n```\r\n\r\nThen I would like to introduce a mapping from the contract name to an array of AddressHistoryEntry structs.\r\n\r\n```\r\n\tmapping (bytes32 => AddressHistoryEntry[]) private addressHistory;\r\n```\r\n\r\nI believe an array of structs better represents the address changes. Adding a new address would be done by updating the last record and appending a new `AddressHistoryEntry`  struct. Retrieving an address as of a certain block will be done by first finding the appropriate array of `AddressHistoryEntry` structs and then searching the array to find the appropriate address. This can be done using sequential search or binary search depending on performance optimization needs.\r\n\r\nAs far as the interface to this data goes, I think there are two options. One is to build a new method in the contract that will handle searching the data structure given a contract name and a block number. The method would then return the appropriate `_address`. Another is to have the contract return the array given a contract name and have the DTL client walk the array. IMO it would be cleaner to have this functionality encapsulated in the contract, but it may be harder to make code updates to contract methods in the future. Happy to provide some rough code examples!\r\n\r\nIf we definitely want to avoid making updates to the contract, then the best option that I can think of is to read the `AddressSet` events into the DTL and build an efficient data structure optimized for retrieval. This might be complicated since you will need to maintain the data structure in the DTL as new blocks are added to the chain. Let me know though if you have any thoughts on a cache approach! I'm not very familiar with DTL's behavior. There might be a more optimal cache design that I'm missing.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum-optimism/optimism/issues/comments/889437893/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum-optimism/optimism/issues/comments/889440211",
    "html_url": "https://github.com/ethereum-optimism/optimism/issues/1178#issuecomment-889440211",
    "issue_url": "https://api.github.com/repos/ethereum-optimism/optimism/issues/1178",
    "id": 889440211,
    "node_id": "IC_kwDODjvEJM41A8fT",
    "user": {
      "login": "reggieag",
      "id": 2358204,
      "node_id": "MDQ6VXNlcjIzNTgyMDQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2358204?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/reggieag",
      "html_url": "https://github.com/reggieag",
      "followers_url": "https://api.github.com/users/reggieag/followers",
      "following_url": "https://api.github.com/users/reggieag/following{/other_user}",
      "gists_url": "https://api.github.com/users/reggieag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/reggieag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/reggieag/subscriptions",
      "organizations_url": "https://api.github.com/users/reggieag/orgs",
      "repos_url": "https://api.github.com/users/reggieag/repos",
      "events_url": "https://api.github.com/users/reggieag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/reggieag/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-07-29T20:37:56Z",
    "updated_at": "2021-07-29T20:37:56Z",
    "author_association": "CONTRIBUTOR",
    "body": "Also, I hope I'm not stepping on your toes @rajivpo ! Happy to lean out of this if you've got it ðŸ˜„ ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum-optimism/optimism/issues/comments/889440211/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum-optimism/optimism/issues/comments/889442847",
    "html_url": "https://github.com/ethereum-optimism/optimism/issues/1178#issuecomment-889442847",
    "issue_url": "https://api.github.com/repos/ethereum-optimism/optimism/issues/1178",
    "id": 889442847,
    "node_id": "IC_kwDODjvEJM41A9If",
    "user": {
      "login": "rajivpo",
      "id": 19913716,
      "node_id": "MDQ6VXNlcjE5OTEzNzE2",
      "avatar_url": "https://avatars.githubusercontent.com/u/19913716?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rajivpo",
      "html_url": "https://github.com/rajivpo",
      "followers_url": "https://api.github.com/users/rajivpo/followers",
      "following_url": "https://api.github.com/users/rajivpo/following{/other_user}",
      "gists_url": "https://api.github.com/users/rajivpo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rajivpo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rajivpo/subscriptions",
      "organizations_url": "https://api.github.com/users/rajivpo/orgs",
      "repos_url": "https://api.github.com/users/rajivpo/repos",
      "events_url": "https://api.github.com/users/rajivpo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rajivpo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-07-29T20:43:46Z",
    "updated_at": "2021-07-29T20:43:46Z",
    "author_association": "CONTRIBUTOR",
    "body": "@reggieag not at all - go for it!",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum-optimism/optimism/issues/comments/889442847/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum-optimism/optimism/issues/comments/1256836485",
    "html_url": "https://github.com/ethereum-optimism/optimism/issues/1178#issuecomment-1256836485",
    "issue_url": "https://api.github.com/repos/ethereum-optimism/optimism/issues/1178",
    "id": 1256836485,
    "node_id": "IC_kwDODjvEJM5K6c2F",
    "user": {
      "login": "smartcontracts",
      "id": 14298799,
      "node_id": "MDQ6VXNlcjE0Mjk4Nzk5",
      "avatar_url": "https://avatars.githubusercontent.com/u/14298799?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/smartcontracts",
      "html_url": "https://github.com/smartcontracts",
      "followers_url": "https://api.github.com/users/smartcontracts/followers",
      "following_url": "https://api.github.com/users/smartcontracts/following{/other_user}",
      "gists_url": "https://api.github.com/users/smartcontracts/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/smartcontracts/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/smartcontracts/subscriptions",
      "organizations_url": "https://api.github.com/users/smartcontracts/orgs",
      "repos_url": "https://api.github.com/users/smartcontracts/repos",
      "events_url": "https://api.github.com/users/smartcontracts/events{/privacy}",
      "received_events_url": "https://api.github.com/users/smartcontracts/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-09-24T02:20:33Z",
    "updated_at": "2022-09-24T02:20:33Z",
    "author_association": "CONTRIBUTOR",
    "body": "Gonna close this. Not much we can optimize here and I got rid of the need for this in mainnet.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum-optimism/optimism/issues/comments/1256836485/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
