{
  "url": "https://api.github.com/repos/ethereum-optimism/optimism/issues/4169",
  "repository_url": "https://api.github.com/repos/ethereum-optimism/optimism",
  "labels_url": "https://api.github.com/repos/ethereum-optimism/optimism/issues/4169/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum-optimism/optimism/issues/4169/comments",
  "events_url": "https://api.github.com/repos/ethereum-optimism/optimism/issues/4169/events",
  "html_url": "https://github.com/ethereum-optimism/optimism/issues/4169",
  "id": 1472705505,
  "node_id": "I_kwDODjvEJM5Xx7Ph",
  "number": 4169,
  "title": "Transaction `0x9ed8f713b2cc6439657db52dcd2fdb9cc944915428f3c6e2a7703e242b259cb9` is duplicated at blockheight  985 & 45036 ",
  "user": {
    "login": "yj0x0x",
    "id": 102578874,
    "node_id": "U_kgDOBh06ug",
    "avatar_url": "https://avatars.githubusercontent.com/u/102578874?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/yj0x0x",
    "html_url": "https://github.com/yj0x0x",
    "followers_url": "https://api.github.com/users/yj0x0x/followers",
    "following_url": "https://api.github.com/users/yj0x0x/following{/other_user}",
    "gists_url": "https://api.github.com/users/yj0x0x/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/yj0x0x/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/yj0x0x/subscriptions",
    "organizations_url": "https://api.github.com/users/yj0x0x/orgs",
    "repos_url": "https://api.github.com/users/yj0x0x/repos",
    "events_url": "https://api.github.com/users/yj0x0x/events{/privacy}",
    "received_events_url": "https://api.github.com/users/yj0x0x/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 1,
  "created_at": "2022-12-02T11:16:33Z",
  "updated_at": "2022-12-02T17:51:35Z",
  "closed_at": "2022-12-02T17:51:32Z",
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "<!--\r\nNeed help?\r\nRefer to our contributing guidelines for additional information about making a good issue:\r\nhttps://github.com/ethereum-optimism/.github/blob/master/CONTRIBUTING.md\r\n-->\r\n\r\n**Describe the bug**\r\nA clear and concise description of what the bug is.\r\n\r\nTransaction `0x9ed8f713b2cc6439657db52dcd2fdb9cc944915428f3c6e2a7703e242b259cb9` is duplicated.\r\n\r\nLet see below `eth_getBlockByHash`return from the node. \r\n\r\n```\r\n{\r\n    \"jsonrpc\": \"2.0\",\r\n    \"id\": \"1\",\r\n    \"result\": {\r\n        \"difficulty\": \"0x2\",\r\n        \"extraData\": \"0xd98301090a846765746889676f312e31352e3133856c696e757800000000000080777c1fbd676ceb535d1419e5b8a995cfe36cf50829554e59382e6c3634398c112ed5300471c531b58f1e4b07c5d3e87b03dc6c69648e8a2ee6e16e4abade6001\",\r\n        \"gasLimit\": \"0xe4e1c0\",\r\n        \"gasUsed\": \"0x16154\",\r\n        \"hash\": \"0x09b353fbfa414ff7765e9af807f488110775d55cfeee7df9ef3ee47e2aa0e9b9\",\r\n        \"logsBloom\": \"0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n        \"miner\": \"0x0000000000000000000000000000000000000000\",\r\n        \"mixHash\": \"0x0000000000000000000000000000000000000000000000000000000000000000\",\r\n        \"nonce\": \"0x0000000000000000\",\r\n        \"number\": \"0x3d9\",\r\n        \"parentHash\": \"0x18f8b5a404a63456d8cc527beb93f61eaa7b1d3b71c2d43f18ba94c4cb0b077c\",\r\n        \"receiptsRoot\": \"0x497b835c7c6f2f6c33b60d6c2fca68b3283d777f8d7a553ac13ee5f80ddec27f\",\r\n        \"sha3Uncles\": \"0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347\",\r\n        \"size\": \"0xc88\",\r\n        \"stateRoot\": \"0x464c7741741b431921c49b1ad3495e9a9329674381fdb5c4e9a6bc42ab73d4da\",\r\n        \"timestamp\": \"0x618db4c0\",\r\n        \"totalDifficulty\": \"0x7b3\",\r\n        \"transactions\": [\r\n            {\r\n                \"blockHash\": \"0x09b353fbfa414ff7765e9af807f488110775d55cfeee7df9ef3ee47e2aa0e9b9\",\r\n                \"blockNumber\": \"0x3d9\",\r\n                \"from\": \"0x7a3d05c70581bd345fe117c06e45f9669205384f\",\r\n                \"gas\": \"0xd87fe\",\r\n                \"gasPrice\": \"0xf4240\",\r\n                \"hash\": \"0x9ed8f713b2cc6439657db52dcd2fdb9cc944915428f3c6e2a7703e242b259cb9\",\r\n                \"input\": \"0x608060405234801561001057600080fd5b506109af806100206000396000f3fe60806040526004361061002d5760003560e01c80631049334f14610072578063f0002ea9146100af5761006d565b3661006d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100649061060e565b60405180910390fd5b600080fd5b34801561007e57600080fd5b5061009960048036038101906100949190610426565b6100ec565b6040516100a6919061062e565b60405180910390f35b3480156100bb57600080fd5b506100d660048036038101906100d19190610466565b610199565b6040516100e391906105ec565b60405180910390f35b600080823b9050600081111561018d578273ffffffffffffffffffffffffffffffffffffffff166370a08231856040518263ffffffff1660e01b815260040161013591906105d1565b60206040518083038186803b15801561014d57600080fd5b505afa158015610161573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061018591906104de565b915050610193565b60009150505b92915050565b60606000835183516101ab919061073a565b67ffffffffffffffff8111156101c4576101c36108a8565b5b6040519080825280602002602001820160405280156101f25781602001602082028036833780820191505090505b50905060005b84518110156103535760005b845181101561033f57600082865161021c919061073a565b8261022791906106e4565b9050600073ffffffffffffffffffffffffffffffffffffffff1686838151811061025457610253610879565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff16146102d9576102b587848151811061028d5761028c610879565b5b60200260200101518784815181106102a8576102a7610879565b5b60200260200101516100ec565b8482815181106102c8576102c7610879565b5b60200260200101818152505061032b565b8683815181106102ec576102eb610879565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff163184828151811061031e5761031d610879565b5b6020026020010181815250505b50808061033790610801565b915050610204565b50808061034b90610801565b9150506101f8565b508091505092915050565b600061037161036c8461066e565b610649565b90508083825260208201905082856020860282011115610394576103936108dc565b5b60005b858110156103c457816103aa88826103ce565b845260208401935060208301925050600181019050610397565b5050509392505050565b6000813590506103dd8161094b565b92915050565b600082601f8301126103f8576103f76108d7565b5b813561040884826020860161035e565b91505092915050565b60008151905061042081610962565b92915050565b6000806040838503121561043d5761043c6108e6565b5b600061044b858286016103ce565b925050602061045c858286016103ce565b9150509250929050565b6000806040838503121561047d5761047c6108e6565b5b600083013567ffffffffffffffff81111561049b5761049a6108e1565b5b6104a7858286016103e3565b925050602083013567ffffffffffffffff8111156104c8576104c76108e1565b5b6104d4858286016103e3565b9150509250929050565b6000602082840312156104f4576104f36108e6565b5b600061050284828501610411565b91505092915050565b600061051783836105b3565b60208301905092915050565b61052c81610794565b82525050565b600061053d826106aa565b61054781856106c2565b93506105528361069a565b8060005b8381101561058357815161056a888261050b565b9750610575836106b5565b925050600181019050610556565b5085935050505092915050565b600061059d6027836106d3565b91506105a8826108fc565b604082019050919050565b6105bc816107c6565b82525050565b6105cb816107c6565b82525050565b60006020820190506105e66000830184610523565b92915050565b600060208201905081810360008301526106068184610532565b905092915050565b6000602082019050818103600083015261062781610590565b9050919050565b600060208201905061064360008301846105c2565b92915050565b6000610653610664565b905061065f82826107d0565b919050565b6000604051905090565b600067ffffffffffffffff821115610689576106886108a8565b5b602082029050602081019050919050565b6000819050602082019050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b60006106ef826107c6565b91506106fa836107c6565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561072f5761072e61084a565b5b828201905092915050565b6000610745826107c6565b9150610750836107c6565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156107895761078861084a565b5b828202905092915050565b600061079f826107a6565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6107d9826108eb565b810181811067ffffffffffffffff821117156107f8576107f76108a8565b5b80604052505050565b600061080c826107c6565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561083f5761083e61084a565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f42616c616e6365436865636b657220646f6573206e6f7420616363657074207060008201527f61796d656e747300000000000000000000000000000000000000000000000000602082015250565b61095481610794565b811461095f57600080fd5b50565b61096b816107c6565b811461097657600080fd5b5056fea264697066735822122049ff4d723460cc820d32f1a579219c95e6ad59cd41e74dd86181449bb55bdfd964736f6c63430008070033\",\r\n                \"nonce\": \"0x34\",\r\n                \"to\": null,\r\n                \"transactionIndex\": \"0x0\",\r\n                \"value\": \"0x0\",\r\n                \"v\": \"0x37\",\r\n                \"r\": \"0x5d3429d5b4c29d08c77900e3de2154596553a583791eb20cdb4ae42c00c4661\",\r\n                \"s\": \"0x798bcb5479f146b60990de37ee253872bc3a715d3448cd8f9b8a81b6e2e5aa34\",\r\n                \"queueOrigin\": \"sequencer\",\r\n                \"l1TxOrigin\": null,\r\n                \"l1BlockNumber\": \"0xcf7d8f\",\r\n                \"l1Timestamp\": \"0x618db4c0\",\r\n                \"index\": \"0x3d8\",\r\n                \"queueIndex\": null,\r\n                \"rawTransaction\": \"0xf90a2034830f4240830d87fe8080b909cf608060405234801561001057600080fd5b506109af806100206000396000f3fe60806040526004361061002d5760003560e01c80631049334f14610072578063f0002ea9146100af5761006d565b3661006d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100649061060e565b60405180910390fd5b600080fd5b34801561007e57600080fd5b5061009960048036038101906100949190610426565b6100ec565b6040516100a6919061062e565b60405180910390f35b3480156100bb57600080fd5b506100d660048036038101906100d19190610466565b610199565b6040516100e391906105ec565b60405180910390f35b600080823b9050600081111561018d578273ffffffffffffffffffffffffffffffffffffffff166370a08231856040518263ffffffff1660e01b815260040161013591906105d1565b60206040518083038186803b15801561014d57600080fd5b505afa158015610161573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061018591906104de565b915050610193565b60009150505b92915050565b60606000835183516101ab919061073a565b67ffffffffffffffff8111156101c4576101c36108a8565b5b6040519080825280602002602001820160405280156101f25781602001602082028036833780820191505090505b50905060005b84518110156103535760005b845181101561033f57600082865161021c919061073a565b8261022791906106e4565b9050600073ffffffffffffffffffffffffffffffffffffffff1686838151811061025457610253610879565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff16146102d9576102b587848151811061028d5761028c610879565b5b60200260200101518784815181106102a8576102a7610879565b5b60200260200101516100ec565b8482815181106102c8576102c7610879565b5b60200260200101818152505061032b565b8683815181106102ec576102eb610879565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff163184828151811061031e5761031d610879565b5b6020026020010181815250505b50808061033790610801565b915050610204565b50808061034b90610801565b9150506101f8565b508091505092915050565b600061037161036c8461066e565b610649565b90508083825260208201905082856020860282011115610394576103936108dc565b5b60005b858110156103c457816103aa88826103ce565b845260208401935060208301925050600181019050610397565b5050509392505050565b6000813590506103dd8161094b565b92915050565b600082601f8301126103f8576103f76108d7565b5b813561040884826020860161035e565b91505092915050565b60008151905061042081610962565b92915050565b6000806040838503121561043d5761043c6108e6565b5b600061044b858286016103ce565b925050602061045c858286016103ce565b9150509250929050565b6000806040838503121561047d5761047c6108e6565b5b600083013567ffffffffffffffff81111561049b5761049a6108e1565b5b6104a7858286016103e3565b925050602083013567ffffffffffffffff8111156104c8576104c76108e1565b5b6104d4858286016103e3565b9150509250929050565b6000602082840312156104f4576104f36108e6565b5b600061050284828501610411565b91505092915050565b600061051783836105b3565b60208301905092915050565b61052c81610794565b82525050565b600061053d826106aa565b61054781856106c2565b93506105528361069a565b8060005b8381101561058357815161056a888261050b565b9750610575836106b5565b925050600181019050610556565b5085935050505092915050565b600061059d6027836106d3565b91506105a8826108fc565b604082019050919050565b6105bc816107c6565b82525050565b6105cb816107c6565b82525050565b60006020820190506105e66000830184610523565b92915050565b600060208201905081810360008301526106068184610532565b905092915050565b6000602082019050818103600083015261062781610590565b9050919050565b600060208201905061064360008301846105c2565b92915050565b6000610653610664565b905061065f82826107d0565b919050565b6000604051905090565b600067ffffffffffffffff821115610689576106886108a8565b5b602082029050602081019050919050565b6000819050602082019050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b60006106ef826107c6565b91506106fa836107c6565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561072f5761072e61084a565b5b828201905092915050565b6000610745826107c6565b9150610750836107c6565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156107895761078861084a565b5b828202905092915050565b600061079f826107a6565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6107d9826108eb565b810181811067ffffffffffffffff821117156107f8576107f76108a8565b5b80604052505050565b600061080c826107c6565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561083f5761083e61084a565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f42616c616e6365436865636b657220646f6573206e6f7420616363657074207060008201527f61796d656e747300000000000000000000000000000000000000000000000000602082015250565b61095481610794565b811461095f57600080fd5b50565b61096b816107c6565b811461097657600080fd5b5056fea264697066735822122049ff4d723460cc820d32f1a579219c95e6ad59cd41e74dd86181449bb55bdfd964736f6c6343000807003337a005d3429d5b4c29d08c77900e3de2154596553a583791eb20cdb4ae42c00c4661a0798bcb5479f146b60990de37ee253872bc3a715d3448cd8f9b8a81b6e2e5aa34\"\r\n            }\r\n        ],\r\n        \"transactionsRoot\": \"0x099f3cda009c1f7a7122c018a1d8e4f19ed6b780038928bcbb0fcea7ab56a428\",\r\n        \"uncles\": []\r\n    }\r\n}\r\n```\r\n\r\nThis Block include transaction `0x9ed8f713b2cc6439657db52dcd2fdb9cc944915428f3c6e2a7703e242b259cb9`. \r\n\r\nBut here is the `eth_getTransactionReceipt` return from the node\r\n\r\n```\r\n{\r\n    \"jsonrpc\": \"2.0\",\r\n    \"id\": \"1\",\r\n    \"result\": {\r\n        \"blockHash\": \"0x5572ca94f6ef220f754ee486190a15c43aadcdfb2371ed3be1cd2d20f6edd96f\",\r\n        \"blockNumber\": \"0xafec\",\r\n        \"contractAddress\": \"0x1c8cfde3ba6efc4ff8dd5c93044b9a690b6cff36\",\r\n        \"cumulativeGasUsed\": \"0x8f41e\",\r\n        \"from\": \"0x7a3d05c70581bd345fe117c06e45f9669205384f\",\r\n        \"gasUsed\": \"0x8f41e\",\r\n        \"l1Fee\": \"0x19d436b8cb59dc\",\r\n        \"l1FeeScalar\": \"1.5\",\r\n        \"l1GasPrice\": \"0x1b26de8644\",\r\n        \"l1GasUsed\": \"0xa25a\",\r\n        \"logs\": [],\r\n        \"logsBloom\": \"0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n        \"status\": \"0x1\",\r\n        \"to\": null,\r\n        \"transactionHash\": \"0x9ed8f713b2cc6439657db52dcd2fdb9cc944915428f3c6e2a7703e242b259cb9\",\r\n        \"transactionIndex\": \"0x0\"\r\n    }\r\n}\r\n```\r\n\r\nAnd `eth_getTransactionByHash` return  from the node below. \r\n\r\n```\r\n{\r\n    \"jsonrpc\": \"2.0\",\r\n    \"id\": \"1\",\r\n    \"result\": {\r\n        \"blockHash\": \"0x5572ca94f6ef220f754ee486190a15c43aadcdfb2371ed3be1cd2d20f6edd96f\",\r\n        \"blockNumber\": \"0xafec\",\r\n        \"from\": \"0x7a3d05c70581bd345fe117c06e45f9669205384f\",\r\n        \"gas\": \"0xd87fe\",\r\n        \"gasPrice\": \"0xf4240\",\r\n        \"hash\": \"0x9ed8f713b2cc6439657db52dcd2fdb9cc944915428f3c6e2a7703e242b259cb9\",\r\n        \"input\": \"0x608060405234801561001057600080fd5b506109af806100206000396000f3fe60806040526004361061002d5760003560e01c80631049334f14610072578063f0002ea9146100af5761006d565b3661006d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100649061060e565b60405180910390fd5b600080fd5b34801561007e57600080fd5b5061009960048036038101906100949190610426565b6100ec565b6040516100a6919061062e565b60405180910390f35b3480156100bb57600080fd5b506100d660048036038101906100d19190610466565b610199565b6040516100e391906105ec565b60405180910390f35b600080823b9050600081111561018d578273ffffffffffffffffffffffffffffffffffffffff166370a08231856040518263ffffffff1660e01b815260040161013591906105d1565b60206040518083038186803b15801561014d57600080fd5b505afa158015610161573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061018591906104de565b915050610193565b60009150505b92915050565b60606000835183516101ab919061073a565b67ffffffffffffffff8111156101c4576101c36108a8565b5b6040519080825280602002602001820160405280156101f25781602001602082028036833780820191505090505b50905060005b84518110156103535760005b845181101561033f57600082865161021c919061073a565b8261022791906106e4565b9050600073ffffffffffffffffffffffffffffffffffffffff1686838151811061025457610253610879565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff16146102d9576102b587848151811061028d5761028c610879565b5b60200260200101518784815181106102a8576102a7610879565b5b60200260200101516100ec565b8482815181106102c8576102c7610879565b5b60200260200101818152505061032b565b8683815181106102ec576102eb610879565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff163184828151811061031e5761031d610879565b5b6020026020010181815250505b50808061033790610801565b915050610204565b50808061034b90610801565b9150506101f8565b508091505092915050565b600061037161036c8461066e565b610649565b90508083825260208201905082856020860282011115610394576103936108dc565b5b60005b858110156103c457816103aa88826103ce565b845260208401935060208301925050600181019050610397565b5050509392505050565b6000813590506103dd8161094b565b92915050565b600082601f8301126103f8576103f76108d7565b5b813561040884826020860161035e565b91505092915050565b60008151905061042081610962565b92915050565b6000806040838503121561043d5761043c6108e6565b5b600061044b858286016103ce565b925050602061045c858286016103ce565b9150509250929050565b6000806040838503121561047d5761047c6108e6565b5b600083013567ffffffffffffffff81111561049b5761049a6108e1565b5b6104a7858286016103e3565b925050602083013567ffffffffffffffff8111156104c8576104c76108e1565b5b6104d4858286016103e3565b9150509250929050565b6000602082840312156104f4576104f36108e6565b5b600061050284828501610411565b91505092915050565b600061051783836105b3565b60208301905092915050565b61052c81610794565b82525050565b600061053d826106aa565b61054781856106c2565b93506105528361069a565b8060005b8381101561058357815161056a888261050b565b9750610575836106b5565b925050600181019050610556565b5085935050505092915050565b600061059d6027836106d3565b91506105a8826108fc565b604082019050919050565b6105bc816107c6565b82525050565b6105cb816107c6565b82525050565b60006020820190506105e66000830184610523565b92915050565b600060208201905081810360008301526106068184610532565b905092915050565b6000602082019050818103600083015261062781610590565b9050919050565b600060208201905061064360008301846105c2565b92915050565b6000610653610664565b905061065f82826107d0565b919050565b6000604051905090565b600067ffffffffffffffff821115610689576106886108a8565b5b602082029050602081019050919050565b6000819050602082019050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b60006106ef826107c6565b91506106fa836107c6565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561072f5761072e61084a565b5b828201905092915050565b6000610745826107c6565b9150610750836107c6565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156107895761078861084a565b5b828202905092915050565b600061079f826107a6565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6107d9826108eb565b810181811067ffffffffffffffff821117156107f8576107f76108a8565b5b80604052505050565b600061080c826107c6565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561083f5761083e61084a565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f42616c616e6365436865636b657220646f6573206e6f7420616363657074207060008201527f61796d656e747300000000000000000000000000000000000000000000000000602082015250565b61095481610794565b811461095f57600080fd5b50565b61096b816107c6565b811461097657600080fd5b5056fea264697066735822122049ff4d723460cc820d32f1a579219c95e6ad59cd41e74dd86181449bb55bdfd964736f6c63430008070033\",\r\n        \"nonce\": \"0x34\",\r\n        \"to\": null,\r\n        \"transactionIndex\": \"0x0\",\r\n        \"value\": \"0x0\",\r\n        \"v\": \"0x37\",\r\n        \"r\": \"0x5d3429d5b4c29d08c77900e3de2154596553a583791eb20cdb4ae42c00c4661\",\r\n        \"s\": \"0x798bcb5479f146b60990de37ee253872bc3a715d3448cd8f9b8a81b6e2e5aa34\",\r\n        \"queueOrigin\": \"sequencer\",\r\n        \"l1TxOrigin\": null,\r\n        \"l1BlockNumber\": \"0xcfa504\",\r\n        \"l1Timestamp\": \"0x618fcafc\",\r\n        \"index\": \"0xafeb\",\r\n        \"queueIndex\": null,\r\n        \"rawTransaction\": \"0xf90a2034830f4240830d87fe8080b909cf608060405234801561001057600080fd5b506109af806100206000396000f3fe60806040526004361061002d5760003560e01c80631049334f14610072578063f0002ea9146100af5761006d565b3661006d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100649061060e565b60405180910390fd5b600080fd5b34801561007e57600080fd5b5061009960048036038101906100949190610426565b6100ec565b6040516100a6919061062e565b60405180910390f35b3480156100bb57600080fd5b506100d660048036038101906100d19190610466565b610199565b6040516100e391906105ec565b60405180910390f35b600080823b9050600081111561018d578273ffffffffffffffffffffffffffffffffffffffff166370a08231856040518263ffffffff1660e01b815260040161013591906105d1565b60206040518083038186803b15801561014d57600080fd5b505afa158015610161573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061018591906104de565b915050610193565b60009150505b92915050565b60606000835183516101ab919061073a565b67ffffffffffffffff8111156101c4576101c36108a8565b5b6040519080825280602002602001820160405280156101f25781602001602082028036833780820191505090505b50905060005b84518110156103535760005b845181101561033f57600082865161021c919061073a565b8261022791906106e4565b9050600073ffffffffffffffffffffffffffffffffffffffff1686838151811061025457610253610879565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff16146102d9576102b587848151811061028d5761028c610879565b5b60200260200101518784815181106102a8576102a7610879565b5b60200260200101516100ec565b8482815181106102c8576102c7610879565b5b60200260200101818152505061032b565b8683815181106102ec576102eb610879565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff163184828151811061031e5761031d610879565b5b6020026020010181815250505b50808061033790610801565b915050610204565b50808061034b90610801565b9150506101f8565b508091505092915050565b600061037161036c8461066e565b610649565b90508083825260208201905082856020860282011115610394576103936108dc565b5b60005b858110156103c457816103aa88826103ce565b845260208401935060208301925050600181019050610397565b5050509392505050565b6000813590506103dd8161094b565b92915050565b600082601f8301126103f8576103f76108d7565b5b813561040884826020860161035e565b91505092915050565b60008151905061042081610962565b92915050565b6000806040838503121561043d5761043c6108e6565b5b600061044b858286016103ce565b925050602061045c858286016103ce565b9150509250929050565b6000806040838503121561047d5761047c6108e6565b5b600083013567ffffffffffffffff81111561049b5761049a6108e1565b5b6104a7858286016103e3565b925050602083013567ffffffffffffffff8111156104c8576104c76108e1565b5b6104d4858286016103e3565b9150509250929050565b6000602082840312156104f4576104f36108e6565b5b600061050284828501610411565b91505092915050565b600061051783836105b3565b60208301905092915050565b61052c81610794565b82525050565b600061053d826106aa565b61054781856106c2565b93506105528361069a565b8060005b8381101561058357815161056a888261050b565b9750610575836106b5565b925050600181019050610556565b5085935050505092915050565b600061059d6027836106d3565b91506105a8826108fc565b604082019050919050565b6105bc816107c6565b82525050565b6105cb816107c6565b82525050565b60006020820190506105e66000830184610523565b92915050565b600060208201905081810360008301526106068184610532565b905092915050565b6000602082019050818103600083015261062781610590565b9050919050565b600060208201905061064360008301846105c2565b92915050565b6000610653610664565b905061065f82826107d0565b919050565b6000604051905090565b600067ffffffffffffffff821115610689576106886108a8565b5b602082029050602081019050919050565b6000819050602082019050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b60006106ef826107c6565b91506106fa836107c6565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561072f5761072e61084a565b5b828201905092915050565b6000610745826107c6565b9150610750836107c6565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156107895761078861084a565b5b828202905092915050565b600061079f826107a6565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6107d9826108eb565b810181811067ffffffffffffffff821117156107f8576107f76108a8565b5b80604052505050565b600061080c826107c6565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561083f5761083e61084a565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f42616c616e6365436865636b657220646f6573206e6f7420616363657074207060008201527f61796d656e747300000000000000000000000000000000000000000000000000602082015250565b61095481610794565b811461095f57600080fd5b50565b61096b816107c6565b811461097657600080fd5b5056fea264697066735822122049ff4d723460cc820d32f1a579219c95e6ad59cd41e74dd86181449bb55bdfd964736f6c6343000807003337a005d3429d5b4c29d08c77900e3de2154596553a583791eb20cdb4ae42c00c4661a0798bcb5479f146b60990de37ee253872bc3a715d3448cd8f9b8a81b6e2e5aa34\"\r\n    }\r\n}\r\n```\r\n\r\nTransaction's Block height is not `0x3d9`, it's `0xafec`. \r\n\r\nSo I have to check explorer. \r\n\r\nhttps://optimistic.etherscan.io/tx/0x9ed8f713b2cc6439657db52dcd2fdb9cc944915428f3c6e2a7703e242b259cb9\r\n\r\nAbove said that transaction had failed.  \r\n\r\nSo I need to check again block height `0xafec` return from the explorer.\r\n\r\nhttps://optimistic.etherscan.io/tx/45036\r\n\r\nExplorer said that Hash is `DUPE2_0x9ed8f713b2cc6439657db52dcd2fdb9cc944915`. \r\n\r\nSo this transaction is duplicated.\r\n\r\nHere is the some of my questions.\r\n\r\n1. Why transsaction hash duplicated? \r\n\r\n2.  Other some transactions also have potential duplicated event like this transaction? \r\n\r\n3. How can I figure out `0x3d9` block's transaction failed? \r\n\r\n4. `debug_traceBlockByHash` return at height `0x3d9` like below. \r\n\r\n```\r\n{\r\n    \"jsonrpc\": \"2.0\",\r\n    \"id\": \"1\",\r\n    \"result\": [\r\n        {\r\n            \"error\": \"TypeError: cannot read property 'toString' of undefined    in server-side tracer function 'result'\"\r\n        }\r\n    ]\r\n}\r\n```\r\nEven if failed transaction, `debug_traceByHash` have to be worked isn't it? \r\n\r\n\r\n**To Reproduce**\r\nSteps to reproduce the behavior:\r\n1. Go to '...'\r\n2. Click on '....'\r\n3. Scroll down to '....'\r\n4. See error\r\n\r\nFYI below is the `debug_traceBlockByHash` Post query data. \r\n\r\n```\r\n{\r\n    \"jsonrpc\": \"2.0\",\r\n    \"method\": \"debug_traceBlockByHash\",\r\n    \"params\": [\r\n        \"0x09b353fbfa414ff7765e9af807f488110775d55cfeee7df9ef3ee47e2aa0e9b9\",\r\n        {\r\n            \"tracer\": \"// Copyright 2017 The go-ethereum Authors\\n// This file is part of the go-ethereum library.\\n//\\n// The go-ethereum library is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU Lesser General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n//\\n// The go-ethereum library is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\\n// GNU Lesser General Public License for more details.\\n//\\n// You should have received a copy of the GNU Lesser General Public License\\n// along with the go-ethereum library. If not, see \\u003chttp://www.gnu.org/licenses/\\u003e.\\n\\n// callTracer is a full blown transaction tracer that extracts and reports all\\n// the internal calls made by a transaction, along with any useful information.\\n{\\n    // callstack is the current recursive call stack of the EVM execution.\\n    callstack: [{}],\\n\\n        // descended tracks whether we\\u0027ve just descended from an outer transaction into\\n        // an inner call.\\n        descended: false,\\n\\n    // step is invoked for every opcode that the VM executes.\\n    step: function(log, db) {\\n    // Capture any errors immediately\\n    var error \\u003d log.getError();\\n    if (error !\\u003d\\u003d undefined) {\\n        this.fault(log, db);\\n        return;\\n    }\\n    // We only care about system opcodes, faster if we pre-check once\\n    var syscall \\u003d (log.op.toNumber() \\u0026 0xf0) \\u003d\\u003d 0xf0;\\n    if (syscall) {\\n        var op \\u003d log.op.toString();\\n    }\\n    // If a new contract is being created, add to the call stack\\n    if (syscall \\u0026\\u0026 (op \\u003d\\u003d \\u0027CREATE\\u0027 || op \\u003d\\u003d \\\"CREATE2\\\")) {\\n        var inOff \\u003d log.stack.peek(1).valueOf();\\n        var inEnd \\u003d inOff + log.stack.peek(2).valueOf();\\n\\n        // Assemble the internal call report and store for completion\\n        var call \\u003d {\\n            type:    op,\\n            from:    toHex(log.contract.getAddress()),\\n            input:   toHex(log.memory.slice(inOff, inEnd)),\\n            gasIn:   log.getGas(),\\n            gasCost: log.getCost(),\\n            value:   \\u00270x\\u0027 + log.stack.peek(0).toString(16)\\n        };\\n        this.callstack.push(call);\\n        this.descended \\u003d true\\n        return;\\n    }\\n    // If a contract is being self destructed, gather that as a subcall too\\n    if (syscall \\u0026\\u0026 op \\u003d\\u003d \\u0027SELFDESTRUCT\\u0027) {\\n        var left \\u003d this.callstack.length;\\n        if (this.callstack[left-1].calls \\u003d\\u003d\\u003d undefined) {\\n            this.callstack[left-1].calls \\u003d [];\\n        }\\n        this.callstack[left-1].calls.push({type: op});\\n        return\\n    }\\n    // If a new method invocation is being done, add to the call stack\\n    if (syscall \\u0026\\u0026 (op \\u003d\\u003d \\u0027CALL\\u0027 || op \\u003d\\u003d \\u0027CALLCODE\\u0027 || op \\u003d\\u003d \\u0027DELEGATECALL\\u0027 || op \\u003d\\u003d \\u0027STATICCALL\\u0027)) {\\n        // Skip any pre-compile invocations, those are just fancy opcodes\\n        var to \\u003d toAddress(log.stack.peek(1).toString(16));\\n        if (isPrecompiled(to)) {\\n            return\\n        }\\n        var off \\u003d (op \\u003d\\u003d \\u0027DELEGATECALL\\u0027 || op \\u003d\\u003d \\u0027STATICCALL\\u0027 ? 0 : 1);\\n\\n        var inOff \\u003d log.stack.peek(2 + off).valueOf();\\n        var inEnd \\u003d inOff + log.stack.peek(3 + off).valueOf();\\n\\n        // Assemble the internal call report and store for completion\\n        var call \\u003d {\\n            type:    op,\\n            from:    toHex(log.contract.getAddress()),\\n            to:      toHex(to),\\n            input:   toHex(log.memory.slice(inOff, inEnd)),\\n            gasIn:   log.getGas(),\\n            gasCost: log.getCost(),\\n            outOff:  log.stack.peek(4 + off).valueOf(),\\n            outLen:  log.stack.peek(5 + off).valueOf()\\n        };\\n        if (op !\\u003d \\u0027DELEGATECALL\\u0027 \\u0026\\u0026 op !\\u003d \\u0027STATICCALL\\u0027) {\\n            call.value \\u003d \\u00270x\\u0027 + log.stack.peek(2).toString(16);\\n        }\\n        this.callstack.push(call);\\n        this.descended \\u003d true\\n        return;\\n    }\\n    // If we\\u0027ve just descended into an inner call, retrieve it\\u0027s true allowance. We\\n    // need to extract if from within the call as there may be funky gas dynamics\\n    // with regard to requested and actually given gas (2300 stipend, 63/64 rule).\\n    if (this.descended) {\\n        if (log.getDepth() \\u003e\\u003d this.callstack.length) {\\n            this.callstack[this.callstack.length - 1].gas \\u003d log.getGas();\\n        } else {\\n            // TODO(karalabe): The call was made to a plain account. We currently don\\u0027t\\n            // have access to the true gas amount inside the call and so any amount will\\n            // mostly be wrong since it depends on a lot of input args. Skip gas for now.\\n        }\\n        this.descended \\u003d false;\\n    }\\n    // If an existing call is returning, pop off the call stack\\n    if (syscall \\u0026\\u0026 op \\u003d\\u003d \\u0027REVERT\\u0027) {\\n        this.callstack[this.callstack.length - 1].error \\u003d \\\"execution reverted\\\";\\n        return;\\n    }\\n    if (log.getDepth() \\u003d\\u003d this.callstack.length - 1) {\\n        // Pop off the last call and get the execution results\\n        var call \\u003d this.callstack.pop();\\n\\n        if (call.type \\u003d\\u003d \\u0027CREATE\\u0027 || call.type \\u003d\\u003d \\\"CREATE2\\\") {\\n            // If the call was a CREATE, retrieve the contract address and output code\\n            call.gasUsed \\u003d \\u00270x\\u0027 + bigInt(call.gasIn - call.gasCost - log.getGas()).toString(16);\\n            delete call.gasIn; delete call.gasCost;\\n\\n            var ret \\u003d log.stack.peek(0);\\n            if (!ret.equals(0)) {\\n                call.to     \\u003d toHex(toAddress(ret.toString(16)));\\n                call.output \\u003d toHex(db.getCode(toAddress(ret.toString(16))));\\n            } else if (call.error \\u003d\\u003d\\u003d undefined) {\\n                call.error \\u003d \\\"internal failure\\\"; // TODO(karalabe): surface these faults somehow\\n            }\\n        } else {\\n            // If the call was a contract call, retrieve the gas usage and output\\n            if (call.gas !\\u003d\\u003d undefined) {\\n                call.gasUsed \\u003d \\u00270x\\u0027 + bigInt(call.gasIn - call.gasCost + call.gas - log.getGas()).toString(16);\\n\\n                var ret \\u003d log.stack.peek(0);\\n                if (!ret.equals(0)) {\\n                    call.output \\u003d toHex(log.memory.slice(call.outOff, call.outOff + call.outLen));\\n                } else if (call.error \\u003d\\u003d\\u003d undefined) {\\n                    call.error \\u003d \\\"internal failure\\\"; // TODO(karalabe): surface these faults somehow\\n                }\\n            }\\n            delete call.gasIn; delete call.gasCost;\\n            delete call.outOff; delete call.outLen;\\n        }\\n        if (call.gas !\\u003d\\u003d undefined) {\\n            call.gas \\u003d \\u00270x\\u0027 + bigInt(call.gas).toString(16);\\n        }\\n        // Inject the call into the previous one\\n        var left \\u003d this.callstack.length;\\n        if (this.callstack[left-1].calls \\u003d\\u003d\\u003d undefined) {\\n            this.callstack[left-1].calls \\u003d [];\\n        }\\n        this.callstack[left-1].calls.push(call);\\n    }\\n},\\n\\n    // fault is invoked when the actual execution of an opcode fails.\\n    fault: function(log, db) {\\n        // If the topmost call already reverted, don\\u0027t handle the additional fault again\\n        if (this.callstack[this.callstack.length - 1].error !\\u003d\\u003d undefined) {\\n            return;\\n        }\\n        // Pop off the just failed call\\n        var call \\u003d this.callstack.pop();\\n        call.error \\u003d log.getError();\\n\\n        // Consume all available gas and clean any leftovers\\n        if (call.gas !\\u003d\\u003d undefined) {\\n            call.gas \\u003d \\u00270x\\u0027 + bigInt(call.gas).toString(16);\\n            call.gasUsed \\u003d call.gas\\n        }\\n        delete call.gasIn; delete call.gasCost;\\n        delete call.outOff; delete call.outLen;\\n\\n        // Flatten the failed call into its parent\\n        var left \\u003d this.callstack.length;\\n        if (left \\u003e 0) {\\n            if (this.callstack[left-1].calls \\u003d\\u003d\\u003d undefined) {\\n                this.callstack[left-1].calls \\u003d [];\\n            }\\n            this.callstack[left-1].calls.push(call);\\n            return;\\n        }\\n        // Last call failed too, leave it in the stack\\n        this.callstack.push(call);\\n    },\\n\\n    // result is invoked when all the opcodes have been iterated over and returns\\n    // the final result of the tracing.\\n    result: function(ctx, db) {\\n        var result \\u003d {\\n            blockNumber: ctx.block,\\n            type:    ctx.type,\\n            from:    toHex(ctx.from),\\n            to:      toHex(ctx.to),\\n            value:   \\u00270x\\u0027 + ctx.value.toString(16),\\n            gas:     \\u00270x\\u0027 + bigInt(ctx.gas).toString(16),\\n            gasUsed: \\u00270x\\u0027 + bigInt(ctx.gasUsed).toString(16),\\n            input:   toHex(ctx.input),\\n            output:  toHex(ctx.output),\\n            time:    ctx.time,\\n        };\\n        if (this.callstack[0].calls !\\u003d\\u003d undefined) {\\n            result.calls \\u003d this.callstack[0].calls;\\n        }\\n        if (this.callstack[0].error !\\u003d\\u003d undefined) {\\n            result.error \\u003d this.callstack[0].error;\\n        } else if (ctx.error !\\u003d\\u003d undefined) {\\n            result.error \\u003d ctx.error;\\n        }\\n        if (result.error !\\u003d\\u003d undefined) {\\n            delete result.output;\\n        }\\n        return this.finalize(result);\\n    },\\n\\n    // finalize recreates a call object using the final desired field oder for json\\n    // serialization. This is a nicety feature to pass meaningfully ordered results\\n    // to users who don\\u0027t interpret it, just display it.\\n    finalize: function(call) {\\n        var sorted \\u003d {\\n            blockNumber: call.blockNumber,\\n            type:    call.type,\\n            from:    call.from,\\n            to:      call.to,\\n            value:   call.value,\\n            gas:     call.gas,\\n            gasUsed: call.gasUsed,\\n            input:   call.input,\\n            output:  call.output,\\n            error:   call.error,\\n            time:    call.time,\\n            calls:   call.calls,\\n\\n        }\\n        for (var key in sorted) {\\n            if (sorted[key] \\u003d\\u003d\\u003d undefined) {\\n                delete sorted[key];\\n            }\\n        }\\n        if (sorted.calls !\\u003d\\u003d undefined) {\\n            for (var i\\u003d0; i\\u003csorted.calls.length; i++) {\\n                sorted.calls[i] \\u003d this.finalize(sorted.calls[i]);\\n            }\\n        }\\n        return sorted;\\n    }\\n}\\n\",\r\n            \"timeout\": \"180s\",\r\n            \"reexec\": 5760\r\n        }\r\n    ],\r\n    \"id\": \"1\"\r\n}\r\n```\r\n\r\n**Expected behavior**\r\nA clear and concise description of what you expected to happen.\r\n\r\nTransaction Hash have to be unique, not duplicated. \r\n\r\n**Screenshots**\r\nIf applicable, add screenshots to help explain your problem.\r\n<img width=\"1390\" alt=\"Screen Shot 2022-12-02 at 8 09 36 PM\" src=\"https://user-images.githubusercontent.com/102578874/205279724-80b8f954-1219-42ec-9539-72ee425b47fb.png\">\r\n\r\n\r\n<img width=\"1395\" alt=\"Screen Shot 2022-12-02 at 8 09 50 PM\" src=\"https://user-images.githubusercontent.com/102578874/205279764-ae3219e8-55c4-45ab-98d1-00a98efbd58b.png\">\r\n\r\n\r\n\r\n**System Specs:**\r\n - OS:\r\n - Package Version (or commit hash):\r\n L2geth version :  `0.5.25`\r\n \r\n L2geth envs; \r\n \r\n ```\r\n     environment:\r\n      CHAIN_ID: 10\r\n      DATADIR: \"/opt/data\"\r\n      NETWORK_ID: 10\r\n      NO_DISCOVER: \"true\"\r\n      NO_USB: \"true\"\r\n      GASPRICE: 0\r\n      GCMODE: archive\r\n      BLOCK_SIGNER_ADDRESS: \"0x00000398232E2064F896018496b4b44b3D62751F\"\r\n      BLOCK_SIGNER_PRIVATE_KEY: \"6587ae678cf4fc9a33000cdbf9f35226b71dcc6a4684a31203241f9bcfd55d27\"\r\n      ETH1_CTC_DEPLOYMENT_HEIGHT: 13596466\r\n      ETH1_SYNC_SERVICE_ENABLE: \"true\"\r\n      ROLLUP_ADDRESS_MANAGER_OWNER_ADDRESS: \"0x9BA6e03D8B90dE867373Db8cF1A58d2F7F006b3A\"\r\n      ROLLUP_CLIENT_HTTP: \"http://data-transport-layer:7878\"\r\n      ROLLUP_DISABLE_TRANSFERS: \"false\"\r\n      ROLLUP_ENABLE_L2_GAS_POLLING: \"false\"\r\n      ROLLUP_GAS_PRICE_ORACLE_OWNER_ADDRESS: \"0x648E3e8101BFaB7bf5997Bd007Fb473786019159\"\r\n      ROLLUP_MAX_CALLDATA_SIZE: 40000\r\n      ROLLUP_POLL_INTERVAL_FLAG: 1s\r\n      ROLLUP_SYNC_SERVICE_ENABLE: \"true\"\r\n      ROLLUP_TIMESTAMP_REFRESH: 5m\r\n      ROLLUP_VERIFIER_ENABLE: \"true\"\r\n      RPC_ADDR: 0.0.0.0\r\n      RPC_API: \"eth,rollup,net,web3,debug\"\r\n      RPC_CORS_DOMAIN: \"*\"\r\n      RPC_ENABLE: \"true\"\r\n      RPC_PORT: 8545\r\n      RPC_VHOSTS: \"*\"\r\n      TARGET_GAS_LIMIT: 15000000\r\n      USING_OVM: \"true\"\r\n      WS_ADDR: 0.0.0.0\r\n      WS_API: \"eth,rollup,net,web3,debug\"\r\n      WS_ORIGINS: \"*\"\r\n      WS: \"true\"\r\n      ROLLUP_BACKEND: l1\r\n      SEQUENCER_CLIENT_HTTP: \"https://mainnet.optimism.io\"\r\n ```\r\n \r\n\r\n**Additional context**\r\nAdd any other context about the problem here.\r\n",
  "closed_by": {
    "login": "smartcontracts",
    "id": 14298799,
    "node_id": "MDQ6VXNlcjE0Mjk4Nzk5",
    "avatar_url": "https://avatars.githubusercontent.com/u/14298799?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/smartcontracts",
    "html_url": "https://github.com/smartcontracts",
    "followers_url": "https://api.github.com/users/smartcontracts/followers",
    "following_url": "https://api.github.com/users/smartcontracts/following{/other_user}",
    "gists_url": "https://api.github.com/users/smartcontracts/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/smartcontracts/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/smartcontracts/subscriptions",
    "organizations_url": "https://api.github.com/users/smartcontracts/orgs",
    "repos_url": "https://api.github.com/users/smartcontracts/repos",
    "events_url": "https://api.github.com/users/smartcontracts/events{/privacy}",
    "received_events_url": "https://api.github.com/users/smartcontracts/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum-optimism/optimism/issues/4169/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum-optimism/optimism/issues/4169/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum-optimism/optimism/issues/comments/1335597607",
    "html_url": "https://github.com/ethereum-optimism/optimism/issues/4169#issuecomment-1335597607",
    "issue_url": "https://api.github.com/repos/ethereum-optimism/optimism/issues/4169",
    "id": 1335597607,
    "node_id": "IC_kwDODjvEJM5Pm5on",
    "user": {
      "login": "smartcontracts",
      "id": 14298799,
      "node_id": "MDQ6VXNlcjE0Mjk4Nzk5",
      "avatar_url": "https://avatars.githubusercontent.com/u/14298799?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/smartcontracts",
      "html_url": "https://github.com/smartcontracts",
      "followers_url": "https://api.github.com/users/smartcontracts/followers",
      "following_url": "https://api.github.com/users/smartcontracts/following{/other_user}",
      "gists_url": "https://api.github.com/users/smartcontracts/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/smartcontracts/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/smartcontracts/subscriptions",
      "organizations_url": "https://api.github.com/users/smartcontracts/orgs",
      "repos_url": "https://api.github.com/users/smartcontracts/repos",
      "events_url": "https://api.github.com/users/smartcontracts/events{/privacy}",
      "received_events_url": "https://api.github.com/users/smartcontracts/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-12-02T17:51:32Z",
    "updated_at": "2022-12-02T17:51:32Z",
    "author_association": "CONTRIBUTOR",
    "body": "Known issue, duplicate of https://github.com/ethereum-optimism/optimism/issues/2010",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum-optimism/optimism/issues/comments/1335597607/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
